00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000037E                            
0000037E                            MainGameLoop:
0000037E 707E                       		moveq	#$7E,d0
00000380 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
00000384 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000388 60F4                       		bra.s	MainGameLoop
0000038A                            ; ===========================================================================
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            ; Main game mode array
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            
0000038A                            GameModeArray:
0000038A 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000038E                            ; ===========================================================================
0000038E 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000392                            ; ===========================================================================
00000392 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000396                            ; ===========================================================================
00000396 6000 0000                  		bra.w	Level		; Normal Level ($0C)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003AA                            ; ===========================================================================
000003AA 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003B0                            ; ===========================================================================
000003B0                            
000003B0                            CheckSumError:
000003B0 6100 0000                  		bsr.w	VDPSetupGame
000003B4 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003BE 7E3F                       		moveq	#$3F,d7
000003C0                            
000003C0                            CheckSum_Red:
000003C0 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C8 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003CC                            
000003CC                            CheckSum_Loop:
000003CC 60FE                       		bra.s	CheckSum_Loop
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            BusError:
000003CE 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003D4 6000                       		bra.s	loc_43A
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            AddressError:
000003D6 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            IllegalInstr:
000003DE 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003E4 54AF 0002                  		addq.l	#2,2(sp)
000003E8 6000                       		bra.s	loc_462
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            ZeroDivide:
000003EA 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ChkInstr:
000003F2 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            TrapvInstr:
000003FA 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            PrivilegeViol:
00000402 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            Trace:
0000040A 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Line1010Emu:
00000412 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000418 54AF 0002                  		addq.l	#2,2(sp)
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1111Emu:
0000041E 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            ErrorExcept:
0000042A 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            loc_43A:
00000432 46FC 2700                  		move	#$2700,sr
00000436 544F                       		addq.w	#2,sp
00000438 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000043C 544F                       		addq.w	#2,sp
0000043E 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000444 6100 0000                  		bsr.w	ShowErrorMsg
00000448 202F 0002                  		move.l	2(sp),d0
0000044C 6100 0000                  		bsr.w	sub_5BA
00000450 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 6000                       		bra.s	loc_478
0000045A                            ; ===========================================================================
0000045A                            
0000045A                            loc_462:
0000045A 46FC 2700                  		move	#$2700,sr
0000045E 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000464 6100 0000                  		bsr.w	ShowErrorMsg
00000468 202F 0002                  		move.l	2(sp),d0
0000046C 6100 0000                  		bsr.w	sub_5BA
00000470                            
00000470                            loc_478:
00000470 6100 0000                  		bsr.w	ErrorWaitForC
00000474 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000047A 46FC 2300                  		move	#$2300,sr
0000047E 4E73                       		rte	
00000480                            
00000480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000480                            
00000480                            
00000480                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000480 4DF9 00C0 0000             		lea	($C00000).l,a6
00000486 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000490 41F9 0000 0000             		lea	(Art_Text).l,a0
00000496 323C 027F                  		move.w	#$27F,d1
0000049A                            
0000049A                            Error_LoadGfx:
0000049A 3C98                       		move.w	(a0)+,(a6)
0000049C 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A0 7000                       		moveq	#0,d0		; clear	d0
000004A2 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004A6 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004AA 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004AE 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004B8 7212                       		moveq	#$12,d1		; number of characters
000004BA                            
000004BA                            Error_LoopChars:
000004BA 7000                       		moveq	#0,d0
000004BC 1018                       		move.b	(a0)+,d0
000004BE 0640 0790                  		addi.w	#$790,d0
000004C2 3C80                       		move.w	d0,(a6)
000004C4 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004C8 4E75                       		rts	
000004CA                            ; End of function ShowErrorMsg
000004CA                            
000004CA                            ; ===========================================================================
000004CA 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004CE 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004D2 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004D6 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004DA 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004DE 0000                       		dc.w asc_5A6-ErrorText
000004E0 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004F3 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000506 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000519 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000052C 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000053F 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000552 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000565 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000578 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000058B 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
0000059E 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005B2 00                         		even
000005B2                            
000005B2                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005B2                            
000005B2                            
000005B2                            sub_5BA:				; XREF: loc_43A; loc_462
000005B2 3CBC 07CA                  		move.w	#$7CA,(a6)
000005B6 7407                       		moveq	#7,d2
000005B8                            
000005B8                            loc_5C0:
000005B8 E998                       		rol.l	#4,d0
000005BA 6100                       		bsr.s	sub_5CA
000005BC 51CA FFFA                  		dbf	d2,loc_5C0
000005C0 4E75                       		rts	
000005C2                            ; End of function sub_5BA
000005C2                            
000005C2                            
000005C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005C2                            
000005C2                            
000005C2                            sub_5CA:				; XREF: sub_5BA
000005C2 3200                       		move.w	d0,d1
000005C4 0241 000F                  		andi.w	#$F,d1
000005C8 0C41 000A                  		cmpi.w	#$A,d1
000005CC 6500                       		bcs.s	loc_5D8
000005CE 5E41                       		addq.w	#7,d1
000005D0                            
000005D0                            loc_5D8:
000005D0 0641 07C0                  		addi.w	#$7C0,d1
000005D4 3C81                       		move.w	d1,(a6)
000005D6 4E75                       		rts	
000005D8                            ; End of function sub_5CA
000005D8                            
000005D8                            
000005D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D8                            
000005D8                            
000005D8                            ErrorWaitForC:				; XREF: loc_478
000005D8 6100 0000                  		bsr.w	ReadJoypads
000005DC 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005E2 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005E6 4E75                       		rts	
000005E8                            ; End of function ErrorWaitForC
000005E8                            
000005E8                            ; ===========================================================================
000005E8                            
000005E8                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D28                            Art_Text_end:		even
00000D28                            
00000D28                            ; ===========================================================================
00000D28                            ;VBlank
00000D28                            loc_B10:				; XREF: Vectors
00000D28 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D2C 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D30 6700                       		beq.s	loc_B88
00000D32 3039 00C0 0004             		move.w	($C00004).l,d0
00000D38 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D42 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D4A                            ;		btst	#6,($FFFFFFF8).w
00000D4A                            ;		beq.s	loc_B42
00000D4A                            ;		move.w	#$700,d0
00000D4A                            ;
00000D4A                            ;loc_B3E:
00000D4A                            ;		dbf	d0,loc_B3E
00000D4A                            
00000D4A                            ;loc_B42:
00000D4A 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D4E 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D54 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D5A 0240 003E                  		andi.w	#$3E,d0
00000D5E 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D62 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D66                            
00000D66                            loc_B5E:				; XREF: loc_B88
00000D66 4EB9 0000 0000             		jsr	sub_71B4C
00000D6C                            
00000D6C                            loc_B64:				; XREF: loc_D50
00000D6C 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D70 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D74 4E73                       		rte	
00000D76                            ; ===========================================================================
00000D76 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D7A 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D7E 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D82 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D86 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D8A 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D8E 0000                       		dc.w loc_E72-off_B6E
00000D90                            ; ===========================================================================
00000D90                            
00000D90                            loc_B88:				; XREF: loc_B10; off_B6E
00000D90 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000D96 6700                       		beq.s	loc_B9A
00000D98 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000D9E 6600 FFC6                  		bne.w	loc_B5E
00000DA2                            
00000DA2                            loc_B9A:
00000DA2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DA8 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DAC 3039 00C0 0004             		move.w	($C00004).l,d0
00000DB2                            ;		btst	#6,($FFFFFFF8).w
00000DB2                            ;		beq.s	loc_BBA
00000DB2                            ;		move.w	#$700,d0
00000DB2                            ;
00000DB2                            ;loc_BB6:
00000DB2                            ;		dbf	d0,loc_BB6
00000DB2                            ;
00000DB2                            ;loc_BBA:
00000DB2 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DB8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DC0                            
00000DC0                            loc_BC8:
00000DC0 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DC8 66F6                       		bne.s	loc_BC8
00000DCA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DCE 6600                       		bne.s	loc_BFE
00000DD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DDC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DE2 3ABC 977F                  		move.w	#$977F,(a5)
00000DE6 3ABC C000                  		move.w	#$C000,(a5)
00000DEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DF4 6000                       		bra.s	loc_C22
00000DF6                            ; ===========================================================================
00000DF6                            
00000DF6                            loc_BFE:				; XREF: loc_BC8
00000DF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E02 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E08 3ABC 977F                  		move.w	#$977F,(a5)
00000E0C 3ABC C000                  		move.w	#$C000,(a5)
00000E10 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1A                            
00000E1A                            loc_C22:				; XREF: loc_BC8
00000E1A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E1E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E26 6000 FF3E                  		bra.w	loc_B5E
00000E2A                            ; ===========================================================================
00000E2A                            
00000E2A                            loc_C32:				; XREF: off_B6E
00000E2A 6100 0000                  		bsr.w	sub_106E
00000E2E                            
00000E2E                            loc_C36:				; XREF: off_B6E
00000E2E 4A78 F614                  		tst.w	($FFFFF614).w
00000E32 6700 0000                  		beq.w	locret_C42
00000E36 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E3A                            
00000E3A                            locret_C42:
00000E3A 4E75                       		rts	
00000E3C                            ; ===========================================================================
00000E3C                            
00000E3C                            loc_C44:				; XREF: off_B6E
00000E3C 6100 0000                  		bsr.w	sub_106E
00000E40 6100 0000                  		bsr.w	sub_6886
00000E44 6100 0000                  		bsr.w	sub_1642
00000E48 4A78 F614                  		tst.w	($FFFFF614).w
00000E4C 6700 0000                  		beq.w	locret_C5C
00000E50 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E54                            
00000E54                            locret_C5C:
00000E54 4E75                       		rts	
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C5E:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A 4E75                       		rts	
00000E5C                            ; ===========================================================================
00000E5C                            
00000E5C                            loc_C64:				; XREF: off_B6E
00000E5C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E62 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E66                            
00000E66                            loc_C6E:				; XREF: off_B6E
00000E66 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E6E                            
00000E6E                            loc_C76:
00000E6E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E76 66F6                       		bne.s	loc_C76		; if not, branch
00000E78 6100 0000                  		bsr.w	ReadJoypads
00000E7C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E80 6600                       		bne.s	loc_CB0
00000E82 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E88 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E8E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E94 3ABC 977F                  		move.w	#$977F,(a5)
00000E98 3ABC C000                  		move.w	#$C000,(a5)
00000E9C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EA2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA6 6000                       		bra.s	loc_CD4
00000EA8                            ; ===========================================================================
00000EA8                            
00000EA8                            loc_CB0:				; XREF: loc_C76
00000EA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EAE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EBA 3ABC 977F                  		move.w	#$977F,(a5)
00000EBE 3ABC C000                  		move.w	#$C000,(a5)
00000EC2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECC                            
00000ECC                            loc_CD4:				; XREF: loc_C76
00000ECC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EDC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F00 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F06 3ABC 977F                  		move.w	#$977F,(a5)
00000F0A 3ABC 7800                  		move.w	#$7800,(a5)
00000F0E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F14 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F18 4A38 F767                  		tst.b	($FFFFF767).w
00000F1C 6700                       		beq.s	loc_D50
00000F1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F24 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F2A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F30 3ABC 977F                  		move.w	#$977F,(a5)
00000F34 3ABC 7000                  		move.w	#$7000,(a5)
00000F38 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F42 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F48                            
00000F48                            loc_D50:
00000F48 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F50 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F56 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F5C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F62 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F68 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F6E 6400                       		bcc.s	Demo_Time
00000F70 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F76 588F                       		addq.l	#4,sp
00000F78 6000 FDF2                  		bra.w	loc_B64
00000F7C                            
00000F7C                            ; ---------------------------------------------------------------------------
00000F7C                            ; Subroutine to	run a demo for an amount of time
00000F7C                            ; ---------------------------------------------------------------------------
00000F7C                            
00000F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7C                            
00000F7C                            
00000F7C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F7C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F80 4EB9 0000 0000             		jsr	AniArt_Load
00000F86 4EB9 0000 0000             		jsr	HudUpdate
00000F8C 6100 0000                  		bsr.w	sub_165E
00000F90 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000F94 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000F98 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000F9C                            
00000F9C                            Demo_TimeEnd:
00000F9C 4E75                       		rts	
00000F9E                            ; End of function Demo_Time
00000F9E                            
00000F9E                            ; ===========================================================================
00000F9E                            
00000F9E                            loc_DA6:				; XREF: off_B6E
00000F9E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA6                            
00000FA6                            loc_DAE:
00000FA6 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FAE 66F6                       		bne.s	loc_DAE		; if not, branch
00000FB0 6100 0000                  		bsr.w	ReadJoypads
00000FB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC6 3ABC 977F                  		move.w	#$977F,(a5)
00000FCA 3ABC C000                  		move.w	#$C000,(a5)
00000FCE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FD4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FDE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FE4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FEA 3ABC 977F                  		move.w	#$977F,(a5)
00000FEE 3ABC 7800                  		move.w	#$7800,(a5)
00000FF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001002 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001008 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000100E 3ABC 977F                  		move.w	#$977F,(a5)
00001012 3ABC 7C00                  		move.w	#$7C00,(a5)
00001016 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000101C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001020 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001028 6100 0000                  		bsr.w	PalCycle_SS
0000102C 4A38 F767                  		tst.b	($FFFFF767).w
00001030 6700                       		beq.s	loc_E64
00001032 4BF9 00C0 0004             		lea	($C00004).l,a5
00001038 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000103E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001044 3ABC 977F                  		move.w	#$977F,(a5)
00001048 3ABC 7000                  		move.w	#$7000,(a5)
0000104C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001052 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001056 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000105C                            
0000105C                            loc_E64:
0000105C 4A78 F614                  		tst.w	($FFFFF614).w
00001060 6700 0000                  		beq.w	locret_E70
00001064 5378 F614                  		subq.w	#1,($FFFFF614).w
00001068                            
00001068                            locret_E70:
00001068 4E75                       		rts	
0000106A                            ; ===========================================================================
0000106A                            
0000106A                            loc_E72:				; XREF: off_B6E
0000106A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001072                            
00001072                            loc_E7A:
00001072 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107A 66F6                       		bne.s	loc_E7A		; if not, branch
0000107C 6100 0000                  		bsr.w	ReadJoypads
00001080 4A38 F64E                  		tst.b	($FFFFF64E).w
00001084 6600                       		bne.s	loc_EB4
00001086 4BF9 00C0 0004             		lea	($C00004).l,a5
0000108C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001092 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001098 3ABC 977F                  		move.w	#$977F,(a5)
0000109C 3ABC C000                  		move.w	#$C000,(a5)
000010A0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AA 6000                       		bra.s	loc_ED8
000010AC                            ; ===========================================================================
000010AC                            
000010AC                            loc_EB4:				; XREF: loc_E7A
000010AC 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010BE 3ABC 977F                  		move.w	#$977F,(a5)
000010C2 3ABC C000                  		move.w	#$C000,(a5)
000010C6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D0                            
000010D0                            loc_ED8:				; XREF: loc_E7A
000010D0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010E0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E6                            
000010E6                            loc_EEE:
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7C00                  		move.w	#$7C00,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001104 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7800                  		move.w	#$7800,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 4A38 F767                  		tst.b	($FFFFF767).w
00001120 6700                       		beq.s	loc_F54
00001122 4BF9 00C0 0004             		lea	($C00004).l,a5
00001128 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000112E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001134 3ABC 977F                  		move.w	#$977F,(a5)
00001138 3ABC 7000                  		move.w	#$7000,(a5)
0000113C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001142 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001146 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000114C                            
0000114C                            loc_F54:
0000114C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001154 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
0000115A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001160 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001166 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
0000116C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001170 4EB9 0000 0000             		jsr	AniArt_Load
00001176 4EB9 0000 0000             		jsr	HudUpdate
0000117C 6100 0000                  		bsr.w	sub_1642
00001180 4E75                       		rts	
00001182                            ; ===========================================================================
00001182                            
00001182                            loc_F8A:				; XREF: off_B6E
00001182 6100 0000                  		bsr.w	sub_106E
00001186 5238 F628                  		addq.b	#1,($FFFFF628).w
0000118A 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00001190 4E75                       		rts	
00001192                            ; ===========================================================================
00001192                            
00001192                            loc_F9A:				; XREF: off_B6E
00001192 6100 0000                  		bsr.w	sub_106E
00001196 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000119A 6000 0000                  		bra.w	sub_1642
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_FA6:				; XREF: off_B6E
0000119E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011A6                            
000011A6                            loc_FAE:
000011A6 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011AE 66F6                       		bne.s	loc_FAE		; if not, branch
000011B0 6100 0000                  		bsr.w	ReadJoypads
000011B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000011BA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011C0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011C6 3ABC 977F                  		move.w	#$977F,(a5)
000011CA 3ABC C000                  		move.w	#$C000,(a5)
000011CE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011D4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011DE 2ABC 9401 9340             		move.l	#$94019340,(a5)
000011E4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000011EA 3ABC 977F                  		move.w	#$977F,(a5)
000011EE 3ABC 7800                  		move.w	#$7800,(a5)
000011F2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001202 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001208 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000120E 3ABC 977F                  		move.w	#$977F,(a5)
00001212 3ABC 7C00                  		move.w	#$7C00,(a5)
00001216 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000121C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001220 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001228 4A38 F767                  		tst.b	($FFFFF767).w
0000122C 6700                       		beq.s	loc_1060
0000122E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001234 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000123A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001240 3ABC 977F                  		move.w	#$977F,(a5)
00001244 3ABC 7000                  		move.w	#$7000,(a5)
00001248 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000124E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001252 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001258                            
00001258                            loc_1060:
00001258 4A78 F614                  		tst.w	($FFFFF614).w
0000125C 6700 0000                  		beq.w	locret_106C
00001260 5378 F614                  		subq.w	#1,($FFFFF614).w
00001264                            
00001264                            locret_106C:
00001264 4E75                       		rts	
00001266                            
00001266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001266                            
00001266                            
00001266                            sub_106E:				; XREF: loc_C32; et al
00001266 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000126E                            
0000126E                            loc_1076:
0000126E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001276 66F6                       		bne.s	loc_1076	; if not, branch
00001278 6100 0000                  		bsr.w	ReadJoypads
0000127C 4A38 F64E                  		tst.b	($FFFFF64E).w
00001280 6600                       		bne.s	loc_10B0
00001282 4BF9 00C0 0004             		lea	($C00004).l,a5
00001288 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000128E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001294 3ABC 977F                  		move.w	#$977F,(a5)
00001298 3ABC C000                  		move.w	#$C000,(a5)
0000129C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012A2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A6 6000                       		bra.s	loc_10D4
000012A8                            ; ===========================================================================
000012A8                            
000012A8                            loc_10B0:				; XREF: sub_106E
000012A8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012AE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012BA 3ABC 977F                  		move.w	#$977F,(a5)
000012BE 3ABC C000                  		move.w	#$C000,(a5)
000012C2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012C8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CC                            
000012CC                            loc_10D4:				; XREF: sub_106E
000012CC 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D2 2ABC 9401 9340             		move.l	#$94019340,(a5)
000012D8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000012DE 3ABC 977F                  		move.w	#$977F,(a5)
000012E2 3ABC 7800                  		move.w	#$7800,(a5)
000012E6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012EC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012FC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001302 3ABC 977F                  		move.w	#$977F,(a5)
00001306 3ABC 7C00                  		move.w	#$7C00,(a5)
0000130A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001310 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001314 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000131C 4E75                       		rts	
0000131E                            ; End of function sub_106E
0000131E                            
0000131E                            ; ---------------------------------------------------------------------------
0000131E                            ; Subroutine to	move pallets from the RAM to CRAM
0000131E                            ; ---------------------------------------------------------------------------
0000131E                            
0000131E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000131E                            
0000131E                            
0000131E                            PalToCRAM:
0000131E 46FC 2700                  		move	#$2700,sr
00001322 4A78 F644                  		tst.w	($FFFFF644).w
00001326 6700                       		beq.s	locret_119C
00001328 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000132E 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001332 43F9 00C0 0000             		lea	($C00000).l,a1
00001338 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000133C 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001344 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001346 2298                       		move.l	(a0)+,(a1)
00001348 2298                       		move.l	(a0)+,(a1)
0000134A 2298                       		move.l	(a0)+,(a1)
0000134C 2298                       		move.l	(a0)+,(a1)
0000134E 2298                       		move.l	(a0)+,(a1)
00001350 2298                       		move.l	(a0)+,(a1)
00001352 2298                       		move.l	(a0)+,(a1)
00001354 2298                       		move.l	(a0)+,(a1)
00001356 2298                       		move.l	(a0)+,(a1)
00001358 2298                       		move.l	(a0)+,(a1)
0000135A 2298                       		move.l	(a0)+,(a1)
0000135C 2298                       		move.l	(a0)+,(a1)
0000135E 2298                       		move.l	(a0)+,(a1)
00001360 2298                       		move.l	(a0)+,(a1)
00001362 2298                       		move.l	(a0)+,(a1)
00001364 2298                       		move.l	(a0)+,(a1)
00001366 2298                       		move.l	(a0)+,(a1)
00001368 2298                       		move.l	(a0)+,(a1)
0000136A 2298                       		move.l	(a0)+,(a1)
0000136C 2298                       		move.l	(a0)+,(a1)
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000138A 4CDF 0300                  		movem.l	(sp)+,a0-a1
0000138E 4A38 F64F                  		tst.b	($FFFFF64F).w
00001392 6600                       		bne.s	loc_119E
00001394                            
00001394                            locret_119C:
00001394 4E73                       		rte	
00001396                            ; ===========================================================================
00001396                            
00001396                            loc_119E:				; XREF: PalToCRAM
00001396 4238 F64F                  		clr.b	($FFFFF64F).w
0000139A 48E7 FFFE                  		movem.l	d0-a6,-(sp)
0000139E 6100 FBDC                  		bsr.w	Demo_Time
000013A2 4EB9 0000 0000             		jsr	sub_71B4C
000013A8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013AC 4E73                       		rte	
000013AE                            ; End of function PalToCRAM
000013AE                            
000013AE                            ; ---------------------------------------------------------------------------
000013AE                            ; Subroutine to	initialise joypads
000013AE                            ; ---------------------------------------------------------------------------
000013AE                            
000013AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013AE                            
000013AE                            
000013AE                            JoypadInit:				; XREF: GameClrRAM
000013AE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013B6                            
000013B6                            Joypad_WaitZ80:
000013B6 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013BE 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013C0 7040                       		moveq	#$40,d0
000013C2 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013C8 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013CE 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013D4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013DC 4E75                       		rts	
000013DE                            ; End of function JoypadInit
000013DE                            
000013DE                            ; ---------------------------------------------------------------------------
000013DE                            ; Subroutine to	read joypad input, and send it to the RAM
000013DE                            ; ---------------------------------------------------------------------------
000013DE                            
000013DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DE                            
000013DE                            
000013DE                            ReadJoypads:
000013DE 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000013E2 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000013E8 6100                       		bsr.s	Joypad_Read	; do the first joypad
000013EA 5449                       		addq.w	#2,a1		; do the second	joypad
000013EC                            
000013EC                            Joypad_Read:
000013EC 12BC 0000                  		move.b	#0,(a1)
000013F0 4E71                       		nop	
000013F2 4E71                       		nop	
000013F4 1011                       		move.b	(a1),d0
000013F6 E508                       		lsl.b	#2,d0
000013F8 0200 00C0                  		andi.b	#$C0,d0
000013FC 12BC 0040                  		move.b	#$40,(a1)
00001400 4E71                       		nop	
00001402 4E71                       		nop	
00001404 1211                       		move.b	(a1),d1
00001406 0201 003F                  		andi.b	#$3F,d1
0000140A 8001                       		or.b	d1,d0
0000140C 4600                       		not.b	d0
0000140E 1210                       		move.b	(a0),d1
00001410 B101                       		eor.b	d0,d1
00001412 10C0                       		move.b	d0,(a0)+
00001414 C200                       		and.b	d0,d1
00001416 10C1                       		move.b	d1,(a0)+
00001418 4E75                       		rts	
0000141A                            ; End of function ReadJoypads
0000141A                            
0000141A                            
0000141A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141A                            
0000141A                            
0000141A                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000141A 41F9 00C0 0004             		lea	($C00004).l,a0
00001420 43F9 00C0 0000             		lea	($C00000).l,a1
00001426 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000142C 7E12                       		moveq	#$12,d7
0000142E                            
0000142E                            VDP_Loop:
0000142E 309A                       		move.w	(a2)+,(a0)
00001430 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001434                            
00001434 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000143A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001440 6700                       		beq.s	.UseV28			; If not, skip
00001442 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001446                            .UseV28:
00001446 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000144A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001450 7000                       		moveq	#0,d0
00001452 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000145C 3E3C 003F                  		move.w	#$3F,d7
00001460                            
00001460                            VDP_ClrCRAM:
00001460 3280                       		move.w	d0,(a1)
00001462 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001466                            
00001466 42B8 F616                  		clr.l	($FFFFF616).w
0000146A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000146E 2F01                       		move.l	d1,-(sp)
00001470 4BF9 00C0 0004             		lea	($C00004).l,a5
00001476 3ABC 8F01                  		move.w	#$8F01,(a5)
0000147A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001480 3ABC 9780                  		move.w	#$9780,(a5)
00001484 2ABC 4000 0080             		move.l	#$40000080,(a5)
0000148A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001492                            
00001492                            loc_128E:
00001492 3215                       		move.w	(a5),d1
00001494 0801 0001                  		btst	#1,d1
00001498 66F8                       		bne.s	loc_128E
0000149A                            
0000149A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000149E 221F                       		move.l	(sp)+,d1
000014A0 4E75                       		rts	
000014A2                            ; End of function VDPSetupGame
000014A2                            
000014A2                            ; ===========================================================================
000014A2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014AA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014B2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014BA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014C2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014C8                            
000014C8                            ; ---------------------------------------------------------------------------
000014C8                            ; Subroutine to	clear the screen
000014C8                            ; ---------------------------------------------------------------------------
000014C8                            
000014C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C8                            
000014C8                            
000014C8                            ClearScreen:
000014C8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014CE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014D2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014D8 3ABC 9780                  		move.w	#$9780,(a5)
000014DC 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014E2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000014EA                            
000014EA                            loc_12E6:
000014EA 3215                       		move.w	(a5),d1
000014EC 0801 0001                  		btst	#1,d1
000014F0 66F8                       		bne.s	loc_12E6
000014F2                            
000014F2 3ABC 8F02                  		move.w	#$8F02,(a5)
000014F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000014FC 3ABC 8F01                  		move.w	#$8F01,(a5)
00001500 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001506 3ABC 9780                  		move.w	#$9780,(a5)
0000150A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001510 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001518                            
00001518                            loc_1314:
00001518 3215                       		move.w	(a5),d1
0000151A 0801 0001                  		btst	#1,d1
0000151E 66F8                       		bne.s	loc_1314
00001520                            
00001520 3ABC 8F02                  		move.w	#$8F02,(a5)
00001524 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000152C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001534 43F8 F800                  		lea	($FFFFF800).w,a1
00001538 7000                       		moveq	#0,d0
0000153A 323C 009F                  		move.w	#$9F,d1
0000153E                            
0000153E                            loc_133A:
0000153E 22C0                       		move.l	d0,(a1)+
00001540 51C9 FFFC                  		dbf	d1,loc_133A
00001544                            
00001544 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001548 7000                       		moveq	#0,d0
0000154A 323C 00FF                  		move.w	#$FF,d1
0000154E                            
0000154E                            loc_134A:
0000154E 22C0                       		move.l	d0,(a1)+
00001550 51C9 FFFC                  		dbf	d1,loc_134A
00001554 4E75                       		rts	
00001556                            ; End of function ClearScreen
00001556                            
00001556                            ; ---------------------------------------------------------------------------
00001556                            ; Subroutine to	load the sound driver
00001556                            ; ---------------------------------------------------------------------------
00001556                            
00001556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001556                            
00001556                            
00001556                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001556 4E71                       		nop	
00001558 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001560 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001568 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000156E 43F9 00A0 0000             		lea	($A00000).l,a1
00001574 6100 0000                  		bsr.w	KosDec		; decompress
00001578 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001580 4E71                       		nop	
00001582 4E71                       		nop	
00001584 4E71                       		nop	
00001586 4E71                       		nop	
00001588 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001590 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001598 4E75                       		rts	
0000159A                            ; End of function SoundDriverLoad
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	play a sound or	music track
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            PlaySound:
0000159A 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000159E 4E75                       		rts	
000015A0                            ; End of function PlaySound
000015A0                            
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Subroutine to	play a special sound/music (E0-E4)
000015A0                            ;
000015A0                            ; E0 - Fade out
000015A0                            ; E1 - Sega
000015A0                            ; E2 - Speed up
000015A0                            ; E3 - Normal speed
000015A0                            ; E4 - Stop
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A0                            
000015A0                            
000015A0                            PlaySound_Special:
000015A0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015A4 4E75                       		rts	
000015A6                            ; End of function PlaySound_Special
000015A6                            
000015A6                            ; ===========================================================================
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            ; Unused sound/music subroutine
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            
000015A6                            PlaySound_Unk:
000015A6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015AA 4E75                       		rts	
000015AC                            
000015AC                            ; ---------------------------------------------------------------------------
000015AC                            ; Subroutine to	pause the game
000015AC                            ; ---------------------------------------------------------------------------
000015AC                            
000015AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AC                            
000015AC                            
000015AC                            PauseGame:				; XREF: Level_MainLoop; et al
000015AC 4E71                       		nop	
000015AE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015B2 6700                       		beq.s	Unpause		; if not, branch
000015B4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015B8 6600                       		bne.s	loc_13BE	; if yes, branch
000015BA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015C2                            
000015C2                            loc_13BE:
000015C2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015C8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015CE                            
000015CE                            loc_13CA:
000015CE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015D4 6100 0000                  		bsr.w	DelayProgram
000015D8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015DE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000015E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000015E6 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000015EC 4E71                       		nop	
000015EE 6000                       		bra.s	loc_1404
000015F0                            ; ===========================================================================
000015F0                            
000015F0                            Pause_ChkBC:				; XREF: PauseGame
000015F0 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000015F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015F8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000015FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001600                            
00001600                            Pause_ChkStart:				; XREF: PauseGame
00001600 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001606 67C6                       		beq.s	loc_13CA	; if not, branch
00001608                            
00001608                            loc_1404:				; XREF: PauseGame
00001608 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000160E                            
0000160E                            Unpause:				; XREF: PauseGame
0000160E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001614                            
00001614                            Pause_DoNothing:			; XREF: PauseGame
00001614 4E75                       		rts	
00001616                            ; ===========================================================================
00001616                            
00001616                            Pause_SlowMo:				; XREF: PauseGame
00001616 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000161C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001622 4E75                       		rts	
00001624                            ; End of function PauseGame
00001624                            
00001624                            ; ---------------------------------------------------------------------------
00001624                            ; Subroutine to	display	patterns via the VDP
00001624                            ; ---------------------------------------------------------------------------
00001624                            
00001624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001624                            
00001624                            
00001624                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001624 4DF9 00C0 0000             		lea	($C00000).l,a6
0000162A 283C 0080 0000             		move.l	#$800000,d4
00001630                            
00001630                            loc_142C:
00001630 2D40 0004                  		move.l	d0,4(a6)
00001634 3601                       		move.w	d1,d3
00001636                            
00001636                            loc_1432:
00001636 3C99                       		move.w	(a1)+,(a6)
00001638 51CB FFFC                  		dbf	d3,loc_1432
0000163C D084                       		add.l	d4,d0
0000163E 51CA FFF0                  		dbf	d2,loc_142C
00001642 4E75                       		rts	
00001644                            ; End of function ShowVDPGraphics
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Nemesis decompression	algorithm
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            NemDec:
00001644 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001648 47F9 0000 0000             		lea	(loc_1502).l,a3
0000164E 49F9 00C0 0000             		lea	($C00000).l,a4
00001654 6000                       		bra.s	loc_145C
00001656                            ; ===========================================================================
00001656 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000165A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001660                            
00001660                            loc_145C:				; XREF: NemDec
00001660 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001664 3418                       		move.w	(a0)+,d2
00001666 E34A                       		lsl.w	#1,d2
00001668 6400                       		bcc.s	loc_146A
0000166A D6FC 000A                  		adda.w	#$A,a3
0000166E                            
0000166E                            loc_146A:
0000166E E54A                       		lsl.w	#2,d2
00001670 3A42                       		movea.w	d2,a5
00001672 7608                       		moveq	#8,d3
00001674 7400                       		moveq	#0,d2
00001676 7800                       		moveq	#0,d4
00001678 6100 0000                  		bsr.w	NemDec4
0000167C 1A18                       		move.b	(a0)+,d5
0000167E E145                       		asl.w	#8,d5
00001680 1A18                       		move.b	(a0)+,d5
00001682 3C3C 0010                  		move.w	#$10,d6
00001686 6100                       		bsr.s	NemDec2
00001688 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
0000168C 4E75                       		rts	
0000168E                            ; End of function NemDec
0000168E                            
0000168E                            
0000168E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000168E                            
0000168E                            
0000168E                            NemDec2:				; XREF: NemDec
0000168E 3E06                       		move.w	d6,d7
00001690 5147                       		subq.w	#8,d7
00001692 3205                       		move.w	d5,d1
00001694 EE69                       		lsr.w	d7,d1
00001696 0C01 00FC                  		cmpi.b	#-4,d1
0000169A 6400                       		bcc.s	loc_14D6
0000169C 0241 00FF                  		andi.w	#$FF,d1
000016A0 D241                       		add.w	d1,d1
000016A2 1031 1000                  		move.b	(a1,d1.w),d0
000016A6 4880                       		ext.w	d0
000016A8 9C40                       		sub.w	d0,d6
000016AA 0C46 0009                  		cmpi.w	#9,d6
000016AE 6400                       		bcc.s	loc_14B2
000016B0 5046                       		addq.w	#8,d6
000016B2 E145                       		asl.w	#8,d5
000016B4 1A18                       		move.b	(a0)+,d5
000016B6                            
000016B6                            loc_14B2:
000016B6 1231 1001                  		move.b	1(a1,d1.w),d1
000016BA 3001                       		move.w	d1,d0
000016BC 0241 000F                  		andi.w	#$F,d1
000016C0 0240 00F0                  		andi.w	#$F0,d0
000016C4                            
000016C4                            loc_14C0:				; XREF: NemDec3
000016C4 E848                       		lsr.w	#4,d0
000016C6                            
000016C6                            loc_14C2:				; XREF: NemDec3
000016C6 E98C                       		lsl.l	#4,d4
000016C8 8801                       		or.b	d1,d4
000016CA 5343                       		subq.w	#1,d3
000016CC 6600                       		bne.s	loc_14D0
000016CE 4ED3                       		jmp	(a3)
000016D0                            ; End of function NemDec2
000016D0                            
000016D0                            
000016D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D0                            
000016D0                            
000016D0                            NemDec3:				; XREF: loc_1502
000016D0 7800                       		moveq	#0,d4
000016D2 7608                       		moveq	#8,d3
000016D4                            
000016D4                            loc_14D0:				; XREF: NemDec2
000016D4 51C8 FFF0                  		dbf	d0,loc_14C2
000016D8 60B4                       		bra.s	NemDec2
000016DA                            ; ===========================================================================
000016DA                            
000016DA                            loc_14D6:				; XREF: NemDec2
000016DA 5D46                       		subq.w	#6,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14E4
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14E4:				; XREF: NemDec3
000016E8 5F46                       		subq.w	#7,d6
000016EA 3205                       		move.w	d5,d1
000016EC EC69                       		lsr.w	d6,d1
000016EE 3001                       		move.w	d1,d0
000016F0 0241 000F                  		andi.w	#$F,d1
000016F4 0240 0070                  		andi.w	#$70,d0
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 64C6                       		bcc.s	loc_14C0
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704 60BE                       		bra.s	loc_14C0
00001706                            ; End of function NemDec3
00001706                            
00001706                            ; ===========================================================================
00001706                            
00001706                            loc_1502:				; XREF: NemDec
00001706 2884                       		move.l	d4,(a4)
00001708 534D                       		subq.w	#1,a5
0000170A 380D                       		move.w	a5,d4
0000170C 66C2                       		bne.s	NemDec3
0000170E 4E75                       		rts	
00001710                            ; ===========================================================================
00001710 B982                       		eor.l	d4,d2
00001712 2882                       		move.l	d2,(a4)
00001714 534D                       		subq.w	#1,a5
00001716 380D                       		move.w	a5,d4
00001718 66B6                       		bne.s	NemDec3
0000171A 4E75                       		rts	
0000171C                            ; ===========================================================================
0000171C                            
0000171C                            loc_1518:				; XREF: NemDec
0000171C 28C4                       		move.l	d4,(a4)+
0000171E 534D                       		subq.w	#1,a5
00001720 380D                       		move.w	a5,d4
00001722 66AC                       		bne.s	NemDec3
00001724 4E75                       		rts	
00001726                            ; ===========================================================================
00001726 B982                       		eor.l	d4,d2
00001728 28C2                       		move.l	d2,(a4)+
0000172A 534D                       		subq.w	#1,a5
0000172C 380D                       		move.w	a5,d4
0000172E 66A0                       		bne.s	NemDec3
00001730 4E75                       		rts	
00001732                            
00001732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001732                            
00001732                            
00001732                            NemDec4:				; XREF: NemDec
00001732 1018                       		move.b	(a0)+,d0
00001734                            
00001734                            loc_1530:
00001734 0C00 00FF                  		cmpi.b	#-1,d0
00001738 6600                       		bne.s	loc_1538
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1538:				; XREF: NemDec4
0000173C 3E00                       		move.w	d0,d7
0000173E                            
0000173E                            loc_153A:
0000173E 1018                       		move.b	(a0)+,d0
00001740 0C00 0080                  		cmpi.b	#$80,d0
00001744 64EE                       		bcc.s	loc_1530
00001746 1200                       		move.b	d0,d1
00001748 0247 000F                  		andi.w	#$F,d7
0000174C 0241 0070                  		andi.w	#$70,d1
00001750 8E41                       		or.w	d1,d7
00001752 0240 000F                  		andi.w	#$F,d0
00001756 1200                       		move.b	d0,d1
00001758 E149                       		lsl.w	#8,d1
0000175A 8E41                       		or.w	d1,d7
0000175C 7208                       		moveq	#8,d1
0000175E 9240                       		sub.w	d0,d1
00001760 6600                       		bne.s	loc_1568
00001762 1018                       		move.b	(a0)+,d0
00001764 D040                       		add.w	d0,d0
00001766 3387 0000                  		move.w	d7,(a1,d0.w)
0000176A 60D2                       		bra.s	loc_153A
0000176C                            ; ===========================================================================
0000176C                            
0000176C                            loc_1568:				; XREF: NemDec4
0000176C 1018                       		move.b	(a0)+,d0
0000176E E368                       		lsl.w	d1,d0
00001770 D040                       		add.w	d0,d0
00001772 7A01                       		moveq	#1,d5
00001774 E36D                       		lsl.w	d1,d5
00001776 5345                       		subq.w	#1,d5
00001778                            
00001778                            loc_1574:
00001778 3387 0000                  		move.w	d7,(a1,d0.w)
0000177C 5440                       		addq.w	#2,d0
0000177E 51CD FFF8                  		dbf	d5,loc_1574
00001782 60BA                       		bra.s	loc_153A
00001784                            ; End of function NemDec4
00001784                            
00001784                            ; ---------------------------------------------------------------------------
00001784                            ; Subroutine to	load pattern load cues
00001784                            ; ---------------------------------------------------------------------------
00001784                            
00001784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001784                            
00001784                            
00001784                            LoadPLC:
00001784 48E7 0060                  		movem.l	a1-a2,-(sp)
00001788 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000178E D040                       		add.w	d0,d0
00001790 3031 0000                  		move.w	(a1,d0.w),d0
00001794 43F1 0000                  		lea	(a1,d0.w),a1
00001798 45F8 F680                  		lea	($FFFFF680).w,a2
0000179C                            
0000179C                            loc_1598:
0000179C 4A92                       		tst.l	(a2)
0000179E 6700                       		beq.s	loc_15A0
000017A0 5C4A                       		addq.w	#6,a2
000017A2 60F8                       		bra.s	loc_1598
000017A4                            ; ===========================================================================
000017A4                            
000017A4                            loc_15A0:				; XREF: LoadPLC
000017A4 3019                       		move.w	(a1)+,d0
000017A6 6B00                       		bmi.s	loc_15AC
000017A8                            
000017A8                            loc_15A4:
000017A8 24D9                       		move.l	(a1)+,(a2)+
000017AA 34D9                       		move.w	(a1)+,(a2)+
000017AC 51C8 FFFA                  		dbf	d0,loc_15A4
000017B0                            
000017B0                            loc_15AC:
000017B0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017B4 4E75                       		rts	
000017B6                            ; End of function LoadPLC
000017B6                            
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC2:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 6100                       		bsr.s	ClearPLC
000017CC 45F8 F680                  		lea	($FFFFF680).w,a2
000017D0 3019                       		move.w	(a1)+,d0
000017D2 6B00                       		bmi.s	loc_15D8
000017D4                            
000017D4                            loc_15D0:
000017D4 24D9                       		move.l	(a1)+,(a2)+
000017D6 34D9                       		move.w	(a1)+,(a2)+
000017D8 51C8 FFFA                  		dbf	d0,loc_15D0
000017DC                            
000017DC                            loc_15D8:
000017DC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E0 4E75                       		rts	
000017E2                            ; End of function LoadPLC2
000017E2                            
000017E2                            ; ---------------------------------------------------------------------------
000017E2                            ; Subroutine to	clear the pattern load cues
000017E2                            ; ---------------------------------------------------------------------------
000017E2                            
000017E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E2                            
000017E2                            
000017E2                            ClearPLC:				; XREF: LoadPLC2
000017E2 45F8 F680                  		lea	($FFFFF680).w,a2
000017E6 701F                       		moveq	#$1F,d0
000017E8                            
000017E8                            ClearPLC_Loop:
000017E8 429A                       		clr.l	(a2)+
000017EA 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000017EE 4E75                       		rts	
000017F0                            ; End of function ClearPLC
000017F0                            
000017F0                            ; ---------------------------------------------------------------------------
000017F0                            ; Subroutine to	use graphics listed in a pattern load cue
000017F0                            ; ---------------------------------------------------------------------------
000017F0                            
000017F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017F0                            
000017F0                            
000017F0                            RunPLC_RAM:				; XREF: Pal_FadeTo
000017F0 4AB8 F680                  		tst.l	($FFFFF680).w
000017F4 6700                       		beq.s	locret_1640
000017F6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017FA 6600                       		bne.s	locret_1640
000017FC 2078 F680                  		movea.l	($FFFFF680).w,a0
00001800 47F9 0000 1706             		lea	(loc_1502).l,a3
00001806 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000180A 3418                       		move.w	(a0)+,d2
0000180C 6A00                       		bpl.s	loc_160E
0000180E D6FC 000A                  		adda.w	#$A,a3
00001812                            
00001812                            loc_160E:
00001812 0242 7FFF                  		andi.w	#$7FFF,d2
00001816 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000181A 6100 FF16                  		bsr.w	NemDec4
0000181E 1A18                       		move.b	(a0)+,d5
00001820 E145                       		asl.w	#8,d5
00001822 1A18                       		move.b	(a0)+,d5
00001824 7C10                       		moveq	#$10,d6
00001826 7000                       		moveq	#0,d0
00001828 21C8 F680                  		move.l	a0,($FFFFF680).w
0000182C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001838 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_1640:
00001844 4E75                       		rts	
00001846                            ; End of function RunPLC_RAM
00001846                            
00001846                            
00001846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001846                            
00001846                            
00001846                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001846 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000184A 6700 0000                  		beq.w	locret_16DA
0000184E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001854 7000                       		moveq	#0,d0
00001856 3038 F684                  		move.w	($FFFFF684).w,d0
0000185A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001860 6000                       		bra.s	loc_1676
00001862                            ; End of function sub_1642
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_165E:				; XREF: Demo_Time
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700                       		beq.s	locret_16DA
00001868 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000186E 7000                       		moveq	#0,d0
00001870 3038 F684                  		move.w	($FFFFF684).w,d0
00001874 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000187A                            
0000187A                            loc_1676:				; XREF: sub_1642
0000187A 49F9 00C0 0004             		lea	($C00004).l,a4
00001880 E588                       		lsl.l	#2,d0
00001882 E448                       		lsr.w	#2,d0
00001884 0040 4000                  		ori.w	#$4000,d0
00001888 4840                       		swap	d0
0000188A 2880                       		move.l	d0,(a4)
0000188C 594C                       		subq.w	#4,a4
0000188E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001892 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001896 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000189A 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000189E 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018A2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018A6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018AA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018AE                            
000018AE                            loc_16AA:				; XREF: sub_165E
000018AE 3A7C 0008                  		movea.w	#8,a5
000018B2 6100 FE1C                  		bsr.w	NemDec3
000018B6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018BA 6700                       		beq.s	loc_16DC
000018BC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018C0 66EC                       		bne.s	loc_16AA
000018C2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018C6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018CA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018CE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018D2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018D6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018DA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018DE                            
000018DE                            locret_16DA:				; XREF: sub_1642
000018DE 4E75                       		rts	
000018E0                            ; ===========================================================================
000018E0                            
000018E0                            loc_16DC:				; XREF: sub_165E
000018E0 41F8 F680                  		lea	($FFFFF680).w,a0
000018E4 7015                       		moveq	#$15,d0
000018E6                            
000018E6                            loc_16E2:				; XREF: sub_165E
000018E6 20E8 0006                  		move.l	6(a0),(a0)+
000018EA 51C8 FFFA                  		dbf	d0,loc_16E2
000018EE 4E75                       		rts	
000018F0                            ; End of function sub_165E
000018F0                            
000018F0                            ; ---------------------------------------------------------------------------
000018F0                            ; Subroutine to	execute	the pattern load cue
000018F0                            ; ---------------------------------------------------------------------------
000018F0                            
000018F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018F0                            
000018F0                            
000018F0                            RunPLC_ROM:
000018F0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018F6 D040                       		add.w	d0,d0
000018F8 3031 0000                  		move.w	(a1,d0.w),d0
000018FC 43F1 0000                  		lea	(a1,d0.w),a1
00001900 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001902                            
00001902                            RunPLC_Loop:
00001902 2059                       		movea.l	(a1)+,a0	; get art pointer
00001904 7000                       		moveq	#0,d0
00001906 3019                       		move.w	(a1)+,d0	; get VRAM address
00001908 E588                       		lsl.l	#2,d0		; divide address by $20
0000190A E448                       		lsr.w	#2,d0
0000190C 0040 4000                  		ori.w	#$4000,d0
00001910 4840                       		swap	d0
00001912 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001918 6100 FD2A                  		bsr.w	NemDec		; decompress
0000191C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001920 4E75                       		rts	
00001922                            ; End of function RunPLC_ROM
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Enigma decompression algorithm
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            EniDec:
00001922 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001926 3640                       		movea.w	d0,a3
00001928 1018                       		move.b	(a0)+,d0
0000192A 4880                       		ext.w	d0
0000192C 3A40                       		movea.w	d0,a5
0000192E 1818                       		move.b	(a0)+,d4
00001930 E70C                       		lsl.b	#3,d4
00001932 3458                       		movea.w	(a0)+,a2
00001934 D4CB                       		adda.w	a3,a2
00001936 3858                       		movea.w	(a0)+,a4
00001938 D8CB                       		adda.w	a3,a4
0000193A 1A18                       		move.b	(a0)+,d5
0000193C E145                       		asl.w	#8,d5
0000193E 1A18                       		move.b	(a0)+,d5
00001940 7C10                       		moveq	#$10,d6
00001942                            
00001942                            loc_173E:				; XREF: loc_1768
00001942 7007                       		moveq	#7,d0
00001944 3E06                       		move.w	d6,d7
00001946 9E40                       		sub.w	d0,d7
00001948 3205                       		move.w	d5,d1
0000194A EE69                       		lsr.w	d7,d1
0000194C 0241 007F                  		andi.w	#$7F,d1
00001950 3401                       		move.w	d1,d2
00001952 0C41 0040                  		cmpi.w	#$40,d1
00001956 6400                       		bcc.s	loc_1758
00001958 7006                       		moveq	#6,d0
0000195A E24A                       		lsr.w	#1,d2
0000195C                            
0000195C                            loc_1758:
0000195C 6100 0000                  		bsr.w	sub_188C
00001960 0242 000F                  		andi.w	#$F,d2
00001964 E849                       		lsr.w	#4,d1
00001966 D241                       		add.w	d1,d1
00001968 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000196C                            ; End of function EniDec
0000196C                            
0000196C                            ; ===========================================================================
0000196C                            
0000196C                            loc_1768:				; XREF: loc_17B4
0000196C 32CA                       		move.w	a2,(a1)+
0000196E 524A                       		addq.w	#1,a2
00001970 51CA FFFA                  		dbf	d2,loc_1768
00001974 60CC                       		bra.s	loc_173E
00001976                            ; ===========================================================================
00001976                            
00001976                            loc_1772:				; XREF: loc_17B4
00001976 32CC                       		move.w	a4,(a1)+
00001978 51CA FFFC                  		dbf	d2,loc_1772
0000197C 60C4                       		bra.s	loc_173E
0000197E                            ; ===========================================================================
0000197E                            
0000197E                            loc_177A:				; XREF: loc_17B4
0000197E 6100 0000                  		bsr.w	loc_17DC
00001982                            
00001982                            loc_177E:
00001982 32C1                       		move.w	d1,(a1)+
00001984 51CA FFFC                  		dbf	d2,loc_177E
00001988 60B8                       		bra.s	loc_173E
0000198A                            ; ===========================================================================
0000198A                            
0000198A                            loc_1786:				; XREF: loc_17B4
0000198A 6100 0000                  		bsr.w	loc_17DC
0000198E                            
0000198E                            loc_178A:
0000198E 32C1                       		move.w	d1,(a1)+
00001990 5241                       		addq.w	#1,d1
00001992 51CA FFFA                  		dbf	d2,loc_178A
00001996 60AA                       		bra.s	loc_173E
00001998                            ; ===========================================================================
00001998                            
00001998                            loc_1794:				; XREF: loc_17B4
00001998 6100 0000                  		bsr.w	loc_17DC
0000199C                            
0000199C                            loc_1798:
0000199C 32C1                       		move.w	d1,(a1)+
0000199E 5341                       		subq.w	#1,d1
000019A0 51CA FFFA                  		dbf	d2,loc_1798
000019A4 609C                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_17A2:				; XREF: loc_17B4
000019A6 0C42 000F                  		cmpi.w	#$F,d2
000019AA 6700                       		beq.s	loc_17C4
000019AC                            
000019AC                            loc_17A8:
000019AC 6100 0000                  		bsr.w	loc_17DC
000019B0 32C1                       		move.w	d1,(a1)+
000019B2 51CA FFF8                  		dbf	d2,loc_17A8
000019B6 608A                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_17B4:				; XREF: EniDec
000019B8 60B2                       		bra.s	loc_1768
000019BA                            ; ===========================================================================
000019BA 60B0                       		bra.s	loc_1768
000019BC                            ; ===========================================================================
000019BC 60B8                       		bra.s	loc_1772
000019BE                            ; ===========================================================================
000019BE 60B6                       		bra.s	loc_1772
000019C0                            ; ===========================================================================
000019C0 60BC                       		bra.s	loc_177A
000019C2                            ; ===========================================================================
000019C2 60C6                       		bra.s	loc_1786
000019C4                            ; ===========================================================================
000019C4 60D2                       		bra.s	loc_1794
000019C6                            ; ===========================================================================
000019C6 60DE                       		bra.s	loc_17A2
000019C8                            ; ===========================================================================
000019C8                            
000019C8                            loc_17C4:				; XREF: loc_17A2
000019C8 5348                       		subq.w	#1,a0
000019CA 0C46 0010                  		cmpi.w	#$10,d6
000019CE 6600                       		bne.s	loc_17CE
000019D0 5348                       		subq.w	#1,a0
000019D2                            
000019D2                            loc_17CE:
000019D2 3008                       		move.w	a0,d0
000019D4 E248                       		lsr.w	#1,d0
000019D6 6400                       		bcc.s	loc_17D6
000019D8 5248                       		addq.w	#1,a0
000019DA                            
000019DA                            loc_17D6:
000019DA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019DE 4E75                       		rts	
000019E0                            ; ===========================================================================
000019E0                            
000019E0                            loc_17DC:				; XREF: loc_17A2
000019E0 360B                       		move.w	a3,d3
000019E2 1204                       		move.b	d4,d1
000019E4 D201                       		add.b	d1,d1
000019E6 6400                       		bcc.s	loc_17EE
000019E8 5346                       		subq.w	#1,d6
000019EA 0D05                       		btst	d6,d5
000019EC 6700                       		beq.s	loc_17EE
000019EE 0043 8000                  		ori.w	#-$8000,d3
000019F2                            
000019F2                            loc_17EE:
000019F2 D201                       		add.b	d1,d1
000019F4 6400                       		bcc.s	loc_17FC
000019F6 5346                       		subq.w	#1,d6
000019F8 0D05                       		btst	d6,d5
000019FA 6700                       		beq.s	loc_17FC
000019FC 0643 4000                  		addi.w	#$4000,d3
00001A00                            
00001A00                            loc_17FC:
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_180A
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_180A
00001A0A 0643 2000                  		addi.w	#$2000,d3
00001A0E                            
00001A0E                            loc_180A:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_1818
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_1818
00001A18 0043 1000                  		ori.w	#$1000,d3
00001A1C                            
00001A1C                            loc_1818:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_1826
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_1826
00001A26 0043 0800                  		ori.w	#$800,d3
00001A2A                            
00001A2A                            loc_1826:
00001A2A 3205                       		move.w	d5,d1
00001A2C 3E06                       		move.w	d6,d7
00001A2E 9E4D                       		sub.w	a5,d7
00001A30 6400                       		bcc.s	loc_1856
00001A32 3C07                       		move.w	d7,d6
00001A34 0646 0010                  		addi.w	#$10,d6
00001A38 4447                       		neg.w	d7
00001A3A EF69                       		lsl.w	d7,d1
00001A3C 1A10                       		move.b	(a0),d5
00001A3E EF3D                       		rol.b	d7,d5
00001A40 DE47                       		add.w	d7,d7
00001A42 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A46 D245                       		add.w	d5,d1
00001A48                            
00001A48                            loc_1844:				; XREF: loc_1868
00001A48 300D                       		move.w	a5,d0
00001A4A D040                       		add.w	d0,d0
00001A4C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A50 D243                       		add.w	d3,d1
00001A52 1A18                       		move.b	(a0)+,d5
00001A54 E14D                       		lsl.w	#8,d5
00001A56 1A18                       		move.b	(a0)+,d5
00001A58 4E75                       		rts	
00001A5A                            ; ===========================================================================
00001A5A                            
00001A5A                            loc_1856:				; XREF: loc_1826
00001A5A 6700                       		beq.s	loc_1868
00001A5C EE69                       		lsr.w	d7,d1
00001A5E 300D                       		move.w	a5,d0
00001A60 D040                       		add.w	d0,d0
00001A62 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A66 D243                       		add.w	d3,d1
00001A68 300D                       		move.w	a5,d0
00001A6A 6000                       		bra.s	sub_188C
00001A6C                            ; ===========================================================================
00001A6C                            
00001A6C                            loc_1868:				; XREF: loc_1856
00001A6C 7C10                       		moveq	#$10,d6
00001A6E                            
00001A6E                            loc_186A:
00001A6E 60D8                       		bra.s	loc_1844
00001A70                            ; ===========================================================================
00001A70 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001A86 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001A90                            
00001A90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A90                            
00001A90                            
00001A90                            sub_188C:				; XREF: EniDec
00001A90 9C40                       		sub.w	d0,d6
00001A92 0C46 0009                  		cmpi.w	#9,d6
00001A96 6400                       		bcc.s	locret_189A
00001A98 5046                       		addq.w	#8,d6
00001A9A E145                       		asl.w	#8,d5
00001A9C 1A18                       		move.b	(a0)+,d5
00001A9E                            
00001A9E                            locret_189A:
00001A9E 4E75                       		rts	
00001AA0                            ; End of function sub_188C
00001AA0                            
00001AA0                            ; ---------------------------------------------------------------------------
00001AA0                            ; Kosinski decompression algorithm
00001AA0                            ; ---------------------------------------------------------------------------
00001AA0                            
00001AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA0                            
00001AA0                            
00001AA0                            KosDec:
00001AA0                            
00001AA0 =FFFFFFFE                  var_2		= -2
00001AA0 =FFFFFFFF                  var_1		= -1
00001AA0                            
00001AA0 558F                       		subq.l	#2,sp
00001AA2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AA6 1E98                       		move.b	(a0)+,(sp)
00001AA8 3A17                       		move.w	(sp),d5
00001AAA 780F                       		moveq	#$F,d4
00001AAC                            
00001AAC                            loc_18A8:
00001AAC E24D                       		lsr.w	#1,d5
00001AAE 40C6                       		move	sr,d6
00001AB0 51CC 0000                  		dbf	d4,loc_18BA
00001AB4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AB8 1E98                       		move.b	(a0)+,(sp)
00001ABA 3A17                       		move.w	(sp),d5
00001ABC 780F                       		moveq	#$F,d4
00001ABE                            
00001ABE                            loc_18BA:
00001ABE 44C6                       		move	d6,ccr
00001AC0 6400                       		bcc.s	loc_18C2
00001AC2 12D8                       		move.b	(a0)+,(a1)+
00001AC4 60E6                       		bra.s	loc_18A8
00001AC6                            ; ===========================================================================
00001AC6                            
00001AC6                            loc_18C2:				; XREF: KosDec
00001AC6 7600                       		moveq	#0,d3
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18D6
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18D6:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6500                       		bcs.s	loc_1906
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 51CC 0000                  		dbf	d4,loc_18EA
00001AE4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AE8 1E98                       		move.b	(a0)+,(sp)
00001AEA 3A17                       		move.w	(sp),d5
00001AEC 780F                       		moveq	#$F,d4
00001AEE                            
00001AEE                            loc_18EA:
00001AEE E353                       		roxl.w	#1,d3
00001AF0 E24D                       		lsr.w	#1,d5
00001AF2 51CC 0000                  		dbf	d4,loc_18FC
00001AF6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AFA 1E98                       		move.b	(a0)+,(sp)
00001AFC 3A17                       		move.w	(sp),d5
00001AFE 780F                       		moveq	#$F,d4
00001B00                            
00001B00                            loc_18FC:
00001B00 E353                       		roxl.w	#1,d3
00001B02 5243                       		addq.w	#1,d3
00001B04 74FF                       		moveq	#-1,d2
00001B06 1418                       		move.b	(a0)+,d2
00001B08 6000                       		bra.s	loc_191C
00001B0A                            ; ===========================================================================
00001B0A                            
00001B0A                            loc_1906:				; XREF: loc_18C2
00001B0A 1018                       		move.b	(a0)+,d0
00001B0C 1218                       		move.b	(a0)+,d1
00001B0E 74FF                       		moveq	#-1,d2
00001B10 1401                       		move.b	d1,d2
00001B12 EB4A                       		lsl.w	#5,d2
00001B14 1400                       		move.b	d0,d2
00001B16 0241 0007                  		andi.w	#7,d1
00001B1A 6700                       		beq.s	loc_1928
00001B1C 1601                       		move.b	d1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20                            
00001B20                            loc_191C:
00001B20 1031 2000                  		move.b	(a1,d2.w),d0
00001B24 12C0                       		move.b	d0,(a1)+
00001B26 51CB FFF8                  		dbf	d3,loc_191C
00001B2A 6080                       		bra.s	loc_18A8
00001B2C                            ; ===========================================================================
00001B2C                            
00001B2C                            loc_1928:				; XREF: loc_1906
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 6700                       		beq.s	loc_1938
00001B30 0C01 0001                  		cmpi.b	#1,d1
00001B34 6700 FF76                  		beq.w	loc_18A8
00001B38 1601                       		move.b	d1,d3
00001B3A 60E4                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1938:				; XREF: loc_1928
00001B3C 548F                       		addq.l	#2,sp
00001B3E 4E75                       		rts	
00001B40                            ; End of function KosDec
00001B40                            
00001B40                            ; ---------------------------------------------------------------------------
00001B40                            ; Pallet cycling routine loading subroutine
00001B40                            ; ---------------------------------------------------------------------------
00001B40                            
00001B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B40                            
00001B40                            
00001B40                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B40 7400                       		moveq	#0,d2
00001B42 7000                       		moveq	#0,d0
00001B44 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B48 D040                       		add.w	d0,d0		; multiply by 2
00001B4A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B4E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B52                            ; End of function PalCycle_Load
00001B52                            
00001B52                            ; ===========================================================================
00001B52                            ; ---------------------------------------------------------------------------
00001B52                            ; Pallet cycling routines
00001B52                            ; ---------------------------------------------------------------------------
00001B52 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B54 0000                       		dc.w PalCycle_LZ-PalCycle
00001B56 0000                       		dc.w PalCycle_MZ-PalCycle
00001B58 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B5A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B5C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B5E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B60 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B62                            
00001B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B62                            
00001B62                            
00001B62                            PalCycle_Title:				; XREF: TitleScreen
00001B62 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B68 6000                       		bra.s	loc_196A
00001B6A                            ; ===========================================================================
00001B6A                            
00001B6A                            PalCycle_GHZ:				; XREF: PalCycle
00001B6A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B70                            
00001B70                            loc_196A:				; XREF: PalCycle_Title
00001B70 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B74 6A00                       		bpl.s	locret_1990
00001B76 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B7C 3038 F632                  		move.w	($FFFFF632).w,d0
00001B80 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B84 0240 0003                  		andi.w	#3,d0
00001B88 E748                       		lsl.w	#3,d0
00001B8A 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B92 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B96                            
00001B96                            locret_1990:
00001B96 4E75                       		rts	
00001B98                            ; End of function PalCycle_Title
00001B98                            
00001B98                            
00001B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B98                            
00001B98                            
00001B98                            PalCycle_LZ:				; XREF: PalCycle
00001B98 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B9C 6A00                       		bpl.s	loc_19D8
00001B9E 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BA4 3038 F632                  		move.w	($FFFFF632).w,d0
00001BA8 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BAC 0240 0003                  		andi.w	#3,d0
00001BB0 E748                       		lsl.w	#3,d0
00001BB2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BB8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BBE 6600                       		bne.s	loc_19C0
00001BC0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BC6                            
00001BC6                            loc_19C0:
00001BC6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BD2 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BD6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BDA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BDE                            
00001BDE                            loc_19D8:
00001BDE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BE2 0240 0007                  		andi.w	#7,d0
00001BE6 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001BEA 6700                       		beq.s	locret_1A3A
00001BEC 7201                       		moveq	#1,d1
00001BEE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001BF2 6700                       		beq.s	loc_19F0
00001BF4 4441                       		neg.w	d1
00001BF6                            
00001BF6                            loc_19F0:
00001BF6 3038 F650                  		move.w	($FFFFF650).w,d0
00001BFA 0240 0003                  		andi.w	#3,d0
00001BFE D041                       		add.w	d1,d0
00001C00 0C40 0003                  		cmpi.w	#3,d0
00001C04 6500                       		bcs.s	loc_1A0A
00001C06 3200                       		move.w	d0,d1
00001C08 7000                       		moveq	#0,d0
00001C0A 4A41                       		tst.w	d1
00001C0C 6A00                       		bpl.s	loc_1A0A
00001C0E 7002                       		moveq	#2,d0
00001C10                            
00001C10                            loc_1A0A:
00001C10 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C14 D040                       		add.w	d0,d0
00001C16 3200                       		move.w	d0,d1
00001C18 D040                       		add.w	d0,d0
00001C1A D041                       		add.w	d1,d0
00001C1C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C22 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C26 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C2A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C2E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C34 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C38 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C3C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C40                            
00001C40                            locret_1A3A:
00001C40 4E75                       		rts	
00001C42                            ; End of function PalCycle_LZ
00001C42                            
00001C42                            ; ===========================================================================
00001C42 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C4A                            ; ===========================================================================
00001C4A                            
00001C4A                            PalCycle_MZ:				; XREF: PalCycle
00001C4A 4E75                       		rts	
00001C4C                            
00001C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4C                            
00001C4C                            
00001C4C                            PalCycle_SLZ:				; XREF: PalCycle
00001C4C 4E75                       		rts	
00001C4E                            ; End of function PalCycle_SLZ
00001C4E                            
00001C4E                            
00001C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4E                            
00001C4E                            
00001C4E                            PalCycle_SYZ:				; XREF: PalCycle
00001C4E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C52 6A00                       		bpl.s	locret_1AC6
00001C54 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C5A 3038 F632                  		move.w	($FFFFF632).w,d0
00001C5E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C62 0240 0003                  		andi.w	#3,d0
00001C66 E548                       		lsl.w	#2,d0
00001C68 3200                       		move.w	d0,d1
00001C6A D040                       		add.w	d0,d0
00001C6C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C72 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C76 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C7A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C7E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C84 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C88 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C8C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C92                            
00001C92                            locret_1AC6:
00001C92 4E75                       		rts	
00001C94                            ; End of function PalCycle_SYZ
00001C94                            
00001C94                            
00001C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C94                            
00001C94                            
00001C94                            PalCycle_SBZ:				; XREF: PalCycle
00001C94 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C9A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C9E 6700                       		beq.s	loc_1ADA
00001CA0 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CA6                            
00001CA6                            loc_1ADA:
00001CA6 43F8 F650                  		lea	($FFFFF650).w,a1
00001CAA 321A                       		move.w	(a2)+,d1
00001CAC                            
00001CAC                            loc_1AE0:
00001CAC 5311                       		subq.b	#1,(a1)
00001CAE 6B00                       		bmi.s	loc_1AEA
00001CB0 5489                       		addq.l	#2,a1
00001CB2 5C8A                       		addq.l	#6,a2
00001CB4 6000                       		bra.s	loc_1B06
00001CB6                            ; ===========================================================================
00001CB6                            
00001CB6                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CB6 12DA                       		move.b	(a2)+,(a1)+
00001CB8 1011                       		move.b	(a1),d0
00001CBA 5200                       		addq.b	#1,d0
00001CBC B01A                       		cmp.b	(a2)+,d0
00001CBE 6500                       		bcs.s	loc_1AF6
00001CC0 7000                       		moveq	#0,d0
00001CC2                            
00001CC2                            loc_1AF6:
00001CC2 12C0                       		move.b	d0,(a1)+
00001CC4 0240 000F                  		andi.w	#$F,d0
00001CC8 D040                       		add.w	d0,d0
00001CCA 305A                       		movea.w	(a2)+,a0
00001CCC 365A                       		movea.w	(a2)+,a3
00001CCE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CD2                            
00001CD2                            loc_1B06:				; XREF: PalCycle_SBZ
00001CD2 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CD6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CDA 6A00                       		bpl.s	locret_1B64
00001CDC 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CE2 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CE8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CEC 6700                       		beq.s	loc_1B2E
00001CEE 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CF4 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CFA                            
00001CFA                            loc_1B2E:
00001CFA 72FF                       		moveq	#-1,d1
00001CFC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D00 6700                       		beq.s	loc_1B38
00001D02 4441                       		neg.w	d1
00001D04                            
00001D04                            loc_1B38:
00001D04 3038 F632                  		move.w	($FFFFF632).w,d0
00001D08 0240 0003                  		andi.w	#3,d0
00001D0C D041                       		add.w	d1,d0
00001D0E 0C40 0003                  		cmpi.w	#3,d0
00001D12 6500                       		bcs.s	loc_1B52
00001D14 3200                       		move.w	d0,d1
00001D16 7000                       		moveq	#0,d0
00001D18 4A41                       		tst.w	d1
00001D1A 6A00                       		bpl.s	loc_1B52
00001D1C 7002                       		moveq	#2,d0
00001D1E                            
00001D1E                            loc_1B52:
00001D1E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D22 D040                       		add.w	d0,d0
00001D24 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D28 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D2C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D30                            
00001D30                            locret_1B64:
00001D30 4E75                       		rts	
00001D32                            ; End of function PalCycle_SBZ
00001D32                            
00001D32                            ; ===========================================================================
00001D32                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D52                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D72                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001D92                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DA4                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DB6                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E1E                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E42                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E62                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E72                            
00001E72                            Pal_SBZCycList:
00001E72                            	include "_inc\SBZ pallet script 1.asm"
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Scrap Brain Zone 1 pallet cycling script
00001E72                            ; ---------------------------------------------------------------------------
00001E72 0008                       	dc.w 8			; number of entries - 1
00001E74 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E76 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E78 FB50                       	dc.w $FB50		; RAM address
00001E7A 0D08                       	dc.b $D, 8
00001E7C 0000                       	dc.w Pal_SBZCyc2
00001E7E FB52                       	dc.w $FB52
00001E80 0E08                       	dc.b $E, 8
00001E82 0000                       	dc.w Pal_SBZCyc3
00001E84 FB6E                       	dc.w $FB6E
00001E86 0B08                       	dc.b $B, 8
00001E88 0000                       	dc.w Pal_SBZCyc5
00001E8A FB70                       	dc.w $FB70
00001E8C 0708                       	dc.b 7,	8
00001E8E 0000                       	dc.w Pal_SBZCyc6
00001E90 FB72                       	dc.w $FB72
00001E92 1C10                       	dc.b $1C, $10
00001E94 0000                       	dc.w Pal_SBZCyc7
00001E96 FB7E                       	dc.w $FB7E
00001E98 0303                       	dc.b 3,	3
00001E9A 0000                       	dc.w Pal_SBZCyc8
00001E9C FB78                       	dc.w $FB78
00001E9E 0303                       	dc.b 3,	3
00001EA0 0000                       	dc.w Pal_SBZCyc8+2
00001EA2 FB7A                       	dc.w $FB7A
00001EA4 0303                       	dc.b 3,	3
00001EA6 0000                       	dc.w Pal_SBZCyc8+4
00001EA8 FB7C                       	dc.w $FB7C
00001EAA                            	even
00001EAA                            	even
00001EAA                            
00001EAA                            Pal_SBZCycList2:
00001EAA                            	include "_inc\SBZ pallet script 2.asm"
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            ; Scrap Brain Zone 2 pallet cycling script
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA 0006                       	dc.w 6
00001EAC 0708                       	dc.b 7,	8
00001EAE 0000                       	dc.w Pal_SBZCyc1
00001EB0 FB50                       	dc.w $FB50
00001EB2 0D08                       	dc.b $D, 8
00001EB4 0000                       	dc.w Pal_SBZCyc2
00001EB6 FB52                       	dc.w $FB52
00001EB8 0908                       	dc.b 9,	8
00001EBA 0000                       	dc.w Pal_SBZCyc9
00001EBC FB70                       	dc.w $FB70
00001EBE 0708                       	dc.b 7,	8
00001EC0 0000                       	dc.w Pal_SBZCyc6
00001EC2 FB72                       	dc.w $FB72
00001EC4 0303                       	dc.b 3,	3
00001EC6 0000                       	dc.w Pal_SBZCyc8
00001EC8 FB78                       	dc.w $FB78
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8+2
00001ECE FB7A                       	dc.w $FB7A
00001ED0 0303                       	dc.b 3,	3
00001ED2 0000                       	dc.w Pal_SBZCyc8+4
00001ED4 FB7C                       	dc.w $FB7C
00001ED6                            	even
00001ED6                            	even
00001ED6                            
00001ED6                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001EE6                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001EF6                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F06                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F12                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F22                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F32                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F52                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F5C                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F6C                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            ; Subroutine to	fade out and fade in
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            
00001F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F78                            
00001F78                            
00001F78                            Pal_FadeTo:
00001F78 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F7E                            
00001F7E                            Pal_FadeTo2:
00001F7E 7000                       		moveq	#0,d0
00001F80 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F84 1038 F626                  		move.b	($FFFFF626).w,d0
00001F88 D0C0                       		adda.w	d0,a0
00001F8A 7200                       		moveq	#0,d1
00001F8C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F90                            
00001F90                            Pal_ToBlack:
00001F90 30C1                       		move.w	d1,(a0)+
00001F92 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001F96                            
00001F96 383C 0015                  		move.w	#$15,d4
00001F9A 1A3C 0009                  		move.b	#9,d5
00001F9E                            
00001F9E                            loc_1DCE:
00001F9E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FA4 6100 0000                  		bsr.w	DelayProgram
00001FA8 6100                       		bsr.s	Pal_FadeIn
00001FAA 6100 F844                  		bsr.w	RunPLC_RAM
00001FAE 51CC FFEE                  		dbf	d4,loc_1DCE
00001FB2 4E75                       		rts	
00001FB4                            ; End of function Pal_FadeTo
00001FB4                            
00001FB4                            ; ---------------------------------------------------------------------------
00001FB4                            ; Pallet fade-in subroutine
00001FB4                            ; ---------------------------------------------------------------------------
00001FB4                            
00001FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB4                            
00001FB4                            
00001FB4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FB4 7000                       		moveq	#0,d0
00001FB6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FBE 1038 F626                  		move.b	($FFFFF626).w,d0
00001FC2 D0C0                       		adda.w	d0,a0
00001FC4 D2C0                       		adda.w	d0,a1
00001FC6 1038 F627                  		move.b	($FFFFF627).w,d0
00001FCA                            
00001FCA                            loc_1DFA:
00001FCA 6100                       		bsr.s	Pal_AddColor
00001FCC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FD6 6600                       		bne.s	locret_1E24
00001FD8 7000                       		moveq	#0,d0
00001FDA 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FDE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FE2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FE6 D0C0                       		adda.w	d0,a0
00001FE8 D2C0                       		adda.w	d0,a1
00001FEA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FEE                            
00001FEE                            loc_1E1E:
00001FEE 6100                       		bsr.s	Pal_AddColor
00001FF0 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FF4                            
00001FF4                            locret_1E24:
00001FF4 4E75                       		rts	
00001FF6                            ; End of function Pal_FadeIn
00001FF6                            
00001FF6                            
00001FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF6                            
00001FF6                            
00001FF6                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FF6 3419                       		move.w	(a1)+,d2
00001FF8 3610                       		move.w	(a0),d3
00001FFA B642                       		cmp.w	d2,d3
00001FFC 6700                       		beq.s	loc_1E4E
00001FFE 3203                       		move.w	d3,d1
00002000 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002004 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002006 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002008 30C1                       		move.w	d1,(a0)+	; update pallet
0000200A 4E75                       		rts	
0000200C                            ; ===========================================================================
0000200C                            
0000200C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000200C 3203                       		move.w	d3,d1
0000200E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002012 B242                       		cmp.w	d2,d1
00002014 6200                       		bhi.s	Pal_AddRed
00002016 30C1                       		move.w	d1,(a0)+	; update pallet
00002018 4E75                       		rts	
0000201A                            ; ===========================================================================
0000201A                            
0000201A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000201A 5458                       		addq.w	#2,(a0)+	; increase red value
0000201C 4E75                       		rts	
0000201E                            ; ===========================================================================
0000201E                            
0000201E                            loc_1E4E:				; XREF: Pal_AddColor
0000201E 5448                       		addq.w	#2,a0
00002020 4E75                       		rts	
00002022                            ; End of function Pal_AddColor
00002022                            
00002022                            
00002022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002022                            
00002022                            
00002022                            Pal_FadeFrom:
00002022 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002028 383C 0015                  		move.w	#$15,d4
0000202C                            loc_1E5C:
0000202C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002032 6100 0000                  		bsr.w	DelayProgram
00002036 6100                       		bsr.s	Pal_FadeOut
00002038 6100 F7B6                  		bsr.w	RunPLC_RAM
0000203C 51CC FFEE                  		dbf	d4,loc_1E5C
00002040 4E75                       		rts	
00002042                            ; End of function Pal_FadeFrom
00002042                            
00002042                            ; ---------------------------------------------------------------------------
00002042                            ; Pallet fade-out subroutine
00002042                            ; ---------------------------------------------------------------------------
00002042                            
00002042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002042                            
00002042                            
00002042                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002042 7000                       		moveq	#0,d0
00002044 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002048 1038 F626                  		move.b	($FFFFF626).w,d0
0000204C D0C0                       		adda.w	d0,a0
0000204E 1038 F627                  		move.b	($FFFFF627).w,d0
00002052                            
00002052                            loc_1E82:
00002052 6100                       		bsr.s	Pal_DecColor
00002054 51C8 FFFC                  		dbf	d0,loc_1E82
00002058                            
00002058 7000                       		moveq	#0,d0
0000205A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000205E 1038 F626                  		move.b	($FFFFF626).w,d0
00002062 D0C0                       		adda.w	d0,a0
00002064 1038 F627                  		move.b	($FFFFF627).w,d0
00002068                            
00002068                            loc_1E98:
00002068 6100                       		bsr.s	Pal_DecColor
0000206A 51C8 FFFC                  		dbf	d0,loc_1E98
0000206E 4E75                       		rts	
00002070                            ; End of function Pal_FadeOut
00002070                            
00002070                            
00002070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002070                            
00002070                            
00002070                            Pal_DecColor:				; XREF: Pal_FadeOut
00002070 3410                       		move.w	(a0),d2
00002072 6700                       		beq.s	loc_1ECC
00002074 3202                       		move.w	d2,d1
00002076 0241 000E                  		andi.w	#$E,d1
0000207A 6700                       		beq.s	Pal_DecGreen
0000207C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000207E 4E75                       		rts	
00002080                            ; ===========================================================================
00002080                            
00002080                            Pal_DecGreen:				; XREF: Pal_DecColor
00002080 3202                       		move.w	d2,d1
00002082 0241 00E0                  		andi.w	#$E0,d1
00002086 6700                       		beq.s	Pal_DecBlue
00002088 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000208C 4E75                       		rts	
0000208E                            ; ===========================================================================
0000208E                            
0000208E                            Pal_DecBlue:				; XREF: Pal_DecGreen
0000208E 3202                       		move.w	d2,d1
00002090 0241 0E00                  		andi.w	#$E00,d1
00002094 6700                       		beq.s	loc_1ECC
00002096 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
0000209A 4E75                       		rts	
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_1ECC:				; XREF: Pal_DecColor
0000209C 5448                       		addq.w	#2,a0
0000209E 4E75                       		rts	
000020A0                            ; End of function Pal_DecColor
000020A0                            
000020A0                            ; ---------------------------------------------------------------------------
000020A0                            ; Subroutine to	fill the pallet	with white (special stage)
000020A0                            ; ---------------------------------------------------------------------------
000020A0                            
000020A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A0                            
000020A0                            
000020A0                            Pal_MakeWhite:				; XREF: SpecialStage
000020A0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020A6 7000                       		moveq	#0,d0
000020A8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020AC 1038 F626                  		move.b	($FFFFF626).w,d0
000020B0 D0C0                       		adda.w	d0,a0
000020B2 323C 0EEE                  		move.w	#$EEE,d1
000020B6 1038 F627                  		move.b	($FFFFF627).w,d0
000020BA                            
000020BA                            PalWhite_Loop:
000020BA 30C1                       		move.w	d1,(a0)+
000020BC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020C0 383C 0015                  		move.w	#$15,d4
000020C4                            
000020C4                            loc_1EF4:
000020C4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020CA 6100 0000                  		bsr.w	DelayProgram
000020CE 6100                       		bsr.s	Pal_WhiteToBlack
000020D0 6100 F71E                  		bsr.w	RunPLC_RAM
000020D4 51CC FFEE                  		dbf	d4,loc_1EF4
000020D8 4E75                       		rts	
000020DA                            ; End of function Pal_MakeWhite
000020DA                            
000020DA                            
000020DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DA                            
000020DA                            
000020DA                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020DA 7000                       		moveq	#0,d0
000020DC 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020E0 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020E4 1038 F626                  		move.b	($FFFFF626).w,d0
000020E8 D0C0                       		adda.w	d0,a0
000020EA D2C0                       		adda.w	d0,a1
000020EC 1038 F627                  		move.b	($FFFFF627).w,d0
000020F0                            
000020F0                            loc_1F20:
000020F0 6100                       		bsr.s	Pal_DecColor2
000020F2 51C8 FFFC                  		dbf	d0,loc_1F20
000020F6                            
000020F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020FC 6600                       		bne.s	locret_1F4A
000020FE 7000                       		moveq	#0,d0
00002100 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002104 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002108 1038 F626                  		move.b	($FFFFF626).w,d0
0000210C D0C0                       		adda.w	d0,a0
0000210E D2C0                       		adda.w	d0,a1
00002110 1038 F627                  		move.b	($FFFFF627).w,d0
00002114                            
00002114                            loc_1F44:
00002114 6100                       		bsr.s	Pal_DecColor2
00002116 51C8 FFFC                  		dbf	d0,loc_1F44
0000211A                            
0000211A                            locret_1F4A:
0000211A 4E75                       		rts	
0000211C                            ; End of function Pal_WhiteToBlack
0000211C                            
0000211C                            
0000211C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211C                            
0000211C                            
0000211C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000211C 3419                       		move.w	(a1)+,d2
0000211E 3610                       		move.w	(a0),d3
00002120 B642                       		cmp.w	d2,d3
00002122 6700                       		beq.s	loc_1F78
00002124 3203                       		move.w	d3,d1
00002126 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000212A 6500                       		bcs.s	loc_1F64
0000212C B242                       		cmp.w	d2,d1
0000212E 6500                       		bcs.s	loc_1F64
00002130 30C1                       		move.w	d1,(a0)+
00002132 4E75                       		rts	
00002134                            ; ===========================================================================
00002134                            
00002134                            loc_1F64:				; XREF: Pal_DecColor2
00002134 3203                       		move.w	d3,d1
00002136 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000213A 6500                       		bcs.s	loc_1F74
0000213C B242                       		cmp.w	d2,d1
0000213E 6500                       		bcs.s	loc_1F74
00002140 30C1                       		move.w	d1,(a0)+
00002142 4E75                       		rts	
00002144                            ; ===========================================================================
00002144                            
00002144                            loc_1F74:				; XREF: loc_1F64
00002144 5558                       		subq.w	#2,(a0)+	; decrease red value
00002146 4E75                       		rts	
00002148                            ; ===========================================================================
00002148                            
00002148                            loc_1F78:				; XREF: Pal_DecColor2
00002148 5448                       		addq.w	#2,a0
0000214A 4E75                       		rts	
0000214C                            ; End of function Pal_DecColor2
0000214C                            
0000214C                            ; ---------------------------------------------------------------------------
0000214C                            ; Subroutine to	make a white flash when	you enter a special stage
0000214C                            ; ---------------------------------------------------------------------------
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            Pal_MakeFlash:				; XREF: SpecialStage
0000214C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002152 383C 0015                  		move.w	#$15,d4
00002156                            
00002156                            loc_1F86:
00002156 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000215C 6100 0000                  		bsr.w	DelayProgram
00002160 6100                       		bsr.s	Pal_ToWhite
00002162 6100 F68C                  		bsr.w	RunPLC_RAM
00002166 51CC FFEE                  		dbf	d4,loc_1F86
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_MakeFlash
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000216C 7000                       		moveq	#0,d0
0000216E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002172 1038 F626                  		move.b	($FFFFF626).w,d0
00002176 D0C0                       		adda.w	d0,a0
00002178 1038 F627                  		move.b	($FFFFF627).w,d0
0000217C                            
0000217C                            loc_1FAC:
0000217C 6100                       		bsr.s	Pal_AddColor2
0000217E 51C8 FFFC                  		dbf	d0,loc_1FAC
00002182 7000                       		moveq	#0,d0
00002184 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002188 1038 F626                  		move.b	($FFFFF626).w,d0
0000218C D0C0                       		adda.w	d0,a0
0000218E 1038 F627                  		move.b	($FFFFF627).w,d0
00002192                            
00002192                            loc_1FC2:
00002192 6100                       		bsr.s	Pal_AddColor2
00002194 51C8 FFFC                  		dbf	d0,loc_1FC2
00002198 4E75                       		rts	
0000219A                            ; End of function Pal_ToWhite
0000219A                            
0000219A                            
0000219A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219A                            
0000219A                            
0000219A                            Pal_AddColor2:				; XREF: Pal_ToWhite
0000219A 3410                       		move.w	(a0),d2
0000219C 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021A0 6700                       		beq.s	loc_2006
000021A2 3202                       		move.w	d2,d1
000021A4 0241 000E                  		andi.w	#$E,d1
000021A8 0C41 000E                  		cmpi.w	#$E,d1
000021AC 6700                       		beq.s	loc_1FE2
000021AE 5458                       		addq.w	#2,(a0)+	; increase red value
000021B0 4E75                       		rts	
000021B2                            ; ===========================================================================
000021B2                            
000021B2                            loc_1FE2:				; XREF: Pal_AddColor2
000021B2 3202                       		move.w	d2,d1
000021B4 0241 00E0                  		andi.w	#$E0,d1
000021B8 0C41 00E0                  		cmpi.w	#$E0,d1
000021BC 6700                       		beq.s	loc_1FF4
000021BE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021C2 4E75                       		rts	
000021C4                            ; ===========================================================================
000021C4                            
000021C4                            loc_1FF4:				; XREF: loc_1FE2
000021C4 3202                       		move.w	d2,d1
000021C6 0241 0E00                  		andi.w	#$E00,d1
000021CA 0C41 0E00                  		cmpi.w	#$E00,d1
000021CE 6700                       		beq.s	loc_2006
000021D0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021D4 4E75                       		rts	
000021D6                            ; ===========================================================================
000021D6                            
000021D6                            loc_2006:				; XREF: Pal_AddColor2
000021D6 5448                       		addq.w	#2,a0
000021D8 4E75                       		rts	
000021DA                            ; End of function Pal_AddColor2
000021DA                            
000021DA                            ; ---------------------------------------------------------------------------
000021DA                            ; Pallet cycling routine - Sega	logo
000021DA                            ; ---------------------------------------------------------------------------
000021DA                            
000021DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021DA                            
000021DA                            
000021DA                            PalCycle_Sega:				; XREF: SegaScreen
000021DA 4A38 F635                  		tst.b	($FFFFF635).w
000021DE 6600                       		bne.s	loc_206A
000021E0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021E4 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021EA 7205                       		moveq	#5,d1
000021EC 3038 F632                  		move.w	($FFFFF632).w,d0
000021F0                            
000021F0                            loc_2020:
000021F0 6A00                       		bpl.s	loc_202A
000021F2 5448                       		addq.w	#2,a0
000021F4 5341                       		subq.w	#1,d1
000021F6 5440                       		addq.w	#2,d0
000021F8 60F6                       		bra.s	loc_2020
000021FA                            ; ===========================================================================
000021FA                            
000021FA                            loc_202A:				; XREF: PalCycle_Sega
000021FA 3400                       		move.w	d0,d2
000021FC 0242 001E                  		andi.w	#$1E,d2
00002200 6600                       		bne.s	loc_2034
00002202 5440                       		addq.w	#2,d0
00002204                            
00002204                            loc_2034:
00002204 0C40 0060                  		cmpi.w	#$60,d0
00002208 6400                       		bcc.s	loc_203E
0000220A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000220E                            
0000220E                            loc_203E:
0000220E 5440                       		addq.w	#2,d0
00002210 51C9 FFE8                  		dbf	d1,loc_202A
00002214 3038 F632                  		move.w	($FFFFF632).w,d0
00002218 5440                       		addq.w	#2,d0
0000221A 3400                       		move.w	d0,d2
0000221C 0242 001E                  		andi.w	#$1E,d2
00002220 6600                       		bne.s	loc_2054
00002222 5440                       		addq.w	#2,d0
00002224                            
00002224                            loc_2054:
00002224 0C40 0064                  		cmpi.w	#$64,d0
00002228 6D00                       		blt.s	loc_2062
0000222A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002230 70F4                       		moveq	#-$C,d0
00002232                            
00002232                            loc_2062:
00002232 31C0 F632                  		move.w	d0,($FFFFF632).w
00002236 7001                       		moveq	#1,d0
00002238 4E75                       		rts	
0000223A                            ; ===========================================================================
0000223A                            
0000223A                            loc_206A:				; XREF: loc_202A
0000223A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000223E 6A00                       		bpl.s	loc_20BC
00002240 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002246 3038 F632                  		move.w	($FFFFF632).w,d0
0000224A 0640 000C                  		addi.w	#$C,d0
0000224E 0C40 0030                  		cmpi.w	#$30,d0
00002252 6500                       		bcs.s	loc_2088
00002254 7000                       		moveq	#0,d0
00002256 4E75                       		rts	
00002258                            ; ===========================================================================
00002258                            
00002258                            loc_2088:				; XREF: loc_206A
00002258 31C0 F632                  		move.w	d0,($FFFFF632).w
0000225C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002262 41F0 0000                  		lea	(a0,d0.w),a0
00002266 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000226A 22D8                       		move.l	(a0)+,(a1)+
0000226C 22D8                       		move.l	(a0)+,(a1)+
0000226E 3298                       		move.w	(a0)+,(a1)
00002270 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002274 7000                       		moveq	#0,d0
00002276 722C                       		moveq	#$2C,d1
00002278                            
00002278                            loc_20A8:
00002278 3400                       		move.w	d0,d2
0000227A 0242 001E                  		andi.w	#$1E,d2
0000227E 6600                       		bne.s	loc_20B2
00002280 5440                       		addq.w	#2,d0
00002282                            
00002282                            loc_20B2:
00002282 3390 0000                  		move.w	(a0),(a1,d0.w)
00002286 5440                       		addq.w	#2,d0
00002288 51C9 FFEE                  		dbf	d1,loc_20A8
0000228C                            
0000228C                            loc_20BC:
0000228C 7001                       		moveq	#1,d0
0000228E 4E75                       		rts	
00002290                            ; End of function PalCycle_Sega
00002290                            
00002290                            ; ===========================================================================
00002290                            
00002290                            Pal_Sega1:	incbin	pallet\sega1.bin
0000229C                            Pal_Sega2:	incbin	pallet\sega2.bin
000022CC                            
000022CC                            ; ---------------------------------------------------------------------------
000022CC                            ; Subroutines to load pallets
000022CC                            ; ---------------------------------------------------------------------------
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            PalLoad1:
000022CC 43F9 0000 0000             		lea	(PalPointers).l,a1
000022D2 E748                       		lsl.w	#3,d0
000022D4 D2C0                       		adda.w	d0,a1
000022D6 2459                       		movea.l	(a1)+,a2
000022D8 3659                       		movea.w	(a1)+,a3
000022DA D6FC 0080                  		adda.w	#$80,a3
000022DE 3E19                       		move.w	(a1)+,d7
000022E0                            
000022E0                            loc_2110:
000022E0 26DA                       		move.l	(a2)+,(a3)+
000022E2 51CF FFFC                  		dbf	d7,loc_2110
000022E6 4E75                       		rts	
000022E8                            ; End of function PalLoad1
000022E8                            
000022E8                            
000022E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E8                            
000022E8                            
000022E8                            PalLoad2:
000022E8 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EE E748                       		lsl.w	#3,d0
000022F0 D2C0                       		adda.w	d0,a1
000022F2 2459                       		movea.l	(a1)+,a2
000022F4 3659                       		movea.w	(a1)+,a3
000022F6 3E19                       		move.w	(a1)+,d7
000022F8                            
000022F8                            loc_2128:
000022F8 26DA                       		move.l	(a2)+,(a3)+
000022FA 51CF FFFC                  		dbf	d7,loc_2128
000022FE 4E75                       		rts	
00002300                            ; End of function PalLoad2
00002300                            
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Underwater pallet loading subroutine
00002300                            ; ---------------------------------------------------------------------------
00002300                            
00002300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002300                            
00002300                            
00002300                            PalLoad3_Water:
00002300 43F9 0000 0000             		lea	(PalPointers).l,a1
00002306 E748                       		lsl.w	#3,d0
00002308 D2C0                       		adda.w	d0,a1
0000230A 2459                       		movea.l	(a1)+,a2
0000230C 3659                       		movea.w	(a1)+,a3
0000230E 96FC 0080                  		suba.w	#$80,a3
00002312 3E19                       		move.w	(a1)+,d7
00002314                            
00002314                            loc_2144:
00002314 26DA                       		move.l	(a2)+,(a3)+
00002316 51CF FFFC                  		dbf	d7,loc_2144
0000231A 4E75                       		rts	
0000231C                            ; End of function PalLoad3_Water
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad4_Water:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A 96FC 0100                  		suba.w	#$100,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2160:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2160
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad4_Water
00002338                            
00002338                            ; ===========================================================================
00002338                            ; ---------------------------------------------------------------------------
00002338                            ; Pallet pointers
00002338                            ; ---------------------------------------------------------------------------
00002338                            PalPointers:
00002338                            	include "_inc\Pallet pointers.asm"
00002338                            ; ---------------------------------------------------------------------------
00002338                            ; Pallet pointers
00002338                            ; ---------------------------------------------------------------------------
00002338 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000233C FB00                       	dc.w $FB00		; RAM address
0000233E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002340 0000 0000                  	dc.l Pal_Title
00002344 FB00                       	dc.w $FB00
00002346 001F                       	dc.w $1F
00002348 0000 0000                  	dc.l Pal_LevelSel
0000234C FB00                       	dc.w $FB00
0000234E 001F                       	dc.w $1F
00002350 0000 0000                  	dc.l Pal_Sonic
00002354 FB00                       	dc.w $FB00
00002356 0007                       	dc.w 7
00002358 0000 0000                  	dc.l Pal_GHZ
0000235C FB20                       	dc.w $FB20
0000235E 0017                       	dc.w $17
00002360 0000 0000                  	dc.l Pal_LZ
00002364 FB20                       	dc.w $FB20
00002366 0017                       	dc.w $17
00002368 0000 0000                  	dc.l Pal_MZ
0000236C FB20                       	dc.w $FB20
0000236E 0017                       	dc.w $17
00002370 0000 0000                  	dc.l Pal_SLZ
00002374 FB20                       	dc.w $FB20
00002376 0017                       	dc.w $17
00002378 0000 0000                  	dc.l Pal_SYZ
0000237C FB20                       	dc.w $FB20
0000237E 0017                       	dc.w $17
00002380 0000 0000                  	dc.l Pal_SBZ1
00002384 FB20                       	dc.w $FB20
00002386 0017                       	dc.w $17
00002388 0000 0000                  	dc.l Pal_Special
0000238C FB00                       	dc.w $FB00
0000238E 001F                       	dc.w $1F
00002390 0000 0000                  	dc.l Pal_LZWater
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_SBZ3
0000239C FB20                       	dc.w $FB20
0000239E 0017                       	dc.w $17
000023A0 0000 0000                  	dc.l Pal_SBZ3Water
000023A4 FB00                       	dc.w $FB00
000023A6 001F                       	dc.w $1F
000023A8 0000 0000                  	dc.l Pal_SBZ2
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZSonWater
000023B4 FB00                       	dc.w $FB00
000023B6 0007                       	dc.w 7
000023B8 0000 0000                  	dc.l Pal_SBZ3SonWat
000023BC FB00                       	dc.w $FB00
000023BE 0007                       	dc.w 7
000023C0 0000 0000                  	dc.l Pal_SpeResult
000023C4 FB00                       	dc.w $FB00
000023C6 001F                       	dc.w $1F
000023C8 0000 0000                  	dc.l Pal_SpeContinue
000023CC FB00                       	dc.w $FB00
000023CE 000F                       	dc.w $F
000023D0 0000 0000                  	dc.l Pal_Ending
000023D4 FB00                       	dc.w $FB00
000023D6 001F                       	dc.w $1F
000023D8 0000 0000                  	dc.l Pal_Idiot
000023DC FB20                       	dc.w $FB20
000023DE 0007                       	dc.w 7
000023E0 0000 0000                  	dc.l Pal_BHZ
000023E4 FB20                       	dc.w $FB20
000023E6 0017                       	dc.w $17
000023E8 0000 0000                  	dc.l Pal_Gronic
000023EC FB00                       	dc.w $FB00
000023EE 0007                       	dc.w 7
000023F0 0000 0000                  	dc.l Pal_LZGroWater
000023F4 FB00                       	dc.w $FB00
000023F6 0007                       	dc.w 7
000023F8 0000 0000                  	dc.l Pal_SBZ3GroWat
000023FC FB00                       	dc.w $FB00
000023FE 0007                       	dc.w 7
00002400 0000 0000                  	dc.l Pal_Anakama
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002406 0007                       	dc.w 7
00002408                            
00002408                            ; ---------------------------------------------------------------------------
00002408                            ; Pallet data
00002408                            ; ---------------------------------------------------------------------------
00002408                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002488                            Pal_Title:	incbin	pallet\title.bin
00002508                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002588                            Pal_Sonic:	incbin	pallet\sonic.bin
000025A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002608                            Pal_LZ:		incbin	pallet\lz.bin
00002668                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026E8                            Pal_MZ:		incbin	pallet\mz.bin
00002748                            Pal_SLZ:	incbin	pallet\slz.bin
000027A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002808                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002868                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002948                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A28                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A48                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A68                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AC8                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B48                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B88                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C08                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C28                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C48                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C68                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C88                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D08                            
00002D08                            ; ---------------------------------------------------------------------------
00002D08                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D08                            ; ---------------------------------------------------------------------------
00002D08                            
00002D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D08                            
00002D08                            
00002D08                            DelayProgram:				; XREF: PauseGame
00002D08 46FC 2300                  		move	#$2300,sr
00002D0C                            
00002D0C                            loc_29AC:
00002D0C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D10 66FA                       		bne.s	loc_29AC
00002D12 4E75                       		rts	
00002D14                            ; End of function DelayProgram
00002D14                            
00002D14                            ; ---------------------------------------------------------------------------
00002D14                            ; Subroutine to	generate a pseudo-random number	in d0
00002D14                            ; ---------------------------------------------------------------------------
00002D14                            
00002D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D14                            
00002D14                            
00002D14                            RandomNumber:
00002D14 2238 F636                  		move.l	($FFFFF636).w,d1
00002D18 6600                       		bne.s	loc_29C0
00002D1A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D20                            
00002D20                            loc_29C0:
00002D20 2001                       		move.l	d1,d0
00002D22 E581                       		asl.l	#2,d1
00002D24 D280                       		add.l	d0,d1
00002D26 E781                       		asl.l	#3,d1
00002D28 D280                       		add.l	d0,d1
00002D2A 3001                       		move.w	d1,d0
00002D2C 4841                       		swap	d1
00002D2E D041                       		add.w	d1,d0
00002D30 3200                       		move.w	d0,d1
00002D32 4841                       		swap	d1
00002D34 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D38 4E75                       		rts	
00002D3A                            ; End of function RandomNumber
00002D3A                            
00002D3A                            
00002D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3A                            
00002D3A                            
00002D3A                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D3A 0240 00FF                  		andi.w	#$FF,d0
00002D3E D040                       		add.w	d0,d0
00002D40 0640 0080                  		addi.w	#$80,d0
00002D44 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D48 0440 0080                  		subi.w	#$80,d0
00002D4C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D50 4E75                       		rts	
00002D52                            ; End of function CalcSine
00002D52                            
00002D52                            ; ===========================================================================
00002D52                            
00002D52                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FD2                            
00002FD2                            ; ===========================================================================
00002FD2 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FD6 3200                       		move.w	d0,d1
00002FD8 4841                       		swap	d1
00002FDA 7000                       		moveq	#0,d0
00002FDC 3200                       		move.w	d0,d1
00002FDE 7407                       		moveq	#7,d2
00002FE0                            
00002FE0                            loc_2C80:
00002FE0 E599                       		rol.l	#2,d1
00002FE2 D040                       		add.w	d0,d0
00002FE4 5240                       		addq.w	#1,d0
00002FE6 9240                       		sub.w	d0,d1
00002FE8 6400                       		bcc.s	loc_2C9A
00002FEA D240                       		add.w	d0,d1
00002FEC 5340                       		subq.w	#1,d0
00002FEE 51CA FFF0                  		dbf	d2,loc_2C80
00002FF2 E248                       		lsr.w	#1,d0
00002FF4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF8 4E75                       		rts	
00002FFA                            ; ===========================================================================
00002FFA                            
00002FFA                            loc_2C9A:
00002FFA 5240                       		addq.w	#1,d0
00002FFC 51CA FFE2                  		dbf	d2,loc_2C80
00003000 E248                       		lsr.w	#1,d0
00003002 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003006 4E75                       		rts	
00003008                            
00003008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003008                            
00003008                            
00003008                            CalcAngle:
00003008 48E7 1800                  		movem.l	d3-d4,-(sp)
0000300C 7600                       		moveq	#0,d3
0000300E 7800                       		moveq	#0,d4
00003010 3601                       		move.w	d1,d3
00003012 3802                       		move.w	d2,d4
00003014 8843                       		or.w	d3,d4
00003016 6700                       		beq.s	loc_2D04
00003018 3802                       		move.w	d2,d4
0000301A 4A43                       		tst.w	d3
0000301C 6A00 0000                  		bpl.w	loc_2CC2
00003020 4443                       		neg.w	d3
00003022                            
00003022                            loc_2CC2:
00003022 4A44                       		tst.w	d4
00003024 6A00 0000                  		bpl.w	loc_2CCA
00003028 4444                       		neg.w	d4
0000302A                            
0000302A                            loc_2CCA:
0000302A B843                       		cmp.w	d3,d4
0000302C 6400 0000                  		bcc.w	loc_2CDC
00003030 E18C                       		lsl.l	#8,d4
00003032 88C3                       		divu.w	d3,d4
00003034 7000                       		moveq	#0,d0
00003036 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
0000303A 6000                       		bra.s	loc_2CE6
0000303C                            ; ===========================================================================
0000303C                            
0000303C                            loc_2CDC:				; XREF: CalcAngle
0000303C E18B                       		lsl.l	#8,d3
0000303E 86C4                       		divu.w	d4,d3
00003040 7040                       		moveq	#$40,d0
00003042 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003046                            
00003046                            loc_2CE6:
00003046 4A41                       		tst.w	d1
00003048 6A00 0000                  		bpl.w	loc_2CF2
0000304C 4440                       		neg.w	d0
0000304E 0640 0080                  		addi.w	#$80,d0
00003052                            
00003052                            loc_2CF2:
00003052 4A42                       		tst.w	d2
00003054 6A00 0000                  		bpl.w	loc_2CFE
00003058 4440                       		neg.w	d0
0000305A 0640 0100                  		addi.w	#$100,d0
0000305E                            
0000305E                            loc_2CFE:
0000305E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003062 4E75                       		rts	
00003064                            ; ===========================================================================
00003064                            
00003064                            loc_2D04:				; XREF: CalcAngle
00003064 303C 0040                  		move.w	#$40,d0
00003068 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000306C 4E75                       		rts	
0000306E                            ; End of function CalcAngle
0000306E                            
0000306E                            ; ===========================================================================
0000306E                            
0000306E                            Angle_Data:	incbin	misc\angles.bin
00003170                            
00003170                            ; ===========================================================================
00003170                            
00003170                            ; ---------------------------------------------------------------------------
00003170                            ; Sega screen
00003170                            ; ---------------------------------------------------------------------------
00003170                            
00003170                            SegaScreen:				; XREF: GameModeArray
00003170 103C 00E4                  		move.b	#$E4,d0
00003174 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
00003178 6100 E668                  		bsr.w	ClearPLC
0000317C 6100 EEA4                  		bsr.w	Pal_FadeFrom
00003180 4DF9 00C0 0004             		lea	($C00004).l,a6
00003186 3CBC 8004                  		move.w	#$8004,(a6)
0000318A 3CBC 8230                  		move.w	#$8230,(a6)
0000318E 3CBC 8407                  		move.w	#$8407,(a6)
00003192 3CBC 8700                  		move.w	#$8700,(a6)
00003196 3CBC 8B00                  		move.w	#$8B00,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 46FC 2700                  		move	#$2700,sr
000031A2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031A6 0200 00BF                  		andi.b	#$BF,d0
000031AA 33C0 00C0 0004             		move.w	d0,($C00004).l
000031B0 6100 E316                  		bsr.w	ClearScreen
000031B4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BE 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031C4 6100 E47E                  		bsr.w	NemDec
000031C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000031CE 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031D4 303C 0000                  		move.w	#0,d0
000031D8 6100 E748                  		bsr.w	EniDec
000031DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E2 203C 6510 0003             		move.l	#$65100003,d0
000031E8 7217                       		moveq	#$17,d1
000031EA 7407                       		moveq	#7,d2
000031EC 6100 E436                  		bsr.w	ShowVDPGraphics
000031F0 43F9 00FF 0180             		lea	($FF0180).l,a1
000031F6 203C 4000 0003             		move.l	#$40000003,d0
000031FC 7227                       		moveq	#$27,d1
000031FE 741B                       		moveq	#$1B,d2
00003200 6100 E422                  		bsr.w	ShowVDPGraphics
00003204 7000                       		moveq	#0,d0
00003206 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000320A 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003210 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003216 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000321C 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003222 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003226 0000 0040                  		ori.b	#$40,d0
0000322A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003230                            
00003230                            Sega_WaitPallet:
00003230 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003236 6100 FAD0                  		bsr.w	DelayProgram
0000323A 6100 EF9E                  		bsr.w	PalCycle_Sega
0000323E 66F0                       		bne.s	Sega_WaitPallet
00003240                            
00003240 103C 00E1                  		move.b	#$E1,d0
00003244 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003248 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000324E 6100 FAB8                  		bsr.w	DelayProgram
00003252 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003258                            
00003258                            Sega_WaitEnd:
00003258 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000325E 6100 FAA8                  		bsr.w	DelayProgram
00003262 4A78 F614                  		tst.w	($FFFFF614).w
00003266 6700                       		beq.s	Sega_GotoTitle
00003268 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000326E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003270                            
00003270                            Sega_GotoTitle:
00003270 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003276 4E75                       		rts	
00003278                            ; ===========================================================================
00003278                            
00003278                            ; ---------------------------------------------------------------------------
00003278                            ; Title	screen
00003278                            ; ---------------------------------------------------------------------------
00003278                            
00003278                            TitleScreen:				; XREF: GameModeArray
00003278 103C 00E4                  		move.b	#$E4,d0
0000327C 6100 E322                  		bsr.w	PlaySound_Special ; stop music
00003280 6100 EDA0                  		bsr.w	Pal_FadeFrom
00003284 6100 E55C                  		bsr.w	ClearPLC
00003288 46FC 2700                  		move	#$2700,sr
0000328C 6100 E2C8                  		bsr.w	SoundDriverLoad
00003290 4DF9 00C0 0004             		lea	($C00004).l,a6
00003296 3CBC 8004                  		move.w	#$8004,(a6)
0000329A 3CBC 8230                  		move.w	#$8230,(a6)
0000329E 3CBC 8407                  		move.w	#$8407,(a6)
000032A2 3CBC 9001                  		move.w	#$9001,(a6)
000032A6 3CBC 9200                  		move.w	#$9200,(a6)
000032AA 3CBC 8B03                  		move.w	#$8B03,(a6)
000032AE 3CBC 8720                  		move.w	#$8720,(a6)
000032B2 4238 F64E                  		clr.b	($FFFFF64E).w
000032B6 6100 E210                  		bsr.w	ClearScreen
000032BA 43F8 D000                  		lea	($FFFFD000).w,a1
000032BE 7000                       		moveq	#0,d0
000032C0 323C 07FF                  		move.w	#$7FF,d1
000032C4                            
000032C4                            Title_ClrObjRam:
000032C4 22C0                       		move.l	d0,(a1)+
000032C6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032CA                            
000032CA                            ; gomer
000032CA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032D4 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032DA 6100 E368                  		bsr.w	NemDec
000032DE 7003                       		moveq	#3,d0		; load Sonic's pallet
000032E0 6100 EFEA                  		bsr.w	PalLoad1
000032E4                            
000032E4 43F9 00FF 0000             		lea	($FF0000).l,a1
000032EA 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032F0 303C 0000                  		move.w	#0,d0
000032F4 6100 E62C                  		bsr.w	EniDec
000032F8                            ; help how the fuck can i do this IT SHOWS NOTHING
000032F8 6100 EC7E                  		bsr.w	Pal_FadeTo
000032FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003302 203C 4000 0003             		move.l	#$40000003,d0
00003308 7227                       		moveq	#$27,d1
0000330A 741B                       		moveq	#$1B,d2
0000330C 6100 E316                  		bsr.w	ShowVDPGraphics
00003310                            
00003310                            
00003310 43F9 00FF 0000             		lea	($FF0000).l,a1
00003316 203C 6000 0003             		move.l	#$60000003,d0
0000331C 7227                       		moveq	#$27,d1
0000331E 741B                       		moveq	#$1B,d2
00003320                            
00003320 6100 ED00                  		bsr.w	Pal_FadeFrom
00003324                            
00003324                            
00003324 6100 E1A2                  		bsr.w	ClearScreen
00003328 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003332 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003338 6100 E30A                  		bsr.w	NemDec
0000333C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003346 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000334C 6100 E2F6                  		bsr.w	NemDec
00003350 43F9 00FF 0000             		lea	($FF0000).l,a1
00003356 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000335C 303C 0000                  		move.w	#0,d0
00003360 6100 E5C0                  		bsr.w	EniDec
00003364 43F9 00FF 0000             		lea	($FF0000).l,a1
0000336A 203C 4000 0003             		move.l	#$40000003,d0
00003370 7227                       		moveq	#$27,d1
00003372 741B                       		moveq	#$1B,d2
00003374 6100 E2AE                  		bsr.w	ShowVDPGraphics
00003378 6100 ECA8                  		bsr.w	Pal_FadeFrom
0000337C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003380 7000                       		moveq	#0,d0
00003382 323C 001F                  		move.w	#$1F,d1
00003386                            
00003386                            
00003386                            Title_ClrPallet:
00003386 22C0                       		move.l	d0,(a1)+
00003388 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000338C                            
0000338C 7003                       		moveq	#3,d0		; load Sonic's pallet
0000338E 6100 EF3C                  		bsr.w	PalLoad1
00003392 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003398 4EB9 0000 0000             		jsr	ObjectsLoad
0000339E 4EB9 0000 0000             		jsr	BuildSprites
000033A4 6100 EBD2                  		bsr.w	Pal_FadeTo
000033A8 46FC 2700                  		move	#$2700,sr
000033AC 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033B6 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033BC 6100 E286                  		bsr.w	NemDec
000033C0 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033CA 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033D0 6100 E272                  		bsr.w	NemDec
000033D4 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033DE 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033E4 6100 E25E                  		bsr.w	NemDec
000033E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000033EE 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033F6 4BF9 0000 05E8             		lea	(Art_Text).l,a5
000033FC 323C 0BAD                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003400                            
00003400                            Title_LoadText:
00003400 2C9D                       		move.l	(a5)+,(a6)
00003402 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003406                            
00003406 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000340C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003412 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003418 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000341E 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003424 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000342A 6100 0000                  		bsr.w	LevelSizeLoad
0000342E 6100 0000                  		bsr.w	DeformBgLayer
00003432                            
00003432 43F8 B000                  		lea	($FFFFB000).w,a1
00003436 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000343C 303C 0000                  		move.w	#0,d0
00003440 6100 E4E0                  		bsr.w	EniDec
00003444 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000344A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003450 6100 E64E                  		bsr.w	KosDec
00003454 6100 0000                  		bsr.w	LevelLayoutLoad
00003458                            
00003458 46FC 2700                  		move	#$2700,sr
0000345C 6100 E06A                  		bsr.w	ClearScreen
00003460 4BF9 00C0 0004             		lea	($C00004).l,a5
00003466 4DF9 00C0 0000             		lea	($C00000).l,a6
0000346C 47F8 F708                  		lea	($FFFFF708).w,a3
00003470 49F8 A440                  		lea	($FFFFA440).w,a4
00003474 343C 6000                  		move.w	#$6000,d2
00003478 6100 0000                  		bsr.w	LoadTilesFromStart2
0000347C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003482 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003488 303C 0000                  		move.w	#0,d0
0000348C 6100 E494                  		bsr.w	EniDec
00003490 43F9 00FF 0000             		lea	($FF0000).l,a1
00003496 203C 4206 0003             		move.l	#$42060003,d0
0000349C 7221                       		moveq	#$21,d1
0000349E 7415                       		moveq	#$15,d2
000034A0 6100 E182                  		bsr.w	ShowVDPGraphics
000034A4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034AE 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034B4 6100 E18E                  		bsr.w	NemDec
000034B8 7001                       		moveq	#1,d0		; load title screen pallet
000034BA 6100 EE10                  		bsr.w	PalLoad1
000034BE 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034C2 6100 E0DC                  		bsr.w	PlaySound_Special
000034C6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034CC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034D2 43F8 D080                  		lea	($FFFFD080).w,a1
000034D6 7000                       		moveq	#0,d0
000034D8 323C 000F                  		move.w	#$F,d1
000034DC                            
000034DC                            Title_ClrObjRam2:
000034DC 22C0                       		move.l	d0,(a1)+
000034DE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034E2                            
000034E2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034E8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034EE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034F4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034FA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003500 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003506 4EB9 0000 0000             		jsr	ObjectsLoad
0000350C 6100 0000                  		bsr.w	DeformBgLayer
00003510 4EB9 0000 0000             		jsr	BuildSprites
00003516 7000                       		moveq	#0,d0
00003518 6100 E29C                  		bsr.w	LoadPLC2
0000351C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003522 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003528 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000352C 0000 0040                  		ori.b	#$40,d0
00003530 33C0 00C0 0004             		move.w	d0,($C00004).l
00003536 6100 EA40                  		bsr.w	Pal_FadeTo
0000353A                            
0000353A                            loc_317C:
0000353A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003540 6100 F7C6                  		bsr.w	DelayProgram
00003544 4EB9 0000 0000             		jsr	ObjectsLoad
0000354A 6100 0000                  		bsr.w	DeformBgLayer
0000354E 4EB9 0000 0000             		jsr	BuildSprites
00003554 6100 E60C                  		bsr.w	PalCycle_Title
00003558 6100 E296                  		bsr.w	RunPLC_RAM
0000355C 3038 D008                  		move.w	($FFFFD008).w,d0
00003560 5440                       		addq.w	#2,d0
00003562 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003566 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000356A 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000356C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003572 4E75                       		rts	
00003574                            ; ===========================================================================
00003574                            
00003574                            Title_ChkRegion:
00003574 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003578 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000357A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003580 6000                       		bra.s	Title_EnterCheat
00003582                            ; ===========================================================================
00003582                            
00003582                            Title_RegionJ:				; XREF: Title_ChkRegion
00003582 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003588                            
00003588                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003588 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000358C D0C0                       		adda.w	d0,a0
0000358E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003592 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003596 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003598 6600                       		bne.s	loc_3210	; if not, branch
0000359A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000359E 4A00                       		tst.b	d0
000035A0 6600                       		bne.s	Title_CountC
000035A2 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035A6 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035AA E249                       		lsr.w	#1,d1
000035AC 0241 0003                  		andi.w	#3,d1
000035B0 6700                       		beq.s	Title_PlayRing
000035B2 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035B6 6A00                       		bpl.s	Title_PlayRing
000035B8 7201                       		moveq	#1,d1
000035BA 1181 1001                  		move.b	d1,1(a0,d1.w)
000035BE                            
000035BE                            Title_PlayRing:
000035BE 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035C4 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C8 6100 DFD6                  		bsr.w	PlaySound_Special
000035CC 6000                       		bra.s	Title_CountC
000035CE                            ; ===========================================================================
000035CE                            
000035CE                            loc_3210:				; XREF: Title_EnterCheat
000035CE 4A00                       		tst.b	d0
000035D0 6700                       		beq.s	Title_CountC
000035D2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035D8 6700                       		beq.s	Title_CountC
000035DA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035E0                            
000035E0                            Title_CountC:
000035E0 1038 F605                  		move.b	($FFFFF605).w,d0
000035E4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035E8 6700                       		beq.s	loc_3230	; if not, branch
000035EA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035EE                            
000035EE                            loc_3230:
000035EE 4A78 F614                  		tst.w	($FFFFF614).w
000035F2 6700 0000                  		beq.w	Demo
000035F6                            		; (temporary until we have an actual options screen)
000035F6 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035FC 6700                       		beq.s	@notc
000035FE                            
000035FE 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003602 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003608 6D00                       		blt.s	@notoverflow
0000360A 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003610                            	@notoverflow:
00003610 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003614 6100 DF8A                  		bsr.w	PlaySound_Special
00003618                            	@notc:
00003618 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000361E 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003622                            
00003622                            Title_ChkLevSel:
00003622 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003628 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000362C                            		
0000362C                            		
0000362C 7002                       		moveq	#2,d0
0000362E 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003632 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003636 7000                       		moveq	#0,d0
00003638 323C 00DF                  		move.w	#$DF,d1
0000363C                            
0000363C                            Title_ClrScroll:
0000363C 22C0                       		move.l	d0,(a1)+
0000363E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003642                            
00003642 21C0 F616                  		move.l	d0,($FFFFF616).w
00003646 46FC 2700                  		move	#$2700,sr
0000364A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003650 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000365A 323C 03FF                  		move.w	#$3FF,d1
0000365E                            
0000365E                            Title_ClrVram:
0000365E 2C80                       		move.l	d0,(a6)
00003660 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003664                            
00003664 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003668 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000366C                            
0000366C 6100 0000                  		bsr.w	LevSelTextLoad
00003670                            		
00003670                            		; sound test fix
00003670 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003674 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000367A                            		
0000367A 363C C65F                  		move.w	#$C680-$21,d3 ; selected
0000367E 0C46 0014                  		cmpi.w	#$14,d6
00003682 6700                       		beq.s	@issndtst
00003684 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003688                            	@issndtst:
00003688 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000368C 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003690                            		
00003690 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003694 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000369C                            		
0000369C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036A2 6700                       		beq.s	@issndtst2
000036A4                            		
000036A4 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036AA 6100 0000                  		bsr.w	CStringSlop
000036AE 6000                       		bra.s	LevelSelect
000036B0                            	@issndtst2:
000036B0 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036B6 6100 0000                  		bsr.w	CStringSlop
000036BA                            		
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            ; Level	Select
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            LevelSelect:
000036BA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036C0 6100 F646                  		bsr.w	DelayProgram
000036C4 6100 0000                  		bsr.w	LevSelControls
000036C8 6100 E126                  		bsr.w	RunPLC_RAM
000036CC 4AB8 F680                  		tst.l	($FFFFF680).w
000036D0 66E8                       		bne.s	LevelSelect
000036D2 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036D8 67E0                       		beq.s	LevelSelect	; if not, branch
000036DA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036DE 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036E2 6600                       		bne.s	@dont	; if not, dont blow this place up
000036E4                            			
000036E4 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036EA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036F0 6100 F616                  		bsr.w	DelayProgram
000036F4                            	@dont:
000036F4 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036F8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036FA                            		
000036FA 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003700 67B8                       		beq.s	LevelSelect	; if not, branch
00003702                            		
00003702 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003708 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000370A                            		
0000370A 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000370E 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003712                            		
00003712 4EB9 0000 0000             		jsr		ShowNow_Playing
00003718 60A0                       		bra.s	LevelSelect
0000371A                            ; ===========================================================================
0000371A                            
0000371A                            LevSel_SEGA:				; XREF: LevelSelect
0000371A 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003720 4E75                       		rts	
00003722                            ; ===========================================================================
00003722                            
00003722                            LevSel_Ending:				; XREF: LevelSelect
00003722 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003728 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000372E 4E75                       		rts	
00003730                            ; ===========================================================================
00003730                            
00003730                            LevSel_Credits:				; XREF: LevelSelect
00003730 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003736 103C 0091                  		move.b	#$91,d0
0000373A 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
0000373E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003744 4E75                       		rts	
00003746                            ; ===========================================================================
00003746                            
00003746                            LevSel_Level_SS:			; XREF: LevelSelect
00003746 D040                       		add.w	d0,d0
00003748 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000374C 6B00 FF6C                  		bmi.w	LevelSelect
00003750 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003754 6600                       		bne.s	LevSel_Level	; if not, branch
00003756 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000375C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003760 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003766 7000                       		moveq	#0,d0
00003768 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000376C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003770 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003774 4E75                       		rts	
00003776                            ; ===========================================================================
00003776                            
00003776                            LevSel_Level:				; XREF: LevSel_Level_SS
00003776 0240 3FFF                  		andi.w	#$3FFF,d0
0000377A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000377E                            
0000377E                            PlayLevel:				; XREF: ROM:00003246j ...
0000377E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003784 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000378A 7000                       		moveq	#0,d0
0000378C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003790 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003794 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003798 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000379C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037A0 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037A4 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037A8 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037B4 4E75                       		rts	
000037B6                            ; ===========================================================================
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            ; Level	select - level pointers
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            LSelectPointers:
000037B6 0000                       		dc.w $0000 ; crz
000037B8 0001                       		dc.w $0001
000037BA 0002                       		dc.w $0002
000037BC 0100                       		dc.w $0100 ; ilfez
000037BE 0101                       		dc.w $0101
000037C0 0102                       		dc.w $0102
000037C2 0200                       		dc.w $0200 ; mz
000037C4 0201                       		dc.w $0201
000037C6 0202                       		dc.w $0202
000037C8 0300                       		dc.w $0300 ; dgrotz
000037CA 0301                       		dc.w $0301 
000037CC 0302                       		dc.w $0302 
000037CE 0700                       		dc.w $0700 ; the other mz...
000037D0 0701                       		dc.w $0701 
000037D2 0702                       		dc.w $0702 
000037D4 0400                       		dc.w $0400 ; tpfbz
000037D6 0401                       		dc.w $0401
000037D8 0402                       		dc.w $0402
000037DA 0500                       		dc.w $0500 ; zzzzz
000037DC 0501                       		dc.w $0501 
000037DE 0103                       		dc.w $0103 
000037E0 0502                       		dc.w $0502 ; fz
000037E2 FFFF                       		dc.w $FFFF ; special
000037E4 8000                       		dc.w $8000 ; sound test
000037E6                            		even
000037E6                            ; --------------------------------------
000037E6                            ; ---------------------------------------------------------------------------
000037E6                            ; Level	select codes
000037E6                            ; ---------------------------------------------------------------------------
000037E6                            LevelSelectCode_J:
000037E6                            		incbin	misc\ls_jcode.bin
000037EC                            		even
000037EC                            
000037EC                            LevelSelectCode_US:
000037EC                            		incbin	misc\ls_ucode.bin
000037F2                            		even
000037F2                            ; ===========================================================================
000037F2                            
000037F2                            ; ---------------------------------------------------------------------------
000037F2                            ; Demo mode
000037F2                            ; ---------------------------------------------------------------------------
000037F2                            
000037F2                            Demo:					; XREF: TitleScreen
000037F2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037F8                            
000037F8                            loc_33B6:				; XREF: loc_33E4
000037F8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037FE 6100 F508                  		bsr.w	DelayProgram
00003802 6100 0000                  		bsr.w	DeformBgLayer
00003806 6100 E338                  		bsr.w	PalCycle_Load
0000380A 6100 DFE4                  		bsr.w	RunPLC_RAM
0000380E 3038 D008                  		move.w	($FFFFD008).w,d0
00003812 5440                       		addq.w	#2,d0
00003814 31C0 D008                  		move.w	d0,($FFFFD008).w
00003818 0C40 1C00                  		cmpi.w	#$1C00,d0
0000381C 6500                       		bcs.s	loc_33E4
0000381E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003824 4E75                       		rts	
00003826                            ; ===========================================================================
00003826                            
00003826                            loc_33E4:				; XREF: Demo
00003826 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000382C 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003830 4A78 F614                  		tst.w	($FFFFF614).w
00003834 6600 FFC2                  		bne.w	loc_33B6
00003838 103C 00E0                  		move.b	#$E0,d0
0000383C 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
00003840 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003844 0240 0007                  		andi.w	#7,d0
00003848 D040                       		add.w	d0,d0
0000384A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000384E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003852 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003856 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000385C 6500                       		bcs.s	loc_3422	; if yes, branch
0000385E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003864                            
00003864                            loc_3422:
00003864 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000386A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003870 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003874 6600                       		bne.s	Demo_Level	; if not, branch
00003876 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000387C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003880 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003884                            
00003884                            Demo_Level:
00003884 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000388A 7000                       		moveq	#0,d0
0000388C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003890 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003894 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003898 4E75                       		rts	
0000389A                            ; ===========================================================================
0000389A                            ; ---------------------------------------------------------------------------
0000389A                            ; Levels used in demos
0000389A                            ; ---------------------------------------------------------------------------
0000389A                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038A2                            		even
000038A2                            
000038A2                            ; ---------------------------------------------------------------------------
000038A2                            ; Subroutine to	change what you're selecting in the level select
000038A2                            ; ---------------------------------------------------------------------------
000038A2                            
000038A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038A2                            
000038A2                            
000038A2                            LevSelControls:				; XREF: LevelSelect
000038A2 1238 F605                  		move.b	($FFFFF605).w,d1
000038A6 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038AA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038AC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038B0 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038B4                            
000038B4                            LevSel_UpDown:
000038B4 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038BA 1238 F604                  		move.b	($FFFFF604).w,d1
000038BE 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038C2 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038C6 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038CA 0801 0000                  		btst	#0,d1		; is up	pressed?
000038CE 6700                       		beq.s	LevSel_Down	; if not, branch
000038D0 5346                       		subq.w	#1,d6		; move up 1 selection
000038D2 6400                       		bcc.s	LevSel_Down
000038D4 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038D6                            
000038D6                            LevSel_Down:
000038D6 0801 0001                  		btst	#1,d1		; is down pressed?
000038DA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038DC 5246                       		addq.w	#1,d6		; move down 1 selection
000038DE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038E2 6500                       		bcs.s	LevSel_Refresh
000038E4 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038E6 6000                       		bra.s	LevSel_Refresh
000038E8                            		
000038E8                            LevSel_LR:
000038E8 0801 0002                  		btst	#2,d1		; is left pressed?
000038EC 6700                       		beq.s	LevSel_Right	; if not, branch
000038EE 0446 0000                  		sub.w	#lsrow2size,d6
000038F2 64E2                       		bcc.s	LevSel_Down
000038F4 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038F8                            LevSel_Right:
000038F8 0801 0003                  		btst	#3,d1		; is right pressed?
000038FC 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038FE 0646 0000                  		add.w	#lsrow1size,d6
00003902 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003906 6500                       		bcs.s	LevSel_Refresh
00003908 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000390C                            ; ===========================================================================
0000390C                            LevSel_Refresh:
0000390C                            		
0000390C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003910 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003914                            		
00003914 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000391A 6600                       		bne.s	@exitsndtest
0000391C                            		
0000391C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003920 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003926 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000392E 6100 0000                  		bsr.w	CStringSlop
00003932                            	@exitsndtest:
00003932                            	
00003932 363C C65F                  		move.w	#$C680-$21,d3
00003936 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000393A 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000393E                            		
0000393E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003944 6600                       		bne.s	@entersndtest
00003946                            		
00003946 363C C65F                  		move.w	#$C680-$21,d3
0000394A 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003950 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003958 6100 0000                  		bsr.w	CStringSlop
0000395C                            	@entersndtest:
0000395C 4E75                       		rts	
0000395E                            		
0000395E                            LevSel_SndTest:				; XREF: LevSelControls
0000395E 1238 F605                  		move.b	($FFFFF605).w,d1
00003962 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003966 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003968 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000396E 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003972                            		
00003972 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003976 0801 0002                  		btst	#2,d1		; is left pressed?
0000397A 6700                       		beq.s	SndTest_Right	; if not, branch
0000397C 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000397E                            		; no need the fact it's a byte does the trick
0000397E                            
0000397E                            SndTest_Right:
0000397E 0801 0003                  		btst	#3,d1		; is right pressed?
00003982 6700                       		beq.s	SndTest_A	; if not, branch
00003984 5200                       		addq.b	#1,d0		; add 1	to sound test
00003986                            		; same here
00003986                            		
00003986                            SndTest_A:
00003986 0801 0006                  		btst	#6,d1		; is A pressed?
0000398A 6700                       		beq.s	SndTest_B	; if not, branch
0000398C 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000398E 5100                       		subq.b	#8,d0
00003990                            		
00003990                            SndTest_B:
00003990 0801 0004                  		btst	#4,d1		; is B pressed?
00003994 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003996 5000                       		addq.b	#8,d0		; add $10 to sound test
00003998 5000                       		addq.b	#8,d0
0000399A                            
0000399A                            SndTest_Refresh:
0000399A 363C C65F                  		move.w	#$C680-$21,d3
0000399E 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039A2 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039A6                            
000039A6                            LevSel_NoMove:
000039A6 4E75                       		rts	
000039A8                            ; End of function LevSelControls
000039A8                            
000039A8                            ; ---------------------------------------------------------------------------
000039A8                            ; Subroutine to load level select text
000039A8                            ; ---------------------------------------------------------------------------
000039A8                            
000039A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039A8                            
000039A8                            LevSelTextLoad_loop:
000039A8 2D44 0004                  		move.l	d4,4(a6)
000039AC 6100 0000                  		bsr.w	LevSel_ChgLine
000039B0 0684 0080 0000             		addi.l	#$800000,d4
000039B6 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039BA 4E75                       		rts
000039BC                            LevSelTextLoad:				; XREF: TitleScreen
000039BC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039C2 4DF9 00C0 0000             		lea	($C00000).l,a6
000039C8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039CC 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039D2                            		
000039D2 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039D6 61D0                       		bsr.s	LevSelTextLoad_loop
000039D8                            		
000039D8                            		
000039D8 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039DE 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039E2 61C4                       		bsr.s	LevSelTextLoad_loop
000039E4 363C C65F                  		move.w	#$C680-$21,d3
000039E8                            		
000039E8                            LevSelHighlightCode:
000039E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000039EE 7000                       		moveq	#0,d0
000039F0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039F4 3200                       		move.w	d0,d1
000039F6 283C 6086 0003             		move.l	#lsscrpos,d4
000039FC                            		
000039FC 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A00 6D00                       		blt.s	@notsecond
00003A02                            		
00003A02 0440 0000                  		sub.w	#lsrow1size,d0
00003A06 0684 0024 0000             		addi.l	#lsoff,d4
00003A0C                            	@notsecond:
00003A0C EF48                       		lsl.w	#7,d0
00003A0E 4840                       		swap	d0
00003A10 D880                       		add.l	d0,d4
00003A12 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A18 E749                       		lsl.w	#3,d1
00003A1A D241                       		add.w	d1,d1
00003A1C D2C1                       		adda.w	d1,a1
00003A1E 2D44 0004                  		move.l	d4,4(a6)
00003A22 6100 0000                  		bsr.w	LevSel_ChgLine
00003A26 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A2C 6700                       		beq.s	LevSelSndTest
00003A2E 4E75                       		rts
00003A30                            
00003A30                            LevSelSndTest:
00003A30 0643 0030                  		add.w	#$30,d3
00003A34 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A3E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A42 1400                       		move.b	d0,d2
00003A44 E808                       		lsr.b	#4,d0
00003A46 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A4A 1002                       		move.b	d2,d0
00003A4C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A50 4E75                       		rts	
00003A52                            ; End of function LevSelTextLoad
00003A52                            
00003A52                            
00003A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A52                            
00003A52                            
00003A52                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A52 0240 000F                  		andi.w	#$F,d0
00003A56 0C00 000A                  		cmpi.b	#$A,d0
00003A5A 6500                       		bcs.s	loc_3580
00003A5C 5E00                       		addi.b	#7,d0
00003A5E                            
00003A5E                            loc_3580:
00003A5E D043                       		add.w	d3,d0
00003A60 3C80                       		move.w	d0,(a6)
00003A62 4E75                       		rts	
00003A64                            ; End of function LevSel_ChgSnd
00003A64                            
00003A64                            
00003A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A64                            
00003A64                            
00003A64                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A64 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A66                            
00003A66                            @loop:
00003A66 7000                       		moveq	#0,d0
00003A68 1019                       		move.b	(a1)+,d0
00003A6A 0C00 0020                  		cmpi.b	#$20,d0
00003A6E 6E00                       		bgt.s	@draw
00003A70 3CBC 0000                  		move.w	#0,(a6)
00003A74 51CA FFF0                  		dbf	d2,@loop
00003A78 4E75                       		rts	
00003A7A                            ; ===========================================================================
00003A7A                            
00003A7A                            @draw:				; XREF: LevSel_ChgLine
00003A7A D043                       		add.w	d3,d0
00003A7C 3C80                       		move.w	d0,(a6)
00003A7E 51CA FFE6                  		dbf	d2,@loop
00003A82 4E75                       		rts	
00003A84                            ; End of function LevSel_ChgLine
00003A84                            		
00003A84                            CStringSlop_draw:
00003A84 D043                       		add.w	d3,d0
00003A86 3C80                       		move.w	d0,(a6)
00003A88                            CStringSlop:				; XREF: LevSelTextLoad
00003A88 7000                       		moveq	#0,d0
00003A8A 1019                       		move.b	(a1)+,d0
00003A8C 0C00 0020                  		cmpi.b	#$20,d0
00003A90 6EF2                       		bgt.s	CStringSlop_draw
00003A92                            		
00003A92 0C00 0001                  		cmpi.b	#1,d0
00003A96 6700                       		beq.s	@InsertSpaces
00003A98 6500                       		blo.s	@end
00003A9A                            		
00003A9A 3CBC 0000                  		move.w	#0,(a6)
00003A9E 60E8                       		bra.s	CStringSlop
00003AA0                            	@end:
00003AA0 4E75                       		rts
00003AA2                            	@InsertSpaces:
00003AA2 7000                       		moveq	#0,d0
00003AA4 1019                       		move.b	(a1)+,d0
00003AA6                            		
00003AA6                            	@insert:
00003AA6 3CBC 0000                  		move.w	#0,(a6)
00003AAA 51C8 FFFA                  		dbf.w	d0,@insert
00003AAE 60D8                       		bra.s	CStringSlop
00003AB0                            ; End of function LevSel_ChgLine
00003AB0                            
00003AB0                            ; ===========================================================================
00003AB0                            ; ---------------------------------------------------------------------------
00003AB0                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AB0                            ; ---------------------------------------------------------------------------
00003AB0                            LevelMenuText:	
00003AB0 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AC0 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AD0 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AE0 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AF0 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B00 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B10 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B20 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B30 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B40 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B50 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B60 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B70 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003B80 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B90 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BA0                            LMTSecondRow:
00003BA0 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BB0 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BC0 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BD0 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BE0 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BF0 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C00 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C10 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C20 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C30 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C40 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C50                            LMTSelectableEnd:
00003C50 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C60                            LMTEnd:
00003C60                            
00003C60                            Now_Playing:
00003C60 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C70                            		even
00003C70                            NP_Track:
00003C70 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C78                            		even
00003C78                            NP_SFX:
00003C78 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C80                            		even
00003C80                            
00003C80                            ShowNow_Playing:
00003C80 1C00                       		move.b	d0,d6
00003C82 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C86 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C8A 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C90 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C98 6100 FDEE                  		bsr.w	CStringSlop
00003C9C                            		
00003C9C 43FA FFD2                  		lea	NP_Track(pc),a1
00003CA0 0C06 00A0                  		cmpi.b	#$A0,d6
00003CA4 6D00                       		blt.s	@track
00003CA6                            		
00003CA6 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CAA                            	@track:
00003CAA 6100 FDDC                  		bsr.w	CStringSlop
00003CAE                            		
00003CAE 0643 0030                  		add.w	#$30,d3
00003CB2 1006                       		move.b	d6,d0
00003CB4 1400                       		move.b	d0,d2
00003CB6 E808                       		lsr.b	#4,d0
00003CB8 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CBC 1002                       		move.b	d2,d0
00003CBE 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CC2 4E75                       		rts	
00003CC4                            
00003CC4                            ; 1 is insert spaces btw
00003CC4                            Controls_Normal:
00003CC4 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CD0                            		even		
00003CD0                            Controls_SND:
00003CD0 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF6 00                         		even
00003CF6                            		
00003CF6                            OptionMenuText:	
00003CF6 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D06 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D16                            OMTEnd:
00003D16                            		
00003D16                            ; ---------------------------------------------------------------------------
00003D16                            ; Level	Select
00003D16                            ; ---------------------------------------------------------------------------
00003D16                            GotoOptions:
00003D16 43F9 0000 3CF6             		lea	(OptionMenuText).l,a1
00003D1C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D22 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D26 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D2C                            		
00003D2C 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D30 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D34                            
00003D34                            OptionsMenu:
00003D34 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D3A 6100 EFCC                  		bsr.w	DelayProgram
00003D3E 6100 0000                  		bsr.w	OptControls
00003D42 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D46 4AB8 F680                  		tst.l	($FFFFF680).w
00003D4A 66E8                       		bne.s	OptionsMenu
00003D4C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D52 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D54 4E71                       		nop
00003D56 60DC                       		bra.s	OptionsMenu
00003D58                            		
00003D58                            OptReturn:
00003D58 4E75                       		rts
00003D5A                            OptControls:				; XREF: LevelSelect
00003D5A 1238 F605                  		move.b	($FFFFF605).w,d1
00003D5E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D62 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D64 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D68 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D6A                            Opt_UpDown:
00003D6A 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D70 1238 F604                  		move.b	($FFFFF604).w,d1
00003D74 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D78 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D7C 6700                       		beq.s	Opt_Down	; if not, branch
00003D7E 5346                       		subq.w	#1,d6		; move up 1 selection
00003D80 6400                       		bcc.s	Opt_Down
00003D82 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D84                            
00003D84                            Opt_Down:
00003D84 0801 0001                  		btst	#1,d1		; is down pressed?
00003D88 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D8A 5246                       		addq.w	#1,d6		; move down 1 selection
00003D8C 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D90 6500                       		bcs.s	Opt_Refresh
00003D92 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D94                            Opt_Refresh:
00003D94                            		
00003D94                            ; ---------------------------------------------------------------------------
00003D94                            ; Music	playlist
00003D94                            ; ---------------------------------------------------------------------------
00003D94                            MusicList1:	incbin	misc\muslist1.bin
00003D9C                            		even
00003D9C                            MusicList2:	incbin	misc\muslist2.bin
00003DA4                            		even
00003DA4                            MusicList3:	incbin	misc\muslist3.bin
00003DAC                            		even
00003DAC                            MusicList4:	incbin	misc\muslist4.bin
00003DB4                            		even
00003DB4                            ; ===========================================================================
00003DB4                            
00003DB4                            ; ---------------------------------------------------------------------------
00003DB4                            ; Level
00003DB4                            ; ---------------------------------------------------------------------------
00003DB4                            
00003DB4                            Level:					; XREF: GameModeArray
00003DB4 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DBA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DBE 6B00                       		bmi.s	loc_37B6
00003DC0 103C 00E0                  		move.b	#$E0,d0
00003DC4 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DC8                            
00003DC8                            loc_37B6:
00003DC8 6100 DA18                  		bsr.w	ClearPLC
00003DCC 6100 E254                  		bsr.w	Pal_FadeFrom
00003DD0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DD4 6B00                       		bmi.s	Level_ClrRam
00003DD6 46FC 2700                  		move	#$2700,sr
00003DDA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DE4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DEA 6100 D858                  		bsr.w	NemDec
00003DEE 46FC 2300                  		move	#$2300,sr
00003DF2 7000                       		moveq	#0,d0
00003DF4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF8 E948                       		lsl.w	#4,d0
00003DFA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003E00 45F2 0000                  		lea	(a2,d0.w),a2
00003E04 7000                       		moveq	#0,d0
00003E06 1012                       		move.b	(a2),d0
00003E08 6700                       		beq.s	loc_37FC
00003E0A 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003E0E                            
00003E0E                            loc_37FC:
00003E0E 7001                       		moveq	#1,d0
00003E10 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E14                            
00003E14                            Level_ClrRam:
00003E14 43F8 D000                  		lea	($FFFFD000).w,a1
00003E18 7000                       		moveq	#0,d0
00003E1A 323C 07FF                  		move.w	#$7FF,d1
00003E1E                            
00003E1E                            Level_ClrObjRam:
00003E1E 22C0                       		move.l	d0,(a1)+
00003E20 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E24                            
00003E24 43F8 F628                  		lea	($FFFFF628).w,a1
00003E28 7000                       		moveq	#0,d0
00003E2A 323C 0015                  		move.w	#$15,d1
00003E2E                            
00003E2E                            Level_ClrVars:
00003E2E 22C0                       		move.l	d0,(a1)+
00003E30 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E34                            
00003E34 43F8 F700                  		lea	($FFFFF700).w,a1
00003E38 7000                       		moveq	#0,d0
00003E3A 323C 003F                  		move.w	#$3F,d1
00003E3E                            
00003E3E                            Level_ClrVars2:
00003E3E 22C0                       		move.l	d0,(a1)+
00003E40 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E44                            
00003E44 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E48 7000                       		moveq	#0,d0
00003E4A 323C 0047                  		move.w	#$47,d1
00003E4E                            
00003E4E                            Level_ClrVars3:
00003E4E 22C0                       		move.l	d0,(a1)+
00003E50 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E54                            
00003E54 46FC 2700                  		move	#$2700,sr
00003E58 6100 D66E                  		bsr.w	ClearScreen
00003E5C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E62 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E66 3CBC 8230                  		move.w	#$8230,(a6)
00003E6A 3CBC 8407                  		move.w	#$8407,(a6)
00003E6E 3CBC 857C                  		move.w	#$857C,(a6)
00003E72 3CBC 9001                  		move.w	#$9001,(a6)
00003E76 3CBC 8004                  		move.w	#$8004,(a6)
00003E7A 3CBC 8720                  		move.w	#$8720,(a6)
00003E7E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E84 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E88 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E8E 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E90 3CBC 8014                  		move.w	#$8014,(a6)
00003E94 7000                       		moveq	#0,d0
00003E96 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E9A D040                       		add.w	d0,d0
00003E9C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003EA2 3031 0000                  		move.w	(a1,d0.w),d0
00003EA6 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EAA 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EAE 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EB2 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EB6 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EBA 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EC0 6000 0000                  		bra.w	Level_LoadPal
00003EC4                            Player_Palette:
00003EC4                            		; normal, lz, sbz, blank
00003EC4 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003ECC                            		
00003ECC 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ED4 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003EDC 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EE4                            
00003EE4                            		; add more player palettes
00003EE4                            Level_LoadPal:
00003EE4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EEA 46FC 2300                  		move	#$2300,sr
00003EEE                            
00003EEE 7200                       		moveq	#0,d1
00003EF0 1238 FFE8                  		move.b	(v_character),d1
00003EF4 D241                       		add.w	d1,d1
00003EF6 D241                       		add.w	d1,d1
00003EF8 D241                       		add.w	d1,d1
00003EFA 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EFE                            		
00003EFE 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003F02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F08 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F0A 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F0E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F14 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F16 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F1A                            
00003F1A                            Level_WaterPal:
00003F1A 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F1E 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F22 6700                       		beq.s	Level_GetBgm
00003F24 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F2A                            
00003F2A                            ; NineKode begins here - How to play different songs on different acts
00003F2A                             
00003F2A                            Level_GetBgm:
00003F2A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F2E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F32 7000                       		moveq	#0,d0
00003F34 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F38                             
00003F38 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F3E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F40 43F9 0000 3D94             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F46 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F48                             
00003F48                            Level_GetBgm2:
00003F48 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F4E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F50 43F9 0000 3D9C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F56 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F58                             
00003F58                            Level_GetBgm3:
00003F58 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F5E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F60 43F9 0000 3DA4             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F66 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F68                             
00003F68                            Level_GetBgm4:
00003F68 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F6E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F70 43F9 0000 3DAC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F76                             
00003F76                            Level_PlayBgm:
00003F76 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F7A 6100 D61E                  		bsr.w	PlaySound	; play music
00003F7E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F84                             
00003F84                            ; NineKode ends here
00003F84                            
00003F84                            Level_TtlCard:
00003F84 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F8A 6100 ED7C                  		bsr.w	DelayProgram
00003F8E 4EB9 0000 0000             		jsr	ObjectsLoad
00003F94 4EB9 0000 0000             		jsr	BuildSprites
00003F9A 6100 D854                  		bsr.w	RunPLC_RAM
00003F9E 3038 D108                  		move.w	($FFFFD108).w,d0
00003FA2 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FA6 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FA8 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FAC 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FAE 4EB9 0000 0000             		jsr	Hud_Base
00003FB4                            
00003FB4                            loc_3946:
00003FB4 7003                       		moveq	#3,d0
00003FB6 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FBA 6100 0000                  		bsr.w	LevelSizeLoad
00003FBE 6100 0000                  		bsr.w	DeformBgLayer
00003FC2 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FC8 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FCC 6100 0000                  		bsr.w	LoadTilesFromStart
00003FD0 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FD6 6100 0000                  		bsr.w	ColIndexLoad
00003FDA 6100 0000                  		bsr.w	LZWaterEffects
00003FDE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FE4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FE8 6B00                       		bmi.s	Level_ChkDebug
00003FEA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FF0                            
00003FF0                            Level_ChkDebug:
00003FF0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FF4 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FFC 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FFE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004004                            
00004004                            Level_ChkWater:
00004004 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000400A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004010 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004016 6600                       		bne.s	Level_LoadObj	; if not, branch
00004018 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000401E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004024 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000402A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004030                            
00004030                            Level_LoadObj:
00004030 4EB9 0000 0000             		jsr	ObjPosLoad
00004036 4EB9 0000 0000             		jsr	ObjectsLoad
0000403C 4EB9 0000 0000             		jsr	BuildSprites
00004042 7000                       		moveq	#0,d0
00004044 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004048 6600                       		bne.s	loc_39E8	; if yes, branch
0000404A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000404E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004052 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004056                            
00004056                            loc_39E8:
00004056 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000405A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000405E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004062 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004066                            		; move.b	d0,($FFFFFE2F).w
00004066 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000406C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004070 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004074 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004078 6100 0000                  		bsr.w	OscillateNumInit
0000407C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004082 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004088 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
0000408E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004094 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000409A 7000                       		moveq	#0,d0
0000409C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040A0 E548                       		lsl.w	#2,d0
000040A2 2271 0000                  		movea.l	(a1,d0.w),a1
000040A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040AA 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040AC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040B2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040B6 5340                       		subq.w	#1,d0
000040B8 E548                       		lsl.w	#2,d0
000040BA 2271 0000                  		movea.l	(a1,d0.w),a1
000040BE                            
000040BE                            Level_Demo:
000040BE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040C4 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040C8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040D2 6A00                       		bpl.s	Level_ChkWaterPal
000040D4 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040DA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040E0 6600                       		bne.s	Level_ChkWaterPal
000040E2 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040E8                            
000040E8                            Level_ChkWaterPal:
000040E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040EE 6600                       		bne.s	Level_Delay	; if not, branch
000040F0 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040F2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040F8 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040FA 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040FC                            
000040FC                            Level_WaterPal2:
000040FC 6100 E21E                  		bsr.w	PalLoad4_Water
00004100                            
00004100                            Level_Delay:
00004100 323C 0003                  		move.w	#3,d1
00004104                            
00004104                            Level_DelayLoop:
00004104 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000410A 6100 EBFC                  		bsr.w	DelayProgram
0000410E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004112                            
00004112 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004118 6100 DE64                  		bsr.w	Pal_FadeTo2
0000411C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004120 6B00                       		bmi.s	Level_ClrCardArt
00004122 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004126 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000412A 5838 D124                  		addq.b	#4,($FFFFD124).w
0000412E 5838 D164                  		addq.b	#4,($FFFFD164).w
00004132 6000                       		bra.s	Level_StartGame
00004134                            ; ===========================================================================
00004134                            
00004134                            Level_ClrCardArt:
00004134 7002                       		moveq	#2,d0
00004136 4EB9 0000 1784             		jsr	(LoadPLC).l	; load explosion patterns
0000413C 7000                       		moveq	#0,d0
0000413E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004142 0640 0015                  		addi.w	#$15,d0
00004146 4EB9 0000 1784             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000414C                            
0000414C                            Level_StartGame:
0000414C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004152                            
00004152                            ; ---------------------------------------------------------------------------
00004152                            ; Main level loop (when	all title card and loading sequences are finished)
00004152                            ; ---------------------------------------------------------------------------
00004152                            
00004152                            Level_MainLoop:
00004152 6100 D458                  		bsr.w	PauseGame
00004156 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000415C 6100 EBAA                  		bsr.w	DelayProgram
00004160 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004164 6100 0000                  		bsr.w	MoveSonicInDemo
00004168 6100 0000                  		bsr.w	LZWaterEffects
0000416C 4EB9 0000 0000             		jsr	ObjectsLoad
00004172 4A78 FE08                  		tst.w	($FFFFFE08).w
00004176 6600                       		bne.s	loc_3B10
00004178 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000417E 6400                       		bcc.s	loc_3B14
00004180                            
00004180                            loc_3B10:
00004180 6100 0000                  		bsr.w	DeformBgLayer
00004184                            
00004184                            loc_3B14:
00004184 4EB9 0000 0000             		jsr	BuildSprites
0000418A 4EB9 0000 0000             		jsr	ObjPosLoad
00004190 6100 D9AE                  		bsr.w	PalCycle_Load
00004194 6100 D65A                  		bsr.w	RunPLC_RAM
00004198 6100 0000                  		bsr.w	OscillateNumDo
0000419C 6100 0000                  		bsr.w	ChangeRingFrame
000041A0 6100 0000                  		bsr.w	SignpostArtLoad
000041A4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041AA 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041AC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041B0 6600 FC02                  		bne.w	Level		; if yes, branch
000041B4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041BA 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041BE 4E75                       		rts	
000041C0                            ; ===========================================================================
000041C0                            
000041C0                            Level_ChkDemo:				; XREF: Level_MainLoop
000041C0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041C4 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041C6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041CA 6700                       		beq.s	Level_EndDemo	; if not, branch
000041CC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041D2 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041D6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041DC 4E75                       		rts	
000041DE                            ; ===========================================================================
000041DE                            
000041DE                            Level_EndDemo:				; XREF: Level_ChkDemo
000041DE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041E4 6600                       		bne.s	loc_3B88	; if not, branch
000041E6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041EC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041F0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041F2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041F8                            
000041F8                            loc_3B88:
000041F8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004204 4278 F794                  		clr.w	($FFFFF794).w
00004208                            
00004208                            loc_3B98:
00004208 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000420E 6100 EAF8                  		bsr.w	DelayProgram
00004212 6100 0000                  		bsr.w	MoveSonicInDemo
00004216 4EB9 0000 0000             		jsr	ObjectsLoad
0000421C 4EB9 0000 0000             		jsr	BuildSprites
00004222 4EB9 0000 0000             		jsr	ObjPosLoad
00004228 5378 F794                  		subq.w	#1,($FFFFF794).w
0000422C 6A00                       		bpl.s	loc_3BC8
0000422E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004234 6100 DE0C                  		bsr.w	Pal_FadeOut
00004238                            
00004238                            loc_3BC8:
00004238 4A78 F614                  		tst.w	($FFFFF614).w
0000423C 66CA                       		bne.s	loc_3B98
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            ; ---------------------------------------------------------------------------
00004240                            ; Subroutine to	do special water effects in Labyrinth Zone
00004240                            ; ---------------------------------------------------------------------------
00004240                            
00004240                            LZWaterEffects:				; XREF: Level
00004240 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004246 6600                       		bne.s	locret_3C28	; if not, branch
00004248 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000424E 6400                       		bcc.s	LZMoveWater
00004250 6100 0000                  		bsr.w	LZWindTunnels
00004254 6100 0000                  		bsr.w	LZWaterSlides
00004258 6100 0000                  		bsr.w	LZDynamicWater
0000425C                            
0000425C                            LZMoveWater:
0000425C 4238 F64E                  		clr.b	($FFFFF64E).w
00004260 7000                       		moveq	#0,d0
00004262 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004266 E248                       		lsr.w	#1,d0
00004268 D078 F648                  		add.w	($FFFFF648).w,d0
0000426C 31C0 F646                  		move.w	d0,($FFFFF646).w
00004270 3038 F646                  		move.w	($FFFFF646).w,d0
00004274 9078 F704                  		sub.w	($FFFFF704).w,d0
00004278 6400                       		bcc.s	loc_3C1A
0000427A 4A40                       		tst.w	d0
0000427C 6A00                       		bpl.s	loc_3C1A
0000427E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004284 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000428A                            
0000428A                            loc_3C1A:
0000428A 0C40 00DF                  		cmpi.w	#$DF,d0
0000428E 6500                       		bcs.s	loc_3C24
00004290 303C 00DF                  		move.w	#$DF,d0
00004294                            
00004294                            loc_3C24:
00004294 11C0 F625                  		move.b	d0,($FFFFF625).w
00004298                            
00004298                            locret_3C28:
00004298 4E75                       		rts	
0000429A                            ; ===========================================================================
0000429A                            ; ---------------------------------------------------------------------------
0000429A                            ; Labyrinth default water heights
0000429A                            ; ---------------------------------------------------------------------------
0000429A                            WaterHeight:	incbin	misc\lz_heigh.bin
000042A2                            		even
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            ; ---------------------------------------------------------------------------
000042A2                            ; Labyrinth dynamic water routines
000042A2                            ; ---------------------------------------------------------------------------
000042A2                            
000042A2                            LZDynamicWater:				; XREF: LZWaterEffects
000042A2 7000                       		moveq	#0,d0
000042A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A8 D040                       		add.w	d0,d0
000042AA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042AE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042B2 7200                       		moveq	#0,d1
000042B4 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042B8 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042BC 9078 F648                  		sub.w	($FFFFF648).w,d0
000042C0 6700                       		beq.s	locret_3C5A
000042C2 6400                       		bcc.s	loc_3C56
000042C4 4441                       		neg.w	d1
000042C6                            
000042C6                            loc_3C56:
000042C6 D378 F648                  		add.w	d1,($FFFFF648).w
000042CA                            
000042CA                            locret_3C5A:
000042CA 4E75                       		rts	
000042CC                            ; ===========================================================================
000042CC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042CE 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042D0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042D2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042D4                            ; ===========================================================================
000042D4                            
000042D4                            DynWater_LZ1:				; XREF: DynWater_Index
000042D4 3038 F700                  		move.w	($FFFFF700).w,d0
000042D8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042DC 6600                       		bne.s	loc_3CD0
000042DE 323C 00B8                  		move.w	#$B8,d1
000042E2 0C40 0600                  		cmpi.w	#$600,d0
000042E6 6500                       		bcs.s	loc_3CB4
000042E8 323C 0108                  		move.w	#$108,d1
000042EC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042F2 6500                       		bcs.s	loc_3CBA
000042F4 0C40 0C00                  		cmpi.w	#$C00,d0
000042F8 6500                       		bcs.s	loc_3CB4
000042FA 323C 0318                  		move.w	#$318,d1
000042FE 0C40 1080                  		cmpi.w	#$1080,d0
00004302 6500                       		bcs.s	loc_3CB4
00004304 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000430A 323C 05C8                  		move.w	#$5C8,d1
0000430E 0C40 1380                  		cmpi.w	#$1380,d0
00004312 6500                       		bcs.s	loc_3CB4
00004314 323C 03A8                  		move.w	#$3A8,d1
00004318 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000431C 6600                       		bne.s	loc_3CB4
0000431E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004324                            
00004324                            loc_3CB4:
00004324 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004328 4E75                       		rts	
0000432A                            ; ===========================================================================
0000432A                            
0000432A                            loc_3CBA:				; XREF: DynWater_LZ1
0000432A 0C40 0C80                  		cmpi.w	#$C80,d0
0000432E 65F4                       		bcs.s	loc_3CB4
00004330 323C 00E8                  		move.w	#$E8,d1
00004334 0C40 1500                  		cmpi.w	#$1500,d0
00004338 65EA                       		bcs.s	loc_3CB4
0000433A 323C 0108                  		move.w	#$108,d1
0000433E 60E4                       		bra.s	loc_3CB4
00004340                            ; ===========================================================================
00004340                            
00004340                            loc_3CD0:				; XREF: DynWater_LZ1
00004340 5302                       		subq.b	#1,d2
00004342 6600                       		bne.s	locret_3CF4
00004344 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000434A 6400                       		bcc.s	locret_3CF4
0000434C 323C 03A8                  		move.w	#$3A8,d1
00004350 0C40 1300                  		cmpi.w	#$1300,d0
00004354 6500                       		bcs.s	loc_3CF0
00004356 323C 0108                  		move.w	#$108,d1
0000435A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004360                            
00004360                            loc_3CF0:
00004360 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004364                            
00004364                            locret_3CF4:
00004364 4E75                       		rts	
00004366                            ; ===========================================================================
00004366                            
00004366                            DynWater_LZ2:				; XREF: DynWater_Index
00004366 3038 F700                  		move.w	($FFFFF700).w,d0
0000436A 323C 0328                  		move.w	#$328,d1
0000436E 0C40 0500                  		cmpi.w	#$500,d0
00004372 6500                       		bcs.s	loc_3D12
00004374 323C 03C8                  		move.w	#$3C8,d1
00004378 0C40 0B00                  		cmpi.w	#$B00,d0
0000437C 6500                       		bcs.s	loc_3D12
0000437E 323C 0428                  		move.w	#$428,d1
00004382                            
00004382                            loc_3D12:
00004382 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004386 4E75                       		rts	
00004388                            ; ===========================================================================
00004388                            
00004388                            DynWater_LZ3:				; XREF: DynWater_Index
00004388 3038 F700                  		move.w	($FFFFF700).w,d0
0000438C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004390 6600                       		bne.s	loc_3D5E
00004392 323C 0500                  		move.w	#$500,d1
00004396 0C40 0600                  		cmpi.w	#$600,d0
0000439A 6500                       		bcs.s	loc_3D54
0000439C 0C40 1B00                  		cmpi.w	#$1B00,d0
000043A0 6500                       		bcs.s	loc_3D54
000043A2 323C 0850                  		move.w	#$850,d1
000043A6                            
000043A6                            loc_3D54:
000043A6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043AA 31C1 F648                  		move.w	d1,($FFFFF648).w
000043AE 4E75                       		rts	
000043B0                            ; ===========================================================================
000043B0                            
000043B0                            loc_3D5E:				; XREF: DynWater_LZ3
000043B0 5302                       		subq.b	#1,d2
000043B2 6600                       		bne.s	loc_3DA8
000043B4 323C 04C8                  		move.w	#$4C8,d1
000043B8 0C40 0770                  		cmpi.w	#$770,d0
000043BC 6500                       		bcs.s	loc_3DA2
000043BE 323C 0308                  		move.w	#$308,d1
000043C2 0C40 1400                  		cmpi.w	#$1400,d0
000043C6 6500                       		bcs.s	loc_3DA2
000043C8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043CE 6700                       		beq.s	loc_3D8E
000043D0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043D6 6400                       		bcc.s	loc_3D8E
000043D8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043DE 6400                       		bcc.s	loc_3DA2
000043E0                            
000043E0                            loc_3D8E:
000043E0 323C 0508                  		move.w	#$508,d1
000043E4 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E8 0C40 1770                  		cmpi.w	#$1770,d0
000043EC 6500                       		bcs.s	loc_3DA2
000043EE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043F4                            
000043F4                            loc_3DA2:
000043F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F8 4E75                       		rts	
000043FA                            ; ===========================================================================
000043FA                            
000043FA                            loc_3DA8:
000043FA 5302                       		subq.b	#1,d2
000043FC 6600                       		bne.s	loc_3DD2
000043FE 323C 0508                  		move.w	#$508,d1
00004402 0C40 1860                  		cmpi.w	#$1860,d0
00004406 6500                       		bcs.s	loc_3DCC
00004408 323C 0188                  		move.w	#$188,d1
0000440C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004410 6400                       		bcc.s	loc_3DC6
00004412 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004416 6600                       		bne.s	loc_3DCC
00004418                            
00004418                            loc_3DC6:
00004418 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000441E                            
0000441E                            loc_3DCC:
0000441E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004422 4E75                       		rts	
00004424                            ; ===========================================================================
00004424                            
00004424                            loc_3DD2:
00004424 5302                       		subq.b	#1,d2
00004426 6600                       		bne.s	loc_3E0E
00004428 323C 0188                  		move.w	#$188,d1
0000442C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004430 6500                       		bcs.s	loc_3E04
00004432 323C 0900                  		move.w	#$900,d1
00004436 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000443A 6500                       		bcs.s	loc_3E04
0000443C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004442 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004448 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000444E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004454 4E75                       		rts	
00004456                            ; ===========================================================================
00004456                            
00004456                            loc_3E04:
00004456 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000445A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000445E 4E75                       		rts	
00004460                            ; ===========================================================================
00004460                            
00004460                            loc_3E0E:
00004460 0C40 1E00                  		cmpi.w	#$1E00,d0
00004464 6500                       		bcs.s	locret_3E1A
00004466 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000446C                            
0000446C                            locret_3E1A:
0000446C 4E75                       		rts	
0000446E                            ; ===========================================================================
0000446E                            
0000446E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000446E 323C 0228                  		move.w	#$228,d1
00004472 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004478 6500                       		bcs.s	loc_3E2C
0000447A 323C 04C8                  		move.w	#$4C8,d1
0000447E                            
0000447E                            loc_3E2C:
0000447E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004482 4E75                       		rts
00004484                            
00004484                            ; ---------------------------------------------------------------------------
00004484                            ; Labyrinth Zone "wind tunnels"	subroutine
00004484                            ; ---------------------------------------------------------------------------
00004484                            
00004484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004484                            
00004484                            
00004484                            LZWindTunnels:				; XREF: LZWaterEffects
00004484 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004488 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000448C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004492 7000                       		moveq	#0,d0
00004494 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004498 E748                       		lsl.w	#3,d0
0000449A D4C0                       		adda.w	d0,a2
0000449C 7200                       		moveq	#0,d1
0000449E 4A38 FE11                  		tst.b	($FFFFFE11).w
000044A2 6600                       		bne.s	loc_3E56
000044A4 7201                       		moveq	#1,d1
000044A6 514A                       		subq.w	#8,a2
000044A8                            
000044A8                            loc_3E56:
000044A8 43F8 D000                  		lea	($FFFFD000).w,a1
000044AC                            
000044AC                            LZWind_Loop:
000044AC 3029 0008                  		move.w	8(a1),d0
000044B0 B052                       		cmp.w	(a2),d0
000044B2 6500 0000                  		bcs.w	loc_3EF4
000044B6 B06A 0004                  		cmp.w	4(a2),d0
000044BA 6400 0000                  		bcc.w	loc_3EF4
000044BE 3429 000C                  		move.w	$C(a1),d2
000044C2 B46A 0002                  		cmp.w	2(a2),d2
000044C6 6500                       		bcs.s	loc_3EF4
000044C8 B46A 0006                  		cmp.w	6(a2),d2
000044CC 6400                       		bcc.s	loc_3EF4
000044CE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044D2 0200 003F                  		andi.b	#$3F,d0
000044D6 6600                       		bne.s	loc_3E90
000044D8 303C 00D0                  		move.w	#$D0,d0
000044DC 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044E2                            
000044E2                            loc_3E90:
000044E2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044E6 6600 0000                  		bne.w	locret_3F0A
000044EA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044F0 6400                       		bcc.s	loc_3F06
000044F2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044F8 0440 0080                  		subi.w	#$80,d0
000044FC B052                       		cmp.w	(a2),d0
000044FE 6400                       		bcc.s	LZWind_Move
00004500 7002                       		moveq	#2,d0
00004502 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004508 6600                       		bne.s	loc_3EBA
0000450A 4440                       		neg.w	d0
0000450C                            
0000450C                            loc_3EBA:
0000450C D169 000C                  		add.w	d0,$C(a1)
00004510                            
00004510                            LZWind_Move:
00004510 5869 0008                  		addq.w	#4,8(a1)
00004514 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000451A 337C 0000 0012             		move.w	#0,$12(a1)
00004520 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004526 08E9 0001 0022             		bset	#1,$22(a1)
0000452C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004532 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004534 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004538                            
00004538                            LZWind_MoveDown:
00004538 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000453E 6700                       		beq.s	locret_3EF2	; if not, branch
00004540 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004544                            
00004544                            locret_3EF2:
00004544 4E75                       		rts	
00004546                            ; ===========================================================================
00004546                            
00004546                            loc_3EF4:				; XREF: LZWindTunnels
00004546 504A                       		addq.w	#8,a2
00004548 51C9 FF62                  		dbf	d1,LZWind_Loop
0000454C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004550 6700                       		beq.s	locret_3F0A
00004552 137C 0000 001C             		move.b	#0,$1C(a1)
00004558                            
00004558                            loc_3F06:
00004558 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000455C                            
0000455C                            locret_3F0A:
0000455C 4E75                       		rts	
0000455E                            ; End of function LZWindTunnels
0000455E                            
0000455E                            ; ===========================================================================
0000455E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004566 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004578 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004586                            					; XREF: LZWindTunnels
00004586                            		even
00004586                            
00004586                            ; ---------------------------------------------------------------------------
00004586                            ; Labyrinth Zone water slide subroutine
00004586                            ; ---------------------------------------------------------------------------
00004586                            
00004586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004586                            
00004586                            
00004586                            LZWaterSlides:				; XREF: LZWaterEffects
00004586 43F8 D000                  		lea	($FFFFD000).w,a1
0000458A 0829 0001 0022             		btst	#1,$22(a1)
00004590 6600                       		bne.s	loc_3F6A
00004592 3029 000C                  		move.w	$C(a1),d0
00004596 E248                       		lsr.w	#1,d0
00004598 0240 0380                  		andi.w	#$380,d0
0000459C 1229 0008                  		move.b	8(a1),d1
000045A0 0241 007F                  		andi.w	#$7F,d1
000045A4 D041                       		add.w	d1,d0
000045A6 45F8 A400                  		lea	($FFFFA400).w,a2
000045AA 1032 0000                  		move.b	(a2,d0.w),d0
000045AE 45FA 0000                  		lea	byte_3FCF(pc),a2
000045B2 7206                       		moveq	#6,d1
000045B4                            
000045B4                            loc_3F62:
000045B4 B022                       		cmp.b	-(a2),d0
000045B6 57C9 FFFC                  		dbeq	d1,loc_3F62
000045BA 6700                       		beq.s	LZSlide_Move
000045BC                            
000045BC                            loc_3F6A:
000045BC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045C0 6700                       		beq.s	locret_3F7A
000045C2 337C 0005 003E             		move.w	#5,$3E(a1)
000045C8 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045CC                            
000045CC                            locret_3F7A:
000045CC 4E75                       		rts	
000045CE                            ; ===========================================================================
000045CE                            
000045CE                            LZSlide_Move:				; XREF: LZWaterSlides
000045CE 0C41 0003                  		cmpi.w	#3,d1
000045D2 6400                       		bcc.s	loc_3F84
000045D4 4E71                       		nop	
000045D6                            
000045D6                            loc_3F84:
000045D6 08A9 0000 0022             		bclr	#0,$22(a1)
000045DC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045E0 1340 0014                  		move.b	d0,$14(a1)
000045E4 6A00                       		bpl.s	loc_3F9A
000045E6 08E9 0000 0022             		bset	#0,$22(a1)
000045EC                            
000045EC                            loc_3F9A:
000045EC 4229 0015                  		clr.b	$15(a1)
000045F0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045F6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004600 0200 001F                  		andi.b	#$1F,d0
00004604 6600                       		bne.s	locret_3FBE
00004606 303C 00D0                  		move.w	#$D0,d0
0000460A 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play water sound
00004610                            
00004610                            locret_3FBE:
00004610 4E75                       		rts	
00004612                            ; End of function LZWaterSlides
00004612                            
00004612                            ; ===========================================================================
00004612 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004621 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004622                            		even
00004622                            
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Subroutine to	move Sonic in demo mode
00004622                            ; ---------------------------------------------------------------------------
00004622                            
00004622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004622                            
00004622                            
00004622                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004622 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004626 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004628 4E75                       		rts	
0000462A                            ; ===========================================================================
0000462A                            
0000462A                            ; This is an unused subroutine for recording a demo
0000462A                            
0000462A                            MoveDemo_Record:
0000462A 43F9 0008 0000             		lea	($80000).l,a1
00004630 3038 F790                  		move.w	($FFFFF790).w,d0
00004634 D2C0                       		adda.w	d0,a1
00004636 1038 F604                  		move.b	($FFFFF604).w,d0
0000463A B011                       		cmp.b	(a1),d0
0000463C 6600                       		bne.s	loc_3FFA
0000463E 5229 0001                  		addq.b	#1,1(a1)
00004642 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004648 6700                       		beq.s	loc_3FFA
0000464A 4E75                       		rts	
0000464C                            ; ===========================================================================
0000464C                            
0000464C                            loc_3FFA:				; XREF: MoveDemo_Record
0000464C 1340 0002                  		move.b	d0,2(a1)
00004650 137C 0000 0003             		move.b	#0,3(a1)
00004656 5478 F790                  		addq.w	#2,($FFFFF790).w
0000465A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004660 4E75                       		rts	
00004662                            ; ===========================================================================
00004662                            
00004662                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004662 4A38 F604                  		tst.b	($FFFFF604).w
00004666 6A00                       		bpl.s	loc_4022
00004668 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000466C 6B00                       		bmi.s	loc_4022
0000466E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004674                            
00004674                            loc_4022:
00004674 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000467A 7000                       		moveq	#0,d0
0000467C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004680 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004686 6600                       		bne.s	loc_4038
00004688 7006                       		moveq	#6,d0
0000468A                            
0000468A                            loc_4038:
0000468A E548                       		lsl.w	#2,d0
0000468C 2271 0000                  		movea.l	(a1,d0.w),a1
00004690 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004694 6A00                       		bpl.s	loc_4056
00004696 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000469C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046A0 5340                       		subq.w	#1,d0
000046A2 E548                       		lsl.w	#2,d0
000046A4 2271 0000                  		movea.l	(a1,d0.w),a1
000046A8                            
000046A8                            loc_4056:
000046A8 3038 F790                  		move.w	($FFFFF790).w,d0
000046AC D2C0                       		adda.w	d0,a1
000046AE 1011                       		move.b	(a1),d0
000046B0 41F8 F604                  		lea	($FFFFF604).w,a0
000046B4 1200                       		move.b	d0,d1
000046B6 1410                       		move.b	(a0),d2
000046B8 B500                       		eor.b	d2,d0
000046BA 10C1                       		move.b	d1,(a0)+
000046BC C001                       		and.b	d1,d0
000046BE 10C0                       		move.b	d0,(a0)+
000046C0 5338 F792                  		subq.b	#1,($FFFFF792).w
000046C4 6400                       		bcc.s	locret_407E
000046C6 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046CC 5478 F790                  		addq.w	#2,($FFFFF790).w
000046D0                            
000046D0                            locret_407E:
000046D0 4E75                       		rts	
000046D2                            ; End of function MoveSonicInDemo
000046D2                            
000046D2                            ; ===========================================================================
000046D2                            ; ---------------------------------------------------------------------------
000046D2                            ; Demo sequence	pointers
000046D2                            ; ---------------------------------------------------------------------------
000046D2                            Demo_Index:
000046D2                            	include "_inc\Demo pointers for intro.asm"
000046D2                            ; ---------------------------------------------------------------------------
000046D2                            ; Demo sequence	pointers
000046D2                            ; ---------------------------------------------------------------------------
000046D2 0000 0000                  	dc.l Demo_GHZ
000046D6 0000 0000                  	dc.l Demo_GHZ
000046DA 0000 0000                  	dc.l Demo_MZ
000046DE 0000 0000                  	dc.l Demo_MZ
000046E2 0000 0000                  	dc.l Demo_SYZ
000046E6 0000 0000                  	dc.l Demo_SYZ
000046EA 0000 0000                  	dc.l Demo_SS
000046EE 0000 0000                  	dc.l Demo_SS
000046EE 0000 0000                  	dc.l Demo_SS
000046F2                            
000046F2                            Demo_EndIndex:
000046F2                            	include "_inc\Demo pointers for ending.asm"
000046F2                            ; ---------------------------------------------------------------------------
000046F2                            ; Demo (ending) sequence pointers
000046F2                            ; ---------------------------------------------------------------------------
000046F2 0000 0000                  	dc.l Demo_EndGHZ1
000046F6 0000 0000                  	dc.l Demo_EndMZ
000046FA 0000 0000                  	dc.l Demo_EndSYZ
000046FE 0000 0000                  	dc.l Demo_EndLZ
00004702 0000 0000                  	dc.l Demo_EndSLZ
00004706 0000 0000                  	dc.l Demo_EndSBZ1
0000470A 0000 0000                  	dc.l Demo_EndSBZ2
0000470E 0000 0000                  	dc.l Demo_EndGHZ2
0000470E 0000 0000                  	dc.l Demo_EndGHZ2
00004712                            
00004712 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004722 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004732 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004742                            		even
00004742                            
00004742                            ; ---------------------------------------------------------------------------
00004742                            ; Collision index loading subroutine
00004742                            ; ---------------------------------------------------------------------------
00004742                            
00004742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004742                            
00004742                            
00004742                            ColIndexLoad:				; XREF: Level
00004742 7000                       		moveq	#0,d0
00004744 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004748 E548                       		lsl.w	#2,d0
0000474A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004750 4E75                       		rts	
00004752                            ; End of function ColIndexLoad
00004752                            
00004752                            ; ===========================================================================
00004752                            ; ---------------------------------------------------------------------------
00004752                            ; Collision index pointers
00004752                            ; ---------------------------------------------------------------------------
00004752                            ColPointers:
00004752                            	include "_inc\Collision index pointers.asm"
00004752                            ; ---------------------------------------------------------------------------
00004752                            ; Collision index pointers
00004752                            ; ---------------------------------------------------------------------------
00004752 0000 0000                  	dc.l Col_GHZ
00004756 0000 0000                  	dc.l Col_LZ
0000475A 0000 0000                  	dc.l Col_MZ
0000475E 0000 0000                  	dc.l Col_SLZ
00004762 0000 0000                  	dc.l Col_SYZ
00004766 0000 0000                  	dc.l Col_SBZ
0000476A 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
0000476E 0000 0000                  	dc.l Col_BHZ
0000476E 0000 0000                  	dc.l Col_BHZ
00004772                            
00004772                            ; ---------------------------------------------------------------------------
00004772                            ; Oscillating number subroutine
00004772                            ; ---------------------------------------------------------------------------
00004772                            
00004772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004772                            
00004772                            
00004772                            OscillateNumInit:			; XREF: Level
00004772 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004776 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000477C 7220                       		moveq	#$20,d1
0000477E                            
0000477E                            Osc_Loop:
0000477E 32DA                       		move.w	(a2)+,(a1)+
00004780 51C9 FFFC                  		dbf	d1,Osc_Loop
00004784 4E75                       		rts	
00004786                            ; End of function OscillateNumInit
00004786                            
00004786                            ; ===========================================================================
00004786 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000478A 0000 0080                  		dc.w 0,	$80
0000478E 0000 0080                  		dc.w 0,	$80
00004792 0000 0080                  		dc.w 0,	$80
00004796 0000 0080                  		dc.w 0,	$80
0000479A 0000 0080                  		dc.w 0,	$80
0000479E 0000 0080                  		dc.w 0,	$80
000047A2 0000 0080                  		dc.w 0,	$80
000047A6 0000 0080                  		dc.w 0,	$80
000047AA 0000 50F0                  		dc.w 0,	$50F0
000047AE 011E 2080                  		dc.w $11E, $2080
000047B2 00B4 3080                  		dc.w $B4, $3080
000047B6 010E 5080                  		dc.w $10E, $5080
000047BA 01C2 7080                  		dc.w $1C2, $7080
000047BE 0276 0080                  		dc.w $276, $80
000047C2 0000 0080                  		dc.w 0,	$80
000047C6 0000                       		dc.w 0
000047C8                            		even
000047C8                            
000047C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C8                            
000047C8                            
000047C8                            OscillateNumDo:				; XREF: Level
000047C8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047CE 6400                       		bcc.s	locret_41C4
000047D0 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047D4 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047DA 3619                       		move.w	(a1)+,d3
000047DC 720F                       		moveq	#$F,d1
000047DE                            
000047DE                            loc_4184:
000047DE 341A                       		move.w	(a2)+,d2
000047E0 381A                       		move.w	(a2)+,d4
000047E2 0303                       		btst	d1,d3
000047E4 6600                       		bne.s	loc_41A4
000047E6 3029 0002                  		move.w	2(a1),d0
000047EA D042                       		add.w	d2,d0
000047EC 3340 0002                  		move.w	d0,2(a1)
000047F0 D151                       		add.w	d0,0(a1)
000047F2 B811                       		cmp.b	0(a1),d4
000047F4 6200                       		bhi.s	loc_41BA
000047F6 03C3                       		bset	d1,d3
000047F8 6000                       		bra.s	loc_41BA
000047FA                            ; ===========================================================================
000047FA                            
000047FA                            loc_41A4:				; XREF: OscillateNumDo
000047FA 3029 0002                  		move.w	2(a1),d0
000047FE 9042                       		sub.w	d2,d0
00004800 3340 0002                  		move.w	d0,2(a1)
00004804 D151                       		add.w	d0,0(a1)
00004806 B811                       		cmp.b	0(a1),d4
00004808 6300                       		bls.s	loc_41BA
0000480A 0383                       		bclr	d1,d3
0000480C                            
0000480C                            loc_41BA:
0000480C 5849                       		addq.w	#4,a1
0000480E 51C9 FFCE                  		dbf	d1,loc_4184
00004812 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004816                            
00004816                            locret_41C4:
00004816 4E75                       		rts	
00004818                            ; End of function OscillateNumDo
00004818                            
00004818                            ; ===========================================================================
00004818 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000481C 0002 0018                  		dc.w 2,	$18
00004820 0002 0020                  		dc.w 2,	$20
00004824 0002 0030                  		dc.w 2,	$30
00004828 0004 0020                  		dc.w 4,	$20
0000482C 0008 0008                  		dc.w 8,	8
00004830 0008 0040                  		dc.w 8,	$40
00004834 0004 0040                  		dc.w 4,	$40
00004838 0002 0050                  		dc.w 2,	$50
0000483C 0002 0050                  		dc.w 2,	$50
00004840 0002 0020                  		dc.w 2,	$20
00004844 0003 0030                  		dc.w 3,	$30
00004848 0005 0050                  		dc.w 5,	$50
0000484C 0007 0070                  		dc.w 7,	$70
00004850 0002 0010                  		dc.w 2,	$10
00004854 0002 0010                  		dc.w 2,	$10
00004858                            		even
00004858                            
00004858                            ; ---------------------------------------------------------------------------
00004858                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004858                            ; ---------------------------------------------------------------------------
00004858                            
00004858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004858                            
00004858                            
00004858                            ChangeRingFrame:			; XREF: Level
00004858 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000485C 6A00                       		bpl.s	loc_421C
0000485E 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004864 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004868 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000486E                            
0000486E                            loc_421C:
0000486E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004872 6A00                       		bpl.s	loc_4232
00004874 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000487A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000487E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004884                            
00004884                            loc_4232:
00004884 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004888 6A00                       		bpl.s	loc_4250
0000488A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004890 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004894 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000489A 6500                       		bcs.s	loc_4250
0000489C 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000048A2                            
000048A2                            loc_4250:
000048A2 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048A6 6700                       		beq.s	locret_4272
000048A8 7000                       		moveq	#0,d0
000048AA 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048AE D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048B2 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048B6 EF58                       		rol.w	#7,d0
000048B8 0240 0003                  		andi.w	#3,d0
000048BC 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048C0 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048C4                            
000048C4                            locret_4272:
000048C4 4E75                       		rts	
000048C6                            ; End of function ChangeRingFrame
000048C6                            
000048C6                            ; ---------------------------------------------------------------------------
000048C6                            ; End-of-act signpost pattern loading subroutine
000048C6                            ; ---------------------------------------------------------------------------
000048C6                            
000048C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048C6                            
000048C6                            
000048C6                            SignpostArtLoad:			; XREF: Level
000048C6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048CA 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048CE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048D4 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048D6 3038 F700                  		move.w	($FFFFF700).w,d0
000048DA 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048DE 0441 0100                  		subi.w	#$100,d1
000048E2 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048E4 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048E6 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048EA 6700                       		beq.s	Signpost_Exit
000048EC B278 F728                  		cmp.w	($FFFFF728).w,d1
000048F0 6700                       		beq.s	Signpost_Exit
000048F2 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048F6 7012                       		moveq	#$12,d0
000048F8 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
000048FC                            ; ===========================================================================
000048FC                            
000048FC                            Signpost_Exit:
000048FC 4E75                       		rts	
000048FE                            ; End of function SignpostArtLoad
000048FE                            
000048FE                            ; ===========================================================================
000048FE                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000497E                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AAE                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B2E                            Demo_SS:	incbin	demodata\i_ss.bin
00004C2E                            ; ===========================================================================
00004C2E                            
00004C2E                            ; ---------------------------------------------------------------------------
00004C2E                            ; Special Stage
00004C2E                            ; ---------------------------------------------------------------------------
00004C2E                            
00004C2E                            SpecialStage:				; XREF: GameModeArray
00004C2E 303C 00CA                  		move.w	#$CA,d0
00004C32 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C36 6100 D514                  		bsr.w	Pal_MakeFlash
00004C3A 46FC 2700                  		move	#$2700,sr
00004C3E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C44 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C48 3CBC 8004                  		move.w	#$8004,(a6)
00004C4C 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C52 3CBC 9011                  		move.w	#$9011,(a6)
00004C56 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C5A 0200 00BF                  		andi.b	#$BF,d0
00004C5E 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C64 6100 C862                  		bsr.w	ClearScreen
00004C68 46FC 2300                  		move	#$2300,sr
00004C6C 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C72 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C76 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C7C 3ABC 9780                  		move.w	#$9780,(a5)
00004C80 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C86 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C8E                            
00004C8E                            loc_463C:
00004C8E 3215                       		move.w	(a5),d1
00004C90 0801 0001                  		btst	#1,d1
00004C94 66F8                       		bne.s	loc_463C
00004C96 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C9A 6100 0000                  		bsr.w	SS_BGLoad
00004C9E 7014                       		moveq	#$14,d0
00004CA0 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA8 7000                       		moveq	#0,d0
00004CAA 323C 07FF                  		move.w	#$7FF,d1
00004CAE                            
00004CAE                            SS_ClrObjRam:
00004CAE 22C0                       		move.l	d0,(a1)+
00004CB0 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CB4                            
00004CB4 43F8 F700                  		lea	($FFFFF700).w,a1
00004CB8 7000                       		moveq	#0,d0
00004CBA 323C 003F                  		move.w	#$3F,d1
00004CBE                            
00004CBE                            SS_ClrRam:
00004CBE 22C0                       		move.l	d0,(a1)+
00004CC0 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CC4                            
00004CC4 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CC8 7000                       		moveq	#0,d0
00004CCA 323C 0027                  		move.w	#$27,d1
00004CCE                            
00004CCE                            SS_ClrRam2:
00004CCE 22C0                       		move.l	d0,(a1)+
00004CD0 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CD4                            
00004CD4 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CD8 7000                       		moveq	#0,d0
00004CDA 323C 007F                  		move.w	#$7F,d1
00004CDE                            
00004CDE                            SS_ClrNemRam:
00004CDE 22C0                       		move.l	d0,(a1)+
00004CE0 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CE4                            
00004CE4 4238 F64E                  		clr.b	($FFFFF64E).w
00004CE8 4278 FE02                  		clr.w	($FFFFFE02).w
00004CEC 700A                       		moveq	#$A,d0
00004CEE 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004CF2 4EB9 0000 0000             		jsr	SS_Load
00004CF8 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004D00 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D08 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D0E 6100 0000                  		bsr.w	PalCycle_SS
00004D12 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D16 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D1A 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D20 303C 0089                  		move.w	#$89,d0
00004D24 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D28 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D2E 43F9 0000 46D2             		lea	(Demo_Index).l,a1
00004D34 7006                       		moveq	#6,d0
00004D36 E548                       		lsl.w	#2,d0
00004D38 2271 0000                  		movea.l	(a1,d0.w),a1
00004D3C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D42 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D46 4278 FE20                  		clr.w	($FFFFFE20).w
00004D4A 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D4E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D54 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D5A                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D5A                            ;		beq.s	SS_NoDebug	; if not, branch
00004D5A                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D5A                            ;		beq.s	SS_NoDebug	; if not, branch
00004D5A                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D5A                            
00004D5A                            SS_NoDebug:
00004D5A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D5E 0000 0040                  		ori.b	#$40,d0
00004D62 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D68 6100 D336                  		bsr.w	Pal_MakeWhite
00004D6C                            
00004D6C                            ; ---------------------------------------------------------------------------
00004D6C                            ; Main Special Stage loop
00004D6C                            ; ---------------------------------------------------------------------------
00004D6C                            
00004D6C                            SS_MainLoop:
00004D6C 6100 C83E                  		bsr.w	PauseGame
00004D70 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D76 6100 DF90                  		bsr.w	DelayProgram
00004D7A 4A78 F784                          tst.w   ($FFFFF784).w
00004D7E 6700                               beq.s   SS_NotReversed
00004D80 5378 F784                          subi.w  #1,($FFFFF784).w
00004D84                            
00004D84                            SS_NotReversed:
00004D84 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D88 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D8E 4EB9 0000 0000             		jsr	ObjectsLoad
00004D94 4EB9 0000 0000             		jsr	BuildSprites
00004D9A 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DA0 6100 0000                  		bsr.w	SS_BGAnimate
00004DA4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DA8 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DAA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DAE 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DB2                            
00004DB2                            SS_ChkEnd:
00004DB2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DB8 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DBC                            
00004DBC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DC0 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DC4 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DCA 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DD0 6500                       		bcs.s	SS_End		; if not, branch
00004DD2 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DD6                            
00004DD6                            SS_End:
00004DD6 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DDC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DE2 4278 F794                  		clr.w	($FFFFF794).w
00004DE6                            
00004DE6                            SS_EndLoop:
00004DE6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DEC 6100 DF1A                  		bsr.w	DelayProgram
00004DF0 6100 F830                  		bsr.w	MoveSonicInDemo
00004DF4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DFA 4EB9 0000 0000             		jsr	ObjectsLoad
00004E00 4EB9 0000 0000             		jsr	BuildSprites
00004E06 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E0C 6100 0000                  		bsr.w	SS_BGAnimate
00004E10 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E14 6A00                       		bpl.s	loc_47D4
00004E16 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E1C 6100 D34E                  		bsr.w	Pal_ToWhite
00004E20                            
00004E20                            loc_47D4:
00004E20 4A78 F614                  		tst.w	($FFFFF614).w
00004E24 66C0                       		bne.s	SS_EndLoop
00004E26                            
00004E26 46FC 2700                  		move	#$2700,sr
00004E2A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E30 3CBC 8230                  		move.w	#$8230,(a6)
00004E34 3CBC 8407                  		move.w	#$8407,(a6)
00004E38 3CBC 9001                  		move.w	#$9001,(a6)
00004E3C 6100 C68A                  		bsr.w	ClearScreen
00004E40 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E4A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E50 6100 C7F2                  		bsr.w	NemDec
00004E54 4EB9 0000 0000             		jsr	Hud_Base
00004E5A 46FC 2300                  		move	#$2300,sr
00004E5E 7011                       		moveq	#$11,d0
00004E60 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E64 7000                       		moveq	#0,d0
00004E66 6100 C94E                  		bsr.w	LoadPLC2
00004E6A 701B                       		moveq	#$1B,d0
00004E6C 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004E70 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E76 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E7C 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E80 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E84 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E88 303C 008E                  		move.w	#$8E,d0
00004E8C 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E92 43F8 D000                  		lea	($FFFFD000).w,a1
00004E96 7000                       		moveq	#0,d0
00004E98 323C 07FF                  		move.w	#$7FF,d1
00004E9C                            
00004E9C                            SS_EndClrObjRam:
00004E9C 22C0                       		move.l	d0,(a1)+
00004E9E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004EA2                            
00004EA2 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EA8                            
00004EA8                            SS_NormalExit:
00004EA8 6100 C702                  		bsr.w	PauseGame
00004EAC 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EB2 6100 DE54                  		bsr.w	DelayProgram
00004EB6 4EB9 0000 0000             		jsr	ObjectsLoad
00004EBC 4EB9 0000 0000             		jsr	BuildSprites
00004EC2 6100 C92C                  		bsr.w	RunPLC_RAM
00004EC6 4A78 FE02                  		tst.w	($FFFFFE02).w
00004ECA 67DC                       		beq.s	SS_NormalExit
00004ECC 4AB8 F680                  		tst.l	($FFFFF680).w
00004ED0 66D6                       		bne.s	SS_NormalExit
00004ED2 303C 00CA                  		move.w	#$CA,d0
00004ED6 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004EDA 6100 D270                  		bsr.w	Pal_MakeFlash
00004EDE 4E75                       		rts	
00004EE0                            ; ===========================================================================
00004EE0                            
00004EE0                            SS_ToSegaScreen:
00004EE0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004EE6 4E75                       		rts
00004EE8                            
00004EE8                            ; ---------------------------------------------------------------------------
00004EE8                            ; Special stage	background loading subroutine
00004EE8                            ; ---------------------------------------------------------------------------
00004EE8                            
00004EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE8                            
00004EE8                            
00004EE8                            SS_BGLoad:				; XREF: SpecialStage
00004EE8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EEE 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EF4 303C 4051                  		move.w	#$4051,d0
00004EF8 6100 CA28                  		bsr.w	EniDec
00004EFC 263C 5000 0001             		move.l	#$50000001,d3
00004F02 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F08 7E06                       		moveq	#6,d7
00004F0A                            
00004F0A                            loc_48BE:
00004F0A 2003                       		move.l	d3,d0
00004F0C 7C03                       		moveq	#3,d6
00004F0E 7800                       		moveq	#0,d4
00004F10 0C47 0003                  		cmpi.w	#3,d7
00004F14 6400                       		bcc.s	loc_48CC
00004F16 7801                       		moveq	#1,d4
00004F18                            
00004F18                            loc_48CC:
00004F18 7A07                       		moveq	#7,d5
00004F1A                            
00004F1A                            loc_48CE:
00004F1A 224A                       		movea.l	a2,a1
00004F1C 0A04 0001                  		eori.b	#1,d4
00004F20 6600                       		bne.s	loc_48E2
00004F22 0C47 0006                  		cmpi.w	#6,d7
00004F26 6600                       		bne.s	loc_48F2
00004F28 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F2E                            
00004F2E                            loc_48E2:
00004F2E 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F32 7207                       		moveq	#7,d1
00004F34 7407                       		moveq	#7,d2
00004F36 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F3A 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F3E                            
00004F3E                            loc_48F2:
00004F3E 0680 0010 0000             		addi.l	#$100000,d0
00004F44 51CD FFD4                  		dbf	d5,loc_48CE
00004F48 0680 0380 0000             		addi.l	#$3800000,d0
00004F4E 0A04 0001                  		eori.b	#1,d4
00004F52 51CE FFC4                  		dbf	d6,loc_48CC
00004F56 0683 1000 0000             		addi.l	#$10000000,d3
00004F5C 6A00                       		bpl.s	loc_491C
00004F5E 4843                       		swap	d3
00004F60 0683 0000 C000             		addi.l	#$C000,d3
00004F66 4843                       		swap	d3
00004F68                            
00004F68                            loc_491C:
00004F68 D4FC 0080                  		adda.w	#$80,a2
00004F6C 51CF FF9C                  		dbf	d7,loc_48BE
00004F70 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F76 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F7C 303C 4000                  		move.w	#$4000,d0
00004F80 6100 C9A0                  		bsr.w	EniDec
00004F84 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F8A 203C 4000 0003             		move.l	#$40000003,d0
00004F90 723F                       		moveq	#$3F,d1
00004F92 741F                       		moveq	#$1F,d2
00004F94 6100 C68E                  		bsr.w	ShowVDPGraphics
00004F98 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F9E 203C 5000 0003             		move.l	#$50000003,d0
00004FA4 723F                       		moveq	#$3F,d1
00004FA6 743F                       		moveq	#$3F,d2
00004FA8 6100 C67A                  		bsr.w	ShowVDPGraphics
00004FAC 4E75                       		rts	
00004FAE                            ; End of function SS_BGLoad
00004FAE                            
00004FAE                            ; ---------------------------------------------------------------------------
00004FAE                            ; Pallet cycling routine - special stage
00004FAE                            ; ---------------------------------------------------------------------------
00004FAE                            
00004FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FAE                            
00004FAE                            
00004FAE                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FAE 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FB2 6600                       		bne.s	locret_49E6
00004FB4 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FB8 6A00                       		bpl.s	locret_49E6
00004FBA 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FC0 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FC4 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FC8 0240 001F                  		andi.w	#$1F,d0
00004FCC E548                       		lsl.w	#2,d0
00004FCE 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FD4 D0C0                       		adda.w	d0,a0
00004FD6 1018                       		move.b	(a0)+,d0
00004FD8 6A00                       		bpl.s	loc_4992
00004FDA 303C 01FF                  		move.w	#$1FF,d0
00004FDE                            
00004FDE                            loc_4992:
00004FDE 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FE2 7000                       		moveq	#0,d0
00004FE4 1018                       		move.b	(a0)+,d0
00004FE6 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FEA 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FF0 43F1 0000                  		lea	(a1,d0.w),a1
00004FF4 303C 8200                  		move.w	#-$7E00,d0
00004FF8 1019                       		move.b	(a1)+,d0
00004FFA 3C80                       		move.w	d0,(a6)
00004FFC 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005000 303C 8400                  		move.w	#-$7C00,d0
00005004 1018                       		move.b	(a0)+,d0
00005006 3C80                       		move.w	d0,(a6)
00005008 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005012 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000501A 7000                       		moveq	#0,d0
0000501C 1018                       		move.b	(a0)+,d0
0000501E 6B00                       		bmi.s	loc_49E8
00005020 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005026 D2C0                       		adda.w	d0,a1
00005028 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000502C 24D9                       		move.l	(a1)+,(a2)+
0000502E 24D9                       		move.l	(a1)+,(a2)+
00005030 24D9                       		move.l	(a1)+,(a2)+
00005032                            
00005032                            locret_49E6:
00005032 4E75                       		rts	
00005034                            ; ===========================================================================
00005034                            
00005034                            loc_49E8:				; XREF: PalCycle_SS
00005034 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005038 0C40 008A                  		cmpi.w	#$8A,d0
0000503C 6500                       		bcs.s	loc_49F4
0000503E 5241                       		addq.w	#1,d1
00005040                            
00005040                            loc_49F4:
00005040 C2FC 002A                  		mulu.w	#$2A,d1
00005044 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000504A D2C1                       		adda.w	d1,a1
0000504C 0240 007F                  		andi.w	#$7F,d0
00005050 0880 0000                  		bclr	#0,d0
00005054 6700                       		beq.s	loc_4A18
00005056 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000505A 24D1                       		move.l	(a1),(a2)+
0000505C 24E9 0004                  		move.l	4(a1),(a2)+
00005060 24E9 0008                  		move.l	8(a1),(a2)+
00005064                            
00005064                            loc_4A18:
00005064 D2FC 000C                  		adda.w	#$C,a1
00005068 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000506C 0C40 000A                  		cmpi.w	#$A,d0
00005070 6500                       		bcs.s	loc_4A2E
00005072 0440 000A                  		subi.w	#$A,d0
00005076 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000507A                            
0000507A                            loc_4A2E:
0000507A 3200                       		move.w	d0,d1
0000507C D040                       		add.w	d0,d0
0000507E D041                       		add.w	d1,d0
00005080 D2C0                       		adda.w	d0,a1
00005082 24D9                       		move.l	(a1)+,(a2)+
00005084 34D9                       		move.w	(a1)+,(a2)+
00005086 4E75                       		rts	
00005088                            ; End of function PalCycle_SS
00005088                            
00005088                            ; ===========================================================================
00005088 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005098                            					; XREF: PalCycle_SS
00005098 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050A8 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050B8 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050C8 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050D8 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050E8 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050F8 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005108                            		even
00005108 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005116                            					; XREF: PalCycle_SS
00005116                            		even
00005116                            
00005116                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000515E                            		even
0000515E                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005230                            		even
00005230                            
00005230                            ; ---------------------------------------------------------------------------
00005230                            ; Subroutine to	make the special stage background animated
00005230                            ; ---------------------------------------------------------------------------
00005230                            
00005230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005230                            
00005230                            
00005230                            SS_BGAnimate:				; XREF: SpecialStage
00005230 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005234 6600                       		bne.s	loc_4BF6
00005236 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000523C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005242                            
00005242                            loc_4BF6:
00005242 0C40 0008                  		cmpi.w	#8,d0
00005246 6400                       		bcc.s	loc_4C4E
00005248 0C40 0006                  		cmpi.w	#6,d0
0000524C 6600                       		bne.s	loc_4C10
0000524E 5278 F718                  		addq.w	#1,($FFFFF718).w
00005252 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005256 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000525C                            
0000525C                            loc_4C10:
0000525C 7000                       		moveq	#0,d0
0000525E 3038 F708                  		move.w	($FFFFF708).w,d0
00005262 4440                       		neg.w	d0
00005264 4840                       		swap	d0
00005266 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000526C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005270 7609                       		moveq	#9,d3
00005272                            
00005272                            loc_4C26:
00005272 302B 0002                  		move.w	2(a3),d0
00005276 6100 DAC2                  		bsr.w	CalcSine
0000527A 7400                       		moveq	#0,d2
0000527C 1419                       		move.b	(a1)+,d2
0000527E C1C2                       		muls.w	d2,d0
00005280 E080                       		asr.l	#8,d0
00005282 36C0                       		move.w	d0,(a3)+
00005284 1419                       		move.b	(a1)+,d2
00005286 4882                       		ext.w	d2
00005288 D55B                       		add.w	d2,(a3)+
0000528A 51CB FFE6                  		dbf	d3,loc_4C26
0000528E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005292 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005298 6000                       		bra.s	loc_4C7E
0000529A                            ; ===========================================================================
0000529A                            
0000529A                            loc_4C4E:				; XREF: SS_BGAnimate
0000529A 0C40 000C                  		cmpi.w	#$C,d0
0000529E 6600                       		bne.s	loc_4C74
000052A0 5378 F718                  		subq.w	#1,($FFFFF718).w
000052A4 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052A8 243C 0001 8000             		move.l	#$18000,d2
000052AE 7206                       		moveq	#6,d1
000052B0                            
000052B0                            loc_4C64:
000052B0 2013                       		move.l	(a3),d0
000052B2 9082                       		sub.l	d2,d0
000052B4 26C0                       		move.l	d0,(a3)+
000052B6 0482 0000 2000             		subi.l	#$2000,d2
000052BC 51C9 FFF2                  		dbf	d1,loc_4C64
000052C0                            
000052C0                            loc_4C74:
000052C0 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052C4 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052CA                            
000052CA                            loc_4C7E:
000052CA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052CE 3038 F718                  		move.w	($FFFFF718).w,d0
000052D2 4440                       		neg.w	d0
000052D4 4840                       		swap	d0
000052D6 7600                       		moveq	#0,d3
000052D8 161A                       		move.b	(a2)+,d3
000052DA 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052DE 4442                       		neg.w	d2
000052E0 0242 00FF                  		andi.w	#$FF,d2
000052E4 E54A                       		lsl.w	#2,d2
000052E6                            
000052E6                            loc_4C9A:
000052E6 301B                       		move.w	(a3)+,d0
000052E8 544B                       		addq.w	#2,a3
000052EA 7200                       		moveq	#0,d1
000052EC 121A                       		move.b	(a2)+,d1
000052EE 5341                       		subq.w	#1,d1
000052F0                            
000052F0                            loc_4CA4:
000052F0 2380 2000                  		move.l	d0,(a1,d2.w)
000052F4 5842                       		addq.w	#4,d2
000052F6 0242 03FC                  		andi.w	#$3FC,d2
000052FA 51C9 FFF4                  		dbf	d1,loc_4CA4
000052FE 51CB FFE6                  		dbf	d3,loc_4C9A
00005302 4E75                       		rts	
00005304                            ; End of function SS_BGAnimate
00005304                            
00005304                            ; ===========================================================================
00005304 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005310                            		even
00005310 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005318                            		even
00005318 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000532C                            		even
0000532C                            					; XREF: SS_BGAnimate
0000532C                            ; ===========================================================================
0000532C                            
0000532C                            ; ---------------------------------------------------------------------------
0000532C                            ; Continue screen
0000532C                            ; ---------------------------------------------------------------------------
0000532C                            
0000532C                            ContinueScreen:				; XREF: GameModeArray
0000532C 6100 CCF4                  		bsr.w	Pal_FadeFrom
00005330 46FC 2700                  		move	#$2700,sr
00005334 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005338 0200 00BF                  		andi.b	#$BF,d0
0000533C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005342 4DF9 00C0 0004             		lea	($C00004).l,a6
00005348 3CBC 8004                  		move.w	#$8004,(a6)
0000534C 3CBC 8700                  		move.w	#$8700,(a6)
00005350 6100 C176                  		bsr.w	ClearScreen
00005354 43F8 D000                  		lea	($FFFFD000).w,a1
00005358 7000                       		moveq	#0,d0
0000535A 323C 07FF                  		move.w	#$7FF,d1
0000535E                            
0000535E                            Cont_ClrObjRam:
0000535E 22C0                       		move.l	d0,(a1)+
00005360 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005364                            
00005364 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000536E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005374 6100 C2CE                  		bsr.w	NemDec
00005378 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005382 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005388 6100 C2BA                  		bsr.w	NemDec
0000538C 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005396 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000539C 6100 C2A6                  		bsr.w	NemDec
000053A0 720A                       		moveq	#10,d1
000053A2 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053A8 7012                       		moveq	#$12,d0
000053AA 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
000053AE 103C 0090                  		move.b	#$90,d0
000053B2 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053B6 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053BC 42B8 F700                  		clr.l	($FFFFF700).w
000053C0 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053C8 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053CE 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053D4 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053DA 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053E0 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053E6 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053EC 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053F2 4EB9 0000 0000             		jsr	ObjectsLoad
000053F8 4EB9 0000 0000             		jsr	BuildSprites
000053FE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005402 0000 0040                  		ori.b	#$40,d0
00005406 33C0 00C0 0004             		move.w	d0,($C00004).l
0000540C 6100 CB6A                  		bsr.w	Pal_FadeTo
00005410                            
00005410                            ; ---------------------------------------------------------------------------
00005410                            ; Continue screen main loop
00005410                            ; ---------------------------------------------------------------------------
00005410                            
00005410                            Cont_MainLoop:
00005410 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005416 6100 D8F0                  		bsr.w	DelayProgram
0000541A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005420 6400                       		bcc.s	loc_4DF2
00005422 46FC 2700                  		move	#$2700,sr
00005426 3238 F614                  		move.w	($FFFFF614).w,d1
0000542A 82FC 003C                  		divu.w	#$3C,d1
0000542E 0281 0000 000F             		andi.l	#$F,d1
00005434 4EB9 0000 0000             		jsr	ContScrCounter
0000543A 46FC 2300                  		move	#$2300,sr
0000543E                            
0000543E                            loc_4DF2:
0000543E 4EB9 0000 0000             		jsr	ObjectsLoad
00005444 4EB9 0000 0000             		jsr	BuildSprites
0000544A 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005450 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005452 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005458 64B6                       		bcc.s	Cont_MainLoop
0000545A 4A78 F614                  		tst.w	($FFFFF614).w
0000545E 6600 FFB0                  		bne.w	Cont_MainLoop
00005462 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005468 4E75                       		rts	
0000546A                            ; ===========================================================================
0000546A                            
0000546A                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000546A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005470 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005476 7000                       		moveq	#0,d0
00005478 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000547C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005480 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005484 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005488 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000548C 4E75                       		rts	
0000548E                            ; ===========================================================================
0000548E                            
0000548E                            ; ---------------------------------------------------------------------------
0000548E                            ; Object 80 - Continue screen elements
0000548E                            ; ---------------------------------------------------------------------------
0000548E                            
0000548E                            Obj80:					; XREF: Obj_Index
0000548E 7000                       		moveq	#0,d0
00005490 1028 0024                  		move.b	$24(a0),d0
00005494 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005498 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000549C                            ; ===========================================================================
0000549C 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000549E 0000                       		dc.w Obj80_Display-Obj80_Index
000054A0 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000054A2 0000                       		dc.w Obj80_ChkType-Obj80_Index
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            Obj80_Main:				; XREF: Obj80_Index
000054A4 5428 0024                  		addq.b	#2,$24(a0)
000054A8 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054B0 317C 8500 0002             		move.w	#$8500,2(a0)
000054B6 117C 0000 0001             		move.b	#0,1(a0)
000054BC 117C 003C 0019             		move.b	#$3C,$19(a0)
000054C2 317C 0120 0008             		move.w	#$120,8(a0)
000054C8 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054CE 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054D4                            
000054D4                            Obj80_Display:				; XREF: Obj80_Index
000054D4 4EF9 0000 0000             		jmp	DisplaySprite
000054DA                            ; ===========================================================================
000054DA                            Obj80_MiniSonicPos:
000054DA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054EC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054F8                            ; ===========================================================================
000054F8                            
000054F8                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054F8 2248                       		movea.l	a0,a1
000054FA 45F9 0000 54DA             		lea	(Obj80_MiniSonicPos).l,a2
00005500 7200                       		moveq	#0,d1
00005502 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005506 5501                       		subq.b	#2,d1
00005508 6400                       		bcc.s	loc_4EC4
0000550A 4EF9 0000 0000             		jmp	DeleteObject
00005510                            ; ===========================================================================
00005510                            
00005510                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005510 7601                       		moveq	#1,d3
00005512 0C01 000E                  		cmpi.b	#$E,d1
00005516 6500                       		bcs.s	loc_4ED0
00005518 7600                       		moveq	#0,d3
0000551A 720E                       		moveq	#$E,d1
0000551C                            
0000551C                            loc_4ED0:
0000551C 1401                       		move.b	d1,d2
0000551E 0202 0001                  		andi.b	#1,d2
00005522                            
00005522                            Obj80_MiniSonLoop:
00005522 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005526 335A 0008                  		move.w	(a2)+,8(a1)
0000552A 4A02                       		tst.b	d2
0000552C 6700                       		beq.s	loc_4EEA
0000552E 0469 000A 0008             		subi.w	#$A,8(a1)
00005534                            
00005534                            loc_4EEA:
00005534 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000553A 137C 0006 001A             		move.b	#6,$1A(a1)
00005540 137C 0006 0024             		move.b	#6,$24(a1)
00005546 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000554E 337C 8551 0002             		move.w	#$8551,2(a1)
00005554 137C 0000 0001             		move.b	#0,1(a1)
0000555A 43E9 0040                  		lea	$40(a1),a1
0000555E 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005562 43E9 FFC0                  		lea	-$40(a1),a1
00005566 1343 0028                  		move.b	d3,$28(a1)
0000556A                            
0000556A                            Obj80_ChkType:				; XREF: Obj80_Index
0000556A 4A28 0028                  		tst.b	$28(a0)
0000556E 6700                       		beq.s	loc_4F40
00005570 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005576 6500                       		bcs.s	loc_4F40
00005578 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000557C 0200 0001                  		andi.b	#1,d0
00005580 6600                       		bne.s	loc_4F40
00005582 4A78 D010                  		tst.w	($FFFFD010).w
00005586 6600                       		bne.s	Obj80_Delete
00005588 4E75                       		rts	
0000558A                            ; ===========================================================================
0000558A                            
0000558A                            loc_4F40:				; XREF: Obj80_ChkType
0000558A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000558E 0200 000F                  		andi.b	#$F,d0
00005592 6600                       		bne.s	Obj80_Display2
00005594 0868 0000 001A             		bchg	#0,$1A(a0)
0000559A                            
0000559A                            Obj80_Display2:
0000559A 4EF9 0000 0000             		jmp	DisplaySprite
000055A0                            ; ===========================================================================
000055A0                            
000055A0                            Obj80_Delete:				; XREF: Obj80_ChkType
000055A0 4EF9 0000 0000             		jmp	DeleteObject
000055A6                            ; ===========================================================================
000055A6                            
000055A6                            ; ---------------------------------------------------------------------------
000055A6                            ; Object 81 - Sonic on the continue screen
000055A6                            ; ---------------------------------------------------------------------------
000055A6                            
000055A6                            Obj81:					; XREF: Obj_Index
000055A6 7000                       		moveq	#0,d0
000055A8 1028 0024                  		move.b	$24(a0),d0
000055AC 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055B0 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055B4 4EF9 0000 0000             		jmp	DisplaySprite
000055BA                            ; ===========================================================================
000055BA 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055BC 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055BE 0000                       		dc.w Obj81_Animate-Obj81_Index
000055C0 0000                       		dc.w Obj81_Run-Obj81_Index
000055C2                            ; ===========================================================================
000055C2                            
000055C2                            Obj81_Main:				; XREF: Obj81_Index
000055C2 5428 0024                  		addq.b	#2,$24(a0)
000055C6 317C 00A0 0008             		move.w	#$A0,8(a0)
000055CC 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055D2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055DA 317C 0780 0002             		move.w	#$780,2(a0)
000055E0 117C 0004 0001             		move.b	#4,1(a0)
000055E6 117C 0002 0018             		move.b	#2,$18(a0)
000055EC 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055F2 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055F8                            
000055F8                            Obj81_ChkLand:				; XREF: Obj81_Index
000055F8 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055FE 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005600 5428 0024                  		addq.b	#2,$24(a0)
00005604 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005608 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005610 317C 8500 0002             		move.w	#$8500,2(a0)
00005616 117C 0000 001C             		move.b	#0,$1C(a0)
0000561C 6000                       		bra.s	Obj81_Animate
0000561E                            ; ===========================================================================
0000561E                            
0000561E                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000561E 4EB9 0000 0000             		jsr	SpeedToPos
00005624 4EB9 0000 0000             		jsr	Sonic_Animate
0000562A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005630                            ; ===========================================================================
00005630                            
00005630                            Obj81_Animate:				; XREF: Obj81_Index
00005630 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005634 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005636 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000563C 4EF9 0000 0000             		jmp	AnimateSprite
00005642                            ; ===========================================================================
00005642                            
00005642                            Obj81_GetUp:				; XREF: Obj81_Animate
00005642 5428 0024                  		addq.b	#2,$24(a0)
00005646 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000564E 317C 0780 0002             		move.w	#$780,2(a0)
00005654 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000565A 4268 0014                  		clr.w	$14(a0)
0000565E 5168 000C                  		subq.w	#8,$C(a0)
00005662 103C 00E0                  		move.b	#$E0,d0
00005666 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
0000566A                            
0000566A                            Obj81_Run:				; XREF: Obj81_Index
0000566A 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005670 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005672 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005678 6000                       		bra.s	Obj81_ShowRun
0000567A                            ; ===========================================================================
0000567A                            
0000567A                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000567A 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005680                            
00005680                            Obj81_ShowRun:				; XREF: Obj81_Run
00005680 4EB9 0000 0000             		jsr	SpeedToPos
00005686 4EB9 0000 0000             		jsr	Sonic_Animate
0000568C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005692                            ; ===========================================================================
00005692                            Ani_obj81:
00005692                            	include "_anim\obj81.asm"
00005692                            ; ---------------------------------------------------------------------------
00005692                            ; Animation script - Sonic on the continue screen
00005692                            ; ---------------------------------------------------------------------------
00005692 0000                       		dc.w byte_504A-Ani_obj81
00005694 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000056A0 00                         		even
000056A0 00                         		even
000056A0                            
000056A0                            ; ---------------------------------------------------------------------------
000056A0                            ; Sprite mappings - Continue screen
000056A0                            ; ---------------------------------------------------------------------------
000056A0                            Map_obj80:
000056A0                            	include "_maps\obj80.asm"
000056A0                            ; ---------------------------------------------------------------------------
000056A0                            ; Sprite mappings - Continue screen
000056A0                            ; ---------------------------------------------------------------------------
000056A0 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000056A4 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056A8 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056AC 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056B0 0B                         byte_5066:	dc.b $B
000056B1 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056B6 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056BB F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056C0 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056C5 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056CA F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056CF F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056D4 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056D9 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056DE 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056E3 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056E8 03                         byte_509E:	dc.b 3
000056E9 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056EE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056F3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F8 03                         byte_50AE:	dc.b 3
000056F9 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056FE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005703 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005708 03                         byte_50BE:	dc.b 3
00005709 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000570E F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005713 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005718 02                         byte_50CE:	dc.b 2
00005719 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000571E 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005723 01                         byte_50D9:	dc.b 1
00005724 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005729 01                         byte_50DF:	dc.b 1
0000572A 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005730 00                         		even
00005730 00                         		even
00005730                            
00005730                            ; ===========================================================================
00005730                            ; ---------------------------------------------------------------------------
00005730                            ; Ending sequence in Green Hill	Zone
00005730                            ; ---------------------------------------------------------------------------
00005730                            
00005730                            EndingSequence:				; XREF: GameModeArray
00005730 103C 00E4                  		move.b	#$E4,d0
00005734 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
00005738 6100 C8E8                  		bsr.w	Pal_FadeFrom
0000573C 43F8 D000                  		lea	($FFFFD000).w,a1
00005740 7000                       		moveq	#0,d0
00005742 323C 07FF                  		move.w	#$7FF,d1
00005746                            
00005746                            End_ClrObjRam:
00005746 22C0                       		move.l	d0,(a1)+
00005748 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000574C                            
0000574C 43F8 F628                  		lea	($FFFFF628).w,a1
00005750 7000                       		moveq	#0,d0
00005752 323C 0015                  		move.w	#$15,d1
00005756                            
00005756                            End_ClrRam:
00005756 22C0                       		move.l	d0,(a1)+
00005758 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000575C                            
0000575C 43F8 F700                  		lea	($FFFFF700).w,a1
00005760 7000                       		moveq	#0,d0
00005762 323C 003F                  		move.w	#$3F,d1
00005766                            
00005766                            End_ClrRam2:
00005766 22C0                       		move.l	d0,(a1)+
00005768 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000576C                            
0000576C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005770 7000                       		moveq	#0,d0
00005772 323C 0047                  		move.w	#$47,d1
00005776                            
00005776                            End_ClrRam3:
00005776 22C0                       		move.l	d0,(a1)+
00005778 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000577C                            
0000577C 46FC 2700                  		move	#$2700,sr
00005780 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005784 0200 00BF                  		andi.b	#$BF,d0
00005788 33C0 00C0 0004             		move.w	d0,($C00004).l
0000578E 6100 BD38                  		bsr.w	ClearScreen
00005792 4DF9 00C0 0004             		lea	($C00004).l,a6
00005798 3CBC 8B03                  		move.w	#$8B03,(a6)
0000579C 3CBC 8230                  		move.w	#$8230,(a6)
000057A0 3CBC 8407                  		move.w	#$8407,(a6)
000057A4 3CBC 857C                  		move.w	#$857C,(a6)
000057A8 3CBC 9001                  		move.w	#$9001,(a6)
000057AC 3CBC 8004                  		move.w	#$8004,(a6)
000057B0 3CBC 8720                  		move.w	#$8720,(a6)
000057B4 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057BA 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057BE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057C4 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057CA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057D0 6700                       		beq.s	End_LoadData	; if yes, branch
000057D2 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057D8                            
000057D8                            End_LoadData:
000057D8 701C                       		moveq	#$1C,d0
000057DA 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057DE 4EB9 0000 0000             		jsr	Hud_Base
000057E4 6100 0000                  		bsr.w	LevelSizeLoad
000057E8 6100 0000                  		bsr.w	DeformBgLayer
000057EC 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057F2 6100 0000                  		bsr.w	MainLoadBlockLoad
000057F6 6100 0000                  		bsr.w	LoadTilesFromStart
000057FA 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005802 46FC 2300                  		move	#$2300,sr
00005806 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000580C 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005810 6100 C28E                  		bsr.w	KosDec
00005814 7003                       		moveq	#3,d0
00005816 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000581A 303C 008B                  		move.w	#$8B,d0
0000581E 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
00005822 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005828 6700                       		beq.s	End_LoadSonic	; if not, branch
0000582A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005830                            
00005830                            End_LoadSonic:
00005830 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005836 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000583C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005842 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005848 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000584E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005854 4EB9 0000 0000             		jsr	ObjPosLoad
0000585A 4EB9 0000 0000             		jsr	ObjectsLoad
00005860 4EB9 0000 0000             		jsr	BuildSprites
00005866 7000                       		moveq	#0,d0
00005868 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000586C 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005870 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005874 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005878 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000587C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005880 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005884 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005888 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000588C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005890 6100 EEE0                  		bsr.w	OscillateNumInit
00005894 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000589A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000058A0 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058A6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058AC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058B2 6100 D454                  		bsr.w	DelayProgram
000058B6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058BA 0000 0040                  		ori.b	#$40,d0
000058BE 33C0 00C0 0004             		move.w	d0,($C00004).l
000058C4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058CA 6100 C6AC                  		bsr.w	Pal_FadeTo
000058CE                            
000058CE                            ; ---------------------------------------------------------------------------
000058CE                            ; Main ending sequence loop
000058CE                            ; ---------------------------------------------------------------------------
000058CE                            
000058CE                            End_MainLoop:
000058CE 6100 BCDC                  		bsr.w	PauseGame
000058D2 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058D8 6100 D42E                  		bsr.w	DelayProgram
000058DC 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058E0 6100 0000                  		bsr.w	End_MoveSonic
000058E4 4EB9 0000 0000             		jsr	ObjectsLoad
000058EA 6100 0000                  		bsr.w	DeformBgLayer
000058EE 4EB9 0000 0000             		jsr	BuildSprites
000058F4 4EB9 0000 0000             		jsr	ObjPosLoad
000058FA 6100 C244                  		bsr.w	PalCycle_Load
000058FE 6100 EEC8                  		bsr.w	OscillateNumDo
00005902 6100 EF54                  		bsr.w	ChangeRingFrame
00005906 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000590C 6700                       		beq.s	loc_52DA	; if yes, branch
0000590E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005914 103C 0091                  		move.b	#$91,d0
00005918 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
0000591C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005922 4E75                       		rts	
00005924                            ; ===========================================================================
00005924                            
00005924                            loc_52DA:
00005924 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005928 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000592C                            
0000592C 4278 FE02                  		clr.w	($FFFFFE02).w
00005930 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005936 4278 F794                  		clr.w	($FFFFF794).w
0000593A                            
0000593A                            End_AllEmlds:				; XREF: loc_5334
0000593A 6100 BC70                  		bsr.w	PauseGame
0000593E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005944 6100 D3C2                  		bsr.w	DelayProgram
00005948 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000594C 6100 0000                  		bsr.w	End_MoveSonic
00005950 4EB9 0000 0000             		jsr	ObjectsLoad
00005956 6100 0000                  		bsr.w	DeformBgLayer
0000595A 4EB9 0000 0000             		jsr	BuildSprites
00005960 4EB9 0000 0000             		jsr	ObjPosLoad
00005966 6100 EE60                  		bsr.w	OscillateNumDo
0000596A 6100 EEEC                  		bsr.w	ChangeRingFrame
0000596E 5378 F794                  		subq.w	#1,($FFFFF794).w
00005972 6A00                       		bpl.s	loc_5334
00005974 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000597A 6100 C7F0                  		bsr.w	Pal_ToWhite
0000597E                            
0000597E                            loc_5334:
0000597E 4A78 FE02                  		tst.w	($FFFFFE02).w
00005982 6700 FFB6                  		beq.w	End_AllEmlds
00005986 4278 FE02                  		clr.w	($FFFFFE02).w
0000598A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005990 4BF9 00C0 0004             		lea	($C00004).l,a5
00005996 4DF9 00C0 0000             		lea	($C00000).l,a6
0000599C 47F8 F700                  		lea	($FFFFF700).w,a3
000059A0 49F8 A400                  		lea	($FFFFA400).w,a4
000059A4 343C 4000                  		move.w	#$4000,d2
000059A8 6100 0000                  		bsr.w	LoadTilesFromStart2
000059AC 7013                       		moveq	#$13,d0
000059AE 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059B2 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059B6 6000 FF16                  		bra.w	End_MainLoop
000059BA                            
000059BA                            ; ---------------------------------------------------------------------------
000059BA                            ; Subroutine controlling Sonic on the ending sequence
000059BA                            ; ---------------------------------------------------------------------------
000059BA                            
000059BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059BA                            
000059BA                            
000059BA                            End_MoveSonic:				; XREF: End_MainLoop
000059BA 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059BE 6600                       		bne.s	End_MoveSonic2
000059C0 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059C6 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059C8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059CC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059D2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059D8 4E75                       		rts	
000059DA                            ; ===========================================================================
000059DA                            
000059DA                            End_MoveSonic2:				; XREF: End_MoveSonic
000059DA 5500                       		subq.b	#2,d0
000059DC 6600                       		bne.s	End_MoveSonic3
000059DE 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059E4 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059E6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059EA 7000                       		moveq	#0,d0
000059EC 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059F0 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059F4 31C0 D014                  		move.w	d0,($FFFFD014).w
000059F8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059FE 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005A04 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A0A 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A10 4E75                       		rts	
00005A12                            ; ===========================================================================
00005A12                            
00005A12                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A12 5500                       		subq.b	#2,d0
00005A14 6600                       		bne.s	End_MoveSonExit
00005A16 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A1A 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A20 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A26 4278 D024                  		clr.w	($FFFFD024).w
00005A2A                            
00005A2A                            End_MoveSonExit:
00005A2A 4E75                       		rts	
00005A2C                            ; End of function End_MoveSonic
00005A2C                            
00005A2C                            ; ===========================================================================
00005A2C                            ; ---------------------------------------------------------------------------
00005A2C                            ; Object 87 - Sonic on ending sequence
00005A2C                            ; ---------------------------------------------------------------------------
00005A2C                            
00005A2C                            Obj87:					; XREF: Obj_Index
00005A2C 7000                       		moveq	#0,d0
00005A2E 1028 0025                  		move.b	$25(a0),d0
00005A32 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A36 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A3A 4EF9 0000 0000             		jmp	DisplaySprite
00005A40                            ; ===========================================================================
00005A40 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A44 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A48 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4C 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A50 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A54                            ; ===========================================================================
00005A54                            
00005A54                            Obj87_Main:				; XREF: Obj87_Index
00005A54 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A5A 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A5C 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A62 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A68 4E75                       		rts	
00005A6A                            ; ===========================================================================
00005A6A                            
00005A6A                            Obj87_Main2:				; XREF: Obj87_Main
00005A6A 5428 0025                  		addq.b	#2,$25(a0)
00005A6E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A76 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A7C 117C 0004 0001             		move.b	#4,1(a0)
00005A82 4228 0022                  		clr.b	$22(a0)
00005A86 117C 0002 0018             		move.b	#2,$18(a0)
00005A8C 117C 0000 001A             		move.b	#0,$1A(a0)
00005A92 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A98                            
00005A98                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A9C 6600                       		bne.s	Obj87_Wait
00005A9E 5428 0025                  		addq.b	#2,$25(a0)
00005AA2 317C 0001 001C             		move.w	#1,$1C(a0)
00005AA8 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AAE                            
00005AAE                            Obj87_Wait:
00005AAE 4E75                       		rts	
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            Obj87_LookUp:				; XREF: Obj87_Index
00005AB0 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AB8 6600                       		bne.s	locret_5480
00005ABA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AC0 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AC6 5428 0025                  		addq.b	#2,$25(a0)
00005ACA                            
00005ACA                            locret_5480:
00005ACA 4E75                       		rts	
00005ACC                            ; ===========================================================================
00005ACC                            
00005ACC                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005ACC 5368 0030                  		subq.w	#1,$30(a0)
00005AD0 6600                       		bne.s	Obj87_Wait2
00005AD2 43F8 D400                  		lea	($FFFFD400).w,a1
00005AD6 323C 00FF                  		move.w	#$FF,d1
00005ADA                            
00005ADA                            Obj87_ClrLoop:
00005ADA 4299                       		clr.l	(a1)+
00005ADC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005AE0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AE6 5428 0025                  		addq.b	#2,$25(a0)
00005AEA 117C 0001 001C             		move.b	#1,$1C(a0)
00005AF0 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AF6                            
00005AF6                            Obj87_Wait2:
00005AF6 4E75                       		rts	
00005AF8                            ; ===========================================================================
00005AF8                            
00005AF8                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AF8 5368 0030                  		subq.w	#1,$30(a0)
00005AFC 6600                       		bne.s	Obj87_Wait3
00005AFE 5428 0025                  		addq.b	#2,$25(a0)
00005B02 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B08 117C 0002 001C             		move.b	#2,$1C(a0)
00005B0E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B14                            
00005B14                            Obj87_Wait3:
00005B14 4E75                       		rts	
00005B16                            ; ===========================================================================
00005B16                            
00005B16                            Obj87_Animate:				; XREF: Obj87_Index
00005B16 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B1C 4EF9 0000 0000             		jmp	AnimateSprite
00005B22                            ; ===========================================================================
00005B22                            
00005B22                            Obj87_Leap:				; XREF: Obj87_Index
00005B22 5368 0030                  		subq.w	#1,$30(a0)
00005B26 6600                       		bne.s	Obj87_Wait4
00005B28 5428 0025                  		addq.b	#2,$25(a0)
00005B2C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B34 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B3A 117C 0004 0001             		move.b	#4,1(a0)
00005B40 4228 0022                  		clr.b	$22(a0)
00005B44 117C 0002 0018             		move.b	#2,$18(a0)
00005B4A 117C 0005 001A             		move.b	#5,$1A(a0)
00005B50 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B56 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B5C 60B8                       		bra.s	Obj87_Animate
00005B5E                            ; ===========================================================================
00005B5E                            
00005B5E                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B5E 4E75                       		rts	
00005B60                            ; ===========================================================================
00005B60                            Ani_obj87:
00005B60                            	include "_anim\obj87.asm"
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            ; Animation script - Sonic on the ending sequence
00005B60                            ; ---------------------------------------------------------------------------
00005B60 0000                       		dc.w byte_551C-Ani_obj87
00005B62 0000                       		dc.w byte_552A-Ani_obj87
00005B64 0000                       		dc.w byte_5534-Ani_obj87
00005B66 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B74 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B7E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B86                            		even
00005B86                            		even
00005B86                            
00005B86                            ; ===========================================================================
00005B86                            ; ---------------------------------------------------------------------------
00005B86                            ; Object 88 - chaos emeralds on	the ending sequence
00005B86                            ; ---------------------------------------------------------------------------
00005B86                            
00005B86                            Obj88:					; XREF: Obj_Index
00005B86 7000                       		moveq	#0,d0
00005B88 1028 0024                  		move.b	$24(a0),d0
00005B8C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B90 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B94 4EF9 0000 0000             		jmp	DisplaySprite
00005B9A                            ; ===========================================================================
00005B9A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B9C 0000                       		dc.w Obj88_Move-Obj88_Index
00005B9E                            ; ===========================================================================
00005B9E                            
00005B9E                            Obj88_Main:				; XREF: Obj88_Index
00005B9E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005BA4 6700                       		beq.s	Obj88_Main2
00005BA6 588F                       		addq.l	#4,sp
00005BA8 4E75                       		rts	
00005BAA                            ; ===========================================================================
00005BAA                            
00005BAA                            Obj88_Main2:				; XREF: Obj88_Main
00005BAA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BB0 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BB6 2248                       		movea.l	a0,a1
00005BB8 7600                       		moveq	#0,d3
00005BBA 7401                       		moveq	#1,d2
00005BBC 7205                       		moveq	#5,d1
00005BBE                            
00005BBE                            Obj88_MainLoop:
00005BBE 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BC2 5429 0024                  		addq.b	#2,$24(a1)
00005BC6 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BCE 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BD4 137C 0004 0001             		move.b	#4,1(a1)
00005BDA 137C 0001 0018             		move.b	#1,$18(a1)
00005BE0 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BE6 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BEC 1342 001C                  		move.b	d2,$1C(a1)
00005BF0 1342 001A                  		move.b	d2,$1A(a1)
00005BF4 5202                       		addq.b	#1,d2
00005BF6 1343 0026                  		move.b	d3,$26(a1)
00005BFA 0603 002A                  		addi.b	#$2A,d3
00005BFE 43E9 0040                  		lea	$40(a1),a1
00005C02 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C06                            
00005C06                            Obj88_Move:				; XREF: Obj88_Index
00005C06 3028 003E                  		move.w	$3E(a0),d0
00005C0A D168 0026                  		add.w	d0,$26(a0)
00005C0E 1028 0026                  		move.b	$26(a0),d0
00005C12 4EB9 0000 2D3A             		jsr	(CalcSine).l
00005C18 7800                       		moveq	#0,d4
00005C1A 1828 003C                  		move.b	$3C(a0),d4
00005C1E C3C4                       		muls.w	d4,d1
00005C20 E081                       		asr.l	#8,d1
00005C22 C1C4                       		muls.w	d4,d0
00005C24 E080                       		asr.l	#8,d0
00005C26 D268 0038                  		add.w	$38(a0),d1
00005C2A D068 003A                  		add.w	$3A(a0),d0
00005C2E 3141 0008                  		move.w	d1,8(a0)
00005C32 3140 000C                  		move.w	d0,$C(a0)
00005C36 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C3C 6700                       		beq.s	loc_55FA
00005C3E 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C44                            
00005C44                            loc_55FA:
00005C44 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C4A 6700                       		beq.s	loc_5608
00005C4C 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C52                            
00005C52                            loc_5608:
00005C52 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C58 6700                       		beq.s	locret_5614
00005C5A 5368 003A                  		subq.w	#1,$3A(a0)
00005C5E                            
00005C5E                            locret_5614:
00005C5E 4E75                       		rts	
00005C60                            ; ===========================================================================
00005C60                            ; ---------------------------------------------------------------------------
00005C60                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C60                            ; ---------------------------------------------------------------------------
00005C60                            
00005C60                            Obj89:					; XREF: Obj_Index
00005C60 7000                       		moveq	#0,d0
00005C62 1028 0024                  		move.b	$24(a0),d0
00005C66 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C6A 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C6E                            ; ===========================================================================
00005C6E 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C70 0000                       		dc.w Obj89_Move-Obj89_Index
00005C72 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C74                            ; ===========================================================================
00005C74                            
00005C74                            Obj89_Main:				; XREF: Obj89_Index
00005C74 5428 0024                  		addq.b	#2,$24(a0)
00005C78 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C7E 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C84 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C8C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C92 117C 0000 0001             		move.b	#0,1(a0)
00005C98 117C 0000 0018             		move.b	#0,$18(a0)
00005C9E                            
00005C9E                            Obj89_Move:				; XREF: Obj89_Index
00005C9E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005CA4 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CA6 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CAC 4EB9 0000 0000             		jsr	DisplaySprite
00005CB2                            ; ===========================================================================
00005CB2                            
00005CB2                            Obj89_Delay:				; XREF: Obj89_Move
00005CB2 5428 0024                  		addq.b	#2,$24(a0)
00005CB6 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CBC                            
00005CBC                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CC0 6A00                       		bpl.s	Obj89_Display
00005CC2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CC8                            
00005CC8                            Obj89_Display:
00005CC8 4EB9 0000 0000             		jsr	DisplaySprite
00005CCE                            ; ===========================================================================
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - Sonic on the ending	sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            Map_obj87:
00005CCE                            	include "_maps\obj87.asm"
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - Sonic on the ending	sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CD2 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CD6 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CDA 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CDE 02                         byte_5690:	dc.b 2
00005CDF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CE4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE9 03                         byte_569B:	dc.b 3
00005CEA FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CEF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CF4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CF9 02                         byte_56AB:	dc.b 2
00005CFA EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CFF FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005D04 02                         byte_56B6:	dc.b 2
00005D05 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D0A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D0F 02                         byte_56C1:	dc.b 2
00005D10 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D15 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D1A 03                         byte_56CC:	dc.b 3
00005D1B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D20 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D25 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D2A 07                         byte_56DC:	dc.b 7
00005D2B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D30 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D35 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D3A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D3F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D44 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D49 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D4E 18                         byte_5700:	dc.b $18
00005D4F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D54 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D59 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D5E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D63 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D68 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D6D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D72 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D77 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D7C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D81 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D86 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D8B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D90 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D95 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D9A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D9F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005DA4 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DA9 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DAE E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DB3 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DB8 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DBD F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DC2 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DC8 00                         		even
00005DC8 00                         		even
00005DC8                            
00005DC8                            ; ---------------------------------------------------------------------------
00005DC8                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC8                            ; ---------------------------------------------------------------------------
00005DC8                            Map_obj88:
00005DC8                            	include "_maps\obj88.asm"
00005DC8                            ; ---------------------------------------------------------------------------
00005DC8                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC8                            ; ---------------------------------------------------------------------------
00005DC8 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DCC 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DD0 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DD4 0000                       		dc.w byte_57AC-Map_obj88
00005DD6 01                         byte_5788:	dc.b 1
00005DD7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DDC 01                         byte_578E:	dc.b 1
00005DDD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DE2 01                         byte_5794:	dc.b 1
00005DE3 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DE8 01                         byte_579A:	dc.b 1
00005DE9 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DEE 01                         byte_57A0:	dc.b 1
00005DEF F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DF4 01                         byte_57A6:	dc.b 1
00005DF5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DFA 01                         byte_57AC:	dc.b 1
00005DFB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005E00                            		even
00005E00                            		even
00005E00                            
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            Map_obj89:
00005E00                            	include "_maps\obj89.asm"
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E00                            ; ---------------------------------------------------------------------------
00005E00 0000                       		dc.w byte_57B4-Map_obj89
00005E02 03                         byte_57B4:	dc.b 3
00005E03 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E08 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E0D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E12                            		even
00005E12                            		even
00005E12                            
00005E12                            ; ===========================================================================
00005E12                            ; ---------------------------------------------------------------------------
00005E12                            ; Credits ending sequence
00005E12                            ; ---------------------------------------------------------------------------
00005E12                            
00005E12                            Credits:				; XREF: GameModeArray
00005E12 6100 B9CE                  		bsr.w	ClearPLC
00005E16 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E1A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E20 3CBC 8004                  		move.w	#$8004,(a6)
00005E24 3CBC 8230                  		move.w	#$8230,(a6)
00005E28 3CBC 8407                  		move.w	#$8407,(a6)
00005E2C 3CBC 9001                  		move.w	#$9001,(a6)
00005E30 3CBC 9200                  		move.w	#$9200,(a6)
00005E34 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E38 3CBC 8720                  		move.w	#$8720,(a6)
00005E3C 4238 F64E                  		clr.b	($FFFFF64E).w
00005E40 6100 B686                  		bsr.w	ClearScreen
00005E44 43F8 D000                  		lea	($FFFFD000).w,a1
00005E48 7000                       		moveq	#0,d0
00005E4A 323C 07FF                  		move.w	#$7FF,d1
00005E4E                            
00005E4E                            Cred_ClrObjRam:
00005E4E 22C0                       		move.l	d0,(a1)+
00005E50 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E54                            
00005E54 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E5E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E64 6100 B7DE                  		bsr.w	NemDec
00005E68 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E6C 7000                       		moveq	#0,d0
00005E6E 323C 001F                  		move.w	#$1F,d1
00005E72                            
00005E72                            Cred_ClrPallet:
00005E72 22C0                       		move.l	d0,(a1)+
00005E74 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E78                            
00005E78 7003                       		moveq	#3,d0
00005E7A 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E7E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E84 4EB9 0000 0000             		jsr	ObjectsLoad
00005E8A 4EB9 0000 0000             		jsr	BuildSprites
00005E90 6100 0000                  		bsr.w	EndingDemoLoad
00005E94 7000                       		moveq	#0,d0
00005E96 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E9A E948                       		lsl.w	#4,d0
00005E9C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005EA2 45F2 0000                  		lea	(a2,d0.w),a2
00005EA6 7000                       		moveq	#0,d0
00005EA8 1012                       		move.b	(a2),d0
00005EAA 6700                       		beq.s	loc_5862
00005EAC 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005EB0                            
00005EB0                            loc_5862:
00005EB0 7001                       		moveq	#1,d0
00005EB2 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EB6 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EBC 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EC0                            
00005EC0                            Cred_WaitLoop:
00005EC0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EC6 6100 CE40                  		bsr.w	DelayProgram
00005ECA 6100 B924                  		bsr.w	RunPLC_RAM
00005ECE 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005ED2 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ED4 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ED8 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005EDA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005EE0 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005EE4 4E75                       		rts	
00005EE6                            
00005EE6                            ; ---------------------------------------------------------------------------
00005EE6                            ; Ending sequence demo loading subroutine
00005EE6                            ; ---------------------------------------------------------------------------
00005EE6                            
00005EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EE6                            
00005EE6                            
00005EE6                            EndingDemoLoad:				; XREF: Credits
00005EE6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EEA 0240 000F                  		andi.w	#$F,d0
00005EEE D040                       		add.w	d0,d0
00005EF0 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EF4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EF8 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EFC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005F02 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005F04 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F0A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F10 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F16 7000                       		moveq	#0,d0
00005F18 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F1C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F20 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F24 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F28 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F2E 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F30 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F36 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F3A 303C 0008                  		move.w	#8,d0
00005F3E                            
00005F3E                            EndDemo_LampLoad:
00005F3E 24D9                       		move.l	(a1)+,(a2)+
00005F40 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F44                            
00005F44                            EndDemo_Exit:
00005F44 4E75                       		rts	
00005F46                            ; End of function EndingDemoLoad
00005F46                            
00005F46                            ; ===========================================================================
00005F46                            ; ---------------------------------------------------------------------------
00005F46                            ; Levels used in the end sequence demos
00005F46                            ; ---------------------------------------------------------------------------
00005F46                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F56                            
00005F56                            ; ---------------------------------------------------------------------------
00005F56                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F56                            ; ---------------------------------------------------------------------------
00005F56                            EndDemo_LampVar:
00005F56 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F58 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F5E 0000 0000                  		dc.l 0
00005F62 0000                       		dc.b 0,	0
00005F64 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F78 0101                       		dc.b 1,	1
00005F7A                            ; ===========================================================================
00005F7A                            ; ---------------------------------------------------------------------------
00005F7A                            ; "TRY AGAIN" and "END"	screens
00005F7A                            ; ---------------------------------------------------------------------------
00005F7A                            
00005F7A                            TryAgainEnd:				; XREF: Credits
00005F7A 6100 B866                  		bsr.w	ClearPLC
00005F7E 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005F82 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F88 3CBC 8004                  		move.w	#$8004,(a6)
00005F8C 3CBC 8230                  		move.w	#$8230,(a6)
00005F90 3CBC 8407                  		move.w	#$8407,(a6)
00005F94 3CBC 9001                  		move.w	#$9001,(a6)
00005F98 3CBC 9200                  		move.w	#$9200,(a6)
00005F9C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FA0 3CBC 8720                  		move.w	#$8720,(a6)
00005FA4 4238 F64E                  		clr.b	($FFFFF64E).w
00005FA8 6100 B51E                  		bsr.w	ClearScreen
00005FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00005FB0 7000                       		moveq	#0,d0
00005FB2 323C 07FF                  		move.w	#$7FF,d1
00005FB6                            
00005FB6                            TryAg_ClrObjRam:
00005FB6 22C0                       		move.l	d0,(a1)+
00005FB8 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FBC                            
00005FBC 701D                       		moveq	#$1D,d0
00005FBE 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FC2 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FC6 7000                       		moveq	#0,d0
00005FC8 323C 001F                  		move.w	#$1F,d1
00005FCC                            
00005FCC                            TryAg_ClrPallet:
00005FCC 22C0                       		move.l	d0,(a1)+
00005FCE 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FD2                            
00005FD2 7013                       		moveq	#$13,d0
00005FD4 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
00005FD8 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FDC 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FE2 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE8 4EB9 0000 0000             		jsr	BuildSprites
00005FEE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FF4 6100 BF82                  		bsr.w	Pal_FadeTo
00005FF8                            
00005FF8                            ; ---------------------------------------------------------------------------
00005FF8                            ; "TRY AGAIN" and "END"	screen main loop
00005FF8                            ; ---------------------------------------------------------------------------
00005FF8                            TryAg_MainLoop:
00005FF8 6100 B5B2                  		bsr.w	PauseGame
00005FFC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006002 6100 CD04                  		bsr.w	DelayProgram
00006006 4EB9 0000 0000             		jsr	ObjectsLoad
0000600C 4EB9 0000 0000             		jsr	BuildSprites
00006012 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006018 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000601A 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
0000601E 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006020 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006026 67D0                       		beq.s	TryAg_MainLoop
00006028                            
00006028                            TryAg_Exit:
00006028 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000602E 4E75                       		rts	
00006030                            
00006030                            ; ===========================================================================
00006030                            ; ---------------------------------------------------------------------------
00006030                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006030                            ; ---------------------------------------------------------------------------
00006030                            
00006030                            Obj8B:					; XREF: Obj_Index
00006030 7000                       		moveq	#0,d0
00006032 1028 0024                  		move.b	$24(a0),d0
00006036 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000603A 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000603E 4EF9 0000 0000             		jmp	DisplaySprite
00006044                            ; ===========================================================================
00006044 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006046 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006048 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000604A 0000                       		dc.w loc_5A8E-Obj8B_Index
0000604C                            ; ===========================================================================
0000604C                            
0000604C                            Obj8B_Main:				; XREF: Obj8B_Index
0000604C 5428 0024                  		addq.b	#2,$24(a0)
00006050 317C 0120 0008             		move.w	#$120,8(a0)
00006056 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000605C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006064 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000606A 117C 0000 0001             		move.b	#0,1(a0)
00006070 117C 0002 0018             		move.b	#2,$18(a0)
00006076 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000607C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006082 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006084 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000608A 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006090 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006096 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000609C                            
0000609C                            Obj8B_Animate:				; XREF: Obj8B_Index
0000609C 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000060A2 4EF9 0000 0000             		jmp	AnimateSprite
000060A8                            ; ===========================================================================
000060A8                            
000060A8                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060A8 5428 0024                  		addq.b	#2,$24(a0)
000060AC 7002                       		moveq	#2,d0
000060AE 0828 0000 001C             		btst	#0,$1C(a0)
000060B4 6700                       		beq.s	loc_5A6A
000060B6 4440                       		neg.w	d0
000060B8                            
000060B8                            loc_5A6A:
000060B8 43F8 D800                  		lea	($FFFFD800).w,a1
000060BC 7205                       		moveq	#5,d1
000060BE                            
000060BE                            loc_5A70:
000060BE 1340 003E                  		move.b	d0,$3E(a1)
000060C2 3400                       		move.w	d0,d2
000060C4 E742                       		asl.w	#3,d2
000060C6 D529 0026                  		add.b	d2,$26(a1)
000060CA 43E9 0040                  		lea	$40(a1),a1
000060CE 51C9 FFEE                  		dbf	d1,loc_5A70
000060D2 5228 001A                  		addq.b	#1,$1A(a0)
000060D6 317C 0070 0030             		move.w	#112,$30(a0)
000060DC                            
000060DC                            loc_5A8E:				; XREF: Obj8B_Index
000060DC 5368 0030                  		subq.w	#1,$30(a0)
000060E0 6A00                       		bpl.s	locret_5AA0
000060E2 0868 0000 001C             		bchg	#0,$1C(a0)
000060E8 117C 0002 0024             		move.b	#2,$24(a0)
000060EE                            
000060EE                            locret_5AA0:
000060EE 4E75                       		rts	
000060F0                            ; ===========================================================================
000060F0                            Ani_obj8B:
000060F0                            	include "_anim\obj8B.asm"
000060F0                            ; ---------------------------------------------------------------------------
000060F0                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060F0                            ; ---------------------------------------------------------------------------
000060F0 0000                       		dc.w byte_5AA8-Ani_obj8B
000060F2 0000                       		dc.w byte_5AAC-Ani_obj8B
000060F4 0000                       		dc.w byte_5AB0-Ani_obj8B
000060F6 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060FA 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060FE 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006110                            		even
00006110                            		even
00006110                            
00006110                            ; ===========================================================================
00006110                            ; ---------------------------------------------------------------------------
00006110                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006110                            ; ---------------------------------------------------------------------------
00006110                            
00006110                            Obj8C:					; XREF: Obj_Index
00006110 7000                       		moveq	#0,d0
00006112 1028 0024                  		move.b	$24(a0),d0
00006116 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000611A 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000611E 4EF9 0000 0000             		jmp	DisplaySprite
00006124                            ; ===========================================================================
00006124 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006126 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006128                            ; ===========================================================================
00006128                            
00006128                            Obj8C_Main:				; XREF: Obj8C_Index
00006128 2248                       		movea.l	a0,a1
0000612A 7400                       		moveq	#0,d2
0000612C 7600                       		moveq	#0,d3
0000612E 7205                       		moveq	#5,d1
00006130 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006134                            
00006134                            Obj8C_MakeEms:				; XREF: loc_5B42
00006134 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006138 5429 0024                  		addq.b	#2,$24(a1)
0000613C 237C 0000 5DC8 0004        		move.l	#Map_obj88,4(a1)
00006144 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000614A 137C 0000 0001             		move.b	#0,1(a1)
00006150 137C 0001 0018             		move.b	#1,$18(a1)
00006156 337C 0104 0008             		move.w	#$104,8(a1)
0000615C 337C 0120 0038             		move.w	#$120,$38(a1)
00006162 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006168 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000616E 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006174 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006178                            
00006178                            Obj8C_ChkEms:
00006178 7000                       		moveq	#0,d0
0000617A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000617E 5340                       		subq.w	#1,d0
00006180 6500                       		bcs.s	loc_5B42
00006182                            
00006182                            Obj8C_ChkEmLoop:
00006182 B433 0000                  		cmp.b	(a3,d0.w),d2
00006186 6600                       		bne.s	loc_5B3E
00006188 5202                       		addq.b	#1,d2
0000618A 60EC                       		bra.s	Obj8C_ChkEms
0000618C                            ; ===========================================================================
0000618C                            
0000618C                            loc_5B3E:
0000618C 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006190                            
00006190                            loc_5B42:
00006190 1342 001A                  		move.b	d2,$1A(a1)
00006194 5229 001A                  		addq.b	#1,$1A(a1)
00006198 5202                       		addq.b	#1,d2
0000619A 137C 0080 0026             		move.b	#$80,$26(a1)
000061A0 1343 001E                  		move.b	d3,$1E(a1)
000061A4 1343 001F                  		move.b	d3,$1F(a1)
000061A8 0643 000A                  		addi.w	#$A,d3
000061AC 43E9 0040                  		lea	$40(a1),a1
000061B0 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061B4                            
000061B4                            Obj8C_Move:				; XREF: Obj8C_Index
000061B4 4A68 003E                  		tst.w	$3E(a0)
000061B8 6700                       		beq.s	locret_5BBA
000061BA 4A28 001E                  		tst.b	$1E(a0)
000061BE 6700                       		beq.s	loc_5B78
000061C0 5328 001E                  		subq.b	#1,$1E(a0)
000061C4 6600                       		bne.s	loc_5B80
000061C6                            
000061C6                            loc_5B78:
000061C6 3028 003E                  		move.w	$3E(a0),d0
000061CA D168 0026                  		add.w	d0,$26(a0)
000061CE                            
000061CE                            loc_5B80:
000061CE 1028 0026                  		move.b	$26(a0),d0
000061D2 6700                       		beq.s	loc_5B8C
000061D4 0C00 0080                  		cmpi.b	#$80,d0
000061D8 6600                       		bne.s	loc_5B96
000061DA                            
000061DA                            loc_5B8C:
000061DA 4268 003E                  		clr.w	$3E(a0)
000061DE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061E4                            
000061E4                            loc_5B96:
000061E4 4EB9 0000 2D3A             		jsr	(CalcSine).l
000061EA 7800                       		moveq	#0,d4
000061EC 1828 003C                  		move.b	$3C(a0),d4
000061F0 C3C4                       		muls.w	d4,d1
000061F2 E081                       		asr.l	#8,d1
000061F4 C1C4                       		muls.w	d4,d0
000061F6 E080                       		asr.l	#8,d0
000061F8 D268 0038                  		add.w	$38(a0),d1
000061FC D068 003A                  		add.w	$3A(a0),d0
00006200 3141 0008                  		move.w	d1,8(a0)
00006204 3140 000A                  		move.w	d0,$A(a0)
00006208                            
00006208                            locret_5BBA:
00006208 4E75                       		rts	
0000620A                            ; ===========================================================================
0000620A                            ; ---------------------------------------------------------------------------
0000620A                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000620A                            ; ---------------------------------------------------------------------------
0000620A                            Map_obj8B:
0000620A                            	include "_maps\obj8B.asm"
0000620A                            ; ---------------------------------------------------------------------------
0000620A                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000620A                            ; ---------------------------------------------------------------------------
0000620A 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000620E 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006212 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006216 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000621A 08                         byte_5BCC:	dc.b 8
0000621B E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006220 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006225 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000622A F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000622F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006234 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006239 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000623E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006243 08                         byte_5BF5:	dc.b 8
00006244 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006249 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000624E E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006253 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006258 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000625D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006262 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006267 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000626C 08                         byte_5C1E:	dc.b 8
0000626D E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006272 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006277 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000627C F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006281 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006286 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000628B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006290 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006295 08                         byte_5C47:	dc.b 8
00006296 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000629B F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000062A0 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000062A5 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062AA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062AF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062B4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062BE 0C                         byte_5C70:	dc.b $C
000062BF ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062C4 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062C9 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062CE 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062D3 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062D8 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062DD 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062E2 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062E7 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062EC 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062F1 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062F6 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062FB 0A                         byte_5CAD:	dc.b $A
000062FC D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006301 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006306 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000630B D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006310 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006315 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000631A 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000631F 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006324 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006329 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000632E 0A                         byte_5CE0:	dc.b $A
0000632F C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006334 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006339 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000633E C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006343 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006348 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000634D 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006352 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006357 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000635C 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006361 0C                         byte_5D13:	dc.b $C
00006362 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006367 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000636C 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006371 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006376 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000637B FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006380 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006385 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000638A 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000638F 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006394 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006399 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000639E                            		even
0000639E                            		even
0000639E                            
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            ; Ending sequence demos
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063CC                            		even
000063CC                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000640C                            		even
0000640C                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000643C                            		even
0000643C                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000646C                            		even
0000646C                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000648C                            		even
0000648C                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064AC                            		even
000064AC                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064DC                            		even
000064DC                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000650C                            		even
0000650C                            
0000650C                            ; ---------------------------------------------------------------------------
0000650C                            ; Subroutine to	load level boundaries and start	locations
0000650C                            ; ---------------------------------------------------------------------------
0000650C                            
0000650C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000650C                            
0000650C                            
0000650C                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000650C 7000                       		moveq	#0,d0
0000650E 11C0 F740                  		move.b	d0,($FFFFF740).w
00006512 11C0 F741                  		move.b	d0,($FFFFF741).w
00006516 11C0 F746                  		move.b	d0,($FFFFF746).w
0000651A 11C0 F748                  		move.b	d0,($FFFFF748).w
0000651E 11C0 F742                  		move.b	d0,($FFFFF742).w
00006522 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006526 ED08                       		lsl.b	#6,d0
00006528 E848                       		lsr.w	#4,d0
0000652A 3200                       		move.w	d0,d1
0000652C D040                       		add.w	d0,d0
0000652E D041                       		add.w	d1,d0
00006530 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006534 3018                       		move.w	(a0)+,d0
00006536 31C0 F730                  		move.w	d0,($FFFFF730).w
0000653A 2018                       		move.l	(a0)+,d0
0000653C 21C0 F728                  		move.l	d0,($FFFFF728).w
00006540 21C0 F720                  		move.l	d0,($FFFFF720).w
00006544 2018                       		move.l	(a0)+,d0
00006546 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000654A 21C0 F724                  		move.l	d0,($FFFFF724).w
0000654E 3038 F728                  		move.w	($FFFFF728).w,d0
00006552 0640 0240                  		addi.w	#$240,d0
00006556 31C0 F732                  		move.w	d0,($FFFFF732).w
0000655A 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006560 3018                       		move.w	(a0)+,d0
00006562 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006566 6000 0000                  		bra.w	LevSz_ChkLamp
0000656A                            ; ===========================================================================
0000656A                            ; ---------------------------------------------------------------------------
0000656A                            ; Level size array and ending start location array
0000656A                            ; ---------------------------------------------------------------------------
0000656A                            LevelSizeArray:        ; GHZ
0000656A 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006576 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006582 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000658E 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000659A                                    ; LZ
0000659A 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065A6 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065B2 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065BE 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065CA                                    ; MZ
000065CA 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065D6 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065E2 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065EE 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065FA                                    ; SLZ
000065FA 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006606 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006612 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
0000661E 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000662A                                    ; SYZ
0000662A 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006636 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006642 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000664E 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000665A                                    ; SBZ
0000665A 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006666 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006672 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000667E 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000668A                                    ; Ending
0000668A 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006696 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000066A2 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066AE 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066BA                                    ; BHZ
000066BA 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066C6 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066D2 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066DE 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066EA                                    even
000066EA                            
000066EA                            ; ===========================================================================
000066EA                            
000066EA                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066EA 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066EE 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066F0 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066F6 3238 D008                  		move.w	($FFFFD008).w,d1
000066FA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066FE 6000 0000                  		bra.w	loc_60D0
00006702                            ; ===========================================================================
00006702                            
00006702                            
00006702                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006702 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006706 ED08                       		lsl.b	#6,d0
00006708 E848                       		lsr.w	#4,d0
0000670A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000670E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006712 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006716 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000671A 5340                       		subq.w	#1,d0
0000671C E548                       		lsl.w	#2,d0
0000671E 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006722 6000 0000                  		bra.w	LevSz_SonicPos
00006726                            
00006726                            EndingStLocArray:
00006726                            		incbin	misc\sloc_end.bin
00006746                            		even
00006746                            		
00006746                            ; ===========================================================================
00006746                            ; ---------------------------------------------------------------------------
00006746                            ; Sonic	start location array
00006746                            ; ---------------------------------------------------------------------------
00006746                            StartLocArray:	incbin	misc\sloc_lev.bin
000067C6                            		even
000067C6                            
000067C6                            LevSz_SonicPos:
000067C6 7200                       		moveq	#0,d1
000067C8 3219                       		move.w	(a1)+,d1
000067CA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067CE 7000                       		moveq	#0,d0
000067D0 3011                       		move.w	(a1),d0
000067D2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067D6                            
000067D6                            loc_60D0:				; XREF: LevSz_ChkLamp
000067D6 0441 00A0                  		subi.w	#$A0,d1
000067DA 6400                       		bcc.s	loc_60D8
000067DC 7200                       		moveq	#0,d1
000067DE                            
000067DE                            loc_60D8:
000067DE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067E2 B242                       		cmp.w	d2,d1
000067E4 6500                       		bcs.s	loc_60E2
000067E6 3202                       		move.w	d2,d1
000067E8                            
000067E8                            loc_60E2:
000067E8 31C1 F700                  		move.w	d1,($FFFFF700).w
000067EC 0440 0060                  		subi.w	#$60,d0
000067F0 6400                       		bcc.s	loc_60EE
000067F2 7000                       		moveq	#0,d0
000067F4                            
000067F4                            loc_60EE:
000067F4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067F8 6D00                       		blt.s	loc_60F8
000067FA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067FE                            
000067FE                            loc_60F8:
000067FE 31C0 F704                  		move.w	d0,($FFFFF704).w
00006802 6100 0000                  		bsr.w	BgScrollSpeed
00006806 7000                       		moveq	#0,d0
00006808 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000680C E508                       		lsl.b	#2,d0
0000680E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006814 6000 0000                  		bra.w	LevSz_Unk
00006818                            
00006818                            ; ---------------------------------------------------------------------------
00006818                            ; Which	256x256	tiles contain loops or roll-tunnels
00006818                            ; ---------------------------------------------------------------------------
00006818                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006818                            ; loop,	loop, tunnel, tunnel
00006818                            ; ---------------------------------------------------------------------------
00006818                            LoopTileNums:	incbin	misc\loopnums.bin
00006838                            		even
00006838                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006838                            ; ITS GONJE HELP
00006838                            ; ===========================================================================
00006838                            
00006838                            LevSz_Unk:				; XREF: LevelSizeLoad
00006838 7000                       		moveq	#0,d0
0000683A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000683E E748                       		lsl.w	#3,d0
00006840 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006844 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006848 24D9                       		move.l	(a1)+,(a2)+
0000684A 24D9                       		move.l	(a1)+,(a2)+
0000684C 4E75                       		rts	
0000684E                            ; End of function LevelSizeLoad
0000684E                            
0000684E                            ; ===========================================================================
0000684E 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006856 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000685E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006866 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000686E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006876 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000687E 0070 0100 0100 0100        		dc.l $700100, $1000100
00006886                            
00006886                            ; ---------------------------------------------------------------------------
00006886                            ; Subroutine to	set scroll speed of some backgrounds
00006886                            ; ---------------------------------------------------------------------------
00006886                            
00006886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006886                            
00006886                            
00006886                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006886 4A38 FE30                  		tst.b	($FFFFFE30).w
0000688A 6600                       		bne.s	loc_6206
0000688C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006890 31C0 F714                  		move.w	d0,($FFFFF714).w
00006894 31C1 F708                  		move.w	d1,($FFFFF708).w
00006898 31C1 F710                  		move.w	d1,($FFFFF710).w
0000689C 31C1 F718                  		move.w	d1,($FFFFF718).w
000068A0                            
000068A0                            loc_6206:
000068A0 7400                       		moveq	#0,d2
000068A2 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068A6 D442                       		add.w	d2,d2
000068A8 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068AC 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068B0                            ; End of function BgScrollSpeed
000068B0                            
000068B0                            ; ===========================================================================
000068B0 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068B4 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068B8 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068BC 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
000068C0                            ; ===========================================================================
000068C0                            
000068C0                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068C0 6000 0000                  		bra.w	Deform_GHZ
000068C4                            ; ===========================================================================
000068C4                            
000068C4                            BgScroll_LZ:				; XREF: BgScroll_Index
000068C4 E280                       		asr.l	#1,d0
000068C6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068CA 4E75                       		rts	
000068CC                            ; ===========================================================================
000068CC                            
000068CC                            BgScroll_MZ:				; XREF: BgScroll_Index
000068CC 4E75                       		rts	
000068CE                            ; ===========================================================================
000068CE                            
000068CE                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068CE E280                       		asr.l	#1,d0
000068D0 0640 00C0                  		addi.w	#$C0,d0
000068D4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D8 4E75                       		rts	
000068DA                            ; ===========================================================================
000068DA                            
000068DA                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068DA E980                       		asl.l	#4,d0
000068DC 2400                       		move.l	d0,d2
000068DE E380                       		asl.l	#1,d0
000068E0 D082                       		add.l	d2,d0
000068E2 E080                       		asr.l	#8,d0
000068E4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E8 31C0 F714                  		move.w	d0,($FFFFF714).w
000068EC 4E75                       		rts	
000068EE                            ; ===========================================================================
000068EE                            
000068EE                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068EE E980                       		asl.l	#4,d0
000068F0 E380                       		asl.l	#1,d0
000068F2 E080                       		asr.l	#8,d0
000068F4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068F8 4E75                       		rts	
000068FA                            ; ===========================================================================
000068FA                            
000068FA                            BgScroll_End:				; XREF: BgScroll_Index
000068FA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006900 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006906 4E75                       		rts	
00006908                            ; ===========================================================================
00006908 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000690E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006914 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000691A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006920 4E75                       		rts
00006922                            
00006922                            ; ---------------------------------------------------------------------------
00006922                            ; Background layer deformation subroutines
00006922                            ; ---------------------------------------------------------------------------
00006922                            
00006922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006922                            
00006922                            
00006922                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006922 4A38 F744                  		tst.b	($FFFFF744).w
00006926 6700                       		beq.s	loc_628E
00006928 4E75                       		rts	
0000692A                            ; ===========================================================================
0000692A                            
0000692A                            loc_628E:
0000692A 4278 F754                  		clr.w	($FFFFF754).w
0000692E 4278 F756                  		clr.w	($FFFFF756).w
00006932 4278 F758                  		clr.w	($FFFFF758).w
00006936 4278 F75A                  		clr.w	($FFFFF75A).w
0000693A 6100 0000                  		bsr.w	ScrollHoriz
0000693E 6100 0000                  		bsr.w	ScrollVertical
00006942 6100 0000                  		bsr.w	DynScrResizeLoad
00006946 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000694C 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006952 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006958 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000695E 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006964 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000696A 7000                       		moveq	#0,d0
0000696C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006970 D040                       		add.w	d0,d0
00006972 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006976 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000697A                            ; End of function DeformBgLayer
0000697A                            
0000697A                            ; ===========================================================================
0000697A                            ; ---------------------------------------------------------------------------
0000697A                            ; Offset index for background layer deformation	code
0000697A                            ; ---------------------------------------------------------------------------
0000697A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000697E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006982 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006986 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
0000698A                            ; ---------------------------------------------------------------------------
0000698A                            ; Green	Hill Zone background layer deformation code
0000698A                            ; ---------------------------------------------------------------------------
0000698A                            
0000698A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000698A                            
0000698A                            
0000698A                            Deform_GHZ:				; XREF: Deform_Index
0000698A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000698E 48C4                       		ext.l	d4
00006990 EB84                       		asl.l	#5,d4
00006992 2204                       		move.l	d4,d1
00006994 E384                       		asl.l	#1,d4
00006996 D881                       		add.l	d1,d4
00006998 7A00                       		moveq	#0,d5
0000699A 6100 0000                  		bsr.w	ScrollBlock1
0000699E 6100 0000                  		bsr.w	ScrollBlock4
000069A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069A6 3038 F704                  		move.w	($FFFFF704).w,d0
000069AA 0240 07FF                  		andi.w	#$7FF,d0
000069AE EA48                       		lsr.w	#5,d0
000069B0 4440                       		neg.w	d0
000069B2 0640 0026                  		addi.w	#$26,d0
000069B6 31C0 F714                  		move.w	d0,($FFFFF714).w
000069BA 3800                       		move.w	d0,d4
000069BC 6100 0000                  		bsr.w	ScrollBlock3
000069C0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069C6 323C 006F                  		move.w	#$6F,d1
000069CA 9244                       		sub.w	d4,d1
000069CC 3038 F700                  		move.w	($FFFFF700).w,d0
000069D0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069D6 6600                       		bne.s	loc_633C
000069D8 7000                       		moveq	#0,d0
000069DA                            
000069DA                            loc_633C:
000069DA 4440                       		neg.w	d0
000069DC 4840                       		swap	d0
000069DE 3038 F708                  		move.w	($FFFFF708).w,d0
000069E2 4440                       		neg.w	d0
000069E4                            
000069E4                            loc_6346:
000069E4 22C0                       		move.l	d0,(a1)+
000069E6 51C9 FFFC                  		dbf	d1,loc_6346
000069EA 323C 0027                  		move.w	#$27,d1
000069EE 3038 F710                  		move.w	($FFFFF710).w,d0
000069F2 4440                       		neg.w	d0
000069F4                            
000069F4                            loc_6356:
000069F4 22C0                       		move.l	d0,(a1)+
000069F6 51C9 FFFC                  		dbf	d1,loc_6356
000069FA 3038 F710                  		move.w	($FFFFF710).w,d0
000069FE 0640 0000                  		addi.w	#0,d0
00006A02 3438 F700                  		move.w	($FFFFF700).w,d2
00006A06 0642 FE00                  		addi.w	#-$200,d2
00006A0A 9440                       		sub.w	d0,d2
00006A0C 48C2                       		ext.l	d2
00006A0E E182                       		asl.l	#8,d2
00006A10 85FC 0068                  		divs.w	#$68,d2
00006A14 48C2                       		ext.l	d2
00006A16 E182                       		asl.l	#8,d2
00006A18 7600                       		moveq	#0,d3
00006A1A 3600                       		move.w	d0,d3
00006A1C 323C 0047                  		move.w	#$47,d1
00006A20 D244                       		add.w	d4,d1
00006A22                            
00006A22                            loc_6384:
00006A22 3003                       		move.w	d3,d0
00006A24 4440                       		neg.w	d0
00006A26 22C0                       		move.l	d0,(a1)+
00006A28 4843                       		swap	d3
00006A2A D682                       		add.l	d2,d3
00006A2C 4843                       		swap	d3
00006A2E 51C9 FFF2                  		dbf	d1,loc_6384
00006A32 4E75                       		rts	
00006A34                            ; End of function Deform_GHZ
00006A34                            
00006A34                            ; ---------------------------------------------------------------------------
00006A34                            ; Labyrinth Zone background layer deformation code
00006A34                            ; ---------------------------------------------------------------------------
00006A34                            
00006A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A34                            
00006A34                            
00006A34                            Deform_LZ:				; XREF: Deform_Index
00006A34 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A38 48C4                       		ext.l	d4
00006A3A EF84                       		asl.l	#7,d4
00006A3C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A40 48C5                       		ext.l	d5
00006A42 EF85                       		asl.l	#7,d5
00006A44 6100 0000                  		bsr.w	ScrollBlock1
00006A48 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A4E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A52 323C 00DF                  		move.w	#$DF,d1
00006A56 3038 F700                  		move.w	($FFFFF700).w,d0
00006A5A 4440                       		neg.w	d0
00006A5C 4840                       		swap	d0
00006A5E 3038 F708                  		move.w	($FFFFF708).w,d0
00006A62 4440                       		neg.w	d0
00006A64                            
00006A64                            loc_63C6:
00006A64 22C0                       		move.l	d0,(a1)+
00006A66 51C9 FFFC                  		dbf	d1,loc_63C6
00006A6A 3038 F646                  		move.w	($FFFFF646).w,d0
00006A6E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A72 4E75                       		rts	
00006A74                            ; End of function Deform_LZ
00006A74                            
00006A74                            ; ---------------------------------------------------------------------------
00006A74                            ; Marble Zone background layer deformation code
00006A74                            ; ---------------------------------------------------------------------------
00006A74                            
00006A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A74                            
00006A74                            
00006A74                            Deform_MZ:				; XREF: Deform_Index
00006A74 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A78 48C4                       		ext.l	d4
00006A7A ED84                       		asl.l	#6,d4
00006A7C 2204                       		move.l	d4,d1
00006A7E E384                       		asl.l	#1,d4
00006A80 D881                       		add.l	d1,d4
00006A82 7A00                       		moveq	#0,d5
00006A84 6100 0000                  		bsr.w	ScrollBlock1
00006A88 303C 0200                  		move.w	#$200,d0
00006A8C 3238 F704                  		move.w	($FFFFF704).w,d1
00006A90 0441 01C8                  		subi.w	#$1C8,d1
00006A94 6500                       		bcs.s	loc_6402
00006A96 3401                       		move.w	d1,d2
00006A98 D241                       		add.w	d1,d1
00006A9A D242                       		add.w	d2,d1
00006A9C E441                       		asr.w	#2,d1
00006A9E D041                       		add.w	d1,d0
00006AA0                            
00006AA0                            loc_6402:
00006AA0 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AA4 6100 0000                  		bsr.w	ScrollBlock3
00006AA8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AAE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AB2 323C 00DF                  		move.w	#$DF,d1
00006AB6 3038 F700                  		move.w	($FFFFF700).w,d0
00006ABA 4440                       		neg.w	d0
00006ABC 4840                       		swap	d0
00006ABE 3038 F708                  		move.w	($FFFFF708).w,d0
00006AC2 4440                       		neg.w	d0
00006AC4                            
00006AC4                            loc_6426:
00006AC4 22C0                       		move.l	d0,(a1)+
00006AC6 51C9 FFFC                  		dbf	d1,loc_6426
00006ACA 4E75                       		rts	
00006ACC                            ; End of function Deform_MZ
00006ACC                            
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            ; Star Light Zone background layer deformation code
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            
00006ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ACC                            
00006ACC                            
00006ACC                            Deform_SLZ:				; XREF: Deform_Index
00006ACC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AD0 48C4                       		ext.l	d4
00006AD2 EB84                       		asl.l	#5,d4
00006AD4 2204                       		move.l	d4,d1
00006AD6 E384                       		asl.l	#1,d4
00006AD8 D881                       		add.l	d1,d4
00006ADA 7A00                       		moveq	#0,d5
00006ADC 6100 0000                  		bsr.w	ScrollBlock1
00006AE0 6100 0000                  		bsr.w	ScrollBlock3
00006AE4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE8                            	;	move.w	($FFFFF704).w,d0
00006AE8                            	;	andi.w	#$7FF,d0
00006AE8 EA48                       		lsr.w	#5,d0
00006AEA 4440                       		neg.w	d0
00006AEC 0640 0026                  		addi.w	#$26,d0
00006AF0 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AF4 3800                       		move.w	d0,d4
00006AF6                            	;	bsr.w	ScrollBlock3
00006AF6 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AFC 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006B00                            
00006B00 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B04 4440                       		neg.w	d0			; negate (positive to negative)
00006B06 4840                       		swap	d0			; send to the left side of d0
00006B08 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B0C 45F8 A800                  		lea	($FFFFA800).w,a2
00006B10 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B16 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B1C 3038 A800                  		move.w	($FFFFA800).w,d0
00006B20 4440                       		neg.w	d0			; negate (positive to negative)
00006B22 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B24 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B28                            slz_DeformLoop_1:
00006B28 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B2A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B2E                            
00006B2E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B32 4440                       		neg.w	d0			; negate (positive to negative)
00006B34 4840                       		swap	d0			; send to the left side of d0
00006B36 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B3A 45F8 A800                  		lea	($FFFFA800).w,a2
00006B3E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B44 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B4A 3038 A800                  		move.w	($FFFFA800).w,d0
00006B4E 4440                       		neg.w	d0			; negate (positive to negative)
00006B50 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B52 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B56                            slz_DeformLoop_2:
00006B56 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B58 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B5C                            
00006B5C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B60 4440                       		neg.w	d0			; negate (positive to negative)
00006B62 4840                       		swap	d0			; send to the left side of d0
00006B64 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B68 45F8 A800                  		lea	($FFFFA800).w,a2
00006B6C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B72 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B78 3038 A800                  		move.w	($FFFFA800).w,d0
00006B7C 4440                       		neg.w	d0			; negate (positive to negative)
00006B7E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B80 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B84                            slz_DeformLoop_3:
00006B84 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B86 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B8A                            
00006B8A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B8E 4440                       		neg.w	d0			; negate (positive to negative)
00006B90 4840                       		swap	d0			; send to the left side of d0
00006B92 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B96 45F8 A800                  		lea	($FFFFA800).w,a2
00006B9A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BA0 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BA6 3038 A800                  		move.w	($FFFFA800).w,d0
00006BAA 4440                       		neg.w	d0			; negate (positive to negative)
00006BAC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BAE 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BB2                            slz_DeformLoop_4:
00006BB2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BB4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BB8                            
00006BB8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BBC 4440                       		neg.w	d0			; negate (positive to negative)
00006BBE 4840                       		swap	d0			; send to the left side of d0
00006BC0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BC4 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC8 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BCE 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BD4 3038 A800                  		move.w	($FFFFA800).w,d0
00006BD8 4440                       		neg.w	d0			; negate (positive to negative)
00006BDA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BDC 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BE0                            slz_DeformLoop_5:
00006BE0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BE2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BE6                            
00006BE6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BEA 4440                       		neg.w	d0			; negate (positive to negative)
00006BEC 4840                       		swap	d0			; send to the left side of d0
00006BEE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BF2 4440                       		neg.w	d0			; negate (positive to negative)
00006BF4 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BF6 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BFA                            slz_DeformLoop_6:
00006BFA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BFC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006C00                            
00006C00 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C04 4440                       		neg.w	d0			; negate (positive to negative)
00006C06 4840                       		swap	d0			; send to the left side of d0
00006C08 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C0C 4440                       		neg.w	d0			; negate (positive to negative)
00006C0E EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C10 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C14                            slz_DeformLoop_7:
00006C14 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C16 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C1A                            
00006C1A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C1E 4440                       		neg.w	d0			; negate (positive to negative)
00006C20 4840                       		swap	d0			; send to the left side of d0
00006C22 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C26 4440                       		neg.w	d0			; negate (positive to negative)
00006C28 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C2A 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C2E                            slz_DeformLoop_8:
00006C2E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C30 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C34                            
00006C34 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C38 4440                       		neg.w	d0			; negate (positive to negative)
00006C3A 4840                       		swap	d0			; send to the left side of d0
00006C3C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C40 4440                       		neg.w	d0			; negate (positive to negative)
00006C42 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C44 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C48                            slz_DeformLoop_9:
00006C48 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C4A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C4E                            
00006C4E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C52 4440                       		neg.w	d0			; negate (positive to negative)
00006C54 4840                       		swap	d0			; send to the left side of d0
00006C56 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C5A 4440                       		neg.w	d0			; negate (positive to negative)
00006C5C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C5E 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C62                            slz_DeformLoop_10:
00006C62 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C64 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C68                            
00006C68 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C6C 4440                       		neg.w	d0			; negate (positive to negative)
00006C6E 4840                       		swap	d0			; send to the left side of d0
00006C70 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C74 4440                       		neg.w	d0			; negate (positive to negative)
00006C76 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C78 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C7C                            slz_DeformLoop_11:
00006C7C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C7E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C82                            
00006C82 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C86 4440                       		neg.w	d0			; negate (positive to negative)
00006C88 4840                       		swap	d0			; send to the left side of d0
00006C8A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C8E 4440                       		neg.w	d0			; negate (positive to negative)
00006C90 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C92 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C96                            slz_DeformLoop_12:
00006C96 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C98 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C9C                            
00006C9C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CA0 4440                       		neg.w	d0			; negate (positive to negative)
00006CA2 4840                       		swap	d0			; send to the left side of d0
00006CA4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA8 4440                       		neg.w	d0			; negate (positive to negative)
00006CAA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CAC 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CB0                            slz_DeformLoop_13:
00006CB0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CB2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CB6 4E75                       		rts	
00006CB8                            ; End of function Deform_SLZ
00006CB8 4E75                       		rts	
00006CBA                            ; End of function Deform_SLZ_2
00006CBA                            
00006CBA                            ; ---------------------------------------------------------------------------
00006CBA                            ; Spring Yard Zone background layer deformation	code
00006CBA                            ; ---------------------------------------------------------------------------
00006CBA                            
00006CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CBA                            
00006CBA                            
00006CBA                            Deform_SYZ:				; XREF: Deform_Index
00006CBA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CBE 48C4                       		ext.l	d4
00006CC0 ED84                       		asl.l	#6,d4
00006CC2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CC6 48C5                       		ext.l	d5
00006CC8 E985                       		asl.l	#4,d5
00006CCA 2205                       		move.l	d5,d1
00006CCC E385                       		asl.l	#1,d5
00006CCE DA81                       		add.l	d1,d5
00006CD0 6100 0000                  		bsr.w	ScrollBlock1
00006CD4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CDA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CDE 323C 00DF                  		move.w	#$DF,d1
00006CE2 3038 F700                  		move.w	($FFFFF700).w,d0
00006CE6 4440                       		neg.w	d0
00006CE8 4840                       		swap	d0
00006CEA 3038 F708                  		move.w	($FFFFF708).w,d0
00006CEE 4440                       		neg.w	d0
00006CF0                            
00006CF0                            loc_653C:
00006CF0 22C0                       		move.l	d0,(a1)+
00006CF2 51C9 FFFC                  		dbf	d1,loc_653C
00006CF6 4E75                       		rts	
00006CF8                            ; End of function Deform_SYZ
00006CF8                            
00006CF8                            ; ---------------------------------------------------------------------------
00006CF8                            ; Scrap	Brain Zone background layer deformation	code
00006CF8                            ; ---------------------------------------------------------------------------
00006CF8                            
00006CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF8                            
00006CF8                            
00006CF8                            Deform_SBZ:				; XREF: Deform_Index
00006CF8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CFC 48C4                       		ext.l	d4
00006CFE ED84                       		asl.l	#6,d4
00006D00 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D04 48C5                       		ext.l	d5
00006D06 E985                       		asl.l	#4,d5
00006D08 E385                       		asl.l	#1,d5
00006D0A 6100 0000                  		bsr.w	ScrollBlock1
00006D0E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D14 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D18 323C 00DF                  		move.w	#$DF,d1
00006D1C 3038 F700                  		move.w	($FFFFF700).w,d0
00006D20 4440                       		neg.w	d0
00006D22 4840                       		swap	d0
00006D24 3038 F708                  		move.w	($FFFFF708).w,d0
00006D28 4440                       		neg.w	d0
00006D2A                            
00006D2A                            loc_6576:
00006D2A 22C0                       		move.l	d0,(a1)+
00006D2C 51C9 FFFC                  		dbf	d1,loc_6576
00006D30 4E75                       		rts	
00006D32                            ; End of function Deform_SBZ
00006D32                            ; ---------------------------------------------------------------------------
00006D32                            ; Makoto Zone background layer deformation code
00006D32                            ; ---------------------------------------------------------------------------
00006D32                            
00006D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D32                            
00006D32                            
00006D32                            Deform_BHZ:				; XREF: Deform_Index
00006D32 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D36 48C4                       		ext.l	d4
00006D38 E984                       		asl.l	#4,d4
00006D3A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D3E 48C5                       		ext.l	d5
00006D40 E985                       		asl.l	#4,d5
00006D42 7A00                       		moveq	#0,d5	; reset bg position in title screen
00006D44 6100 0000                  		bsr.w	ScrollBlock1
00006D48 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D4E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D52 323C 00DF                  		move.w	#$DF,d1
00006D56 3038 F700                  		move.w	($FFFFF700).w,d0
00006D5A 4440                       		neg.w	d0
00006D5C 4840                       		swap	d0
00006D5E 3038 F708                  		move.w	($FFFFF708).w,d0
00006D62 4440                       		neg.w	d0
00006D64                            
00006D64                            loc_63COCK6:
00006D64 22C0                       		move.l	d0,(a1)+
00006D66 51C9 FFFC                  		dbf	d1,loc_63COCK6
00006D6A 3038 F646                  		move.w	($FFFFF646).w,d0
00006D6E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006D72 4E75                       		rts	
00006D74                            ; End of function Deform_BHZ
00006D74                            ; ---------------------------------------------------------------------------
00006D74                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D74                            ; ---------------------------------------------------------------------------
00006D74                            
00006D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D74                            
00006D74                            
00006D74                            ScrollHoriz:				; XREF: DeformBgLayer
00006D74 3838 F700                  		move.w	($FFFFF700).w,d4
00006D78 6100                       		bsr.s	ScrollHoriz2
00006D7A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D7E 0240 0010                  		andi.w	#$10,d0
00006D82 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D86 B300                       		eor.b	d1,d0
00006D88 6600                       		bne.s	locret_65B0
00006D8A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D90 3038 F700                  		move.w	($FFFFF700).w,d0
00006D94 9044                       		sub.w	d4,d0
00006D96 6A00                       		bpl.s	loc_65AA
00006D98 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D9E 4E75                       		rts	
00006DA0                            ; ===========================================================================
00006DA0                            
00006DA0                            loc_65AA:
00006DA0 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006DA6                            
00006DA6                            locret_65B0:
00006DA6 4E75                       		rts	
00006DA8                            ; End of function ScrollHoriz
00006DA8                            
00006DA8                            
00006DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA8                            
00006DA8                            
00006DA8                            ScrollHoriz2:				; XREF: ScrollHoriz
00006DA8 3038 D008                  		move.w	($FFFFD008).w,d0
00006DAC 9078 F700                  		sub.w	($FFFFF700).w,d0
00006DB0 0440 0090                  		subi.w	#$90,d0
00006DB4 6500                       		bcs.s	loc_65F6
00006DB6 0440 0010                  		subi.w	#$10,d0
00006DBA 6400                       		bcc.s	loc_65CC
00006DBC 4278 F73A                  		clr.w	($FFFFF73A).w
00006DC0 4E75                       		rts	
00006DC2                            ; ===========================================================================
00006DC2                            
00006DC2                            loc_65CC:
00006DC2 0C40 0010                  		cmpi.w	#$10,d0
00006DC6 6500                       		bcs.s	loc_65D6
00006DC8 303C 0010                  		move.w	#$10,d0
00006DCC                            
00006DCC                            loc_65D6:
00006DCC D078 F700                  		add.w	($FFFFF700).w,d0
00006DD0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006DD4 6D00                       		blt.s	loc_65E4
00006DD6 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006DDA                            
00006DDA                            loc_65E4:
00006DDA 3200                       		move.w	d0,d1
00006DDC 9278 F700                  		sub.w	($FFFFF700).w,d1
00006DE0 E141                       		asl.w	#8,d1
00006DE2 31C0 F700                  		move.w	d0,($FFFFF700).w
00006DE6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DEA 4E75                       		rts	
00006DEC                            ; ===========================================================================
00006DEC                            
00006DEC                            loc_65F6:				; XREF: ScrollHoriz2
00006DEC D078 F700                  		add.w	($FFFFF700).w,d0
00006DF0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DF4 6EE4                       		bgt.s	loc_65E4
00006DF6 3038 F728                  		move.w	($FFFFF728).w,d0
00006DFA 60DE                       		bra.s	loc_65E4
00006DFC                            ; End of function ScrollHoriz2
00006DFC                            
00006DFC                            ; ===========================================================================
00006DFC 4A40                       		tst.w	d0
00006DFE 6A00                       		bpl.s	loc_6610
00006E00 303C FFFE                  		move.w	#-2,d0
00006E04 60E6                       		bra.s	loc_65F6
00006E06                            ; ===========================================================================
00006E06                            
00006E06                            loc_6610:
00006E06 303C 0002                  		move.w	#2,d0
00006E0A 60B6                       		bra.s	loc_65CC
00006E0C                            
00006E0C                            ; ---------------------------------------------------------------------------
00006E0C                            ; Subroutine to	scroll the level vertically as Sonic moves
00006E0C                            ; ---------------------------------------------------------------------------
00006E0C                            
00006E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E0C                            
00006E0C                            
00006E0C                            ScrollVertical:				; XREF: DeformBgLayer
00006E0C 7200                       		moveq	#0,d1
00006E0E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E12 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E16 0838 0002 D022             		btst	#2,($FFFFD022).w
00006E1C 6700                       		beq.s	loc_662A
00006E1E 5B40                       		subq.w	#5,d0
00006E20                            
00006E20                            loc_662A:
00006E20 0838 0001 D022             		btst	#1,($FFFFD022).w
00006E26 6700                       		beq.s	loc_664A
00006E28 0640 0020                  		addi.w	#$20,d0
00006E2C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E30 6500                       		bcs.s	loc_6696
00006E32 0440 0040                  		subi.w	#$40,d0
00006E36 6400                       		bcc.s	loc_6696
00006E38 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E3C 6600                       		bne.s	loc_66A8
00006E3E 6000                       		bra.s	loc_6656
00006E40                            ; ===========================================================================
00006E40                            
00006E40                            loc_664A:
00006E40 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E44 6600                       		bne.s	loc_665C
00006E46 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E4A 6600                       		bne.s	loc_66A8
00006E4C                            
00006E4C                            loc_6656:
00006E4C 4278 F73C                  		clr.w	($FFFFF73C).w
00006E50 4E75                       		rts	
00006E52                            ; ===========================================================================
00006E52                            
00006E52                            loc_665C:
00006E52 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E58 6600                       		bne.s	loc_6684
00006E5A 3238 D014                  		move.w	($FFFFD014).w,d1
00006E5E 6A00                       		bpl.s	loc_666C
00006E60 4441                       		neg.w	d1
00006E62                            
00006E62                            loc_666C:
00006E62 0C41 0800                  		cmpi.w	#$800,d1
00006E66 6400                       		bcc.s	loc_6696
00006E68 323C 0600                  		move.w	#$600,d1
00006E6C 0C40 0006                  		cmpi.w	#6,d0
00006E70 6E00                       		bgt.s	loc_66F6
00006E72 0C40 FFFA                  		cmpi.w	#-6,d0
00006E76 6D00                       		blt.s	loc_66C0
00006E78 6000                       		bra.s	loc_66AE
00006E7A                            ; ===========================================================================
00006E7A                            
00006E7A                            loc_6684:
00006E7A 323C 0200                  		move.w	#$200,d1
00006E7E 0C40 0002                  		cmpi.w	#2,d0
00006E82 6E00                       		bgt.s	loc_66F6
00006E84 0C40 FFFE                  		cmpi.w	#-2,d0
00006E88 6D00                       		blt.s	loc_66C0
00006E8A 6000                       		bra.s	loc_66AE
00006E8C                            ; ===========================================================================
00006E8C                            
00006E8C                            loc_6696:
00006E8C 323C 1000                  		move.w	#$1000,d1
00006E90 0C40 0010                  		cmpi.w	#$10,d0
00006E94 6E00                       		bgt.s	loc_66F6
00006E96 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E9A 6D00                       		blt.s	loc_66C0
00006E9C 6000                       		bra.s	loc_66AE
00006E9E                            ; ===========================================================================
00006E9E                            
00006E9E                            loc_66A8:
00006E9E 7000                       		moveq	#0,d0
00006EA0 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006EA4                            
00006EA4                            loc_66AE:
00006EA4 7200                       		moveq	#0,d1
00006EA6 3200                       		move.w	d0,d1
00006EA8 D278 F704                  		add.w	($FFFFF704).w,d1
00006EAC 4A40                       		tst.w	d0
00006EAE 6A00 0000                  		bpl.w	loc_6700
00006EB2 6000 0000                  		bra.w	loc_66CC
00006EB6                            ; ===========================================================================
00006EB6                            
00006EB6                            loc_66C0:
00006EB6 4441                       		neg.w	d1
00006EB8 48C1                       		ext.l	d1
00006EBA E181                       		asl.l	#8,d1
00006EBC D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EC0 4841                       		swap	d1
00006EC2                            
00006EC2                            loc_66CC:
00006EC2 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006EC6 6E00                       		bgt.s	loc_6724
00006EC8 0C41 FF00                  		cmpi.w	#-$100,d1
00006ECC 6E00                       		bgt.s	loc_66F0
00006ECE 0241 07FF                  		andi.w	#$7FF,d1
00006ED2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006ED8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006EDE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006EE4 6000                       		bra.s	loc_6724
00006EE6                            ; ===========================================================================
00006EE6                            
00006EE6                            loc_66F0:
00006EE6 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EEA 6000                       		bra.s	loc_6724
00006EEC                            ; ===========================================================================
00006EEC                            
00006EEC                            loc_66F6:
00006EEC 48C1                       		ext.l	d1
00006EEE E181                       		asl.l	#8,d1
00006EF0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EF4 4841                       		swap	d1
00006EF6                            
00006EF6                            loc_6700:
00006EF6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EFA 6D00                       		blt.s	loc_6724
00006EFC 0441 0800                  		subi.w	#$800,d1
00006F00 6500                       		bcs.s	loc_6720
00006F02 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006F08 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006F0E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006F14 6000                       		bra.s	loc_6724
00006F16                            ; ===========================================================================
00006F16                            
00006F16                            loc_6720:
00006F16 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006F1A                            
00006F1A                            loc_6724:
00006F1A 3838 F704                  		move.w	($FFFFF704).w,d4
00006F1E 4841                       		swap	d1
00006F20 2601                       		move.l	d1,d3
00006F22 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006F26 E09B                       		ror.l	#8,d3
00006F28 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006F2C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006F30 3038 F704                  		move.w	($FFFFF704).w,d0
00006F34 0240 0010                  		andi.w	#$10,d0
00006F38 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006F3C B300                       		eor.b	d1,d0
00006F3E 6600                       		bne.s	locret_6766
00006F40 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006F46 3038 F704                  		move.w	($FFFFF704).w,d0
00006F4A 9044                       		sub.w	d4,d0
00006F4C 6A00                       		bpl.s	loc_6760
00006F4E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F54 4E75                       		rts	
00006F56                            ; ===========================================================================
00006F56                            
00006F56                            loc_6760:
00006F56 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F5C                            
00006F5C                            locret_6766:
00006F5C 4E75                       		rts	
00006F5E                            ; End of function ScrollVertical
00006F5E                            
00006F5E                            
00006F5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F5E                            
00006F5E                            
00006F5E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F5E 2438 F708                  		move.l	($FFFFF708).w,d2
00006F62 2002                       		move.l	d2,d0
00006F64 D084                       		add.l	d4,d0
00006F66 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F6A 2200                       		move.l	d0,d1
00006F6C 4841                       		swap	d1
00006F6E 0241 0010                  		andi.w	#$10,d1
00006F72 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F76 B701                       		eor.b	d3,d1
00006F78 6600                       		bne.s	loc_679C
00006F7A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F80 9082                       		sub.l	d2,d0
00006F82 6A00                       		bpl.s	loc_6796
00006F84 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F8A 6000                       		bra.s	loc_679C
00006F8C                            ; ===========================================================================
00006F8C                            
00006F8C                            loc_6796:
00006F8C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F92                            
00006F92                            loc_679C:
00006F92 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F96 2003                       		move.l	d3,d0
00006F98 D085                       		add.l	d5,d0
00006F9A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F9E 2200                       		move.l	d0,d1
00006FA0 4841                       		swap	d1
00006FA2 0241 0010                  		andi.w	#$10,d1
00006FA6 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FAA B501                       		eor.b	d2,d1
00006FAC 6600                       		bne.s	locret_67D0
00006FAE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FB4 9083                       		sub.l	d3,d0
00006FB6 6A00                       		bpl.s	loc_67CA
00006FB8 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FBE 4E75                       		rts	
00006FC0                            ; ===========================================================================
00006FC0                            
00006FC0                            loc_67CA:
00006FC0 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FC6                            
00006FC6                            locret_67D0:
00006FC6 4E75                       		rts	
00006FC8                            ; End of function ScrollBlock1
00006FC8                            
00006FC8                            
00006FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC8                            
00006FC8                            
00006FC8                            ScrollBlock2:				; XREF: Deform_SLZ
00006FC8 2438 F708                  		move.l	($FFFFF708).w,d2
00006FCC 2002                       		move.l	d2,d0
00006FCE D084                       		add.l	d4,d0
00006FD0 21C0 F708                  		move.l	d0,($FFFFF708).w
00006FD4 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006FD8 2003                       		move.l	d3,d0
00006FDA D085                       		add.l	d5,d0
00006FDC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006FE0 2200                       		move.l	d0,d1
00006FE2 4841                       		swap	d1
00006FE4 0241 0010                  		andi.w	#$10,d1
00006FE8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FEC B501                       		eor.b	d2,d1
00006FEE 6600                       		bne.s	locret_6812
00006FF0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FF6 9083                       		sub.l	d3,d0
00006FF8 6A00                       		bpl.s	loc_680C
00006FFA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007000 4E75                       		rts	
00007002                            ; ===========================================================================
00007002                            
00007002                            loc_680C:
00007002 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007008                            
00007008                            locret_6812:
00007008 4E75                       		rts	
0000700A                            ; End of function ScrollBlock2
0000700A                            
0000700A                            
0000700A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000700A                            
0000700A                            
0000700A                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000700A 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000700E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007012 3200                       		move.w	d0,d1
00007014 0241 0010                  		andi.w	#$10,d1
00007018 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000701C B501                       		eor.b	d2,d1
0000701E 6600                       		bne.s	locret_6842
00007020 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007026 9043                       		sub.w	d3,d0
00007028 6A00                       		bpl.s	loc_683C
0000702A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007030 4E75                       		rts	
00007032                            ; ===========================================================================
00007032                            
00007032                            loc_683C:
00007032 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007038                            
00007038                            locret_6842:
00007038 4E75                       		rts	
0000703A                            ; End of function ScrollBlock3
0000703A                            
0000703A                            
0000703A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000703A                            
0000703A                            
0000703A                            ScrollBlock4:				; XREF: Deform_GHZ
0000703A 3438 F710                  		move.w	($FFFFF710).w,d2
0000703E 3638 F714                  		move.w	($FFFFF714).w,d3
00007042 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007046 48C0                       		ext.l	d0
00007048 EF80                       		asl.l	#7,d0
0000704A D1B8 F710                  		add.l	d0,($FFFFF710).w
0000704E 3038 F710                  		move.w	($FFFFF710).w,d0
00007052 0240 0010                  		andi.w	#$10,d0
00007056 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000705A B300                       		eor.b	d1,d0
0000705C 6600                       		bne.s	locret_6884
0000705E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007064 3038 F710                  		move.w	($FFFFF710).w,d0
00007068 9042                       		sub.w	d2,d0
0000706A 6A00                       		bpl.s	loc_687E
0000706C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007072 6000                       		bra.s	locret_6884
00007074                            ; ===========================================================================
00007074                            
00007074                            loc_687E:
00007074 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000707A                            
0000707A                            locret_6884:
0000707A 4E75                       		rts	
0000707C                            ; End of function ScrollBlock4
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6886:				; XREF: loc_C44
0000707C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007082 4DF9 00C0 0000             		lea	($C00000).l,a6
00007088 45F8 F756                  		lea	($FFFFF756).w,a2
0000708C 47F8 F708                  		lea	($FFFFF708).w,a3
00007090 49F8 A440                  		lea	($FFFFA440).w,a4
00007094 343C 6000                  		move.w	#$6000,d2
00007098 6100 0000                  		bsr.w	sub_6954
0000709C 45F8 F758                  		lea	($FFFFF758).w,a2
000070A0 47F8 F710                  		lea	($FFFFF710).w,a3
000070A4 6000 0000                  		bra.w	sub_69F4
000070A8                            ; End of function sub_6886
000070A8                            
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            ; Subroutine to	display	correct	tiles as you move
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            
000070A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A8                            
000070A8                            
000070A8                            LoadTilesAsYouMove:			; XREF: Demo_Time
000070A8 4BF9 00C0 0004             		lea	($C00004).l,a5
000070AE 4DF9 00C0 0000             		lea	($C00000).l,a6
000070B4 45F8 FF32                  		lea	($FFFFFF32).w,a2
000070B8 47F8 FF18                  		lea	($FFFFFF18).w,a3
000070BC 49F8 A440                  		lea	($FFFFA440).w,a4
000070C0 343C 6000                  		move.w	#$6000,d2
000070C4 6100 0000                  		bsr.w	sub_6954
000070C8 45F8 FF34                  		lea	($FFFFFF34).w,a2
000070CC 47F8 FF20                  		lea	($FFFFFF20).w,a3
000070D0 6100 0000                  		bsr.w	sub_69F4
000070D4 45F8 FF30                  		lea	($FFFFFF30).w,a2
000070D8 47F8 FF10                  		lea	($FFFFFF10).w,a3
000070DC 49F8 A400                  		lea	($FFFFA400).w,a4
000070E0 343C 4000                  		move.w	#$4000,d2
000070E4 4A12                       		tst.b	(a2)
000070E6 6700                       		beq.s	locret_6952
000070E8 0892 0000                  		bclr	#0,(a2)
000070EC 6700                       		beq.s	loc_6908
000070EE 78F0                       		moveq	#-$10,d4
000070F0 7AF0                       		moveq	#-$10,d5
000070F2 6100 0000                  		bsr.w	sub_6C20
000070F6 78F0                       		moveq	#-$10,d4
000070F8 7AF0                       		moveq	#-$10,d5
000070FA 6100 0000                  		bsr.w	sub_6AD8
000070FE                            
000070FE                            loc_6908:
000070FE 0892 0001                  		bclr	#1,(a2)
00007102 6700                       		beq.s	loc_6922
00007104 383C 00E0                  		move.w	#$E0,d4
00007108 7AF0                       		moveq	#-$10,d5
0000710A 6100 0000                  		bsr.w	sub_6C20
0000710E 383C 00E0                  		move.w	#$E0,d4
00007112 7AF0                       		moveq	#-$10,d5
00007114 6100 0000                  		bsr.w	sub_6AD8
00007118                            
00007118                            loc_6922:
00007118 0892 0002                  		bclr	#2,(a2)
0000711C 6700                       		beq.s	loc_6938
0000711E 78F0                       		moveq	#-$10,d4
00007120 7AF0                       		moveq	#-$10,d5
00007122 6100 0000                  		bsr.w	sub_6C20
00007126 78F0                       		moveq	#-$10,d4
00007128 7AF0                       		moveq	#-$10,d5
0000712A 6100 0000                  		bsr.w	sub_6B04
0000712E                            
0000712E                            loc_6938:
0000712E 0892 0003                  		bclr	#3,(a2)
00007132 6700                       		beq.s	locret_6952
00007134 78F0                       		moveq	#-$10,d4
00007136 3A3C 0140                  		move.w	#$140,d5
0000713A 6100 0000                  		bsr.w	sub_6C20
0000713E 78F0                       		moveq	#-$10,d4
00007140 3A3C 0140                  		move.w	#$140,d5
00007144 6100 0000                  		bsr.w	sub_6B04
00007148                            
00007148                            locret_6952:
00007148 4E75                       		rts	
0000714A                            ; End of function LoadTilesAsYouMove
0000714A                            
0000714A                            
0000714A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000714A                            
0000714A                            
0000714A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000714A 4A12                       		tst.b	(a2)
0000714C 6700 0000                  		beq.w	locret_69F2
00007150 0892 0000                  		bclr	#0,(a2)
00007154 6700                       		beq.s	loc_6972
00007156 78F0                       		moveq	#-$10,d4
00007158 7AF0                       		moveq	#-$10,d5
0000715A 6100 0000                  		bsr.w	sub_6C20
0000715E 78F0                       		moveq	#-$10,d4
00007160 7AF0                       		moveq	#-$10,d5
00007162 7C1F                       		moveq	#$1F,d6
00007164 6100 0000                  		bsr.w	sub_6ADA
00007168                            
00007168                            loc_6972:
00007168 0892 0001                  		bclr	#1,(a2)
0000716C 6700                       		beq.s	loc_698E
0000716E 383C 00E0                  		move.w	#$E0,d4
00007172 7AF0                       		moveq	#-$10,d5
00007174 6100 0000                  		bsr.w	sub_6C20
00007178 383C 00E0                  		move.w	#$E0,d4
0000717C 7AF0                       		moveq	#-$10,d5
0000717E 7C1F                       		moveq	#$1F,d6
00007180 6100 0000                  		bsr.w	sub_6ADA
00007184                            
00007184                            loc_698E:
00007184 0892 0002                  		bclr	#2,(a2)
00007188 6700                       		beq.s	loc_69BE
0000718A 78F0                       		moveq	#-$10,d4
0000718C 7AF0                       		moveq	#-$10,d5
0000718E 6100 0000                  		bsr.w	sub_6C20
00007192 78F0                       		moveq	#-$10,d4
00007194 7AF0                       		moveq	#-$10,d5
00007196 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000719A 322B 0004                  		move.w	4(a3),d1
0000719E 0241 FFF0                  		andi.w	#-$10,d1
000071A2 9C41                       		sub.w	d1,d6
000071A4 6D00                       		blt.s	loc_69BE
000071A6 E84E                       		lsr.w	#4,d6
000071A8 0C46 000F                  		cmpi.w	#$F,d6
000071AC 6500                       		bcs.s	loc_69BA
000071AE 7C0F                       		moveq	#$F,d6
000071B0                            
000071B0                            loc_69BA:
000071B0 6100 0000                  		bsr.w	sub_6B06
000071B4                            
000071B4                            loc_69BE:
000071B4 0892 0003                  		bclr	#3,(a2)
000071B8 6700                       		beq.s	locret_69F2
000071BA 78F0                       		moveq	#-$10,d4
000071BC 3A3C 0140                  		move.w	#$140,d5
000071C0 6100 0000                  		bsr.w	sub_6C20
000071C4 78F0                       		moveq	#-$10,d4
000071C6 3A3C 0140                  		move.w	#$140,d5
000071CA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071CE 322B 0004                  		move.w	4(a3),d1
000071D2 0241 FFF0                  		andi.w	#-$10,d1
000071D6 9C41                       		sub.w	d1,d6
000071D8 6D00                       		blt.s	locret_69F2
000071DA E84E                       		lsr.w	#4,d6
000071DC 0C46 000F                  		cmpi.w	#$F,d6
000071E0 6500                       		bcs.s	loc_69EE
000071E2 7C0F                       		moveq	#$F,d6
000071E4                            
000071E4                            loc_69EE:
000071E4 6100 0000                  		bsr.w	sub_6B06
000071E8                            
000071E8                            locret_69F2:
000071E8 4E75                       		rts	
000071EA                            ; End of function sub_6954
000071EA                            
000071EA                            
000071EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EA                            
000071EA                            
000071EA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071EA 4A12                       		tst.b	(a2)
000071EC 6700 0000                  		beq.w	locret_6A80
000071F0 0892 0002                  		bclr	#2,(a2)
000071F4 6700                       		beq.s	loc_6A3E
000071F6 0C53 0010                  		cmpi.w	#$10,(a3)
000071FA 6500                       		bcs.s	loc_6A3E
000071FC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007200 322B 0004                  		move.w	4(a3),d1
00007204 0241 FFF0                  		andi.w	#-$10,d1
00007208 9841                       		sub.w	d1,d4
0000720A 3F04                       		move.w	d4,-(sp)
0000720C 7AF0                       		moveq	#-$10,d5
0000720E 6100 0000                  		bsr.w	sub_6C20
00007212 381F                       		move.w	(sp)+,d4
00007214 7AF0                       		moveq	#-$10,d5
00007216 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000721A 322B 0004                  		move.w	4(a3),d1
0000721E 0241 FFF0                  		andi.w	#-$10,d1
00007222 9C41                       		sub.w	d1,d6
00007224 6D00                       		blt.s	loc_6A3E
00007226 E84E                       		lsr.w	#4,d6
00007228 0446 000E                  		subi.w	#$E,d6
0000722C 6400                       		bcc.s	loc_6A3E
0000722E 4446                       		neg.w	d6
00007230 6100 0000                  		bsr.w	sub_6B06
00007234                            
00007234                            loc_6A3E:
00007234 0892 0003                  		bclr	#3,(a2)
00007238 6700                       		beq.s	locret_6A80
0000723A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000723E 322B 0004                  		move.w	4(a3),d1
00007242 0241 FFF0                  		andi.w	#-$10,d1
00007246 9841                       		sub.w	d1,d4
00007248 3F04                       		move.w	d4,-(sp)
0000724A 3A3C 0140                  		move.w	#$140,d5
0000724E 6100 0000                  		bsr.w	sub_6C20
00007252 381F                       		move.w	(sp)+,d4
00007254 3A3C 0140                  		move.w	#$140,d5
00007258 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000725C 322B 0004                  		move.w	4(a3),d1
00007260 0241 FFF0                  		andi.w	#-$10,d1
00007264 9C41                       		sub.w	d1,d6
00007266 6D00                       		blt.s	locret_6A80
00007268 E84E                       		lsr.w	#4,d6
0000726A 0446 000E                  		subi.w	#$E,d6
0000726E 6400                       		bcc.s	locret_6A80
00007270 4446                       		neg.w	d6
00007272 6100 0000                  		bsr.w	sub_6B06
00007276                            
00007276                            locret_6A80:
00007276 4E75                       		rts	
00007278                            ; End of function sub_69F4
00007278                            
00007278                            ; ===========================================================================
00007278 4A12                       		tst.b	(a2)
0000727A 6700                       		beq.s	locret_6AD6
0000727C 0892 0002                  		bclr	#2,(a2)
00007280 6700                       		beq.s	loc_6AAC
00007282 383C 00D0                  		move.w	#$D0,d4
00007286 322B 0004                  		move.w	4(a3),d1
0000728A 0241 FFF0                  		andi.w	#-$10,d1
0000728E 9841                       		sub.w	d1,d4
00007290 3F04                       		move.w	d4,-(sp)
00007292 7AF0                       		moveq	#-$10,d5
00007294 6100 0000                  		bsr.w	sub_6C3C
00007298 381F                       		move.w	(sp)+,d4
0000729A 7AF0                       		moveq	#-$10,d5
0000729C 7C02                       		moveq	#2,d6
0000729E 6100 0000                  		bsr.w	sub_6B06
000072A2                            
000072A2                            loc_6AAC:
000072A2 0892 0003                  		bclr	#3,(a2)
000072A6 6700                       		beq.s	locret_6AD6
000072A8 383C 00D0                  		move.w	#$D0,d4
000072AC 322B 0004                  		move.w	4(a3),d1
000072B0 0241 FFF0                  		andi.w	#-$10,d1
000072B4 9841                       		sub.w	d1,d4
000072B6 3F04                       		move.w	d4,-(sp)
000072B8 3A3C 0140                  		move.w	#$140,d5
000072BC 6100 0000                  		bsr.w	sub_6C3C
000072C0 381F                       		move.w	(sp)+,d4
000072C2 3A3C 0140                  		move.w	#$140,d5
000072C6 7C02                       		moveq	#2,d6
000072C8 6100 0000                  		bsr.w	sub_6B06
000072CC                            
000072CC                            locret_6AD6:
000072CC 4E75                       		rts	
000072CE                            
000072CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CE                            
000072CE                            
000072CE                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000072CE 7C15                       		moveq	#$15,d6
000072D0                            ; End of function sub_6AD8
000072D0                            
000072D0                            
000072D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D0                            
000072D0                            
000072D0                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000072D0 2E3C 0080 0000             		move.l	#$800000,d7
000072D6 2200                       		move.l	d0,d1
000072D8                            
000072D8                            loc_6AE2:
000072D8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072DC 6100 0000                  		bsr.w	sub_6BD6
000072E0 2001                       		move.l	d1,d0
000072E2 6100 0000                  		bsr.w	sub_6B32
000072E6 5801                       		addq.b	#4,d1
000072E8 0201 007F                  		andi.b	#$7F,d1
000072EC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072F0 0645 0010                  		addi.w	#$10,d5
000072F4 51CE FFE2                  		dbf	d6,loc_6AE2
000072F8 4E75                       		rts	
000072FA                            ; End of function sub_6ADA
000072FA                            
000072FA                            
000072FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FA                            
000072FA                            
000072FA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072FA 7C0F                       		moveq	#$F,d6
000072FC                            ; End of function sub_6B04
000072FC                            
000072FC                            
000072FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FC                            
000072FC                            
000072FC                            sub_6B06:				; XREF: sub_6954
000072FC 2E3C 0080 0000             		move.l	#$800000,d7
00007302 2200                       		move.l	d0,d1
00007304                            
00007304                            loc_6B0E:
00007304 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007308 6100 0000                  		bsr.w	sub_6BD6
0000730C 2001                       		move.l	d1,d0
0000730E 6100 0000                  		bsr.w	sub_6B32
00007312 0641 0100                  		addi.w	#$100,d1
00007316 0241 0FFF                  		andi.w	#$FFF,d1
0000731A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000731E 0644 0010                  		addi.w	#$10,d4
00007322 51CE FFE0                  		dbf	d6,loc_6B0E
00007326 4E75                       		rts	
00007328                            ; End of function sub_6B06
00007328                            
00007328                            
00007328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007328                            
00007328                            
00007328                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007328 8042                       		or.w	d2,d0
0000732A 4840                       		swap	d0
0000732C 0810 0004                  		btst	#4,(a0)
00007330 6600                       		bne.s	loc_6B6E
00007332 0810 0003                  		btst	#3,(a0)
00007336 6600                       		bne.s	loc_6B4E
00007338 2A80                       		move.l	d0,(a5)
0000733A 2C99                       		move.l	(a1)+,(a6)
0000733C D087                       		add.l	d7,d0
0000733E 2A80                       		move.l	d0,(a5)
00007340 2C99                       		move.l	(a1)+,(a6)
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            loc_6B4E:
00007344 2A80                       		move.l	d0,(a5)
00007346 2819                       		move.l	(a1)+,d4
00007348 0A84 0800 0800             		eori.l	#$8000800,d4
0000734E 4844                       		swap	d4
00007350 2C84                       		move.l	d4,(a6)
00007352 D087                       		add.l	d7,d0
00007354 2A80                       		move.l	d0,(a5)
00007356 2819                       		move.l	(a1)+,d4
00007358 0A84 0800 0800             		eori.l	#$8000800,d4
0000735E 4844                       		swap	d4
00007360 2C84                       		move.l	d4,(a6)
00007362 4E75                       		rts	
00007364                            ; ===========================================================================
00007364                            
00007364                            loc_6B6E:
00007364 0810 0003                  		btst	#3,(a0)
00007368 6600                       		bne.s	loc_6B90
0000736A 2A80                       		move.l	d0,(a5)
0000736C 2A19                       		move.l	(a1)+,d5
0000736E 2819                       		move.l	(a1)+,d4
00007370 0A84 1000 1000             		eori.l	#$10001000,d4
00007376 2C84                       		move.l	d4,(a6)
00007378 D087                       		add.l	d7,d0
0000737A 2A80                       		move.l	d0,(a5)
0000737C 0A85 1000 1000             		eori.l	#$10001000,d5
00007382 2C85                       		move.l	d5,(a6)
00007384 4E75                       		rts	
00007386                            ; ===========================================================================
00007386                            
00007386                            loc_6B90:
00007386 2A80                       		move.l	d0,(a5)
00007388 2A19                       		move.l	(a1)+,d5
0000738A 2819                       		move.l	(a1)+,d4
0000738C 0A84 1800 1800             		eori.l	#$18001800,d4
00007392 4844                       		swap	d4
00007394 2C84                       		move.l	d4,(a6)
00007396 D087                       		add.l	d7,d0
00007398 2A80                       		move.l	d0,(a5)
0000739A 0A85 1800 1800             		eori.l	#$18001800,d5
000073A0 4845                       		swap	d5
000073A2 2C85                       		move.l	d5,(a6)
000073A4 4E75                       		rts	
000073A6                            ; End of function sub_6B32
000073A6                            
000073A6                            ; ===========================================================================
000073A6 4E75                       		rts	
000073A8                            ; ===========================================================================
000073A8 2A80                       		move.l	d0,(a5)
000073AA 3A3C 2000                  		move.w	#$2000,d5
000073AE 3819                       		move.w	(a1)+,d4
000073B0 D845                       		add.w	d5,d4
000073B2 3C84                       		move.w	d4,(a6)
000073B4 3819                       		move.w	(a1)+,d4
000073B6 D845                       		add.w	d5,d4
000073B8 3C84                       		move.w	d4,(a6)
000073BA D087                       		add.l	d7,d0
000073BC 2A80                       		move.l	d0,(a5)
000073BE 3819                       		move.w	(a1)+,d4
000073C0 D845                       		add.w	d5,d4
000073C2 3C84                       		move.w	d4,(a6)
000073C4 3819                       		move.w	(a1)+,d4
000073C6 D845                       		add.w	d5,d4
000073C8 3C84                       		move.w	d4,(a6)
000073CA 4E75                       		rts	
000073CC                            
000073CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073CC                            
000073CC                            
000073CC                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000073CC 43F8 B000                  		lea	($FFFFB000).w,a1
000073D0 D86B 0004                  		add.w	4(a3),d4
000073D4 DA53                       		add.w	(a3),d5
000073D6 3604                       		move.w	d4,d3
000073D8 E24B                       		lsr.w	#1,d3
000073DA 0243 0380                  		andi.w	#$380,d3
000073DE E64D                       		lsr.w	#3,d5
000073E0 3005                       		move.w	d5,d0
000073E2 EA48                       		lsr.w	#5,d0
000073E4 0240 007F                  		andi.w	#$7F,d0
000073E8 D043                       		add.w	d3,d0
000073EA 76FF                       		moveq	#-1,d3
000073EC 1634 0000                  		move.b	(a4,d0.w),d3
000073F0 6700                       		beq.s	locret_6C1E
000073F2 5303                       		subq.b	#1,d3
000073F4 0243 007F                  		andi.w	#$7F,d3
000073F8 EE5B                       		ror.w	#7,d3
000073FA D844                       		add.w	d4,d4
000073FC 0244 01E0                  		andi.w	#$1E0,d4
00007400 0245 001E                  		andi.w	#$1E,d5
00007404 D644                       		add.w	d4,d3
00007406 D645                       		add.w	d5,d3
00007408 2043                       		movea.l	d3,a0
0000740A 3610                       		move.w	(a0),d3
0000740C 0243 03FF                  		andi.w	#$3FF,d3
00007410 E74B                       		lsl.w	#3,d3
00007412 D2C3                       		adda.w	d3,a1
00007414                            
00007414                            locret_6C1E:
00007414 4E75                       		rts	
00007416                            ; End of function sub_6BD6
00007416                            
00007416                            
00007416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007416                            
00007416                            
00007416                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007416 D86B 0004                  		add.w	4(a3),d4
0000741A DA53                       		add.w	(a3),d5
0000741C 0244 00F0                  		andi.w	#$F0,d4
00007420 0245 01F0                  		andi.w	#$1F0,d5
00007424 E94C                       		lsl.w	#4,d4
00007426 E44D                       		lsr.w	#2,d5
00007428 D845                       		add.w	d5,d4
0000742A 7003                       		moveq	#3,d0
0000742C 4840                       		swap	d0
0000742E 3004                       		move.w	d4,d0
00007430 4E75                       		rts	
00007432                            ; End of function sub_6C20
00007432                            
00007432                            
00007432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007432                            ; not used
00007432                            
00007432                            
00007432                            sub_6C3C:
00007432 D86B 0004                  		add.w	4(a3),d4
00007436 DA53                       		add.w	(a3),d5
00007438 0244 00F0                  		andi.w	#$F0,d4
0000743C 0245 01F0                  		andi.w	#$1F0,d5
00007440 E94C                       		lsl.w	#4,d4
00007442 E44D                       		lsr.w	#2,d5
00007444 D845                       		add.w	d5,d4
00007446 7002                       		moveq	#2,d0
00007448 4840                       		swap	d0
0000744A 3004                       		move.w	d4,d0
0000744C 4E75                       		rts	
0000744E                            ; End of function sub_6C3C
0000744E                            
0000744E                            ; ---------------------------------------------------------------------------
0000744E                            ; Subroutine to	load tiles as soon as the level	appears
0000744E                            ; ---------------------------------------------------------------------------
0000744E                            
0000744E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000744E                            
0000744E                            
0000744E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000744E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007454 4DF9 00C0 0000             		lea	($C00000).l,a6
0000745A 47F8 F700                  		lea	($FFFFF700).w,a3
0000745E 49F8 A400                  		lea	($FFFFA400).w,a4
00007462 343C 4000                  		move.w	#$4000,d2
00007466 6100                       		bsr.s	LoadTilesFromStart2
00007468 47F8 F708                  		lea	($FFFFF708).w,a3
0000746C 49F8 A440                  		lea	($FFFFA440).w,a4
00007470 343C 6000                  		move.w	#$6000,d2
00007474                            ; End of function LoadTilesFromStart
00007474                            
00007474                            
00007474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007474                            
00007474                            
00007474                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007474 78F0                       		moveq	#-$10,d4
00007476 7C0F                       		moveq	#$F,d6
00007478                            
00007478                            loc_6C82:
00007478 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000747C 7A00                       		moveq	#0,d5
0000747E 3204                       		move.w	d4,d1
00007480 6100 FF94                  		bsr.w	sub_6C20
00007484 3801                       		move.w	d1,d4
00007486 7A00                       		moveq	#0,d5
00007488 7C1F                       		moveq	#$1F,d6
0000748A 6100 FE44                  		bsr.w	sub_6ADA
0000748E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007492 0644 0010                  		addi.w	#$10,d4
00007496 51CE FFE0                  		dbf	d6,loc_6C82
0000749A 4E75                       		rts	
0000749C                            ; End of function LoadTilesFromStart2
0000749C                            
0000749C                            ; ---------------------------------------------------------------------------
0000749C                            ; Main Load Block loading subroutine
0000749C                            ; ---------------------------------------------------------------------------
0000749C                            
0000749C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000749C                            
0000749C                            
0000749C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000749C 7000                       		moveq	#0,d0
0000749E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000074A2 E948                       		lsl.w	#4,d0
000074A4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000074AA 45F2 0000                  		lea	(a2,d0.w),a2
000074AE 2F0A                       		move.l	a2,-(sp)
000074B0 588A                       		addq.l	#4,a2
000074B2 205A                       		movea.l	(a2)+,a0
000074B4 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000074B8 303C 0000                  		move.w	#0,d0
000074BC 6100 A464                  		bsr.w	EniDec
000074C0 205A                       		movea.l	(a2)+,a0
000074C2 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000074C8 6100 A5D6                  		bsr.w	KosDec
000074CC 6100 0000                  		bsr.w	LevelLayoutLoad
000074D0 301A                       		move.w	(a2)+,d0
000074D2 3012                       		move.w	(a2),d0
000074D4 0240 00FF                  		andi.w	#$FF,d0
000074D8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000074DE 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000074E0 700C                       		moveq	#$C,d0		; use SB3 pallet
000074E2                            
000074E2                            MLB_ChkSBZPal:
000074E2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000074E8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074EA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074F0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074F2                            
000074F2                            MLB_UsePal0E:
000074F2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074F4                            
000074F4                            MLB_NormalPal:
000074F4 6100 ADD6                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074F8 245F                       		movea.l	(sp)+,a2
000074FA 584A                       		addq.w	#4,a2
000074FC 7000                       		moveq	#0,d0
000074FE 1012                       		move.b	(a2),d0
00007500 6700                       		beq.s	locret_6D10
00007502 6100 A280                  		bsr.w	LoadPLC		; load pattern load cues
00007506                            
00007506                            locret_6D10:
00007506 4E75                       		rts	
00007508                            ; End of function MainLoadBlockLoad
00007508                            
00007508                            ; ---------------------------------------------------------------------------
00007508                            ; Level	layout loading subroutine
00007508                            ; ---------------------------------------------------------------------------
00007508                            
00007508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007508                            
00007508                            
00007508                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007508 47F8 A400                  		lea	($FFFFA400).w,a3
0000750C 323C 01FF                  		move.w	#$1FF,d1
00007510 7000                       		moveq	#0,d0
00007512                            
00007512                            LevLoad_ClrRam:
00007512 26C0                       		move.l	d0,(a3)+
00007514 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007518                            
00007518 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000751C 7200                       		moveq	#0,d1
0000751E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007522 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007526 7202                       		moveq	#2,d1
00007528                            ; End of function LevelLayoutLoad
00007528                            
00007528                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007528                            
00007528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007528                            
00007528                            
00007528                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007528 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000752C ED08                       		lsl.b	#6,d0
0000752E EA48                       		lsr.w	#5,d0
00007530 3400                       		move.w	d0,d2
00007532 D040                       		add.w	d0,d0
00007534 D042                       		add.w	d2,d0
00007536 D041                       		add.w	d1,d0
00007538 43F9 0000 0000             		lea	(Level_Index).l,a1
0000753E 3031 0000                  		move.w	(a1,d0.w),d0
00007542 43F1 0000                  		lea	(a1,d0.w),a1
00007546 7200                       		moveq	#0,d1
00007548 3401                       		move.w	d1,d2
0000754A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000754C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000754E                            
0000754E                            LevLoad_NumRows:
0000754E 3001                       		move.w	d1,d0
00007550 204B                       		movea.l	a3,a0
00007552                            
00007552                            LevLoad_Row:
00007552 10D9                       		move.b	(a1)+,(a0)+
00007554 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007558 47EB 0080                  		lea	$80(a3),a3	; do next row
0000755C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007560 4E75                       		rts	
00007562                            ; End of function LevelLayoutLoad2
00007562                            
00007562                            ; ---------------------------------------------------------------------------
00007562                            ; Dynamic screen resize	loading	subroutine
00007562                            ; ---------------------------------------------------------------------------
00007562                            
00007562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007562                            
00007562                            
00007562                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007562 7000                       		moveq	#0,d0
00007564 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007568 D040                       		add.w	d0,d0
0000756A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000756E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007572 7202                       		moveq	#2,d1
00007574 3038 F726                  		move.w	($FFFFF726).w,d0
00007578 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000757C 6700                       		beq.s	locret_6DAA
0000757E 6400                       		bcc.s	loc_6DAC
00007580 4441                       		neg.w	d1
00007582 3038 F704                  		move.w	($FFFFF704).w,d0
00007586 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000758A 6300                       		bls.s	loc_6DA0
0000758C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007590 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007596                            
00007596                            loc_6DA0:
00007596 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000759A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000075A0                            
000075A0                            locret_6DAA:
000075A0 4E75                       		rts	
000075A2                            ; ===========================================================================
000075A2                            
000075A2                            loc_6DAC:				; XREF: DynScrResizeLoad
000075A2 3038 F704                  		move.w	($FFFFF704).w,d0
000075A6 5040                       		addq.w	#8,d0
000075A8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000075AC 6500                       		bcs.s	loc_6DC4
000075AE 0838 0001 D022             		btst	#1,($FFFFD022).w
000075B4 6700                       		beq.s	loc_6DC4
000075B6 D241                       		add.w	d1,d1
000075B8 D241                       		add.w	d1,d1
000075BA                            
000075BA                            loc_6DC4:
000075BA D378 F72E                  		add.w	d1,($FFFFF72E).w
000075BE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000075C4 4E75                       		rts	
000075C6                            ; End of function DynScrResizeLoad
000075C6                            
000075C6                            ; ===========================================================================
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            ; Offset index for dynamic screen resizing
000075C6                            ; ---------------------------------------------------------------------------
000075C6 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000075CA 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000075CE 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000075D2 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
000075D6                            ; ===========================================================================
000075D6                            ; ---------------------------------------------------------------------------
000075D6                            ; Green	Hill Zone dynamic screen resizing
000075D6                            ; ---------------------------------------------------------------------------
000075D6                            
000075D6                            Resize_GHZ:				; XREF: Resize_Index
000075D6 7000                       		moveq	#0,d0
000075D8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075DC D040                       		add.w	d0,d0
000075DE 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000075E2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000075E6                            ; ===========================================================================
000075E6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000075E8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075EA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075EC                            ; ===========================================================================
000075EC                            
000075EC                            Resize_GHZ1:
000075EC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075F2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075F8 6500                       		bcs.s	locret_6E08	; if not, branch
000075FA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007600                            
00007600                            locret_6E08:
00007600 4E75                       		rts	
00007602                            ; ===========================================================================
00007602                            
00007602                            Resize_GHZ2:
00007602 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007608 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000760E 6500                       		bcs.s	locret_6E3A
00007610 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007616 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000761C 6500                       		bcs.s	locret_6E3A
0000761E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007624 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
0000762A 6500                       		bcs.s	locret_6E3A
0000762C 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007632 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007638 6500                       		bcs.s	locret_6E3A
0000763A 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007640                            		
00007640                            locret_6E3A:
00007640 4E75                       		rts	
00007642                            ; ===========================================================================
00007642                            
00007642                            Resize_GHZ3:
00007642 7000                       		moveq	#0,d0
00007644 1038 F742                  		move.b	($FFFFF742).w,d0
00007648 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000764C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007650                            ; ===========================================================================
00007650 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007652 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007654 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007656                            ; ===========================================================================
00007656                            
00007656                            Resize_GHZ3main:
00007656 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000765C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007662 6500                       		bcs.s	locret_6E96
00007664 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000766A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007670 6500                       		bcs.s	locret_6E96
00007672 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007678 6500                       		bcs.s	loc_6E98
0000767A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007680 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007686 6400                       		bcc.s	loc_6E8E
00007688 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000768E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007694                            
00007694                            loc_6E8E:
00007694 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000769A 6400                       		bcc.s	loc_6E98
0000769C                            
0000769C                            locret_6E96:
0000769C 4E75                       		rts	
0000769E                            ; ===========================================================================
0000769E                            
0000769E                            loc_6E98:
0000769E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000076A4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A8 4E75                       		rts	
000076AA                            ; ===========================================================================
000076AA                            
000076AA                            Resize_GHZ3boss:
000076AA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000076B0 6400                       		bcc.s	loc_6EB0
000076B2 5538 F742                  		subq.b	#2,($FFFFF742).w
000076B6                            
000076B6                            loc_6EB0:
000076B6 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_6EE8
000076BE 6100 0000                  		bsr.w	SingleObjLoad
000076C2 6600                       		bne.s	loc_6ED0
000076C4 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000076C8 337C 2A60 0008             		move.w	#$2A60,8(a1)
000076CE 337C 0280 000C             		move.w	#$280,$C(a1)
000076D4                            
000076D4                            loc_6ED0:
000076D4 303C 008C                  		move.w	#$8C,d0
000076D8 6100 9EC0                  		bsr.w	PlaySound	; play boss music
000076DC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E6 7011                       		moveq	#$11,d0
000076E8 6000 A09A                  		bra.w	LoadPLC		; load boss patterns
000076EC                            ; ===========================================================================
000076EC                            
000076EC                            locret_6EE8:
000076EC 4E75                       		rts	
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            Resize_GHZ3end:
000076EE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076F4 4E75                       		rts	
000076F6                            ; ===========================================================================
000076F6                            ; ---------------------------------------------------------------------------
000076F6                            ; Labyrinth Zone dynamic screen	resizing
000076F6                            ; ---------------------------------------------------------------------------
000076F6                            
000076F6                            Resize_LZ:				; XREF: Resize_Index
000076F6 7000                       		moveq	#0,d0
000076F8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076FC D040                       		add.w	d0,d0
000076FE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007702 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007706                            ; ===========================================================================
00007706 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007708 0000                       		dc.w Resize_LZ12-Resize_LZx
0000770A 0000                       		dc.w Resize_LZ3-Resize_LZx
0000770C 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_LZ12:
0000770E 4E75                       		rts	
00007710                            ; ===========================================================================
00007710                            
00007710                            Resize_LZ3:
00007710 7000                       		moveq	#0,d0
00007712 1038 F742                  		move.b	($FFFFF742).w,d0
00007716 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000771A 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000771E                            ; ===========================================================================
0000771E                            off_6E4A2:	
0000771E 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007720 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007722                            ; ===========================================================================
00007722                            Resize_LZ3boss:
00007722 4A38 F742                  		tst.b	($FFFFF742).w
00007726 6600                       		bne.s	locret_6F62
00007728 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000772E 6500                       		bcs.s	locret_6F62
00007730 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007736 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000773C                            
0000773C 6100 0000                  		bsr.w	SingleObjLoad
00007740 6600                       		bne.s	loc_6F4A
00007742 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007746 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000774C 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007752                            loc_6F4A:
00007752 303C 008C                  		move.w	#$8C,d0
00007756 6100 9E42                  		bsr.w	PlaySound	; play boss music
0000775A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007760 5438 F742                  		addq.b	#2,($FFFFF742).w
00007764 7022                       		moveq	#$22,d0
00007766 6000 A01C                  		bra.w	LoadPLC		; load boss patterns
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            locret_6F62:
0000776A 4E75                       		rts	
0000776C                            ; ===========================================================================
0000776C                            
0000776C                            Resize_LZ3end:
0000776C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007772 4E75                       		rts	
00007774                            ; ===========================================================================
00007774                            
00007774                            Resize_SBZ3:
00007774 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000777A 6500                       		bcs.s	locret_6F8C
0000777C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007782 6400                       		bcc.s	locret_6F8C	; if not, branch
00007784 4238 FE30                  		clr.b	($FFFFFE30).w
00007788 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000778E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007794 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000779A                            
0000779A                            locret_6F8C:
0000779A 4E75                       		rts	
0000779C                            ; ===========================================================================
0000779C                            ; ---------------------------------------------------------------------------
0000779C                            ; Marble Zone dynamic screen resizing
0000779C                            ; ---------------------------------------------------------------------------
0000779C                            
0000779C                            Resize_MZ:				; XREF: Resize_Index
0000779C 7000                       		moveq	#0,d0
0000779E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077A2 D040                       		add.w	d0,d0
000077A4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000077A8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000077AC                            ; ===========================================================================
000077AC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000077AE 0000                       		dc.w Resize_MZ2-Resize_MZx
000077B0 0000                       		dc.w Resize_MZ3-Resize_MZx
000077B2                            ; ===========================================================================
000077B2                            
000077B2                            Resize_MZ1:
000077B2 7000                       		moveq	#0,d0
000077B4 1038 F742                  		move.b	($FFFFF742).w,d0
000077B8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000077BC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000077C0                            ; ===========================================================================
000077C0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000077C2 0000                       		dc.w loc_6FEA-off_6FB2
000077C4 0000                       		dc.w loc_702E-off_6FB2
000077C6 0000                       		dc.w loc_7050-off_6FB2
000077C8                            ; ===========================================================================
000077C8                            
000077C8                            loc_6FBA:
000077C8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000077CE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000077D4 6500                       		bcs.s	locret_6FE8
000077D6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000077DC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000077E2 6500                       		bcs.s	locret_6FE8
000077E4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077EA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077F0 6500                       		bcs.s	locret_6FE8
000077F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F6                            
000077F6                            locret_6FE8:
000077F6 4E75                       		rts	
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            loc_6FEA:
000077F8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077FE 6400                       		bcc.s	loc_6FF8
00007800 5538 F742                  		subq.b	#2,($FFFFF742).w
00007804 4E75                       		rts	
00007806                            ; ===========================================================================
00007806                            
00007806                            loc_6FF8:
00007806 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000780C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007812 6400                       		bcc.s	locret_702C
00007814 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000781A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007820 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007826 6400                       		bcc.s	locret_702C
00007828 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000782E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007834 6500                       		bcs.s	locret_702C
00007836 5438 F742                  		addq.b	#2,($FFFFF742).w
0000783A                            
0000783A                            locret_702C:
0000783A 4E75                       		rts	
0000783C                            ; ===========================================================================
0000783C                            
0000783C                            loc_702E:
0000783C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007842 6400                       		bcc.s	loc_703C
00007844 5538 F742                  		subq.b	#2,($FFFFF742).w
00007848 4E75                       		rts	
0000784A                            ; ===========================================================================
0000784A                            
0000784A                            loc_703C:
0000784A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007850 6500                       		bcs.s	locret_704E
00007852 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007858 5438 F742                  		addq.b	#2,($FFFFF742).w
0000785C                            
0000785C                            locret_704E:
0000785C 4E75                       		rts	
0000785E                            ; ===========================================================================
0000785E                            
0000785E                            loc_7050:
0000785E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007864 6500                       		bcs.s	locret_7072
00007866 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000786C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007872 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007878 6500                       		bcs.s	locret_7072
0000787A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007880                            
00007880                            locret_7072:
00007880 4E75                       		rts	
00007882                            ; ===========================================================================
00007882                            
00007882                            Resize_MZ2:
00007882 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007888 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000788E 6500                       		bcs.s	locret_7088
00007890 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007896                            
00007896                            locret_7088:
00007896 4E75                       		rts	
00007898                            ; ===========================================================================
00007898                            
00007898                            Resize_MZ3:
00007898 7000                       		moveq	#0,d0
0000789A 1038 F742                  		move.b	($FFFFF742).w,d0
0000789E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000078A2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000078A6                            ; ===========================================================================
000078A6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000078A8 0000                       		dc.w Resize_MZ3end-off_7098
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            Resize_MZ3boss:
000078AA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000078B0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000078B6 6500                       		bcs.s	locret_70E8
000078B8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078BE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000078C4 6500                       		bcs.s	locret_70E8
000078C6 6100 0000                  		bsr.w	SingleObjLoad
000078CA 6600                       		bne.s	loc_70D0
000078CC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000078D0 337C 19F0 0008             		move.w	#$19F0,8(a1)
000078D6 337C 022C 000C             		move.w	#$22C,$C(a1)
000078DC                            
000078DC                            loc_70D0:
000078DC 303C 008C                  		move.w	#$8C,d0
000078E0 6100 9CB8                  		bsr.w	PlaySound	; play boss music
000078E4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078EA 5438 F742                  		addq.b	#2,($FFFFF742).w
000078EE 7011                       		moveq	#$11,d0
000078F0 6000 9E92                  		bra.w	LoadPLC		; load boss patterns
000078F4                            ; ===========================================================================
000078F4                            
000078F4                            locret_70E8:
000078F4 4E75                       		rts	
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Resize_MZ3end:
000078F6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078FC 4E75                       		rts	
000078FE                            ; ===========================================================================
000078FE                            ; ---------------------------------------------------------------------------
000078FE                            ; Star Light Zone dynamic screen resizing
000078FE                            ; ---------------------------------------------------------------------------
000078FE                            
000078FE                            Resize_SLZ:				; XREF: Resize_Index
000078FE 7000                       		moveq	#0,d0
00007900 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007904 D040                       		add.w	d0,d0
00007906 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000790A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000790E                            ; ===========================================================================
0000790E 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007910 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007912 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007914                            ; ===========================================================================
00007914                            
00007914                            Resize_SLZ1:
00007914 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000791A 4E75                       		rts	
0000791C                            
0000791C                            Resize_SLZ2:
0000791C 4E75                       		rts	
0000791E                            ; ===========================================================================
0000791E                            
0000791E                            Resize_SLZ3:
0000791E 7000                       		moveq	#0,d0
00007920 1038 F742                  		move.b	($FFFFF742).w,d0
00007924 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007928 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000792C                            ; ===========================================================================
0000792C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000792E 0000                       		dc.w Resize_SLZ3boss-off_7118
00007930 0000                       		dc.w Resize_SLZ3end-off_7118
00007932                            ; ===========================================================================
00007932                            
00007932                            Resize_SLZ3main:
00007932 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007938 6500                       		bcs.s	locret_7130
0000793A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007940 5438 F742                  		addq.b	#2,($FFFFF742).w
00007944                            
00007944                            locret_7130:
00007944 4E75                       		rts	
00007946                            ; ===========================================================================
00007946                            
00007946                            Resize_SLZ3boss:
00007946 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000794C 6500                       		bcs.s	locret_715C
0000794E 6100 0000                  		bsr.w	SingleObjLoad
00007952 6600                       		bne.s	loc_7144
00007954 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007958                            
00007958                            loc_7144:
00007958 303C 008C                  		move.w	#$8C,d0
0000795C 6100 9C3C                  		bsr.w	PlaySound	; play boss music
00007960 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007966 5438 F742                  		addq.b	#2,($FFFFF742).w
0000796A 7011                       		moveq	#$11,d0
0000796C 6000 9E16                  		bra.w	LoadPLC		; load boss patterns
00007970                            ; ===========================================================================
00007970                            
00007970                            locret_715C:
00007970 4E75                       		rts	
00007972                            ; ===========================================================================
00007972                            
00007972                            Resize_SLZ3end:
00007972 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007978 4E75                       		rts
0000797A 4E75                       		rts
0000797C                            ; ===========================================================================
0000797C                            ; ---------------------------------------------------------------------------
0000797C                            ; Spring Yard Zone dynamic screen resizing
0000797C                            ; ---------------------------------------------------------------------------
0000797C                            
0000797C                            Resize_SYZ:				; XREF: Resize_Index
0000797C 7000                       		moveq	#0,d0
0000797E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007982 D040                       		add.w	d0,d0
00007984 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007988 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000798C                            ; ===========================================================================
0000798C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000798E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007990 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007992                            ; ===========================================================================
00007992                            
00007992                            Resize_SYZ1:
00007992 4E75                       		rts	
00007994                            ; ===========================================================================
00007994                            
00007994                            Resize_SYZ2:
00007994 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000799A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000079A0 6500                       		bcs.s	locret_71A2
000079A2 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000079A8 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000079AE 6500                       		bcs.s	locret_71A2
000079B0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000079B6                            
000079B6                            locret_71A2:
000079B6 4E75                       		rts	
000079B8                            ; ===========================================================================
000079B8                            
000079B8                            Resize_SYZ3:
000079B8 7000                       		moveq	#0,d0
000079BA 1038 F742                  		move.b	($FFFFF742).w,d0
000079BE 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000079C2 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000079C6                            ; ===========================================================================
000079C6 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000079C8 0000                       		dc.w Resize_SYZ3boss-off_71B2
000079CA 0000                       		dc.w Resize_SYZ3end-off_71B2
000079CC                            ; ===========================================================================
000079CC                            
000079CC                            Resize_SYZ3main:
000079CC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000079D2 6500                       		bcs.s	locret_71CE
000079D4 6100 0000                  		bsr.w	SingleObjLoad
000079D8 6600                       		bne.s	locret_71CE
000079DA 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000079DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000079E2                            
000079E2                            locret_71CE:
000079E2 4E75                       		rts	
000079E4                            ; ===========================================================================
000079E4                            
000079E4                            Resize_SYZ3boss:
000079E4 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079EA 6500                       		bcs.s	locret_7200
000079EC 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079F2 6100 0000                  		bsr.w	SingleObjLoad
000079F6 6600                       		bne.s	loc_71EC
000079F8 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079FC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A00                            
00007A00                            loc_71EC:
00007A00 303C 008C                  		move.w	#$8C,d0
00007A04 6100 9B94                  		bsr.w	PlaySound	; play boss music
00007A08 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A0E 7011                       		moveq	#$11,d0
00007A10 6000 9D72                  		bra.w	LoadPLC		; load boss patterns
00007A14                            ; ===========================================================================
00007A14                            
00007A14                            locret_7200:
00007A14 4E75                       		rts	
00007A16                            ; ===========================================================================
00007A16                            
00007A16                            Resize_SYZ3end:
00007A16 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A1C 4E75                       		rts	
00007A1E                            ; ===========================================================================
00007A1E                            ; ---------------------------------------------------------------------------
00007A1E                            ; Scrap	Brain Zone dynamic screen resizing
00007A1E                            ; ---------------------------------------------------------------------------
00007A1E                            
00007A1E                            Resize_SBZ:				; XREF: Resize_Index
00007A1E 7000                       		moveq	#0,d0
00007A20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A24 D040                       		add.w	d0,d0
00007A26 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007A2A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007A2E                            ; ===========================================================================
00007A2E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007A30 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007A32 0000                       		dc.w Resize_FZ-Resize_SBZx
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            Resize_SBZ1:
00007A34 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007A3A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007A40 6500                       		bcs.s	locret_7242
00007A42 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007A48 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A4E 6500                       		bcs.s	locret_7242
00007A50 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A56                            
00007A56                            locret_7242:
00007A56 4E75                       		rts	
00007A58                            ; ===========================================================================
00007A58                            
00007A58                            Resize_SBZ2:
00007A58 7000                       		moveq	#0,d0
00007A5A 1038 F742                  		move.b	($FFFFF742).w,d0
00007A5E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A62 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A66                            ; ===========================================================================
00007A66 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A68 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A6A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A6C 0000                       		dc.w Resize_SBZ2end-off_7252
00007A6E                            ; ===========================================================================
00007A6E                            
00007A6E                            Resize_SBZ2main:
00007A6E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A74 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A7A 6500                       		bcs.s	locret_727A
00007A7C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A82 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A88 6500                       		bcs.s	locret_727A
00007A8A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A8E                            
00007A8E                            locret_727A:
00007A8E 4E75                       		rts	
00007A90                            ; ===========================================================================
00007A90                            
00007A90                            Resize_SBZ2boss:
00007A90 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A96 6500                       		bcs.s	locret_7298
00007A98 6100 0000                  		bsr.w	SingleObjLoad
00007A9C 6600                       		bne.s	locret_7298
00007A9E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007AA2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AA6 701E                       		moveq	#$1E,d0
00007AA8 6000 9CDA                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007AAC                            ; ===========================================================================
00007AAC                            
00007AAC                            locret_7298:
00007AAC 4E75                       		rts	
00007AAE                            ; ===========================================================================
00007AAE                            
00007AAE                            Resize_SBZ2boss2:
00007AAE 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007AB4 6500                       		bcs.s	loc_72B6
00007AB6 6100 0000                  		bsr.w	SingleObjLoad
00007ABA 6600                       		bne.s	loc_72B0
00007ABC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007AC0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AC4                            
00007AC4                            loc_72B0:
00007AC4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007ACA                            
00007ACA                            loc_72B6:
00007ACA 6000                       		bra.s	loc_72C2
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            Resize_SBZ2end:
00007ACC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007AD2 6500                       		bcs.s	loc_72C2
00007AD4 4E75                       		rts	
00007AD6                            ; ===========================================================================
00007AD6                            
00007AD6                            loc_72C2:
00007AD6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007ADC 4E75                       		rts	
00007ADE                            ; ===========================================================================
00007ADE                            
00007ADE                            Resize_FZ:
00007ADE 7000                       		moveq	#0,d0
00007AE0 1038 F742                  		move.b	($FFFFF742).w,d0
00007AE4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007AE8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007AEC                            ; ===========================================================================
00007AEC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AF0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AF4 0000                       		dc.w Resize_FZend2-off_72D8
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            Resize_FZmain:
00007AF6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AFC 6500                       		bcs.s	loc_72F4
00007AFE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B02 701F                       		moveq	#$1F,d0
00007B04 6100 9C7E                  		bsr.w	LoadPLC		; load FZ boss patterns
00007B08                            
00007B08                            loc_72F4:
00007B08 60CC                       		bra.s	loc_72C2
00007B0A                            ; ===========================================================================
00007B0A                            
00007B0A                            Resize_FZboss:
00007B0A 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007B10 6500                       		bcs.s	loc_7312
00007B12 6100 0000                  		bsr.w	SingleObjLoad
00007B16 6600                       		bne.s	loc_7312
00007B18 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007B1C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B20 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B26                            
00007B26                            loc_7312:
00007B26 60AE                       		bra.s	loc_72C2
00007B28                            ; ===========================================================================
00007B28                            
00007B28                            Resize_FZend:
00007B28 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007B2E 6500                       		bcs.s	loc_7320
00007B30 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B34                            
00007B34                            loc_7320:
00007B34 60A0                       		bra.s	loc_72C2
00007B36                            ; ===========================================================================
00007B36                            
00007B36                            locret_7322:
00007B36 4E75                       		rts	
00007B38                            ; ===========================================================================
00007B38                            
00007B38                            Resize_FZend2:
00007B38 609C                       		bra.s	loc_72C2
00007B3A                            ; ===========================================================================
00007B3A                            ; ---------------------------------------------------------------------------
00007B3A                            ; Ending sequence dynamic screen resizing (empty)
00007B3A                            ; ---------------------------------------------------------------------------
00007B3A                            
00007B3A                            Resize_Ending:				; XREF: Resize_Index
00007B3A 4E75                       		rts	
00007B3C                            ; ===========================================================================
00007B3C                            ; ---------------------------------------------------------------------------
00007B3C                            ; Object 11 - GHZ bridge
00007B3C                            ; ---------------------------------------------------------------------------
00007B3C                            
00007B3C                            Obj11:					; XREF: Obj_Index
00007B3C 7000                       		moveq	#0,d0
00007B3E 1028 0024                  		move.b	$24(a0),d0
00007B42 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007B46 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B4A                            ; ===========================================================================
00007B4A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B4E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B52 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B56                            ; ===========================================================================
00007B56                            
00007B56                            Obj11_Main:				; XREF: Obj11_Index
00007B56 5428 0024                  		addq.b	#2,$24(a0)
00007B5A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B62 317C 438E 0002             		move.w	#$438E,2(a0)
00007B68 117C 0004 0001             		move.b	#4,1(a0)
00007B6E 117C 0003 0018             		move.b	#3,$18(a0)
00007B74 117C 0080 0019             		move.b	#$80,$19(a0)
00007B7A 3428 000C                  		move.w	$C(a0),d2
00007B7E 3628 0008                  		move.w	8(a0),d3
00007B82 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B84 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B88 7200                       		moveq	#0,d1
00007B8A 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B8C 14FC 0000                  		move.b	#0,(a2)+
00007B90 3001                       		move.w	d1,d0
00007B92 E248                       		lsr.w	#1,d0
00007B94 E948                       		lsl.w	#4,d0
00007B96 9640                       		sub.w	d0,d3
00007B98 5501                       		subq.b	#2,d1
00007B9A 6500                       		bcs.s	Obj11_Action
00007B9C                            
00007B9C                            Obj11_MakeBdg:
00007B9C 6100 0000                  		bsr.w	SingleObjLoad
00007BA0 6600                       		bne.s	Obj11_Action
00007BA2 5228 0028                  		addq.b	#1,$28(a0)
00007BA6 B668 0008                  		cmp.w	8(a0),d3
00007BAA 6600                       		bne.s	loc_73B8
00007BAC 0643 0010                  		addi.w	#$10,d3
00007BB0 3142 000C                  		move.w	d2,$C(a0)
00007BB4 3142 003C                  		move.w	d2,$3C(a0)
00007BB8 3A08                       		move.w	a0,d5
00007BBA 0445 D000                  		subi.w	#-$3000,d5
00007BBE EC4D                       		lsr.w	#6,d5
00007BC0 0245 007F                  		andi.w	#$7F,d5
00007BC4 14C5                       		move.b	d5,(a2)+
00007BC6 5228 0028                  		addq.b	#1,$28(a0)
00007BCA                            
00007BCA                            loc_73B8:				; XREF: ROM:00007398j
00007BCA 3A09                       		move.w	a1,d5
00007BCC 0445 D000                  		subi.w	#-$3000,d5
00007BD0 EC4D                       		lsr.w	#6,d5
00007BD2 0245 007F                  		andi.w	#$7F,d5
00007BD6 14C5                       		move.b	d5,(a2)+
00007BD8 137C 000A 0024             		move.b	#$A,$24(a1)
00007BDE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007BE0 3342 000C                  		move.w	d2,$C(a1)
00007BE4 3342 003C                  		move.w	d2,$3C(a1)
00007BE8 3343 0008                  		move.w	d3,8(a1)
00007BEC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BF4 337C 438E 0002             		move.w	#$438E,2(a1)
00007BFA 137C 0004 0001             		move.b	#4,1(a1)
00007C00 137C 0003 0018             		move.b	#3,$18(a1)
00007C06 137C 0008 0019             		move.b	#8,$19(a1)
00007C0C 0643 0010                  		addi.w	#$10,d3
00007C10 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007C14                            
00007C14                            Obj11_Action:				; XREF: Obj11_Index
00007C14 6100                       		bsr.s	Obj11_Solid
00007C16 4A28 003E                  		tst.b	$3E(a0)
00007C1A 6700                       		beq.s	Obj11_Display
00007C1C 5928 003E                  		subq.b	#4,$3E(a0)
00007C20 6100 0000                  		bsr.w	Obj11_Bend
00007C24                            
00007C24                            Obj11_Display:
00007C24 6100 0000                  		bsr.w	DisplaySprite
00007C28 6000 0000                  		bra.w	Obj11_ChkDel
00007C2C                            
00007C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C2C                            
00007C2C                            
00007C2C                            Obj11_Solid:				; XREF: Obj11_Action
00007C2C 7200                       		moveq	#0,d1
00007C2E 1228 0028                  		move.b	$28(a0),d1
00007C32 E749                       		lsl.w	#3,d1
00007C34 3401                       		move.w	d1,d2
00007C36 5041                       		addq.w	#8,d1
00007C38 D442                       		add.w	d2,d2
00007C3A 43F8 D000                  		lea	($FFFFD000).w,a1
00007C3E 4A69 0012                  		tst.w	$12(a1)
00007C42 6B00 0000                  		bmi.w	locret_751E
00007C46 3029 0008                  		move.w	8(a1),d0
00007C4A 9068 0008                  		sub.w	8(a0),d0
00007C4E D041                       		add.w	d1,d0
00007C50 6B00 0000                  		bmi.w	locret_751E
00007C54 B042                       		cmp.w	d2,d0
00007C56 6400 0000                  		bcc.w	locret_751E
00007C5A 6000                       		bra.s	Platform2
00007C5C                            ; End of function Obj11_Solid
00007C5C                            
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            ; Platform subroutine
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            
00007C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C5C                            
00007C5C                            
00007C5C                            PlatformObject:
00007C5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007C60 4A69 0012                  		tst.w	$12(a1)
00007C64 6B00 0000                  		bmi.w	locret_751E
00007C68 3029 0008                  		move.w	8(a1),d0
00007C6C 9068 0008                  		sub.w	8(a0),d0
00007C70 D041                       		add.w	d1,d0
00007C72 6B00 0000                  		bmi.w	locret_751E
00007C76 D241                       		add.w	d1,d1
00007C78 B041                       		cmp.w	d1,d0
00007C7A 6400 0000                  		bcc.w	locret_751E
00007C7E                            
00007C7E                            Platform2:
00007C7E 3028 000C                  		move.w	$C(a0),d0
00007C82 5140                       		subq.w	#8,d0
00007C84                            
00007C84                            Platform3:
00007C84 3429 000C                  		move.w	$C(a1),d2
00007C88 1229 0016                  		move.b	$16(a1),d1
00007C8C 4881                       		ext.w	d1
00007C8E D242                       		add.w	d2,d1
00007C90 5841                       		addq.w	#4,d1
00007C92 9041                       		sub.w	d1,d0
00007C94 6200 0000                  		bhi.w	locret_751E
00007C98 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C9C 6500 0000                  		bcs.w	locret_751E
00007CA0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007CA4 6B00 0000                  		bmi.w	locret_751E
00007CA8 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007CAE 6400 0000                  		bcc.w	locret_751E
00007CB2 D440                       		add.w	d0,d2
00007CB4 5642                       		addq.w	#3,d2
00007CB6 3342 000C                  		move.w	d2,$C(a1)
00007CBA 5428 0024                  		addq.b	#2,$24(a0)
00007CBE                            
00007CBE                            loc_74AE:
00007CBE 0829 0003 0022             		btst	#3,$22(a1)
00007CC4 6700                       		beq.s	loc_74DC
00007CC6 7000                       		moveq	#0,d0
00007CC8 1029 003D                  		move.b	$3D(a1),d0
00007CCC ED48                       		lsl.w	#6,d0
00007CCE 0680 00FF D000             		addi.l	#$FFD000,d0
00007CD4 2440                       		movea.l	d0,a2
00007CD6 08AA 0003 0022             		bclr	#3,$22(a2)
00007CDC 422A 0025                  		clr.b	$25(a2)
00007CE0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007CE6 6600                       		bne.s	loc_74DC
00007CE8 552A 0024                  		subq.b	#2,$24(a2)
00007CEC                            
00007CEC                            loc_74DC:
00007CEC 3008                       		move.w	a0,d0
00007CEE 0440 D000                  		subi.w	#-$3000,d0
00007CF2 EC48                       		lsr.w	#6,d0
00007CF4 0240 007F                  		andi.w	#$7F,d0
00007CF8 1340 003D                  		move.b	d0,$3D(a1)
00007CFC 137C 0000 0026             		move.b	#0,$26(a1)
00007D02 337C 0000 0012             		move.w	#0,$12(a1)
00007D08 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007D0E 0829 0001 0022             		btst	#1,$22(a1)
00007D14 6700                       		beq.s	loc_7512
00007D16 2F08                       		move.l	a0,-(sp)
00007D18 2049                       		movea.l	a1,a0
00007D1A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007D20 205F                       		movea.l	(sp)+,a0
00007D22                            
00007D22                            loc_7512:
00007D22 08E9 0003 0022             		bset	#3,$22(a1)
00007D28 08E8 0003 0022             		bset	#3,$22(a0)
00007D2E                            
00007D2E                            locret_751E:
00007D2E 4E75                       		rts	
00007D30                            ; End of function PlatformObject
00007D30                            
00007D30                            ; ---------------------------------------------------------------------------
00007D30                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007D30                            ; ---------------------------------------------------------------------------
00007D30                            
00007D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D30                            
00007D30                            
00007D30                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007D30 43F8 D000                  		lea	($FFFFD000).w,a1
00007D34 4A69 0012                  		tst.w	$12(a1)
00007D38 6B00 FFF4                  		bmi.w	locret_751E
00007D3C 3029 0008                  		move.w	8(a1),d0
00007D40 9068 0008                  		sub.w	8(a0),d0
00007D44 D041                       		add.w	d1,d0
00007D46 6BE6                       		bmi.s	locret_751E
00007D48 D241                       		add.w	d1,d1
00007D4A B041                       		cmp.w	d1,d0
00007D4C 64E0                       		bcc.s	locret_751E
00007D4E 0828 0000 0001             		btst	#0,1(a0)
00007D54 6700                       		beq.s	loc_754A
00007D56 4640                       		not.w	d0
00007D58 D041                       		add.w	d1,d0
00007D5A                            
00007D5A                            loc_754A:
00007D5A E248                       		lsr.w	#1,d0
00007D5C 7600                       		moveq	#0,d3
00007D5E 1632 0000                  		move.b	(a2,d0.w),d3
00007D62 3028 000C                  		move.w	$C(a0),d0
00007D66 9043                       		sub.w	d3,d0
00007D68 6000 FF1A                  		bra.w	Platform3
00007D6C                            ; End of function SlopeObject
00007D6C                            
00007D6C                            
00007D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D6C                            
00007D6C                            
00007D6C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D6C 43F8 D000                  		lea	($FFFFD000).w,a1
00007D70 4A69 0012                  		tst.w	$12(a1)
00007D74 6B00 FFB8                  		bmi.w	locret_751E
00007D78 3029 0008                  		move.w	8(a1),d0
00007D7C 9068 0008                  		sub.w	8(a0),d0
00007D80 D041                       		add.w	d1,d0
00007D82 6B00 FFAA                  		bmi.w	locret_751E
00007D86 D241                       		add.w	d1,d1
00007D88 B041                       		cmp.w	d1,d0
00007D8A 6400 FFA2                  		bcc.w	locret_751E
00007D8E 3028 000C                  		move.w	$C(a0),d0
00007D92 9043                       		sub.w	d3,d0
00007D94 6000 FEEE                  		bra.w	Platform3
00007D98                            ; End of function Obj15_Solid
00007D98                            
00007D98                            ; ===========================================================================
00007D98                            
00007D98                            Obj11_Action2:				; XREF: Obj11_Index
00007D98 6100                       		bsr.s	Obj11_WalkOff
00007D9A 6100 0000                  		bsr.w	DisplaySprite
00007D9E 6000 0000                  		bra.w	Obj11_ChkDel
00007DA2                            
00007DA2                            ; ---------------------------------------------------------------------------
00007DA2                            ; Subroutine allowing Sonic to walk off a bridge
00007DA2                            ; ---------------------------------------------------------------------------
00007DA2                            
00007DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DA2                            
00007DA2                            
00007DA2                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007DA2 7200                       		moveq	#0,d1
00007DA4 1228 0028                  		move.b	$28(a0),d1
00007DA8 E749                       		lsl.w	#3,d1
00007DAA 3401                       		move.w	d1,d2
00007DAC 5041                       		addq.w	#8,d1
00007DAE 6100                       		bsr.s	ExitPlatform2
00007DB0 6400                       		bcc.s	locret_75BE
00007DB2 E848                       		lsr.w	#4,d0
00007DB4 1140 003F                  		move.b	d0,$3F(a0)
00007DB8 1028 003E                  		move.b	$3E(a0),d0
00007DBC 0C00 0040                  		cmpi.b	#$40,d0
00007DC0 6700                       		beq.s	loc_75B6
00007DC2 5828 003E                  		addq.b	#4,$3E(a0)
00007DC6                            
00007DC6                            loc_75B6:
00007DC6 6100 0000                  		bsr.w	Obj11_Bend
00007DCA 6100 0000                  		bsr.w	Obj11_MoveSonic
00007DCE                            
00007DCE                            locret_75BE:
00007DCE 4E75                       		rts	
00007DD0                            ; End of function Obj11_WalkOff
00007DD0                            
00007DD0                            ; ---------------------------------------------------------------------------
00007DD0                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007DD0                            ; ---------------------------------------------------------------------------
00007DD0                            
00007DD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DD0                            
00007DD0                            
00007DD0                            ExitPlatform:
00007DD0 3401                       		move.w	d1,d2
00007DD2                            
00007DD2                            ExitPlatform2:
00007DD2 D442                       		add.w	d2,d2
00007DD4 43F8 D000                  		lea	($FFFFD000).w,a1
00007DD8 0829 0001 0022             		btst	#1,$22(a1)
00007DDE 6600                       		bne.s	loc_75E0
00007DE0 3029 0008                  		move.w	8(a1),d0
00007DE4 9068 0008                  		sub.w	8(a0),d0
00007DE8 D041                       		add.w	d1,d0
00007DEA 6B00                       		bmi.s	loc_75E0
00007DEC B042                       		cmp.w	d2,d0
00007DEE 6500                       		bcs.s	locret_75F2
00007DF0                            
00007DF0                            loc_75E0:
00007DF0 08A9 0003 0022             		bclr	#3,$22(a1)
00007DF6 117C 0002 0024             		move.b	#2,$24(a0)
00007DFC 08A8 0003 0022             		bclr	#3,$22(a0)
00007E02                            
00007E02                            locret_75F2:
00007E02 4E75                       		rts	
00007E04                            ; End of function ExitPlatform
00007E04                            
00007E04                            
00007E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E04                            
00007E04                            
00007E04                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007E04 7000                       		moveq	#0,d0
00007E06 1028 003F                  		move.b	$3F(a0),d0
00007E0A 1030 0029                  		move.b	$29(a0,d0.w),d0
00007E0E ED48                       		lsl.w	#6,d0
00007E10 0680 00FF D000             		addi.l	#$FFD000,d0
00007E16 2440                       		movea.l	d0,a2
00007E18 43F8 D000                  		lea	($FFFFD000).w,a1
00007E1C 302A 000C                  		move.w	$C(a2),d0
00007E20 5140                       		subq.w	#8,d0
00007E22 7200                       		moveq	#0,d1
00007E24 1229 0016                  		move.b	$16(a1),d1
00007E28 9041                       		sub.w	d1,d0
00007E2A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007E2E 4E75                       		rts	
00007E30                            ; End of function Obj11_MoveSonic
00007E30                            
00007E30                            
00007E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E30                            
00007E30                            
00007E30                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007E30 1028 003E                  		move.b	$3E(a0),d0
00007E34 6100 AF04                  		bsr.w	CalcSine
00007E38 3800                       		move.w	d0,d4
00007E3A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007E40 7000                       		moveq	#0,d0
00007E42 1028 0028                  		move.b	$28(a0),d0
00007E46 E948                       		lsl.w	#4,d0
00007E48 7600                       		moveq	#0,d3
00007E4A 1628 003F                  		move.b	$3F(a0),d3
00007E4E 3403                       		move.w	d3,d2
00007E50 D640                       		add.w	d0,d3
00007E52 7A00                       		moveq	#0,d5
00007E54 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E5A 1A35 3000                  		move.b	(a5,d3.w),d5
00007E5E 0243 000F                  		andi.w	#$F,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 47F4 3000                  		lea	(a4,d3.w),a3
00007E68 45E8 0029                  		lea	$29(a0),a2
00007E6C                            
00007E6C                            loc_765C:
00007E6C 7000                       		moveq	#0,d0
00007E6E 101A                       		move.b	(a2)+,d0
00007E70 ED48                       		lsl.w	#6,d0
00007E72 0680 00FF D000             		addi.l	#$FFD000,d0
00007E78 2240                       		movea.l	d0,a1
00007E7A 7000                       		moveq	#0,d0
00007E7C 101B                       		move.b	(a3)+,d0
00007E7E 5240                       		addq.w	#1,d0
00007E80 C0C5                       		mulu.w	d5,d0
00007E82 C0C4                       		mulu.w	d4,d0
00007E84 4840                       		swap	d0
00007E86 D069 003C                  		add.w	$3C(a1),d0
00007E8A 3340 000C                  		move.w	d0,$C(a1)
00007E8E 51CA FFDC                  		dbf	d2,loc_765C
00007E92 7000                       		moveq	#0,d0
00007E94 1028 0028                  		move.b	$28(a0),d0
00007E98 7600                       		moveq	#0,d3
00007E9A 1628 003F                  		move.b	$3F(a0),d3
00007E9E 5203                       		addq.b	#1,d3
00007EA0 9600                       		sub.b	d0,d3
00007EA2 4403                       		neg.b	d3
00007EA4 6B00                       		bmi.s	locret_76CA
00007EA6 3403                       		move.w	d3,d2
00007EA8 E94B                       		lsl.w	#4,d3
00007EAA 47F4 3000                  		lea	(a4,d3.w),a3
00007EAE D6C2                       		adda.w	d2,a3
00007EB0 5342                       		subq.w	#1,d2
00007EB2 6500                       		bcs.s	locret_76CA
00007EB4                            
00007EB4                            loc_76A4:
00007EB4 7000                       		moveq	#0,d0
00007EB6 101A                       		move.b	(a2)+,d0
00007EB8 ED48                       		lsl.w	#6,d0
00007EBA 0680 00FF D000             		addi.l	#$FFD000,d0
00007EC0 2240                       		movea.l	d0,a1
00007EC2 7000                       		moveq	#0,d0
00007EC4 1023                       		move.b	-(a3),d0
00007EC6 5240                       		addq.w	#1,d0
00007EC8 C0C5                       		mulu.w	d5,d0
00007ECA C0C4                       		mulu.w	d4,d0
00007ECC 4840                       		swap	d0
00007ECE D069 003C                  		add.w	$3C(a1),d0
00007ED2 3340 000C                  		move.w	d0,$C(a1)
00007ED6 51CA FFDC                  		dbf	d2,loc_76A4
00007EDA                            
00007EDA                            locret_76CA:
00007EDA 4E75                       		rts	
00007EDC                            ; End of function Obj11_Bend
00007EDC                            
00007EDC                            ; ===========================================================================
00007EDC                            ; ---------------------------------------------------------------------------
00007EDC                            ; GHZ bridge-bending data
00007EDC                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007EDC                            ; ---------------------------------------------------------------------------
00007EDC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FEC                            		even
00007FEC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080EC                            		even
000080EC                            
000080EC                            ; ===========================================================================
000080EC                            
000080EC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080EC 3028 0008                  		move.w	8(a0),d0
000080F0 0240 FF80                  		andi.w	#$FF80,d0
000080F4 3238 F700                  		move.w	($FFFFF700).w,d1
000080F8 0441 0080                  		subi.w	#$80,d1
000080FC 0241 FF80                  		andi.w	#$FF80,d1
00008100 9041                       		sub.w	d1,d0
00008102 0C40 0280                  		cmpi.w	#$280,d0
00008106 6200 0000                  		bhi.w	Obj11_DelAll
0000810A 4E75                       		rts	
0000810C                            ; ===========================================================================
0000810C                            
0000810C                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000810C 7400                       		moveq	#0,d2
0000810E 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008112 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008114 5302                       		subq.b	#1,d2		; subtract 1
00008116 6500                       		bcs.s	Obj11_Delete
00008118                            
00008118                            Obj11_DelLoop:
00008118 7000                       		moveq	#0,d0
0000811A 101A                       		move.b	(a2)+,d0
0000811C ED48                       		lsl.w	#6,d0
0000811E 0680 00FF D000             		addi.l	#$FFD000,d0
00008124 2240                       		movea.l	d0,a1
00008126 B048                       		cmp.w	a0,d0
00008128 6700                       		beq.s	loc_791E
0000812A 6100 0000                  		bsr.w	DeleteObject2
0000812E                            
0000812E                            loc_791E:
0000812E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008132                            
00008132                            Obj11_Delete:
00008132 6100 0000                  		bsr.w	DeleteObject
00008136 4E75                       		rts	
00008138                            ; ===========================================================================
00008138                            
00008138                            Obj11_Delete2:				; XREF: Obj11_Index
00008138 6100 0000                  		bsr.w	DeleteObject
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            
0000813E                            Obj11_Display2:				; XREF: Obj11_Index
0000813E 6100 0000                  		bsr.w	DisplaySprite
00008142 4E75                       		rts	
00008144                            ; ===========================================================================
00008144                            ; ---------------------------------------------------------------------------
00008144                            ; Sprite mappings - GHZ	bridge
00008144                            ; ---------------------------------------------------------------------------
00008144                            Map_obj11:
00008144                            	include "_maps\obj11.asm"
00008144                            ; ---------------------------------------------------------------------------
00008144                            ; Sprite mappings - GHZ	bridge
00008144                            ; ---------------------------------------------------------------------------
00008144 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008148 0000                       		dc.w byte_794B-Map_obj11
0000814A 01                         byte_793A:	dc.b 1
0000814B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008150 02                         byte_7940:	dc.b 2
00008151 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008156 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000815B 01                         byte_794B:	dc.b 1
0000815C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008162 00                         		even
00008162 00                         		even
00008162                            
00008162                            ; ===========================================================================
00008162                            ; ---------------------------------------------------------------------------
00008162                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008162                            ;	    - spiked ball on a chain (SBZ)
00008162                            ; ---------------------------------------------------------------------------
00008162                            
00008162                            Obj15:					; XREF: Obj_Index
00008162 7000                       		moveq	#0,d0
00008164 1028 0024                  		move.b	$24(a0),d0
00008168 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000816C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008170                            ; ===========================================================================
00008170 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008174 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008178 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000817C 0000                       		dc.w Obj15_Action-Obj15_Index
0000817E                            ; ===========================================================================
0000817E                            
0000817E                            Obj15_Main:				; XREF: Obj15_Index
0000817E 5428 0024                  		addq.b	#2,$24(a0)
00008182 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000818A 317C 4380 0002             		move.w	#$4380,2(a0)
00008190 117C 0004 0001             		move.b	#4,1(a0)
00008196 117C 0003 0018             		move.b	#3,$18(a0)
0000819C 117C 0018 0019             		move.b	#$18,$19(a0)
000081A2 117C 0008 0016             		move.b	#8,$16(a0)
000081A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000081AE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000081B4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000081BA 6600                       		bne.s	Obj15_NotSLZ
000081BC 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000081C4 317C 43DC 0002             		move.w	#$43DC,2(a0)
000081CA 117C 0020 0019             		move.b	#$20,$19(a0)
000081D0 117C 0010 0016             		move.b	#$10,$16(a0)
000081D6 117C 0099 0020             		move.b	#$99,$20(a0)
000081DC                            
000081DC                            Obj15_NotSLZ:
000081DC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000081E2 6600                       		bne.s	Obj15_SetLength
000081E4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081EC 317C 0391 0002             		move.w	#$391,2(a0)
000081F2 117C 0018 0019             		move.b	#$18,$19(a0)
000081F8 117C 0018 0016             		move.b	#$18,$16(a0)
000081FE 117C 0086 0020             		move.b	#$86,$20(a0)
00008204 117C 000C 0024             		move.b	#$C,$24(a0)
0000820A                            
0000820A                            Obj15_SetLength:
0000820A 1810                       		move.b	0(a0),d4
0000820C 7200                       		moveq	#0,d1
0000820E 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008212 1212                       		move.b	(a2),d1		; move a2 to d1
00008214 3F01                       		move.w	d1,-(sp)
00008216 0241 000F                  		andi.w	#$F,d1
0000821A 14FC 0000                  		move.b	#0,(a2)+
0000821E 3601                       		move.w	d1,d3
00008220 E94B                       		lsl.w	#4,d3
00008222 5003                       		addq.b	#8,d3
00008224 1143 003C                  		move.b	d3,$3C(a0)
00008228 5103                       		subq.b	#8,d3
0000822A 4A28 001A                  		tst.b	$1A(a0)
0000822E 6700                       		beq.s	Obj15_MakeChain
00008230 5003                       		addq.b	#8,d3
00008232 5341                       		subq.w	#1,d1
00008234                            
00008234                            Obj15_MakeChain:
00008234 6100 0000                  		bsr.w	SingleObjLoad
00008238 6600                       		bne.s	loc_7A92
0000823A 5228 0028                  		addq.b	#1,$28(a0)
0000823E 3A09                       		move.w	a1,d5
00008240 0445 D000                  		subi.w	#-$3000,d5
00008244 EC4D                       		lsr.w	#6,d5
00008246 0245 007F                  		andi.w	#$7F,d5
0000824A 14C5                       		move.b	d5,(a2)+
0000824C 137C 000A 0024             		move.b	#$A,$24(a1)
00008252 1284                       		move.b	d4,0(a1)	; load swinging	object
00008254 2368 0004 0004             		move.l	4(a0),4(a1)
0000825A 3368 0002 0002             		move.w	2(a0),2(a1)
00008260 08A9 0006 0002             		bclr	#6,2(a1)
00008266 137C 0004 0001             		move.b	#4,1(a1)
0000826C 137C 0004 0018             		move.b	#4,$18(a1)
00008272 137C 0008 0019             		move.b	#8,$19(a1)
00008278 137C 0001 001A             		move.b	#1,$1A(a1)
0000827E 1343 003C                  		move.b	d3,$3C(a1)
00008282 0403 0010                  		subi.b	#$10,d3
00008286 6400                       		bcc.s	loc_7A8E
00008288 137C 0002 001A             		move.b	#2,$1A(a1)
0000828E 137C 0003 0018             		move.b	#3,$18(a1)
00008294 08E9 0006 0002             		bset	#6,2(a1)
0000829A                            
0000829A                            loc_7A8E:
0000829A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000829E                            
0000829E                            loc_7A92:
0000829E 3A08                       		move.w	a0,d5
000082A0 0445 D000                  		subi.w	#-$3000,d5
000082A4 EC4D                       		lsr.w	#6,d5
000082A6 0245 007F                  		andi.w	#$7F,d5
000082AA 14C5                       		move.b	d5,(a2)+
000082AC 317C 4080 0026             		move.w	#$4080,$26(a0)
000082B2 317C FE00 003E             		move.w	#-$200,$3E(a0)
000082B8 321F                       		move.w	(sp)+,d1
000082BA 0801 0004                  		btst	#4,d1		; is object type $8X ?
000082BE 6700                       		beq.s	loc_7AD4	; if not, branch
000082C0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000082C8 317C 43AA 0002             		move.w	#$43AA,2(a0)
000082CE 117C 0001 001A             		move.b	#1,$1A(a0)
000082D4 117C 0002 0018             		move.b	#2,$18(a0)
000082DA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000082E0                            
000082E0                            loc_7AD4:
000082E0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000082E6 6700                       		beq.s	Obj15_Action	; if yes, branch
000082E8                            
000082E8                            Obj15_SetSolid:				; XREF: Obj15_Index
000082E8 7200                       		moveq	#0,d1
000082EA 1228 0019                  		move.b	$19(a0),d1
000082EE 7600                       		moveq	#0,d3
000082F0 1628 0016                  		move.b	$16(a0),d3
000082F4 6100 FA76                  		bsr.w	Obj15_Solid
000082F8                            
000082F8                            Obj15_Action:				; XREF: Obj15_Index
000082F8 6100 0000                  		bsr.w	Obj15_Move
000082FC 6100 0000                  		bsr.w	DisplaySprite
00008300 6000 0000                  		bra.w	Obj15_ChkDel
00008304                            ; ===========================================================================
00008304                            
00008304                            Obj15_Action2:				; XREF: Obj15_Index
00008304 7200                       		moveq	#0,d1
00008306 1228 0019                  		move.b	$19(a0),d1
0000830A 6100 FAC4                  		bsr.w	ExitPlatform
0000830E 3F28 0008                  		move.w	8(a0),-(sp)
00008312 6100 0000                  		bsr.w	Obj15_Move
00008316 341F                       		move.w	(sp)+,d2
00008318 7600                       		moveq	#0,d3
0000831A 1628 0016                  		move.b	$16(a0),d3
0000831E 5203                       		addq.b	#1,d3
00008320 6100 0000                  		bsr.w	MvSonicOnPtfm
00008324 6100 0000                  		bsr.w	DisplaySprite
00008328 6000 0000                  		bra.w	Obj15_ChkDel
0000832C                            
0000832C 4E75                       		rts
0000832E                            
0000832E                            ; ---------------------------------------------------------------------------
0000832E                            ; Subroutine to	change Sonic's position with a platform
0000832E                            ; ---------------------------------------------------------------------------
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            
0000832E                            
0000832E                            MvSonicOnPtfm:
0000832E 43F8 D000                  		lea	($FFFFD000).w,a1
00008332 3028 000C                  		move.w	$C(a0),d0
00008336 9043                       		sub.w	d3,d0
00008338 6000                       		bra.s	MvSonic2
0000833A                            ; End of function MvSonicOnPtfm
0000833A                            
0000833A                            ; ---------------------------------------------------------------------------
0000833A                            ; Subroutine to	change Sonic's position with a platform
0000833A                            ; ---------------------------------------------------------------------------
0000833A                            
0000833A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000833A                            
0000833A                            
0000833A                            MvSonicOnPtfm2:
0000833A 43F8 D000                  		lea	($FFFFD000).w,a1
0000833E 3028 000C                  		move.w	$C(a0),d0
00008342 0440 0009                  		subi.w	#9,d0
00008346                            
00008346                            MvSonic2:
00008346 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000834A 6B00                       		bmi.s	locret_7B62
0000834C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008352 6400                       		bcc.s	locret_7B62
00008354 4A78 FE08                  		tst.w	($FFFFFE08).w
00008358 6600                       		bne.s	locret_7B62
0000835A 7200                       		moveq	#0,d1
0000835C 1229 0016                  		move.b	$16(a1),d1
00008360 9041                       		sub.w	d1,d0
00008362 3340 000C                  		move.w	d0,$C(a1)
00008366 9468 0008                  		sub.w	8(a0),d2
0000836A 9569 0008                  		sub.w	d2,8(a1)
0000836E                            
0000836E                            locret_7B62:
0000836E 4E75                       		rts	
00008370                            ; End of function MvSonicOnPtfm2
00008370                            
00008370                            
00008370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008370                            
00008370                            
00008370                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008370 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008374 323C 0080                  		move.w	#$80,d1
00008378 0828 0000 0022             		btst	#0,$22(a0)
0000837E 6700                       		beq.s	loc_7B78
00008380 4440                       		neg.w	d0
00008382 D041                       		add.w	d1,d0
00008384                            
00008384                            loc_7B78:
00008384 6000                       		bra.s	Obj15_Move2
00008386                            ; End of function Obj15_Move
00008386                            
00008386                            
00008386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008386                            
00008386                            
00008386                            Obj48_Move:				; XREF: Obj48_Display2
00008386 4A28 003D                  		tst.b	$3D(a0)
0000838A 6600                       		bne.s	loc_7B9C
0000838C 3028 003E                  		move.w	$3E(a0),d0
00008390 5040                       		addq.w	#8,d0
00008392 3140 003E                  		move.w	d0,$3E(a0)
00008396 D168 0026                  		add.w	d0,$26(a0)
0000839A 0C40 0200                  		cmpi.w	#$200,d0
0000839E 6600                       		bne.s	loc_7BB6
000083A0 117C 0001 003D             		move.b	#1,$3D(a0)
000083A6 6000                       		bra.s	loc_7BB6
000083A8                            ; ===========================================================================
000083A8                            
000083A8                            loc_7B9C:
000083A8 3028 003E                  		move.w	$3E(a0),d0
000083AC 5140                       		subq.w	#8,d0
000083AE 3140 003E                  		move.w	d0,$3E(a0)
000083B2 D168 0026                  		add.w	d0,$26(a0)
000083B6 0C40 FE00                  		cmpi.w	#-$200,d0
000083BA 6600                       		bne.s	loc_7BB6
000083BC 117C 0000 003D             		move.b	#0,$3D(a0)
000083C2                            
000083C2                            loc_7BB6:
000083C2 1028 0026                  		move.b	$26(a0),d0
000083C6                            ; End of function Obj48_Move
000083C6                            
000083C6                            
000083C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C6                            
000083C6                            
000083C6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000083C6 6100 A972                  		bsr.w	CalcSine
000083CA 3428 0038                  		move.w	$38(a0),d2
000083CE 3628 003A                  		move.w	$3A(a0),d3
000083D2 45E8 0028                  		lea	$28(a0),a2
000083D6 7C00                       		moveq	#0,d6
000083D8 1C1A                       		move.b	(a2)+,d6
000083DA                            
000083DA                            loc_7BCE:
000083DA 7800                       		moveq	#0,d4
000083DC 181A                       		move.b	(a2)+,d4
000083DE ED4C                       		lsl.w	#6,d4
000083E0 0684 00FF D000             		addi.l	#$FFD000,d4
000083E6 2244                       		movea.l	d4,a1
000083E8 7800                       		moveq	#0,d4
000083EA 1829 003C                  		move.b	$3C(a1),d4
000083EE 2A04                       		move.l	d4,d5
000083F0 C9C0                       		muls.w	d0,d4
000083F2 E084                       		asr.l	#8,d4
000083F4 CBC1                       		muls.w	d1,d5
000083F6 E085                       		asr.l	#8,d5
000083F8 D842                       		add.w	d2,d4
000083FA DA43                       		add.w	d3,d5
000083FC 3344 000C                  		move.w	d4,$C(a1)
00008400 3345 0008                  		move.w	d5,8(a1)
00008404 51CE FFD4                  		dbf	d6,loc_7BCE
00008408 4E75                       		rts	
0000840A                            ; End of function Obj15_Move2
0000840A                            
0000840A                            ; ===========================================================================
0000840A                            
0000840A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000840A 3028 003A                  		move.w	$3A(a0),d0
0000840E 0240 FF80                  		andi.w	#$FF80,d0
00008412 3238 F700                  		move.w	($FFFFF700).w,d1
00008416 0441 0080                  		subi.w	#$80,d1
0000841A 0241 FF80                  		andi.w	#$FF80,d1
0000841E 9041                       		sub.w	d1,d0
00008420 0C40 0280                  		cmpi.w	#$280,d0
00008424 6200 0000                  		bhi.w	Obj15_DelAll
00008428 4E75                       		rts	
0000842A                            ; ===========================================================================
0000842A                            
0000842A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000842A 7400                       		moveq	#0,d2
0000842C 45E8 0028                  		lea	$28(a0),a2
00008430 141A                       		move.b	(a2)+,d2
00008432                            
00008432                            Obj15_DelLoop:
00008432 7000                       		moveq	#0,d0
00008434 101A                       		move.b	(a2)+,d0
00008436 ED48                       		lsl.w	#6,d0
00008438 0680 00FF D000             		addi.l	#$FFD000,d0
0000843E 2240                       		movea.l	d0,a1
00008440 6100 0000                  		bsr.w	DeleteObject2
00008444 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            
0000844A                            Obj15_Delete:				; XREF: Obj15_Index
0000844A 6100 0000                  		bsr.w	DeleteObject
0000844E 4E75                       		rts	
00008450                            ; ===========================================================================
00008450                            
00008450                            Obj15_Display:				; XREF: Obj15_Index
00008450 6000 0000                  		bra.w	DisplaySprite
00008454                            ; ===========================================================================
00008454                            ; ---------------------------------------------------------------------------
00008454                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008454                            ; ---------------------------------------------------------------------------
00008454                            Map_obj15:
00008454                            	include "_maps\obj15ghz.asm"
00008454                            ; ---------------------------------------------------------------------------
00008454                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008454                            ; ---------------------------------------------------------------------------
00008454 0000                       		dc.w byte_7C4E-Map_obj15
00008456 0000                       		dc.w byte_7C59-Map_obj15
00008458 0000                       		dc.w byte_7C5F-Map_obj15
0000845A 02                         byte_7C4E:	dc.b 2
0000845B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008460 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008465 01                         byte_7C59:	dc.b 1
00008466 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000846B 01                         byte_7C5F:	dc.b 1
0000846C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008472 00                         		even
00008472 00                         		even
00008472                            
00008472                            ; ---------------------------------------------------------------------------
00008472                            ; Sprite mappings - SLZ	swinging platforms
00008472                            ; ---------------------------------------------------------------------------
00008472                            Map_obj15a:
00008472                            	include "_maps\obj15slz.asm"
00008472                            ; ---------------------------------------------------------------------------
00008472                            ; Sprite mappings - SLZ	swinging platforms
00008472                            ; ---------------------------------------------------------------------------
00008472 0000                       		dc.w byte_7C6C-Map_obj15a
00008474 0000                       		dc.w byte_7C95-Map_obj15a
00008476 0000                       		dc.w byte_7C9B-Map_obj15a
00008478 08                         byte_7C6C:	dc.b 8
00008479 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000847E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008483 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008488 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000848D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008492 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008497 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000849C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000084A1 01                         byte_7C95:	dc.b 1
000084A2 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000084A7 01                         byte_7C9B:	dc.b 1
000084A8 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000084AE 00                         		even
000084AE 00                         		even
000084AE                            
000084AE                            ; ===========================================================================
000084AE                            ; ---------------------------------------------------------------------------
000084AE                            ; Object 17 - helix of spikes on a pole	(GHZ)
000084AE                            ; ---------------------------------------------------------------------------
000084AE                            
000084AE                            Obj17:					; XREF: Obj_Index
000084AE 7000                       		moveq	#0,d0
000084B0 1028 0024                  		move.b	$24(a0),d0
000084B4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000084B8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000084BC                            ; ===========================================================================
000084BC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000084BE 0000                       		dc.w Obj17_Action-Obj17_Index
000084C0 0000                       		dc.w Obj17_Action-Obj17_Index
000084C2 0000                       		dc.w Obj17_Delete-Obj17_Index
000084C4 0000                       		dc.w Obj17_Display-Obj17_Index
000084C6                            ; ===========================================================================
000084C6                            
000084C6                            Obj17_Main:				; XREF: Obj17_Index
000084C6 5428 0024                  		addq.b	#2,$24(a0)
000084CA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000084D2 317C 4398 0002             		move.w	#$4398,2(a0)
000084D8 117C 0007 0022             		move.b	#7,$22(a0)
000084DE 117C 0004 0001             		move.b	#4,1(a0)
000084E4 117C 0003 0018             		move.b	#3,$18(a0)
000084EA 117C 0008 0019             		move.b	#8,$19(a0)
000084F0 3428 000C                  		move.w	$C(a0),d2
000084F4 3628 0008                  		move.w	8(a0),d3
000084F8 1810                       		move.b	0(a0),d4
000084FA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084FE 7200                       		moveq	#0,d1
00008500 1212                       		move.b	(a2),d1		; move a2 to d1
00008502 14FC 0000                  		move.b	#0,(a2)+
00008506 3001                       		move.w	d1,d0
00008508 E248                       		lsr.w	#1,d0
0000850A E948                       		lsl.w	#4,d0
0000850C 9640                       		sub.w	d0,d3
0000850E 5501                       		subq.b	#2,d1
00008510 6500                       		bcs.s	Obj17_Action
00008512 7C00                       		moveq	#0,d6
00008514                            
00008514                            Obj17_MakeHelix:
00008514 6100 0000                  		bsr.w	SingleObjLoad
00008518 6600                       		bne.s	Obj17_Action
0000851A 5228 0028                  		addq.b	#1,$28(a0)
0000851E 3A09                       		move.w	a1,d5
00008520 0445 D000                  		subi.w	#$D000,d5
00008524 EC4D                       		lsr.w	#6,d5
00008526 0245 007F                  		andi.w	#$7F,d5
0000852A 14C5                       		move.b	d5,(a2)+
0000852C 137C 0008 0024             		move.b	#8,$24(a1)
00008532 1284                       		move.b	d4,0(a1)
00008534 3342 000C                  		move.w	d2,$C(a1)
00008538 3343 0008                  		move.w	d3,8(a1)
0000853C 2368 0004 0004             		move.l	4(a0),4(a1)
00008542 337C 4398 0002             		move.w	#$4398,2(a1)
00008548 137C 0004 0001             		move.b	#4,1(a1)
0000854E 137C 0003 0018             		move.b	#3,$18(a1)
00008554 137C 0008 0019             		move.b	#8,$19(a1)
0000855A 1346 003E                  		move.b	d6,$3E(a1)
0000855E 5206                       		addq.b	#1,d6
00008560 0206 0007                  		andi.b	#7,d6
00008564 0643 0010                  		addi.w	#$10,d3
00008568 B668 0008                  		cmp.w	8(a0),d3
0000856C 6600                       		bne.s	loc_7D78
0000856E 1146 003E                  		move.b	d6,$3E(a0)
00008572 5206                       		addq.b	#1,d6
00008574 0206 0007                  		andi.b	#7,d6
00008578 0643 0010                  		addi.w	#$10,d3
0000857C 5228 0028                  		addq.b	#1,$28(a0)
00008580                            
00008580                            loc_7D78:
00008580 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008584                            
00008584                            Obj17_Action:				; XREF: Obj17_Index
00008584 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008588 6100 0000                  		bsr.w	DisplaySprite
0000858C 6000 0000                  		bra.w	Obj17_ChkDel
00008590                            
00008590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008590                            
00008590                            
00008590                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008590 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008594 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000859A D028 003E                  		add.b	$3E(a0),d0
0000859E 0200 0007                  		andi.b	#7,d0
000085A2 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000085A6 6600                       		bne.s	locret_7DA6
000085A8 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000085AE                            
000085AE                            locret_7DA6:
000085AE 4E75                       		rts	
000085B0                            ; End of function Obj17_RotateSpikes
000085B0                            
000085B0                            ; ===========================================================================
000085B0                            
000085B0                            Obj17_ChkDel:				; XREF: Obj17_Action
000085B0 3028 0008                  		move.w	8(a0),d0
000085B4 0240 FF80                  		andi.w	#$FF80,d0
000085B8 3238 F700                  		move.w	($FFFFF700).w,d1
000085BC 0441 0080                  		subi.w	#$80,d1
000085C0 0241 FF80                  		andi.w	#$FF80,d1
000085C4 9041                       		sub.w	d1,d0
000085C6 0C40 0280                  		cmpi.w	#$280,d0
000085CA 6200 0000                  		bhi.w	Obj17_DelAll
000085CE 4E75                       		rts	
000085D0                            ; ===========================================================================
000085D0                            
000085D0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000085D0 7400                       		moveq	#0,d2
000085D2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000085D6 141A                       		move.b	(a2)+,d2	; move a2 to d2
000085D8 5502                       		subq.b	#2,d2
000085DA 6500                       		bcs.s	Obj17_Delete
000085DC                            
000085DC                            Obj17_DelLoop:
000085DC 7000                       		moveq	#0,d0
000085DE 101A                       		move.b	(a2)+,d0
000085E0 ED48                       		lsl.w	#6,d0
000085E2 0680 00FF D000             		addi.l	#$FFD000,d0
000085E8 2240                       		movea.l	d0,a1
000085EA 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085EE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085F2                            
000085F2                            Obj17_Delete:				; XREF: Obj17_Index
000085F2 6100 0000                  		bsr.w	DeleteObject
000085F6 4E75                       		rts	
000085F8                            ; ===========================================================================
000085F8                            
000085F8                            Obj17_Display:				; XREF: Obj17_Index
000085F8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085FC 6000 0000                  		bra.w	DisplaySprite
00008600                            ; ===========================================================================
00008600                            ; ---------------------------------------------------------------------------
00008600                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008600                            ; ---------------------------------------------------------------------------
00008600                            Map_obj17:
00008600                            	include "_maps\obj17.asm"
00008600                            ; ---------------------------------------------------------------------------
00008600                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008600                            ; ---------------------------------------------------------------------------
00008600 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008604 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008608 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000860C 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008610 01                         byte_7E08:	dc.b 1
00008611 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008616 01                         byte_7E0E:	dc.b 1
00008617 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000861C 01                         byte_7E14:	dc.b 1
0000861D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008622 01                         byte_7E1A:	dc.b 1
00008623 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008628 01                         byte_7E20:	dc.b 1
00008629 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000862E 01                         byte_7E26:	dc.b 1
0000862F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008634 01                         byte_7E2C:	dc.b 1
00008635 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000863A                            		even
0000863A                            		even
0000863A                            
0000863A                            ; ===========================================================================
0000863A                            ; ---------------------------------------------------------------------------
0000863A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000863A                            ; ---------------------------------------------------------------------------
0000863A                            
0000863A                            Obj18:					; XREF: Obj_Index
0000863A 7000                       		moveq	#0,d0
0000863C 1028 0024                  		move.b	$24(a0),d0
00008640 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008644 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008648                            ; ===========================================================================
00008648 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000864A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000864C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000864E 0000                       		dc.w Obj18_Delete-Obj18_Index
00008650 0000                       		dc.w Obj18_Action-Obj18_Index
00008652                            ; ===========================================================================
00008652                            
00008652                            Obj18_Main:				; XREF: Obj18_Index
00008652 5428 0024                  		addq.b	#2,$24(a0)
00008656 317C 4000 0002             		move.w	#$4000,2(a0)
0000865C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008664 117C 0020 0019             		move.b	#$20,$19(a0)
0000866A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008670 6600                       		bne.s	Obj18_NotSYZ
00008672 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000867A 117C 0020 0019             		move.b	#$20,$19(a0)
00008680                            
00008680                            Obj18_NotSYZ:
00008680 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008686 6600                       		bne.s	Obj18_NotSLZ
00008688 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008690 117C 0020 0019             		move.b	#$20,$19(a0)
00008696 317C 4000 0002             		move.w	#$4000,2(a0)
0000869C 117C 0003 0028             		move.b	#3,$28(a0)
000086A2                            
000086A2                            Obj18_NotSLZ:
000086A2 117C 0004 0001             		move.b	#4,1(a0)
000086A8 117C 0004 0018             		move.b	#4,$18(a0)
000086AE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000086B4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000086BA 3168 0008 0032             		move.w	8(a0),$32(a0)
000086C0 317C 0080 0026             		move.w	#$80,$26(a0)
000086C6 7200                       		moveq	#0,d1
000086C8 1028 0028                  		move.b	$28(a0),d0
000086CC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000086D0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000086D2 5201                       		addq.b	#1,d1		; use frame #1
000086D4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000086DA                            
000086DA                            Obj18_SetFrame:
000086DA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000086DE                            
000086DE                            Obj18_Solid:				; XREF: Obj18_Index
000086DE 4A28 0038                  		tst.b	$38(a0)
000086E2 6700                       		beq.s	loc_7EE0
000086E4 5928 0038                  		subq.b	#4,$38(a0)
000086E8                            
000086E8                            loc_7EE0:
000086E8 7200                       		moveq	#0,d1
000086EA 1228 0019                  		move.b	$19(a0),d1
000086EE 6100 F56C                  		bsr.w	PlatformObject
000086F2                            
000086F2                            Obj18_Action:				; XREF: Obj18_Index
000086F2 6100 0000                  		bsr.w	Obj18_Move
000086F6 6100 0000                  		bsr.w	Obj18_Nudge
000086FA 6100 0000                  		bsr.w	DisplaySprite
000086FE 6000 0000                  		bra.w	Obj18_ChkDel
00008702                            ; ===========================================================================
00008702                            
00008702                            Obj18_Action2:				; XREF: Obj18_Index
00008702 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008708 6700                       		beq.s	loc_7F06
0000870A 5828 0038                  		addq.b	#4,$38(a0)
0000870E                            
0000870E                            loc_7F06:
0000870E 7200                       		moveq	#0,d1
00008710 1228 0019                  		move.b	$19(a0),d1
00008714 6100 F6BA                  		bsr.w	ExitPlatform
00008718 3F28 0008                  		move.w	8(a0),-(sp)
0000871C 6100 0000                  		bsr.w	Obj18_Move
00008720 6100 0000                  		bsr.w	Obj18_Nudge
00008724 341F                       		move.w	(sp)+,d2
00008726 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000872A 6100 0000                  		bsr.w	DisplaySprite
0000872E 6000 0000                  		bra.w	Obj18_ChkDel
00008732                            
00008732 4E75                       		rts
00008734                            
00008734                            ; ---------------------------------------------------------------------------
00008734                            ; Subroutine to	move platform slightly when you	stand on it
00008734                            ; ---------------------------------------------------------------------------
00008734                            
00008734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008734                            
00008734                            
00008734                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008734 1028 0038                  		move.b	$38(a0),d0
00008738 6100 A600                  		bsr.w	CalcSine
0000873C 323C 0400                  		move.w	#$400,d1
00008740 C1C1                       		muls.w	d1,d0
00008742 4840                       		swap	d0
00008744 D068 002C                  		add.w	$2C(a0),d0
00008748 3140 000C                  		move.w	d0,$C(a0)
0000874C 4E75                       		rts	
0000874E                            ; End of function Obj18_Nudge
0000874E                            
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            ; Subroutine to	move platforms
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            
0000874E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000874E                            
0000874E                            
0000874E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000874E 7000                       		moveq	#0,d0
00008750 1028 0028                  		move.b	$28(a0),d0
00008754 0240 000F                  		andi.w	#$F,d0
00008758 D040                       		add.w	d0,d0
0000875A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000875E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008762                            ; End of function Obj18_Move
00008762                            
00008762                            ; ===========================================================================
00008762 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008766 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000876A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000876E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008772 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008776 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000877A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000877C                            ; ===========================================================================
0000877C                            
0000877C                            Obj18_Type00:
0000877C 4E75                       		rts			; platform 00 doesn't move
0000877E                            ; ===========================================================================
0000877E                            
0000877E                            Obj18_Type05:
0000877E 3028 0032                  		move.w	$32(a0),d0
00008782 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008786 4401                       		neg.b	d1		; reverse platform-motion
00008788 0601 0040                  		addi.b	#$40,d1
0000878C 6000                       		bra.s	Obj18_01_Move
0000878E                            ; ===========================================================================
0000878E                            
0000878E                            Obj18_Type01:
0000878E 3028 0032                  		move.w	$32(a0),d0
00008792 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008796 0401 0040                  		subi.b	#$40,d1
0000879A                            
0000879A                            Obj18_01_Move:
0000879A 4881                       		ext.w	d1
0000879C D041                       		add.w	d1,d0
0000879E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000087A2 6000 0000                  		bra.w	Obj18_ChgMotion
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            Obj18_Type0C:
000087A6 3028 0034                  		move.w	$34(a0),d0
000087AA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087AE 4401                       		neg.b	d1		; reverse platform-motion
000087B0 0601 0030                  		addi.b	#$30,d1
000087B4 6000                       		bra.s	Obj18_02_Move
000087B6                            ; ===========================================================================
000087B6                            
000087B6                            Obj18_Type0B:
000087B6 3028 0034                  		move.w	$34(a0),d0
000087BA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087BE 0401 0030                  		subi.b	#$30,d1
000087C2 6000                       		bra.s	Obj18_02_Move
000087C4                            ; ===========================================================================
000087C4                            
000087C4                            Obj18_Type06:
000087C4 3028 0034                  		move.w	$34(a0),d0
000087C8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087CC 4401                       		neg.b	d1		; reverse platform-motion
000087CE 0601 0040                  		addi.b	#$40,d1
000087D2 6000                       		bra.s	Obj18_02_Move
000087D4                            ; ===========================================================================
000087D4                            
000087D4                            Obj18_Type02:
000087D4 3028 0034                  		move.w	$34(a0),d0
000087D8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087DC 0401 0040                  		subi.b	#$40,d1
000087E0                            
000087E0                            Obj18_02_Move:
000087E0 4881                       		ext.w	d1
000087E2 D041                       		add.w	d1,d0
000087E4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000087E8 6000 0000                  		bra.w	Obj18_ChgMotion
000087EC                            ; ===========================================================================
000087EC                            
000087EC                            Obj18_Type03:
000087EC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087F0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087F2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087F8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087FA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008800                            
00008800                            Obj18_03_NoMove:
00008800 4E75                       		rts	
00008802                            ; ===========================================================================
00008802                            
00008802                            Obj18_03_Wait:
00008802 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008806 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008808 317C 0020 003A             		move.w	#32,$3A(a0)
0000880E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008812 4E75                       		rts	
00008814                            ; ===========================================================================
00008814                            
00008814                            Obj18_Type04:
00008814 4A68 003A                  		tst.w	$3A(a0)
00008818 6700                       		beq.s	loc_8048
0000881A 5368 003A                  		subq.w	#1,$3A(a0)
0000881E 6600                       		bne.s	loc_8048
00008820 0828 0003 0022             		btst	#3,$22(a0)
00008826 6700                       		beq.s	loc_8042
00008828 08E9 0001 0022             		bset	#1,$22(a1)
0000882E 08A9 0003 0022             		bclr	#3,$22(a1)
00008834 137C 0002 0024             		move.b	#2,$24(a1)
0000883A 08A8 0003 0022             		bclr	#3,$22(a0)
00008840 4228 0025                  		clr.b	$25(a0)
00008844 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000884A                            
0000884A                            loc_8042:
0000884A 117C 0008 0024             		move.b	#8,$24(a0)
00008850                            
00008850                            loc_8048:
00008850 2628 002C                  		move.l	$2C(a0),d3
00008854 3028 0012                  		move.w	$12(a0),d0
00008858 48C0                       		ext.l	d0
0000885A E180                       		asl.l	#8,d0
0000885C D680                       		add.l	d0,d3
0000885E 2143 002C                  		move.l	d3,$2C(a0)
00008862 0668 0038 0012             		addi.w	#$38,$12(a0)
00008868 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000886C 0640 00E0                  		addi.w	#$E0,d0
00008870 B068 002C                  		cmp.w	$2C(a0),d0
00008874 6400                       		bcc.s	locret_8074
00008876 117C 0006 0024             		move.b	#6,$24(a0)
0000887C                            
0000887C                            locret_8074:
0000887C 4E75                       		rts	
0000887E                            ; ===========================================================================
0000887E                            
0000887E                            Obj18_Type07:
0000887E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008882 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008884 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008888 7000                       		moveq	#0,d0
0000888A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000888E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008890 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008894 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008896 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000889C                            
0000889C                            Obj18_07_NoMove:
0000889C 4E75                       		rts	
0000889E                            ; ===========================================================================
0000889E                            
0000889E                            Obj18_07_Wait:
0000889E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000088A2 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000088A4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000088A8 4E75                       		rts	
000088AA                            ; ===========================================================================
000088AA                            
000088AA                            Obj18_Type08:
000088AA 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000088AE 3028 0034                  		move.w	$34(a0),d0
000088B2 0440 0200                  		subi.w	#$200,d0
000088B6 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000088BA 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000088BC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000088C0                            
000088C0                            Obj18_08_NoStop:
000088C0 4E75                       		rts	
000088C2                            ; ===========================================================================
000088C2                            
000088C2                            Obj18_Type0A:
000088C2 3028 0034                  		move.w	$34(a0),d0
000088C6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000088CA 0401 0040                  		subi.b	#$40,d1
000088CE 4881                       		ext.w	d1
000088D0 E241                       		asr.w	#1,d1
000088D2 D041                       		add.w	d1,d0
000088D4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000088D8                            
000088D8                            Obj18_ChgMotion:
000088D8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000088DE 4E75                       		rts	
000088E0                            ; ===========================================================================
000088E0                            
000088E0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000088E0 3028 0032                  		move.w	$32(a0),d0
000088E4 0240 FF80                  		andi.w	#$FF80,d0
000088E8 3238 F700                  		move.w	($FFFFF700).w,d1
000088EC 0441 0080                  		subi.w	#$80,d1
000088F0 0241 FF80                  		andi.w	#$FF80,d1
000088F4 9041                       		sub.w	d1,d0
000088F6 0C40 0280                  		cmpi.w	#$280,d0
000088FA 6200                       		bhi.s	Obj18_Delete
000088FC 4E75                       		rts	
000088FE                            ; ===========================================================================
000088FE                            
000088FE                            Obj18_Delete:				; XREF: Obj18_Index
000088FE 6000 0000                  		bra.w	DeleteObject
00008902                            ; ===========================================================================
00008902                            ; ---------------------------------------------------------------------------
00008902                            ; Sprite mappings - unused
00008902                            ; ---------------------------------------------------------------------------
00008902                            Map_obj18x:
00008902                            	include "_maps\obj18x.asm"
00008902                            ; ---------------------------------------------------------------------------
00008902                            ; Sprite mappings - unused
00008902                            ; ---------------------------------------------------------------------------
00008902 0000                       		dc.w byte_80FE-Map_obj18x
00008904 0000                       		dc.w byte_8109-Map_obj18x
00008906 02                         byte_80FE:	dc.b 2
00008907 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000890C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008911 0A                         byte_8109:	dc.b $A
00008912 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008917 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000891C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008921 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008926 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000892B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008930 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008935 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000893A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000893F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008944                            		even
00008944                            		even
00008944                            
00008944                            ; ---------------------------------------------------------------------------
00008944                            ; Sprite mappings - GHZ	platforms
00008944                            ; ---------------------------------------------------------------------------
00008944                            Map_obj18:
00008944                            	include "_maps\obj18ghz.asm"
00008944                            ; ---------------------------------------------------------------------------
00008944                            ; Sprite mappings - GHZ	platforms
00008944                            ; ---------------------------------------------------------------------------
00008944 0000                       		dc.w byte_8140-Map_obj18
00008946 0000                       		dc.w byte_8155-Map_obj18
00008948 04                         byte_8140:	dc.b 4
00008949 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000894E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008953 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008958 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000895D 0A                         byte_8155:	dc.b $A
0000895E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008963 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008968 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000896D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008972 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008977 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000897C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008981 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008986 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000898B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008990                            		even
00008990                            		even
00008990                            
00008990                            ; ---------------------------------------------------------------------------
00008990                            ; Sprite mappings - SYZ	platforms
00008990                            ; ---------------------------------------------------------------------------
00008990                            Map_obj18a:
00008990                            	include "_maps\obj18syz.asm"
00008990                            ; ---------------------------------------------------------------------------
00008990                            ; Sprite mappings - SYZ	platforms
00008990                            ; ---------------------------------------------------------------------------
00008990 0000                       		dc.w byte_818A-Map_obj18a
00008992 03                         byte_818A:	dc.b 3
00008993 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008998 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000899D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000089A2                            		even
000089A2                            		even
000089A2                            
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            ; Sprite mappings - SLZ	platforms
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            Map_obj18b:
000089A2                            	include "_maps\obj18slz.asm"
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            ; Sprite mappings - SLZ	platforms
000089A2                            ; ---------------------------------------------------------------------------
000089A2 0000                       		dc.w byte_819C-Map_obj18b
000089A4 02                         byte_819C:	dc.b 2
000089A5 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000089AA F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000089B0 00                         		even
000089B0 00                         		even
000089B0                            
000089B0                            ; ===========================================================================
000089B0                            ; ---------------------------------------------------------------------------
000089B0                            ; Object 19 - Pearto bombs
000089B0                            ; ---------------------------------------------------------------------------
000089B0                            Obj19:					; XREF: Obj_Index
000089B0 7000                       		moveq	#0,d0
000089B2 1028 0024                  		move.b	$24(a0),d0
000089B6 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000089BA 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000089BE                            ; ---------------------------------------------------------------------------
000089BE                            
000089BE 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000089C4                            ; ---------------------------------------------------------------------------
000089C4                            
000089C4                            loc_7076:
000089C4 5428 0024                  		addq.b	#2,$24(a0)
000089C8 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000089D0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000089D6 117C 0004 0001             		move.b	#4,1(a0)
000089DC 117C 0003 0019             		move.b	#3,$19(a0)
000089E2 117C 0087 0020             		move.b	#$87,$20(a0)
000089E8 117C 0008 0018             		move.b	#8,$18(a0)
000089EE 317C 0018 0030             		move.w	#$18,$30(a0)
000089F4                            
000089F4                            loc_70A6:
000089F4 0828 0007 0022             		btst	#7,$22(a0)
000089FA 6600                       		bne.s	loc_70C2
000089FC 4A68 0030                  		tst.w	$30(a0)
00008A00 6600                       		bne.s	loc_70D2
00008A02 4EB9 0000 0000             		jsr	ObjHitFloor
00008A08 4A41                       		tst.w	d1
00008A0A 6A00                       		bpl.s	loc_70D6
00008A0C D368 000C                  		add.w	d1,$C(a0)
00008A10                            
00008A10                            loc_70C2:
00008A10 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008A14 117C 0000 0024             		move.b	#0,$24(a0)
00008A1A                            ; ---------------------------------------------------------------------------
00008A1A                            
00008A1A                            loc_70D2:
00008A1A 5368 0030                  		subq.w	#1,$30(a0)
00008A1E                            
00008A1E                            loc_70D6:
00008A1E 6100 0000                  		bsr.w	ObjectFall
00008A22 6100 0000                  		bsr.w	DisplaySprite
00008A26 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008A2A 0640 00E0                  		addi.w	#$E0,d0
00008A2E B068 000C                  		cmp.w	$C(a0),d0
00008A32 6500                       		bcs.s	loc_70EE
00008A34 4E75                       		rts
00008A36                            ; ---------------------------------------------------------------------------
00008A36                            
00008A36                            loc_70EE:
00008A36 6100 0000                  		bsr.w	DeleteObject
00008A3A 4E75                       		rts
00008A3C                            		
00008A3C                            Map_obj19:
00008A3C                            	include "_maps\obj19.asm"
00008A3C                            Map_02b4:
00008A3C 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008A3E 01                         Map_02b4_2: 	dc.b $1
00008A3F F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008A44                            	even
00008A44                            	even
00008A44                            ; ===========================================================================
00008A44                            ; ---------------------------------------------------------------------------
00008A44                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A44                            ; ---------------------------------------------------------------------------
00008A44                            Map_obj48:
00008A44                            	include "_maps\obj48.asm"
00008A44                            ; ---------------------------------------------------------------------------
00008A44                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A44                            ; ---------------------------------------------------------------------------
00008A44 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008A48 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A4C 06                         byte_81B2:	dc.b 6
00008A4D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A52 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A57 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A5C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A61 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A66 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A6B 04                         byte_81D1:	dc.b 4
00008A6C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A71 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A76 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A7B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A80 04                         byte_81E6:	dc.b 4
00008A81 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A86 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A8B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A90 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A95 04                         byte_81FB:	dc.b 4
00008A96 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A9B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008AA0 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008AA5 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008AAA                            		even
00008AAA                            		even
00008AAA                            
00008AAA                            ; ===========================================================================
00008AAA                            ; ---------------------------------------------------------------------------
00008AAA                            ; Object 1A - GHZ collapsing ledge
00008AAA                            ; ---------------------------------------------------------------------------
00008AAA                            
00008AAA                            Obj1A:					; XREF: Obj_Index
00008AAA 7000                       		moveq	#0,d0
00008AAC 1028 0024                  		move.b	$24(a0),d0
00008AB0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008AB4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008AB8                            ; ===========================================================================
00008AB8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008ABC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008AC0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008AC4                            ; ===========================================================================
00008AC4                            
00008AC4                            Obj1A_Main:				; XREF: Obj1A_Index
00008AC4 5428 0024                  		addq.b	#2,$24(a0)
00008AC8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008AD0 317C 4000 0002             		move.w	#$4000,2(a0)
00008AD6 0028 0004 0001             		ori.b	#4,1(a0)
00008ADC 117C 0004 0018             		move.b	#4,$18(a0)
00008AE2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008AE8 117C 0064 0019             		move.b	#$64,$19(a0)
00008AEE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AF4 117C 0038 0016             		move.b	#$38,$16(a0)
00008AFA 08E8 0004 0001             		bset	#4,1(a0)
00008B00                            
00008B00                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008B00 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008B04 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008B06 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008B0A 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008B0E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B12                            
00008B12                            Obj1A_Slope:
00008B12 323C 0030                  		move.w	#$30,d1
00008B16 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B1C 6100 F212                  		bsr.w	SlopeObject
00008B20 6000 0000                  		bra.w	MarkObjGone
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Obj1A_Touch:				; XREF: Obj1A_Index
00008B24 4A28 0038                  		tst.b	$38(a0)
00008B28 6700 0000                  		beq.w	loc_847A
00008B2C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008B32 5328 0038                  		subq.b	#1,$38(a0)
00008B36                            
00008B36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B36                            
00008B36                            
00008B36                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008B36 323C 0030                  		move.w	#$30,d1
00008B3A 6100 F294                  		bsr.w	ExitPlatform
00008B3E 323C 0030                  		move.w	#$30,d1
00008B42 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B48 3428 0008                  		move.w	8(a0),d2
00008B4C 6100 0000                  		bsr.w	SlopeObject2
00008B50 6000 0000                  		bra.w	MarkObjGone
00008B54                            ; End of function Obj1A_WalkOff
00008B54                            
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            Obj1A_Display:				; XREF: Obj1A_Index
00008B54 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B58 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B5A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B5E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B62 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B66 6000 0000                  		bra.w	DisplaySprite
00008B6A                            ; ===========================================================================
00008B6A                            
00008B6A                            loc_82D0:				; XREF: Obj1A_Display
00008B6A 5328 0038                  		subq.b	#1,$38(a0)
00008B6E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B72 43F8 D000                  		lea	($FFFFD000).w,a1
00008B76 0829 0003 0022             		btst	#3,$22(a1)
00008B7C 6700                       		beq.s	loc_82FC
00008B7E 4A28 0038                  		tst.b	$38(a0)
00008B82 6600                       		bne.s	locret_8308
00008B84 08A9 0003 0022             		bclr	#3,$22(a1)
00008B8A 08A9 0005 0022             		bclr	#5,$22(a1)
00008B90 137C 0001 001D             		move.b	#1,$1D(a1)
00008B96                            
00008B96                            loc_82FC:
00008B96 117C 0000 003A             		move.b	#0,$3A(a0)
00008B9C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008BA2                            
00008BA2                            locret_8308:
00008BA2 4E75                       		rts	
00008BA4                            ; ===========================================================================
00008BA4                            
00008BA4                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008BA4 6100 0000                  		bsr.w	ObjectFall
00008BA8 6100 0000                  		bsr.w	DisplaySprite
00008BAC 4A28 0001                  		tst.b	1(a0)
00008BB0 6A00                       		bpl.s	Obj1A_Delete
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            Obj1A_Delete:				; XREF: Obj1A_Index
00008BB4 6100 0000                  		bsr.w	DeleteObject
00008BB8 4E75                       		rts	
00008BBA                            ; ===========================================================================
00008BBA                            ; ---------------------------------------------------------------------------
00008BBA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008BBA                            ; ---------------------------------------------------------------------------
00008BBA                            
00008BBA                            Obj53:					; XREF: Obj_Index
00008BBA 7000                       		moveq	#0,d0
00008BBC 1028 0024                  		move.b	$24(a0),d0
00008BC0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008BC4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008BC8                            ; ===========================================================================
00008BC8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008BCC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008BD0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008BD4                            ; ===========================================================================
00008BD4                            
00008BD4                            Obj53_Main:				; XREF: Obj53_Index
00008BD4 5428 0024                  		addq.b	#2,$24(a0)
00008BD8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008BE0 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008BE6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BEC 6600                       		bne.s	Obj53_NotSLZ
00008BEE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BF4 5428 001A                  		addq.b	#2,$1A(a0)
00008BF8                            
00008BF8                            Obj53_NotSLZ:
00008BF8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BFE 6600                       		bne.s	Obj53_NotSBZ
00008C00 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008C06                            
00008C06                            Obj53_NotSBZ:
00008C06 0028 0004 0001             		ori.b	#4,1(a0)
00008C0C 117C 0004 0018             		move.b	#4,$18(a0)
00008C12 117C 0007 0038             		move.b	#7,$38(a0)
00008C18 117C 0044 0019             		move.b	#$44,$19(a0)
00008C1E                            
00008C1E                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008C1E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C22 6700                       		beq.s	Obj53_Solid	; if not, branch
00008C24 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C28 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008C2C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C30                            
00008C30                            Obj53_Solid:
00008C30 323C 0020                  		move.w	#$20,d1
00008C34 6100 F026                  		bsr.w	PlatformObject
00008C38 4A28 0028                  		tst.b	$28(a0)
00008C3C 6A00                       		bpl.s	Obj53_MarkAsGone
00008C3E 0829 0003 0022             		btst	#3,$22(a1)
00008C44 6700                       		beq.s	Obj53_MarkAsGone
00008C46 08A8 0000 0001             		bclr	#0,1(a0)
00008C4C 3029 0008                  		move.w	8(a1),d0
00008C50 9068 0008                  		sub.w	8(a0),d0
00008C54 6400                       		bcc.s	Obj53_MarkAsGone
00008C56 08E8 0000 0001             		bset	#0,1(a0)
00008C5C                            
00008C5C                            Obj53_MarkAsGone:
00008C5C 6000 0000                  		bra.w	MarkObjGone
00008C60                            ; ===========================================================================
00008C60                            
00008C60                            Obj53_Touch:				; XREF: Obj53_Index
00008C60 4A28 0038                  		tst.b	$38(a0)
00008C64 6700 0000                  		beq.w	loc_8458
00008C68 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C6E 5328 0038                  		subq.b	#1,$38(a0)
00008C72                            
00008C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C72                            
00008C72                            
00008C72                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C72 323C 0020                  		move.w	#$20,d1
00008C76 6100 F158                  		bsr.w	ExitPlatform
00008C7A 3428 0008                  		move.w	8(a0),d2
00008C7E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C82 6000 0000                  		bra.w	MarkObjGone
00008C86                            ; End of function Obj53_WalkOff
00008C86                            
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            Obj53_Display:				; XREF: Obj53_Index
00008C86 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C8A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C8C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C90 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C94 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C98 6000 0000                  		bra.w	DisplaySprite
00008C9C                            ; ===========================================================================
00008C9C                            
00008C9C                            loc_8402:
00008C9C 5328 0038                  		subq.b	#1,$38(a0)
00008CA0 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00008CA8 0829 0003 0022             		btst	#3,$22(a1)
00008CAE 6700                       		beq.s	loc_842E
00008CB0 4A28 0038                  		tst.b	$38(a0)
00008CB4 6600                       		bne.s	locret_843A
00008CB6 08A9 0003 0022             		bclr	#3,$22(a1)
00008CBC 08A9 0005 0022             		bclr	#5,$22(a1)
00008CC2 137C 0001 001D             		move.b	#1,$1D(a1)
00008CC8                            
00008CC8                            loc_842E:
00008CC8 117C 0000 003A             		move.b	#0,$3A(a0)
00008CCE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008CD4                            
00008CD4                            locret_843A:
00008CD4 4E75                       		rts	
00008CD6                            ; ===========================================================================
00008CD6                            
00008CD6                            Obj53_TimeZero:				; XREF: Obj53_Display
00008CD6 6100 0000                  		bsr.w	ObjectFall
00008CDA 6100 0000                  		bsr.w	DisplaySprite
00008CDE 4A28 0001                  		tst.b	1(a0)
00008CE2 6A00                       		bpl.s	Obj53_Delete
00008CE4 4E75                       		rts	
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            Obj53_Delete:				; XREF: Obj53_Index
00008CE6 6100 0000                  		bsr.w	DeleteObject
00008CEA 4E75                       		rts	
00008CEC                            ; ===========================================================================
00008CEC                            
00008CEC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CEC 117C 0000 003A             		move.b	#0,$3A(a0)
00008CF2                            
00008CF2                            loc_8458:				; XREF: Obj53_Touch
00008CF2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CF8 0828 0000 0028             		btst	#0,$28(a0)
00008CFE 6700                       		beq.s	loc_846C
00008D00 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008D06                            
00008D06                            loc_846C:
00008D06 7207                       		moveq	#7,d1
00008D08 5228 001A                  		addq.b	#1,$1A(a0)
00008D0C 6000                       		bra.s	loc_8486
00008D0E                            ; ===========================================================================
00008D0E                            
00008D0E                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008D0E 117C 0000 003A             		move.b	#0,$3A(a0)
00008D14                            
00008D14                            loc_847A:				; XREF: Obj1A_Touch
00008D14 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008D1A 7218                       		moveq	#$18,d1
00008D1C 5428 001A                  		addq.b	#2,$1A(a0)
00008D20                            
00008D20                            loc_8486:				; XREF: Obj53_Collapse
00008D20 7000                       		moveq	#0,d0
00008D22 1028 001A                  		move.b	$1A(a0),d0
00008D26 D040                       		add.w	d0,d0
00008D28 2668 0004                  		movea.l	4(a0),a3
00008D2C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008D30 524B                       		addq.w	#1,a3
00008D32 08E8 0005 0001             		bset	#5,1(a0)
00008D38 1810                       		move.b	0(a0),d4
00008D3A 1A28 0001                  		move.b	1(a0),d5
00008D3E 2248                       		movea.l	a0,a1
00008D40 6000                       		bra.s	loc_84B2
00008D42                            ; ===========================================================================
00008D42                            
00008D42                            loc_84AA:
00008D42 6100 0000                  		bsr.w	SingleObjLoad
00008D46 6600                       		bne.s	loc_84F2
00008D48 5A4B                       		addq.w	#5,a3
00008D4A                            
00008D4A                            loc_84B2:
00008D4A 137C 0006 0024             		move.b	#6,$24(a1)
00008D50 1284                       		move.b	d4,0(a1)
00008D52 234B 0004                  		move.l	a3,4(a1)
00008D56 1345 0001                  		move.b	d5,1(a1)
00008D5A 3368 0008 0008             		move.w	8(a0),8(a1)
00008D60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D66 3368 0002 0002             		move.w	2(a0),2(a1)
00008D6C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D72 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D78 135C 0038                  		move.b	(a4)+,$38(a1)
00008D7C B3C8                       		cmpa.l	a0,a1
00008D7E 6400                       		bcc.s	loc_84EE
00008D80 6100 0000                  		bsr.w	DisplaySprite2
00008D84                            
00008D84                            loc_84EE:
00008D84 51C9 FFBC                  		dbf	d1,loc_84AA
00008D88                            
00008D88                            loc_84F2:
00008D88 6100 0000                  		bsr.w	DisplaySprite
00008D8C 303C 00B9                  		move.w	#$B9,d0
00008D90 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D96                            ; ===========================================================================
00008D96                            ; ---------------------------------------------------------------------------
00008D96                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D96                            ; ---------------------------------------------------------------------------
00008D96 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008DA6 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008DB0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008DB8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008DC0                            
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            
00008DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DC0                            
00008DC0                            
00008DC0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008DC0 43F8 D000                  		lea	($FFFFD000).w,a1
00008DC4 0829 0003 0022             		btst	#3,$22(a1)
00008DCA 6700                       		beq.s	locret_856E
00008DCC 3029 0008                  		move.w	8(a1),d0
00008DD0 9068 0008                  		sub.w	8(a0),d0
00008DD4 D041                       		add.w	d1,d0
00008DD6 E248                       		lsr.w	#1,d0
00008DD8 0828 0000 0001             		btst	#0,1(a0)
00008DDE 6700                       		beq.s	loc_854E
00008DE0 4640                       		not.w	d0
00008DE2 D041                       		add.w	d1,d0
00008DE4                            
00008DE4                            loc_854E:
00008DE4 7200                       		moveq	#0,d1
00008DE6 1232 0000                  		move.b	(a2,d0.w),d1
00008DEA 3028 000C                  		move.w	$C(a0),d0
00008DEE 9041                       		sub.w	d1,d0
00008DF0 7200                       		moveq	#0,d1
00008DF2 1229 0016                  		move.b	$16(a1),d1
00008DF6 9041                       		sub.w	d1,d0
00008DF8 3340 000C                  		move.w	d0,$C(a1)
00008DFC 9468 0008                  		sub.w	8(a0),d2
00008E00 9569 0008                  		sub.w	d2,8(a1)
00008E04                            
00008E04                            locret_856E:
00008E04 4E75                       		rts	
00008E06                            ; End of function SlopeObject2
00008E06                            
00008E06                            ; ===========================================================================
00008E06                            ; ---------------------------------------------------------------------------
00008E06                            ; Collision data for GHZ collapsing ledge
00008E06                            ; ---------------------------------------------------------------------------
00008E06                            Obj1A_SlopeData:
00008E06                            		incbin	misc\ghzledge.bin
00008E36                            		even
00008E36                            
00008E36                            ; ---------------------------------------------------------------------------
00008E36                            ; Sprite mappings - GHZ	collapsing ledge
00008E36                            ; ---------------------------------------------------------------------------
00008E36                            Map_obj1A:
00008E36                            	include "_maps\obj1A.asm"
00008E36                            ; ---------------------------------------------------------------------------
00008E36                            ; Sprite mappings - GHZ	collapsing ledge
00008E36                            ; ---------------------------------------------------------------------------
00008E36 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008E3A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008E3E 10                         byte_85A8:	dc.b $10
00008E3F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008E44 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E49 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E4E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E53 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E58 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E5D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E62 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E67 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E6C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E71 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E76 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E7B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E80 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E85 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E8A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E8F 10                         byte_85F9:	dc.b $10
00008E90 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E95 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E9A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E9F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008EA4 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EA9 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008EAE F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008EB3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008EB8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EBD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008EC2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008EC7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008ECC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008ED1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008ED6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008EDB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008EE0 19                         byte_864A:	dc.b $19
00008EE1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008EE6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EEB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EF0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EF5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EFA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EFF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F04 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F09 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F0E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008F13 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F18 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F1D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F22 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F27 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F2C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008F31 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F36 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F3B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F40 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F45 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F4A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F4F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F54 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F59 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F5E 19                         byte_86C8:	dc.b $19
00008F5F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F64 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F69 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F6E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F73 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F78 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F7D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F82 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F87 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F8C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F91 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F96 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F9B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008FA0 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008FA5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008FAA F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008FAF 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008FB4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008FB9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008FBE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008FC3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008FC8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008FCD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008FD2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008FD7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008FDC                            		even
00008FDC                            		even
00008FDC                            
00008FDC                            ; ---------------------------------------------------------------------------
00008FDC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FDC                            ; ---------------------------------------------------------------------------
00008FDC                            Map_obj53:
00008FDC                            	include "_maps\obj53.asm"
00008FDC                            ; ---------------------------------------------------------------------------
00008FDC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FDC                            ; ---------------------------------------------------------------------------
00008FDC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008FE0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008FE4 04                         byte_874E:	dc.b 4
00008FE5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FEA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FEF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FF4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FF9 08                         byte_8763:	dc.b 8
00008FFA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FFF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009004 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009009 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000900E 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009013 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009018 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000901D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009022 04                         byte_878C:	dc.b 4
00009023 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009028 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000902D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009032 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009037 08                         byte_87A1:	dc.b 8
00009038 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000903D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009042 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009047 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000904C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009051 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009056 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000905B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009060                            		even
00009060                            		even
00009060                            
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj1C:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009070 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj1C_Main:				; XREF: Obj1C_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 7000                       		moveq	#0,d0
00009078 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000907C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009080 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009084 2159 0004                  		move.l	(a1)+,4(a0)
00009088 3159 0002                  		move.w	(a1)+,2(a0)
0000908C 0028 0004 0001             		ori.b	#4,1(a0)
00009092 1159 001A                  		move.b	(a1)+,$1A(a0)
00009096 1159 0019                  		move.b	(a1)+,$19(a0)
0000909A 1159 0018                  		move.b	(a1)+,$18(a0)
0000909E 1159 0020                  		move.b	(a1)+,$20(a0)
000090A2                            
000090A2                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000090A2 3028 0008                  		move.w	8(a0),d0
000090A6 0240 FF80                  		andi.w	#$FF80,d0
000090AA 3238 F700                  		move.w	($FFFFF700).w,d1
000090AE 0441 0080                  		subi.w	#$80,d1
000090B2 0241 FF80                  		andi.w	#$FF80,d1
000090B6 9041                       		sub.w	d1,d0
000090B8 0C40 0280                  		cmpi.w	#$280,d0
000090BC 6200 0000                  		bhi.w	DeleteObject
000090C0 6000 0000                  		bra.w	DisplaySprite
000090C4                            ; ===========================================================================
000090C4                            ; ---------------------------------------------------------------------------
000090C4                            ; Variables for	object $1C are stored in an array
000090C4                            ; ---------------------------------------------------------------------------
000090C4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000090C8 44D8                       		dc.w $44D8		; VRAM setting
000090CA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000090CE 0000 0000                  		dc.l Map_obj1C
000090D2 44D8                       		dc.w $44D8
000090D4 0008 0200                  		dc.b 0,	8, 2, 0
000090D8 0000 0000                  		dc.l Map_obj1C
000090DC 44D8                       		dc.w $44D8
000090DE 0008 0200                  		dc.b 0,	8, 2, 0
000090E2 0000 8144                  		dc.l Map_obj11
000090E6 438E                       		dc.w $438E
000090E8 0110 0100                  		dc.b 1,	$10, 1,	0
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            ; Sprite mappings - SLZ	lava thrower
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            Map_obj1C:
000090EC                            	include "_maps\obj1C.asm"
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            ; Sprite mappings - SLZ	lava thrower
000090EC                            ; ---------------------------------------------------------------------------
000090EC 0000                       		dc.w byte_8858-Map_obj1C
000090EE 01                         byte_8858:	dc.b 1
000090EF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090F4                            		even
000090F4                            		even
000090F4                            
000090F4                            ; ===========================================================================
000090F4                            ; ---------------------------------------------------------------------------
000090F4                            ; Object 1D - switch that activates when Sonic touches it
000090F4                            ; (this	is not used anywhere in	the game)
000090F4                            ; ---------------------------------------------------------------------------
000090F4                            
000090F4                            Obj1D:					; XREF: Obj_Index
000090F4 7000                       		moveq	#0,d0
000090F6 1028 0024                  		move.b	$24(a0),d0
000090FA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090FE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009102                            ; ===========================================================================
00009102 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009104 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009106 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009108                            ; ===========================================================================
00009108                            
00009108                            Obj1D_Main:				; XREF: Obj1D_Index
00009108 5428 0024                  		addq.b	#2,$24(a0)
0000910C 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009114 317C 4000 0002             		move.w	#$4000,2(a0)
0000911A 117C 0004 0001             		move.b	#4,1(a0)
00009120 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009126 117C 0010 0019             		move.b	#$10,$19(a0)
0000912C 117C 0005 0018             		move.b	#5,$18(a0)
00009132                            
00009132                            Obj1D_Action:				; XREF: Obj1D_Index
00009132 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009138 323C 0010                  		move.w	#$10,d1
0000913C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009140 6700                       		beq.s	Obj1D_ChkDel
00009142 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009146 7001                       		moveq	#1,d0
00009148 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000914C                            
0000914C                            Obj1D_ChkDel:
0000914C 6100 0000                  		bsr.w	DisplaySprite
00009150 3028 0008                  		move.w	8(a0),d0
00009154 0240 FF80                  		andi.w	#$FF80,d0
00009158 3238 F700                  		move.w	($FFFFF700).w,d1
0000915C 0441 0080                  		subi.w	#$80,d1
00009160 0241 FF80                  		andi.w	#$FF80,d1
00009164 9041                       		sub.w	d1,d0
00009166 0C40 0280                  		cmpi.w	#$280,d0
0000916A 6200 0000                  		bhi.w	Obj1D_Delete
0000916E 4E75                       		rts	
00009170                            ; ===========================================================================
00009170                            
00009170                            Obj1D_Delete:				; XREF: Obj1D_Index
00009170 6100 0000                  		bsr.w	DeleteObject
00009174 4E75                       		rts	
00009176                            ; ---------------------------------------------------------------------------
00009176                            ; Subroutine to	check if Sonic touches the object
00009176                            ; ---------------------------------------------------------------------------
00009176                            
00009176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009176                            
00009176                            
00009176                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009176 43F8 D000                  		lea	($FFFFD000).w,a1
0000917A 3029 0008                  		move.w	8(a1),d0
0000917E 9068 0008                  		sub.w	8(a0),d0
00009182 D041                       		add.w	d1,d0
00009184 6B00                       		bmi.s	loc_8918
00009186 D241                       		add.w	d1,d1
00009188 B041                       		cmp.w	d1,d0
0000918A 6400                       		bcc.s	loc_8918
0000918C 3429 000C                  		move.w	$C(a1),d2
00009190 1229 0016                  		move.b	$16(a1),d1
00009194 4881                       		ext.w	d1
00009196 D242                       		add.w	d2,d1
00009198 3028 000C                  		move.w	$C(a0),d0
0000919C 0440 0010                  		subi.w	#$10,d0
000091A0 9041                       		sub.w	d1,d0
000091A2 6200                       		bhi.s	loc_8918
000091A4 0C40 FFF0                  		cmpi.w	#-$10,d0
000091A8 6500                       		bcs.s	loc_8918
000091AA 70FF                       		moveq	#-1,d0
000091AC 4E75                       		rts	
000091AE                            ; ===========================================================================
000091AE                            
000091AE                            loc_8918:
000091AE 7000                       		moveq	#0,d0
000091B0 4E75                       		rts	
000091B2                            ; End of function Obj1D_ChkTouch
000091B2                            
000091B2                            ; ===========================================================================
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            ; Sprite mappings - object 1D
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            Map_obj1D:
000091B2                            	include "_maps\obj1D.asm"
000091B2                            ; ---------------------------------------------------------------------------
000091B2                            ; Sprite mappings - object 1D
000091B2                            ; ---------------------------------------------------------------------------
000091B2 0000                       		dc.w byte_891E-Map_obj1D
000091B4 04                         byte_891E:	dc.b 4
000091B5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000091BA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000091BF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000091C4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000091CA 00                         		even
000091CA 00                         		even
000091CA                            
000091CA                            ; ===========================================================================
000091CA                            ; ---------------------------------------------------------------------------
000091CA                            ; Object 2A - doors (SBZ)
000091CA                            ; ---------------------------------------------------------------------------
000091CA                            
000091CA                            Obj2A:					; XREF: Obj_Index
000091CA 7000                       		moveq	#0,d0
000091CC 1028 0024                  		move.b	$24(a0),d0
000091D0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000091D4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000091D8                            ; ===========================================================================
000091D8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000091DA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000091DC                            ; ===========================================================================
000091DC                            
000091DC                            Obj2A_Main:				; XREF: Obj2A_Index
000091DC 5428 0024                  		addq.b	#2,$24(a0)
000091E0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000091E8 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091EE 0028 0004 0001             		ori.b	#4,1(a0)
000091F4 117C 0008 0019             		move.b	#8,$19(a0)
000091FA 117C 0004 0018             		move.b	#4,$18(a0)
00009200                            
00009200                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009200 323C 0040                  		move.w	#$40,d1
00009204 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009208 3038 D008                  		move.w	($FFFFD008).w,d0
0000920C D041                       		add.w	d1,d0
0000920E B068 0008                  		cmp.w	8(a0),d0
00009212 6500                       		bcs.s	Obj2A_Animate
00009214 9041                       		sub.w	d1,d0
00009216 9041                       		sub.w	d1,d0
00009218 B068 0008                  		cmp.w	8(a0),d0
0000921C 6400                       		bcc.s	Obj2A_Animate
0000921E D041                       		add.w	d1,d0
00009220 B068 0008                  		cmp.w	8(a0),d0
00009224 6400                       		bcc.s	loc_899A
00009226 0828 0000 0022             		btst	#0,$22(a0)
0000922C 6600                       		bne.s	Obj2A_Animate
0000922E 6000                       		bra.s	Obj2A_Open
00009230                            ; ===========================================================================
00009230                            
00009230                            loc_899A:				; XREF: Obj2A_OpenShut
00009230 0828 0000 0022             		btst	#0,$22(a0)
00009236 6700                       		beq.s	Obj2A_Animate
00009238                            
00009238                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009238 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000923E                            
0000923E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000923E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009244 6100 0000                  		bsr.w	AnimateSprite
00009248 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000924C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000924E 323C 0011                  		move.w	#$11,d1
00009252 343C 0020                  		move.w	#$20,d2
00009256 3602                       		move.w	d2,d3
00009258 5243                       		addq.w	#1,d3
0000925A 3828 0008                  		move.w	8(a0),d4
0000925E 6100 0000                  		bsr.w	SolidObject
00009262                            
00009262                            Obj2A_MarkAsUsed:
00009262 6000 0000                  		bra.w	MarkObjGone
00009266                            ; ===========================================================================
00009266                            Ani_obj2A:
00009266                            	include "_anim\obj2A.asm"
00009266                            ; ---------------------------------------------------------------------------
00009266                            ; Animation script - doors (SBZ)
00009266                            ; ---------------------------------------------------------------------------
00009266 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009268 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000926A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009276 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009282                            		even
00009282                            		even
00009282                            
00009282                            ; ---------------------------------------------------------------------------
00009282                            ; Sprite mappings - doors (SBZ)
00009282                            ; ---------------------------------------------------------------------------
00009282                            Map_obj2A:
00009282                            	include "_maps\obj2A.asm"
00009282                            ; ---------------------------------------------------------------------------
00009282                            ; Sprite mappings - doors (SBZ)
00009282                            ; ---------------------------------------------------------------------------
00009282 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009286 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000928A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000928E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009292 0000                       		dc.w byte_8A56-Map_obj2A
00009294 02                         byte_89FE:	dc.b 2
00009295 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000929A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000929F 02                         byte_8A09:	dc.b 2
000092A0 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000092A5 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000092AA 02                         byte_8A14:	dc.b 2
000092AB D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000092B0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000092B5 02                         byte_8A1F:	dc.b 2
000092B6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000092BB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000092C0 02                         byte_8A2A:	dc.b 2
000092C1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000092C6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000092CB 02                         byte_8A35:	dc.b 2
000092CC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000092D1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000092D6 02                         byte_8A40:	dc.b 2
000092D7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000092DC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000092E1 02                         byte_8A4B:	dc.b 2
000092E2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000092E7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092EC 02                         byte_8A56:	dc.b 2
000092ED C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092F2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092F8 00                         		even
000092F8 00                         		even
000092F8                            
000092F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F8                            
000092F8                            
000092F8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092F8 6100 0000                  		bsr.w	Obj44_SolidWall2
000092FC 6700                       		beq.s	loc_8AA8
000092FE 6B00 0000                  		bmi.w	loc_8AC4
00009302 4A40                       		tst.w	d0
00009304 6700 0000                  		beq.w	loc_8A92
00009308 6B00                       		bmi.s	loc_8A7C
0000930A 4A69 0010                  		tst.w	$10(a1)
0000930E 6B00                       		bmi.s	loc_8A92
00009310 6000                       		bra.s	loc_8A82
00009312                            ; ===========================================================================
00009312                            
00009312                            loc_8A7C:
00009312 4A69 0010                  		tst.w	$10(a1)
00009316 6A00                       		bpl.s	loc_8A92
00009318                            
00009318                            loc_8A82:
00009318 9169 0008                  		sub.w	d0,8(a1)
0000931C 337C 0000 0014             		move.w	#0,$14(a1)
00009322 337C 0000 0010             		move.w	#0,$10(a1)
00009328                            
00009328                            loc_8A92:
00009328 0829 0001 0022             		btst	#1,$22(a1)
0000932E 6600                       		bne.s	loc_8AB6
00009330 08E9 0005 0022             		bset	#5,$22(a1)
00009336 08E8 0005 0022             		bset	#5,$22(a0)
0000933C 4E75                       		rts	
0000933E                            ; ===========================================================================
0000933E                            
0000933E                            loc_8AA8:
0000933E 0828 0005 0022             		btst	#5,$22(a0)
00009344 6700                       		beq.s	locret_8AC2
00009346 337C 0001 001C             		move.w	#1,$1C(a1)
0000934C                            
0000934C                            loc_8AB6:
0000934C 08A8 0005 0022             		bclr	#5,$22(a0)
00009352 08A9 0005 0022             		bclr	#5,$22(a1)
00009358                            
00009358                            locret_8AC2:
00009358 4E75                       		rts	
0000935A                            ; ===========================================================================
0000935A                            
0000935A                            loc_8AC4:
0000935A 4A69 0012                  		tst.w	$12(a1)
0000935E 6A00                       		bpl.s	locret_8AD8
00009360 4A43                       		tst.w	d3
00009362 6A00                       		bpl.s	locret_8AD8
00009364 9769 000C                  		sub.w	d3,$C(a1)
00009368 337C 0000 0012             		move.w	#0,$12(a1)
0000936E                            
0000936E                            locret_8AD8:
0000936E 4E75                       		rts	
00009370                            ; End of function Obj44_SolidWall
00009370                            
00009370                            
00009370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009370                            
00009370                            
00009370                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009370 43F8 D000                  		lea	($FFFFD000).w,a1
00009374 3029 0008                  		move.w	8(a1),d0
00009378 9068 0008                  		sub.w	8(a0),d0
0000937C D041                       		add.w	d1,d0
0000937E 6B00                       		bmi.s	loc_8B48
00009380 3601                       		move.w	d1,d3
00009382 D643                       		add.w	d3,d3
00009384 B043                       		cmp.w	d3,d0
00009386 6200                       		bhi.s	loc_8B48
00009388 1629 0016                  		move.b	$16(a1),d3
0000938C 4883                       		ext.w	d3
0000938E D443                       		add.w	d3,d2
00009390 3629 000C                  		move.w	$C(a1),d3
00009394 9668 000C                  		sub.w	$C(a0),d3
00009398 D642                       		add.w	d2,d3
0000939A 6B00                       		bmi.s	loc_8B48
0000939C 3802                       		move.w	d2,d4
0000939E D844                       		add.w	d4,d4
000093A0 B644                       		cmp.w	d4,d3
000093A2 6400                       		bcc.s	loc_8B48
000093A4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000093A8 6B00                       		bmi.s	loc_8B48
000093AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000093B0 6400                       		bcc.s	loc_8B48
000093B2 4A78 FE08                  		tst.w	($FFFFFE08).w
000093B6 6600                       		bne.s	loc_8B48
000093B8 3A00                       		move.w	d0,d5
000093BA B240                       		cmp.w	d0,d1
000093BC 6400                       		bcc.s	loc_8B30
000093BE D241                       		add.w	d1,d1
000093C0 9041                       		sub.w	d1,d0
000093C2 3A00                       		move.w	d0,d5
000093C4 4445                       		neg.w	d5
000093C6                            
000093C6                            loc_8B30:
000093C6 3203                       		move.w	d3,d1
000093C8 B443                       		cmp.w	d3,d2
000093CA 6400                       		bcc.s	loc_8B3C
000093CC 9644                       		sub.w	d4,d3
000093CE 3203                       		move.w	d3,d1
000093D0 4441                       		neg.w	d1
000093D2                            
000093D2                            loc_8B3C:
000093D2 BA41                       		cmp.w	d1,d5
000093D4 6200                       		bhi.s	loc_8B44
000093D6 7801                       		moveq	#1,d4
000093D8 4E75                       		rts	
000093DA                            ; ===========================================================================
000093DA                            
000093DA                            loc_8B44:
000093DA 78FF                       		moveq	#-1,d4
000093DC 4E75                       		rts	
000093DE                            ; ===========================================================================
000093DE                            
000093DE                            loc_8B48:
000093DE 7800                       		moveq	#0,d4
000093E0 4E75                       		rts	
000093E2                            ; End of function Obj44_SolidWall2
000093E2                            
000093E2                            ; ===========================================================================
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            ; Object 1E - Ball Hog enemy (SBZ)
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            
000093E2                            Obj1E:					; XREF: Obj_Index
000093E2 7000                       		moveq	#0,d0
000093E4 1028 0024                  		move.b	$24(a0),d0
000093E8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093EC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093F0                            ; ===========================================================================
000093F0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093F2 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093F4                            ; ===========================================================================
000093F4                            
000093F4                            Obj1E_Main:				; XREF: Obj1E_Index
000093F4 117C 0013 0016             		move.b	#$13,$16(a0)
000093FA 117C 0008 0017             		move.b	#8,$17(a0)
00009400 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009408 317C 2302 0002             		move.w	#$2302,2(a0)
0000940E 117C 0004 0001             		move.b	#4,1(a0)
00009414 117C 0004 0018             		move.b	#4,$18(a0)
0000941A 117C 0005 0020             		move.b	#5,$20(a0)
00009420 117C 000C 0019             		move.b	#$C,$19(a0)
00009426 6100 0000                  		bsr.w	ObjectFall
0000942A 4EB9 0000 0000             		jsr	ObjHitFloor
00009430 4A41                       		tst.w	d1
00009432 6A00                       		bpl.s	locret_8BAC
00009434 D368 000C                  		add.w	d1,$C(a0)
00009438 317C 0000 0012             		move.w	#0,$12(a0)
0000943E 5428 0024                  		addq.b	#2,$24(a0)
00009442                            
00009442                            locret_8BAC:
00009442 4E75                       		rts	
00009444                            ; ===========================================================================
00009444                            
00009444                            Obj1E_Action:				; XREF: Obj1E_Index
00009444 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000944A 6100 0000                  		bsr.w	AnimateSprite
0000944E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009454 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009456 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000945A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000945C 6000                       		bra.s	Obj1E_MarkAsGone
0000945E                            ; ===========================================================================
0000945E                            
0000945E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000945E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009462                            
00009462                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009462 6000 0000                  		bra.w	MarkObjGone
00009466                            ; ===========================================================================
00009466                            
00009466                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009466 117C 0001 0032             		move.b	#1,$32(a0)
0000946C 6100 0000                  		bsr.w	SingleObjLoad
00009470 6600                       		bne.s	loc_8C1A
00009472 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009476 3368 0008 0008             		move.w	8(a0),8(a1)
0000947C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009482 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009488 337C 0000 0012             		move.w	#0,$12(a1)
0000948E 70FC                       		moveq	#-4,d0
00009490 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009496 6700                       		beq.s	loc_8C0A	; if not, branch
00009498 4440                       		neg.w	d0
0000949A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000949E                            
0000949E                            loc_8C0A:
0000949E D169 0008                  		add.w	d0,8(a1)
000094A2 0669 000C 000C             		addi.w	#$C,$C(a1)
000094A8 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000094AE                            
000094AE                            loc_8C1A:
000094AE 60B2                       		bra.s	Obj1E_MarkAsGone
000094B0                            ; ===========================================================================
000094B0                            ; ---------------------------------------------------------------------------
000094B0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000094B0                            ; ---------------------------------------------------------------------------
000094B0                            
000094B0                            Obj20:					; XREF: Obj_Index
000094B0 7000                       		moveq	#0,d0
000094B2 1028 0024                  		move.b	$24(a0),d0
000094B6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000094BA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000094BE                            ; ===========================================================================
000094BE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000094C0 0000                       		dc.w Obj20_Bounce-Obj20_Index
000094C2                            ; ===========================================================================
000094C2                            
000094C2                            Obj20_Main:				; XREF: Obj20_Index
000094C2 5428 0024                  		addq.b	#2,$24(a0)
000094C6 117C 0007 0016             		move.b	#7,$16(a0)
000094CC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000094D4 317C 2302 0002             		move.w	#$2302,2(a0)
000094DA 117C 0004 0001             		move.b	#4,1(a0)
000094E0 117C 0003 0018             		move.b	#3,$18(a0)
000094E6 117C 0087 0020             		move.b	#$87,$20(a0)
000094EC 117C 0008 0019             		move.b	#8,$19(a0)
000094F2 7000                       		moveq	#0,d0
000094F4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094F8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094FC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009500 117C 0004 001A             		move.b	#4,$1A(a0)
00009506                            
00009506                            Obj20_Bounce:				; XREF: Obj20_Index
00009506 4EB9 0000 0000             		jsr	ObjectFall
0000950C 4A68 0012                  		tst.w	$12(a0)
00009510 6B00                       		bmi.s	Obj20_ChkExplode
00009512 4EB9 0000 0000             		jsr	ObjHitFloor
00009518 4A41                       		tst.w	d1
0000951A 6A00                       		bpl.s	Obj20_ChkExplode
0000951C D368 000C                  		add.w	d1,$C(a0)
00009520 317C FD00 0012             		move.w	#-$300,$12(a0)
00009526 4A03                       		tst.b	d3
00009528 6700                       		beq.s	Obj20_ChkExplode
0000952A 6B00                       		bmi.s	loc_8CA4
0000952C 4A68 0010                  		tst.w	$10(a0)
00009530 6A00                       		bpl.s	Obj20_ChkExplode
00009532 4468 0010                  		neg.w	$10(a0)
00009536 6000                       		bra.s	Obj20_ChkExplode
00009538                            ; ===========================================================================
00009538                            
00009538                            loc_8CA4:				; XREF: Obj20_Bounce
00009538 4A68 0010                  		tst.w	$10(a0)
0000953C 6B00                       		bmi.s	Obj20_ChkExplode
0000953E 4468 0010                  		neg.w	$10(a0)
00009542                            
00009542                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009542 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009546 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009548 10BC 0024                  		move.b	#$24,0(a0)
0000954C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009550 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009556 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000955A                            ; ===========================================================================
0000955A                            
0000955A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000955A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000955E 6A00                       		bpl.s	Obj20_Display
00009560 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009566 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000956C                            
0000956C                            Obj20_Display:
0000956C 6100 0000                  		bsr.w	DisplaySprite
00009570 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009574 0640 00E0                  		addi.w	#$E0,d0
00009578 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000957C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009580 4E75                       		rts	
00009582                            ; ===========================================================================
00009582                            ; ---------------------------------------------------------------------------
00009582                            ; Object 24 - explosion	from a destroyed monitor
00009582                            ; ---------------------------------------------------------------------------
00009582                            
00009582                            Obj24:					; XREF: Obj_Index
00009582 7000                       		moveq	#0,d0
00009584 1028 0024                  		move.b	$24(a0),d0
00009588 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000958C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009590                            ; ===========================================================================
00009590 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009592 0000                       		dc.w Obj24_Animate-Obj24_Index
00009594                            ; ===========================================================================
00009594                            
00009594                            Obj24_Main:				; XREF: Obj24_Index
00009594 5428 0024                  		addq.b	#2,$24(a0)
00009598 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000095A0 317C 041C 0002             		move.w	#$41C,2(a0)
000095A6 117C 0004 0001             		move.b	#4,1(a0)
000095AC 117C 0001 0018             		move.b	#1,$18(a0)
000095B2 117C 0000 0020             		move.b	#0,$20(a0)
000095B8 117C 000C 0019             		move.b	#$C,$19(a0)
000095BE 117C 0009 001E             		move.b	#9,$1E(a0)
000095C4 117C 0000 001A             		move.b	#0,$1A(a0)
000095CA 303C 00A5                  		move.w	#$A5,d0
000095CE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play explosion sound
000095D4                            
000095D4                            Obj24_Animate:				; XREF: Obj24_Index
000095D4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000095D8 6A00                       		bpl.s	Obj24_Display
000095DA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000095E0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000095E4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095EA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095EE                            
000095EE                            Obj24_Display:
000095EE 6000 0000                  		bra.w	DisplaySprite
000095F2                            ; ===========================================================================
000095F2                            ; ---------------------------------------------------------------------------
000095F2                            ; Object 27 - explosion	from a destroyed enemy
000095F2                            ; ---------------------------------------------------------------------------
000095F2                            
000095F2                            Obj27:					; XREF: Obj_Index
000095F2 7000                       		moveq	#0,d0
000095F4 1028 0024                  		move.b	$24(a0),d0
000095F8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095FC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009600                            ; ===========================================================================
00009600 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009602 0000                       		dc.w Obj27_Main-Obj27_Index
00009604 0000                       		dc.w Obj27_Animate-Obj27_Index
00009606                            ; ===========================================================================
00009606                            
00009606                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009606 5428 0024                  		addq.b	#2,$24(a0)
0000960A 6100 0000                  		bsr.w	SingleObjLoad
0000960E 6600                       		bne.s	Obj27_Main
00009610 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009614 3368 0008 0008             		move.w	8(a0),8(a1)
0000961A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009620 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009626                            
00009626                            Obj27_Main:				; XREF: Obj27_Index
00009626 5428 0024                  		addq.b	#2,$24(a0)
0000962A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009632 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009638 117C 0004 0001             		move.b	#4,1(a0)
0000963E 117C 0001 0018             		move.b	#1,$18(a0)
00009644 117C 0000 0020             		move.b	#0,$20(a0)
0000964A 117C 000C 0019             		move.b	#$C,$19(a0)
00009650                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009650 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009656 117C 0000 001A             		move.b	#0,$1A(a0)
0000965C 303C 00C1                  		move.w	#$C1,d0
00009660 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009666                            
00009666 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000966C 1028 0028                  		move.b	$28(a0),d0
00009670 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009676 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000967C                            
0000967C                            Obj27_Animate:				; XREF: Obj27_Index
0000967C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009680 6A00                       		bpl.s	Obj27_Display
00009682                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009682 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009688 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000968C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009692 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009696                            
00009696                            Obj27_Display:
00009696 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000969C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000096A2 6000 0000                  		bra.w	DisplaySprite
000096A6                            ; ===========================================================================
000096A6                            ; ---------------------------------------------------------------------------
000096A6                            Obj27_ExplosionXYSpd:
000096A6                            		; dc.w	-$350, -$300	; Left
000096A6                            		; dc.w	-$200, -$450	; Near middle (left)
000096A6                            		; dc.w	0, -$500	; Middle
000096A6                            		; dc.w	$200, -$450	; Near middle (right)
000096A6                            		; dc.w	$350, -$300	; Right
000096A6                            
000096A6 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000096AA FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000096AE 0000 FA00                  		dc.w	0, -$600	; Middle
000096B2 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000096B6 0150 FC00                  		dc.w	$150, -$400	; Right
000096BA                            
000096BA 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000096D4                            ; ---------------------------------------------------------------------------
000096D4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000096D4                            ; ---------------------------------------------------------------------------
000096D4                            
000096D4                            Obj3F:					; XREF: Obj_Index
000096D4 7000                       		moveq	#0,d0
000096D6 1028 0024                  		move.b	$24(a0),d0
000096DA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000096DE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000096E2                            ; ===========================================================================
000096E2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000096E4 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000096E6                            ; ===========================================================================
000096E6                            
000096E6                            Obj3F_Main:				; XREF: Obj3F_Index
000096E6 5428 0024                  		addq.b	#2,$24(a0)
000096EA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096F2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096F8 117C 0004 0001             		move.b	#4,1(a0)
000096FE 117C 0001 0018             		move.b	#1,$18(a0)
00009704 117C 0000 0020             		move.b	#0,$20(a0)
0000970A 117C 000C 0019             		move.b	#$C,$19(a0)
00009710 117C 0007 001E             		move.b	#7,$1E(a0)
00009716 117C 0000 001A             		move.b	#0,$1A(a0)
0000971C 303C 00C4                  		move.w	#$C4,d0
00009720 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009726                            ; ===========================================================================
00009726                            Ani_obj1E:
00009726                            	include "_anim\obj1E.asm"
00009726                            ; ---------------------------------------------------------------------------
00009726                            ; Animation script - doors (SBZ)
00009726                            ; ---------------------------------------------------------------------------
00009726 0000                       		dc.w byte_8E4A-Ani_obj1E
00009728 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009740 00                         		even
00009740 00                         		even
00009740                            
00009740                            ; ---------------------------------------------------------------------------
00009740                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009740                            ; ---------------------------------------------------------------------------
00009740                            Map_obj1E:
00009740                            	include "_maps\obj1E.asm"
00009740                            Map_a7ad:
00009740 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009742 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009744 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009746 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009748 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
0000974A 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000974C 02                         Map_a7ad_C: 	dc.b $2
0000974D EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009752 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009757 02                         Map_a7ad_17: 	dc.b $2
00009758 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000975D FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009762 02                         Map_a7ad_22: 	dc.b $2
00009763 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009768 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000976D 02                         Map_a7ad_2D: 	dc.b $2
0000976E E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009773 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009778 02                         Map_a7ad_38: 	dc.b $2
00009779 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
0000977E E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009783 02                         Map_a7ad_43: 	dc.b $2
00009784 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009789 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
0000978E                            	even
0000978E                            	even
0000978E                            
0000978E                            ; ---------------------------------------------------------------------------
0000978E                            ; Sprite mappings - explosion
0000978E                            ; ---------------------------------------------------------------------------
0000978E                            Map_obj24:
0000978E                            	include "_maps\obj24.asm"
0000978E                            ; ---------------------------------------------------------------------------
0000978E                            ; Sprite mappings - explosion
0000978E                            ; ---------------------------------------------------------------------------
0000978E 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009792 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009796 01                         byte_8EAE:	dc.b 1
00009797 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000979C 01                         byte_8EB4:	dc.b 1
0000979D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000097A2 01                         byte_8EBA:	dc.b 1
000097A3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000097A8 01                         byte_8EC0:	dc.b 1
000097A9 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000097AE                            		even
000097AE                            		even
000097AE                            
000097AE                            ; ---------------------------------------------------------------------------
000097AE                            ; Sprite mappings - explosion
000097AE                            ; ---------------------------------------------------------------------------
000097AE 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000097B2 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000097B6 0000                       		dc.w byte_8EF7-Map_obj27
000097B8 01                         byte_8ED0:	dc.b 1
000097B9 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000097BE 01                         byte_8ED6:	dc.b 1
000097BF F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000097C4 01                         byte_8EDC:	dc.b 1
000097C5 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000097CA 04                         byte_8EE2:	dc.b 4
000097CB EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000097D0 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000097D5 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000097DA FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000097DF 04                         byte_8EF7:	dc.b 4
000097E0 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000097E5 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097EA 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097EF FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097F4                            		even
000097F4                            ; ---------------------------------------------------------------------------
000097F4                            ; Sprite mappings - explosion from when	a boss is destroyed
000097F4                            ; ---------------------------------------------------------------------------
000097F4 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097F6 0000                       		dc.w byte_8F16-Map_obj3F
000097F8 0000                       		dc.w byte_8F1C-Map_obj3F
000097FA FFD6                       		dc.w byte_8EE2-Map_obj3F
000097FC FFEB                       		dc.w byte_8EF7-Map_obj3F
000097FE 01                         byte_8F16:	dc.b 1
000097FF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009804 01                         byte_8F1C:	dc.b 1
00009805 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000980A                            		even
0000980A                            ; ===========================================================================
0000980A                            ; ---------------------------------------------------------------------------
0000980A                            ; Object 28 - animals
0000980A                            ; ---------------------------------------------------------------------------
0000980A                            
0000980A                            Obj28:					; XREF: Obj_Index
0000980A 7000                       		moveq	#0,d0
0000980C 1028 0024                  		move.b	$24(a0),d0
00009810 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009814 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009818                            ; ===========================================================================
00009818 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000981C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009820 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009824 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009828 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000982C 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009830 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009834 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009838 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000983C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009840 0000                       		dc.w loc_92D6-Obj28_Index
00009842                            
00009842 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009852                            
00009852 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009856 0000 0000                  		dc.l Map_obj28
0000985A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000985E 0000 0000                  		dc.l Map_obj28a		; mappings address
00009862 FE80 FD00                  		dc.w $FE80, $FD00
00009866 0000 0000                  		dc.l Map_obj28
0000986A FEC0 FE80                  		dc.w $FEC0, $FE80
0000986E 0000 0000                  		dc.l Map_obj28a
00009872 FE40 FD00                  		dc.w $FE40, $FD00
00009876 0000 0000                  		dc.l Map_obj28b
0000987A FD00 FC00                  		dc.w $FD00, $FC00
0000987E 0000 0000                  		dc.l Map_obj28a
00009882 FD80 FC80                  		dc.w $FD80, $FC80
00009886 0000 0000                  		dc.l Map_obj28b
0000988A                            
0000988A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000989A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000098AA FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000098B6                            
000098B6 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000098CA 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000098DE 0000 0000                  		dc.l Map_obj28b
000098E2                            
000098E2 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098F4 0565 05B3                  		dc.w $565, $5B3
000098F8                            ; ===========================================================================
000098F8                            
000098F8                            Obj28_Ending:				; XREF: Obj28_Index
000098F8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098FC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009900 7000                       		moveq	#0,d0
00009902 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009906 D040                       		add.w	d0,d0		; multiply d0 by 2
00009908 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000990C 0440 0014                  		subi.w	#$14,d0
00009910 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009916 D040                       		add.w	d0,d0
00009918 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000991E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009922 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009928 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000992E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009934 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000993A 117C 000C 0016             		move.b	#$C,$16(a0)
00009940 117C 0004 0001             		move.b	#4,1(a0)
00009946 08E8 0000 0001             		bset	#0,1(a0)
0000994C 117C 0006 0018             		move.b	#6,$18(a0)
00009952 117C 0008 0019             		move.b	#8,$19(a0)
00009958 117C 0007 001E             		move.b	#7,$1E(a0)
0000995E 6000 0000                  		bra.w	DisplaySprite
00009962                            ; ===========================================================================
00009962                            
00009962                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009962 5428 0024                  		addq.b	#2,$24(a0)
00009966 6100 93AC                  		bsr.w	RandomNumber
0000996A 0240 0001                  		andi.w	#1,d0
0000996E 7200                       		moveq	#0,d1
00009970 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009974 D241                       		add.w	d1,d1
00009976 D240                       		add.w	d0,d1
00009978 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000997C 1031 1000                  		move.b	(a1,d1.w),d0
00009980 1140 0030                  		move.b	d0,$30(a0)
00009984 E748                       		lsl.w	#3,d0
00009986 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000998A D2C0                       		adda.w	d0,a1
0000998C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009990 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009994 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009998 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000999E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000099A4 6700                       		beq.s	loc_90C0	; if yes, branch
000099A6 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000099AC                            
000099AC                            loc_90C0:
000099AC 117C 000C 0016             		move.b	#$C,$16(a0)
000099B2 117C 0004 0001             		move.b	#4,1(a0)
000099B8 08E8 0000 0001             		bset	#0,1(a0)
000099BE 117C 0006 0018             		move.b	#6,$18(a0)
000099C4 117C 0008 0019             		move.b	#8,$19(a0)
000099CA 117C 0007 001E             		move.b	#7,$1E(a0)
000099D0 117C 0002 001A             		move.b	#2,$1A(a0)
000099D6 317C FC00 0012             		move.w	#-$400,$12(a0)
000099DC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000099E0 6600                       		bne.s	loc_911C
000099E2 6100 0000                  		bsr.w	SingleObjLoad
000099E6 6600                       		bne.s	Obj28_Display
000099E8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099EC 3368 0008 0008             		move.w	8(a0),8(a1)
000099F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099F8 3028 003E                  		move.w	$3E(a0),d0
000099FC E248                       		lsr.w	#1,d0
000099FE 1340 001A                  		move.b	d0,$1A(a1)
00009A02                            
00009A02                            Obj28_Display:
00009A02 6000 0000                  		bra.w	DisplaySprite
00009A06                            ; ===========================================================================
00009A06                            
00009A06                            loc_911C:
00009A06 117C 0012 0024             		move.b	#$12,$24(a0)
00009A0C 4268 0010                  		clr.w	$10(a0)
00009A10 6000 0000                  		bra.w	DisplaySprite
00009A14                            ; ===========================================================================
00009A14                            
00009A14                            loc_912A:				; XREF: Obj28_Index
00009A14 4A28 0001                  		tst.b	1(a0)
00009A18 6A00 0000                  		bpl.w	DeleteObject
00009A1C 6100 0000                  		bsr.w	ObjectFall
00009A20 4A68 0012                  		tst.w	$12(a0)
00009A24 6B00                       		bmi.s	loc_9180
00009A26 4EB9 0000 0000             		jsr	ObjHitFloor
00009A2C 4A41                       		tst.w	d1
00009A2E 6A00                       		bpl.s	loc_9180
00009A30 D368 000C                  		add.w	d1,$C(a0)
00009A34 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A40 117C 0001 001A             		move.b	#1,$1A(a0)
00009A46 1028 0030                  		move.b	$30(a0),d0
00009A4A D000                       		add.b	d0,d0
00009A4C 5800                       		addq.b	#4,d0
00009A4E 1140 0024                  		move.b	d0,$24(a0)
00009A52 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A56 6700                       		beq.s	loc_9180
00009A58 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A5E 6700                       		beq.s	loc_9180
00009A60 4468 0010                  		neg.w	$10(a0)
00009A64 0868 0000 0001             		bchg	#0,1(a0)
00009A6A                            
00009A6A                            loc_9180:
00009A6A 6000 0000                  		bra.w	DisplaySprite
00009A6E                            ; ===========================================================================
00009A6E                            
00009A6E                            loc_9184:				; XREF: Obj28_Index
00009A6E 6100 0000                  		bsr.w	ObjectFall
00009A72 117C 0001 001A             		move.b	#1,$1A(a0)
00009A78 4A68 0012                  		tst.w	$12(a0)
00009A7C 6B00                       		bmi.s	loc_91AE
00009A7E 117C 0000 001A             		move.b	#0,$1A(a0)
00009A84 4EB9 0000 0000             		jsr	ObjHitFloor
00009A8A 4A41                       		tst.w	d1
00009A8C 6A00                       		bpl.s	loc_91AE
00009A8E D368 000C                  		add.w	d1,$C(a0)
00009A92 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A98                            
00009A98                            loc_91AE:
00009A98 4A28 0028                  		tst.b	$28(a0)
00009A9C 6600                       		bne.s	loc_9224
00009A9E 4A28 0001                  		tst.b	1(a0)
00009AA2 6A00 0000                  		bpl.w	DeleteObject
00009AA6 6000 0000                  		bra.w	DisplaySprite
00009AAA                            ; ===========================================================================
00009AAA                            
00009AAA                            loc_91C0:				; XREF: Obj28_Index
00009AAA 6100 0000                  		bsr.w	SpeedToPos
00009AAE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AB4 4A68 0012                  		tst.w	$12(a0)
00009AB8 6B00                       		bmi.s	loc_91FC
00009ABA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AC0 4A41                       		tst.w	d1
00009AC2 6A00                       		bpl.s	loc_91FC
00009AC4 D368 000C                  		add.w	d1,$C(a0)
00009AC8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009ACE 4A28 0028                  		tst.b	$28(a0)
00009AD2 6700                       		beq.s	loc_91FC
00009AD4 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009ADA 6700                       		beq.s	loc_91FC
00009ADC 4468 0010                  		neg.w	$10(a0)
00009AE0 0868 0000 0001             		bchg	#0,1(a0)
00009AE6                            
00009AE6                            loc_91FC:
00009AE6 5328 001E                  		subq.b	#1,$1E(a0)
00009AEA 6A00                       		bpl.s	loc_9212
00009AEC 117C 0001 001E             		move.b	#1,$1E(a0)
00009AF2 5228 001A                  		addq.b	#1,$1A(a0)
00009AF6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AFC                            
00009AFC                            loc_9212:
00009AFC 4A28 0028                  		tst.b	$28(a0)
00009B00 6600                       		bne.s	loc_9224
00009B02 4A28 0001                  		tst.b	1(a0)
00009B06 6A00 0000                  		bpl.w	DeleteObject
00009B0A 6000 0000                  		bra.w	DisplaySprite
00009B0E                            ; ===========================================================================
00009B0E                            
00009B0E                            loc_9224:				; XREF: Obj28_Index
00009B0E 3028 0008                  		move.w	8(a0),d0
00009B12 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B16 6500                       		bcs.s	loc_923C
00009B18 0440 0180                  		subi.w	#$180,d0
00009B1C 6A00                       		bpl.s	loc_923C
00009B1E 4A28 0001                  		tst.b	1(a0)
00009B22 6A00 0000                  		bpl.w	DeleteObject
00009B26                            
00009B26                            loc_923C:
00009B26 6000 0000                  		bra.w	DisplaySprite
00009B2A                            ; ===========================================================================
00009B2A                            
00009B2A                            loc_9240:				; XREF: Obj28_Index
00009B2A 4A28 0001                  		tst.b	1(a0)
00009B2E 6A00 0000                  		bpl.w	DeleteObject
00009B32 5368 0036                  		subq.w	#1,$36(a0)
00009B36 6600 0000                  		bne.w	loc_925C
00009B3A 117C 0002 0024             		move.b	#2,$24(a0)
00009B40 117C 0003 0018             		move.b	#3,$18(a0)
00009B46                            
00009B46                            loc_925C:
00009B46 6000 0000                  		bra.w	DisplaySprite
00009B4A                            ; ===========================================================================
00009B4A                            
00009B4A                            loc_9260:				; XREF: Obj28_Index
00009B4A 6100 0000                  		bsr.w	sub_9404
00009B4E 6400                       		bcc.s	loc_927C
00009B50 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B56 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B5C 117C 000E 0024             		move.b	#$E,$24(a0)
00009B62 6000 FF46                  		bra.w	loc_91C0
00009B66                            ; ===========================================================================
00009B66                            
00009B66                            loc_927C:
00009B66 6000 FFA6                  		bra.w	loc_9224
00009B6A                            ; ===========================================================================
00009B6A                            
00009B6A                            loc_9280:				; XREF: Obj28_Index
00009B6A 6100 0000                  		bsr.w	sub_9404
00009B6E 6A00                       		bpl.s	loc_92B6
00009B70 4268 0010                  		clr.w	$10(a0)
00009B74 4268 0032                  		clr.w	$32(a0)
00009B78 6100 0000                  		bsr.w	SpeedToPos
00009B7C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B82 6100 0000                  		bsr.w	loc_93C4
00009B86 6100 0000                  		bsr.w	loc_93EC
00009B8A 5328 001E                  		subq.b	#1,$1E(a0)
00009B8E 6A00                       		bpl.s	loc_92B6
00009B90 117C 0001 001E             		move.b	#1,$1E(a0)
00009B96 5228 001A                  		addq.b	#1,$1A(a0)
00009B9A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009BA0                            
00009BA0                            loc_92B6:
00009BA0 6000 FF6C                  		bra.w	loc_9224
00009BA4                            ; ===========================================================================
00009BA4                            
00009BA4                            loc_92BA:				; XREF: Obj28_Index
00009BA4 6100 0000                  		bsr.w	sub_9404
00009BA8 6A00                       		bpl.s	loc_9310
00009BAA 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BB0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BB6 117C 0004 0024             		move.b	#4,$24(a0)
00009BBC 6000 FEB0                  		bra.w	loc_9184
00009BC0                            ; ===========================================================================
00009BC0                            
00009BC0                            loc_92D6:				; XREF: Obj28_Index
00009BC0 6100 0000                  		bsr.w	ObjectFall
00009BC4 117C 0001 001A             		move.b	#1,$1A(a0)
00009BCA 4A68 0012                  		tst.w	$12(a0)
00009BCE 6B00                       		bmi.s	loc_9310
00009BD0 117C 0000 001A             		move.b	#0,$1A(a0)
00009BD6 4EB9 0000 0000             		jsr	ObjHitFloor
00009BDC 4A41                       		tst.w	d1
00009BDE 6A00                       		bpl.s	loc_9310
00009BE0 4628 0029                  		not.b	$29(a0)
00009BE4 6600                       		bne.s	loc_9306
00009BE6 4468 0010                  		neg.w	$10(a0)
00009BEA 0868 0000 0001             		bchg	#0,1(a0)
00009BF0                            
00009BF0                            loc_9306:
00009BF0 D368 000C                  		add.w	d1,$C(a0)
00009BF4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BFA                            
00009BFA                            loc_9310:
00009BFA 6000 FF12                  		bra.w	loc_9224
00009BFE                            ; ===========================================================================
00009BFE                            
00009BFE                            loc_9314:				; XREF: Obj28_Index
00009BFE 6100 0000                  		bsr.w	sub_9404
00009C02 6A00                       		bpl.s	loc_932E
00009C04 4268 0010                  		clr.w	$10(a0)
00009C08 4268 0032                  		clr.w	$32(a0)
00009C0C 6100 0000                  		bsr.w	ObjectFall
00009C10 6100 0000                  		bsr.w	loc_93C4
00009C14 6100 0000                  		bsr.w	loc_93EC
00009C18                            
00009C18                            loc_932E:
00009C18 6000 FEF4                  		bra.w	loc_9224
00009C1C                            ; ===========================================================================
00009C1C                            
00009C1C                            loc_9332:				; XREF: Obj28_Index
00009C1C 6100 0000                  		bsr.w	sub_9404
00009C20 6A00                       		bpl.s	loc_936C
00009C22 6100 0000                  		bsr.w	ObjectFall
00009C26 117C 0001 001A             		move.b	#1,$1A(a0)
00009C2C 4A68 0012                  		tst.w	$12(a0)
00009C30 6B00                       		bmi.s	loc_936C
00009C32 117C 0000 001A             		move.b	#0,$1A(a0)
00009C38 4EB9 0000 0000             		jsr	ObjHitFloor
00009C3E 4A41                       		tst.w	d1
00009C40 6A00                       		bpl.s	loc_936C
00009C42 4468 0010                  		neg.w	$10(a0)
00009C46 0868 0000 0001             		bchg	#0,1(a0)
00009C4C D368 000C                  		add.w	d1,$C(a0)
00009C50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C56                            
00009C56                            loc_936C:
00009C56 6000 FEB6                  		bra.w	loc_9224
00009C5A                            ; ===========================================================================
00009C5A                            
00009C5A                            loc_9370:				; XREF: Obj28_Index
00009C5A 6100 0000                  		bsr.w	sub_9404
00009C5E 6A00                       		bpl.s	loc_93C0
00009C60 6100 0000                  		bsr.w	SpeedToPos
00009C64 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C6A 4A68 0012                  		tst.w	$12(a0)
00009C6E 6B00                       		bmi.s	loc_93AA
00009C70 4EB9 0000 0000             		jsr	ObjHitFloor
00009C76 4A41                       		tst.w	d1
00009C78 6A00                       		bpl.s	loc_93AA
00009C7A 4628 0029                  		not.b	$29(a0)
00009C7E 6600                       		bne.s	loc_93A0
00009C80 4468 0010                  		neg.w	$10(a0)
00009C84 0868 0000 0001             		bchg	#0,1(a0)
00009C8A                            
00009C8A                            loc_93A0:
00009C8A D368 000C                  		add.w	d1,$C(a0)
00009C8E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C94                            
00009C94                            loc_93AA:
00009C94 5328 001E                  		subq.b	#1,$1E(a0)
00009C98 6A00                       		bpl.s	loc_93C0
00009C9A 117C 0001 001E             		move.b	#1,$1E(a0)
00009CA0 5228 001A                  		addq.b	#1,$1A(a0)
00009CA4 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CAA                            
00009CAA                            loc_93C0:
00009CAA 6000 FE62                  		bra.w	loc_9224
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            loc_93C4:
00009CAE 117C 0001 001A             		move.b	#1,$1A(a0)
00009CB4 4A68 0012                  		tst.w	$12(a0)
00009CB8 6B00                       		bmi.s	locret_93EA
00009CBA 117C 0000 001A             		move.b	#0,$1A(a0)
00009CC0 4EB9 0000 0000             		jsr	ObjHitFloor
00009CC6 4A41                       		tst.w	d1
00009CC8 6A00                       		bpl.s	locret_93EA
00009CCA D368 000C                  		add.w	d1,$C(a0)
00009CCE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CD4                            
00009CD4                            locret_93EA:
00009CD4 4E75                       		rts	
00009CD6                            ; ===========================================================================
00009CD6                            
00009CD6                            loc_93EC:
00009CD6 08E8 0000 0001             		bset	#0,1(a0)
00009CDC 3028 0008                  		move.w	8(a0),d0
00009CE0 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CE4 6400                       		bcc.s	locret_9402
00009CE6 08A8 0000 0001             		bclr	#0,1(a0)
00009CEC                            
00009CEC                            locret_9402:
00009CEC 4E75                       		rts	
00009CEE                            
00009CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CEE                            
00009CEE                            
00009CEE                            sub_9404:
00009CEE 3038 D008                  		move.w	($FFFFD008).w,d0
00009CF2 9068 0008                  		sub.w	8(a0),d0
00009CF6 0440 00B8                  		subi.w	#$B8,d0
00009CFA 4E75                       		rts	
00009CFC                            ; End of function sub_9404
00009CFC                            
00009CFC                            ; ===========================================================================
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Object 29 - points that appear when you destroy something
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            
00009CFC                            Obj29:					; XREF: Obj_Index
00009CFC 7000                       		moveq	#0,d0
00009CFE 1028 0024                  		move.b	$24(a0),d0
00009D02 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009D06 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009D0A 6000 0000                  		bra.w	DisplaySprite
00009D0E                            ; ===========================================================================
00009D0E 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009D10 0000                       		dc.w Obj29_Slower-Obj29_Index
00009D12                            ; ===========================================================================
00009D12                            
00009D12                            Obj29_Main:				; XREF: Obj29_Index
00009D12 5428 0024                  		addq.b	#2,$24(a0)
00009D16 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009D1E 317C 2797 0002             		move.w	#$2797,2(a0)
00009D24 117C 0004 0001             		move.b	#4,1(a0)
00009D2A 117C 0001 0018             		move.b	#1,$18(a0)
00009D30 117C 0008 0019             		move.b	#8,$19(a0)
00009D36 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009D3C                            
00009D3C                            Obj29_Slower:				; XREF: Obj29_Index
00009D3C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009D40 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009D44 6100 0000                  		bsr.w	SpeedToPos
00009D48 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D4E 4E75                       		rts	
00009D50                            ; ===========================================================================
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            ; Sprite mappings - animals
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            Map_obj28:
00009D50                            	include "_maps\obj28.asm"
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            ; Sprite mappings - animals
00009D50                            ; ---------------------------------------------------------------------------
00009D50 0000                       		dc.w byte_9472-Map_obj28
00009D52 0000                       		dc.w byte_9478-Map_obj28
00009D54 0000                       		dc.w byte_946C-Map_obj28
00009D56 01                         byte_946C:	dc.b 1
00009D57 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D5C 01                         byte_9472:	dc.b 1
00009D5D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D62 01                         byte_9478:	dc.b 1
00009D63 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D68                            		even
00009D68                            		even
00009D68                            
00009D68                            Map_obj28a:
00009D68                            	include "_maps\obj28a.asm"
00009D68                            ; ---------------------------------------------------------------------------
00009D68                            ; Sprite mappings - animals
00009D68                            ; ---------------------------------------------------------------------------
00009D68 0000                       		dc.w byte_948A-Map_obj28a
00009D6A 0000                       		dc.w byte_9490-Map_obj28a
00009D6C 0000                       		dc.w byte_9484-Map_obj28a
00009D6E 01                         byte_9484:	dc.b 1
00009D6F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D74 01                         byte_948A:	dc.b 1
00009D75 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D7A 01                         byte_9490:	dc.b 1
00009D7B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D80                            		even
00009D80                            		even
00009D80                            
00009D80                            Map_obj28b:
00009D80                            	include "_maps\obj28b.asm"
00009D80                            ; ---------------------------------------------------------------------------
00009D80                            ; Sprite mappings - animals
00009D80                            ; ---------------------------------------------------------------------------
00009D80 0000                       		dc.w byte_94A2-Map_obj28b
00009D82 0000                       		dc.w byte_94A8-Map_obj28b
00009D84 0000                       		dc.w byte_949C-Map_obj28b
00009D86 01                         byte_949C:	dc.b 1
00009D87 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D8C 01                         byte_94A2:	dc.b 1
00009D8D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D92 01                         byte_94A8:	dc.b 1
00009D93 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D98                            		even
00009D98                            		even
00009D98                            
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            ; Sprite mappings - points that	appear when you	destroy	something
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            Map_obj29:
00009D98                            	include "_maps\obj29.asm"
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            ; Sprite mappings - points that	appear when you	destroy	something
00009D98                            ; ---------------------------------------------------------------------------
00009D98 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D9C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009DA0 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009DA4 0000                       		dc.w byte_94E5-Map_obj29
00009DA6 01                         byte_94BC:	dc.b 1
00009DA7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009DAC 01                         byte_94C2:	dc.b 1
00009DAD FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009DB2 01                         byte_94C8:	dc.b 1
00009DB3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009DB8 01                         byte_94CE:	dc.b 1
00009DB9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009DBE 01                         byte_94D4:	dc.b 1
00009DBF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009DC4 02                         byte_94DA:	dc.b 2
00009DC5 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009DCA FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009DCF 02                         byte_94E5:	dc.b 2
00009DD0 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009DD5 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009DDA                            		even
00009DDA                            		even
00009DDA                            
00009DDA                            ; ===========================================================================
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            
00009DDA                            Obj1F:					; XREF: Obj_Index
00009DDA 7000                       		moveq	#0,d0
00009DDC 1028 0024                  		move.b	$24(a0),d0
00009DE0 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009DE4 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009DE8                            ; ===========================================================================
00009DE8 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DEA 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DEC 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DEE 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DF0 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DF2                            ; ===========================================================================
00009DF2                            
00009DF2                            Obj1F_Main:				; XREF: Obj1F_Index
00009DF2 117C 0010 0016             		move.b	#$10,$16(a0)
00009DF8 117C 0008 0017             		move.b	#8,$17(a0)
00009DFE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009E06 317C 0400 0002             		move.w	#$400,2(a0)
00009E0C 117C 0004 0001             		move.b	#4,1(a0)
00009E12 117C 0003 0018             		move.b	#3,$18(a0)
00009E18 117C 0006 0020             		move.b	#6,$20(a0)
00009E1E 117C 0015 0019             		move.b	#$15,$19(a0)
00009E24 6100 0000                  		bsr.w	ObjectFall
00009E28 4EB9 0000 0000             		jsr	ObjHitFloor
00009E2E 4A41                       		tst.w	d1
00009E30 6A00                       		bpl.s	locret_955A
00009E32 D368 000C                  		add.w	d1,$C(a0)
00009E36 1143 0026                  		move.b	d3,$26(a0)
00009E3A 317C 0000 0012             		move.w	#0,$12(a0)
00009E40 5428 0024                  		addq.b	#2,$24(a0)
00009E44                            
00009E44                            locret_955A:
00009E44 4E75                       		rts	
00009E46                            ; ===========================================================================
00009E46                            
00009E46                            Obj1F_Action:				; XREF: Obj1F_Index
00009E46 7000                       		moveq	#0,d0
00009E48 1028 0025                  		move.b	$25(a0),d0
00009E4C 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E50 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E54 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E5A 6100 0000                  		bsr.w	AnimateSprite
00009E5E 6000 0000                  		bra.w	MarkObjGone
00009E62                            ; ===========================================================================
00009E62 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E64 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E66                            ; ===========================================================================
00009E66                            
00009E66                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E66 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E6A 6A00                       		bpl.s	locret_95B6
00009E6C 4A28 0001                  		tst.b	1(a0)
00009E70 6A00                       		bpl.s	Obj1F_Move
00009E72 0868 0001 0032             		bchg	#1,$32(a0)
00009E78 6600                       		bne.s	Obj1F_MakeFire
00009E7A                            
00009E7A                            Obj1F_Move:
00009E7A 5428 0025                  		addq.b	#2,$25(a0)
00009E7E 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E84 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E8A 6100 0000                  		bsr.w	Obj1F_SetAni
00009E8E 5600                       		addq.b	#3,d0
00009E90 1140 001C                  		move.b	d0,$1C(a0)
00009E94 0868 0000 0022             		bchg	#0,$22(a0)
00009E9A 6600                       		bne.s	locret_95B6
00009E9C 4468 0010                  		neg.w	$10(a0)		; change direction
00009EA0                            
00009EA0                            locret_95B6:
00009EA0 4E75                       		rts	
00009EA2                            ; ===========================================================================
00009EA2                            
00009EA2                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009EA2 317C 003B 0030             		move.w	#$3B,$30(a0)
00009EA8 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009EAE 6100 0000                  		bsr.w	SingleObjLoad
00009EB2 6600                       		bne.s	Obj1F_MakeFire2
00009EB4 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009EB8 137C 0006 0024             		move.b	#6,$24(a1)
00009EBE 3368 0008 0008             		move.w	8(a0),8(a1)
00009EC4 0469 0010 0008             		subi.w	#$10,8(a1)
00009ECA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009ED0 337C FF00 0010             		move.w	#-$100,$10(a1)
00009ED6                            
00009ED6                            Obj1F_MakeFire2:
00009ED6 6100 0000                  		bsr.w	SingleObjLoad
00009EDA 6600                       		bne.s	locret_9618
00009EDC 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009EE0 137C 0006 0024             		move.b	#6,$24(a1)
00009EE6 3368 0008 0008             		move.w	8(a0),8(a1)
00009EEC 0669 0010 0008             		addi.w	#$10,8(a1)
00009EF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EF8 337C 0100 0010             		move.w	#$100,$10(a1)
00009EFE                            
00009EFE                            locret_9618:
00009EFE 4E75                       		rts	
00009F00                            ; ===========================================================================
00009F00                            
00009F00                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009F00 5368 0030                  		subq.w	#1,$30(a0)
00009F04 6B00                       		bmi.s	loc_966E
00009F06 6100 0000                  		bsr.w	SpeedToPos
00009F0A 0868 0000 0032             		bchg	#0,$32(a0)
00009F10 6600                       		bne.s	loc_9654
00009F12 3628 0008                  		move.w	8(a0),d3
00009F16 0643 0010                  		addi.w	#$10,d3
00009F1A 0828 0000 0022             		btst	#0,$22(a0)
00009F20 6700                       		beq.s	loc_9640
00009F22 0443 0020                  		subi.w	#$20,d3
00009F26                            
00009F26                            loc_9640:
00009F26 4EB9 0000 0000             		jsr	ObjHitFloor2
00009F2C 0C41 FFF8                  		cmpi.w	#-8,d1
00009F30 6D00                       		blt.s	loc_966E
00009F32 0C41 000C                  		cmpi.w	#$C,d1
00009F36 6C00                       		bge.s	loc_966E
00009F38 4E75                       		rts	
00009F3A                            ; ===========================================================================
00009F3A                            
00009F3A                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009F3A 4EB9 0000 0000             		jsr	ObjHitFloor
00009F40 D368 000C                  		add.w	d1,$C(a0)
00009F44 1143 0026                  		move.b	d3,$26(a0)
00009F48 6100 0000                  		bsr.w	Obj1F_SetAni
00009F4C 5600                       		addq.b	#3,d0
00009F4E 1140 001C                  		move.b	d0,$1C(a0)
00009F52 4E75                       		rts	
00009F54                            ; ===========================================================================
00009F54                            
00009F54                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F54 5528 0025                  		subq.b	#2,$25(a0)
00009F58 317C 003B 0030             		move.w	#59,$30(a0)
00009F5E 317C 0000 0010             		move.w	#0,$10(a0)
00009F64 6100 0000                  		bsr.w	Obj1F_SetAni
00009F68 1140 001C                  		move.b	d0,$1C(a0)
00009F6C 4E75                       		rts	
00009F6E                            ; ---------------------------------------------------------------------------
00009F6E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F6E                            ; ---------------------------------------------------------------------------
00009F6E                            
00009F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F6E                            
00009F6E                            
00009F6E                            Obj1F_SetAni:				; XREF: loc_966E
00009F6E 7000                       		moveq	#0,d0
00009F70 1628 0026                  		move.b	$26(a0),d3
00009F74 6B00                       		bmi.s	loc_96A4
00009F76 0C03 0006                  		cmpi.b	#6,d3
00009F7A 6500                       		bcs.s	locret_96A2
00009F7C 7001                       		moveq	#1,d0
00009F7E 0828 0000 0022             		btst	#0,$22(a0)
00009F84 6600                       		bne.s	locret_96A2
00009F86 7002                       		moveq	#2,d0
00009F88                            
00009F88                            locret_96A2:
00009F88 4E75                       		rts	
00009F8A                            ; ===========================================================================
00009F8A                            
00009F8A                            loc_96A4:				; XREF: Obj1F_SetAni
00009F8A 0C03 00FA                  		cmpi.b	#-6,d3
00009F8E 6200                       		bhi.s	locret_96B6
00009F90 7002                       		moveq	#2,d0
00009F92 0828 0000 0022             		btst	#0,$22(a0)
00009F98 6600                       		bne.s	locret_96B6
00009F9A 7001                       		moveq	#1,d0
00009F9C                            
00009F9C                            locret_96B6:
00009F9C 4E75                       		rts	
00009F9E                            ; End of function Obj1F_SetAni
00009F9E                            
00009F9E                            ; ===========================================================================
00009F9E                            
00009F9E                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F9E 6100 0000                  		bsr.w	DeleteObject
00009FA2 4E75                       		rts	
00009FA4                            ; ===========================================================================
00009FA4                            ; ---------------------------------------------------------------------------
00009FA4                            ; Sub-object - missile that the	Crabmeat throws
00009FA4                            ; ---------------------------------------------------------------------------
00009FA4                            
00009FA4                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009FA4 5428 0024                  		addq.b	#2,$24(a0)
00009FA8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FB0 317C 0400 0002             		move.w	#$400,2(a0)
00009FB6 117C 0004 0001             		move.b	#4,1(a0)
00009FBC 117C 0003 0018             		move.b	#3,$18(a0)
00009FC2 117C 0087 0020             		move.b	#$87,$20(a0)
00009FC8 117C 0008 0019             		move.b	#8,$19(a0)
00009FCE 317C FC00 0012             		move.w	#-$400,$12(a0)
00009FD4 117C 0007 001C             		move.b	#7,$1C(a0)
00009FDA                            
00009FDA                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009FDA 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FE0 6100 0000                  		bsr.w	AnimateSprite
00009FE4 6100 0000                  		bsr.w	ObjectFall
00009FE8 6100 0000                  		bsr.w	DisplaySprite
00009FEC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FF0 0640 00E0                  		addi.w	#$E0,d0
00009FF4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FF8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FFA 4E75                       		rts	
00009FFC                            ; ===========================================================================
00009FFC                            
00009FFC                            Obj1F_Delete2:
00009FFC 6000 0000                  		bra.w	DeleteObject
0000A000                            ; ===========================================================================
0000A000                            Ani_obj1F:
0000A000                            	include "_anim\obj1F.asm"
0000A000                            ; ---------------------------------------------------------------------------
0000A000                            ; Animation script - Crabmeat enemy
0000A000                            ; ---------------------------------------------------------------------------
0000A000 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A006 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A00C 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A010 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A014 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A018 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A01C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A022 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A028 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A02E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A032 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A036                            		even
0000A036                            		even
0000A036                            
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            Map_obj1F:
0000A036                            	include "_maps\obj1F.asm"
0000A036                            Map_1514:
0000A036 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A038 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A03A 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A03C 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A03E 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A040 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A042 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A044 03                         Map_1514_E: 	dc.b $3
0000A045 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A04A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A04F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A054 03                         Map_1514_1E: 	dc.b $3
0000A055 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A05A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A05F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A064 03                         Map_1514_2E: 	dc.b $3
0000A065 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A06A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A06F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A074 03                         Map_1514_3E: 	dc.b $3
0000A075 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A07A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A07F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A084 03                         Map_1514_4E: 	dc.b $3
0000A085 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A08A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A08F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A094 01                         Map_1514_5E: 	dc.b $1
0000A095 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A09A 01                         Map_1514_64: 	dc.b $1
0000A09B F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A0A0                            	even
0000A0A0                            	even
0000A0A0                            
0000A0A0                            ; ===========================================================================
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A0A0                            ; ---------------------------------------------------------------------------
0000A0A0                            
0000A0A0                            Obj22:					; XREF: Obj_Index
0000A0A0 7000                       		moveq	#0,d0
0000A0A2 1028 0024                  		move.b	$24(a0),d0
0000A0A6 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A0AA 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A0AE                            ; ===========================================================================
0000A0AE 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A0B0 0000                       		dc.w Obj22_Action-Obj22_Index
0000A0B2 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj22_Main:				; XREF: Obj22_Index
0000A0B4 5428 0024                  		addq.b	#2,$24(a0)
0000A0B8 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A0C0 317C 0444 0002             		move.w	#$444,2(a0)
0000A0C6 117C 0004 0001             		move.b	#4,1(a0)
0000A0CC 117C 0003 0018             		move.b	#3,$18(a0)
0000A0D2 117C 0008 0020             		move.b	#8,$20(a0)
0000A0D8 117C 0018 0019             		move.b	#$18,$19(a0)
0000A0DE                            
0000A0DE                            Obj22_Action:				; XREF: Obj22_Index
0000A0DE 7000                       		moveq	#0,d0
0000A0E0 1028 0025                  		move.b	$25(a0),d0
0000A0E4 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A0E8 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0EC 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0F2 6100 0000                  		bsr.w	AnimateSprite
0000A0F6 6000 0000                  		bra.w	MarkObjGone
0000A0FA                            ; ===========================================================================
0000A0FA 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0FC 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0FE                            ; ===========================================================================
0000A0FE                            
0000A0FE                            Obj22_Move:				; XREF: Obj22_Index2
0000A0FE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A102 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A104 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A10A 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A10C 5428 0025                  		addq.b	#2,$25(a0)
0000A110 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A116 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A11C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A122 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A128 6600                       		bne.s	locret_986C	; if not, branch
0000A12A 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A12E                            
0000A12E                            locret_986C:
0000A12E 4E75                       		rts	
0000A130                            ; ===========================================================================
0000A130                            
0000A130                            Obj22_Fire:				; XREF: Obj22_Move
0000A130 6100 0000                  		bsr.w	SingleObjLoad
0000A134 6600                       		bne.s	locret_98D0
0000A136 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A13A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A140 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A146 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A14C 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A152 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A158 303C 0018                  		move.w	#$18,d0
0000A15C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A162 6600                       		bne.s	loc_98AA	; if not, branch
0000A164 4440                       		neg.w	d0
0000A166 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A16A                            
0000A16A                            loc_98AA:
0000A16A D169 0008                  		add.w	d0,8(a1)
0000A16E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A174 337C 000E 0032             		move.w	#$E,$32(a1)
0000A17A 2348 003C                  		move.l	a0,$3C(a1)
0000A17E 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A184 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A18A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A190                            
0000A190                            locret_98D0:
0000A190 4E75                       		rts	
0000A192                            ; ===========================================================================
0000A192                            
0000A192                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A192 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A196 6B00                       		bmi.s	Obj22_ChgDir
0000A198 6100 0000                  		bsr.w	SpeedToPos
0000A19C 4A28 0034                  		tst.b	$34(a0)
0000A1A0 6600                       		bne.s	locret_992A
0000A1A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000A1A6 9068 0008                  		sub.w	8(a0),d0
0000A1AA 6A00                       		bpl.s	Obj22_SetNrSonic
0000A1AC 4440                       		neg.w	d0
0000A1AE                            
0000A1AE                            Obj22_SetNrSonic:
0000A1AE 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A1B2 6400                       		bcc.s	locret_992A	; if not, branch
0000A1B4 4A28 0001                  		tst.b	1(a0)
0000A1B8 6A00                       		bpl.s	locret_992A
0000A1BA 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A1C0 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A1C6 6000                       		bra.s	Obj22_Stop
0000A1C8                            ; ===========================================================================
0000A1C8                            
0000A1C8                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A1C8 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A1CE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A1D4 317C 003B 0032             		move.w	#59,$32(a0)
0000A1DA                            
0000A1DA                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A1DA 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A1DE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A1E4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1EA                            
0000A1EA                            locret_992A:
0000A1EA 4E75                       		rts	
0000A1EC                            ; ===========================================================================
0000A1EC                            
0000A1EC                            Obj22_Delete:				; XREF: Obj22_Index
0000A1EC 6100 0000                  		bsr.w	DeleteObject
0000A1F0 4E75                       		rts	
0000A1F2                            ; ===========================================================================
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2                            ; Object 23 - missile that Buzz	Bomber throws
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2                            
0000A1F2                            Obj23:					; XREF: Obj_Index
0000A1F2 7000                       		moveq	#0,d0
0000A1F4 1028 0024                  		move.b	$24(a0),d0
0000A1F8 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1FC 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A200                            ; ===========================================================================
0000A200 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A202 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A204 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A206 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A208 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A20A                            ; ===========================================================================
0000A20A                            
0000A20A                            Obj23_Main:				; XREF: Obj23_Index
0000A20A 5368 0032                  		subq.w	#1,$32(a0)
0000A20E 6A00                       		bpl.s	Obj23_ChkCancel
0000A210 5428 0024                  		addq.b	#2,$24(a0)
0000A214 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A21C 317C 2444 0002             		move.w	#$2444,2(a0)
0000A222 117C 0004 0001             		move.b	#4,1(a0)
0000A228 117C 0003 0018             		move.b	#3,$18(a0)
0000A22E 117C 0008 0019             		move.b	#8,$19(a0)
0000A234 0228 0003 0022             		andi.b	#3,$22(a0)
0000A23A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A23E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A240 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A246 117C 0087 0020             		move.b	#$87,$20(a0)
0000A24C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A252 6000                       		bra.s	Obj23_Animate2
0000A254                            ; ===========================================================================
0000A254                            
0000A254                            Obj23_Animate:				; XREF: Obj23_Index
0000A254 6100                       		bsr.s	Obj23_ChkCancel
0000A256 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A25C 6100 0000                  		bsr.w	AnimateSprite
0000A260 6000 0000                  		bra.w	DisplaySprite
0000A264                            ; ---------------------------------------------------------------------------
0000A264                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A264                            ; destroyed, and if it has, then cancel	the missile
0000A264                            ; ---------------------------------------------------------------------------
0000A264                            
0000A264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A264                            
0000A264                            
0000A264                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A264 2268 003C                  		movea.l	$3C(a0),a1
0000A268 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A26C 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A26E 4E75                       		rts	
0000A270                            ; End of function Obj23_ChkCancel
0000A270                            
0000A270                            ; ===========================================================================
0000A270                            
0000A270                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A270 0828 0007 0022             		btst	#7,$22(a0)
0000A276 6600                       		bne.s	Obj23_Explode
0000A278 117C 0087 0020             		move.b	#$87,$20(a0)
0000A27E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A284 6100 0000                  		bsr.w	SpeedToPos
0000A288 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A28E 6100 0000                  		bsr.w	AnimateSprite
0000A292 6100 0000                  		bsr.w	DisplaySprite
0000A296 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A29A 0640 00E0                  		addi.w	#$E0,d0
0000A29E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A2A2 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A2A4 4E75                       		rts	
0000A2A6                            ; ===========================================================================
0000A2A6                            
0000A2A6                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A2A6 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A2AA 117C 0000 0024             		move.b	#0,$24(a0)
0000A2B0 6000 F2D0                  		bra.w	Obj24
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            Obj23_Delete:				; XREF: Obj23_Index
0000A2B4 6100 0000                  		bsr.w	DeleteObject
0000A2B8 4E75                       		rts	
0000A2BA                            ; ===========================================================================
0000A2BA                            
0000A2BA                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A2BA 4A28 0001                  		tst.b	1(a0)
0000A2BE 6AF4                       		bpl.s	Obj23_Delete
0000A2C0 6100 0000                  		bsr.w	SpeedToPos
0000A2C4                            
0000A2C4                            Obj23_Animate2:				; XREF: Obj23_Main
0000A2C4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A2CA 6100 0000                  		bsr.w	AnimateSprite
0000A2CE 6100 0000                  		bsr.w	DisplaySprite
0000A2D2 4E75                       		rts	
0000A2D4                            ; ===========================================================================
0000A2D4                            Ani_obj22:
0000A2D4                            	include "_anim\obj22.asm"
0000A2D4                            ; ---------------------------------------------------------------------------
0000A2D4                            ; Animation script - Buzz Bomber enemy
0000A2D4                            ; ---------------------------------------------------------------------------
0000A2D4 0000                       		dc.w byte_9A1E-Ani_obj22
0000A2D6 0000                       		dc.w byte_9A22-Ani_obj22
0000A2D8 0000                       		dc.w byte_9A26-Ani_obj22
0000A2DA 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A2DE 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A2E2 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A2E6                            		even
0000A2E6                            		even
0000A2E6                            
0000A2E6                            Ani_obj23:
0000A2E6                            	include "_anim\obj23.asm"
0000A2E6                            ; ---------------------------------------------------------------------------
0000A2E6                            ; Animation script - missile that Buzz Bomber throws
0000A2E6                            ; ---------------------------------------------------------------------------
0000A2E6 0000                       		dc.w byte_9A2E-Ani_obj23
0000A2E8 0000                       		dc.w byte_9A32-Ani_obj23
0000A2EA 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2EE 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2F2                            		even
0000A2F2                            		even
0000A2F2                            
0000A2F2                            ; ---------------------------------------------------------------------------
0000A2F2                            ; Sprite mappings - Buzz Bomber	enemy
0000A2F2                            ; ---------------------------------------------------------------------------
0000A2F2                            Map_obj22:
0000A2F2                            	include "_maps\obj22.asm"
0000A2F2                            Map_e97a:
0000A2F2 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2F4 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2F6 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2F8 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2FA 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2FC 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2FE 06                         Map_e97a_C: 	dc.b $6
0000A2FF F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A304 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A309 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A30E 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A313 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A318 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A31D 06                         Map_e97a_2B: 	dc.b $6
0000A31E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A323 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A328 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A32D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A332 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A337 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A33C 07                         Map_e97a_4A: 	dc.b $7
0000A33D 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A342 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A347 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A34C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A351 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A356 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A35B F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A360 07                         Map_e97a_6E: 	dc.b $7
0000A361 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A366 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A36B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A370 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A375 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A37A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A37F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A384 06                         Map_e97a_92: 	dc.b $6
0000A385 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A38A 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A38F 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A394 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A399 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A39E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A3A3 04                         Map_e97a_B1: 	dc.b $4
0000A3A4 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A3A9 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A3AE 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A3B3 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A3B8                            	even
0000A3B8                            	even
0000A3B8                            
0000A3B8                            ; ---------------------------------------------------------------------------
0000A3B8                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B8                            ; ---------------------------------------------------------------------------
0000A3B8                            Map_obj23:
0000A3B8                            	include "_maps\obj23.asm"
0000A3B8                            ; ---------------------------------------------------------------------------
0000A3B8                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B8                            ; ---------------------------------------------------------------------------
0000A3B8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A3BC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A3C0 01                         byte_9B0E:	dc.b 1
0000A3C1 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A3C6 01                         byte_9B14:	dc.b 1
0000A3C7 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A3CC 01                         byte_9B1A:	dc.b 1
0000A3CD F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A3D2 01                         byte_9B20:	dc.b 1
0000A3D3 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A3D8                            		even
0000A3D8                            		even
0000A3D8                            
0000A3D8                            ; ===========================================================================
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Object 25 - rings
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            
0000A3D8                            Obj25:					; XREF: Obj_Index
0000A3D8 7000                       		moveq	#0,d0
0000A3DA 1028 0024                  		move.b	$24(a0),d0
0000A3DE 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A3E2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A3E6                            ; ===========================================================================
0000A3E6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A3E8 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3EA 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3EC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3EE 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0                            ; Distances between rings (format: horizontal, vertical)
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3F2 1800                       		dc.b $18, 0		; horizontal normal
0000A3F4 2000                       		dc.b $20, 0		; horizontal wide
0000A3F6 0010                       		dc.b 0,	$10		; vertical tight
0000A3F8 0018                       		dc.b 0,	$18		; vertical normal
0000A3FA 0020                       		dc.b 0,	$20		; vertical wide
0000A3FC 1010                       		dc.b $10, $10		; diagonal
0000A3FE 1818                       		dc.b $18, $18
0000A400 2020                       		dc.b $20, $20
0000A402 F010                       		dc.b $F0, $10
0000A404 E818                       		dc.b $E8, $18
0000A406 E020                       		dc.b $E0, $20
0000A408 1008                       		dc.b $10, 8
0000A40A 1810                       		dc.b $18, $10
0000A40C F008                       		dc.b $F0, 8
0000A40E E810                       		dc.b $E8, $10
0000A410                            ; ===========================================================================
0000A410                            
0000A410                            Obj25_Main:				; XREF: Obj25_Index
0000A410 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A414 7000                       		moveq	#0,d0
0000A416 1028 0023                  		move.b	$23(a0),d0
0000A41A 45F2 0002                  		lea	2(a2,d0.w),a2
0000A41E 1812                       		move.b	(a2),d4
0000A420 1228 0028                  		move.b	$28(a0),d1
0000A424 1001                       		move.b	d1,d0
0000A426 0241 0007                  		andi.w	#7,d1
0000A42A 0C41 0007                  		cmpi.w	#7,d1
0000A42E 6600                       		bne.s	loc_9B80
0000A430 7206                       		moveq	#6,d1
0000A432                            
0000A432                            loc_9B80:
0000A432 4841                       		swap	d1
0000A434 323C 0000                  		move.w	#0,d1
0000A438 E808                       		lsr.b	#4,d0
0000A43A D040                       		add.w	d0,d0
0000A43C 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A440 4885                       		ext.w	d5
0000A442 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A446 4886                       		ext.w	d6
0000A448 2248                       		movea.l	a0,a1
0000A44A 3428 0008                  		move.w	8(a0),d2
0000A44E 3628 000C                  		move.w	$C(a0),d3
0000A452 E20C                       		lsr.b	#1,d4
0000A454 6500                       		bcs.s	loc_9C02
0000A456 0892 0007                  		bclr	#7,(a2)
0000A45A 6000                       		bra.s	loc_9BBA
0000A45C                            ; ===========================================================================
0000A45C                            
0000A45C                            Obj25_MakeRings:
0000A45C 4841                       		swap	d1
0000A45E E20C                       		lsr.b	#1,d4
0000A460 6500                       		bcs.s	loc_9C02
0000A462 0892 0007                  		bclr	#7,(a2)
0000A466 6100 0000                  		bsr.w	SingleObjLoad
0000A46A 6600                       		bne.s	loc_9C0E
0000A46C                            
0000A46C                            loc_9BBA:				; XREF: Obj25_Main
0000A46C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A470 5429 0024                  		addq.b	#2,$24(a1)
0000A474 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A478 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A47E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A482 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A48A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A490 137C 0004 0001             		move.b	#4,1(a1)
0000A496 137C 0002 0018             		move.b	#2,$18(a1)
0000A49C 137C 0047 0020             		move.b	#$47,$20(a1)
0000A4A2 137C 0008 0019             		move.b	#8,$19(a1)
0000A4A8 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A4AE 1341 0034                  		move.b	d1,$34(a1)
0000A4B2                            
0000A4B2                            loc_9C02:
0000A4B2 5241                       		addq.w	#1,d1
0000A4B4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A4B6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A4B8 4841                       		swap	d1
0000A4BA 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A4BE                            
0000A4BE                            loc_9C0E:
0000A4BE 0812 0000                  		btst	#0,(a2)
0000A4C2 6600 0000                  		bne.w	DeleteObject
0000A4C6                            
0000A4C6                            Obj25_Animate:				; XREF: Obj25_Index
0000A4C6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A4CC 6100 0000                  		bsr.w	DisplaySprite
0000A4D0 3028 0032                  		move.w	$32(a0),d0
0000A4D4 0240 FF80                  		andi.w	#$FF80,d0
0000A4D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4DC 0441 0080                  		subi.w	#$80,d1
0000A4E0 0241 FF80                  		andi.w	#$FF80,d1
0000A4E4 9041                       		sub.w	d1,d0
0000A4E6 0C40 0280                  		cmpi.w	#$280,d0
0000A4EA 6200                       		bhi.s	Obj25_Delete
0000A4EC 4E75                       		rts	
0000A4EE                            ; ===========================================================================
0000A4EE                            
0000A4EE                            Obj25_Collect:				; XREF: Obj25_Index
0000A4EE 5428 0024                  		addq.b	#2,$24(a0)
0000A4F2 117C 0000 0020             		move.b	#0,$20(a0)
0000A4F8 117C 0001 0018             		move.b	#1,$18(a0)
0000A4FE 6100 0000                  		bsr.w	CollectRing
0000A502 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A506 7000                       		moveq	#0,d0
0000A508 1028 0023                  		move.b	$23(a0),d0
0000A50C 1228 0034                  		move.b	$34(a0),d1
0000A510 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A514                            
0000A514                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A514 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A51A 6100 0000                  		bsr.w	AnimateSprite
0000A51E 6000 0000                  		bra.w	DisplaySprite
0000A522                            ; ===========================================================================
0000A522                            
0000A522                            Obj25_Delete:				; XREF: Obj25_Index
0000A522 6000 0000                  		bra.w	DeleteObject
0000A526                            
0000A526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A526                            
0000A526                            
0000A526                            CollectRing:				; XREF: Obj25_Collect
0000A526 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A52A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A530 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A534 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A53A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A53C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A542 6700                       		beq.s	loc_9CA4
0000A544 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A54A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A54C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A552 6600                       		bne.s	Obj25_PlaySnd
0000A554                            
0000A554                            loc_9CA4:
0000A554 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A558 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A55C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A560                            
0000A560                            Obj25_PlaySnd:
0000A560 4EF9 0000 15A0             		jmp	(PlaySound_Special).l
0000A566                            ; End of function CollectRing
0000A566                            
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            Obj37:					; XREF: Obj_Index
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	$24(a0),d0
0000A56C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A576 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A578 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A57A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A57C 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj37_CountRings:			; XREF: Obj37_Index
0000A57E 2248                       		movea.l	a0,a1
0000A580 7A00                       		moveq	#0,d5
0000A582 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A586 7020                       		moveq	#32,d0
0000A588 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A58A 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A58C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A58E                            
0000A58E                            loc_9CDE:
0000A58E 5345                       		subq.w	#1,d5
0000A590 383C 0288                  		move.w	#$288,d4
0000A594 6000                       		bra.s	Obj37_MakeRings
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            Obj37_Loop:
0000A596 6100 0000                  		bsr.w	SingleObjLoad
0000A59A 6600 0000                  		bne.w	Obj37_ResetCounter
0000A59E                            
0000A59E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A59E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A5A2 5429 0024                  		addq.b	#2,$24(a1)
0000A5A6 137C 0008 0016             		move.b	#8,$16(a1)
0000A5AC 137C 0008 0017             		move.b	#8,$17(a1)
0000A5B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5BE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A5C6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A5CC 137C 0004 0001             		move.b	#4,1(a1)
0000A5D2 137C 0003 0018             		move.b	#3,$18(a1)
0000A5D8 137C 0047 0020             		move.b	#$47,$20(a1)
0000A5DE 137C 0008 0019             		move.b	#8,$19(a1)
0000A5E4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5EA 4A44                       		tst.w	d4
0000A5EC 6B00                       		bmi.s	loc_9D62
0000A5EE 3004                       		move.w	d4,d0
0000A5F0 6100 8748                  		bsr.w	CalcSine
0000A5F4 3404                       		move.w	d4,d2
0000A5F6 E04A                       		lsr.w	#8,d2
0000A5F8 E560                       		asl.w	d2,d0
0000A5FA E561                       		asl.w	d2,d1
0000A5FC 3400                       		move.w	d0,d2
0000A5FE 3601                       		move.w	d1,d3
0000A600 0604 0010                  		addi.b	#$10,d4
0000A604 6400                       		bcc.s	loc_9D62
0000A606 0444 0080                  		subi.w	#$80,d4
0000A60A 6400                       		bcc.s	loc_9D62
0000A60C 383C 0288                  		move.w	#$288,d4
0000A610                            
0000A610                            loc_9D62:
0000A610 3342 0010                  		move.w	d2,$10(a1)
0000A614 3343 0012                  		move.w	d3,$12(a1)
0000A618 4442                       		neg.w	d2
0000A61A 4444                       		neg.w	d4
0000A61C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A620                            
0000A620                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A620 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A626 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A62C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A632 303C 00C6                  		move.w	#$C6,d0
0000A636 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A63C                            
0000A63C                            Obj37_Bounce:				; XREF: Obj37_Index
0000A63C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A642 6100 0000                  		bsr.w	SpeedToPos
0000A646 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A64C 6B00                       		bmi.s	Obj37_ChkDel
0000A64E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A652 D007                       		add.b	d7,d0
0000A654 0200 0003                  		andi.b	#3,d0
0000A658 6600                       		bne.s	Obj37_ChkDel
0000A65A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A660 4A41                       		tst.w	d1
0000A662 6A00                       		bpl.s	Obj37_ChkDel
0000A664 D368 000C                  		add.w	d1,$C(a0)
0000A668 3028 0012                  		move.w	$12(a0),d0
0000A66C E440                       		asr.w	#2,d0
0000A66E 9168 0012                  		sub.w	d0,$12(a0)
0000A672 4468 0012                  		neg.w	$12(a0)
0000A676                            
0000A676                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A676 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A67A 6700                       		beq.s	Obj37_Delete
0000A67C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A680 0640 00E0                  		addi.w	#$E0,d0
0000A684 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A688 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A68A 6000 0000                  		bra.w	DisplaySprite
0000A68E                            ; ===========================================================================
0000A68E                            
0000A68E                            Obj37_Collect:				; XREF: Obj37_Index
0000A68E 5428 0024                  		addq.b	#2,$24(a0)
0000A692 117C 0000 0020             		move.b	#0,$20(a0)
0000A698 117C 0001 0018             		move.b	#1,$18(a0)
0000A69E 6100 FE86                  		bsr.w	CollectRing
0000A6A2                            
0000A6A2                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A6A2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6A8 6100 0000                  		bsr.w	AnimateSprite
0000A6AC 6000 0000                  		bra.w	DisplaySprite
0000A6B0                            ; ===========================================================================
0000A6B0                            
0000A6B0                            Obj37_Delete:				; XREF: Obj37_Index
0000A6B0 6000 0000                  		bra.w	DeleteObject
0000A6B4                            ; ===========================================================================
0000A6B4                            ; ---------------------------------------------------------------------------
0000A6B4                            ; Object 4B - giant ring for entry to special stage
0000A6B4                            ; ---------------------------------------------------------------------------
0000A6B4                            
0000A6B4                            Obj4B:					; XREF: Obj_Index
0000A6B4 7000                       		moveq	#0,d0
0000A6B6 1028 0024                  		move.b	$24(a0),d0
0000A6BA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A6BE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A6C2                            ; ===========================================================================
0000A6C2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A6C4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A6C6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A6C8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A6CA                            ; ===========================================================================
0000A6CA                            
0000A6CA                            Obj4B_Main:				; XREF: Obj4B_Index
0000A6CA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A6D2 317C 2400 0002             		move.w	#$2400,2(a0)
0000A6D8 0028 0004 0001             		ori.b	#4,1(a0)
0000A6DE 117C 0040 0019             		move.b	#$40,$19(a0)
0000A6E4 4A28 0001                  		tst.b	1(a0)
0000A6E8 6A00                       		bpl.s	Obj4B_Animate
0000A6EA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6F0 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6F4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6FA 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6FC 4E75                       		rts	
0000A6FE                            ; ===========================================================================
0000A6FE                            
0000A6FE                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6FE 5428 0024                  		addq.b	#2,$24(a0)
0000A702 117C 0002 0018             		move.b	#2,$18(a0)
0000A708 117C 0052 0020             		move.b	#$52,$20(a0)
0000A70E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A714                            
0000A714                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A714 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A71A 3028 0008                  		move.w	8(a0),d0
0000A71E 0240 FF80                  		andi.w	#$FF80,d0
0000A722 3238 F700                  		move.w	($FFFFF700).w,d1
0000A726 0441 0080                  		subi.w	#$80,d1
0000A72A 0241 FF80                  		andi.w	#$FF80,d1
0000A72E 9041                       		sub.w	d1,d0
0000A730 0C40 0280                  		cmpi.w	#$280,d0
0000A734 6200 0000                  		bhi.w	DeleteObject
0000A738 6000 0000                  		bra.w	DisplaySprite
0000A73C                            ; ===========================================================================
0000A73C                            
0000A73C                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A73C 5528 0024                  		subq.b	#2,$24(a0)
0000A740 117C 0000 0020             		move.b	#0,$20(a0)
0000A746 6100 0000                  		bsr.w	SingleObjLoad
0000A74A 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A74E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A752 3368 0008 0008             		move.w	8(a0),8(a1)
0000A758 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A75E 2348 003C                  		move.l	a0,$3C(a1)
0000A762 3038 D008                  		move.w	($FFFFD008).w,d0
0000A766 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A76A 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A76C 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A772                            
0000A772                            Obj4B_PlaySnd:
0000A772 303C 00C3                  		move.w	#$C3,d0
0000A776 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A77C 6096                       		bra.s	Obj4B_Animate
0000A77E                            ; ===========================================================================
0000A77E                            
0000A77E                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A77E 6000 0000                  		bra.w	DeleteObject
0000A782                            ; ===========================================================================
0000A782                            ; ---------------------------------------------------------------------------
0000A782                            ; Object 7C - flash effect when	you collect the	giant ring
0000A782                            ; ---------------------------------------------------------------------------
0000A782                            
0000A782                            Obj7C:					; XREF: Obj_Index
0000A782 7000                       		moveq	#0,d0
0000A784 1028 0024                  		move.b	$24(a0),d0
0000A788 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A78C 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A790                            ; ===========================================================================
0000A790 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A792 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A794 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A796                            ; ===========================================================================
0000A796                            
0000A796                            Obj7C_Main:				; XREF: Obj7C_Index
0000A796 5428 0024                  		addq.b	#2,$24(a0)
0000A79A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A7A2 317C 2462 0002             		move.w	#$2462,2(a0)
0000A7A8 0028 0004 0001             		ori.b	#4,1(a0)
0000A7AE 117C 0000 0018             		move.b	#0,$18(a0)
0000A7B4 117C 0020 0019             		move.b	#$20,$19(a0)
0000A7BA 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A7C0                            
0000A7C0                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A7C0 6100                       		bsr.s	Obj7C_Collect
0000A7C2 3028 0008                  		move.w	8(a0),d0
0000A7C6 0240 FF80                  		andi.w	#$FF80,d0
0000A7CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A7CE 0441 0080                  		subi.w	#$80,d1
0000A7D2 0241 FF80                  		andi.w	#$FF80,d1
0000A7D6 9041                       		sub.w	d1,d0
0000A7D8 0C40 0280                  		cmpi.w	#$280,d0
0000A7DC 6200 0000                  		bhi.w	DeleteObject
0000A7E0 6000 0000                  		bra.w	DisplaySprite
0000A7E4                            
0000A7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7E4                            
0000A7E4                            
0000A7E4                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A7E4 5328 001E                  		subq.b	#1,$1E(a0)
0000A7E8 6A00                       		bpl.s	locret_9F76
0000A7EA 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7F0 5228 001A                  		addq.b	#1,$1A(a0)
0000A7F4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7FA 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7FC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A802 6600                       		bne.s	locret_9F76	; if not, branch
0000A804 2268 003C                  		movea.l	$3C(a0),a1
0000A808 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A80E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A814 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A81A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A81E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A822                            
0000A822                            locret_9F76:
0000A822 4E75                       		rts	
0000A824                            ; ===========================================================================
0000A824                            
0000A824                            Obj7C_End:				; XREF: Obj7C_Collect
0000A824 5428 0024                  		addq.b	#2,$24(a0)
0000A828 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A82E 588F                       		addq.l	#4,sp
0000A830 4E75                       		rts	
0000A832                            ; End of function Obj7C_Collect
0000A832                            
0000A832                            ; ===========================================================================
0000A832                            
0000A832                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A832 6000 0000                  		bra.w	DeleteObject
0000A836                            ; ===========================================================================
0000A836                            Ani_obj25:
0000A836                            	include "_anim\obj25.asm"
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Animation script - ring
0000A836                            ; ---------------------------------------------------------------------------
0000A836 0000                       		dc.w byte_9F8C-Ani_obj25
0000A838 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A83E                            		even
0000A83E                            		even
0000A83E                            
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            ; Sprite mappings - rings
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            Map_obj25:
0000A83E                            	include "_maps\obj25.asm"
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            ; Sprite mappings - rings
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A842 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A846 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A84A 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A84E 01                         byte_9FA2:	dc.b 1
0000A84F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A854 01                         byte_9FA8:	dc.b 1
0000A855 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A85A 01                         byte_9FAE:	dc.b 1
0000A85B F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A860 01                         byte_9FB4:	dc.b 1
0000A861 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A866 01                         byte_9FBA:	dc.b 1
0000A867 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A86C 01                         byte_9FC0:	dc.b 1
0000A86D F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A872 01                         byte_9FC6:	dc.b 1
0000A873 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A878 01                         byte_9FCC:	dc.b 1
0000A879 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A87E                            		even
0000A87E                            		even
0000A87E                            
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E                            ; Sprite mappings - giant ring
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E                            Map_obj4B:
0000A87E                            	include "_maps\obj4B.asm"
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E                            ; Sprite mappings - giant ring
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A882 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A886 0A                         byte_9FDA:	dc.b $A
0000A887 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A88C E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A891 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A896 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A89B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A8A0 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A8A5 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A8AA 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A8AF 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A8B4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A8B9 08                         byte_A00D:	dc.b 8
0000A8BA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A8BF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A8C4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A8C9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A8CE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A8D3 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A8D8 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A8DD 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A8E2 04                         byte_A036:	dc.b 4
0000A8E3 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A8E8 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8ED 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8F2 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8F7 08                         byte_A04B:	dc.b 8
0000A8F8 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8FD E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A902 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A907 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A90C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A911 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A916 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A91B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A920                            		even
0000A920                            		even
0000A920                            
0000A920                            ; ---------------------------------------------------------------------------
0000A920                            ; Sprite mappings - flash effect when you collect the giant ring
0000A920                            ; ---------------------------------------------------------------------------
0000A920                            Map_obj7C:
0000A920                            	include "_maps\obj7C.asm"
0000A920                            ; ---------------------------------------------------------------------------
0000A920                            ; Sprite mappings - flash effect when you collect the giant ring
0000A920                            ; ---------------------------------------------------------------------------
0000A920 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A924 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A928 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A92C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A930 02                         byte_A084:	dc.b 2
0000A931 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A936 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A93B 04                         byte_A08F:	dc.b 4
0000A93C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A941 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A946 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A94B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A950 04                         byte_A0A4:	dc.b 4
0000A951 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A956 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A95B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A960 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A965 04                         byte_A0B9:	dc.b 4
0000A966 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A96B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A970 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A975 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A97A 04                         byte_A0CE:	dc.b 4
0000A97B E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A980 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A985 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A98A 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A98F 04                         byte_A0E3:	dc.b 4
0000A990 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A995 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A99A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A99F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A9A4 02                         byte_A0F8:	dc.b 2
0000A9A5 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A9AA 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A9AF 04                         byte_A103:	dc.b 4
0000A9B0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A9B5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A9BA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A9BF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A9C4                            		even
0000A9C4                            		even
0000A9C4                            
0000A9C4                            ; ===========================================================================
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4                            ; Object 26 - monitors
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4                            
0000A9C4                            Obj26:					; XREF: Obj_Index
0000A9C4 7000                       		moveq	#0,d0
0000A9C6 1028 0024                  		move.b	$24(a0),d0
0000A9CA 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A9CE 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A9D2                            ; ===========================================================================
0000A9D2 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A9D4 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A9D6 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A9D8 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A9DA 0000                       		dc.w Obj26_Display-Obj26_Index
0000A9DC                            ; ===========================================================================
0000A9DC                            
0000A9DC                            Obj26_Main:				; XREF: Obj26_Index
0000A9DC 5428 0024                  		addq.b	#2,$24(a0)
0000A9E0 117C 000E 0016             		move.b	#$E,$16(a0)
0000A9E6 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9EC 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9F4 317C 0680 0002             		move.w	#$680,2(a0)
0000A9FA 117C 0004 0001             		move.b	#4,1(a0)
0000AA00 117C 0003 0018             		move.b	#3,$18(a0)
0000AA06 117C 000F 0019             		move.b	#$F,$19(a0)
0000AA0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA10 7000                       		moveq	#0,d0
0000AA12 1028 0023                  		move.b	$23(a0),d0
0000AA16 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AA1C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AA22 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AA24 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AA2A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AA30 4E75                       		rts	
0000AA32                            ; ===========================================================================
0000AA32                            
0000AA32                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AA32 117C 0046 0020             		move.b	#$46,$20(a0)
0000AA38 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AA3E                            
0000AA3E                            Obj26_Solid:				; XREF: Obj26_Index
0000AA3E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AA42 6700                       		beq.s	loc_A1EC	; if not, branch
0000AA44 5500                       		subq.b	#2,d0
0000AA46 6600                       		bne.s	Obj26_Fall
0000AA48 7200                       		moveq	#0,d1
0000AA4A 1228 0019                  		move.b	$19(a0),d1
0000AA4E 0641 000B                  		addi.w	#$B,d1
0000AA52 6100 D37C                  		bsr.w	ExitPlatform
0000AA56 0829 0003 0022             		btst	#3,$22(a1)
0000AA5C 6600 0000                  		bne.w	loc_A1BC
0000AA60 4228 0025                  		clr.b	$25(a0)
0000AA64 6000 0000                  		bra.w	Obj26_Animate
0000AA68                            ; ===========================================================================
0000AA68                            
0000AA68                            loc_A1BC:				; XREF: Obj26_Solid
0000AA68 363C 0010                  		move.w	#$10,d3
0000AA6C 3428 0008                  		move.w	8(a0),d2
0000AA70 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA74 6000 0000                  		bra.w	Obj26_Animate
0000AA78                            ; ===========================================================================
0000AA78                            
0000AA78                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA78 6100 0000                  		bsr.w	ObjectFall
0000AA7C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA82 4A41                       		tst.w	d1
0000AA84 6A00 0000                  		bpl.w	Obj26_Animate
0000AA88 D368 000C                  		add.w	d1,$C(a0)
0000AA8C 4268 0012                  		clr.w	$12(a0)
0000AA90 4228 0025                  		clr.b	$25(a0)
0000AA94 6000 0000                  		bra.w	Obj26_Animate
0000AA98                            ; ===========================================================================
0000AA98                            
0000AA98                            loc_A1EC:				; XREF: Obj26_Solid
0000AA98 323C 001A                  		move.w	#$1A,d1
0000AA9C 343C 000F                  		move.w	#$F,d2
0000AAA0 6100 0000                  		bsr.w	Obj26_SolidSides
0000AAA4 6700 0000                  		beq.w	loc_A25C
0000AAA8 4A69 0012                  		tst.w	$12(a1)
0000AAAC 6B00                       		bmi.s	loc_A20A
0000AAAE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AAB4 6700                       		beq.s	loc_A25C	; if yes, branch
0000AAB6                            
0000AAB6                            loc_A20A:
0000AAB6 4A41                       		tst.w	d1
0000AAB8 6A00                       		bpl.s	loc_A220
0000AABA 9769 000C                  		sub.w	d3,$C(a1)
0000AABE 6100 D1FE                  		bsr.w	loc_74AE
0000AAC2 117C 0002 0025             		move.b	#2,$25(a0)
0000AAC8 6000 0000                  		bra.w	Obj26_Animate
0000AACC                            ; ===========================================================================
0000AACC                            
0000AACC                            loc_A220:
0000AACC 4A40                       		tst.w	d0
0000AACE 6700 0000                  		beq.w	loc_A246
0000AAD2 6B00                       		bmi.s	loc_A230
0000AAD4 4A69 0010                  		tst.w	$10(a1)
0000AAD8 6B00                       		bmi.s	loc_A246
0000AADA 6000                       		bra.s	loc_A236
0000AADC                            ; ===========================================================================
0000AADC                            
0000AADC                            loc_A230:
0000AADC 4A69 0010                  		tst.w	$10(a1)
0000AAE0 6A00                       		bpl.s	loc_A246
0000AAE2                            
0000AAE2                            loc_A236:
0000AAE2 9169 0008                  		sub.w	d0,8(a1)
0000AAE6 337C 0000 0014             		move.w	#0,$14(a1)
0000AAEC 337C 0000 0010             		move.w	#0,$10(a1)
0000AAF2                            
0000AAF2                            loc_A246:
0000AAF2 0829 0001 0022             		btst	#1,$22(a1)
0000AAF8 6600                       		bne.s	loc_A26A
0000AAFA 08E9 0005 0022             		bset	#5,$22(a1)
0000AB00 08E8 0005 0022             		bset	#5,$22(a0)
0000AB06 6000                       		bra.s	Obj26_Animate
0000AB08                            ; ===========================================================================
0000AB08                            
0000AB08                            loc_A25C:
0000AB08 0828 0005 0022             		btst	#5,$22(a0)
0000AB0E 6700                       		beq.s	Obj26_Animate
0000AB10 337C 0001 001C             		move.w	#1,$1C(a1)
0000AB16                            
0000AB16                            loc_A26A:
0000AB16 08A8 0005 0022             		bclr	#5,$22(a0)
0000AB1C 08A9 0005 0022             		bclr	#5,$22(a1)
0000AB22                            
0000AB22                            Obj26_Animate:				; XREF: Obj26_Index
0000AB22 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AB28 6100 0000                  		bsr.w	AnimateSprite
0000AB2C                            
0000AB2C                            Obj26_Display:				; XREF: Obj26_Index
0000AB2C 6100 0000                  		bsr.w	DisplaySprite
0000AB30 3028 0008                  		move.w	8(a0),d0
0000AB34 0240 FF80                  		andi.w	#$FF80,d0
0000AB38 3238 F700                  		move.w	($FFFFF700).w,d1
0000AB3C 0441 0080                  		subi.w	#$80,d1
0000AB40 0241 FF80                  		andi.w	#$FF80,d1
0000AB44 9041                       		sub.w	d1,d0
0000AB46 0C40 0280                  		cmpi.w	#$280,d0
0000AB4A 6200 0000                  		bhi.w	DeleteObject
0000AB4E 4E75                       		rts	
0000AB50                            ; ===========================================================================
0000AB50                            
0000AB50                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB50 5428 0024                  		addq.b	#2,$24(a0)
0000AB54 117C 0000 0020             		move.b	#0,$20(a0)
0000AB5A 6100 0000                  		bsr.w	SingleObjLoad
0000AB5E 6600                       		bne.s	Obj26_Explode
0000AB60 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB64 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB70 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB76 7400                       		moveq	#0,d2	; GMZ
0000AB78 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB7A                            
0000AB7A                            Obj26_Explode:
0000AB7A 6100 0000                  		bsr.w	SingleObjLoad
0000AB7E 6600                       		bne.s	Obj26_SetBroken
0000AB80 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB84 5429 0024                  		addq.b	#2,$24(a1)
0000AB88 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB8C 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB98                            
0000AB98                            Obj26_NextExplosion:
0000AB98 5802                       		addq.b	#4,d2
0000AB9A 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB9E                            
0000AB9E                            Obj26_SetBroken:
0000AB9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ABA2 7000                       		moveq	#0,d0
0000ABA4 1028 0023                  		move.b	$23(a0),d0
0000ABA8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ABAE 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ABB4 6000 0000                  		bra.w	DisplaySprite
0000ABB8                            ; ===========================================================================
0000ABB8                            ; ---------------------------------------------------------------------------
0000ABB8                            ; Object 2E - contents of monitors
0000ABB8                            ; ---------------------------------------------------------------------------
0000ABB8                            
0000ABB8                            Obj2E:					; XREF: Obj_Index
0000ABB8 7000                       		moveq	#0,d0
0000ABBA 1028 0024                  		move.b	$24(a0),d0
0000ABBE 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ABC2 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ABC6 6000 0000                  		bra.w	DisplaySprite
0000ABCA                            ; ===========================================================================
0000ABCA 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ABCC 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ABCE 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            Obj2E_Main:				; XREF: Obj2E_Index
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4 317C 0680 0002             		move.w	#$680,2(a0)
0000ABDA 117C 0024 0001             		move.b	#$24,1(a0)
0000ABE0 117C 0003 0018             		move.b	#3,$18(a0)
0000ABE6 117C 0008 0019             		move.b	#8,$19(a0)
0000ABEC 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABF2 7000                       		moveq	#0,d0
0000ABF4 1028 001C                  		move.b	$1C(a0),d0
0000ABF8 5400                       		addq.b	#2,d0
0000ABFA 1140 001A                  		move.b	d0,$1A(a0)
0000ABFE 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AC04 D000                       		add.b	d0,d0
0000AC06 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AC0A 5249                       		addq.w	#1,a1
0000AC0C 2149 0004                  		move.l	a1,4(a0)
0000AC10                            
0000AC10                            Obj2E_Move:				; XREF: Obj2E_Index
0000AC10 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AC14 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AC18 6100 0000                  		bsr.w	SpeedToPos
0000AC1C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AC24 5428 0024                  		addq.b	#2,$24(a0)
0000AC28 317C 001D 001E             		move.w	#29,$1E(a0)
0000AC2E 1028 001C                  		move.b	$1C(a0),d0
0000AC32 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AC36 6600                       		bne.s	Obj2E_ChkSonic
0000AC38 4E75                       		rts			; Eggman monitor does nothing
0000AC3A                            ; ===========================================================================
0000AC3A                            
0000AC3A                            Obj2E_ChkSonic:
0000AC3A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AC3E 6600                       		bne.s	Obj2E_ChkShoes
0000AC40                            
0000AC40                            ExtraLife:
0000AC40 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC44 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC48 303C 0088                  		move.w	#$88,d0
0000AC4C 4EF9 0000 159A             		jmp	(PlaySound).l	; play extra life music
0000AC52                            ; ===========================================================================
0000AC52                            
0000AC52                            Obj2E_ChkShoes:
0000AC52 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC56 6600                       		bne.s	Obj2E_ChkShield
0000AC58 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC5E 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC64 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC6A 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC70 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC76 303C 00E2                  		move.w	#$E2,d0
0000AC7A 4EF9 0000 159A             		jmp	(PlaySound).l	; Speed	up the music
0000AC80                            ; ===========================================================================
0000AC80                            
0000AC80                            Obj2E_ChkShield:
0000AC80 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC84 6600                       		bne.s	Obj2E_ChkInvinc
0000AC86 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC8C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC92 303C 00AF                  		move.w	#$AF,d0
0000AC96 4EF9 0000 159A             		jmp	(PlaySound).l	; play shield sound
0000AC9C                            ; ===========================================================================
0000AC9C                            
0000AC9C                            Obj2E_ChkInvinc:
0000AC9C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000ACA0 6600                       		bne.s	Obj2E_ChkRings
0000ACA2 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000ACA8 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000ACAE 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000ACB4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000ACBA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000ACC0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000ACC6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000ACCC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000ACD2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000ACD8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000ACDE 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000ACE2 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000ACE4 303C 0087                  		move.w	#$87,d0
0000ACE8 4EF9 0000 159A             		jmp	(PlaySound).l	; play invincibility music
0000ACEE                            ; ===========================================================================
0000ACEE                            
0000ACEE                            Obj2E_NoMusic:
0000ACEE 4E75                       		rts	
0000ACF0                            ; ===========================================================================
0000ACF0                            
0000ACF0                            Obj2E_ChkRings:
0000ACF0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACF4 6600                       		bne.s	Obj2E_ChkS
0000ACF6 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACFC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AD02 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AD08 6500                       		bcs.s	Obj2E_RingSound
0000AD0A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AD10 6700 FF2E                  		beq.w	ExtraLife
0000AD14 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AD1A 6500                       		bcs.s	Obj2E_RingSound
0000AD1C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AD22 6700 FF1C                  		beq.w	ExtraLife
0000AD26                            
0000AD26                            Obj2E_RingSound:
0000AD26 303C 00B5                  		move.w	#$B5,d0
0000AD2A 4EF9 0000 159A             		jmp	(PlaySound).l	; play ring sound
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            Obj2E_ChkS:
0000AD30 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AD34 6600                       		bne.s	Obj2E_ChkEnd
0000AD36                            		; nop	
0000AD36 7201                       		moveq	#1,d1
0000AD38 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AD3C                            
0000AD3C                            Obj2E_ChkEnd:
0000AD3C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AD3E                            ; ===========================================================================
0000AD3E                            
0000AD3E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AD3E 5368 001E                  		subq.w	#1,$1E(a0)
0000AD42 6B00 0000                  		bmi.w	DeleteObject
0000AD46 4E75                       		rts	
0000AD48                            ; ---------------------------------------------------------------------------
0000AD48                            ; Subroutine to	make the sides of a monitor solid
0000AD48                            ; ---------------------------------------------------------------------------
0000AD48                            
0000AD48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD48                            
0000AD48                            
0000AD48                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AD48 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD4C 3029 0008                  		move.w	8(a1),d0
0000AD50 9068 0008                  		sub.w	8(a0),d0
0000AD54 D041                       		add.w	d1,d0
0000AD56 6B00                       		bmi.s	loc_A4E6
0000AD58 3601                       		move.w	d1,d3
0000AD5A D643                       		add.w	d3,d3
0000AD5C B043                       		cmp.w	d3,d0
0000AD5E 6200                       		bhi.s	loc_A4E6
0000AD60 1629 0016                  		move.b	$16(a1),d3
0000AD64 4883                       		ext.w	d3
0000AD66 D443                       		add.w	d3,d2
0000AD68 3629 000C                  		move.w	$C(a1),d3
0000AD6C 9668 000C                  		sub.w	$C(a0),d3
0000AD70 D642                       		add.w	d2,d3
0000AD72 6B00                       		bmi.s	loc_A4E6
0000AD74 D442                       		add.w	d2,d2
0000AD76 B642                       		cmp.w	d2,d3
0000AD78 6400                       		bcc.s	loc_A4E6
0000AD7A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD7E 6B00                       		bmi.s	loc_A4E6
0000AD80 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD86 6400                       		bcc.s	loc_A4E6
0000AD88 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD8C 6600                       		bne.s	loc_A4E6
0000AD8E B240                       		cmp.w	d0,d1
0000AD90 6400                       		bcc.s	loc_A4DC
0000AD92 D241                       		add.w	d1,d1
0000AD94 9041                       		sub.w	d1,d0
0000AD96                            
0000AD96                            loc_A4DC:
0000AD96 0C43 0010                  		cmpi.w	#$10,d3
0000AD9A 6500                       		bcs.s	loc_A4EA
0000AD9C                            
0000AD9C                            loc_A4E2:
0000AD9C 7201                       		moveq	#1,d1
0000AD9E 4E75                       		rts	
0000ADA0                            ; ===========================================================================
0000ADA0                            
0000ADA0                            loc_A4E6:
0000ADA0 7200                       		moveq	#0,d1
0000ADA2 4E75                       		rts	
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            loc_A4EA:
0000ADA4 7200                       		moveq	#0,d1
0000ADA6 1228 0019                  		move.b	$19(a0),d1
0000ADAA 5841                       		addq.w	#4,d1
0000ADAC 3401                       		move.w	d1,d2
0000ADAE D442                       		add.w	d2,d2
0000ADB0 D269 0008                  		add.w	8(a1),d1
0000ADB4 9268 0008                  		sub.w	8(a0),d1
0000ADB8 6BE2                       		bmi.s	loc_A4E2
0000ADBA B242                       		cmp.w	d2,d1
0000ADBC 64DE                       		bcc.s	loc_A4E2
0000ADBE 72FF                       		moveq	#-1,d1
0000ADC0 4E75                       		rts	
0000ADC2                            ; End of function Obj26_SolidSides
0000ADC2                            
0000ADC2                            ; ===========================================================================
0000ADC2                            Ani_obj26:
0000ADC2                            	include "_anim\obj26.asm"
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2                            ; Animation script - monitors
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ADC8 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ADCE 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ADD4 0000                       		dc.w byte_A582-Ani_obj26
0000ADD6 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ADDC 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ADE8 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADF4 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AE00 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AE0C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AE18 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AE24 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AE30 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AE3C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AE44                            		even
0000AE44                            		even
0000AE44                            
0000AE44                            ; ---------------------------------------------------------------------------
0000AE44                            ; Sprite mappings - monitors
0000AE44                            ; ---------------------------------------------------------------------------
0000AE44                            Map_obj26:
0000AE44                            	include "_maps\obj26.asm"
0000AE44                            ; ================================================================================
0000AE44                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AE44                            ; ================================================================================
0000AE44                            
0000AE44                            DATAY1U343IF3L:
0000AE44 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AE48 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE4C 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE50 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE54 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE58 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE5C 05                         DATAY1U343IF3L_0: dc.b $5
0000AE5D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE62 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE67 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE6C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE71 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE76 06                         DATAY1U343IF3L_1: dc.b $6
0000AE77 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE7C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE81 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE86 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE8B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE90 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE95 05                         DATAY1U343IF3L_2: dc.b $5
0000AE96 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE9B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEA0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEA5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEAA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEAF 05                         DATAY1U343IF3L_3: dc.b $5
0000AEB0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEB5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEBA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEBF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEC4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEC9 06                         DATAY1U343IF3L_4: dc.b $6
0000AECA F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AECF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AED4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AED9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEDE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEE3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEE8 06                         DATAY1U343IF3L_5: dc.b $6
0000AEE9 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEEE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEF3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEF8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEFD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF02 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF07 06                         DATAY1U343IF3L_6: dc.b $6
0000AF08 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AF0D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF12 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF17 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF1C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF21 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF26 06                         DATAY1U343IF3L_7: dc.b $6
0000AF27 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AF2C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF31 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF36 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF3B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF40 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF45 06                         DATAY1U343IF3L_8: dc.b $6
0000AF46 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF4B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF50 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF55 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF5A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF5F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF64 06                         DATAY1U343IF3L_9: dc.b $6
0000AF65 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF6A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF6F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF74 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF79 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF7E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF83 05                         DATAY1U343IF3L_A: dc.b $5
0000AF84 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF89 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF8E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF93 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF98 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF9D 01                         DATAY1U343IF3L_B: dc.b $1
0000AF9E FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AFA4 00                         	even
0000AFA4 00                         	even
0000AFA4                            
0000AFA4                            ; ===========================================================================
0000AFA4                            ; ---------------------------------------------------------------------------
0000AFA4                            ; Object 0E - Sonic on the title screen
0000AFA4                            ; ---------------------------------------------------------------------------
0000AFA4                            
0000AFA4                            Obj0E:					; XREF: Obj_Index
0000AFA4 7000                       		moveq	#0,d0
0000AFA6 1028 0024                  		move.b	$24(a0),d0
0000AFAA 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AFAE 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AFB2                            ; ===========================================================================
0000AFB2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AFB4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AFB6 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AFB8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AFBA                            ; ===========================================================================
0000AFBA                            
0000AFBA                            Obj0E_Main:				; XREF: Obj0E_Index
0000AFBA 5428 0024                  		addq.b	#2,$24(a0)
0000AFBE 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AFC4 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AFCA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AFD2 317C 2300 0002             		move.w	#$2300,2(a0)
0000AFD8 117C 0001 0018             		move.b	#1,$18(a0)
0000AFDE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AFE4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFEA 6100 0000                  		bsr.w	AnimateSprite
0000AFEE                            
0000AFEE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFEE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFF2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFF4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFF8 6000 0000                  		bra.w	DisplaySprite
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFFC 4E75                       		rts	
0000AFFE                            ; ===========================================================================
0000AFFE                            
0000AFFE                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFFE 5168 000A                  		subq.w	#8,$A(a0)
0000B002 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B008 6600                       		bne.s	Obj0E_Display
0000B00A 5428 0024                  		addq.b	#2,$24(a0)
0000B00E                            
0000B00E                            Obj0E_Display:
0000B00E 6000 0000                  		bra.w	DisplaySprite
0000B012                            ; ===========================================================================
0000B012 4E75                       		rts	
0000B014                            ; ===========================================================================
0000B014                            
0000B014                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B014 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B01A 6100 0000                  		bsr.w	AnimateSprite
0000B01E 6000 0000                  		bra.w	DisplaySprite
0000B022                            ; ===========================================================================
0000B022 4E75                       		rts	
0000B024                            ; ===========================================================================
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            
0000B024                            Obj0F:					; XREF: Obj_Index
0000B024 7000                       		moveq	#0,d0
0000B026 1028 0024                  		move.b	$24(a0),d0
0000B02A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B02E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B032 6000 0000                  		bra.w	DisplaySprite
0000B036                            ; ===========================================================================
0000B036 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B038 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B03A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B03C 5428 0024                  		addq.b	#2,$24(a0)
0000B040 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B046 317C 0130 000A             		move.w	#$130,$A(a0)
0000B04C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B054 317C 0200 0002             		move.w	#$200,2(a0)
0000B05A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B060 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B062 5428 0024                  		addq.b	#2,$24(a0)
0000B066 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B06C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B06E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B074 317C 0170 0008             		move.w	#$170,8(a0)
0000B07A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B080                            
0000B080                            locret_A6F8:				; XREF: Obj0F_Index
0000B080 4E75                       		rts	
0000B082                            ; ===========================================================================
0000B082                            
0000B082                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B082 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B088 6000 0000                  		bra.w	AnimateSprite
0000B08C                            ; ===========================================================================
0000B08C                            Ani_obj0E:
0000B08C                            	include "_anim\obj0E.asm"
0000B08C                            ; ---------------------------------------------------------------------------
0000B08C                            ; Animation script - Sonic on the title screen
0000B08C                            ; ---------------------------------------------------------------------------
0000B08C 0000                       		dc.w byte_A706-Ani_obj0E
0000B08E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B09A                            		even
0000B09A                            		even
0000B09A                            
0000B09A                            Ani_obj0F:
0000B09A                            	include "_anim\obj0F.asm"
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A 0000                       		dc.w byte_A714-Ani_obj0F
0000B09C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B0A0                            		even
0000B0A0                            		even
0000B0A0                            
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            ; Subroutine to	animate	a sprite using an animation script
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            
0000B0A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0A0                            
0000B0A0                            
0000B0A0                            AnimateSprite:
0000B0A0 7000                       		moveq	#0,d0
0000B0A2 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B0A6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B0AA 6700                       		beq.s	Anim_Run	; if not, branch
0000B0AC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B0B0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0B6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B0BC                            
0000B0BC                            Anim_Run:
0000B0BC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B0C0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B0C2 D040                       		add.w	d0,d0
0000B0C4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B0C8 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B0CC 7200                       		moveq	#0,d1
0000B0CE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B0D2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B0D6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B0D8                            
0000B0D8                            Anim_Next:
0000B0D8 1200                       		move.b	d0,d1
0000B0DA 0200 001F                  		andi.b	#$1F,d0
0000B0DE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B0E2 1028 0022                  		move.b	$22(a0),d0
0000B0E6 E719                       		rol.b	#3,d1
0000B0E8 B101                       		eor.b	d0,d1
0000B0EA 0201 0003                  		andi.b	#3,d1
0000B0EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0F4 8328 0001                  		or.b	d1,1(a0)
0000B0F8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0FC                            
0000B0FC                            Anim_Wait:
0000B0FC 4E75                       		rts	
0000B0FE                            ; ===========================================================================
0000B0FE                            
0000B0FE                            Anim_End_FF:
0000B0FE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B100 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B102 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B108 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B10C 60CA                       		bra.s	Anim_Next
0000B10E                            ; ===========================================================================
0000B10E                            
0000B10E                            Anim_End_FE:
0000B10E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B110 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B112 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B116 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B11A 9200                       		sub.b	d0,d1
0000B11C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B120 60B6                       		bra.s	Anim_Next
0000B122                            ; ===========================================================================
0000B122                            
0000B122                            Anim_End_FD:
0000B122 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B124 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B126 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B12C                            
0000B12C                            Anim_End_FC:
0000B12C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B12E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B130 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B134                            
0000B134                            Anim_End_FB:
0000B134 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B136 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B138 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B13E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B142                            
0000B142                            Anim_End_FA:
0000B142 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B144 6600                       		bne.s	Anim_End	; if not, branch
0000B146 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B14A                            
0000B14A                            Anim_End:
0000B14A 4E75                       		rts	
0000B14C                            ; End of function AnimateSprite
0000B14C                            
0000B14C                            ; ===========================================================================
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            Map_obj0F:
0000B14C                            	include "_maps\obj0F.asm"
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C 0000                       		dc.w byte_A7CD-Map_obj0F
0000B14E 0000                       		dc.w byte_A7CC-Map_obj0F
0000B150 0000                       		dc.w byte_A7EB-Map_obj0F
0000B152 0000                       		dc.w byte_A882-Map_obj0F
0000B154 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B155 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B15A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B15F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B164 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B169 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B16E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B173 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B174 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B179 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B17E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B183 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B188 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B18D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B192 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B197 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B19C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B1A1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B1A6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1BA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1BF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1CE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1D3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1D8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1DD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1EC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B200 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B205 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B20A 01                         byte_A882:	dc.b 1			; "TM"
0000B20B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B210                            		even
0000B210                            		even
0000B210                            
0000B210                            ; ---------------------------------------------------------------------------
0000B210                            ; Sprite mappings - Sonic on the title screen
0000B210                            ; ---------------------------------------------------------------------------
0000B210                            Map_obj0E:
0000B210                            	include "_maps\obj0E.asm"
0000B210                            ; ================================================================================
0000B210                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B210                            ; ================================================================================
0000B210                            
0000B210                            DATAGKI0HYDQBXP:
0000B210 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B214 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B218 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B21C 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B220 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B221 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B226 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B22B 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B230 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B235 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B23A 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B23F 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B244 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B249 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B24A 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B24F 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B254 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B259 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B25E 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B263 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B268 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B26D 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B272 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B277 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B27C 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B281 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B282 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B287 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B28C F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B291 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B296 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B29B 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B2A0 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B2A5 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B2AA 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B2AF 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B2B4 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B2B9 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B2BA FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B2BF F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B2C4 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B2C9 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B2CE 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B2D3 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B2D8 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B2DD 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B2E2 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B2E7 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2EC 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2ED F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2F2 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2F7 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2FC 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B301 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B306 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B30B 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B310 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B315 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B31A 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B31F 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B324 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B329 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B32E 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B333 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B338 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B33D 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B33E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B343 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B348 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B34D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B352 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B357 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B35C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B361 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B366 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B36B 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B370 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B375 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B376 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B37B 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B380 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B385 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B38A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B38F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B394 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B399 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B39E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B3A3 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B3A8 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B3AD 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B3B2 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B3B7 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B3BC 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B3C1 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B3C2 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B3C7 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B3CC 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B3D1 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B3D6 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B3DB 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B3E0 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B3E5 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3EA 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3EF EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3F4 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3F9 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3FE EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B403 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B408 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B40E 00                         	even
0000B40E 00                         	even
0000B40E                            
0000B40E                            ; ===========================================================================
0000B40E                            ; ---------------------------------------------------------------------------
0000B40E                            ; Object 2B - Chopper enemy (GHZ)
0000B40E                            ; ---------------------------------------------------------------------------
0000B40E                            
0000B40E                            Obj2B:					; XREF: Obj_Index
0000B40E 7000                       		moveq	#0,d0
0000B410 1028 0024                  		move.b	$24(a0),d0
0000B414 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B418 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B41C 6000 0000                  		bra.w	MarkObjGone
0000B420                            ; ===========================================================================
0000B420 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B422 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B424                            ; ===========================================================================
0000B424                            
0000B424                            Obj2B_Main:				; XREF: Obj2B_Index
0000B424 5428 0024                  		addq.b	#2,$24(a0)
0000B428 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B430 317C 047B 0002             		move.w	#$47B,2(a0)
0000B436 117C 0004 0001             		move.b	#4,1(a0)
0000B43C 117C 0004 0018             		move.b	#4,$18(a0)
0000B442 117C 0009 0020             		move.b	#9,$20(a0)
0000B448 117C 0010 0019             		move.b	#$10,$19(a0)
0000B44E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B454 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B45A                            
0000B45A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B45A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B460 6100 FC3E                  		bsr.w	AnimateSprite
0000B464 6100 0000                  		bsr.w	SpeedToPos
0000B468 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B46E 3028 0030                  		move.w	$30(a0),d0
0000B472 B068 000C                  		cmp.w	$C(a0),d0
0000B476 6400                       		bcc.s	Obj2B_ChgAni
0000B478 3140 000C                  		move.w	d0,$C(a0)
0000B47C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B482                            
0000B482                            Obj2B_ChgAni:
0000B482 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B488 0440 00C0                  		subi.w	#$C0,d0
0000B48C B068 000C                  		cmp.w	$C(a0),d0
0000B490 6400                       		bcc.s	locret_ABB6
0000B492 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B498 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B49C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B49E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B4A4                            
0000B4A4                            locret_ABB6:
0000B4A4 4E75                       		rts	
0000B4A6                            ; ===========================================================================
0000B4A6                            Ani_obj2B:
0000B4A6                            	include "_anim\obj2B.asm"
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6                            ; Animation script - Chopper enemy
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B4A8 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B4AA 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B4AC 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B4B0 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B4B4 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B4B8 00                         		even
0000B4B8 00                         		even
0000B4B8                            
0000B4B8                            ; ---------------------------------------------------------------------------
0000B4B8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B4B8                            ; ---------------------------------------------------------------------------
0000B4B8                            Map_obj2B:
0000B4B8                            	include "_maps\obj2B.asm"
0000B4B8                            Map_1ff1:
0000B4B8 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B4BA 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B4BC 02                         Map_1ff1_4: 	dc.b $2
0000B4BD E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B4C2 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4C7 02                         Map_1ff1_F: 	dc.b $2
0000B4C8 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B4CD 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4D2                            	even
0000B4D2                            	even
0000B4D2                            
0000B4D2                            ; ===========================================================================
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            ; Object 2C - Jaws enemy (LZ)
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            
0000B4D2                            Obj2C:					; XREF: Obj_Index
0000B4D2 7000                       		moveq	#0,d0
0000B4D4 1028 0024                  		move.b	$24(a0),d0
0000B4D8 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B4DC 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B4E0                            ; ===========================================================================
0000B4E0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B4E2 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B4E4                            ; ===========================================================================
0000B4E4                            
0000B4E4                            Obj2C_Main:				; XREF: Obj2C_Index
0000B4E4 5428 0024                  		addq.b	#2,$24(a0)
0000B4E8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4F0 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4F6 0028 0004 0001             		ori.b	#4,1(a0)
0000B4FC 117C 000A 0020             		move.b	#$A,$20(a0)
0000B502 117C 0004 0018             		move.b	#4,$18(a0)
0000B508 117C 0010 0019             		move.b	#$10,$19(a0)
0000B50E 7000                       		moveq	#0,d0
0000B510 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B514 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B516 5340                       		subq.w	#1,d0
0000B518 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B51C 3140 0032                  		move.w	d0,$32(a0)
0000B520 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B526 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B52C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B52E 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B532                            
0000B532                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B532 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B536 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B538 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B53E 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B542 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B548 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B54E                            
0000B54E                            Obj2C_Animate:
0000B54E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B554 6100 FB4A                  		bsr.w	AnimateSprite
0000B558 6100 0000                  		bsr.w	SpeedToPos
0000B55C 6000 0000                  		bra.w	MarkObjGone
0000B560                            ; ===========================================================================
0000B560                            Ani_obj2C:
0000B560                            	include "_anim\obj2C.asm"
0000B560                            ; ---------------------------------------------------------------------------
0000B560                            ; Animation script - Jaws enemy
0000B560                            ; ---------------------------------------------------------------------------
0000B560 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B562 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B568                            		even
0000B568                            		even
0000B568                            
0000B568                            ; ---------------------------------------------------------------------------
0000B568                            ; Sprite mappings - Jaws enemy (LZ)
0000B568                            ; ---------------------------------------------------------------------------
0000B568                            Map_obj2C:
0000B568                            	include "_maps\obj2C.asm"
0000B568                            ; ---------------------------------------------------------------------------
0000B568                            ; Sprite mappings - Jaws enemy (LZ)
0000B568                            ; ---------------------------------------------------------------------------
0000B568 0000                       		dc.w byte_AC78-Map_obj2C
0000B56A 0000                       		dc.w byte_AC83-Map_obj2C
0000B56C 0000                       		dc.w byte_AC8E-Map_obj2C
0000B56E 0000                       		dc.w byte_AC99-Map_obj2C
0000B570 02                         byte_AC78:	dc.b 2
0000B571 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B576 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B57B 02                         byte_AC83:	dc.b 2
0000B57C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B581 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B586 02                         byte_AC8E:	dc.b 2
0000B587 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B58C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B591 02                         byte_AC99:	dc.b 2
0000B592 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B597 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B59C                            		even
0000B59C                            		even
0000B59C                            
0000B59C                            ; ===========================================================================
0000B59C                            ; ---------------------------------------------------------------------------
0000B59C                            ; Object 2D - Burrobot enemy (LZ)
0000B59C                            ; ---------------------------------------------------------------------------
0000B59C                            
0000B59C                            Obj2D:					; XREF: Obj_Index
0000B59C 7000                       		moveq	#0,d0
0000B59E 1028 0024                  		move.b	$24(a0),d0
0000B5A2 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B5A6 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B5AA                            ; ===========================================================================
0000B5AA 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B5AC 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B5AE                            ; ===========================================================================
0000B5AE                            
0000B5AE                            Obj2D_Main:				; XREF: Obj2D_Index
0000B5AE 5428 0024                  		addq.b	#2,$24(a0)
0000B5B2 117C 0013 0016             		move.b	#$13,$16(a0)
0000B5B8 117C 0008 0017             		move.b	#8,$17(a0)
0000B5BE 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B5C6 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B5CC 0028 0004 0001             		ori.b	#4,1(a0)
0000B5D2 117C 0004 0018             		move.b	#4,$18(a0)
0000B5D8 117C 0005 0020             		move.b	#5,$20(a0)
0000B5DE 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5E4 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5E8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5EE                            
0000B5EE                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5EE 7000                       		moveq	#0,d0
0000B5F0 1028 0025                  		move.b	$25(a0),d0
0000B5F4 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5F8 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5FC 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B602 6100 FA9C                  		bsr.w	AnimateSprite
0000B606 6000 0000                  		bra.w	MarkObjGone
0000B60A                            ; ===========================================================================
0000B60A 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B60C 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B60E 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B610 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B612 5368 0030                  		subq.w	#1,$30(a0)
0000B616 6A00                       		bpl.s	locret_AD42
0000B618 5428 0025                  		addq.b	#2,$25(a0)
0000B61C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B622 317C 0080 0010             		move.w	#$80,$10(a0)
0000B628 117C 0001 001C             		move.b	#1,$1C(a0)
0000B62E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B634 6700                       		beq.s	locret_AD42
0000B636 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B63A                            
0000B63A                            locret_AD42:
0000B63A 4E75                       		rts	
0000B63C                            ; ===========================================================================
0000B63C                            
0000B63C                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B63C 5368 0030                  		subq.w	#1,$30(a0)
0000B640 6B00                       		bmi.s	loc_AD84
0000B642 6100 0000                  		bsr.w	SpeedToPos
0000B646 0868 0000 0032             		bchg	#0,$32(a0)
0000B64C 6600                       		bne.s	loc_AD78
0000B64E 3628 0008                  		move.w	8(a0),d3
0000B652 0643 000C                  		addi.w	#$C,d3
0000B656 0828 0000 0022             		btst	#0,$22(a0)
0000B65C 6600                       		bne.s	loc_AD6A
0000B65E 0443 0018                  		subi.w	#$18,d3
0000B662                            
0000B662                            loc_AD6A:
0000B662 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B668 0C41 000C                  		cmpi.w	#$C,d1
0000B66C 6C00                       		bge.s	loc_AD84
0000B66E 4E75                       		rts	
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            loc_AD78:				; XREF: Obj2D_Move
0000B670 4EB9 0000 0000             		jsr	ObjHitFloor
0000B676 D368 000C                  		add.w	d1,$C(a0)
0000B67A 4E75                       		rts	
0000B67C                            ; ===========================================================================
0000B67C                            
0000B67C                            loc_AD84:				; XREF: Obj2D_Move
0000B67C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B682 6700                       		beq.s	loc_ADA4
0000B684 5528 0025                  		subq.b	#2,$25(a0)
0000B688 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B68E 317C 0000 0010             		move.w	#0,$10(a0)
0000B694 117C 0000 001C             		move.b	#0,$1C(a0)
0000B69A 4E75                       		rts	
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            loc_ADA4:
0000B69C 5428 0025                  		addq.b	#2,$25(a0)
0000B6A0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6A6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B6AC 4E75                       		rts	
0000B6AE                            ; ===========================================================================
0000B6AE                            
0000B6AE                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B6AE 6100 0000                  		bsr.w	SpeedToPos
0000B6B2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B6B8 6B00                       		bmi.s	locret_ADF0
0000B6BA 117C 0003 001C             		move.b	#3,$1C(a0)
0000B6C0 4EB9 0000 0000             		jsr	ObjHitFloor
0000B6C6 4A41                       		tst.w	d1
0000B6C8 6A00                       		bpl.s	locret_ADF0
0000B6CA D368 000C                  		add.w	d1,$C(a0)
0000B6CE 317C 0000 0012             		move.w	#0,$12(a0)
0000B6D4 117C 0001 001C             		move.b	#1,$1C(a0)
0000B6DA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B6E0 5528 0025                  		subq.b	#2,$25(a0)
0000B6E4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6E8                            
0000B6E8                            locret_ADF0:
0000B6E8 4E75                       		rts	
0000B6EA                            ; ===========================================================================
0000B6EA                            
0000B6EA                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6EA 343C 0060                  		move.w	#$60,d2
0000B6EE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6F2 6400                       		bcc.s	locret_AE20
0000B6F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6F8 9068 000C                  		sub.w	$C(a0),d0
0000B6FC 6400                       		bcc.s	locret_AE20
0000B6FE 0C40 FF80                  		cmpi.w	#-$80,d0
0000B702 6500                       		bcs.s	locret_AE20
0000B704 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B708 6600                       		bne.s	locret_AE20
0000B70A 5528 0025                  		subq.b	#2,$25(a0)
0000B70E 3141 0010                  		move.w	d1,$10(a0)
0000B712 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B718                            
0000B718                            locret_AE20:
0000B718 4E75                       		rts	
0000B71A                            
0000B71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B71A                            
0000B71A                            
0000B71A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B71A 323C 0080                  		move.w	#$80,d1
0000B71E 08E8 0000 0022             		bset	#0,$22(a0)
0000B724 3038 D008                  		move.w	($FFFFD008).w,d0
0000B728 9068 0008                  		sub.w	8(a0),d0
0000B72C 6400                       		bcc.s	loc_AE40
0000B72E 4440                       		neg.w	d0
0000B730 4441                       		neg.w	d1
0000B732 08A8 0000 0022             		bclr	#0,$22(a0)
0000B738                            
0000B738                            loc_AE40:
0000B738 B042                       		cmp.w	d2,d0
0000B73A 4E75                       		rts	
0000B73C                            ; End of function Obj2D_ChkSonic2
0000B73C                            
0000B73C                            ; ===========================================================================
0000B73C                            Ani_obj2D:
0000B73C                            	include "_anim\obj2D.asm"
0000B73C                            ; ---------------------------------------------------------------------------
0000B73C                            ; Animation script - Burrobot enemy but craig
0000B73C                            ; ---------------------------------------------------------------------------
0000B73C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B73E 0000                       		dc.w byte_AE50-Ani_obj2D
0000B740 0000                       		dc.w byte_AE54-Ani_obj2D
0000B742 0000                       		dc.w byte_AE58-Ani_obj2D
0000B744 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B747 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B74B 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B759 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B75C                            		even
0000B75C                            		even
0000B75C                            
0000B75C                            ; ---------------------------------------------------------------------------
0000B75C                            ; Sprite mappings - Burrobot enemy (LZ)
0000B75C                            ; ---------------------------------------------------------------------------
0000B75C                            Map_obj2D:
0000B75C                            	include "_maps\obj2D.asm"
0000B75C                            Map_e3a3:
0000B75C 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B75E 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B760 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B762 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B764 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B766 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B768 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B76A 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B76C 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B76E 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B770 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B772 02                         Map_e3a3_16: 	dc.b $2
0000B773 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B778 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B77D 02                         Map_e3a3_21: 	dc.b $2
0000B77E EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B783 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B788 02                         Map_e3a3_2C: 	dc.b $2
0000B789 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B78E 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B793 02                         Map_e3a3_37: 	dc.b $2
0000B794 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B799 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B79E 02                         Map_e3a3_42: 	dc.b $2
0000B79F EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B7A4 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B7A9 02                         Map_e3a3_4D: 	dc.b $2
0000B7AA EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B7AF FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B7B4 02                         Map_e3a3_58: 	dc.b $2
0000B7B5 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B7BA FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B7BF 02                         Map_e3a3_63: 	dc.b $2
0000B7C0 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B7C5 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B7CA 02                         Map_e3a3_6E: 	dc.b $2
0000B7CB EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B7D0 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B7D5 02                         Map_e3a3_79: 	dc.b $2
0000B7D6 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B7DB 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B7E0 02                         Map_e3a3_84: 	dc.b $2
0000B7E1 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B7E6 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7EC 00                         	even
0000B7EC 00                         	even
0000B7EC                            
0000B7EC                            ; ===========================================================================
0000B7EC                            ; ---------------------------------------------------------------------------
0000B7EC                            ; Object 2F - large moving platforms (MZ)
0000B7EC                            ; ---------------------------------------------------------------------------
0000B7EC                            
0000B7EC                            Obj2F:					; XREF: Obj_Index
0000B7EC 7000                       		moveq	#0,d0
0000B7EE 1028 0024                  		move.b	$24(a0),d0
0000B7F2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7F6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7FA                            ; ===========================================================================
0000B7FA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7FC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7FE                            
0000B7FE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B800 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B802 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B804 0140                       		dc.b 1,	$40
0000B806 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B808 0220                       		dc.b 2,	$20
0000B80A                            ; ===========================================================================
0000B80A                            
0000B80A                            Obj2F_Main:				; XREF: Obj2F_Index
0000B80A 5428 0024                  		addq.b	#2,$24(a0)
0000B80E 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B816 317C C000 0002             		move.w	#$C000,2(a0)
0000B81C 117C 0004 0001             		move.b	#4,1(a0)
0000B822 117C 0005 0018             		move.b	#5,$18(a0)
0000B828 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B82E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B834 7000                       		moveq	#0,d0
0000B836 1028 0028                  		move.b	$28(a0),d0
0000B83A E448                       		lsr.w	#2,d0
0000B83C 0240 001C                  		andi.w	#$1C,d0
0000B840 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B844 3019                       		move.w	(a1)+,d0
0000B846 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B84A 214A 0030                  		move.l	a2,$30(a0)
0000B84E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B852 1151 0019                  		move.b	(a1),$19(a0)
0000B856 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B85C 117C 0040 0016             		move.b	#$40,$16(a0)
0000B862 08E8 0004 0001             		bset	#4,1(a0)
0000B868                            
0000B868                            Obj2F_Action:				; XREF: Obj2F_Index
0000B868 6100 0000                  		bsr.w	Obj2F_Types
0000B86C 4A28 0025                  		tst.b	$25(a0)
0000B870 6700                       		beq.s	Obj2F_Solid
0000B872 7200                       		moveq	#0,d1
0000B874 1228 0019                  		move.b	$19(a0),d1
0000B878 0641 000B                  		addi.w	#$B,d1
0000B87C 6100 C552                  		bsr.w	ExitPlatform
0000B880 0829 0003 0022             		btst	#3,$22(a1)
0000B886 6600 0000                  		bne.w	Obj2F_Slope
0000B88A 4228 0025                  		clr.b	$25(a0)
0000B88E 6000                       		bra.s	Obj2F_Display
0000B890                            ; ===========================================================================
0000B890                            
0000B890                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B890 7200                       		moveq	#0,d1
0000B892 1228 0019                  		move.b	$19(a0),d1
0000B896 0641 000B                  		addi.w	#$B,d1
0000B89A 2468 0030                  		movea.l	$30(a0),a2
0000B89E 3428 0008                  		move.w	8(a0),d2
0000B8A2 6100 D51C                  		bsr.w	SlopeObject2
0000B8A6 6000                       		bra.s	Obj2F_Display
0000B8A8                            ; ===========================================================================
0000B8A8                            
0000B8A8                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B8A8 7200                       		moveq	#0,d1
0000B8AA 1228 0019                  		move.b	$19(a0),d1
0000B8AE 0641 000B                  		addi.w	#$B,d1
0000B8B2 343C 0020                  		move.w	#$20,d2
0000B8B6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B8BC 6600                       		bne.s	loc_AF8E
0000B8BE 343C 0030                  		move.w	#$30,d2
0000B8C2                            
0000B8C2                            loc_AF8E:
0000B8C2 2468 0030                  		movea.l	$30(a0),a2
0000B8C6 6100 0000                  		bsr.w	SolidObject2F
0000B8CA                            
0000B8CA                            Obj2F_Display:				; XREF: Obj2F_Action
0000B8CA 6100 0000                  		bsr.w	DisplaySprite
0000B8CE 6000 0000                  		bra.w	Obj2F_ChkDel
0000B8D2                            
0000B8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8D2                            
0000B8D2                            
0000B8D2                            Obj2F_Types:				; XREF: Obj2F_Action
0000B8D2 7000                       		moveq	#0,d0
0000B8D4 1028 0028                  		move.b	$28(a0),d0
0000B8D8 0240 0007                  		andi.w	#7,d0
0000B8DC D040                       		add.w	d0,d0
0000B8DE 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B8E2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B8E6                            ; End of function Obj2F_Types
0000B8E6                            
0000B8E6                            ; ===========================================================================
0000B8E6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B8E8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8EA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8EC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8EE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8F0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8F2                            ; ===========================================================================
0000B8F2                            
0000B8F2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8F2 4E75                       		rts			; type 00 platform doesn't move
0000B8F4                            ; ===========================================================================
0000B8F4                            
0000B8F4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8F4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8F8 323C 0020                  		move.w	#$20,d1
0000B8FC 6000                       		bra.s	Obj2F_Move
0000B8FE                            ; ===========================================================================
0000B8FE                            
0000B8FE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8FE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B902 323C 0030                  		move.w	#$30,d1
0000B906 6000                       		bra.s	Obj2F_Move
0000B908                            ; ===========================================================================
0000B908                            
0000B908                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B908 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B90C 323C 0040                  		move.w	#$40,d1
0000B910 6000                       		bra.s	Obj2F_Move
0000B912                            ; ===========================================================================
0000B912                            
0000B912                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B912 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B916 323C 0060                  		move.w	#$60,d1
0000B91A                            
0000B91A                            Obj2F_Move:
0000B91A 0828 0003 0028             		btst	#3,$28(a0)
0000B920 6700                       		beq.s	loc_AFF2
0000B922 4440                       		neg.w	d0
0000B924 D041                       		add.w	d1,d0
0000B926                            
0000B926                            loc_AFF2:
0000B926 3228 002C                  		move.w	$2C(a0),d1
0000B92A 9240                       		sub.w	d0,d1
0000B92C 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B930 4E75                       		rts	
0000B932                            ; ===========================================================================
0000B932                            
0000B932                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B932 1028 0034                  		move.b	$34(a0),d0
0000B936 4A28 0025                  		tst.b	$25(a0)
0000B93A 6600                       		bne.s	loc_B010
0000B93C 5500                       		subq.b	#2,d0
0000B93E 6400                       		bcc.s	loc_B01C
0000B940 7000                       		moveq	#0,d0
0000B942 6000                       		bra.s	loc_B01C
0000B944                            ; ===========================================================================
0000B944                            
0000B944                            loc_B010:
0000B944 5800                       		addq.b	#4,d0
0000B946 0C00 0040                  		cmpi.b	#$40,d0
0000B94A 6500                       		bcs.s	loc_B01C
0000B94C 103C 0040                  		move.b	#$40,d0
0000B950                            
0000B950                            loc_B01C:
0000B950 1140 0034                  		move.b	d0,$34(a0)
0000B954 4EB9 0000 2D3A             		jsr	(CalcSine).l
0000B95A E848                       		lsr.w	#4,d0
0000B95C 3200                       		move.w	d0,d1
0000B95E D068 002C                  		add.w	$2C(a0),d0
0000B962 3140 000C                  		move.w	d0,$C(a0)
0000B966 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B96C 6600                       		bne.s	loc_B07A
0000B96E 4A28 0035                  		tst.b	$35(a0)
0000B972 6600                       		bne.s	loc_B07A
0000B974 117C 0001 0035             		move.b	#1,$35(a0)
0000B97A 6100 0000                  		bsr.w	SingleObjLoad2
0000B97E 6600                       		bne.s	loc_B07A
0000B980 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B984 3368 0008 0008             		move.w	8(a0),8(a1)
0000B98A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B990 5069 002C                  		addq.w	#8,$2C(a1)
0000B994 5769 002C                  		subq.w	#3,$2C(a1)
0000B998 0469 0040 0008             		subi.w	#$40,8(a1)
0000B99E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B9A4 2348 0038                  		move.l	a0,$38(a1)
0000B9A8 2448                       		movea.l	a0,a2
0000B9AA 6100                       		bsr.s	sub_B09C
0000B9AC                            
0000B9AC                            loc_B07A:
0000B9AC 7400                       		moveq	#0,d2
0000B9AE 45E8 0036                  		lea	$36(a0),a2
0000B9B2 141A                       		move.b	(a2)+,d2
0000B9B4 5302                       		subq.b	#1,d2
0000B9B6 6500                       		bcs.s	locret_B09A
0000B9B8                            
0000B9B8                            loc_B086:
0000B9B8 7000                       		moveq	#0,d0
0000B9BA 101A                       		move.b	(a2)+,d0
0000B9BC ED48                       		lsl.w	#6,d0
0000B9BE 0640 D000                  		addi.w	#-$3000,d0
0000B9C2 3240                       		movea.w	d0,a1
0000B9C4 3341 003C                  		move.w	d1,$3C(a1)
0000B9C8 51CA FFEE                  		dbf	d2,loc_B086
0000B9CC                            
0000B9CC                            locret_B09A:
0000B9CC 4E75                       		rts	
0000B9CE                            
0000B9CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9CE                            
0000B9CE                            
0000B9CE                            sub_B09C:
0000B9CE 45EA 0036                  		lea	$36(a2),a2
0000B9D2 7000                       		moveq	#0,d0
0000B9D4 1012                       		move.b	(a2),d0
0000B9D6 5212                       		addq.b	#1,(a2)
0000B9D8 45F2 0001                  		lea	1(a2,d0.w),a2
0000B9DC 3009                       		move.w	a1,d0
0000B9DE 0440 D000                  		subi.w	#-$3000,d0
0000B9E2 EC48                       		lsr.w	#6,d0
0000B9E4 0240 007F                  		andi.w	#$7F,d0
0000B9E8 1480                       		move.b	d0,(a2)
0000B9EA 4E75                       		rts	
0000B9EC                            ; End of function sub_B09C
0000B9EC                            
0000B9EC                            ; ===========================================================================
0000B9EC                            
0000B9EC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9EC 4A28 0035                  		tst.b	$35(a0)
0000B9F0 6700                       		beq.s	loc_B0C6
0000B9F2 4A28 0001                  		tst.b	1(a0)
0000B9F6 6A00                       		bpl.s	Obj2F_DelFlames
0000B9F8                            
0000B9F8                            loc_B0C6:
0000B9F8 3028 002A                  		move.w	$2A(a0),d0
0000B9FC 0240 FF80                  		andi.w	#$FF80,d0
0000BA00 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA04 0441 0080                  		subi.w	#$80,d1
0000BA08 0241 FF80                  		andi.w	#$FF80,d1
0000BA0C 9041                       		sub.w	d1,d0
0000BA0E 0C40 0280                  		cmpi.w	#$280,d0
0000BA12 6200 0000                  		bhi.w	DeleteObject
0000BA16 4E75                       		rts	
0000BA18                            ; ===========================================================================
0000BA18                            
0000BA18                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BA18 7400                       		moveq	#0,d2
0000BA1A                            
0000BA1A                            loc_B0E8:
0000BA1A 45E8 0036                  		lea	$36(a0),a2
0000BA1E 1412                       		move.b	(a2),d2
0000BA20 421A                       		clr.b	(a2)+
0000BA22 5302                       		subq.b	#1,d2
0000BA24 6500                       		bcs.s	locret_B116
0000BA26                            
0000BA26                            loc_B0F4:
0000BA26 7000                       		moveq	#0,d0
0000BA28 1012                       		move.b	(a2),d0
0000BA2A 421A                       		clr.b	(a2)+
0000BA2C ED48                       		lsl.w	#6,d0
0000BA2E 0640 D000                  		addi.w	#-$3000,d0
0000BA32 3240                       		movea.w	d0,a1
0000BA34 6100 0000                  		bsr.w	DeleteObject2
0000BA38 51CA FFEC                  		dbf	d2,loc_B0F4
0000BA3C 117C 0000 0035             		move.b	#0,$35(a0)
0000BA42 117C 0000 0034             		move.b	#0,$34(a0)
0000BA48                            
0000BA48                            locret_B116:
0000BA48 4E75                       		rts	
0000BA4A                            ; ===========================================================================
0000BA4A                            ; ---------------------------------------------------------------------------
0000BA4A                            ; Collision data for large moving platforms (MZ)
0000BA4A                            ; ---------------------------------------------------------------------------
0000BA4A                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA96                            		even
0000BA96                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BAC2                            		even
0000BAC2                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BB0E                            		even
0000BB0E                            ; ===========================================================================
0000BB0E                            ; ---------------------------------------------------------------------------
0000BB0E                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BB0E                            ; (appears when	you walk on sinking platforms)
0000BB0E                            ; ---------------------------------------------------------------------------
0000BB0E                            
0000BB0E                            Obj35:					; XREF: Obj_Index
0000BB0E 7000                       		moveq	#0,d0
0000BB10 1028 0024                  		move.b	$24(a0),d0
0000BB14 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BB18 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BB1C                            ; ===========================================================================
0000BB1C 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BB1E 0000                       		dc.w loc_B238-Obj35_Index
0000BB20 0000                       		dc.w Obj35_Move-Obj35_Index
0000BB22                            ; ===========================================================================
0000BB22                            
0000BB22                            Obj35_Main:				; XREF: Obj35_Index
0000BB22 5428 0024                  		addq.b	#2,$24(a0)
0000BB26 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BB2E 317C 0345 0002             		move.w	#$345,2(a0)
0000BB34 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BB3A 117C 0004 0001             		move.b	#4,1(a0)
0000BB40 117C 0001 0018             		move.b	#1,$18(a0)
0000BB46 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB4C 117C 0008 0019             		move.b	#8,$19(a0)
0000BB52 303C 00C8                  		move.w	#$C8,d0
0000BB56 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB5C 4A28 0028                  		tst.b	$28(a0)
0000BB60 6700                       		beq.s	loc_B238
0000BB62 5428 0024                  		addq.b	#2,$24(a0)
0000BB66 6000 0000                  		bra.w	Obj35_Move
0000BB6A                            ; ===========================================================================
0000BB6A                            
0000BB6A                            loc_B238:				; XREF: Obj35_Index
0000BB6A 2268 0030                  		movea.l	$30(a0),a1
0000BB6E 3228 0008                  		move.w	8(a0),d1
0000BB72 9268 002A                  		sub.w	$2A(a0),d1
0000BB76 0641 000C                  		addi.w	#$C,d1
0000BB7A 3001                       		move.w	d1,d0
0000BB7C E248                       		lsr.w	#1,d0
0000BB7E 1031 0000                  		move.b	(a1,d0.w),d0
0000BB82 4440                       		neg.w	d0
0000BB84 D068 002C                  		add.w	$2C(a0),d0
0000BB88 3400                       		move.w	d0,d2
0000BB8A D068 003C                  		add.w	$3C(a0),d0
0000BB8E 3140 000C                  		move.w	d0,$C(a0)
0000BB92 0C41 0084                  		cmpi.w	#$84,d1
0000BB96 6400                       		bcc.s	loc_B2B0
0000BB98 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BBA0 0C41 0080                  		cmpi.w	#$80,d1
0000BBA4 6400                       		bcc.s	loc_B2B0
0000BBA6 2028 0008                  		move.l	8(a0),d0
0000BBAA 0680 0008 0000             		addi.l	#$80000,d0
0000BBB0 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BBB6 6600                       		bne.s	loc_B2B0
0000BBB8 6100 0000                  		bsr.w	SingleObjLoad2
0000BBBC 6600                       		bne.s	loc_B2B0
0000BBBE 12BC 0035                  		move.b	#$35,0(a1)
0000BBC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBC8 3342 002C                  		move.w	d2,$2C(a1)
0000BBCC 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BBD2 137C 0001 0028             		move.b	#1,$28(a1)
0000BBD8 2468 0038                  		movea.l	$38(a0),a2
0000BBDC 6100 FDF0                  		bsr.w	sub_B09C
0000BBE0                            
0000BBE0                            loc_B2B0:
0000BBE0 6000                       		bra.s	Obj35_Animate
0000BBE2                            ; ===========================================================================
0000BBE2                            
0000BBE2                            Obj35_Move:				; XREF: Obj35_Index
0000BBE2 3028 002C                  		move.w	$2C(a0),d0
0000BBE6 D068 003C                  		add.w	$3C(a0),d0
0000BBEA 3140 000C                  		move.w	d0,$C(a0)
0000BBEE                            
0000BBEE                            Obj35_Animate:				; XREF: loc_B238
0000BBEE 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBF4 6100 F4AA                  		bsr.w	AnimateSprite
0000BBF8 6000 0000                  		bra.w	DisplaySprite
0000BBFC                            ; ===========================================================================
0000BBFC                            Ani_obj35:
0000BBFC                            	include "_anim\obj35.asm"
0000BBFC                            ; ---------------------------------------------------------------------------
0000BBFC                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBFC                            ; ---------------------------------------------------------------------------
0000BBFC 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBFE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BC04                            		even
0000BC04                            		even
0000BC04                            
0000BC04                            ; ---------------------------------------------------------------------------
0000BC04                            ; Sprite mappings - large moving platforms (MZ)
0000BC04                            ; ---------------------------------------------------------------------------
0000BC04                            Map_obj2F:
0000BC04                            	include "_maps\obj2F.asm"
0000BC04                            ; ---------------------------------------------------------------------------
0000BC04                            ; Sprite mappings - large moving platforms (MZ)
0000BC04                            ; ---------------------------------------------------------------------------
0000BC04 0000                       		dc.w byte_B2DA-Map_obj2F
0000BC06 0000                       		dc.w byte_B31C-Map_obj2F
0000BC08 0000                       		dc.w byte_B34F-Map_obj2F
0000BC0A 0D                         byte_B2DA:	dc.b $D
0000BC0B D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BC10 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BC15 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC1A D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BC1F F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BC24 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC29 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BC2E D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BC33 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BC38 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC3D 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BC42 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BC47 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC4C 0A                         byte_B31C:	dc.b $A
0000BC4D D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC52 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC57 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC5C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC61 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC66 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC6B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC70 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC75 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC7A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC7F 06                         byte_B34F:	dc.b 6
0000BC80 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC85 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC8A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC8F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC94 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC99 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC9E                            		even
0000BC9E                            		even
0000BC9E                            
0000BC9E                            ; ---------------------------------------------------------------------------
0000BC9E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC9E                            ; ---------------------------------------------------------------------------
0000BC9E                            Map_obj14:
0000BC9E                            	include "_maps\obj14.asm"
0000BC9E                            ; --------------------------------------------------------------------------------
0000BC9E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC9E                            ; --------------------------------------------------------------------------------
0000BC9E                            
0000BC9E                            SME_C6wT7:	
0000BC9E 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BCA2 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BCA6 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BCAA 01                         SME_C6wT7_C:	dc.b 1	
0000BCAB E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCB0 01                         SME_C6wT7_12:	dc.b 1	
0000BCB1 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCB6 02                         SME_C6wT7_18:	dc.b 2	
0000BCB7 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BCBC E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BCC1 01                         SME_C6wT7_23:	dc.b 1	
0000BCC2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCC7 01                         SME_C6wT7_29:	dc.b 1	
0000BCC8 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCCD 01                         SME_C6wT7_2F:	dc.b 1	
0000BCCE F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BCD4 00                         		even
0000BCD4 00                         		even
0000BCD4                            
0000BCD4                            ; ===========================================================================
0000BCD4                            ; ---------------------------------------------------------------------------
0000BCD4                            ; Object 30 - large green glassy blocks	(MZ)
0000BCD4                            ; ---------------------------------------------------------------------------
0000BCD4                            
0000BCD4                            Obj30:					; XREF: Obj_Index
0000BCD4 7000                       		moveq	#0,d0
0000BCD6 1028 0024                  		move.b	$24(a0),d0
0000BCDA 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BCDE 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BCE2 3028 0008                  		move.w	8(a0),d0
0000BCE6 0240 FF80                  		andi.w	#$FF80,d0
0000BCEA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCEE 0441 0080                  		subi.w	#$80,d1
0000BCF2 0241 FF80                  		andi.w	#$FF80,d1
0000BCF6 9041                       		sub.w	d1,d0
0000BCF8 0C40 0280                  		cmpi.w	#$280,d0
0000BCFC 6200 0000                  		bhi.w	Obj30_Delete
0000BD00 6000 0000                  		bra.w	DisplaySprite
0000BD04                            ; ===========================================================================
0000BD04                            
0000BD04                            Obj30_Delete:
0000BD04 6000 0000                  		bra.w	DeleteObject
0000BD08                            ; ===========================================================================
0000BD08 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BD0A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BD0C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BD0E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BD10 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BD12                            
0000BD12 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BD15 0400 01                    		dc.b 4,	0, 1
0000BD18 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BD1B 0800 01                    		dc.b 8,	0, 1
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            Obj30_Main:				; XREF: Obj30_Index
0000BD1E 45F9 0000 BD12             		lea	(Obj30_Vars1).l,a2
0000BD24 7201                       		moveq	#1,d1
0000BD26 117C 0048 0016             		move.b	#$48,$16(a0)
0000BD2C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BD32 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BD34 45F9 0000 BD18             		lea	(Obj30_Vars2).l,a2
0000BD3A 7201                       		moveq	#1,d1
0000BD3C 117C 0038 0016             		move.b	#$38,$16(a0)
0000BD42                            
0000BD42                            loc_B40C:
0000BD42 2248                       		movea.l	a0,a1
0000BD44 6000                       		bra.s	Obj30_Load	; load main object
0000BD46                            ; ===========================================================================
0000BD46                            
0000BD46                            Obj30_Loop:
0000BD46 6100 0000                  		bsr.w	SingleObjLoad2
0000BD4A 6600                       		bne.s	loc_B480
0000BD4C                            
0000BD4C                            Obj30_Load:				; XREF: Obj30_Main
0000BD4C 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD50 12BC 0030                  		move.b	#$30,0(a1)
0000BD54 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD5A 101A                       		move.b	(a2)+,d0
0000BD5C 4880                       		ext.w	d0
0000BD5E D068 000C                  		add.w	$C(a0),d0
0000BD62 3340 000C                  		move.w	d0,$C(a1)
0000BD66 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD6E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD74 137C 0004 0001             		move.b	#4,1(a1)
0000BD7A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD80 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD86 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD8C 137C 0004 0018             		move.b	#4,$18(a1)
0000BD92 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD96 2348 003C                  		move.l	a0,$3C(a1)
0000BD9A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD9E                            
0000BD9E 137C 0010 0019             		move.b	#$10,$19(a1)
0000BDA4 137C 0003 0018             		move.b	#3,$18(a1)
0000BDAA 5029 0028                  		addq.b	#8,$28(a1)
0000BDAE 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BDB4                            
0000BDB4                            loc_B480:
0000BDB4 317C 0090 0032             		move.w	#$90,$32(a0)
0000BDBA 08E8 0004 0001             		bset	#4,1(a0)
0000BDC0                            
0000BDC0                            Obj30_Block012:				; XREF: Obj30_Index
0000BDC0 6100 0000                  		bsr.w	Obj30_Types
0000BDC4 323C 002B                  		move.w	#$2B,d1
0000BDC8 343C 0048                  		move.w	#$48,d2
0000BDCC 363C 0049                  		move.w	#$49,d3
0000BDD0 3828 0008                  		move.w	8(a0),d4
0000BDD4 6000 0000                  		bra.w	SolidObject
0000BDD8                            ; ===========================================================================
0000BDD8                            
0000BDD8                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BDD8 2268 003C                  		movea.l	$3C(a0),a1
0000BDDC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDE2 6000 0000                  		bra.w	Obj30_Types
0000BDE6                            ; ===========================================================================
0000BDE6                            
0000BDE6                            Obj30_Block34:				; XREF: Obj30_Index
0000BDE6 6100 0000                  		bsr.w	Obj30_Types
0000BDEA 323C 002B                  		move.w	#$2B,d1
0000BDEE 343C 0038                  		move.w	#$38,d2
0000BDF2 363C 0039                  		move.w	#$39,d3
0000BDF6 3828 0008                  		move.w	8(a0),d4
0000BDFA 6000 0000                  		bra.w	SolidObject
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDFE 2268 003C                  		movea.l	$3C(a0),a1
0000BE02 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BE08 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BE0E 6000 0002                  		bra.w	*+4
0000BE12                            
0000BE12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE12                            
0000BE12                            
0000BE12                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BE12 7000                       		moveq	#0,d0
0000BE14 1028 0028                  		move.b	$28(a0),d0
0000BE18 0240 0007                  		andi.w	#7,d0
0000BE1C D040                       		add.w	d0,d0
0000BE1E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BE22 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BE26                            ; End of function Obj30_Types
0000BE26                            
0000BE26                            ; ===========================================================================
0000BE26 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BE28 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BE2A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BE2C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BE2E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BE30                            ; ===========================================================================
0000BE30                            
0000BE30                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BE30 4E75                       		rts	
0000BE32                            ; ===========================================================================
0000BE32                            
0000BE32                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BE32 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE36 323C 0040                  		move.w	#$40,d1
0000BE3A 6000                       		bra.s	loc_B514
0000BE3C                            ; ===========================================================================
0000BE3C                            
0000BE3C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BE3C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE40 323C 0040                  		move.w	#$40,d1
0000BE44 4440                       		neg.w	d0
0000BE46 D041                       		add.w	d1,d0
0000BE48                            
0000BE48                            loc_B514:				; XREF: Obj30_Type01
0000BE48 0828 0003 0028             		btst	#3,$28(a0)
0000BE4E 6700                       		beq.s	loc_B526
0000BE50 4440                       		neg.w	d0
0000BE52 D041                       		add.w	d1,d0
0000BE54 E208                       		lsr.b	#1,d0
0000BE56 0640 0020                  		addi.w	#$20,d0
0000BE5A                            
0000BE5A                            loc_B526:
0000BE5A 6000 0000                  		bra.w	loc_B5EE
0000BE5E                            ; ===========================================================================
0000BE5E                            
0000BE5E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE5E 0828 0003 0028             		btst	#3,$28(a0)
0000BE64 6700                       		beq.s	loc_B53E
0000BE66 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE6A 0440 0010                  		subi.w	#$10,d0
0000BE6E 6000 0000                  		bra.w	loc_B5EE
0000BE72                            ; ===========================================================================
0000BE72                            
0000BE72                            loc_B53E:
0000BE72 0828 0003 0022             		btst	#3,$22(a0)
0000BE78 6600                       		bne.s	loc_B54E
0000BE7A 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE80 6000                       		bra.s	loc_B582
0000BE82                            ; ===========================================================================
0000BE82                            
0000BE82                            loc_B54E:
0000BE82 4A28 0034                  		tst.b	$34(a0)
0000BE86 6600                       		bne.s	loc_B582
0000BE88 117C 0001 0034             		move.b	#1,$34(a0)
0000BE8E 08E8 0000 0035             		bset	#0,$35(a0)
0000BE94 6700                       		beq.s	loc_B582
0000BE96 08E8 0007 0034             		bset	#7,$34(a0)
0000BE9C 317C 0010 0036             		move.w	#$10,$36(a0)
0000BEA2 117C 000A 0038             		move.b	#$A,$38(a0)
0000BEA8 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BEAE 6600                       		bne.s	loc_B582
0000BEB0 317C 0040 0036             		move.w	#$40,$36(a0)
0000BEB6                            
0000BEB6                            loc_B582:
0000BEB6 4A28 0034                  		tst.b	$34(a0)
0000BEBA 6A00                       		bpl.s	loc_B5AA
0000BEBC 4A28 0038                  		tst.b	$38(a0)
0000BEC0 6700                       		beq.s	loc_B594
0000BEC2 5328 0038                  		subq.b	#1,$38(a0)
0000BEC6 6600                       		bne.s	loc_B5AA
0000BEC8                            
0000BEC8                            loc_B594:
0000BEC8 4A68 0032                  		tst.w	$32(a0)
0000BECC 6700                       		beq.s	loc_B5A4
0000BECE 5368 0032                  		subq.w	#1,$32(a0)
0000BED2 5368 0036                  		subq.w	#1,$36(a0)
0000BED6 6600                       		bne.s	loc_B5AA
0000BED8                            
0000BED8                            loc_B5A4:
0000BED8 08A8 0007 0034             		bclr	#7,$34(a0)
0000BEDE                            
0000BEDE                            loc_B5AA:
0000BEDE 3028 0032                  		move.w	$32(a0),d0
0000BEE2 6000                       		bra.s	loc_B5EE
0000BEE4                            ; ===========================================================================
0000BEE4                            
0000BEE4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BEE4 0828 0003 0028             		btst	#3,$28(a0)
0000BEEA 6700                       		beq.s	Obj30_ChkSwitch
0000BEEC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEF0 0440 0010                  		subi.w	#$10,d0
0000BEF4 6000                       		bra.s	loc_B5EE
0000BEF6                            ; ===========================================================================
0000BEF6                            
0000BEF6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEF6 4A28 0034                  		tst.b	$34(a0)
0000BEFA 6600                       		bne.s	loc_B5E0
0000BEFC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BF00 7000                       		moveq	#0,d0
0000BF02 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BF06 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BF08 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BF0C 6700                       		beq.s	loc_B5EA	; if not, branch
0000BF0E 117C 0001 0034             		move.b	#1,$34(a0)
0000BF14                            
0000BF14                            loc_B5E0:
0000BF14 4A68 0032                  		tst.w	$32(a0)
0000BF18 6700                       		beq.s	loc_B5EA
0000BF1A 5568 0032                  		subq.w	#2,$32(a0)
0000BF1E                            
0000BF1E                            loc_B5EA:
0000BF1E 3028 0032                  		move.w	$32(a0),d0
0000BF22                            
0000BF22                            loc_B5EE:
0000BF22 3228 0030                  		move.w	$30(a0),d1
0000BF26 9240                       		sub.w	d0,d1
0000BF28 3141 000C                  		move.w	d1,$C(a0)
0000BF2C 4E75                       		rts	
0000BF2E                            ; ===========================================================================
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E                            Map_obj30:
0000BF2E                            	include "_maps\obj30.asm"
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E 0000                       		dc.w byte_B600-Map_obj30
0000BF30 0000                       		dc.w byte_B63D-Map_obj30
0000BF32 0000                       		dc.w byte_B648-Map_obj30
0000BF34 0C                         byte_B600:	dc.b $C
0000BF35 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BF3A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BF3F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BF44 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BF49 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF4E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF53 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF58 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF5D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF62 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF67 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF6C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF71 02                         byte_B63D:	dc.b 2
0000BF72 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF77 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF7C 0A                         byte_B648:	dc.b $A
0000BF7D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF82 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF87 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF8C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF91 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF96 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF9B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BFA0 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BFA5 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BFAA 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BFB0 00                         		even
0000BFB0 00                         		even
0000BFB0                            
0000BFB0                            ; ===========================================================================
0000BFB0                            ; ---------------------------------------------------------------------------
0000BFB0                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BFB0                            ; ---------------------------------------------------------------------------
0000BFB0                            
0000BFB0                            Obj31:					; XREF: Obj_Index
0000BFB0 7000                       		moveq	#0,d0
0000BFB2 1028 0024                  		move.b	$24(a0),d0
0000BFB6 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BFBA 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BFBE                            ; ===========================================================================
0000BFBE 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BFC0 0000                       		dc.w loc_B798-Obj31_Index
0000BFC2 0000                       		dc.w loc_B7FE-Obj31_Index
0000BFC4 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BFC6 0000                       		dc.w loc_B7E2-Obj31_Index
0000BFC8                            
0000BFC8 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BFCA 0100                       		dc.b 1,	0
0000BFCC                            
0000BFCC 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BFCF 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BFD2 08CC 03                    		dc.b 8,	$CC, 3
0000BFD5 06F0 02                    		dc.b 6,	$F0, 2
0000BFD8                            
0000BFD8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BFDC 5000 7800                  		dc.w $5000, $7800
0000BFE0 3800 5800                  		dc.w $3800, $5800
0000BFE4 B800                       		dc.w $B800
0000BFE6                            ; ===========================================================================
0000BFE6                            
0000BFE6                            Obj31_Main:				; XREF: Obj31_Index
0000BFE6 7000                       		moveq	#0,d0
0000BFE8 1028 0028                  		move.b	$28(a0),d0
0000BFEC 6A00                       		bpl.s	loc_B6CE
0000BFEE 0240 007F                  		andi.w	#$7F,d0
0000BFF2 D040                       		add.w	d0,d0
0000BFF4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFF8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFFC 101A                       		move.b	(a2)+,d0
0000BFFE 1140 0028                  		move.b	d0,$28(a0)
0000C002                            
0000C002                            loc_B6CE:
0000C002 0200 000F                  		andi.b	#$F,d0
0000C006 D040                       		add.w	d0,d0
0000C008 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C00C 4A40                       		tst.w	d0
0000C00E 6600                       		bne.s	loc_B6E0
0000C010 3142 0032                  		move.w	d2,$32(a0)
0000C014                            
0000C014                            loc_B6E0:
0000C014 45F9 0000 BFCC             		lea	(Obj31_Var).l,a2
0000C01A 2248                       		movea.l	a0,a1
0000C01C 7203                       		moveq	#3,d1
0000C01E 6000                       		bra.s	Obj31_MakeStomper
0000C020                            ; ===========================================================================
0000C020                            
0000C020                            Obj31_Loop:
0000C020 6100 0000                  		bsr.w	SingleObjLoad2
0000C024 6600 0000                  		bne.w	Obj31_SetSize
0000C028                            
0000C028                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C028 135A 0024                  		move.b	(a2)+,$24(a1)
0000C02C 12BC 0031                  		move.b	#$31,0(a1)
0000C030 3368 0008 0008             		move.w	8(a0),8(a1)
0000C036 101A                       		move.b	(a2)+,d0
0000C038 4880                       		ext.w	d0
0000C03A D068 000C                  		add.w	$C(a0),d0
0000C03E 3340 000C                  		move.w	d0,$C(a1)
0000C042 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C04A 337C 0300 0002             		move.w	#$300,2(a1)
0000C050 137C 0004 0001             		move.b	#4,1(a1)
0000C056 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C05C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C062 137C 0010 0019             		move.b	#$10,$19(a1)
0000C068 3342 0034                  		move.w	d2,$34(a1)
0000C06C 137C 0004 0018             		move.b	#4,$18(a1)
0000C072 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C076 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C07C 6600                       		bne.s	loc_B76A
0000C07E 5341                       		subq.w	#1,d1
0000C080 1028 0028                  		move.b	$28(a0),d0
0000C084 0240 00F0                  		andi.w	#$F0,d0
0000C088 0C40 0020                  		cmpi.w	#$20,d0
0000C08C 679A                       		beq.s	Obj31_MakeStomper
0000C08E 137C 0038 0019             		move.b	#$38,$19(a1)
0000C094 137C 0090 0020             		move.b	#$90,$20(a1)
0000C09A 5241                       		addq.w	#1,d1
0000C09C                            
0000C09C                            loc_B76A:
0000C09C 2348 003C                  		move.l	a0,$3C(a1)
0000C0A0 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C0A4                            
0000C0A4 137C 0003 0018             		move.b	#3,$18(a1)
0000C0AA                            
0000C0AA                            Obj31_SetSize:
0000C0AA 7000                       		moveq	#0,d0
0000C0AC 1028 0028                  		move.b	$28(a0),d0
0000C0B0 E648                       		lsr.w	#3,d0
0000C0B2 0200 000E                  		andi.b	#$E,d0
0000C0B6 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C0BA 115A 0019                  		move.b	(a2)+,$19(a0)
0000C0BE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C0C2 6000                       		bra.s	loc_B798
0000C0C4                            ; ===========================================================================
0000C0C4 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C0C6 3009                       		dc.b $30, 9
0000C0C8 100A                       		dc.b $10, $A
0000C0CA                            ; ===========================================================================
0000C0CA                            
0000C0CA                            loc_B798:				; XREF: Obj31_Index
0000C0CA 6100 0000                  		bsr.w	Obj31_Types
0000C0CE 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C0D4 7200                       		moveq	#0,d1
0000C0D6 1228 0019                  		move.b	$19(a0),d1
0000C0DA 0641 000B                  		addi.w	#$B,d1
0000C0DE 343C 000C                  		move.w	#$C,d2
0000C0E2 363C 000D                  		move.w	#$D,d3
0000C0E6 3828 0008                  		move.w	8(a0),d4
0000C0EA 6100 0000                  		bsr.w	SolidObject
0000C0EE 0828 0003 0022             		btst	#3,$22(a0)
0000C0F4 6700                       		beq.s	Obj31_Display
0000C0F6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0FC 6400                       		bcc.s	Obj31_Display
0000C0FE 2448                       		movea.l	a0,a2
0000C100 41F8 D000                  		lea	($FFFFD000).w,a0
0000C104 4EB9 0000 0000             		jsr	KillSonic
0000C10A 204A                       		movea.l	a2,a0
0000C10C                            
0000C10C                            Obj31_Display:
0000C10C 6100 0000                  		bsr.w	DisplaySprite
0000C110 6000 0000                  		bra.w	Obj31_ChkDel
0000C114                            ; ===========================================================================
0000C114                            
0000C114                            loc_B7E2:				; XREF: Obj31_Index
0000C114 117C 0080 0016             		move.b	#$80,$16(a0)
0000C11A 08E8 0004 0001             		bset	#4,1(a0)
0000C120 2268 003C                  		movea.l	$3C(a0),a1
0000C124 1029 0032                  		move.b	$32(a1),d0
0000C128 EA08                       		lsr.b	#5,d0
0000C12A 5600                       		addq.b	#3,d0
0000C12C 1140 001A                  		move.b	d0,$1A(a0)
0000C130                            
0000C130                            loc_B7FE:				; XREF: Obj31_Index
0000C130 2268 003C                  		movea.l	$3C(a0),a1
0000C134 7000                       		moveq	#0,d0
0000C136 1029 0032                  		move.b	$32(a1),d0
0000C13A D068 0030                  		add.w	$30(a0),d0
0000C13E 3140 000C                  		move.w	d0,$C(a0)
0000C142                            
0000C142                            Obj31_Display2:				; XREF: Obj31_Index
0000C142 6100 0000                  		bsr.w	DisplaySprite
0000C146                            
0000C146                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C146 3028 0008                  		move.w	8(a0),d0
0000C14A 0240 FF80                  		andi.w	#$FF80,d0
0000C14E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C152 0441 0080                  		subi.w	#$80,d1
0000C156 0241 FF80                  		andi.w	#$FF80,d1
0000C15A 9041                       		sub.w	d1,d0
0000C15C 0C40 0280                  		cmpi.w	#$280,d0
0000C160 6200 0000                  		bhi.w	DeleteObject
0000C164 4E75                       		rts	
0000C166                            ; ===========================================================================
0000C166                            
0000C166                            Obj31_Types:				; XREF: loc_B798
0000C166 1028 0028                  		move.b	$28(a0),d0
0000C16A 0240 000F                  		andi.w	#$F,d0
0000C16E D040                       		add.w	d0,d0
0000C170 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C174 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C178                            ; ===========================================================================
0000C178 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C17A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C17C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C17E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C180 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C182 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C184 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C186                            ; ===========================================================================
0000C186                            
0000C186                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C186 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C18A 7000                       		moveq	#0,d0
0000C18C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C190 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C194 6700                       		beq.s	loc_B8A8	; if not, branch
0000C196 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C19A 6A00                       		bpl.s	loc_B872
0000C19C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C1A2 6700                       		beq.s	loc_B8A0
0000C1A4                            
0000C1A4                            loc_B872:
0000C1A4 4A68 0032                  		tst.w	$32(a0)
0000C1A8 6700                       		beq.s	loc_B8A0
0000C1AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1AE 0200 000F                  		andi.b	#$F,d0
0000C1B2 6600                       		bne.s	loc_B892
0000C1B4 4A28 0001                  		tst.b	1(a0)
0000C1B8 6A00                       		bpl.s	loc_B892
0000C1BA 303C 00C7                  		move.w	#$C7,d0
0000C1BE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1C4                            
0000C1C4                            loc_B892:
0000C1C4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1CA 6400                       		bcc.s	Obj31_Restart
0000C1CC 317C 0000 0032             		move.w	#0,$32(a0)
0000C1D2                            
0000C1D2                            loc_B8A0:
0000C1D2 317C 0000 0012             		move.w	#0,$12(a0)
0000C1D8 6000                       		bra.s	Obj31_Restart
0000C1DA                            ; ===========================================================================
0000C1DA                            
0000C1DA                            loc_B8A8:				; XREF: Obj31_Type00
0000C1DA 3228 0034                  		move.w	$34(a0),d1
0000C1DE B268 0032                  		cmp.w	$32(a0),d1
0000C1E2 6700                       		beq.s	Obj31_Restart
0000C1E4 3028 0012                  		move.w	$12(a0),d0
0000C1E8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1EE D168 0032                  		add.w	d0,$32(a0)
0000C1F2 B268 0032                  		cmp.w	$32(a0),d1
0000C1F6 6200                       		bhi.s	Obj31_Restart
0000C1F8 3141 0032                  		move.w	d1,$32(a0)
0000C1FC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C202 4A28 0001                  		tst.b	1(a0)
0000C206 6A00                       		bpl.s	Obj31_Restart
0000C208 303C 00BD                  		move.w	#$BD,d0
0000C20C 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C212                            
0000C212                            Obj31_Restart:
0000C212 7000                       		moveq	#0,d0
0000C214 1028 0032                  		move.b	$32(a0),d0
0000C218 D068 0030                  		add.w	$30(a0),d0
0000C21C 3140 000C                  		move.w	d0,$C(a0)
0000C220 4E75                       		rts	
0000C222                            ; ===========================================================================
0000C222                            
0000C222                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C222 4A68 0036                  		tst.w	$36(a0)
0000C226 6700                       		beq.s	loc_B938
0000C228 4A68 0038                  		tst.w	$38(a0)
0000C22C 6700                       		beq.s	loc_B902
0000C22E 5368 0038                  		subq.w	#1,$38(a0)
0000C232 6000                       		bra.s	loc_B97C
0000C234                            ; ===========================================================================
0000C234                            
0000C234                            loc_B902:
0000C234 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C238 0200 000F                  		andi.b	#$F,d0
0000C23C 6600                       		bne.s	loc_B91C
0000C23E 4A28 0001                  		tst.b	1(a0)
0000C242 6A00                       		bpl.s	loc_B91C
0000C244 303C 00C7                  		move.w	#$C7,d0
0000C248 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C24E                            
0000C24E                            loc_B91C:
0000C24E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C254 6400                       		bcc.s	loc_B97C
0000C256 317C 0000 0032             		move.w	#0,$32(a0)
0000C25C 317C 0000 0012             		move.w	#0,$12(a0)
0000C262 317C 0000 0036             		move.w	#0,$36(a0)
0000C268 6000                       		bra.s	loc_B97C
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            loc_B938:				; XREF: Obj31_Type01
0000C26A 3228 0034                  		move.w	$34(a0),d1
0000C26E B268 0032                  		cmp.w	$32(a0),d1
0000C272 6700                       		beq.s	loc_B97C
0000C274 3028 0012                  		move.w	$12(a0),d0
0000C278 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C27E D168 0032                  		add.w	d0,$32(a0)
0000C282 B268 0032                  		cmp.w	$32(a0),d1
0000C286 6200                       		bhi.s	loc_B97C
0000C288 3141 0032                  		move.w	d1,$32(a0)
0000C28C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C292 317C 0001 0036             		move.w	#1,$36(a0)
0000C298 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C29E 4A28 0001                  		tst.b	1(a0)
0000C2A2 6A00                       		bpl.s	loc_B97C
0000C2A4 303C 00BD                  		move.w	#$BD,d0
0000C2A8 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C2AE                            
0000C2AE                            loc_B97C:
0000C2AE 6000 FF62                  		bra.w	Obj31_Restart
0000C2B2                            ; ===========================================================================
0000C2B2                            
0000C2B2                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C2B2 3038 D008                  		move.w	($FFFFD008).w,d0
0000C2B6 9068 0008                  		sub.w	8(a0),d0
0000C2BA 6400                       		bcc.s	loc_B98C
0000C2BC 4440                       		neg.w	d0
0000C2BE                            
0000C2BE                            loc_B98C:
0000C2BE 0C40 0090                  		cmpi.w	#$90,d0
0000C2C2 6400                       		bcc.s	loc_B996
0000C2C4 5228 0028                  		addq.b	#1,$28(a0)
0000C2C8                            
0000C2C8                            loc_B996:
0000C2C8 6000 FF48                  		bra.w	Obj31_Restart
0000C2CC                            ; ===========================================================================
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC                            ; Object 45 - spiked metal block from beta version (MZ)
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC                            
0000C2CC                            Obj45:					; XREF: Obj_Index
0000C2CC 7000                       		moveq	#0,d0
0000C2CE 1028 0024                  		move.b	$24(a0),d0
0000C2D2 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C2D6 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C2DA                            ; ===========================================================================
0000C2DA 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C2DC 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C2DE 0000                       		dc.w loc_BA8E-Obj45_Index
0000C2E0 0000                       		dc.w Obj45_Display-Obj45_Index
0000C2E2 0000                       		dc.w loc_BA7A-Obj45_Index
0000C2E4                            
0000C2E4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C2E7 04E4 01                    		dc.b	4, $E4,	  1
0000C2EA 0834 03                    		dc.b	8, $34,	  3
0000C2ED 0628 02                    		dc.b	6, $28,	  2
0000C2F0                            
0000C2F0 3800                       word_B9BE:	dc.w $3800
0000C2F2 A000                       		dc.w -$6000
0000C2F4 5000                       		dc.w $5000
0000C2F6                            ; ===========================================================================
0000C2F6                            
0000C2F6                            Obj45_Main:				; XREF: Obj45_Index
0000C2F6 7000                       		moveq	#0,d0
0000C2F8 1028 0028                  		move.b	$28(a0),d0
0000C2FC D040                       		add.w	d0,d0
0000C2FE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C302 45F9 0000 C2E4             		lea	(Obj45_Var).l,a2
0000C308 2248                       		movea.l	a0,a1
0000C30A 7203                       		moveq	#3,d1
0000C30C 6000                       		bra.s	Obj45_Load
0000C30E                            ; ===========================================================================
0000C30E                            
0000C30E                            Obj45_Loop:
0000C30E 6100 0000                  		bsr.w	SingleObjLoad2
0000C312 6600                       		bne.s	loc_BA52
0000C314                            
0000C314                            Obj45_Load:				; XREF: Obj45_Main
0000C314 135A 0024                  		move.b	(a2)+,$24(a1)
0000C318 12BC 0045                  		move.b	#$45,0(a1)
0000C31C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C322 101A                       		move.b	(a2)+,d0
0000C324 4880                       		ext.w	d0
0000C326 D068 0008                  		add.w	8(a0),d0
0000C32A 3340 0008                  		move.w	d0,8(a1)
0000C32E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C336 337C 0300 0002             		move.w	#$300,2(a1)
0000C33C 137C 0004 0001             		move.b	#4,1(a1)
0000C342 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C348 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C34E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C354 137C 0020 0019             		move.b	#$20,$19(a1)
0000C35A 3342 0034                  		move.w	d2,$34(a1)
0000C35E 137C 0004 0018             		move.b	#4,$18(a1)
0000C364 0C12 0001                  		cmpi.b	#1,(a2)
0000C368 6600                       		bne.s	loc_BA40
0000C36A 137C 0091 0020             		move.b	#$91,$20(a1)
0000C370                            
0000C370                            loc_BA40:
0000C370 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C374 2348 003C                  		move.l	a0,$3C(a1)
0000C378 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C37C                            
0000C37C 137C 0003 0018             		move.b	#3,$18(a1)
0000C382                            
0000C382                            loc_BA52:
0000C382 117C 0010 0019             		move.b	#$10,$19(a0)
0000C388                            
0000C388                            Obj45_Solid:				; XREF: Obj45_Index
0000C388 3F28 0008                  		move.w	8(a0),-(sp)
0000C38C 6100 0000                  		bsr.w	Obj45_Move
0000C390 323C 0017                  		move.w	#$17,d1
0000C394 343C 0020                  		move.w	#$20,d2
0000C398 363C 0020                  		move.w	#$20,d3
0000C39C 381F                       		move.w	(sp)+,d4
0000C39E 6100 0000                  		bsr.w	SolidObject
0000C3A2 6100 0000                  		bsr.w	DisplaySprite
0000C3A6 6000 0000                  		bra.w	Obj45_ChkDel
0000C3AA                            ; ===========================================================================
0000C3AA                            
0000C3AA                            loc_BA7A:				; XREF: Obj45_Index
0000C3AA 2268 003C                  		movea.l	$3C(a0),a1
0000C3AE 1029 0032                  		move.b	$32(a1),d0
0000C3B2 0600 0010                  		addi.b	#$10,d0
0000C3B6 EA08                       		lsr.b	#5,d0
0000C3B8 5600                       		addq.b	#3,d0
0000C3BA 1140 001A                  		move.b	d0,$1A(a0)
0000C3BE                            
0000C3BE                            loc_BA8E:				; XREF: Obj45_Index
0000C3BE 2268 003C                  		movea.l	$3C(a0),a1
0000C3C2 7000                       		moveq	#0,d0
0000C3C4 1029 0032                  		move.b	$32(a1),d0
0000C3C8 4440                       		neg.w	d0
0000C3CA D068 0030                  		add.w	$30(a0),d0
0000C3CE 3140 0008                  		move.w	d0,8(a0)
0000C3D2                            
0000C3D2                            Obj45_Display:				; XREF: Obj45_Index
0000C3D2 6100 0000                  		bsr.w	DisplaySprite
0000C3D6                            
0000C3D6                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C3D6 3028 003A                  		move.w	$3A(a0),d0
0000C3DA 0240 FF80                  		andi.w	#$FF80,d0
0000C3DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3E2 0441 0080                  		subi.w	#$80,d1
0000C3E6 0241 FF80                  		andi.w	#$FF80,d1
0000C3EA 9041                       		sub.w	d1,d0
0000C3EC 0C40 0280                  		cmpi.w	#$280,d0
0000C3F0 6200 0000                  		bhi.w	DeleteObject
0000C3F4 4E75                       		rts	
0000C3F6                            
0000C3F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3F6                            
0000C3F6                            
0000C3F6                            Obj45_Move:				; XREF: Obj45_Solid
0000C3F6 7000                       		moveq	#0,d0
0000C3F8 1028 0028                  		move.b	$28(a0),d0
0000C3FC D040                       		add.w	d0,d0
0000C3FE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C402 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C406                            ; End of function Obj45_Move
0000C406                            
0000C406                            ; ===========================================================================
0000C406 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C408 0000                       		dc.w loc_BADA-off_BAD6
0000C40A                            ; ===========================================================================
0000C40A                            
0000C40A                            loc_BADA:				; XREF: off_BAD6
0000C40A 4A68 0036                  		tst.w	$36(a0)
0000C40E 6700                       		beq.s	loc_BB08
0000C410 4A68 0038                  		tst.w	$38(a0)
0000C414 6700                       		beq.s	loc_BAEC
0000C416 5368 0038                  		subq.w	#1,$38(a0)
0000C41A 6000                       		bra.s	loc_BB3C
0000C41C                            ; ===========================================================================
0000C41C                            
0000C41C                            loc_BAEC:
0000C41C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C422 6400                       		bcc.s	loc_BB3C
0000C424 317C 0000 0032             		move.w	#0,$32(a0)
0000C42A 317C 0000 0010             		move.w	#0,$10(a0)
0000C430 317C 0000 0036             		move.w	#0,$36(a0)
0000C436 6000                       		bra.s	loc_BB3C
0000C438                            ; ===========================================================================
0000C438                            
0000C438                            loc_BB08:				; XREF: loc_BADA
0000C438 3228 0034                  		move.w	$34(a0),d1
0000C43C B268 0032                  		cmp.w	$32(a0),d1
0000C440 6700                       		beq.s	loc_BB3C
0000C442 3028 0010                  		move.w	$10(a0),d0
0000C446 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C44C D168 0032                  		add.w	d0,$32(a0)
0000C450 B268 0032                  		cmp.w	$32(a0),d1
0000C454 6200                       		bhi.s	loc_BB3C
0000C456 3141 0032                  		move.w	d1,$32(a0)
0000C45A 317C 0000 0010             		move.w	#0,$10(a0)
0000C460 317C 0001 0036             		move.w	#1,$36(a0)
0000C466 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C46C                            
0000C46C                            loc_BB3C:
0000C46C 7000                       		moveq	#0,d0
0000C46E 1028 0032                  		move.b	$32(a0),d0
0000C472 4440                       		neg.w	d0
0000C474 D068 0030                  		add.w	$30(a0),d0
0000C478 3140 0008                  		move.w	d0,8(a0)
0000C47C 4E75                       		rts	
0000C47E                            ; ===========================================================================
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E                            Map_obj31:
0000C47E                            	include "_maps\obj31.asm"
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E 0000                       		dc.w byte_BB64-Map_obj31
0000C480 0000                       		dc.w byte_BB7E-Map_obj31
0000C482 0000                       		dc.w byte_BB98-Map_obj31
0000C484 0000                       		dc.w byte_BB9E-Map_obj31
0000C486 0000                       		dc.w byte_BBA9-Map_obj31
0000C488 0000                       		dc.w byte_BBBE-Map_obj31
0000C48A 0000                       		dc.w byte_BBDD-Map_obj31
0000C48C 0000                       		dc.w byte_BC06-Map_obj31
0000C48E 0000                       		dc.w byte_BC06-Map_obj31
0000C490 0000                       		dc.w byte_BC39-Map_obj31
0000C492 0000                       		dc.w byte_BC53-Map_obj31
0000C494 05                         byte_BB64:	dc.b 5
0000C495 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C49A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C49F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C4A4 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C4A9 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C4AE 05                         byte_BB7E:	dc.b 5
0000C4AF F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C4B4 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C4B9 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C4BE F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C4C3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C4C8 01                         byte_BB98:	dc.b 1
0000C4C9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C4CE 02                         byte_BB9E:	dc.b 2
0000C4CF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4D4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4D9 04                         byte_BBA9:	dc.b 4
0000C4DA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4DF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4E4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4EE 06                         byte_BBBE:	dc.b 6
0000C4EF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4F4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4F9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4FE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C503 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C508 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C50D 08                         byte_BBDD:	dc.b 8
0000C50E A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C513 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C518 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C51D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C522 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C527 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C52C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C531 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C536 0A                         byte_BC06:	dc.b $A
0000C537 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C53C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C541 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C546 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C54B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C550 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C555 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C55A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C55F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C564 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C569 05                         byte_BC39:	dc.b 5
0000C56A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C56F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C574 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C579 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C57E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C583 01                         byte_BC53:	dc.b 1
0000C584 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C58A 00                         		even
0000C58A 00                         		even
0000C58A                            
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A                            Map_obj45:
0000C58A                            	include "_maps\obj45.asm"
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A 0000                       		dc.w byte_BC6C-Map_obj45
0000C58C 0000                       		dc.w byte_BC7C-Map_obj45
0000C58E 0000                       		dc.w byte_BC8C-Map_obj45
0000C590 0000                       		dc.w byte_BC92-Map_obj45
0000C592 0000                       		dc.w byte_BC9D-Map_obj45
0000C594 0000                       		dc.w byte_BCB2-Map_obj45
0000C596 0000                       		dc.w byte_BCD1-Map_obj45
0000C598 0000                       		dc.w byte_BCFA-Map_obj45
0000C59A 0000                       		dc.w byte_BCFA-Map_obj45
0000C59C 03                         byte_BC6C:	dc.b 3
0000C59D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C5A2 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C5A7 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C5AC 03                         byte_BC7C:	dc.b 3
0000C5AD E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C5B2 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C5B7 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C5BC 01                         byte_BC8C:	dc.b 1
0000C5BD F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C5C2 02                         byte_BC92:	dc.b 2
0000C5C3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5C8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5CD 04                         byte_BC9D:	dc.b 4
0000C5CE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5D3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5D8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5DD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5E2 06                         byte_BCB2:	dc.b 6
0000C5E3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5E8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5ED F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5F2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5F7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5FC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C601 08                         byte_BCD1:	dc.b 8
0000C602 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C607 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C60C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C611 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C616 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C61B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C620 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C625 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C62A 08                         byte_BCFA:	dc.b 8
0000C62B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C630 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C635 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C63A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C63F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C644 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C649 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C64E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C653 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C658 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C65E 00                         		even
0000C65E 00                         		even
0000C65E                            
0000C65E                            ; ===========================================================================
0000C65E                            ; ---------------------------------------------------------------------------
0000C65E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C65E                            ; ---------------------------------------------------------------------------
0000C65E                            
0000C65E                            Obj32:					; XREF: Obj_Index
0000C65E 7000                       		moveq	#0,d0
0000C660 1028 0024                  		move.b	$24(a0),d0
0000C664 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C668 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C66C                            ; ===========================================================================
0000C66C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C66E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C670                            ; ===========================================================================
0000C670                            
0000C670                            Obj32_Main:				; XREF: Obj32_Index
0000C670 5428 0024                  		addq.b	#2,$24(a0)
0000C674 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C67C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C682 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C688 6700                       		beq.s	loc_BD60
0000C68A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C690                            
0000C690                            loc_BD60:
0000C690 117C 0004 0001             		move.b	#4,1(a0)
0000C696 117C 0010 0019             		move.b	#$10,$19(a0)
0000C69C 117C 0004 0018             		move.b	#4,$18(a0)
0000C6A2 5668 000C                  		addq.w	#3,$C(a0)
0000C6A6                            
0000C6A6                            Obj32_Pressed:				; XREF: Obj32_Index
0000C6A6 4A28 0001                  		tst.b	1(a0)
0000C6AA 6A00                       		bpl.s	Obj32_Display
0000C6AC 323C 001B                  		move.w	#$1B,d1
0000C6B0 343C 0005                  		move.w	#5,d2
0000C6B4 363C 0005                  		move.w	#5,d3
0000C6B8 3828 0008                  		move.w	8(a0),d4
0000C6BC 6100 0000                  		bsr.w	SolidObject
0000C6C0 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C6C6 1028 0028                  		move.b	$28(a0),d0
0000C6CA 0240 000F                  		andi.w	#$F,d0
0000C6CE 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C6D2 47F3 0000                  		lea	(a3,d0.w),a3
0000C6D6 7600                       		moveq	#0,d3
0000C6D8 0828 0006 0028             		btst	#6,$28(a0)
0000C6DE 6700                       		beq.s	loc_BDB2
0000C6E0 7607                       		moveq	#7,d3
0000C6E2                            
0000C6E2                            loc_BDB2:
0000C6E2 4A28 0028                  		tst.b	$28(a0)
0000C6E6 6A00                       		bpl.s	loc_BDBE
0000C6E8 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6EC 6600                       		bne.s	loc_BDC8
0000C6EE                            
0000C6EE                            loc_BDBE:
0000C6EE 4A28 0025                  		tst.b	$25(a0)
0000C6F2 6600                       		bne.s	loc_BDC8
0000C6F4 0793                       		bclr	d3,(a3)
0000C6F6 6000                       		bra.s	loc_BDDE
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            loc_BDC8:
0000C6F8 4A13                       		tst.b	(a3)
0000C6FA 6600                       		bne.s	loc_BDD6
0000C6FC 303C 00CD                  		move.w	#$CD,d0
0000C700 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C706                            
0000C706                            loc_BDD6:
0000C706 07D3                       		bset	d3,(a3)
0000C708 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C70E                            
0000C70E                            loc_BDDE:
0000C70E 0828 0005 0028             		btst	#5,$28(a0)
0000C714 6700                       		beq.s	Obj32_Display
0000C716 5328 001E                  		subq.b	#1,$1E(a0)
0000C71A 6A00                       		bpl.s	Obj32_Display
0000C71C 117C 0007 001E             		move.b	#7,$1E(a0)
0000C722 0868 0001 001A             		bchg	#1,$1A(a0)
0000C728                            
0000C728                            Obj32_Display:
0000C728 6100 0000                  		bsr.w	DisplaySprite
0000C72C 3028 0008                  		move.w	8(a0),d0
0000C730 0240 FF80                  		andi.w	#$FF80,d0
0000C734 3238 F700                  		move.w	($FFFFF700).w,d1
0000C738 0441 0080                  		subi.w	#$80,d1
0000C73C 0241 FF80                  		andi.w	#$FF80,d1
0000C740 9041                       		sub.w	d1,d0
0000C742 0C40 0280                  		cmpi.w	#$280,d0
0000C746 6200 0000                  		bhi.w	Obj32_Delete
0000C74A 4E75                       		rts	
0000C74C                            ; ===========================================================================
0000C74C                            
0000C74C                            Obj32_Delete:
0000C74C 6100 0000                  		bsr.w	DeleteObject
0000C750 4E75                       		rts	
0000C752                            
0000C752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C752                            
0000C752                            
0000C752                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C752 3F03                       		move.w	d3,-(sp)
0000C754 3428 0008                  		move.w	8(a0),d2
0000C758 3628 000C                  		move.w	$C(a0),d3
0000C75C 0442 0010                  		subi.w	#$10,d2
0000C760 5143                       		subq.w	#8,d3
0000C762 383C 0020                  		move.w	#$20,d4
0000C766 3A3C 0010                  		move.w	#$10,d5
0000C76A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C76E 3C3C 005F                  		move.w	#$5F,d6
0000C772                            
0000C772                            Obj32_MZLoop:
0000C772 4A29 0001                  		tst.b	1(a1)
0000C776 6A00                       		bpl.s	loc_BE4E
0000C778 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C77C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C77E                            
0000C77E                            loc_BE4E:
0000C77E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C782 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C786                            
0000C786 361F                       		move.w	(sp)+,d3
0000C788 7000                       		moveq	#0,d0
0000C78A                            
0000C78A                            locret_BE5A:
0000C78A 4E75                       		rts	
0000C78C                            ; ===========================================================================
0000C78C 1010                       Obj32_MZData:	dc.b $10, $10
0000C78E                            ; ===========================================================================
0000C78E                            
0000C78E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C78E 7001                       		moveq	#1,d0
0000C790 0240 003F                  		andi.w	#$3F,d0
0000C794 D040                       		add.w	d0,d0
0000C796 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C79A 121A                       		move.b	(a2)+,d1
0000C79C 4881                       		ext.w	d1
0000C79E 3029 0008                  		move.w	8(a1),d0
0000C7A2 9041                       		sub.w	d1,d0
0000C7A4 9042                       		sub.w	d2,d0
0000C7A6 6400                       		bcc.s	loc_BE80
0000C7A8 D241                       		add.w	d1,d1
0000C7AA D041                       		add.w	d1,d0
0000C7AC 6500                       		bcs.s	loc_BE84
0000C7AE 60CE                       		bra.s	loc_BE4E
0000C7B0                            ; ===========================================================================
0000C7B0                            
0000C7B0                            loc_BE80:
0000C7B0 B044                       		cmp.w	d4,d0
0000C7B2 62CA                       		bhi.s	loc_BE4E
0000C7B4                            
0000C7B4                            loc_BE84:
0000C7B4 121A                       		move.b	(a2)+,d1
0000C7B6 4881                       		ext.w	d1
0000C7B8 3029 000C                  		move.w	$C(a1),d0
0000C7BC 9041                       		sub.w	d1,d0
0000C7BE 9043                       		sub.w	d3,d0
0000C7C0 6400                       		bcc.s	loc_BE9A
0000C7C2 D241                       		add.w	d1,d1
0000C7C4 D041                       		add.w	d1,d0
0000C7C6 6500                       		bcs.s	loc_BE9E
0000C7C8 60B4                       		bra.s	loc_BE4E
0000C7CA                            ; ===========================================================================
0000C7CA                            
0000C7CA                            loc_BE9A:
0000C7CA B045                       		cmp.w	d5,d0
0000C7CC 62B0                       		bhi.s	loc_BE4E
0000C7CE                            
0000C7CE                            loc_BE9E:
0000C7CE 361F                       		move.w	(sp)+,d3
0000C7D0 7001                       		moveq	#1,d0
0000C7D2 4E75                       		rts	
0000C7D4                            ; End of function Obj32_MZBlock
0000C7D4                            
0000C7D4                            ; ===========================================================================
0000C7D4                            ; ---------------------------------------------------------------------------
0000C7D4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7D4                            ; ---------------------------------------------------------------------------
0000C7D4                            Map_obj32:
0000C7D4                            	include "_maps\obj32.asm"
0000C7D4                            ; ---------------------------------------------------------------------------
0000C7D4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7D4                            ; ---------------------------------------------------------------------------
0000C7D4 0000                       		dc.w byte_BEAC-Map_obj32
0000C7D6 0000                       		dc.w byte_BEB7-Map_obj32
0000C7D8 0000                       		dc.w byte_BEC2-Map_obj32
0000C7DA 0000                       		dc.w byte_BEB7-Map_obj32
0000C7DC 02                         byte_BEAC:	dc.b 2
0000C7DD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C7E2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C7E7 02                         byte_BEB7:	dc.b 2
0000C7E8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7ED F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7F2 02                         byte_BEC2:	dc.b 2
0000C7F3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7F8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7FD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C802                            		even
0000C802                            		even
0000C802                            
0000C802                            ; ===========================================================================
0000C802                            ; ---------------------------------------------------------------------------
0000C802                            ; Object 33 - pushable blocks (MZ, LZ)
0000C802                            ; ---------------------------------------------------------------------------
0000C802                            
0000C802                            Obj33:					; XREF: Obj_Index
0000C802 7000                       		moveq	#0,d0
0000C804 1028 0024                  		move.b	$24(a0),d0
0000C808 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C80C 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C810                            ; ===========================================================================
0000C810 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C812 0000                       		dc.w loc_BF6E-Obj33_Index
0000C814 0000                       		dc.w loc_C02C-Obj33_Index
0000C816                            
0000C816 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C818 4001                       		dc.b $40, 1
0000C81A                            ; ===========================================================================
0000C81A                            
0000C81A                            Obj33_Main:				; XREF: Obj33_Index
0000C81A 5428 0024                  		addq.b	#2,$24(a0)
0000C81E 117C 000F 0016             		move.b	#$F,$16(a0)
0000C824 117C 000F 0017             		move.b	#$F,$17(a0)
0000C82A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C832 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C838 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C83E 6600                       		bne.s	loc_BF16
0000C840 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C846                            
0000C846                            loc_BF16:
0000C846 117C 0004 0001             		move.b	#4,1(a0)
0000C84C 117C 0003 0018             		move.b	#3,$18(a0)
0000C852 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C858 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C85E 7000                       		moveq	#0,d0
0000C860 1028 0028                  		move.b	$28(a0),d0
0000C864 D040                       		add.w	d0,d0
0000C866 0240 000E                  		andi.w	#$E,d0
0000C86A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C86E 115A 0019                  		move.b	(a2)+,$19(a0)
0000C872 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C876 4A28 0028                  		tst.b	$28(a0)
0000C87A 6700                       		beq.s	Obj33_ChkGone
0000C87C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C882                            
0000C882                            Obj33_ChkGone:
0000C882 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C886 7000                       		moveq	#0,d0
0000C888 1028 0023                  		move.b	$23(a0),d0
0000C88C 6700                       		beq.s	loc_BF6E
0000C88E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C894 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C89A 6600 0000                  		bne.w	DeleteObject
0000C89E                            
0000C89E                            loc_BF6E:				; XREF: Obj33_Index
0000C89E 4A28 0032                  		tst.b	$32(a0)
0000C8A2 6600 0000                  		bne.w	loc_C046
0000C8A6 7200                       		moveq	#0,d1
0000C8A8 1228 0019                  		move.b	$19(a0),d1
0000C8AC 0641 000B                  		addi.w	#$B,d1
0000C8B0 343C 0010                  		move.w	#$10,d2
0000C8B4 363C 0011                  		move.w	#$11,d3
0000C8B8 3828 0008                  		move.w	8(a0),d4
0000C8BC 6100 0000                  		bsr.w	loc_C186
0000C8C0 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C8C6 6600                       		bne.s	loc_BFC6	; if not, branch
0000C8C8 08A8 0007 0028             		bclr	#7,$28(a0)
0000C8CE 3028 0008                  		move.w	8(a0),d0
0000C8D2 0C40 0A20                  		cmpi.w	#$A20,d0
0000C8D6 6500                       		bcs.s	loc_BFC6
0000C8D8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C8DC 6400                       		bcc.s	loc_BFC6
0000C8DE 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C8E2 0440 001C                  		subi.w	#$1C,d0
0000C8E6 3140 000C                  		move.w	d0,$C(a0)
0000C8EA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8F0 08E8 0007 0028             		bset	#7,$28(a0)
0000C8F6                            
0000C8F6                            loc_BFC6:
0000C8F6 3028 0008                  		move.w	8(a0),d0
0000C8FA 0240 FF80                  		andi.w	#$FF80,d0
0000C8FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C902 0441 0080                  		subi.w	#$80,d1
0000C906 0241 FF80                  		andi.w	#$FF80,d1
0000C90A 9041                       		sub.w	d1,d0
0000C90C 0C40 0280                  		cmpi.w	#$280,d0
0000C910 6200                       		bhi.s	loc_BFE6
0000C912 6000 0000                  		bra.w	DisplaySprite
0000C916                            ; ===========================================================================
0000C916                            
0000C916                            loc_BFE6:
0000C916 3028 0034                  		move.w	$34(a0),d0
0000C91A 0240 FF80                  		andi.w	#$FF80,d0
0000C91E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C922 0441 0080                  		subi.w	#$80,d1
0000C926 0241 FF80                  		andi.w	#$FF80,d1
0000C92A 9041                       		sub.w	d1,d0
0000C92C 0C40 0280                  		cmpi.w	#$280,d0
0000C930 6200                       		bhi.s	loc_C016
0000C932 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C938 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C93E 117C 0004 0024             		move.b	#4,$24(a0)
0000C944 6000                       		bra.s	loc_C02C
0000C946                            ; ===========================================================================
0000C946                            
0000C946                            loc_C016:
0000C946 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C94A 7000                       		moveq	#0,d0
0000C94C 1028 0023                  		move.b	$23(a0),d0
0000C950 6700                       		beq.s	loc_C028
0000C952 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C958                            
0000C958                            loc_C028:
0000C958 6000 0000                  		bra.w	DeleteObject
0000C95C                            ; ===========================================================================
0000C95C                            
0000C95C                            loc_C02C:				; XREF: Obj33_Index
0000C95C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C960 6700                       		beq.s	locret_C044
0000C962 117C 0002 0024             		move.b	#2,$24(a0)
0000C968 4228 0032                  		clr.b	$32(a0)
0000C96C 4268 0010                  		clr.w	$10(a0)
0000C970 4268 0012                  		clr.w	$12(a0)
0000C974                            
0000C974                            locret_C044:
0000C974 4E75                       		rts	
0000C976                            ; ===========================================================================
0000C976                            
0000C976                            loc_C046:				; XREF: loc_BF6E
0000C976 3F28 0008                  		move.w	8(a0),-(sp)
0000C97A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C980 6400                       		bcc.s	loc_C056
0000C982 6100 0000                  		bsr.w	SpeedToPos
0000C986                            
0000C986                            loc_C056:
0000C986 0828 0001 0022             		btst	#1,$22(a0)
0000C98C 6700                       		beq.s	loc_C0A0
0000C98E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C994 4EB9 0000 0000             		jsr	ObjHitFloor
0000C99A 4A41                       		tst.w	d1
0000C99C 6A00 0000                  		bpl.w	loc_C09E
0000C9A0 D368 000C                  		add.w	d1,$C(a0)
0000C9A4 4268 0012                  		clr.w	$12(a0)
0000C9A8 08A8 0001 0022             		bclr	#1,$22(a0)
0000C9AE 3011                       		move.w	(a1),d0
0000C9B0 0240 03FF                  		andi.w	#$3FF,d0
0000C9B4 0C40 016A                  		cmpi.w	#$16A,d0
0000C9B8 6500                       		bcs.s	loc_C09E
0000C9BA 3028 0030                  		move.w	$30(a0),d0
0000C9BE E640                       		asr.w	#3,d0
0000C9C0 3140 0010                  		move.w	d0,$10(a0)
0000C9C4 117C 0001 0032             		move.b	#1,$32(a0)
0000C9CA 4268 000E                  		clr.w	$E(a0)
0000C9CE                            
0000C9CE                            loc_C09E:
0000C9CE 6000                       		bra.s	loc_C0E6
0000C9D0                            ; ===========================================================================
0000C9D0                            
0000C9D0                            loc_C0A0:
0000C9D0 4A68 0010                  		tst.w	$10(a0)
0000C9D4 6700 0000                  		beq.w	loc_C0D6
0000C9D8 6B00                       		bmi.s	loc_C0BC
0000C9DA 7600                       		moveq	#0,d3
0000C9DC 1628 0019                  		move.b	$19(a0),d3
0000C9E0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9E6 4A41                       		tst.w	d1		; has block touched a wall?
0000C9E8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9EA 6000                       		bra.s	loc_C0E6
0000C9EC                            ; ===========================================================================
0000C9EC                            
0000C9EC                            loc_C0BC:
0000C9EC 7600                       		moveq	#0,d3
0000C9EE 1628 0019                  		move.b	$19(a0),d3
0000C9F2 4643                       		not.w	d3
0000C9F4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9FA 4A41                       		tst.w	d1		; has block touched a wall?
0000C9FC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9FE 6000                       		bra.s	loc_C0E6
0000CA00                            ; ===========================================================================
0000CA00                            
0000CA00                            Obj33_StopPush:
0000CA00 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CA04 6000                       		bra.s	loc_C0E6
0000CA06                            ; ===========================================================================
0000CA06                            
0000CA06                            loc_C0D6:
0000CA06 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CA0E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CA14 6400                       		bcc.s	loc_C104
0000CA16                            
0000CA16                            loc_C0E6:
0000CA16 7200                       		moveq	#0,d1
0000CA18 1228 0019                  		move.b	$19(a0),d1
0000CA1C 0641 000B                  		addi.w	#$B,d1
0000CA20 343C 0010                  		move.w	#$10,d2
0000CA24 363C 0011                  		move.w	#$11,d3
0000CA28 381F                       		move.w	(sp)+,d4
0000CA2A 6100 0000                  		bsr.w	loc_C186
0000CA2E 6100                       		bsr.s	Obj33_ChkLava
0000CA30 6000 FEC4                  		bra.w	loc_BFC6
0000CA34                            ; ===========================================================================
0000CA34                            
0000CA34                            loc_C104:
0000CA34 381F                       		move.w	(sp)+,d4
0000CA36 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA3A 08A9 0003 0022             		bclr	#3,$22(a1)
0000CA40 08A8 0003 0022             		bclr	#3,$22(a0)
0000CA46 6000 FECE                  		bra.w	loc_BFE6
0000CA4A                            ; ===========================================================================
0000CA4A                            
0000CA4A                            Obj33_ChkLava:
0000CA4A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA50 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA52 343C FFE0                  		move.w	#-$20,d2
0000CA56 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA5C 6700                       		beq.s	Obj33_LoadLava
0000CA5E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA64 6700                       		beq.s	Obj33_LoadLava
0000CA66 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA6C 6700                       		beq.s	Obj33_LoadLava
0000CA6E 4E75                       		rts	
0000CA70                            ; ===========================================================================
0000CA70                            
0000CA70                            Obj33_ChkLava2:
0000CA70 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA76 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA78 343C 0020                  		move.w	#$20,d2
0000CA7C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA82 6700                       		beq.s	Obj33_LoadLava
0000CA84 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA8A 6700                       		beq.s	Obj33_LoadLava
0000CA8C                            
0000CA8C                            Obj33_NoLava:
0000CA8C 4E75                       		rts	
0000CA8E                            ; ===========================================================================
0000CA8E                            
0000CA8E                            Obj33_LoadLava:
0000CA8E 6100 0000                  		bsr.w	SingleObjLoad
0000CA92 6600                       		bne.s	locret_C184
0000CA94 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA98 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA9E D569 0008                  		add.w	d2,8(a1)
0000CAA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CAA8 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CAAE 2348 003C                  		move.l	a0,$3C(a1)
0000CAB2                            
0000CAB2                            locret_C184:
0000CAB2 4E75                       		rts	
0000CAB4                            ; ===========================================================================
0000CAB4                            
0000CAB4                            loc_C186:				; XREF: loc_BF6E
0000CAB4 1028 0025                  		move.b	$25(a0),d0
0000CAB8 6700 0000                  		beq.w	loc_C218
0000CABC 5500                       		subq.b	#2,d0
0000CABE 6600                       		bne.s	loc_C1AA
0000CAC0 6100 B30E                  		bsr.w	ExitPlatform
0000CAC4 0829 0003 0022             		btst	#3,$22(a1)
0000CACA 6600                       		bne.s	loc_C1A4
0000CACC 4228 0025                  		clr.b	$25(a0)
0000CAD0 4E75                       		rts	
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            loc_C1A4:
0000CAD2 3404                       		move.w	d4,d2
0000CAD4 6000 B858                  		bra.w	MvSonicOnPtfm
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            loc_C1AA:
0000CAD8 5500                       		subq.b	#2,d0
0000CADA 6600                       		bne.s	loc_C1F2
0000CADC 6100 0000                  		bsr.w	SpeedToPos
0000CAE0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CAE6 4EB9 0000 0000             		jsr	ObjHitFloor
0000CAEC 4A41                       		tst.w	d1
0000CAEE 6A00 0000                  		bpl.w	locret_C1F0
0000CAF2 D368 000C                  		add.w	d1,$C(a0)
0000CAF6 4268 0012                  		clr.w	$12(a0)
0000CAFA 4228 0025                  		clr.b	$25(a0)
0000CAFE 3011                       		move.w	(a1),d0
0000CB00 0240 03FF                  		andi.w	#$3FF,d0
0000CB04 0C40 016A                  		cmpi.w	#$16A,d0
0000CB08 6500                       		bcs.s	locret_C1F0
0000CB0A 3028 0030                  		move.w	$30(a0),d0
0000CB0E E640                       		asr.w	#3,d0
0000CB10 3140 0010                  		move.w	d0,$10(a0)
0000CB14 117C 0001 0032             		move.b	#1,$32(a0)
0000CB1A 4268 000E                  		clr.w	$E(a0)
0000CB1E                            
0000CB1E                            locret_C1F0:
0000CB1E 4E75                       		rts	
0000CB20                            ; ===========================================================================
0000CB20                            
0000CB20                            loc_C1F2:
0000CB20 6100 0000                  		bsr.w	SpeedToPos
0000CB24 3028 0008                  		move.w	8(a0),d0
0000CB28 0240 000C                  		andi.w	#$C,d0
0000CB2C 6600 0000                  		bne.w	locret_C2E4
0000CB30 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CB36 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CB3C 4268 0010                  		clr.w	$10(a0)
0000CB40 5528 0025                  		subq.b	#2,$25(a0)
0000CB44 4E75                       		rts	
0000CB46                            ; ===========================================================================
0000CB46                            
0000CB46                            loc_C218:
0000CB46 6100 0000                  		bsr.w	loc_FAC8
0000CB4A 4A44                       		tst.w	d4
0000CB4C 6700 0000                  		beq.w	locret_C2E4
0000CB50 6B00 0000                  		bmi.w	locret_C2E4
0000CB54 4A28 0032                  		tst.b	$32(a0)
0000CB58 6700                       		beq.s	loc_C230
0000CB5A 6000 0000                  		bra.w	locret_C2E4
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            loc_C230:
0000CB5E 4A40                       		tst.w	d0
0000CB60 6700 0000                  		beq.w	locret_C2E4
0000CB64 6B00                       		bmi.s	loc_C268
0000CB66 0829 0000 0022             		btst	#0,$22(a1)
0000CB6C 6600 0000                  		bne.w	locret_C2E4
0000CB70 3F00                       		move.w	d0,-(sp)
0000CB72 7600                       		moveq	#0,d3
0000CB74 1628 0019                  		move.b	$19(a0),d3
0000CB78 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB7E 301F                       		move.w	(sp)+,d0
0000CB80 4A41                       		tst.w	d1
0000CB82 6B00 0000                  		bmi.w	locret_C2E4
0000CB86 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB8E 7001                       		moveq	#1,d0
0000CB90 323C 0040                  		move.w	#$40,d1
0000CB94 6000                       		bra.s	loc_C294
0000CB96                            ; ===========================================================================
0000CB96                            
0000CB96                            loc_C268:
0000CB96 0829 0000 0022             		btst	#0,$22(a1)
0000CB9C 6700                       		beq.s	locret_C2E4
0000CB9E 3F00                       		move.w	d0,-(sp)
0000CBA0 7600                       		moveq	#0,d3
0000CBA2 1628 0019                  		move.b	$19(a0),d3
0000CBA6 4643                       		not.w	d3
0000CBA8 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBAE 301F                       		move.w	(sp)+,d0
0000CBB0 4A41                       		tst.w	d1
0000CBB2 6B00                       		bmi.s	locret_C2E4
0000CBB4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CBBC 70FF                       		moveq	#-1,d0
0000CBBE 323C FFC0                  		move.w	#-$40,d1
0000CBC2                            
0000CBC2                            loc_C294:
0000CBC2 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBC6 D169 0008                  		add.w	d0,8(a1)
0000CBCA 3341 0014                  		move.w	d1,$14(a1)
0000CBCE 337C 0000 0010             		move.w	#0,$10(a1)
0000CBD4 3F00                       		move.w	d0,-(sp)
0000CBD6 303C 00A7                  		move.w	#$A7,d0
0000CBDA 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CBE0 301F                       		move.w	(sp)+,d0
0000CBE2 4A28 0028                  		tst.b	$28(a0)
0000CBE6 6B00                       		bmi.s	locret_C2E4
0000CBE8 3F00                       		move.w	d0,-(sp)
0000CBEA 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBF0 301F                       		move.w	(sp)+,d0
0000CBF2 0C41 0004                  		cmpi.w	#4,d1
0000CBF6 6F00                       		ble.s	loc_C2E0
0000CBF8 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBFE 4A40                       		tst.w	d0
0000CC00 6A00                       		bpl.s	loc_C2D8
0000CC02 4468 0010                  		neg.w	$10(a0)
0000CC06                            
0000CC06                            loc_C2D8:
0000CC06 117C 0006 0025             		move.b	#6,$25(a0)
0000CC0C 6000                       		bra.s	locret_C2E4
0000CC0E                            ; ===========================================================================
0000CC0E                            
0000CC0E                            loc_C2E0:
0000CC0E D368 000C                  		add.w	d1,$C(a0)
0000CC12                            
0000CC12                            locret_C2E4:
0000CC12 4E75                       		rts	
0000CC14                            ; ===========================================================================
0000CC14                            ; ---------------------------------------------------------------------------
0000CC14                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC14                            ; ---------------------------------------------------------------------------
0000CC14                            Map_obj33:
0000CC14                            	include "_maps\obj33.asm"
0000CC14                            ; ---------------------------------------------------------------------------
0000CC14                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC14                            ; ---------------------------------------------------------------------------
0000CC14 0000                       		dc.w byte_C2EA-Map_obj33
0000CC16 0000                       		dc.w byte_C2F0-Map_obj33
0000CC18 01                         byte_C2EA:	dc.b 1
0000CC19 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CC1E 04                         byte_C2F0:	dc.b 4
0000CC1F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CC24 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CC29 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CC2E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CC34 00                         		even
0000CC34 00                         		even
0000CC34                            
0000CC34                            ; ===========================================================================
0000CC34                            ; ---------------------------------------------------------------------------
0000CC34                            ; Object 34 - zone title cards
0000CC34                            ; ---------------------------------------------------------------------------
0000CC34                            Obj34:					; XREF: Obj_Index
0000CC34 7000                       		moveq	#0,d0
0000CC36 1028 0024                  		move.b	$24(a0),d0
0000CC3A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CC3E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CC42                            ; ===========================================================================
0000CC42 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CC44 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CC46 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC48 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC4A                            ; ===========================================================================
0000CC4A                            
0000CC4A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC4A 2248                       		movea.l	a0,a1
0000CC4C 7000                       		moveq	#0,d0
0000CC4E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC52 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC58 6600                       		bne.s	Obj34_CheckFZ
0000CC5A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC5C                            
0000CC5C                            Obj34_CheckFZ:
0000CC5C 3400                       		move.w	d0,d2
0000CC5E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC64 6600                       		bne.s	Obj34_LoadConfig
0000CC66 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC68 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC6A                            
0000CC6A                            Obj34_LoadConfig:
0000CC6A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC70 E948                       		lsl.w	#4,d0
0000CC72 D6C0                       		adda.w	d0,a3
0000CC74 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC7A 7203                       		moveq	#3,d1
0000CC7C                            
0000CC7C                            Obj34_Loop:
0000CC7C 12BC 0034                  		move.b	#$34,0(a1)
0000CC80 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC84 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC88 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC8C 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC90 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC94 101A                       		move.b	(a2)+,d0
0000CC96 6600                       		bne.s	Obj34_ActNumber
0000CC98 1002                       		move.b	d2,d0
0000CC9A                            
0000CC9A                            Obj34_ActNumber:
0000CC9A 0C00 0007                  		cmpi.b	#7,d0
0000CC9E 6600                       		bne.s	Obj34_MakeSprite
0000CCA0 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CCA4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CCAA 6600                       		bne.s	Obj34_MakeSprite
0000CCAC 5300                       		subq.b	#1,d0
0000CCAE                            
0000CCAE                            Obj34_MakeSprite:
0000CCAE 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CCB2 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CCBA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCC0 137C 0078 0019             		move.b	#$78,$19(a1)
0000CCC6 137C 0000 0001             		move.b	#0,1(a1)
0000CCCC 137C 0000 0018             		move.b	#0,$18(a1)
0000CCD2 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CCD8 43E9 0040                  		lea	$40(a1),a1	; next object
0000CCDC 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CCE0                            
0000CCE0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CCE0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCE2 3028 0030                  		move.w	$30(a0),d0
0000CCE6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCEA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCEC 6C00                       		bge.s	Obj34_Move
0000CCEE 4441                       		neg.w	d1
0000CCF0                            
0000CCF0                            Obj34_Move:
0000CCF0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCF4                            
0000CCF4                            loc_C3C8:
0000CCF4 3028 0008                  		move.w	8(a0),d0
0000CCF8 6B00                       		bmi.s	locret_C3D8
0000CCFA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCFE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CD00 6000 0000                  		bra.w	DisplaySprite
0000CD04                            ; ===========================================================================
0000CD04                            
0000CD04                            locret_C3D8:
0000CD04 4E75                       		rts	
0000CD06                            ; ===========================================================================
0000CD06                            
0000CD06                            Obj34_Wait:				; XREF: Obj34_Index
0000CD06 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CD0A 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CD0C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CD10 6000 0000                  		bra.w	DisplaySprite
0000CD14                            ; ===========================================================================
0000CD14                            
0000CD14                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CD14 4A28 0001                  		tst.b	1(a0)
0000CD18 6A00                       		bpl.s	Obj34_ChangeArt
0000CD1A 7220                       		moveq	#$20,d1
0000CD1C 3028 0032                  		move.w	$32(a0),d0
0000CD20 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CD24 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CD26 6C00                       		bge.s	Obj34_Move2
0000CD28 4441                       		neg.w	d1
0000CD2A                            
0000CD2A                            Obj34_Move2:
0000CD2A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD2E 3028 0008                  		move.w	8(a0),d0
0000CD32 6B00                       		bmi.s	locret_C412
0000CD34 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD38 6400                       		bcc.s	locret_C412	; if yes, branch
0000CD3A 6000 0000                  		bra.w	DisplaySprite
0000CD3E                            ; ===========================================================================
0000CD3E                            
0000CD3E                            locret_C412:
0000CD3E 4E75                       		rts	
0000CD40                            ; ===========================================================================
0000CD40                            
0000CD40                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CD40 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CD46 6600                       		bne.s	Obj34_Delete
0000CD48 7002                       		moveq	#2,d0
0000CD4A 4EB9 0000 1784             		jsr	(LoadPLC).l	; load explosion patterns
0000CD50 7000                       		moveq	#0,d0
0000CD52 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD56 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CD5A 4EB9 0000 1784             		jsr	(LoadPLC).l	; load animal patterns
0000CD60                            
0000CD60                            Obj34_Delete:
0000CD60 6000 0000                  		bra.w	DeleteObject
0000CD64                            
0000CD64                            ; ===========================================================================
0000CD64                            Obj34_AnimalPLC:
0000CD64 15                         		dc.b $15	; "GHZ"
0000CD65 16                         		dc.b $16
0000CD66 17                         		dc.b $17
0000CD67 18                         		dc.b $18
0000CD68 19                         		dc.b $19
0000CD69 1A                         		dc.b $1A	; "SBZ"
0000CD6A 15                         		dc.b $15	; Ending (placeholder?
0000CD6B 1A                         		dc.b $1A	; MAKOTO
0000CD6C                            	even
0000CD6C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD6E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD70 00E4                       		dc.w $E4
0000CD72 0206                       		dc.b 2,	6
0000CD74 00EA                       		dc.w $EA
0000CD76 0207                       		dc.b 2,	7
0000CD78 00E0                       		dc.w $E0
0000CD7A 020A                       		dc.b 2,	$A
0000CD7C                            ; ---------------------------------------------------------------------------
0000CD7C                            ; Title	card configuration data
0000CD7C                            ; Format:
0000CD7C                            ; 4 bytes per item (YYYY XXXX)
0000CD7C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD7C                            ; ---------------------------------------------------------------------------
0000CD7C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD8C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD9C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CDAC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CDBC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CDCC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CDDC 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CDEC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDFC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CE0C                            ; ===========================================================================
0000CE0C                            ; ---------------------------------------------------------------------------
0000CE0C                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CE0C                            ; ---------------------------------------------------------------------------
0000CE0C                            
0000CE0C                            Obj39:					; XREF: Obj_Index
0000CE0C 7000                       		moveq	#0,d0
0000CE0E 1028 0024                  		move.b	$24(a0),d0
0000CE12 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CE16 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CE1A                            ; ===========================================================================
0000CE1A 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CE1C 0000                       		dc.w loc_C50C-Obj39_Index
0000CE1E 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CE20                            ; ===========================================================================
0000CE20                            
0000CE20                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CE20 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE24 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CE26 4E75                       		rts	
0000CE28                            ; ===========================================================================
0000CE28                            
0000CE28                            Obj39_Main:
0000CE28 5428 0024                  		addq.b	#2,$24(a0)
0000CE2C 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CE32 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CE38 6700                       		beq.s	loc_C4EC	; if not, branch
0000CE3A 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CE40                            
0000CE40                            loc_C4EC:
0000CE40 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CE46 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CE4E 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE54 117C 0000 0001             		move.b	#0,1(a0)
0000CE5A 117C 0000 0018             		move.b	#0,$18(a0)
0000CE60                            
0000CE60                            loc_C50C:				; XREF: Obj39_Index
0000CE60 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE62 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE68 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE6A 6500                       		bcs.s	Obj39_Move
0000CE6C 4441                       		neg.w	d1
0000CE6E                            
0000CE6E                            Obj39_Move:
0000CE6E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE72 6000 0000                  		bra.w	DisplaySprite
0000CE76                            ; ===========================================================================
0000CE76                            
0000CE76                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE76 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE7C 5428 0024                  		addq.b	#2,$24(a0)
0000CE80 4E75                       		rts	
0000CE82                            ; ===========================================================================
0000CE82                            
0000CE82                            Obj39_Wait:				; XREF: Obj39_Index
0000CE82 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE86 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE8A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE8C 0828 0000 001A             		btst	#0,$1A(a0)
0000CE92 6600                       		bne.s	Obj39_Display
0000CE94 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE98 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE9A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE9E 6000 0000                  		bra.w	DisplaySprite
0000CEA2                            ; ===========================================================================
0000CEA2                            
0000CEA2                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CEA2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CEA6 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CEA8 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CEAE 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CEB2 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CEB4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CEBA 6000                       		bra.s	Obj39_Display
0000CEBC                            ; ===========================================================================
0000CEBC                            
0000CEBC                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CEBC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CEC2                            
0000CEC2                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CEC2 6000 0000                  		bra.w	DisplaySprite
0000CEC6                            ; ===========================================================================
0000CEC6                            ; ---------------------------------------------------------------------------
0000CEC6                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CEC6                            ; ---------------------------------------------------------------------------
0000CEC6                            
0000CEC6                            Obj3A:					; XREF: Obj_Index
0000CEC6 7000                       		moveq	#0,d0
0000CEC8 1028 0024                  		move.b	$24(a0),d0
0000CECC 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CED0 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CED4                            ; ===========================================================================
0000CED4 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CED6 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CED8 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEDA 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CEDC 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEDE 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CEE0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEE2 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CEE4 0000                       		dc.w loc_C766-Obj3A_Index
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CEE6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEEA 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CEEC 4E75                       		rts	
0000CEEE                            ; ===========================================================================
0000CEEE                            
0000CEEE                            Obj3A_Main:
0000CEEE 2248                       		movea.l	a0,a1
0000CEF0 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEF6 7206                       		moveq	#6,d1
0000CEF8                            
0000CEF8                            Obj3A_Loop:
0000CEF8 12BC 003A                  		move.b	#$3A,0(a1)
0000CEFC 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CF00 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CF04 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF08 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF0C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF10 101A                       		move.b	(a2)+,d0
0000CF12 0C00 0006                  		cmpi.b	#6,d0
0000CF16 6600                       		bne.s	loc_C5CA
0000CF18 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CF1C                            
0000CF1C                            loc_C5CA:
0000CF1C 1340 001A                  		move.b	d0,$1A(a1)
0000CF20 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CF28 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF2E 137C 0000 0001             		move.b	#0,1(a1)
0000CF34 43E9 0040                  		lea	$40(a1),a1
0000CF38 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CF3C                            
0000CF3C                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CF3C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF3E 3028 0030                  		move.w	$30(a0),d0
0000CF42 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF46 6700                       		beq.s	loc_C61A	; if yes, branch
0000CF48 6C00                       		bge.s	Obj3A_Move
0000CF4A 4441                       		neg.w	d1
0000CF4C                            
0000CF4C                            Obj3A_Move:
0000CF4C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF50                            
0000CF50                            loc_C5FE:				; XREF: loc_C61A
0000CF50 3028 0008                  		move.w	8(a0),d0
0000CF54 6B00                       		bmi.s	locret_C60E
0000CF56 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF5A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF5C 6000 0000                  		bra.w	DisplaySprite
0000CF60                            ; ===========================================================================
0000CF60                            
0000CF60                            locret_C60E:
0000CF60 4E75                       		rts	
0000CF62                            ; ===========================================================================
0000CF62                            
0000CF62                            loc_C610:				; XREF: loc_C61A
0000CF62 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF68 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF6C                            ; ===========================================================================
0000CF6C                            
0000CF6C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF6C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF72 67EE                       		beq.s	loc_C610
0000CF74 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF7A 66D4                       		bne.s	loc_C5FE
0000CF7C 5428 0024                  		addq.b	#2,$24(a0)
0000CF80 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF86                            
0000CF86                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF86 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF8A 6600                       		bne.s	Obj3A_Display
0000CF8C 5428 0024                  		addq.b	#2,$24(a0)
0000CF90                            
0000CF90                            Obj3A_Display:
0000CF90 6000 0000                  		bra.w	DisplaySprite
0000CF94                            ; ===========================================================================
0000CF94                            
0000CF94                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF94 6100 0000                  		bsr.w	DisplaySprite
0000CF98 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF9E 7000                       		moveq	#0,d0
0000CFA0 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CFA4 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CFA6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFAA 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CFB0                            
0000CFB0                            Obj3A_RingBonus:
0000CFB0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFB4 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CFB6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFBA 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFC0                            
0000CFC0                            Obj3A_ChkBonus:
0000CFC0 4A40                       		tst.w	d0		; is there any bonus?
0000CFC2 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CFC4 303C 00C5                  		move.w	#$C5,d0
0000CFC8 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFCE 5428 0024                  		addq.b	#2,$24(a0)
0000CFD2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CFD8 6600                       		bne.s	Obj3A_SetDelay
0000CFDA 5828 0024                  		addq.b	#4,$24(a0)
0000CFDE                            
0000CFDE                            Obj3A_SetDelay:
0000CFDE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFE4                            
0000CFE4                            locret_C692:
0000CFE4 4E75                       		rts	
0000CFE6                            ; ===========================================================================
0000CFE6                            
0000CFE6                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CFE6 4EB9 0000 0000             		jsr	AddPoints
0000CFEC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFF0 0200 0003                  		andi.b	#3,d0
0000CFF4 66EE                       		bne.s	locret_C692
0000CFF6 303C 00CD                  		move.w	#$CD,d0
0000CFFA 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D000                            ; ===========================================================================
0000D000                            
0000D000                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D000 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D004 0240 0007                  		andi.w	#7,d0
0000D008 E748                       		lsl.w	#3,d0
0000D00A 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D00E 0241 0003                  		andi.w	#3,d1
0000D012 D241                       		add.w	d1,d1
0000D014 D041                       		add.w	d1,d0
0000D016 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D01A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D01E 4A40                       		tst.w	d0
0000D020 6600                       		bne.s	Obj3A_ChkSS
0000D022 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D028 6000                       		bra.s	Obj3A_Display2
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D02A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D02E 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D032 6700                       		beq.s	loc_C6EA	; if not, branch
0000D034 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D03A 6000                       		bra.s	Obj3A_Display2
0000D03C                            ; ===========================================================================
0000D03C                            
0000D03C                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D03C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D042                            
0000D042                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D042 6000 0000                  		bra.w	DisplaySprite
0000D046                            ; ===========================================================================
0000D046                            ; ---------------------------------------------------------------------------
0000D046                            ; Level	order array
0000D046                            ; ---------------------------------------------------------------------------
0000D046                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D086                            		even
0000D086                            ; ===========================================================================
0000D086                            
0000D086                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D086 7220                       		moveq	#$20,d1		; set horizontal speed
0000D088 3028 0032                  		move.w	$32(a0),d0
0000D08C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D090 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D092 6C00                       		bge.s	Obj3A_Move2
0000D094 4441                       		neg.w	d1
0000D096                            
0000D096                            Obj3A_Move2:
0000D096 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D09A 3028 0008                  		move.w	8(a0),d0
0000D09E 6B00                       		bmi.s	locret_C748
0000D0A0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D0A4 6400                       		bcc.s	locret_C748	; if yes, branch
0000D0A6 6000 0000                  		bra.w	DisplaySprite
0000D0AA                            ; ===========================================================================
0000D0AA                            
0000D0AA                            locret_C748:
0000D0AA 4E75                       		rts	
0000D0AC                            ; ===========================================================================
0000D0AC                            
0000D0AC                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D0AC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0B2 6600 0000                  		bne.w	DeleteObject
0000D0B6 5428 0024                  		addq.b	#2,$24(a0)
0000D0BA 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D0BE 303C 008D                  		move.w	#$8D,d0
0000D0C2 4EF9 0000 159A             		jmp	(PlaySound).l	; play FZ music
0000D0C8                            ; ===========================================================================
0000D0C8                            
0000D0C8                            loc_C766:				; XREF: Obj3A_Index
0000D0C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D0CC 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D0D2 6700 0000                  		beq.w	DeleteObject
0000D0D6 4E75                       		rts	
0000D0D8                            ; ===========================================================================
0000D0D8 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D0DE 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D0E0 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D0E6 0201                       		dc.b 2,	1
0000D0E8 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D0EE 0206                       		dc.b 2,	6
0000D0F0 0520 0120 00EC             		dc.w $520, $120, $EC
0000D0F6 0202                       		dc.b 2,	2
0000D0F8 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0FE 0203                       		dc.b 2,	3
0000D100 0560 0120 010C             		dc.w $560, $120, $10C
0000D106 0204                       		dc.b 2,	4
0000D108 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D10E 0205                       		dc.b 2,	5
0000D110                            ; ===========================================================================
0000D110                            ; ---------------------------------------------------------------------------
0000D110                            ; Object 7E - special stage results screen
0000D110                            ; ---------------------------------------------------------------------------
0000D110                            
0000D110                            Obj7E:					; XREF: Obj_Index
0000D110 7000                       		moveq	#0,d0
0000D112 1028 0024                  		move.b	$24(a0),d0
0000D116 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D11A 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D11E                            ; ===========================================================================
0000D11E 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D120 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D122 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D124 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D126 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D128 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D12A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D12C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D12E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D130 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D132 0000                       		dc.w loc_C91A-Obj7E_Index
0000D134                            ; ===========================================================================
0000D134                            
0000D134                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D134 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D138 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D13A 4E75                       		rts	
0000D13C                            ; ===========================================================================
0000D13C                            
0000D13C                            Obj7E_Main:
0000D13C 2248                       		movea.l	a0,a1
0000D13E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D144 7203                       		moveq	#3,d1
0000D146 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D14C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D14E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D150                            
0000D150                            Obj7E_Loop:
0000D150 12BC 007E                  		move.b	#$7E,0(a1)
0000D154 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D158 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D15C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D160 135A 0024                  		move.b	(a2)+,$24(a1)
0000D164 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D168 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D170 337C 8580 0002             		move.w	#$8580,2(a1)
0000D176 137C 0000 0001             		move.b	#0,1(a1)
0000D17C 43E9 0040                  		lea	$40(a1),a1
0000D180 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D184                            
0000D184 7007                       		moveq	#7,d0
0000D186 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D18A 6700                       		beq.s	loc_C842
0000D18C 7000                       		moveq	#0,d0
0000D18E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D192 6600                       		bne.s	loc_C842	; if not, branch
0000D194 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D196 317C 0018 0008             		move.w	#$18,8(a0)
0000D19C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D1A2                            
0000D1A2                            loc_C842:
0000D1A2 1140 001A                  		move.b	d0,$1A(a0)
0000D1A6                            
0000D1A6                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D1A6 7210                       		moveq	#$10,d1		; set horizontal speed
0000D1A8 3028 0030                  		move.w	$30(a0),d0
0000D1AC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D1B0 6700                       		beq.s	loc_C86C	; if yes, branch
0000D1B2 6C00                       		bge.s	Obj7E_Move
0000D1B4 4441                       		neg.w	d1
0000D1B6                            
0000D1B6                            Obj7E_Move:
0000D1B6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D1BA                            
0000D1BA                            loc_C85A:				; XREF: loc_C86C
0000D1BA 3028 0008                  		move.w	8(a0),d0
0000D1BE 6B00                       		bmi.s	locret_C86A
0000D1C0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1C4 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D1C6 6000 0000                  		bra.w	DisplaySprite
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            locret_C86A:
0000D1CA 4E75                       		rts	
0000D1CC                            ; ===========================================================================
0000D1CC                            
0000D1CC                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D1CC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D1D2 66E6                       		bne.s	loc_C85A
0000D1D4 5428 0024                  		addq.b	#2,$24(a0)
0000D1D8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1DE 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D1E4                            
0000D1E4                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D1E4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1E8 6600                       		bne.s	Obj7E_Display
0000D1EA 5428 0024                  		addq.b	#2,$24(a0)
0000D1EE                            
0000D1EE                            Obj7E_Display:
0000D1EE 6000 0000                  		bra.w	DisplaySprite
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D1F2 6100 0000                  		bsr.w	DisplaySprite
0000D1F6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1FC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D200 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D202 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D208 700A                       		moveq	#10,d0		; add 10 to score
0000D20A 4EB9 0000 0000             		jsr	AddPoints
0000D210 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D214 0200 0003                  		andi.b	#3,d0
0000D218 6600                       		bne.s	locret_C8EA
0000D21A 303C 00CD                  		move.w	#$CD,d0
0000D21E 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D224                            ; ===========================================================================
0000D224                            
0000D224                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D224 303C 00C5                  		move.w	#$C5,d0
0000D228 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D22E 5428 0024                  		addq.b	#2,$24(a0)
0000D232 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D238 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D23E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D240 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D246 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D24A                            
0000D24A                            locret_C8EA:
0000D24A 4E75                       		rts	
0000D24C                            ; ===========================================================================
0000D24C                            
0000D24C                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D24C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D252 6000 0000                  		bra.w	DisplaySprite
0000D256                            ; ===========================================================================
0000D256                            
0000D256                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D256 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D25C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D262 303C 00BF                  		move.w	#$BF,d0
0000D266 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play continues music
0000D26C 5428 0024                  		addq.b	#2,$24(a0)
0000D270 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D276 6000 0000                  		bra.w	DisplaySprite
0000D27A                            ; ===========================================================================
0000D27A                            
0000D27A                            loc_C91A:				; XREF: Obj7E_Index
0000D27A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D27E 0200 000F                  		andi.b	#$F,d0
0000D282 6600                       		bne.s	Obj7E_Display2
0000D284 0868 0000 001A             		bchg	#0,$1A(a0)
0000D28A                            
0000D28A                            Obj7E_Display2:
0000D28A 6000 0000                  		bra.w	DisplaySprite
0000D28E                            ; ===========================================================================
0000D28E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D294 0200                       		dc.b 2,	0		; rountine number, frame number
0000D296 0320 0120 0118             		dc.w $320, $120, $118
0000D29C 0201                       		dc.b 2,	1
0000D29E 0360 0120 0128             		dc.w $360, $120, $128
0000D2A4 0202                       		dc.b 2,	2
0000D2A6 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D2AC 0203                       		dc.b 2,	3
0000D2AE 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D2B4 0206                       		dc.b 2,	6
0000D2B6                            ; ===========================================================================
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            ; Object 7F - chaos emeralds from the special stage results screen
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            
0000D2B6                            Obj7F:					; XREF: Obj_Index
0000D2B6 7000                       		moveq	#0,d0
0000D2B8 1028 0024                  		move.b	$24(a0),d0
0000D2BC 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D2C0 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D2C4                            ; ===========================================================================
0000D2C4 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D2C6 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D2C8                            
0000D2C8                            ; ---------------------------------------------------------------------------
0000D2C8                            ; X-axis positions for chaos emeralds
0000D2C8                            ; ---------------------------------------------------------------------------
0000D2C8 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D2D4                            ; ===========================================================================
0000D2D4                            
0000D2D4                            Obj7F_Main:				; XREF: Obj7F_Index
0000D2D4 2248                       		movea.l	a0,a1
0000D2D6 45F9 0000 D2C8             		lea	(Obj7F_PosData).l,a2
0000D2DC 7400                       		moveq	#0,d2
0000D2DE 7200                       		moveq	#0,d1
0000D2E0 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D2E4 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D2E6 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D2EA                            
0000D2EA                            Obj7F_Loop:
0000D2EA 12BC 007F                  		move.b	#$7F,0(a1)
0000D2EE 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D2F2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D2F8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2FC 1633 2000                  		move.b	(a3,d2.w),d3
0000D300 1343 001A                  		move.b	d3,$1A(a1)
0000D304 1343 001C                  		move.b	d3,$1C(a1)
0000D308 5202                       		addq.b	#1,d2
0000D30A 5429 0024                  		addq.b	#2,$24(a1)
0000D30E 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D316 337C 8541 0002             		move.w	#$8541,2(a1)
0000D31C 137C 0000 0001             		move.b	#0,1(a1)
0000D322 43E9 0040                  		lea	$40(a1),a1	; next object
0000D326 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D32A                            
0000D32A                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D32A 1028 001A                  		move.b	$1A(a0),d0
0000D32E 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D334 0C00 0006                  		cmpi.b	#6,d0
0000D338 6600                       		bne.s	Obj7F_Display
0000D33A 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D340                            
0000D340                            Obj7F_Display:
0000D340 6000 0000                  		bra.w	DisplaySprite
0000D344                            ; ===========================================================================
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            ; Sprite mappings - zone title cards
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            Map_obj34:
0000D344                                    include "_maps\obj34.asm"
0000D344                            Map_c5df:
0000D344 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D346 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D348 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D34A 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D34C 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D34E 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D350 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D352 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D354 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D356 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D358 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D35A 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D35C 0C                         Map_c5df_18: 	dc.b $C
0000D35D F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D362 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D367 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D36C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D371 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D376 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D37B F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D380 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D385 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D38A F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D38F F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D394 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D399 16                         Map_c5df_55: 	dc.b $16
0000D39A F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D39F F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D3A4 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D3A9 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D3AE F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D3B3 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D3B8 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D3BD F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D3C2 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D3C7 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D3CC F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D3D1 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D3D6 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D3DB F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D3E0 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D3E5 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D3EA F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D3EF F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D3F4 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D3F9 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3FE F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D403 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D408 05                         Map_c5df_C4: 	dc.b $5
0000D409 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D40E F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D413 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D418 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D41D F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D422 11                         Map_c5df_DE: 	dc.b $11
0000D423 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D428 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D42D F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D432 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D437 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D43C F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D441 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D446 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D44B F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D450 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D455 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D45A F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D45F F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D464 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D469 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D46E F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D473 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D478 15                         Map_c5df_134: 	dc.b $15
0000D479 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D47E F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D483 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D488 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D48D F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D492 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D497 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D49C F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D4A1 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D4A6 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D4AB F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D4B0 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D4B5 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D4BA F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D4BF F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D4C4 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D4C9 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D4CE F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D4D3 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D4D8 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D4DD F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D4E2 07                         Map_c5df_19E: 	dc.b $7
0000D4E3 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D4E8 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D4ED F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D4F2 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D4F7 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4FC F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D501 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D506 04                         Map_c5df_1C2: 	dc.b $4
0000D507 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D50C F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D511 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D516 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D51B 02                         Map_c5df_1D7: 	dc.b $2
0000D51C 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D521 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D526 02                         Map_c5df_1E2: 	dc.b $2
0000D527 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D52C F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D531 02                         Map_c5df_1ED: 	dc.b $2
0000D532 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D537 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D53C 0D                         Map_c5df_1F8: 	dc.b $D
0000D53D E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D542 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D547 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D54C F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D551 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D556 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D55B 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D560 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D565 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D56A F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D56F FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D574 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D579 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D57E 05                         Map_c5df_23A: 	dc.b $5
0000D57F F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D584 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D589 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D58E F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D593 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D598                            	even
0000D598                            	even
0000D598                            ; ---------------------------------------------------------------------------
0000D598                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D598                            ; ---------------------------------------------------------------------------
0000D598                            Map_obj39:
0000D598                            	include "_maps\obj39.asm"
0000D598                            ; ---------------------------------------------------------------------------
0000D598                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D598                            ; ---------------------------------------------------------------------------
0000D598 0000                       		dc.w byte_CBAC-Map_obj39
0000D59A 0000                       		dc.w byte_CBB7-Map_obj39
0000D59C 0000                       		dc.w byte_CBC2-Map_obj39
0000D59E 0000                       		dc.w byte_CBCD-Map_obj39
0000D5A0 02                         byte_CBAC:	dc.b 2
0000D5A1 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D5A6 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D5AB 02                         byte_CBB7:	dc.b 2
0000D5AC F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D5B1 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D5B6 02                         byte_CBC2:	dc.b 2
0000D5B7 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D5BC F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D5C1 02                         byte_CBCD:	dc.b 2
0000D5C2 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D5C7 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D5CC                            		even
0000D5CC                            		even
0000D5CC                            
0000D5CC                            ; ---------------------------------------------------------------------------
0000D5CC                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D5CC                            ; ---------------------------------------------------------------------------
0000D5CC 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D5CE 0000                       		dc.w byte_CC13-Map_obj3A
0000D5D0 0000                       		dc.w byte_CC32-Map_obj3A
0000D5D2 0000                       		dc.w byte_CC51-Map_obj3A
0000D5D4 0000                       		dc.w byte_CC75-Map_obj3A
0000D5D6                            		;dc.w byte_CB47-Map_obj3A
0000D5D6                            		;dc.w byte_CB26-Map_obj3A
0000D5D6                            		;dc.w byte_CB31-Map_obj3A
0000D5D6                            		;dc.w byte_CB3C-Map_obj3A
0000D5D6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D5D7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D5DC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D5E1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D5E6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D5EB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D5F0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D5F5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5FA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5FF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D604 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D609 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D60E F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D613 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D618 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D61D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D622 06                         byte_CC13:	dc.b 6			; PASSED
0000D623 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D628 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D62D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D632 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D637 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D63C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D641 06                         byte_CC32:	dc.b 6			; SCORE
0000D642 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D647 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D64C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D651 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D656 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D65B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D660 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D661 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D666 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D66B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D670 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D675 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D67A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D67F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D684 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D685 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D68A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D68F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D694 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D699 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D69E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D6A3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6A8                            		even
0000D6A8                            ; ---------------------------------------------------------------------------
0000D6A8                            ; Sprite mappings - special stage results screen
0000D6A8                            ; ---------------------------------------------------------------------------
0000D6A8 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D6AA 0000                       		dc.w byte_CCEE-Map_obj7E
0000D6AC 0000                       		dc.w byte_CD0D-Map_obj7E
0000D6AE                            		;dc.w byte_CB47-Map_obj7E
0000D6AE 0000                       		dc.w byte_CD31-Map_obj7E
0000D6B0 0000                       		dc.w byte_CD46-Map_obj7E
0000D6B2 0000                       		dc.w byte_CD5B-Map_obj7E
0000D6B4 0000                       		dc.w byte_CD6B-Map_obj7E
0000D6B6 0000                       		dc.w byte_CDA8-Map_obj7E
0000D6B8 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D6B9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D6BE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D6C3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D6C8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D6CD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D6D2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D6D7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D6DC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6E1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D6E6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D6EB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D6F0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D6F5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6FA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6FB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D700 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D705 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D70A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D70F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D714 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D719 07                         byte_CD0D:	dc.b 7
0000D71A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D71F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D724 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D729 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D72E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D733 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D738 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D73D 04                         byte_CD31:	dc.b 4
0000D73E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D743 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D748 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D74D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D752 04                         byte_CD46:	dc.b 4
0000D753 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D758 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D75D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D762 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D767 03                         byte_CD5B:	dc.b 3
0000D768 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D76D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D772 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D777 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D778 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D77D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D782 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D787 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D78C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D791 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D796 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D79B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D7A0 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D7A5 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D7AA F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D7AF F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D7B4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D7B5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D7BA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D7BF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D7C4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D7C9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D7CE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D7D3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D7D8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D7DD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D7E2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D7E7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D7EC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D7F1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D7F6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7FB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D800                            		even
0000D800                            ; ---------------------------------------------------------------------------
0000D800                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D800                            ; ---------------------------------------------------------------------------
0000D800                            Map_obj7F:
0000D800                            	include "_maps\obj7F.asm"
0000D800                            ; ---------------------------------------------------------------------------
0000D800                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D800                            ; ---------------------------------------------------------------------------
0000D800 0000                       		dc.w byte_CE02-Map_obj7F
0000D802 0000                       		dc.w byte_CE08-Map_obj7F
0000D804 0000                       		dc.w byte_CE0E-Map_obj7F
0000D806 0000                       		dc.w byte_CE14-Map_obj7F
0000D808 0000                       		dc.w byte_CE1A-Map_obj7F
0000D80A 0000                       		dc.w byte_CE20-Map_obj7F
0000D80C 0000                       		dc.w byte_CE26-Map_obj7F
0000D80E 01                         byte_CE02:	dc.b 1
0000D80F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D814 01                         byte_CE08:	dc.b 1
0000D815 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D81A 01                         byte_CE0E:	dc.b 1
0000D81B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D820 01                         byte_CE14:	dc.b 1
0000D821 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D826 01                         byte_CE1A:	dc.b 1
0000D827 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D82C 01                         byte_CE20:	dc.b 1
0000D82D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D832 00                         byte_CE26:	dc.b 0			; Blank frame
0000D834 00                         		even
0000D834 00                         		even
0000D834                            
0000D834                            ; ===========================================================================
0000D834                            ; ---------------------------------------------------------------------------
0000D834                            ; Object 36 - spikes
0000D834                            ; ---------------------------------------------------------------------------
0000D834                            
0000D834                            Obj36:					; XREF: Obj_Index
0000D834 7000                       		moveq	#0,d0
0000D836 1028 0024                  		move.b	$24(a0),d0
0000D83A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D83E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D842                            ; ===========================================================================
0000D842 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D844 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D846                            
0000D846 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D848 0110                       		dc.b 1,	$10
0000D84A 0204                       		dc.b 2,	4
0000D84C 031C                       		dc.b 3,	$1C
0000D84E 0440                       		dc.b 4,	$40
0000D850 0510                       		dc.b 5,	$10
0000D852                            ; ===========================================================================
0000D852                            
0000D852                            Obj36_Main:				; XREF: Obj36_Index
0000D852 5428 0024                  		addq.b	#2,$24(a0)
0000D856 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D85E 317C 051B 0002             		move.w	#$51B,2(a0)
0000D864 0028 0004 0001             		ori.b	#4,1(a0)
0000D86A 117C 0004 0018             		move.b	#4,$18(a0)
0000D870 1028 0028                  		move.b	$28(a0),d0
0000D874 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D87A 0240 00F0                  		andi.w	#$F0,d0
0000D87E 43F9 0000 D846             		lea	(Obj36_Var).l,a1
0000D884 E648                       		lsr.w	#3,d0
0000D886 D2C0                       		adda.w	d0,a1
0000D888 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D88C 1159 0019                  		move.b	(a1)+,$19(a0)
0000D890 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D896 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D89C                            
0000D89C                            Obj36_Solid:				; XREF: Obj36_Index
0000D89C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D8A0 343C 0004                  		move.w	#4,d2
0000D8A4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D8AA 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D8AC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D8B2 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D8B4 343C 0014                  		move.w	#$14,d2
0000D8B8                            
0000D8B8                            ; Spikes types $1x and $5x face	sideways
0000D8B8                            
0000D8B8                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D8B8 323C 001B                  		move.w	#$1B,d1
0000D8BC 3602                       		move.w	d2,d3
0000D8BE 5243                       		addq.w	#1,d3
0000D8C0 3828 0008                  		move.w	8(a0),d4
0000D8C4 6100 0000                  		bsr.w	SolidObject
0000D8C8 0828 0003 0022             		btst	#3,$22(a0)
0000D8CE 6600                       		bne.s	Obj36_Display
0000D8D0 0C44 0001                  		cmpi.w	#1,d4
0000D8D4 6700                       		beq.s	Obj36_Hurt
0000D8D6 6000                       		bra.s	Obj36_Display
0000D8D8                            ; ===========================================================================
0000D8D8                            
0000D8D8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D8D8                            
0000D8D8                            Obj36_Upright:				; XREF: Obj36_Solid
0000D8D8 7200                       		moveq	#0,d1
0000D8DA 1228 0019                  		move.b	$19(a0),d1
0000D8DE 0641 000B                  		addi.w	#$B,d1
0000D8E2 343C 0010                  		move.w	#$10,d2
0000D8E6 363C 0011                  		move.w	#$11,d3
0000D8EA 3828 0008                  		move.w	8(a0),d4
0000D8EE 6100 0000                  		bsr.w	SolidObject
0000D8F2 0828 0003 0022             		btst	#3,$22(a0)
0000D8F8 6600                       		bne.s	Obj36_Hurt
0000D8FA 4A44                       		tst.w	d4
0000D8FC 6A00                       		bpl.s	Obj36_Display
0000D8FE                            
0000D8FE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8FE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D902 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D904 2F08                       		move.l	a0,-(sp)
0000D906 2448                       		movea.l	a0,a2
0000D908 41F8 D000                  		lea	($FFFFD000).w,a0
0000D90C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D912 6400                       		bcc.s	loc_CF20
0000D914 2628 000C                  		move.l	$C(a0),d3
0000D918 3028 0012                  		move.w	$12(a0),d0
0000D91C 48C0                       		ext.l	d0
0000D91E E180                       		asl.l	#8,d0
0000D920 9680                       		sub.l	d0,d3
0000D922 2143 000C                  		move.l	d3,$C(a0)
0000D926 4EB9 0000 0000             		jsr	HurtSonic
0000D92C                            
0000D92C                            loc_CF20:
0000D92C 205F                       		movea.l	(sp)+,a0
0000D92E                            
0000D92E                            Obj36_Display:
0000D92E 6100 0000                  		bsr.w	DisplaySprite
0000D932 3028 0030                  		move.w	$30(a0),d0
0000D936 0240 FF80                  		andi.w	#$FF80,d0
0000D93A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D93E 0441 0080                  		subi.w	#$80,d1
0000D942 0241 FF80                  		andi.w	#$FF80,d1
0000D946 9041                       		sub.w	d1,d0
0000D948 0C40 0280                  		cmpi.w	#$280,d0
0000D94C 6200 0000                  		bhi.w	DeleteObject
0000D950 4E75                       		rts	
0000D952                            ; ===========================================================================
0000D952                            
0000D952                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D952 7000                       		moveq	#0,d0
0000D954 1028 0028                  		move.b	$28(a0),d0
0000D958 D040                       		add.w	d0,d0
0000D95A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D95E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D962                            ; ===========================================================================
0000D962 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D964 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D966 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D968                            ; ===========================================================================
0000D968                            
0000D968                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D968 4E75                       		rts			; don't move the object
0000D96A                            ; ===========================================================================
0000D96A                            
0000D96A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D96A 6100 0000                  		bsr.w	Obj36_Wait
0000D96E 7000                       		moveq	#0,d0
0000D970 1028 0034                  		move.b	$34(a0),d0
0000D974 D068 0032                  		add.w	$32(a0),d0
0000D978 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D97C 4E75                       		rts	
0000D97E                            ; ===========================================================================
0000D97E                            
0000D97E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D97E 6100 0000                  		bsr.w	Obj36_Wait
0000D982 7000                       		moveq	#0,d0
0000D984 1028 0034                  		move.b	$34(a0),d0
0000D988 D068 0030                  		add.w	$30(a0),d0
0000D98C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D990 4E75                       		rts	
0000D992                            ; ===========================================================================
0000D992                            
0000D992                            Obj36_Wait:
0000D992 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D996 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D998 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D99C 6600                       		bne.s	locret_CFE6
0000D99E 4A28 0001                  		tst.b	1(a0)
0000D9A2 6A00                       		bpl.s	locret_CFE6
0000D9A4 303C 00B6                  		move.w	#$B6,d0
0000D9A8 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D9AE 6000                       		bra.s	locret_CFE6
0000D9B0                            ; ===========================================================================
0000D9B0                            
0000D9B0                            loc_CFA4:
0000D9B0 4A68 0036                  		tst.w	$36(a0)
0000D9B4 6700                       		beq.s	loc_CFC6
0000D9B6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D9BC 6400                       		bcc.s	locret_CFE6
0000D9BE 317C 0000 0034             		move.w	#0,$34(a0)
0000D9C4 317C 0000 0036             		move.w	#0,$36(a0)
0000D9CA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9D0 6000                       		bra.s	locret_CFE6
0000D9D2                            ; ===========================================================================
0000D9D2                            
0000D9D2                            loc_CFC6:
0000D9D2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D9D8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D9DE 6500                       		bcs.s	locret_CFE6
0000D9E0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D9E6 317C 0001 0036             		move.w	#1,$36(a0)
0000D9EC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9F2                            
0000D9F2                            locret_CFE6:
0000D9F2 4E75                       		rts	
0000D9F4                            ; ===========================================================================
0000D9F4                            ; ---------------------------------------------------------------------------
0000D9F4                            ; Sprite mappings - spikes
0000D9F4                            ; ---------------------------------------------------------------------------
0000D9F4                            Map_obj36:
0000D9F4                            	include "_maps\obj36.asm"
0000D9F4                            Map_obj36_inner:
0000D9F4 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D9F6 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D9F8 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9FA 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9FC 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9FE 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000DA00 03                         Map_obj36_inner_C: 	dc.b $3
0000DA01 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000DA06 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA0B F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DA10 03                         Map_obj36_inner_1C: 	dc.b $3
0000DA11 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DA16 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA1B 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DA20 01                         Map_obj36_inner_2C: 	dc.b $1
0000DA21 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA26 03                         Map_obj36_inner_32: 	dc.b $3
0000DA27 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DA2C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA31 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DA36 06                         Map_obj36_inner_42: 	dc.b $6
0000DA37 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DA3C F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DA41 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DA46 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DA4B F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DA50 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DA55 01                         Map_obj36_inner_61: 	dc.b $1
0000DA56 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA5C 00                         	even
0000DA5C 00                         	even
0000DA5C                            
0000DA5C                            ; ===========================================================================
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C                            ; Object 3B - purple rock (GHZ)
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C                            
0000DA5C                            Obj3B:					; XREF: Obj_Index
0000DA5C 7000                       		moveq	#0,d0
0000DA5E 1028 0024                  		move.b	$24(a0),d0
0000DA62 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA66 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA6A                            ; ===========================================================================
0000DA6A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA6C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA6E                            ; ===========================================================================
0000DA6E                            
0000DA6E                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA6E 5428 0024                  		addq.b	#2,$24(a0)
0000DA72 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA7A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA80 117C 0004 0001             		move.b	#4,1(a0)
0000DA86 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA8C 117C 0004 0018             		move.b	#4,$18(a0)
0000DA92                            
0000DA92                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA92 323C 001B                  		move.w	#$1B,d1
0000DA96 343C 0010                  		move.w	#$10,d2
0000DA9A 363C 0010                  		move.w	#$10,d3
0000DA9E 3828 0008                  		move.w	8(a0),d4
0000DAA2 6100 0000                  		bsr.w	SolidObject
0000DAA6 6100 0000                  		bsr.w	DisplaySprite
0000DAAA 3028 0008                  		move.w	8(a0),d0
0000DAAE 0240 FF80                  		andi.w	#$FF80,d0
0000DAB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAB6 0441 0080                  		subi.w	#$80,d1
0000DABA 0241 FF80                  		andi.w	#$FF80,d1
0000DABE 9041                       		sub.w	d1,d0
0000DAC0 0C40 0280                  		cmpi.w	#$280,d0
0000DAC4 6200 0000                  		bhi.w	DeleteObject
0000DAC8 4E75                       		rts	
0000DACA                            ; ===========================================================================
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA                            ; Object 49 - waterfall	sound effect (GHZ)
0000DACA                            ; ---------------------------------------------------------------------------
0000DACA                            
0000DACA                            Obj49:					; XREF: Obj_Index
0000DACA 7000                       		moveq	#0,d0
0000DACC 1028 0024                  		move.b	$24(a0),d0
0000DAD0 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DAD4 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DAD8                            ; ===========================================================================
0000DAD8 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DADA 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DADC                            ; ===========================================================================
0000DADC                            
0000DADC                            Obj49_Main:				; XREF: Obj49_Index
0000DADC 5428 0024                  		addq.b	#2,$24(a0)
0000DAE0 117C 0004 0001             		move.b	#4,1(a0)
0000DAE6                            
0000DAE6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DAE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DAEA 0200 003F                  		andi.b	#$3F,d0
0000DAEE 6600                       		bne.s	Obj49_ChkDel
0000DAF0 303C 00D0                  		move.w	#$D0,d0
0000DAF4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DAFA                            
0000DAFA                            Obj49_ChkDel:
0000DAFA 3028 0008                  		move.w	8(a0),d0
0000DAFE 0240 FF80                  		andi.w	#$FF80,d0
0000DB02 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB06 0441 0080                  		subi.w	#$80,d1
0000DB0A 0241 FF80                  		andi.w	#$FF80,d1
0000DB0E 9041                       		sub.w	d1,d0
0000DB10 0C40 0280                  		cmpi.w	#$280,d0
0000DB14 6200 0000                  		bhi.w	DeleteObject
0000DB18 4E75                       		rts	
0000DB1A                            ; ===========================================================================
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            ; Sprite mappings - purple rock	(GHZ)
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            Map_obj3B:
0000DB1A                            	include "_maps\obj3B.asm"
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            ; Sprite mappings - purple rock	(GHZ)
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A 0000                       		dc.w byte_D110-Map_obj3B
0000DB1C 02                         byte_D110:	dc.b 2
0000DB1D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DB22 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DB28 00                         		even
0000DB28 00                         		even
0000DB28                            
0000DB28                            ; ===========================================================================
0000DB28                            ; ---------------------------------------------------------------------------
0000DB28                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DB28                            ; ---------------------------------------------------------------------------
0000DB28                            
0000DB28                            Obj3C:					; XREF: Obj_Index
0000DB28 7000                       		moveq	#0,d0
0000DB2A 1028 0024                  		move.b	$24(a0),d0
0000DB2E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DB32 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DB36 6000 0000                  		bra.w	MarkObjGone
0000DB3A                            ; ===========================================================================
0000DB3A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DB3C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DB3E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DB40                            ; ===========================================================================
0000DB40                            
0000DB40                            Obj3C_Main:				; XREF: Obj3C_Index
0000DB40 5428 0024                  		addq.b	#2,$24(a0)
0000DB44 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DB4C 317C 450F 0002             		move.w	#$450F,2(a0)
0000DB52 117C 0004 0001             		move.b	#4,1(a0)
0000DB58 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB5E 117C 0004 0018             		move.b	#4,$18(a0)
0000DB64 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB6A                            
0000DB6A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB6A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB70 323C 001B                  		move.w	#$1B,d1
0000DB74 343C 0020                  		move.w	#$20,d2
0000DB78 363C 0020                  		move.w	#$20,d3
0000DB7C 3828 0008                  		move.w	8(a0),d4
0000DB80 6100 0000                  		bsr.w	SolidObject
0000DB84 0828 0005 0022             		btst	#5,$22(a0)
0000DB8A 6600                       		bne.s	Obj3C_ChkRoll
0000DB8C                            
0000DB8C                            locret_D180:
0000DB8C 4E75                       		rts	
0000DB8E                            ; ===========================================================================
0000DB8E                            
0000DB8E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB8E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB94 66F6                       		bne.s	locret_D180	; if not, branch
0000DB96 3028 0030                  		move.w	$30(a0),d0
0000DB9A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB9C 4440                       		neg.w	d0
0000DB9E                            
0000DB9E                            Obj3C_ChkSpeed:
0000DB9E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DBA2 65E8                       		bcs.s	locret_D180	; if not, branch
0000DBA4 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DBAA 5869 0008                  		addq.w	#4,8(a1)
0000DBAE 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DBB4 3028 0008                  		move.w	8(a0),d0
0000DBB8 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DBBC 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DBBE 5169 0008                  		subq.w	#8,8(a1)
0000DBC2 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DBC8                            
0000DBC8                            Obj3C_Smash:
0000DBC8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBCE 08A8 0005 0022             		bclr	#5,$22(a0)
0000DBD4 08A9 0005 0022             		bclr	#5,$22(a1)
0000DBDA 7207                       		moveq	#7,d1		; load 8 fragments
0000DBDC 343C 0070                  		move.w	#$70,d2
0000DBE0 6100                       		bsr.s	SmashObject
0000DBE2                            
0000DBE2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DBE2 6100 0000                  		bsr.w	SpeedToPos
0000DBE6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DBEC 6100 0000                  		bsr.w	DisplaySprite
0000DBF0 4A28 0001                  		tst.b	1(a0)
0000DBF4 6A00 0000                  		bpl.w	DeleteObject
0000DBF8 4E75                       		rts	
0000DBFA                            
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            
0000DBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBFA                            
0000DBFA                            
0000DBFA                            SmashObject:				; XREF: Obj3C_Smash
0000DBFA 7000                       		moveq	#0,d0
0000DBFC 1028 001A                  		move.b	$1A(a0),d0
0000DC00 D040                       		add.w	d0,d0
0000DC02 2668 0004                  		movea.l	4(a0),a3
0000DC06 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DC0A 524B                       		addq.w	#1,a3
0000DC0C 08E8 0005 0001             		bset	#5,1(a0)
0000DC12 1810                       		move.b	0(a0),d4
0000DC14 1A28 0001                  		move.b	1(a0),d5
0000DC18 2248                       		movea.l	a0,a1
0000DC1A 6000                       		bra.s	Smash_LoadFrag
0000DC1C                            ; ===========================================================================
0000DC1C                            
0000DC1C                            Smash_Loop:
0000DC1C 6100 0000                  		bsr.w	SingleObjLoad
0000DC20 6600                       		bne.s	Smash_PlaySnd
0000DC22 5A4B                       		addq.w	#5,a3
0000DC24                            
0000DC24                            Smash_LoadFrag:				; XREF: SmashObject
0000DC24 137C 0004 0024             		move.b	#4,$24(a1)
0000DC2A 1284                       		move.b	d4,0(a1)
0000DC2C 234B 0004                  		move.l	a3,4(a1)
0000DC30 1345 0001                  		move.b	d5,1(a1)
0000DC34 3368 0008 0008             		move.w	8(a0),8(a1)
0000DC3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DC40 3368 0002 0002             		move.w	2(a0),2(a1)
0000DC46 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DC4C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DC52 335C 0010                  		move.w	(a4)+,$10(a1)
0000DC56 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC5A B3C8                       		cmpa.l	a0,a1
0000DC5C 6400                       		bcc.s	loc_D268
0000DC5E 2F08                       		move.l	a0,-(sp)
0000DC60 2049                       		movea.l	a1,a0
0000DC62 6100 0000                  		bsr.w	SpeedToPos
0000DC66 D568 0012                  		add.w	d2,$12(a0)
0000DC6A 205F                       		movea.l	(sp)+,a0
0000DC6C 6100 0000                  		bsr.w	DisplaySprite2
0000DC70                            
0000DC70                            loc_D268:
0000DC70 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC74                            
0000DC74                            Smash_PlaySnd:
0000DC74 303C 00CB                  		move.w	#$CB,d0
0000DC78 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC7E                            ; End of function SmashObject
0000DC7E                            
0000DC7E                            ; ===========================================================================
0000DC7E                            ; Smashed block	fragment speeds
0000DC7E                            ;
0000DC7E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC82 0600 FF00                  		dc.w $600, $FF00
0000DC86 0600 0100                  		dc.w $600, $100
0000DC8A 0400 0500                  		dc.w $400, $500
0000DC8E 0600 FA00                  		dc.w $600, $FA00
0000DC92 0800 FE00                  		dc.w $800, $FE00
0000DC96 0800 0200                  		dc.w $800, $200
0000DC9A 0600 0600                  		dc.w $600, $600
0000DC9E                            
0000DC9E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DCA2 F800 FE00                  		dc.w $F800, $FE00
0000DCA6 F800 0200                  		dc.w $F800, $200
0000DCAA FA00 0600                  		dc.w $FA00, $600
0000DCAE FC00 FB00                  		dc.w $FC00, $FB00
0000DCB2 FA00 FF00                  		dc.w $FA00, $FF00
0000DCB6 FA00 0100                  		dc.w $FA00, $100
0000DCBA FC00 0500                  		dc.w $FC00, $500
0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE                            Map_obj3C:
0000DCBE                            	include "_maps\obj3C.asm"
0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE 0000                       		dc.w byte_D2BC-Map_obj3C
0000DCC0 0000                       		dc.w byte_D2E5-Map_obj3C
0000DCC2 0000                       		dc.w byte_D30E-Map_obj3C
0000DCC4 08                         byte_D2BC:	dc.b 8
0000DCC5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DCCA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DCCF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DCD4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DCD9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCDE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCE3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCE8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCED 08                         byte_D2E5:	dc.b 8
0000DCEE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCF3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCF8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCFD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DD02 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DD07 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DD0C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DD11 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DD16 08                         byte_D30E:	dc.b 8
0000DD17 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DD1C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DD21 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DD26 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DD2B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DD30 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DD35 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DD3A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DD40 00                         		even
0000DD40 00                         		even
0000DD40                            
0000DD40                            ; ---------------------------------------------------------------------------
0000DD40                            ; Object code loading subroutine
0000DD40                            ; ---------------------------------------------------------------------------
0000DD40                            
0000DD40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD40                            
0000DD40                            
0000DD40                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DD40 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DD44 7E7F                       		moveq	#$7F,d7
0000DD46 7000                       		moveq	#0,d0
0000DD48 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DD4E 6400                       		bcc.s	loc_D362
0000DD50                            
0000DD50                            loc_D348:
0000DD50 1010                       		move.b	(a0),d0		; load object number from RAM
0000DD52 6700                       		beq.s	loc_D358
0000DD54 D040                       		add.w	d0,d0
0000DD56 D040                       		add.w	d0,d0
0000DD58 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD5C 4E91                       		jsr	(a1)		; run the object's code
0000DD5E 7000                       		moveq	#0,d0
0000DD60                            
0000DD60                            loc_D358:
0000DD60 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD64 51CF FFEA                  		dbf	d7,loc_D348
0000DD68 4E75                       		rts	
0000DD6A                            ; ===========================================================================
0000DD6A                            
0000DD6A                            loc_D362:
0000DD6A 7E1F                       		moveq	#$1F,d7
0000DD6C 61E2                       		bsr.s	loc_D348
0000DD6E 7E5F                       		moveq	#$5F,d7
0000DD70                            
0000DD70                            loc_D368:
0000DD70 7000                       		moveq	#0,d0
0000DD72 1010                       		move.b	(a0),d0
0000DD74 6700                       		beq.s	loc_D378
0000DD76 4A28 0001                  		tst.b	1(a0)
0000DD7A 6A00                       		bpl.s	loc_D378
0000DD7C 6100 0000                  		bsr.w	DisplaySprite
0000DD80                            
0000DD80                            loc_D378:
0000DD80 41E8 0040                  		lea	$40(a0),a0
0000DD84                            
0000DD84                            loc_D37C:
0000DD84 51CF FFEA                  		dbf	d7,loc_D368
0000DD88 4E75                       		rts	
0000DD8A                            ; End of function ObjectsLoad
0000DD8A                            
0000DD8A                            ; ===========================================================================
0000DD8A                            ; ---------------------------------------------------------------------------
0000DD8A                            ; Object pointers
0000DD8A                            ; ---------------------------------------------------------------------------
0000DD8A                            Obj_Index:
0000DD8A                            	include "_inc\Object pointers.asm"
0000DD8A                            ; ---------------------------------------------------------------------------
0000DD8A                            ; Object pointers
0000DD8A                            ; ---------------------------------------------------------------------------
0000DD8A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD9A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DDAA 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DDBA 0000 0000 0000 AFA4 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DDCA 0000 7B3C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DDDA 0000 8162 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DDEA 0000 89B0 0000 8AAA 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDFA 0000 90F4 0000 93E2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DE0A 0000 0000 0000 A0A0 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DE1A 0000 A3D8 0000 A9C4 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DE2A 0000 9CFC 0000 91CA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DE3A 0000 B59C 0000 ABB8 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DE4A 0000 BFB0 0000 C65E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE5A 0000 BB0E 0000 D834 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE6A 0000 CE0C 0000 CEC6 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE7A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE8A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE9A 0000 C2CC 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DEAA 0000 DACA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DEBA 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DECA 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DEDA 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DEEA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEFA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DF0A 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DF1A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DF2A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DF3A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DF4A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF5A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF6A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF7A 0000 0000 0000 D110 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF8A 0000 55A6 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF9A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DFAA 0000 5C60 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DFAA 0000 5C60 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DFBA                            
0000DFBA                            ; ---------------------------------------------------------------------------
0000DFBA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFBA                            ; ---------------------------------------------------------------------------
0000DFBA                            
0000DFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFBA                            
0000DFBA                            
0000DFBA                            ObjectFall:
0000DFBA 2428 0008                  		move.l	8(a0),d2
0000DFBE 2628 000C                  		move.l	$C(a0),d3
0000DFC2 3028 0010                  		move.w	$10(a0),d0
0000DFC6 48C0                       		ext.l	d0
0000DFC8 E180                       		asl.l	#8,d0
0000DFCA D480                       		add.l	d0,d2
0000DFCC 3028 0012                  		move.w	$12(a0),d0
0000DFD0 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DFD6 48C0                       		ext.l	d0
0000DFD8 E180                       		asl.l	#8,d0
0000DFDA D680                       		add.l	d0,d3
0000DFDC 2142 0008                  		move.l	d2,8(a0)
0000DFE0 2143 000C                  		move.l	d3,$C(a0)
0000DFE4 4E75                       		rts	
0000DFE6                            ; End of function ObjectFall
0000DFE6                            
0000DFE6                            ; ---------------------------------------------------------------------------
0000DFE6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFE6                            ; ---------------------------------------------------------------------------
0000DFE6                            
0000DFE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFE6                            
0000DFE6                            
0000DFE6                            ObjectFallNoJump:
0000DFE6 2428 0008                  		move.l	8(a0),d2
0000DFEA 2628 000C                  		move.l	$C(a0),d3
0000DFEE 3028 0010                  		move.w	$10(a0),d0
0000DFF2 48C0                       		ext.l	d0
0000DFF4 E180                       		asl.l	#8,d0
0000DFF6 D480                       		add.l	d0,d2
0000DFF8                            ;		cmpi.b	#1,obID(a0)
0000DFF8                            ;		beq.s	ObjectFallSonic
0000DFF8 3028 000C                  		move.w	$C(a0),d0
0000DFFC 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000E000                            ;		ext.l	d0
0000E000                            ;		asl.l	#8,d0
0000E000                            ;		add.l	d0,d3
0000E000 2142 0008                  		move.l	d2,$8(a0)
0000E004                            ;		move.l	d3,obY(a0)
0000E004 4E75                       		rts	
0000E006                            
0000E006                            ; End of function ObjectFall
0000E006                            
0000E006                            JumpFallSonic:
0000E006 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E00C                                    
0000E00C E180                               asl.l    #8,d0                ; Apply X speed
0000E00E D1A8 0008                          add.l    d0,$8(a0)
0000E012                                    
0000E012 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E016 4A41                               tst.w    d1                ; Are we falling?
0000E018 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E01A 4440                               neg.w    d0                ; Make Y movement go up
0000E01C                                    
0000E01C                            .SetYSpeed:
0000E01C 48C0                               ext.l    d0                ; Apply Y speed
0000E01E E180                               asl.l    #8,d0
0000E020 D1A8 000C                          add.l    d0,$C(a0)
0000E024 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E02A 4E75                               rts
0000E02C                            
0000E02C                            ; ---------------------------------------------------------------------------
0000E02C                            ; Subroutine translating object	speed to update	object position
0000E02C                            ; ---------------------------------------------------------------------------
0000E02C                            
0000E02C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02C                            
0000E02C                            
0000E02C                            SpeedToPos:
0000E02C 2428 0008                  		move.l	8(a0),d2
0000E030 2628 000C                  		move.l	$C(a0),d3
0000E034 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E038 48C0                       		ext.l	d0
0000E03A E180                       		asl.l	#8,d0		; multiply speed by $100
0000E03C D480                       		add.l	d0,d2		; add to x-axis	position
0000E03E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E042 48C0                       		ext.l	d0
0000E044 E180                       		asl.l	#8,d0		; multiply by $100
0000E046 D680                       		add.l	d0,d3		; add to y-axis	position
0000E048 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E04C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E050 4E75                       		rts	
0000E052                            ; End of function SpeedToPos
0000E052                            
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            
0000E052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E052                            
0000E052                            
0000E052                            DisplaySprite:
0000E052 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E056 3028 0018                  		move.w	$18(a0),d0
0000E05A E248                       		lsr.w	#1,d0
0000E05C 0240 0380                  		andi.w	#$380,d0
0000E060 D2C0                       		adda.w	d0,a1
0000E062 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E066 6400                       		bcc.s	locret_D620
0000E068 5451                       		addq.w	#2,(a1)
0000E06A D2D1                       		adda.w	(a1),a1
0000E06C 3288                       		move.w	a0,(a1)
0000E06E                            
0000E06E                            locret_D620:
0000E06E 4E75                       		rts	
0000E070                            ; End of function DisplaySprite
0000E070                            
0000E070                            ; ---------------------------------------------------------------------------
0000E070                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E070                            ; ---------------------------------------------------------------------------
0000E070                            
0000E070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E070                            
0000E070                            
0000E070                            DisplaySprite2:
0000E070 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E074 3029 0018                  		move.w	$18(a1),d0
0000E078 E248                       		lsr.w	#1,d0
0000E07A 0240 0380                  		andi.w	#$380,d0
0000E07E D4C0                       		adda.w	d0,a2
0000E080 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E084 6400                       		bcc.s	locret_D63E
0000E086 5452                       		addq.w	#2,(a2)
0000E088 D4D2                       		adda.w	(a2),a2
0000E08A 3489                       		move.w	a1,(a2)
0000E08C                            
0000E08C                            locret_D63E:
0000E08C 4E75                       		rts	
0000E08E                            ; End of function DisplaySprite2
0000E08E                            
0000E08E                            ; ---------------------------------------------------------------------------
0000E08E                            ; Subroutine to	delete an object
0000E08E                            ; ---------------------------------------------------------------------------
0000E08E                            
0000E08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E08E                            
0000E08E                            
0000E08E                            DeleteObject:
0000E08E 2248                       		movea.l	a0,a1
0000E090                            
0000E090                            DeleteObject2:
0000E090 7200                       		moveq	#0,d1
0000E092 700F                       		moveq	#$F,d0
0000E094                            
0000E094                            loc_D646:
0000E094 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E096 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E09A 4E75                       		rts	
0000E09C                            ; End of function DeleteObject
0000E09C                            
0000E09C                            ; ===========================================================================
0000E09C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E0A0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E0A4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E0A8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E0AC                            ; ---------------------------------------------------------------------------
0000E0AC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E0AC                            ; ---------------------------------------------------------------------------
0000E0AC                            
0000E0AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0AC                            
0000E0AC                            
0000E0AC                            BuildSprites:				; XREF: TitleScreen; et al
0000E0AC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E0B0 7A00                       		moveq	#0,d5
0000E0B2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E0B6 7E07                       		moveq	#7,d7
0000E0B8                            
0000E0B8                            loc_D66A:
0000E0B8 4A54                       		tst.w	(a4)
0000E0BA 6700 0000                  		beq.w	loc_D72E
0000E0BE 7C02                       		moveq	#2,d6
0000E0C0                            
0000E0C0                            loc_D672:
0000E0C0 3074 6000                  		movea.w	(a4,d6.w),a0
0000E0C4 4A10                       		tst.b	(a0)
0000E0C6 6700 0000                  		beq.w	loc_D726
0000E0CA 08A8 0007 0001             		bclr	#7,1(a0)
0000E0D0 1028 0001                  		move.b	1(a0),d0
0000E0D4 1800                       		move.b	d0,d4
0000E0D6 0240 000C                  		andi.w	#$C,d0
0000E0DA 6700                       		beq.s	loc_D6DE
0000E0DC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E0E0 7000                       		moveq	#0,d0
0000E0E2 1028 0019                  		move.b	$19(a0),d0
0000E0E6 3628 0008                  		move.w	8(a0),d3
0000E0EA 9651                       		sub.w	(a1),d3
0000E0EC 3203                       		move.w	d3,d1
0000E0EE D240                       		add.w	d0,d1
0000E0F0 6B00 0000                  		bmi.w	loc_D726
0000E0F4 3203                       		move.w	d3,d1
0000E0F6 9240                       		sub.w	d0,d1
0000E0F8 0C41 0140                  		cmpi.w	#$140,d1
0000E0FC 6C00                       		bge.s	loc_D726
0000E0FE 0643 0080                  		addi.w	#$80,d3
0000E102 0804 0004                  		btst	#4,d4
0000E106 6700                       		beq.s	loc_D6E8
0000E108 7000                       		moveq	#0,d0
0000E10A 1028 0016                  		move.b	$16(a0),d0
0000E10E 3428 000C                  		move.w	$C(a0),d2
0000E112 9469 0004                  		sub.w	4(a1),d2
0000E116 3202                       		move.w	d2,d1
0000E118 D240                       		add.w	d0,d1
0000E11A 6B00                       		bmi.s	loc_D726
0000E11C 3202                       		move.w	d2,d1
0000E11E 9240                       		sub.w	d0,d1
0000E120 0C41 00E0                  		cmpi.w	#$E0,d1
0000E124 6C00                       		bge.s	loc_D726
0000E126 0642 0080                  		addi.w	#$80,d2
0000E12A 6000                       		bra.s	loc_D700
0000E12C                            ; ===========================================================================
0000E12C                            
0000E12C                            loc_D6DE:
0000E12C 3428 000A                  		move.w	$A(a0),d2
0000E130 3628 0008                  		move.w	8(a0),d3
0000E134 6000                       		bra.s	loc_D700
0000E136                            ; ===========================================================================
0000E136                            
0000E136                            loc_D6E8:
0000E136 3428 000C                  		move.w	$C(a0),d2
0000E13A 9469 0004                  		sub.w	4(a1),d2
0000E13E 0642 0080                  		addi.w	#$80,d2
0000E142 0C42 0060                  		cmpi.w	#$60,d2
0000E146 6500                       		bcs.s	loc_D726
0000E148 0C42 0180                  		cmpi.w	#$180,d2
0000E14C 6400                       		bcc.s	loc_D726
0000E14E                            
0000E14E                            loc_D700:
0000E14E 2268 0004                  		movea.l	4(a0),a1
0000E152 7200                       		moveq	#0,d1
0000E154 0804 0005                  		btst	#5,d4
0000E158 6600                       		bne.s	loc_D71C
0000E15A 1228 001A                  		move.b	$1A(a0),d1
0000E15E D201                       		add.b	d1,d1
0000E160 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E164 1219                       		move.b	(a1)+,d1
0000E166 5301                       		subq.b	#1,d1
0000E168 6B00                       		bmi.s	loc_D720
0000E16A                            
0000E16A                            loc_D71C:
0000E16A 6100 0000                  		bsr.w	sub_D750
0000E16E                            
0000E16E                            loc_D720:
0000E16E 08E8 0007 0001             		bset	#7,1(a0)
0000E174                            
0000E174                            loc_D726:
0000E174 5446                       		addq.w	#2,d6
0000E176 5554                       		subq.w	#2,(a4)
0000E178 6600 FF46                  		bne.w	loc_D672
0000E17C                            
0000E17C                            loc_D72E:
0000E17C 49EC 0080                  		lea	$80(a4),a4
0000E180 51CF FF36                  		dbf	d7,loc_D66A
0000E184 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E188 0C05 0050                  		cmpi.b	#$50,d5
0000E18C 6700                       		beq.s	loc_D748
0000E18E 24BC 0000 0000             		move.l	#0,(a2)
0000E194 4E75                       		rts	
0000E196                            ; ===========================================================================
0000E196                            
0000E196                            loc_D748:
0000E196 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E19C 4E75                       		rts	
0000E19E                            ; End of function BuildSprites
0000E19E                            
0000E19E                            
0000E19E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E19E                            
0000E19E                            
0000E19E                            sub_D750:				; XREF: BuildSprites
0000E19E 3668 0002                  		movea.w	2(a0),a3
0000E1A2 0804 0000                  		btst	#0,d4
0000E1A6 6600                       		bne.s	loc_D796
0000E1A8 0804 0001                  		btst	#1,d4
0000E1AC 6600 0000                  		bne.w	loc_D7E4
0000E1B0                            ; End of function sub_D750
0000E1B0                            
0000E1B0                            
0000E1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1B0                            
0000E1B0                            
0000E1B0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E1B0 0C05 0050                  		cmpi.b	#$50,d5
0000E1B4 6700                       		beq.s	locret_D794
0000E1B6 1019                       		move.b	(a1)+,d0
0000E1B8 4880                       		ext.w	d0
0000E1BA D042                       		add.w	d2,d0
0000E1BC 34C0                       		move.w	d0,(a2)+
0000E1BE 14D9                       		move.b	(a1)+,(a2)+
0000E1C0 5205                       		addq.b	#1,d5
0000E1C2 14C5                       		move.b	d5,(a2)+
0000E1C4 1019                       		move.b	(a1)+,d0
0000E1C6 E148                       		lsl.w	#8,d0
0000E1C8 1019                       		move.b	(a1)+,d0
0000E1CA D04B                       		add.w	a3,d0
0000E1CC 34C0                       		move.w	d0,(a2)+
0000E1CE 1019                       		move.b	(a1)+,d0
0000E1D0 4880                       		ext.w	d0
0000E1D2 D043                       		add.w	d3,d0
0000E1D4 0240 01FF                  		andi.w	#$1FF,d0
0000E1D8 6600                       		bne.s	loc_D78E
0000E1DA 5240                       		addq.w	#1,d0
0000E1DC                            
0000E1DC                            loc_D78E:
0000E1DC 34C0                       		move.w	d0,(a2)+
0000E1DE 51C9 FFD0                  		dbf	d1,sub_D762
0000E1E2                            
0000E1E2                            locret_D794:
0000E1E2 4E75                       		rts	
0000E1E4                            ; End of function sub_D762
0000E1E4                            
0000E1E4                            ; ===========================================================================
0000E1E4                            
0000E1E4                            loc_D796:
0000E1E4 0804 0001                  		btst	#1,d4
0000E1E8 6600 0000                  		bne.w	loc_D82A
0000E1EC                            
0000E1EC                            loc_D79E:
0000E1EC 0C05 0050                  		cmpi.b	#$50,d5
0000E1F0 6700                       		beq.s	locret_D7E2
0000E1F2 1019                       		move.b	(a1)+,d0
0000E1F4 4880                       		ext.w	d0
0000E1F6 D042                       		add.w	d2,d0
0000E1F8 34C0                       		move.w	d0,(a2)+
0000E1FA 1819                       		move.b	(a1)+,d4
0000E1FC 14C4                       		move.b	d4,(a2)+
0000E1FE 5205                       		addq.b	#1,d5
0000E200 14C5                       		move.b	d5,(a2)+
0000E202 1019                       		move.b	(a1)+,d0
0000E204 E148                       		lsl.w	#8,d0
0000E206 1019                       		move.b	(a1)+,d0
0000E208 D04B                       		add.w	a3,d0
0000E20A 0A40 0800                  		eori.w	#$800,d0
0000E20E 34C0                       		move.w	d0,(a2)+
0000E210 1019                       		move.b	(a1)+,d0
0000E212 4880                       		ext.w	d0
0000E214 4440                       		neg.w	d0
0000E216 D804                       		add.b	d4,d4
0000E218 0244 0018                  		andi.w	#$18,d4
0000E21C 5044                       		addq.w	#8,d4
0000E21E 9044                       		sub.w	d4,d0
0000E220 D043                       		add.w	d3,d0
0000E222 0240 01FF                  		andi.w	#$1FF,d0
0000E226 6600                       		bne.s	loc_D7DC
0000E228 5240                       		addq.w	#1,d0
0000E22A                            
0000E22A                            loc_D7DC:
0000E22A 34C0                       		move.w	d0,(a2)+
0000E22C 51C9 FFBE                  		dbf	d1,loc_D79E
0000E230                            
0000E230                            locret_D7E2:
0000E230 4E75                       		rts	
0000E232                            ; ===========================================================================
0000E232                            
0000E232                            loc_D7E4:				; XREF: sub_D750
0000E232 0C05 0050                  		cmpi.b	#$50,d5
0000E236 6700                       		beq.s	locret_D828
0000E238 1019                       		move.b	(a1)+,d0
0000E23A 1811                       		move.b	(a1),d4
0000E23C 4880                       		ext.w	d0
0000E23E 4440                       		neg.w	d0
0000E240 E70C                       		lsl.b	#3,d4
0000E242 0244 0018                  		andi.w	#$18,d4
0000E246 5044                       		addq.w	#8,d4
0000E248 9044                       		sub.w	d4,d0
0000E24A D042                       		add.w	d2,d0
0000E24C 34C0                       		move.w	d0,(a2)+
0000E24E 14D9                       		move.b	(a1)+,(a2)+
0000E250 5205                       		addq.b	#1,d5
0000E252 14C5                       		move.b	d5,(a2)+
0000E254 1019                       		move.b	(a1)+,d0
0000E256 E148                       		lsl.w	#8,d0
0000E258 1019                       		move.b	(a1)+,d0
0000E25A D04B                       		add.w	a3,d0
0000E25C 0A40 1000                  		eori.w	#$1000,d0
0000E260 34C0                       		move.w	d0,(a2)+
0000E262 1019                       		move.b	(a1)+,d0
0000E264 4880                       		ext.w	d0
0000E266 D043                       		add.w	d3,d0
0000E268 0240 01FF                  		andi.w	#$1FF,d0
0000E26C 6600                       		bne.s	loc_D822
0000E26E 5240                       		addq.w	#1,d0
0000E270                            
0000E270                            loc_D822:
0000E270 34C0                       		move.w	d0,(a2)+
0000E272 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E276                            
0000E276                            locret_D828:
0000E276 4E75                       		rts	
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            loc_D82A:
0000E278 0C05 0050                  		cmpi.b	#$50,d5
0000E27C 6700                       		beq.s	locret_D87C
0000E27E 1019                       		move.b	(a1)+,d0
0000E280 1811                       		move.b	(a1),d4
0000E282 4880                       		ext.w	d0
0000E284 4440                       		neg.w	d0
0000E286 E70C                       		lsl.b	#3,d4
0000E288 0244 0018                  		andi.w	#$18,d4
0000E28C 5044                       		addq.w	#8,d4
0000E28E 9044                       		sub.w	d4,d0
0000E290 D042                       		add.w	d2,d0
0000E292 34C0                       		move.w	d0,(a2)+
0000E294 1819                       		move.b	(a1)+,d4
0000E296 14C4                       		move.b	d4,(a2)+
0000E298 5205                       		addq.b	#1,d5
0000E29A 14C5                       		move.b	d5,(a2)+
0000E29C 1019                       		move.b	(a1)+,d0
0000E29E E148                       		lsl.w	#8,d0
0000E2A0 1019                       		move.b	(a1)+,d0
0000E2A2 D04B                       		add.w	a3,d0
0000E2A4 0A40 1800                  		eori.w	#$1800,d0
0000E2A8 34C0                       		move.w	d0,(a2)+
0000E2AA 1019                       		move.b	(a1)+,d0
0000E2AC 4880                       		ext.w	d0
0000E2AE 4440                       		neg.w	d0
0000E2B0 D804                       		add.b	d4,d4
0000E2B2 0244 0018                  		andi.w	#$18,d4
0000E2B6 5044                       		addq.w	#8,d4
0000E2B8 9044                       		sub.w	d4,d0
0000E2BA D043                       		add.w	d3,d0
0000E2BC 0240 01FF                  		andi.w	#$1FF,d0
0000E2C0 6600                       		bne.s	loc_D876
0000E2C2 5240                       		addq.w	#1,d0
0000E2C4                            
0000E2C4                            loc_D876:
0000E2C4 34C0                       		move.w	d0,(a2)+
0000E2C6 51C9 FFB0                  		dbf	d1,loc_D82A
0000E2CA                            
0000E2CA                            locret_D87C:
0000E2CA 4E75                       		rts	
0000E2CC                            ; ---------------------------------------------------------------------------
0000E2CC                            ; Subroutine to	check if an object is on the screen
0000E2CC                            ; ---------------------------------------------------------------------------
0000E2CC                            
0000E2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2CC                            
0000E2CC                            
0000E2CC                            ChkObjOnScreen:
0000E2CC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E2D0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E2D4 6B00                       		bmi.s	NotOnScreen
0000E2D6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E2DA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2DC                            
0000E2DC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E2E0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E2E4 6B00                       		bmi.s	NotOnScreen
0000E2E6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E2EA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2EC                            
0000E2EC 7000                       		moveq	#0,d0		; set flag to 0
0000E2EE 4E75                       		rts	
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E2F0 7001                       		moveq	#1,d0		; set flag to 1
0000E2F2 4E75                       		rts	
0000E2F4                            ; End of function ChkObjOnScreen
0000E2F4                            
0000E2F4                            
0000E2F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2F4                            
0000E2F4                            
0000E2F4                            ChkObjOnScreen2:
0000E2F4 7200                       		moveq	#0,d1
0000E2F6 1228 0019                  		move.b	$19(a0),d1
0000E2FA 3028 0008                  		move.w	8(a0),d0
0000E2FE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E302 D041                       		add.w	d1,d0
0000E304 6B00                       		bmi.s	NotOnScreen2
0000E306 D241                       		add.w	d1,d1
0000E308 9041                       		sub.w	d1,d0
0000E30A 0C40 0140                  		cmpi.w	#320,d0
0000E30E 6C00                       		bge.s	NotOnScreen2
0000E310                            
0000E310 3228 000C                  		move.w	$C(a0),d1
0000E314 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E318 6B00                       		bmi.s	NotOnScreen2
0000E31A 0C41 00E0                  		cmpi.w	#224,d1
0000E31E 6C00                       		bge.s	NotOnScreen2
0000E320                            
0000E320 7000                       		moveq	#0,d0
0000E322 4E75                       		rts	
0000E324                            ; ===========================================================================
0000E324                            
0000E324                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E324 7001                       		moveq	#1,d0
0000E326 4E75                       		rts	
0000E328                            ; End of function ChkObjOnScreen2
0000E328                            
0000E328                            ; ---------------------------------------------------------------------------
0000E328                            ; Subroutine to	load a level's objects
0000E328                            ; ---------------------------------------------------------------------------
0000E328                            
0000E328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E328                            
0000E328                            
0000E328                            ObjPosLoad:				; XREF: Level; et al
0000E328 7000                       		moveq	#0,d0
0000E32A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E32E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E332 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E336                            ; End of function ObjPosLoad
0000E336                            
0000E336                            ; ===========================================================================
0000E336 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E338 0000                       		dc.w OPL_Next-OPL_Index
0000E33A                            ; ===========================================================================
0000E33A                            
0000E33A                            OPL_Main:				; XREF: OPL_Index
0000E33A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E33E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E342 ED08                       		lsl.b	#6,d0
0000E344 E848                       		lsr.w	#4,d0
0000E346 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E34C 2248                       		movea.l	a0,a1
0000E34E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E352 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E356 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E35A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E35E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E362 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E366 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E36A 34FC 0101                  		move.w	#$101,(a2)+
0000E36E 303C 005E                  		move.w	#$5E,d0
0000E372                            
0000E372                            OPL_ClrList:
0000E372 429A                       		clr.l	(a2)+
0000E374 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E378                            
0000E378 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E37C 7400                       		moveq	#0,d2
0000E37E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E382 0446 0080                  		subi.w	#$80,d6
0000E386 6400                       		bcc.s	loc_D93C
0000E388 7C00                       		moveq	#0,d6
0000E38A                            
0000E38A                            loc_D93C:
0000E38A 0246 FF80                  		andi.w	#$FF80,d6
0000E38E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E392                            
0000E392                            loc_D944:
0000E392 BC50                       		cmp.w	(a0),d6
0000E394 6300                       		bls.s	loc_D956
0000E396 4A28 0004                  		tst.b	4(a0)
0000E39A 6A00                       		bpl.s	loc_D952
0000E39C 1412                       		move.b	(a2),d2
0000E39E 5212                       		addq.b	#1,(a2)
0000E3A0                            
0000E3A0                            loc_D952:
0000E3A0 5C48                       		addq.w	#6,a0
0000E3A2 60EE                       		bra.s	loc_D944
0000E3A4                            ; ===========================================================================
0000E3A4                            
0000E3A4                            loc_D956:
0000E3A4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3A8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3AC 0446 0080                  		subi.w	#$80,d6
0000E3B0 6500                       		bcs.s	loc_D976
0000E3B2                            
0000E3B2                            loc_D964:
0000E3B2 BC50                       		cmp.w	(a0),d6
0000E3B4 6300                       		bls.s	loc_D976
0000E3B6 4A28 0004                  		tst.b	4(a0)
0000E3BA 6A00                       		bpl.s	loc_D972
0000E3BC 522A 0001                  		addq.b	#1,1(a2)
0000E3C0                            
0000E3C0                            loc_D972:
0000E3C0 5C48                       		addq.w	#6,a0
0000E3C2 60EE                       		bra.s	loc_D964
0000E3C4                            ; ===========================================================================
0000E3C4                            
0000E3C4                            loc_D976:
0000E3C4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3C8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E3CE                            
0000E3CE                            OPL_Next:				; XREF: OPL_Index
0000E3CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3D2 7400                       		moveq	#0,d2
0000E3D4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E3D8 0246 FF80                  		andi.w	#$FF80,d6
0000E3DC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E3E0 6700 0000                  		beq.w	locret_DA3A
0000E3E4 6C00                       		bge.s	loc_D9F6
0000E3E6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3EA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3EE 0446 0080                  		subi.w	#$80,d6
0000E3F2 6500                       		bcs.s	loc_D9D2
0000E3F4                            
0000E3F4                            loc_D9A6:
0000E3F4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3F8 6C00                       		bge.s	loc_D9D2
0000E3FA 5D48                       		subq.w	#6,a0
0000E3FC 4A28 0004                  		tst.b	4(a0)
0000E400 6A00                       		bpl.s	loc_D9BC
0000E402 532A 0001                  		subq.b	#1,1(a2)
0000E406 142A 0001                  		move.b	1(a2),d2
0000E40A                            
0000E40A                            loc_D9BC:
0000E40A 6100 0000                  		bsr.w	loc_DA3C
0000E40E 6600                       		bne.s	loc_D9C6
0000E410 5D48                       		subq.w	#6,a0
0000E412 60E0                       		bra.s	loc_D9A6
0000E414                            ; ===========================================================================
0000E414                            
0000E414                            loc_D9C6:
0000E414 4A28 0004                  		tst.b	4(a0)
0000E418 6A00                       		bpl.s	loc_D9D0
0000E41A 522A 0001                  		addq.b	#1,1(a2)
0000E41E                            
0000E41E                            loc_D9D0:
0000E41E 5C48                       		addq.w	#6,a0
0000E420                            
0000E420                            loc_D9D2:
0000E420 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E424 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E428 0646 0300                  		addi.w	#$300,d6
0000E42C                            
0000E42C                            loc_D9DE:
0000E42C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E430 6E00                       		bgt.s	loc_D9F0
0000E432 4A28 FFFE                  		tst.b	-2(a0)
0000E436 6A00                       		bpl.s	loc_D9EC
0000E438 5312                       		subq.b	#1,(a2)
0000E43A                            
0000E43A                            loc_D9EC:
0000E43A 5D48                       		subq.w	#6,a0
0000E43C 60EE                       		bra.s	loc_D9DE
0000E43E                            ; ===========================================================================
0000E43E                            
0000E43E                            loc_D9F0:
0000E43E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            loc_D9F6:
0000E444 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E448 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E44C 0646 0280                  		addi.w	#$280,d6
0000E450                            
0000E450                            loc_DA02:
0000E450 BC50                       		cmp.w	(a0),d6
0000E452 6300                       		bls.s	loc_DA16
0000E454 4A28 0004                  		tst.b	4(a0)
0000E458 6A00                       		bpl.s	loc_DA10
0000E45A 1412                       		move.b	(a2),d2
0000E45C 5212                       		addq.b	#1,(a2)
0000E45E                            
0000E45E                            loc_DA10:
0000E45E 6100 0000                  		bsr.w	loc_DA3C
0000E462 67EC                       		beq.s	loc_DA02
0000E464                            
0000E464                            loc_DA16:
0000E464 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E468 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E46C 0446 0300                  		subi.w	#$300,d6
0000E470 6500                       		bcs.s	loc_DA36
0000E472                            
0000E472                            loc_DA24:
0000E472 BC50                       		cmp.w	(a0),d6
0000E474 6300                       		bls.s	loc_DA36
0000E476 4A28 0004                  		tst.b	4(a0)
0000E47A 6A00                       		bpl.s	loc_DA32
0000E47C 522A 0001                  		addq.b	#1,1(a2)
0000E480                            
0000E480                            loc_DA32:
0000E480 5C48                       		addq.w	#6,a0
0000E482 60EE                       		bra.s	loc_DA24
0000E484                            ; ===========================================================================
0000E484                            
0000E484                            loc_DA36:
0000E484 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E488                            
0000E488                            locret_DA3A:
0000E488 4E75                       		rts	
0000E48A                            ; ===========================================================================
0000E48A                            
0000E48A                            loc_DA3C:
0000E48A 4A28 0004                  		tst.b	4(a0)
0000E48E 6A00                       		bpl.s	OPL_MakeItem
0000E490 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E496 6700                       		beq.s	OPL_MakeItem
0000E498 5C48                       		addq.w	#6,a0
0000E49A 7000                       		moveq	#0,d0
0000E49C 4E75                       		rts	
0000E49E                            ; ===========================================================================
0000E49E                            
0000E49E                            OPL_MakeItem:
0000E49E 6100 0000                  		bsr.w	SingleObjLoad
0000E4A2 6600                       		bne.s	locret_DA8A
0000E4A4 3358 0008                  		move.w	(a0)+,8(a1)
0000E4A8 3018                       		move.w	(a0)+,d0
0000E4AA 3200                       		move.w	d0,d1
0000E4AC 0240 0FFF                  		andi.w	#$FFF,d0
0000E4B0 3340 000C                  		move.w	d0,$C(a1)
0000E4B4 E559                       		rol.w	#2,d1
0000E4B6 0201 0003                  		andi.b	#3,d1
0000E4BA 1341 0001                  		move.b	d1,1(a1)
0000E4BE 1341 0022                  		move.b	d1,$22(a1)
0000E4C2 1018                       		move.b	(a0)+,d0
0000E4C4 6A00                       		bpl.s	loc_DA80
0000E4C6 0200 007F                  		andi.b	#$7F,d0
0000E4CA 1342 0023                  		move.b	d2,$23(a1)
0000E4CE                            
0000E4CE                            loc_DA80:
0000E4CE 1280                       		move.b	d0,0(a1)
0000E4D0 1358 0028                  		move.b	(a0)+,$28(a1)
0000E4D4 7000                       		moveq	#0,d0
0000E4D6                            
0000E4D6                            locret_DA8A:
0000E4D6 4E75                       		rts	
0000E4D8                            ; ---------------------------------------------------------------------------
0000E4D8                            ; Single object	loading	subroutine
0000E4D8                            ; ---------------------------------------------------------------------------
0000E4D8                            
0000E4D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4D8                            
0000E4D8                            
0000E4D8                            SingleObjLoad:
0000E4D8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E4DC 303C 005F                  		move.w	#$5F,d0
0000E4E0                            
0000E4E0                            loc_DA94:
0000E4E0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E4E2 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E4E4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E4E8 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E4EC                            
0000E4EC                            locret_DAA0:
0000E4EC 4E75                       		rts	
0000E4EE                            ; End of function SingleObjLoad
0000E4EE                            
0000E4EE                            
0000E4EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4EE                            
0000E4EE                            
0000E4EE                            SingleObjLoad2:
0000E4EE 2248                       		movea.l	a0,a1
0000E4F0 303C F000                  		move.w	#-$1000,d0
0000E4F4 9048                       		sub.w	a0,d0
0000E4F6 EC48                       		lsr.w	#6,d0
0000E4F8 5340                       		subq.w	#1,d0
0000E4FA 6500                       		bcs.s	locret_DABC
0000E4FC                            
0000E4FC                            loc_DAB0:
0000E4FC 4A11                       		tst.b	(a1)
0000E4FE 6700                       		beq.s	locret_DABC
0000E500 43E9 0040                  		lea	$40(a1),a1
0000E504 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E508                            
0000E508                            locret_DABC:
0000E508 4E75                       		rts	
0000E50A                            ; End of function SingleObjLoad2
0000E50A                            
0000E50A                            ; ===========================================================================
0000E50A                            ; ---------------------------------------------------------------------------
0000E50A                            ; Object 41 - springs
0000E50A                            ; ---------------------------------------------------------------------------
0000E50A                            
0000E50A                            Obj41:					; XREF: Obj_Index
0000E50A 7000                       		moveq	#0,d0
0000E50C 1028 0024                  		move.b	$24(a0),d0
0000E510 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E514 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E518 6100 FB38                  		bsr.w	DisplaySprite
0000E51C 3028 0008                  		move.w	8(a0),d0
0000E520 0240 FF80                  		andi.w	#$FF80,d0
0000E524 3238 F700                  		move.w	($FFFFF700).w,d1
0000E528 0441 0080                  		subi.w	#$80,d1
0000E52C 0241 FF80                  		andi.w	#$FF80,d1
0000E530 9041                       		sub.w	d1,d0
0000E532 0C40 0280                  		cmpi.w	#$280,d0
0000E536 6200 FB56                  		bhi.w	DeleteObject
0000E53A 4E75                       		rts	
0000E53C                            ; ===========================================================================
0000E53C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E53E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E540 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E542 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E544 0000                       		dc.w Obj41_LR-Obj41_Index
0000E546 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E548 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E54A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E54C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E54E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E550                            
0000E550 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E552 F600                       		dc.w -$A00		; power	of yellow spring
0000E554                            ; ===========================================================================
0000E554                            
0000E554                            Obj41_Main:				; XREF: Obj41_Index
0000E554 5428 0024                  		addq.b	#2,$24(a0)
0000E558 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E560 317C 0523 0002             		move.w	#$523,2(a0)
0000E566 0028 0004 0001             		ori.b	#4,1(a0)
0000E56C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E572 117C 0004 0018             		move.b	#4,$18(a0)
0000E578 1028 0028                  		move.b	$28(a0),d0
0000E57C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E580 6700                       		beq.s	loc_DB54	; if not, branch
0000E582 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E588 117C 0001 001C             		move.b	#1,$1C(a0)
0000E58E 117C 0003 001A             		move.b	#3,$1A(a0)
0000E594 317C 0533 0002             		move.w	#$533,2(a0)
0000E59A 117C 0008 0019             		move.b	#8,$19(a0)
0000E5A0                            
0000E5A0                            loc_DB54:
0000E5A0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E5A4 6700                       		beq.s	loc_DB66	; if not, branch
0000E5A6 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E5AC 08E8 0001 0022             		bset	#1,$22(a0)
0000E5B2                            
0000E5B2                            loc_DB66:
0000E5B2 0800 0001                  		btst	#1,d0
0000E5B6 6700                       		beq.s	loc_DB72
0000E5B8 08E8 0005 0002             		bset	#5,2(a0)
0000E5BE                            
0000E5BE                            loc_DB72:
0000E5BE 0240 000F                  		andi.w	#$F,d0
0000E5C2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E5C8 4E75                       		rts	
0000E5CA                            ; ===========================================================================
0000E5CA                            
0000E5CA                            Obj41_Up:				; XREF: Obj41_Index
0000E5CA 323C 001B                  		move.w	#$1B,d1
0000E5CE 343C 0008                  		move.w	#8,d2
0000E5D2 363C 0010                  		move.w	#$10,d3
0000E5D6 3828 0008                  		move.w	8(a0),d4
0000E5DA 6100 0000                  		bsr.w	SolidObject
0000E5DE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E5E2 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E5E4 4E75                       		rts	
0000E5E6                            ; ===========================================================================
0000E5E6                            
0000E5E6                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E5E6 5428 0024                  		addq.b	#2,$24(a0)
0000E5EA 5069 000C                  		addq.w	#8,$C(a1)
0000E5EE 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E5F4 08E9 0001 0022             		bset	#1,$22(a1)
0000E5FA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E600 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E606 137C 0002 0024             		move.b	#2,$24(a1)
0000E60C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E612 4228 0025                  		clr.b	$25(a0)
0000E616 303C 00CC                  		move.w	#$CC,d0
0000E61A 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E620                            
0000E620                            Obj41_AniUp:				; XREF: Obj41_Index
0000E620 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E626 6000 CA78                  		bra.w	AnimateSprite
0000E62A                            ; ===========================================================================
0000E62A                            
0000E62A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E62A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E630 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E634 4E75                       		rts	
0000E636                            ; ===========================================================================
0000E636                            
0000E636                            Obj41_LR:				; XREF: Obj41_Index
0000E636 323C 0013                  		move.w	#$13,d1
0000E63A 343C 000E                  		move.w	#$E,d2
0000E63E 363C 000F                  		move.w	#$F,d3
0000E642 3828 0008                  		move.w	8(a0),d4
0000E646 6100 0000                  		bsr.w	SolidObject
0000E64A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E650 6600                       		bne.s	loc_DC0C
0000E652 117C 0008 0024             		move.b	#8,$24(a0)
0000E658                            
0000E658                            loc_DC0C:
0000E658 0828 0005 0022             		btst	#5,$22(a0)
0000E65E 6600                       		bne.s	Obj41_BounceLR
0000E660 4E75                       		rts	
0000E662                            ; ===========================================================================
0000E662                            
0000E662                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E662 5428 0024                  		addq.b	#2,$24(a0)
0000E666 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E66C 5069 0008                  		addq.w	#8,8(a1)
0000E670 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E676 6600                       		bne.s	loc_DC36	; if yes, branch
0000E678 0469 0010 0008             		subi.w	#$10,8(a1)
0000E67E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E682                            
0000E682                            loc_DC36:
0000E682 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E688 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E68E 0869 0000 0022             		bchg	#0,$22(a1)
0000E694 0829 0002 0022             		btst	#2,$22(a1)
0000E69A 6600                       		bne.s	loc_DC56
0000E69C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E6A2                            
0000E6A2                            loc_DC56:
0000E6A2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E6A8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E6AE 303C 00CC                  		move.w	#$CC,d0
0000E6B2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6B8                            
0000E6B8                            Obj41_AniLR:				; XREF: Obj41_Index
0000E6B8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6BE 6000 C9E0                  		bra.w	AnimateSprite
0000E6C2                            ; ===========================================================================
0000E6C2                            
0000E6C2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E6C2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E6C8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E6CC 4E75                       		rts	
0000E6CE                            ; ===========================================================================
0000E6CE                            
0000E6CE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E6CE 323C 001B                  		move.w	#$1B,d1
0000E6D2 343C 0008                  		move.w	#8,d2
0000E6D6 363C 0010                  		move.w	#$10,d3
0000E6DA 3828 0008                  		move.w	8(a0),d4
0000E6DE 6100 0000                  		bsr.w	SolidObject
0000E6E2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6E8 6600                       		bne.s	loc_DCA4
0000E6EA 117C 000E 0024             		move.b	#$E,$24(a0)
0000E6F0                            
0000E6F0                            loc_DCA4:
0000E6F0 4A28 0025                  		tst.b	$25(a0)
0000E6F4 6600                       		bne.s	locret_DCAE
0000E6F6 4A44                       		tst.w	d4
0000E6F8 6B00                       		bmi.s	Obj41_BounceDwn
0000E6FA                            
0000E6FA                            locret_DCAE:
0000E6FA 4E75                       		rts	
0000E6FC                            ; ===========================================================================
0000E6FC                            
0000E6FC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6FC 5428 0024                  		addq.b	#2,$24(a0)
0000E700 5169 000C                  		subq.w	#8,$C(a1)
0000E704 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E70A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E70E 08E9 0001 0022             		bset	#1,$22(a1)
0000E714 08A9 0003 0022             		bclr	#3,$22(a1)
0000E71A 137C 0002 0024             		move.b	#2,$24(a1)
0000E720 08A8 0003 0022             		bclr	#3,$22(a0)
0000E726 4228 0025                  		clr.b	$25(a0)
0000E72A 303C 00CC                  		move.w	#$CC,d0
0000E72E 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E734                            
0000E734                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E734 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E73A 6000 C964                  		bra.w	AnimateSprite
0000E73E                            ; ===========================================================================
0000E73E                            
0000E73E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E73E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E744 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E748 4E75                       		rts	
0000E74A                            ; ===========================================================================
0000E74A                            Ani_obj41:
0000E74A                            	include "_anim\obj41.asm"
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A                            ; Animation script - springs
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A 0000                       		dc.w byte_DD02-Ani_obj41
0000E74C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E74E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E75A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E766                            		even
0000E766                            		even
0000E766                            
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - springs
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            Map_obj41:
0000E766                            	include "_maps\obj41.asm"
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - springs
0000E766                            ; ---------------------------------------------------------------------------
0000E766 0000                       		dc.w byte_DD26-Map_obj41
0000E768 0000                       		dc.w byte_DD31-Map_obj41
0000E76A 0000                       		dc.w byte_DD37-Map_obj41
0000E76C 0000                       		dc.w byte_DD47-Map_obj41
0000E76E 0000                       		dc.w byte_DD4D-Map_obj41
0000E770 0000                       		dc.w byte_DD53-Map_obj41
0000E772 02                         byte_DD26:	dc.b 2
0000E773 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E778 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E77D 01                         byte_DD31:	dc.b 1
0000E77E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E783 03                         byte_DD37:	dc.b 3
0000E784 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E789 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E78E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E793 01                         byte_DD47:	dc.b 1
0000E794 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E799 01                         byte_DD4D:	dc.b 1
0000E79A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E79F 04                         byte_DD53:	dc.b 4
0000E7A0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E7A5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E7AA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E7AF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E7B4                            		even
0000E7B4                            		even
0000E7B4                            
0000E7B4                            ; ===========================================================================
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            ; Object 42 - Newtron enemy (GHZ)
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            
0000E7B4                            Obj42:					; XREF: Obj_Index
0000E7B4 7000                       		moveq	#0,d0
0000E7B6 1028 0024                  		move.b	$24(a0),d0
0000E7BA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E7BE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E7C2                            ; ===========================================================================
0000E7C2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E7C4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E7C6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E7C8                            ; ===========================================================================
0000E7C8                            
0000E7C8                            Obj42_Main:				; XREF: Obj42_Index
0000E7C8 5428 0024                  		addq.b	#2,$24(a0)
0000E7CC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E7D4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E7DA 117C 0004 0001             		move.b	#4,1(a0)
0000E7E0 117C 0004 0018             		move.b	#4,$18(a0)
0000E7E6 117C 0014 0019             		move.b	#$14,$19(a0)
0000E7EC 117C 0010 0016             		move.b	#$10,$16(a0)
0000E7F2 117C 0008 0017             		move.b	#8,$17(a0)
0000E7F8                            
0000E7F8                            Obj42_Action:				; XREF: Obj42_Index
0000E7F8 7000                       		moveq	#0,d0
0000E7FA 1028 0025                  		move.b	$25(a0),d0
0000E7FE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E802 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E806 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E80C 6100 C892                  		bsr.w	AnimateSprite
0000E810 6000 0000                  		bra.w	MarkObjGone
0000E814                            ; ===========================================================================
0000E814 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E816 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E818 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E81A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E81C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E81E                            ; ===========================================================================
0000E81E                            
0000E81E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E81E 08E8 0000 0022             		bset	#0,$22(a0)
0000E824 3038 D008                  		move.w	($FFFFD008).w,d0
0000E828 9068 0008                  		sub.w	8(a0),d0
0000E82C 6400                       		bcc.s	loc_DDEA
0000E82E 4440                       		neg.w	d0
0000E830 08A8 0000 0022             		bclr	#0,$22(a0)
0000E836                            
0000E836                            loc_DDEA:
0000E836 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E83A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E83C 5428 0025                  		addq.b	#2,$25(a0)
0000E840 117C 0001 001C             		move.b	#1,$1C(a0)
0000E846 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E84A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E84C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E852 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E858 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E85E                            
0000E85E                            locret_DE12:
0000E85E 4E75                       		rts	
0000E860                            ; ===========================================================================
0000E860                            
0000E860                            Obj42_Type00:				; XREF: Obj42_Index2
0000E860 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E866 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E868 08E8 0000 0022             		bset	#0,$22(a0)
0000E86E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E872 9068 0008                  		sub.w	8(a0),d0
0000E876 6400                       		bcc.s	locret_DE32
0000E878 08A8 0000 0022             		bclr	#0,$22(a0)
0000E87E                            
0000E87E                            locret_DE32:
0000E87E 4E75                       		rts	
0000E880                            ; ===========================================================================
0000E880                            
0000E880                            Obj42_Fall:				; XREF: Obj42_Type00
0000E880 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E886 6600                       		bne.s	loc_DE42
0000E888 117C 000C 0020             		move.b	#$C,$20(a0)
0000E88E                            
0000E88E                            loc_DE42:
0000E88E 6100 F72A                  		bsr.w	ObjectFall
0000E892 6100 0000                  		bsr.w	ObjHitFloor
0000E896 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E898 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E89A D368 000C                  		add.w	d1,$C(a0)
0000E89E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E8A4 5428 0025                  		addq.b	#2,$25(a0)
0000E8A8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8AE 0828 0005 0002             		btst	#5,2(a0)
0000E8B4 6700                       		beq.s	Obj42_Move
0000E8B6 5228 001C                  		addq.b	#1,$1C(a0)
0000E8BA                            
0000E8BA                            Obj42_Move:
0000E8BA 117C 000D 0020             		move.b	#$D,$20(a0)
0000E8C0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E8C6 0828 0000 0022             		btst	#0,$22(a0)
0000E8CC 6600                       		bne.s	locret_DE86
0000E8CE 4468 0010                  		neg.w	$10(a0)
0000E8D2                            
0000E8D2                            locret_DE86:
0000E8D2 4E75                       		rts	
0000E8D4                            ; ===========================================================================
0000E8D4                            
0000E8D4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E8D4 6100 F756                  		bsr.w	SpeedToPos
0000E8D8 6100 0000                  		bsr.w	ObjHitFloor
0000E8DC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8E0 6D00                       		blt.s	loc_DEA2
0000E8E2 0C41 000C                  		cmpi.w	#$C,d1
0000E8E6 6C00                       		bge.s	loc_DEA2
0000E8E8 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E8EC 4E75                       		rts	
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            loc_DEA2:
0000E8EE 5428 0025                  		addq.b	#2,$25(a0)
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Obj42_Speed:				; XREF: Obj42_Index2
0000E8F4 6100 F736                  		bsr.w	SpeedToPos
0000E8F8 4E75                       		rts	
0000E8FA                            ; ===========================================================================
0000E8FA                            
0000E8FA                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8FA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E900 6600                       		bne.s	Obj42_FireMissile
0000E902 117C 000C 0020             		move.b	#$C,$20(a0)
0000E908                            
0000E908                            Obj42_FireMissile:
0000E908 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E90E 6600                       		bne.s	locret_DF14
0000E910 4A28 0032                  		tst.b	$32(a0)
0000E914 6600                       		bne.s	locret_DF14
0000E916 117C 0001 0032             		move.b	#1,$32(a0)
0000E91C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E920 6600                       		bne.s	locret_DF14
0000E922 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E926 3368 0008 0008             		move.w	8(a0),8(a1)
0000E92C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E932 5169 000C                  		subq.w	#8,$C(a1)
0000E936 337C 0200 0010             		move.w	#$200,$10(a1)
0000E93C 303C 0014                  		move.w	#$14,d0
0000E940 0828 0000 0022             		btst	#0,$22(a0)
0000E946 6600                       		bne.s	loc_DF04
0000E948 4440                       		neg.w	d0
0000E94A 4469 0010                  		neg.w	$10(a1)
0000E94E                            
0000E94E                            loc_DF04:
0000E94E D169 0008                  		add.w	d0,8(a1)
0000E952 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E958 137C 0001 0028             		move.b	#1,$28(a1)
0000E95E                            
0000E95E                            locret_DF14:
0000E95E 4E75                       		rts	
0000E960                            ; ===========================================================================
0000E960                            
0000E960                            Obj42_Delete:				; XREF: Obj42_Index
0000E960 6000 F72C                  		bra.w	DeleteObject
0000E964                            ; ===========================================================================
0000E964                            Ani_obj42:
0000E964                            	include "_anim\obj42.asm"
0000E964                            ; ---------------------------------------------------------------------------
0000E964                            ; Animation script - Newtron enemy
0000E964                            ; ---------------------------------------------------------------------------
0000E964 0000                       		dc.w byte_DF24-Ani_obj42
0000E966 0000                       		dc.w byte_DF28-Ani_obj42
0000E968 0000                       		dc.w byte_DF30-Ani_obj42
0000E96A 0000                       		dc.w byte_DF34-Ani_obj42
0000E96C 0000                       		dc.w byte_DF38-Ani_obj42
0000E96E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E972 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E97A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E97E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E982 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E98C                            		even
0000E98C                            		even
0000E98C                            
0000E98C                            ; ---------------------------------------------------------------------------
0000E98C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E98C                            ; ---------------------------------------------------------------------------
0000E98C                            Map_obj42:
0000E98C                            	include "_maps\obj42.asm"
0000E98C                            ; ---------------------------------------------------------------------------
0000E98C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E98C                            ; ---------------------------------------------------------------------------
0000E98C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E990 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E994 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E998 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E99C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E9A0 0000                       		dc.w byte_DFF8-Map_obj42
0000E9A2 03                         byte_DF58:	dc.b 3
0000E9A3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E9A8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E9AD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E9B2 03                         byte_DF68:	dc.b 3
0000E9B3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E9B8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9BD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9C2 03                         byte_DF78:	dc.b 3
0000E9C3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E9C8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9CD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9D2 04                         byte_DF88:	dc.b 4
0000E9D3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E9D8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9DD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E9E2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E9E7 03                         byte_DF9D:	dc.b 3
0000E9E8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E9ED FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E9F2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E9F7 02                         byte_DFAD:	dc.b 2
0000E9F8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9FD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA02 03                         byte_DFB8:	dc.b 3
0000EA03 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA08 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA0D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EA12 03                         byte_DFC8:	dc.b 3
0000EA13 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA18 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA1D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EA22 03                         byte_DFD8:	dc.b 3
0000EA23 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA28 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA2D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EA32 03                         byte_DFE8:	dc.b 3
0000EA33 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA38 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA3D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EA42 00                         byte_DFF8:	dc.b 0
0000EA44 00                         		even
0000EA44 00                         		even
0000EA44                            
0000EA44                            ; ===========================================================================
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44                            ; Object 43 - Roller enemy (SYZ)
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44                            
0000EA44                            Obj43:					; XREF: Obj_Index
0000EA44 7000                       		moveq	#0,d0
0000EA46 1028 0024                  		move.b	$24(a0),d0
0000EA4A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EA4E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EA52                            ; ===========================================================================
0000EA52 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EA54 0000                       		dc.w Obj43_Action-Obj43_Index
0000EA56                            ; ===========================================================================
0000EA56                            
0000EA56                            Obj43_Main:				; XREF: Obj43_Index
0000EA56 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA5C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA62 6100 F556                  		bsr.w	ObjectFall
0000EA66 6100 0000                  		bsr.w	ObjHitFloor
0000EA6A 4A41                       		tst.w	d1
0000EA6C 6A00                       		bpl.s	locret_E052
0000EA6E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA72 317C 0000 0012             		move.w	#0,$12(a0)
0000EA78 5428 0024                  		addq.b	#2,$24(a0)
0000EA7C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA84 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA8A 117C 0004 0001             		move.b	#4,1(a0)
0000EA90 117C 0004 0018             		move.b	#4,$18(a0)
0000EA96 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA9C                            
0000EA9C                            locret_E052:
0000EA9C 4E75                       		rts	
0000EA9E                            ; ===========================================================================
0000EA9E                            
0000EA9E                            Obj43_Action:				; XREF: Obj43_Index
0000EA9E 7000                       		moveq	#0,d0
0000EAA0 1028 0025                  		move.b	$25(a0),d0
0000EAA4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EAA8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EAAC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EAB2 6100 C5EC                  		bsr.w	AnimateSprite
0000EAB6 3028 0008                  		move.w	8(a0),d0
0000EABA 0240 FF80                  		andi.w	#$FF80,d0
0000EABE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAC2 0441 0080                  		subi.w	#$80,d1
0000EAC6 0241 FF80                  		andi.w	#$FF80,d1
0000EACA 9041                       		sub.w	d1,d0
0000EACC 0C40 0280                  		cmpi.w	#$280,d0
0000EAD0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EAD4 6000 F57C                  		bra.w	DisplaySprite
0000EAD8                            ; ===========================================================================
0000EAD8                            
0000EAD8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EAD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EADC 7000                       		moveq	#0,d0
0000EADE 1028 0023                  		move.b	$23(a0),d0
0000EAE2 6700                       		beq.s	Obj43_Delete
0000EAE4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EAEA                            
0000EAEA                            Obj43_Delete:
0000EAEA 6000 F5A2                  		bra.w	DeleteObject
0000EAEE                            ; ===========================================================================
0000EAEE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EAF0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EAF2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EAF4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EAF6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAFA 0440 0100                  		subi.w	#$100,d0
0000EAFE 6500                       		bcs.s	loc_E0D2
0000EB00 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EB04 6500                       		bcs.s	loc_E0D2
0000EB06 5828 0025                  		addq.b	#4,$25(a0)
0000EB0A 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB10 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EB16 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EB1C                            
0000EB1C                            loc_E0D2:
0000EB1C 588F                       		addq.l	#4,sp
0000EB1E 4E75                       		rts	
0000EB20                            ; ===========================================================================
0000EB20                            
0000EB20                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EB20 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EB26 6700                       		beq.s	loc_E0F8
0000EB28 5368 0030                  		subq.w	#1,$30(a0)
0000EB2C 6A00                       		bpl.s	locret_E0F6
0000EB2E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB34 317C 0700 0010             		move.w	#$700,$10(a0)
0000EB3A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EB40                            
0000EB40                            locret_E0F6:
0000EB40 4E75                       		rts	
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            loc_E0F8:
0000EB42 5428 0025                  		addq.b	#2,$25(a0)
0000EB46 4E75                       		rts	
0000EB48                            ; ===========================================================================
0000EB48                            
0000EB48                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EB48 6100 0000                  		bsr.w	Obj43_Stop
0000EB4C 6100 F4DE                  		bsr.w	SpeedToPos
0000EB50 6100 0000                  		bsr.w	ObjHitFloor
0000EB54 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB58 6D00                       		blt.s	Obj43_Jump
0000EB5A 0C41 000C                  		cmpi.w	#$C,d1
0000EB5E 6C00                       		bge.s	Obj43_Jump
0000EB60 D368 000C                  		add.w	d1,$C(a0)
0000EB64 4E75                       		rts	
0000EB66                            ; ===========================================================================
0000EB66                            
0000EB66                            Obj43_Jump:
0000EB66 5428 0025                  		addq.b	#2,$25(a0)
0000EB6A 08E8 0000 0032             		bset	#0,$32(a0)
0000EB70 6700                       		beq.s	locret_E12E
0000EB72 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB78                            
0000EB78                            locret_E12E:
0000EB78 4E75                       		rts	
0000EB7A                            ; ===========================================================================
0000EB7A                            
0000EB7A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB7A 6100 F43E                  		bsr.w	ObjectFall
0000EB7E 4A68 0012                  		tst.w	$12(a0)
0000EB82 6B00                       		bmi.s	locret_E150
0000EB84 6100 0000                  		bsr.w	ObjHitFloor
0000EB88 4A41                       		tst.w	d1
0000EB8A 6A00                       		bpl.s	locret_E150
0000EB8C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB90 5528 0025                  		subq.b	#2,$25(a0)
0000EB94 317C 0000 0012             		move.w	#0,$12(a0)
0000EB9A                            
0000EB9A                            locret_E150:
0000EB9A 4E75                       		rts	
0000EB9C                            
0000EB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB9C                            
0000EB9C                            
0000EB9C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB9C 4A28 0032                  		tst.b	$32(a0)
0000EBA0 6B00                       		bmi.s	locret_E188
0000EBA2 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBA6 0440 0030                  		subi.w	#$30,d0
0000EBAA 9068 0008                  		sub.w	8(a0),d0
0000EBAE 6400                       		bcc.s	locret_E188
0000EBB0 117C 0000 001C             		move.b	#0,$1C(a0)
0000EBB6 117C 000E 0020             		move.b	#$E,$20(a0)
0000EBBC 4268 0010                  		clr.w	$10(a0)
0000EBC0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EBC6 117C 0002 0025             		move.b	#2,$25(a0)
0000EBCC 08E8 0007 0032             		bset	#7,$32(a0)
0000EBD2                            
0000EBD2                            locret_E188:
0000EBD2 4E75                       		rts	
0000EBD4                            ; End of function Obj43_Stop
0000EBD4                            
0000EBD4                            ; ===========================================================================
0000EBD4                            Ani_obj43:
0000EBD4                            	include "_anim\obj43.asm"
0000EBD4                            ; ---------------------------------------------------------------------------
0000EBD4                            ; Animation script - Roller enemy
0000EBD4                            ; ---------------------------------------------------------------------------
0000EBD4 0000                       		dc.w byte_E190-Ani_obj43
0000EBD6 0000                       		dc.w byte_E196-Ani_obj43
0000EBD8 0000                       		dc.w byte_E19C-Ani_obj43
0000EBDA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EBE0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EBE6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EBEC 00                         		even
0000EBEC 00                         		even
0000EBEC                            
0000EBEC                            ; ---------------------------------------------------------------------------
0000EBEC                            ; Sprite mappings - Roller enemy (SYZ)
0000EBEC                            ; ---------------------------------------------------------------------------
0000EBEC                            Map_obj43:
0000EBEC                            	include "_maps\obj43.asm"
0000EBEC                            Map_61da:
0000EBEC 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EBEE 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EBF0 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EBF2 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EBF4 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EBF6 02                         Map_61da_A: 	dc.b $2
0000EBF7 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBFC F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EC01 02                         Map_61da_15: 	dc.b $2
0000EC02 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EC07 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EC0C 01                         Map_61da_20: 	dc.b $1
0000EC0D F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EC12 01                         Map_61da_26: 	dc.b $1
0000EC13 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EC18 01                         Map_61da_2C: 	dc.b $1
0000EC19 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EC1E                            	even
0000EC1E                            	even
0000EC1E                            
0000EC1E                            ; ===========================================================================
0000EC1E                            ; ---------------------------------------------------------------------------
0000EC1E                            ; Object 44 - walls (GHZ)
0000EC1E                            ; ---------------------------------------------------------------------------
0000EC1E                            
0000EC1E                            Obj44:					; XREF: Obj_Index
0000EC1E 7000                       		moveq	#0,d0
0000EC20 1028 0024                  		move.b	$24(a0),d0
0000EC24 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EC28 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EC2C                            ; ===========================================================================
0000EC2C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EC2E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EC30 0000                       		dc.w Obj44_Display-Obj44_Index
0000EC32                            ; ===========================================================================
0000EC32                            
0000EC32                            Obj44_Main:				; XREF: Obj44_Index
0000EC32 5428 0024                  		addq.b	#2,$24(a0)
0000EC36 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EC3E 317C 434C 0002             		move.w	#$434C,2(a0)
0000EC44 0028 0004 0001             		ori.b	#4,1(a0)
0000EC4A 117C 0008 0019             		move.b	#8,$19(a0)
0000EC50 117C 0006 0018             		move.b	#6,$18(a0)
0000EC56 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC5C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC62 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC64 5428 0024                  		addq.b	#2,$24(a0)
0000EC68 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC6A                            ; ===========================================================================
0000EC6A                            
0000EC6A                            Obj44_Solid:				; XREF: Obj44_Index
0000EC6A 323C 0013                  		move.w	#$13,d1
0000EC6E 343C 0028                  		move.w	#$28,d2
0000EC72 6100 A684                  		bsr.w	Obj44_SolidWall
0000EC76                            
0000EC76                            Obj44_Display:				; XREF: Obj44_Index
0000EC76 6100 F3DA                  		bsr.w	DisplaySprite
0000EC7A 3028 0008                  		move.w	8(a0),d0
0000EC7E 0240 FF80                  		andi.w	#$FF80,d0
0000EC82 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC86 0441 0080                  		subi.w	#$80,d1
0000EC8A 0241 FF80                  		andi.w	#$FF80,d1
0000EC8E 9041                       		sub.w	d1,d0
0000EC90 0C40 0280                  		cmpi.w	#$280,d0
0000EC94 6200 F3F8                  		bhi.w	DeleteObject
0000EC98 4E75                       		rts	
0000EC9A                            ; ===========================================================================
0000EC9A                            ; ---------------------------------------------------------------------------
0000EC9A                            ; Sprite mappings - walls (GHZ)
0000EC9A                            ; ---------------------------------------------------------------------------
0000EC9A                            Map_obj44:
0000EC9A                            	include "_maps\obj44.asm"
0000EC9A                            ; ---------------------------------------------------------------------------
0000EC9A                            ; Sprite mappings - walls (GHZ)
0000EC9A                            ; ---------------------------------------------------------------------------
0000EC9A 0000                       		dc.w byte_E256-Map_obj44
0000EC9C 0000                       		dc.w byte_E26B-Map_obj44
0000EC9E 0000                       		dc.w byte_E280-Map_obj44
0000ECA0 04                         byte_E256:	dc.b 4
0000ECA1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ECA6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECAB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECB0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECB5 04                         byte_E26B:	dc.b 4
0000ECB6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ECBB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECC0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECC5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECCA 04                         byte_E280:	dc.b 4
0000ECCB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ECD0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ECD5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ECDA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ECE0 00                         		even
0000ECE0 00                         		even
0000ECE0                            
0000ECE0                            ; ===========================================================================
0000ECE0                            ; ---------------------------------------------------------------------------
0000ECE0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ECE0                            ; ---------------------------------------------------------------------------
0000ECE0                            
0000ECE0                            Obj13:					; XREF: Obj_Index
0000ECE0 7000                       		moveq	#0,d0
0000ECE2 1028 0024                  		move.b	$24(a0),d0
0000ECE6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ECEA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ECEE 6000 0000                  		bra.w	Obj14_ChkDel
0000ECF2                            ; ===========================================================================
0000ECF2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ECF4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ECF6                            ; ---------------------------------------------------------------------------
0000ECF6                            ;
0000ECF6                            ; Lava ball production rates
0000ECF6                            ;
0000ECF6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECFC                            ; ===========================================================================
0000ECFC                            
0000ECFC                            Obj13_Main:				; XREF: Obj13_Index
0000ECFC 5428 0024                  		addq.b	#2,$24(a0)
0000ED00 1028 0028                  		move.b	$28(a0),d0
0000ED04 E848                       		lsr.w	#4,d0
0000ED06 0240 000F                  		andi.w	#$F,d0
0000ED0A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ED10 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ED16 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ED1C                            
0000ED1C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ED1C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ED20 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ED22 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ED28 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ED2C 6600                       		bne.s	locret_E302
0000ED2E 6100 F7A8                  		bsr.w	SingleObjLoad
0000ED32 6600                       		bne.s	locret_E302
0000ED34 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ED38 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED44 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ED4A                            
0000ED4A                            locret_E302:
0000ED4A 4E75                       		rts	
0000ED4C                            ; ===========================================================================
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C                            ; Object 14 - lava balls (MZ, SLZ)
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C                            
0000ED4C                            Obj14:					; XREF: Obj_Index
0000ED4C 7000                       		moveq	#0,d0
0000ED4E 1028 0024                  		move.b	$24(a0),d0
0000ED52 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ED56 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED5A 6000 F2F6                  		bra.w	DisplaySprite
0000ED5E                            ; ===========================================================================
0000ED5E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED60 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED62 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED64                            
0000ED64 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED6E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED76                            ; ===========================================================================
0000ED76                            
0000ED76                            Obj14_Main:				; XREF: Obj14_Index
0000ED76 5428 0024                  		addq.b	#2,$24(a0)
0000ED7A 117C 0008 0016             		move.b	#8,$16(a0)
0000ED80 117C 0008 0017             		move.b	#8,$17(a0)
0000ED86 217C 0000 BC9E 0004        		move.l	#Map_obj14,4(a0)
0000ED8E 317C 0345 0002             		move.w	#$345,2(a0)
0000ED94 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED9A 6600                       		bne.s	loc_E35A
0000ED9C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EDA2                            
0000EDA2                            loc_E35A:
0000EDA2 117C 0004 0001             		move.b	#4,1(a0)
0000EDA8 117C 0003 0018             		move.b	#3,$18(a0)
0000EDAE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EDB4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDBA 4A28 0029                  		tst.b	$29(a0)
0000EDBE 6700                       		beq.s	Obj14_SetSpeed
0000EDC0 5428 0018                  		addq.b	#2,$18(a0)
0000EDC4                            
0000EDC4                            Obj14_SetSpeed:
0000EDC4 7000                       		moveq	#0,d0
0000EDC6 1028 0028                  		move.b	$28(a0),d0
0000EDCA D040                       		add.w	d0,d0
0000EDCC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EDD2 117C 0008 0019             		move.b	#8,$19(a0)
0000EDD8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EDDE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EDE0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDE6 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EDEC 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EDF2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EDF8                            
0000EDF8                            Obj14_PlaySnd:
0000EDF8 303C 00AE                  		move.w	#$AE,d0
0000EDFC 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EE02                            
0000EE02                            Obj14_Action:				; XREF: Obj14_Index
0000EE02 7000                       		moveq	#0,d0
0000EE04 1028 0028                  		move.b	$28(a0),d0
0000EE08 D040                       		add.w	d0,d0
0000EE0A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EE0E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EE12 6100 F218                  		bsr.w	SpeedToPos
0000EE16 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EE1C 6100 C282                  		bsr.w	AnimateSprite
0000EE20                            
0000EE20                            Obj14_ChkDel:				; XREF: Obj13
0000EE20 3028 0008                  		move.w	8(a0),d0
0000EE24 0240 FF80                  		andi.w	#$FF80,d0
0000EE28 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE2C 0441 0080                  		subi.w	#$80,d1
0000EE30 0241 FF80                  		andi.w	#$FF80,d1
0000EE34 9041                       		sub.w	d1,d0
0000EE36 0C40 0280                  		cmpi.w	#$280,d0
0000EE3A 6200 F252                  		bhi.w	DeleteObject
0000EE3E 4E75                       		rts	
0000EE40                            ; ===========================================================================
0000EE40 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE44 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE48 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EE4C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EE50 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EE52                            ; ===========================================================================
0000EE52                            ; lavaball types 00-03 fly up and fall back down
0000EE52                            
0000EE52                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EE52 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EE58 3028 0030                  		move.w	$30(a0),d0
0000EE5C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE60 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE62 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE66                            
0000EE66                            loc_E41E:
0000EE66 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE6C 4A68 0012                  		tst.w	$12(a0)
0000EE70 6A00                       		bpl.s	locret_E430
0000EE72 08E8 0001 0022             		bset	#1,$22(a0)
0000EE78                            
0000EE78                            locret_E430:
0000EE78 4E75                       		rts	
0000EE7A                            ; ===========================================================================
0000EE7A                            ; lavaball type	04 flies up until it hits the ceiling
0000EE7A                            
0000EE7A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE7A 08E8 0001 0022             		bset	#1,$22(a0)
0000EE80 6100 0000                  		bsr.w	ObjHitCeiling
0000EE84 4A41                       		tst.w	d1
0000EE86 6A00                       		bpl.s	locret_E452
0000EE88 117C 0008 0028             		move.b	#8,$28(a0)
0000EE8E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE94 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE9A                            
0000EE9A                            locret_E452:
0000EE9A 4E75                       		rts	
0000EE9C                            ; ===========================================================================
0000EE9C                            ; lavaball type	05 falls down until it hits the	floor
0000EE9C                            
0000EE9C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE9C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EEA2 6100 0000                  		bsr.w	ObjHitFloor
0000EEA6 4A41                       		tst.w	d1
0000EEA8 6A00                       		bpl.s	locret_E474
0000EEAA 117C 0008 0028             		move.b	#8,$28(a0)
0000EEB0 117C 0001 001C             		move.b	#1,$1C(a0)
0000EEB6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EEBC                            
0000EEBC                            locret_E474:
0000EEBC 4E75                       		rts	
0000EEBE                            ; ===========================================================================
0000EEBE                            ; lavaball types 06-07 move sideways
0000EEBE                            
0000EEBE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EEBE 08E8 0000 0022             		bset	#0,$22(a0)
0000EEC4 76F8                       		moveq	#-8,d3
0000EEC6 6100 0000                  		bsr.w	ObjHitWallLeft
0000EECA 4A41                       		tst.w	d1
0000EECC 6A00                       		bpl.s	locret_E498
0000EECE 117C 0008 0028             		move.b	#8,$28(a0)
0000EED4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEDA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEE0                            
0000EEE0                            locret_E498:
0000EEE0 4E75                       		rts	
0000EEE2                            ; ===========================================================================
0000EEE2                            
0000EEE2                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EEE2 08A8 0000 0022             		bclr	#0,$22(a0)
0000EEE8 7608                       		moveq	#8,d3
0000EEEA 6100 0000                  		bsr.w	ObjHitWallRight
0000EEEE 4A41                       		tst.w	d1
0000EEF0 6A00                       		bpl.s	locret_E4BC
0000EEF2 117C 0008 0028             		move.b	#8,$28(a0)
0000EEF8 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEFE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EF04                            
0000EF04                            locret_E4BC:
0000EF04 4E75                       		rts	
0000EF06                            ; ===========================================================================
0000EF06                            
0000EF06                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EF06 4E75                       		rts	
0000EF08                            ; ===========================================================================
0000EF08                            
0000EF08                            Obj14_Delete:				; XREF: Obj14_Index
0000EF08 6000 F184                  		bra.w	DeleteObject
0000EF0C                            ; ===========================================================================
0000EF0C                            Ani_obj14:
0000EF0C                            	include "_anim\obj14.asm"
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C                            ; Animation script - lava balls
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C 0000                       		dc.w byte_E4CC-Ani_obj14
0000EF0E 0000                       		dc.w byte_E4D2-Ani_obj14
0000EF10 0000                       		dc.w byte_E4D6-Ani_obj14
0000EF12 0000                       		dc.w byte_E4DC-Ani_obj14
0000EF14 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EF1A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EF1E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EF24 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EF28                            		even
0000EF28                            		even
0000EF28                            
0000EF28                            ; ===========================================================================
0000EF28                            ; ---------------------------------------------------------------------------
0000EF28                            ; Object 6D - flame thrower (SBZ)
0000EF28                            ; ---------------------------------------------------------------------------
0000EF28                            
0000EF28                            Obj6D:					; XREF: Obj_Index
0000EF28 7000                       		moveq	#0,d0
0000EF2A 1028 0024                  		move.b	$24(a0),d0
0000EF2E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EF32 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EF36                            ; ===========================================================================
0000EF36 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EF38 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EF3A                            ; ===========================================================================
0000EF3A                            
0000EF3A                            Obj6D_Main:				; XREF: Obj6D_Index
0000EF3A 5428 0024                  		addq.b	#2,$24(a0)
0000EF3E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EF46 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EF4C 0028 0004 0001             		ori.b	#4,1(a0)
0000EF52 117C 0001 0018             		move.b	#1,$18(a0)
0000EF58 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF5E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF64 1028 0028                  		move.b	$28(a0),d0
0000EF68 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF6C D040                       		add.w	d0,d0		; multiply by 2
0000EF6E 3140 0030                  		move.w	d0,$30(a0)
0000EF72 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF76 1028 0028                  		move.b	$28(a0),d0
0000EF7A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF7E EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF80 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF84 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF8A 0828 0001 0022             		btst	#1,$22(a0)
0000EF90 6700                       		beq.s	Obj6D_Action
0000EF92 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF98 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF9E                            
0000EF9E                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF9E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EFA2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EFA4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EFAA 0868 0000 001C             		bchg	#0,$1C(a0)
0000EFB0 6700                       		beq.s	loc_E57A
0000EFB2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EFB8 303C 00B3                  		move.w	#$B3,d0
0000EFBC 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play flame sound
0000EFC2                            
0000EFC2                            loc_E57A:
0000EFC2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EFC8 6100 C0D6                  		bsr.w	AnimateSprite
0000EFCC 117C 0000 0020             		move.b	#0,$20(a0)
0000EFD2 1028 0036                  		move.b	$36(a0),d0
0000EFD6 B028 001A                  		cmp.b	$1A(a0),d0
0000EFDA 6600                       		bne.s	Obj6D_ChkDel
0000EFDC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EFE2                            
0000EFE2                            Obj6D_ChkDel:
0000EFE2 3028 0008                  		move.w	8(a0),d0
0000EFE6 0240 FF80                  		andi.w	#$FF80,d0
0000EFEA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFEE 0441 0080                  		subi.w	#$80,d1
0000EFF2 0241 FF80                  		andi.w	#$FF80,d1
0000EFF6 9041                       		sub.w	d1,d0
0000EFF8 0C40 0280                  		cmpi.w	#$280,d0
0000EFFC 6200 F090                  		bhi.w	DeleteObject
0000F000 6000 F050                  		bra.w	DisplaySprite
0000F004                            ; ===========================================================================
0000F004                            Ani_obj6D:
0000F004                            	include "_anim\obj6D.asm"
0000F004                            ; ---------------------------------------------------------------------------
0000F004                            ; Animation script - flamethrower (SBZ)
0000F004                            ; ---------------------------------------------------------------------------
0000F004 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F006 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F008 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F00A 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F00C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F01A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F024 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F032 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F03C                            		even
0000F03C                            		even
0000F03C                            
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C                            ; Sprite mappings - flame thrower (SBZ)
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C                            Map_obj6D:
0000F03C                            	include "_maps\obj6D.asm"
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C                            ; Sprite mappings - flame thrower (SBZ)
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F040 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F044 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F048 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F04C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F050 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F054 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F058 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F05C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F060 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F064 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F068 01                         byte_E620:	dc.b 1
0000F069 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F06E 02                         byte_E626:	dc.b 2
0000F06F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F074 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F079 02                         byte_E631:	dc.b 2
0000F07A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F07F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F084 03                         byte_E63C:	dc.b 3
0000F085 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F08A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F08F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F094 03                         byte_E64C:	dc.b 3
0000F095 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F09A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F09F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0A4 04                         byte_E65C:	dc.b 4
0000F0A5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0AA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0AF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0B4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0B9 04                         byte_E671:	dc.b 4
0000F0BA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0C4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0C9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0CE 05                         byte_E686:	dc.b 5
0000F0CF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F0D4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0D9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0E8 05                         byte_E6A0:	dc.b 5
0000F0E9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0EE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0F8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0FD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F102 06                         byte_E6BA:	dc.b 6
0000F103 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F108 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F10D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F112 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F117 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F11C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F121 06                         byte_E6D9:	dc.b 6
0000F122 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F127 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F12C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F131 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F136 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F13B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F140 01                         byte_E6F8:	dc.b 1
0000F141 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F146 02                         byte_E6FE:	dc.b 2
0000F147 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F14C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F151 02                         byte_E709:	dc.b 2
0000F152 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F157 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F15C 03                         byte_E714:	dc.b 3
0000F15D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F162 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F167 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F16C 03                         byte_E724:	dc.b 3
0000F16D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F172 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F177 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F17C 04                         byte_E734:	dc.b 4
0000F17D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F182 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F187 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F18C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F191 04                         byte_E749:	dc.b 4
0000F192 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F197 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F19C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1A1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1A6 05                         byte_E75E:	dc.b 5
0000F1A7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F1AC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1B1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1B6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1BB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1C0 05                         byte_E778:	dc.b 5
0000F1C1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1C6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1CB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1D0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1D5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1DA 06                         byte_E792:	dc.b 6
0000F1DB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1E0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1E5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1EA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1EF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1F4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1F9 06                         byte_E7B1:	dc.b 6
0000F1FA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1FF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F204 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F209 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F20E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F213 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F218                            		even
0000F218                            		even
0000F218                            
0000F218                            ; ===========================================================================
0000F218                            ; ---------------------------------------------------------------------------
0000F218                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F218                            ; ---------------------------------------------------------------------------
0000F218                            
0000F218                            Obj46:					; XREF: Obj_Index
0000F218 7000                       		moveq	#0,d0
0000F21A 1028 0024                  		move.b	$24(a0),d0
0000F21E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F222 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F226                            ; ===========================================================================
0000F226 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F228 0000                       		dc.w Obj46_Action-Obj46_Index
0000F22A                            ; ===========================================================================
0000F22A                            
0000F22A                            Obj46_Main:				; XREF: Obj46_Index
0000F22A 5428 0024                  		addq.b	#2,$24(a0)
0000F22E 117C 000F 0016             		move.b	#$F,$16(a0)
0000F234 117C 000F 0017             		move.b	#$F,$17(a0)
0000F23A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F242 317C 4000 0002             		move.w	#$4000,2(a0)
0000F248 117C 0004 0001             		move.b	#4,1(a0)
0000F24E 117C 0003 0018             		move.b	#3,$18(a0)
0000F254 117C 0010 0019             		move.b	#$10,$19(a0)
0000F25A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F260 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F266                            
0000F266                            Obj46_Action:				; XREF: Obj46_Index
0000F266 4A28 0001                  		tst.b	1(a0)
0000F26A 6A00                       		bpl.s	Obj46_ChkDel
0000F26C 7000                       		moveq	#0,d0
0000F26E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F272 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F276 D040                       		add.w	d0,d0
0000F278 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F27C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F280 323C 001B                  		move.w	#$1B,d1
0000F284 343C 0010                  		move.w	#$10,d2
0000F288 363C 0011                  		move.w	#$11,d3
0000F28C 3828 0008                  		move.w	8(a0),d4
0000F290 6100 0000                  		bsr.w	SolidObject
0000F294                            
0000F294                            Obj46_ChkDel:
0000F294 6100 EDBC                  		bsr.w	DisplaySprite
0000F298 3028 0008                  		move.w	8(a0),d0
0000F29C 0240 FF80                  		andi.w	#$FF80,d0
0000F2A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2A4 0441 0080                  		subi.w	#$80,d1
0000F2A8 0241 FF80                  		andi.w	#$FF80,d1
0000F2AC 9041                       		sub.w	d1,d0
0000F2AE 0C40 0280                  		cmpi.w	#$280,d0
0000F2B2 6200 EDDA                  		bhi.w	DeleteObject
0000F2B6 4E75                       		rts	
0000F2B8                            ; ===========================================================================
0000F2B8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F2BA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F2BC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F2BE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F2C0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F2C2                            ; ===========================================================================
0000F2C2                            
0000F2C2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F2C2 4E75                       		rts	
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F2C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2C8 9068 0008                  		sub.w	8(a0),d0
0000F2CC 6400                       		bcc.s	loc_E888
0000F2CE 4440                       		neg.w	d0
0000F2D0                            
0000F2D0                            loc_E888:
0000F2D0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F2D4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F2D6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F2DC                            
0000F2DC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F2DC 7000                       		moveq	#0,d0
0000F2DE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F2E2 0828 0003 0028             		btst	#3,$28(a0)
0000F2E8 6700                       		beq.s	loc_E8A8
0000F2EA 4440                       		neg.w	d0
0000F2EC 0640 0010                  		addi.w	#$10,d0
0000F2F0                            
0000F2F0                            loc_E8A8:
0000F2F0 3228 0030                  		move.w	$30(a0),d1
0000F2F4 9240                       		sub.w	d0,d1
0000F2F6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2FA 4E75                       		rts	
0000F2FC                            ; ===========================================================================
0000F2FC                            
0000F2FC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2FC 6100 ED2E                  		bsr.w	SpeedToPos
0000F300 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F306 6100 0000                  		bsr.w	ObjHitFloor
0000F30A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F30C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F310 D368 000C                  		add.w	d1,$C(a0)
0000F314 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F318 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F31E 117C 0004 0028             		move.b	#4,$28(a0)
0000F324 3011                       		move.w	(a1),d0
0000F326 0240 03FF                  		andi.w	#$3FF,d0
0000F32A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F32E 6400                       		bcc.s	locret_E8EE
0000F330 117C 0000 0028             		move.b	#0,$28(a0)
0000F336                            
0000F336                            locret_E8EE:
0000F336 4E75                       		rts	
0000F338                            ; ===========================================================================
0000F338                            
0000F338                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F338 7000                       		moveq	#0,d0
0000F33A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F33E E648                       		lsr.w	#3,d0
0000F340 3228 0030                  		move.w	$30(a0),d1
0000F344 9240                       		sub.w	d0,d1
0000F346 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F34A 4E75                       		rts	
0000F34C                            ; ===========================================================================
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            Map_obj46:
0000F34C                            	include "_maps\obj46.asm"
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C 0000                       		dc.w byte_E906-Map_obj46
0000F34E 01                         byte_E906:	dc.b 1
0000F34F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F354                            		even
0000F354                            		even
0000F354                            
0000F354                            ; ===========================================================================
0000F354                            ; ---------------------------------------------------------------------------
0000F354                            ; Object 12 - lamp (SYZ)
0000F354                            ; ---------------------------------------------------------------------------
0000F354                            
0000F354                            Obj12:					; XREF: Obj_Index
0000F354 7000                       		moveq	#0,d0
0000F356 1028 0024                  		move.b	$24(a0),d0
0000F35A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F35E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F362                            ; ===========================================================================
0000F362 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F364 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F366                            ; ===========================================================================
0000F366                            
0000F366                            Obj12_Main:				; XREF: Obj12_Index
0000F366 5428 0024                  		addq.b	#2,$24(a0)
0000F36A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F372 317C 0000 0002             		move.w	#0,2(a0)
0000F378 117C 0004 0001             		move.b	#4,1(a0)
0000F37E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F384 117C 0006 0018             		move.b	#6,$18(a0)
0000F38A                            
0000F38A                            Obj12_Animate:				; XREF: Obj12_Index
0000F38A 5328 001E                  		subq.b	#1,$1E(a0)
0000F38E 6A00                       		bpl.s	Obj12_ChkDel
0000F390 117C 0007 001E             		move.b	#7,$1E(a0)
0000F396 5228 001A                  		addq.b	#1,$1A(a0)
0000F39A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F3A0 6500                       		bcs.s	Obj12_ChkDel
0000F3A2 117C 0000 001A             		move.b	#0,$1A(a0)
0000F3A8                            
0000F3A8                            Obj12_ChkDel:
0000F3A8 3028 0008                  		move.w	8(a0),d0
0000F3AC 0240 FF80                  		andi.w	#$FF80,d0
0000F3B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3B4 0441 0080                  		subi.w	#$80,d1
0000F3B8 0241 FF80                  		andi.w	#$FF80,d1
0000F3BC 9041                       		sub.w	d1,d0
0000F3BE 0C40 0280                  		cmpi.w	#$280,d0
0000F3C2 6200 ECCA                  		bhi.w	DeleteObject
0000F3C6 6000 EC8A                  		bra.w	DisplaySprite
0000F3CA                            ; ===========================================================================
0000F3CA                            ; ---------------------------------------------------------------------------
0000F3CA                            ; Sprite mappings - lamp (SYZ)
0000F3CA                            ; ---------------------------------------------------------------------------
0000F3CA                            Map_obj12:
0000F3CA                            	include "_maps\obj12.asm"
0000F3CA                            ; ---------------------------------------------------------------------------
0000F3CA                            ; Sprite mappings - lamp (SYZ)
0000F3CA                            ; ---------------------------------------------------------------------------
0000F3CA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F3CE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F3D2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F3D6 02                         byte_E98E:	dc.b 2
0000F3D7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F3DC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F3E1 02                         byte_E999:	dc.b 2
0000F3E2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F3E7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F3EC 02                         byte_E9A4:	dc.b 2
0000F3ED F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F3F2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F3F7 02                         byte_E9AF:	dc.b 2
0000F3F8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3FD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F402 02                         byte_E9BA:	dc.b 2
0000F403 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F408 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F40D 02                         byte_E9C5:	dc.b 2
0000F40E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F413 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F418                            		even
0000F418                            		even
0000F418                            
0000F418                            ; ===========================================================================
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Object 47 - pinball bumper (SYZ)
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            
0000F418                            Obj47:					; XREF: Obj_Index
0000F418 7000                       		moveq	#0,d0
0000F41A 1028 0024                  		move.b	$24(a0),d0
0000F41E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F422 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F426                            ; ===========================================================================
0000F426 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F428 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F42A                            ; ===========================================================================
0000F42A                            
0000F42A                            Obj47_Main:				; XREF: Obj47_Index
0000F42A 5428 0024                  		addq.b	#2,$24(a0)
0000F42E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F436 317C 0380 0002             		move.w	#$380,2(a0)
0000F43C 117C 0004 0001             		move.b	#4,1(a0)
0000F442 117C 0010 0019             		move.b	#$10,$19(a0)
0000F448 117C 0001 0018             		move.b	#1,$18(a0)
0000F44E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F454                            
0000F454                            Obj47_Hit:				; XREF: Obj47_Index
0000F454 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F458 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F45C 4228 0021                  		clr.b	$21(a0)
0000F460 43F8 D000                  		lea	($FFFFD000).w,a1
0000F464 3228 0008                  		move.w	8(a0),d1
0000F468 3428 000C                  		move.w	$C(a0),d2
0000F46C 9269 0008                  		sub.w	8(a1),d1
0000F470 9469 000C                  		sub.w	$C(a1),d2
0000F474 4EB9 0000 3008             		jsr	(CalcAngle).l
0000F47A 4EB9 0000 2D3A             		jsr	(CalcSine).l
0000F480 C3FC F900                  		muls.w	#-$700,d1
0000F484 E081                       		asr.l	#8,d1
0000F486 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F48A C1FC F900                  		muls.w	#-$700,d0
0000F48E E080                       		asr.l	#8,d0
0000F490 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F494 08E9 0001 0022             		bset	#1,$22(a1)
0000F49A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F4A0 08A9 0005 0022             		bclr	#5,$22(a1)
0000F4A6 4229 003C                  		clr.b	$3C(a1)
0000F4AA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F4B0 303C 00B4                  		move.w	#$B4,d0
0000F4B4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F4BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4BE 7000                       		moveq	#0,d0
0000F4C0 1028 0023                  		move.b	$23(a0),d0
0000F4C4 6700                       		beq.s	Obj47_Score
0000F4C6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F4CC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F4CE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F4D2                            
0000F4D2                            Obj47_Score:
0000F4D2 7001                       		moveq	#1,d0
0000F4D4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F4DA 6100 EFFC                  		bsr.w	SingleObjLoad
0000F4DE 6600                       		bne.s	Obj47_Display
0000F4E0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F4E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4F0 137C 0004 001A             		move.b	#4,$1A(a1)
0000F4F6                            
0000F4F6                            Obj47_Display:
0000F4F6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4FC 6100 BBA2                  		bsr.w	AnimateSprite
0000F500 3028 0008                  		move.w	8(a0),d0
0000F504 0240 FF80                  		andi.w	#$FF80,d0
0000F508 3238 F700                  		move.w	($FFFFF700).w,d1
0000F50C 0441 0080                  		subi.w	#$80,d1
0000F510 0241 FF80                  		andi.w	#$FF80,d1
0000F514 9041                       		sub.w	d1,d0
0000F516 0C40 0280                  		cmpi.w	#$280,d0
0000F51A 6200                       		bhi.s	Obj47_ChkHit
0000F51C 6000 EB34                  		bra.w	DisplaySprite
0000F520                            ; ===========================================================================
0000F520                            
0000F520                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F520 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F524 7000                       		moveq	#0,d0
0000F526 1028 0023                  		move.b	$23(a0),d0
0000F52A 6700                       		beq.s	Obj47_Delete
0000F52C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F532                            
0000F532                            Obj47_Delete:
0000F532 6000 EB5A                  		bra.w	DeleteObject
0000F536                            ; ===========================================================================
0000F536                            Ani_obj47:
0000F536                            	include "_anim\obj47.asm"
0000F536                            ; ---------------------------------------------------------------------------
0000F536                            ; Animation script - flamethrower (SBZ)
0000F536                            ; ---------------------------------------------------------------------------
0000F536 0000                       		dc.w byte_EAF4-Ani_obj47
0000F538 0000                       		dc.w byte_EAF8-Ani_obj47
0000F53A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F53E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F546                            		even
0000F546                            		even
0000F546                            
0000F546                            ; ---------------------------------------------------------------------------
0000F546                            ; Sprite mappings - pinball bumper (SYZ)
0000F546                            ; ---------------------------------------------------------------------------
0000F546                            Map_obj47:
0000F546                            	include "_maps\obj47.asm"
0000F546                            ; ---------------------------------------------------------------------------
0000F546                            ; Sprite mappings - pinball bumper (SYZ)
0000F546                            ; ---------------------------------------------------------------------------
0000F546 0000                       		dc.w byte_EB06-Map_obj47
0000F548 0000                       		dc.w byte_EB11-Map_obj47
0000F54A 0000                       		dc.w byte_EB1C-Map_obj47
0000F54C 02                         byte_EB06:	dc.b 2
0000F54D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F552 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F557 02                         byte_EB11:	dc.b 2
0000F558 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F55D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F562 02                         byte_EB1C:	dc.b 2
0000F563 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F568 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F56E 00                         		even
0000F56E 00                         		even
0000F56E                            
0000F56E                            ; ===========================================================================
0000F56E                            ; ---------------------------------------------------------------------------
0000F56E                            ; Object 0D - signpost at the end of a level
0000F56E                            ; ---------------------------------------------------------------------------
0000F56E                            
0000F56E                            Obj0D:					; XREF: Obj_Index
0000F56E 7000                       		moveq	#0,d0
0000F570 1028 0024                  		move.b	$24(a0),d0
0000F574 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F578 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F57C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F582 6100 BB1C                  		bsr.w	AnimateSprite
0000F586 6100 EACA                  		bsr.w	DisplaySprite
0000F58A 3028 0008                  		move.w	8(a0),d0
0000F58E 0240 FF80                  		andi.w	#$FF80,d0
0000F592 3238 F700                  		move.w	($FFFFF700).w,d1
0000F596 0441 0080                  		subi.w	#$80,d1
0000F59A 0241 FF80                  		andi.w	#$FF80,d1
0000F59E 9041                       		sub.w	d1,d0
0000F5A0 0C40 0280                  		cmpi.w	#$280,d0
0000F5A4 6200 EAE8                  		bhi.w	DeleteObject
0000F5A8 4E75                       		rts	
0000F5AA                            ; ===========================================================================
0000F5AA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F5AC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F5AE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F5B0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F5B2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F5B4                            ; ===========================================================================
0000F5B4                            
0000F5B4                            Obj0D_Main:				; XREF: Obj0D_Index
0000F5B4 5428 0024                  		addq.b	#2,$24(a0)
0000F5B8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F5C0 317C 0680 0002             		move.w	#$680,2(a0)
0000F5C6 117C 0004 0001             		move.b	#4,1(a0)
0000F5CC 117C 0018 0019             		move.b	#$18,$19(a0)
0000F5D2 117C 0004 0018             		move.b	#4,$18(a0)
0000F5D8                            
0000F5D8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F5D8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F5DC 9068 0008                  		sub.w	8(a0),d0
0000F5E0 6500                       		bcs.s	locret_EBBA
0000F5E2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F5E6 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F5E8 303C 00CF                  		move.w	#$CF,d0
0000F5EC 4EB9 0000 159A             		jsr	(PlaySound).l	; play signpost	sound
0000F5F2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F5F6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5FC 5428 0024                  		addq.b	#2,$24(a0)
0000F600                            
0000F600                            locret_EBBA:
0000F600 4E75                       		rts	
0000F602                            ; ===========================================================================
0000F602                            
0000F602                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F602 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F606 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F608 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F60E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F612 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F618 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F61A 5428 0024                  		addq.b	#2,$24(a0)
0000F61E                            
0000F61E                            Obj0D_Sparkle:
0000F61E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F622 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F624 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F62A 7000                       		moveq	#0,d0
0000F62C 1028 0034                  		move.b	$34(a0),d0
0000F630 5428 0034                  		addq.b	#2,$34(a0)
0000F634 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F63A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F63E 6100 EE98                  		bsr.w	SingleObjLoad
0000F642 6600                       		bne.s	locret_EC42
0000F644 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F648 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F64E 101A                       		move.b	(a2)+,d0
0000F650 4880                       		ext.w	d0
0000F652 D068 0008                  		add.w	8(a0),d0
0000F656 3340 0008                  		move.w	d0,8(a1)
0000F65A 101A                       		move.b	(a2)+,d0
0000F65C 4880                       		ext.w	d0
0000F65E D068 000C                  		add.w	$C(a0),d0
0000F662 3340 000C                  		move.w	d0,$C(a1)
0000F666 237C 0000 A83E 0004        		move.l	#Map_obj25,4(a1)
0000F66E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F674 137C 0004 0001             		move.b	#4,1(a1)
0000F67A 137C 0002 0018             		move.b	#2,$18(a1)
0000F680 137C 0008 0019             		move.b	#8,$19(a1)
0000F686                            
0000F686                            locret_EC42:
0000F686 4E75                       		rts	
0000F688                            ; ===========================================================================
0000F688 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F68A 0808                       		dc.b	8,   8
0000F68C F000                       		dc.b -$10,   0
0000F68E 18F8                       		dc.b  $18,  -8
0000F690 00F8                       		dc.b	0,  -8
0000F692 1000                       		dc.b  $10,   0
0000F694 E808                       		dc.b -$18,   8
0000F696 1810                       		dc.b  $18, $10
0000F698                            ; ===========================================================================
0000F698                            
0000F698                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F698 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F69C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F6A0 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F6A6 6600                       		bne.s	loc_EC70
0000F6A8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F6AE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F6B4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F6B6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F6BC 6000                       		bra.s	loc_EC70
0000F6BE                            
0000F6BE                            Obj0D_MoveLeft:
0000F6BE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F6C4                            
0000F6C4                            loc_EC70:
0000F6C4 4A38 D000                  		tst.b	($FFFFD000).w
0000F6C8 6700                       		beq.s	loc_EC86
0000F6CA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6CE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F6D2 0641 0128                  		addi.w	#$128,d1
0000F6D6 B041                       		cmp.w	d1,d0
0000F6D8 6500                       		bcs.s	locret_ECEE
0000F6DA                            
0000F6DA                            loc_EC86:
0000F6DA 5428 0024                  		addq.b	#2,$24(a0)
0000F6DE                            
0000F6DE                            ; ---------------------------------------------------------------------------
0000F6DE                            ; Subroutine to	set up bonuses at the end of an	act
0000F6DE                            ; ---------------------------------------------------------------------------
0000F6DE                            
0000F6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6DE                            
0000F6DE                            
0000F6DE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F6DE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F6E2 6600                       		bne.s	locret_ECEE
0000F6E4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F6EA 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F6EE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6F2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F6F8 7010                       		moveq	#$10,d0
0000F6FA 4EB9 0000 17B6             		jsr	(LoadPLC2).l	; load title card patterns
0000F700 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F706 7000                       		moveq	#0,d0
0000F708 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F70C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F710 7200                       		moveq	#0,d1
0000F712 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F716 D041                       		add.w	d1,d0		; add up your time
0000F718 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F71C 7214                       		moveq	#$14,d1
0000F71E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F720 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F722 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F724                            
0000F724                            loc_ECD0:
0000F724 D040                       		add.w	d0,d0
0000F726 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F72C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F730 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F734 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F738 303C 008E                  		move.w	#$8E,d0
0000F73C 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F742                            
0000F742                            locret_ECEE:
0000F742 4E75                       		rts	
0000F744                            ; End of function GotThroughAct
0000F744                            
0000F744                            ; ===========================================================================
0000F744 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F758 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F76E                            ; ===========================================================================
0000F76E                            
0000F76E                            locret_ED1A:				; XREF: Obj0D_Index
0000F76E 4E75                       		rts	
0000F770                            ; ===========================================================================
0000F770                            Ani_obj0D:
0000F770                            	include "_anim\obj0D.asm"
0000F770                            ; ---------------------------------------------------------------------------
0000F770                            ; Animation script - signpost
0000F770                            ; ---------------------------------------------------------------------------
0000F770 0000                       		dc.w byte_ED24-Ani_obj0D
0000F772 0000                       		dc.w byte_ED28-Ani_obj0D
0000F774 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F776 0000                       		dc.w byte_ED34-Ani_obj0D
0000F778 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F77C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F782 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F788 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F78C 00                         		even
0000F78C 00                         		even
0000F78C                            
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C                            ; Sprite mappings - signpost
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C                            Map_obj0D:
0000F78C                            	include "_maps\obj0D.asm"
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C                            ; Sprite mappings - signpost
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F790 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F794 0000                       		dc.w byte_ED73-Map_obj0D
0000F796 03                         byte_ED42:	dc.b 3
0000F797 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F79C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F7A1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7A6 02                         byte_ED52:	dc.b 2
0000F7A7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F7AC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7B1 02                         byte_ED5D:	dc.b 2
0000F7B2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F7B7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7BC 02                         byte_ED68:	dc.b 2
0000F7BD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F7C2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7C7 03                         byte_ED73:	dc.b 3
0000F7C8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F7CD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F7D2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7D8 00                         		even
0000F7D8 00                         		even
0000F7D8                            
0000F7D8                            ; ===========================================================================
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            
0000F7D8                            Obj4C:					; XREF: Obj_Index
0000F7D8 7000                       		moveq	#0,d0
0000F7DA 1028 0024                  		move.b	$24(a0),d0
0000F7DE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F7E2 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F7E6 6000 0000                  		bra.w	Obj4D_ChkDel
0000F7EA                            ; ===========================================================================
0000F7EA 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F7EC 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F7EE 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F7F0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F7F2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F7F4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F7F6                            ; ===========================================================================
0000F7F6                            
0000F7F6                            Obj4C_Main:				; XREF: Obj4C_Index
0000F7F6 5428 0024                  		addq.b	#2,$24(a0)
0000F7FA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F802 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F808 117C 0004 0001             		move.b	#4,1(a0)
0000F80E 117C 0001 0018             		move.b	#1,$18(a0)
0000F814 117C 0038 0019             		move.b	#$38,$19(a0)
0000F81A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F820                            
0000F820                            loc_EDCC:				; XREF: Obj4C_Index
0000F820 5368 0032                  		subq.w	#1,$32(a0)
0000F824 6A00                       		bpl.s	locret_EDF0
0000F826 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F82C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F830 3228 000C                  		move.w	$C(a0),d1
0000F834 B041                       		cmp.w	d1,d0
0000F836 6400                       		bcc.s	locret_EDF0
0000F838 0441 0170                  		subi.w	#$170,d1
0000F83C B041                       		cmp.w	d1,d0
0000F83E 6500                       		bcs.s	locret_EDF0
0000F840 5428 0024                  		addq.b	#2,$24(a0)
0000F844                            
0000F844                            locret_EDF0:
0000F844 4E75                       		rts	
0000F846                            ; ===========================================================================
0000F846                            
0000F846                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F846 5428 0024                  		addq.b	#2,$24(a0)
0000F84A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F84E 6600                       		bne.s	loc_EE18
0000F850 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F854 3368 0008 0008             		move.w	8(a0),8(a1)
0000F85A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F860 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F866 2348 003C                  		move.l	a0,$3C(a1)
0000F86A                            
0000F86A                            loc_EE18:
0000F86A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F870 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F874 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F876 117C 0004 001C             		move.b	#4,$1C(a0)
0000F87C 6000                       		bra.s	Obj4C_Display
0000F87E                            ; ===========================================================================
0000F87E                            
0000F87E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F87E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F882 08E9 0001 0022             		bset	#1,$22(a1)
0000F888 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F88E 6000                       		bra.s	Obj4C_Display
0000F890                            ; ===========================================================================
0000F890                            
0000F890                            loc_EE3E:				; XREF: Obj4C_Index
0000F890 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F894 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F896 5428 0024                  		addq.b	#2,$24(a0)
0000F89A 4E75                       		rts	
0000F89C                            ; ===========================================================================
0000F89C                            
0000F89C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F89C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F8A2 6100 B7FC                  		bsr.w	AnimateSprite
0000F8A6 6100 E7AA                  		bsr.w	DisplaySprite
0000F8AA 4E75                       		rts	
0000F8AC                            ; ===========================================================================
0000F8AC                            
0000F8AC                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F8AC 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8B2 117C 0002 0024             		move.b	#2,$24(a0)
0000F8B8 4A28 0028                  		tst.b	$28(a0)
0000F8BC 6700 E7D0                  		beq.w	DeleteObject
0000F8C0 4E75                       		rts	
0000F8C2                            ; ===========================================================================
0000F8C2                            ; ---------------------------------------------------------------------------
0000F8C2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F8C2                            ; ---------------------------------------------------------------------------
0000F8C2                            
0000F8C2                            Obj4D:					; XREF: Obj_Index
0000F8C2 7000                       		moveq	#0,d0
0000F8C4 1028 0024                  		move.b	$24(a0),d0
0000F8C8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F8CC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F8D0 6000 E780                  		bra.w	DisplaySprite
0000F8D4                            ; ===========================================================================
0000F8D4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F8D6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F8D8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F8DA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F8DC                            
0000F8DC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F8E0                            ; ===========================================================================
0000F8E0                            
0000F8E0                            Obj4D_Main:				; XREF: Obj4D_Index
0000F8E0 5428 0024                  		addq.b	#2,$24(a0)
0000F8E4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F8EA 4A28 0028                  		tst.b	$28(a0)
0000F8EE 6700                       		beq.s	loc_EEA4
0000F8F0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F8F6                            
0000F8F6                            loc_EEA4:
0000F8F6 7000                       		moveq	#0,d0
0000F8F8 1028 0028                  		move.b	$28(a0),d0
0000F8FC D040                       		add.w	d0,d0
0000F8FE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F904 2248                       		movea.l	a0,a1
0000F906 7201                       		moveq	#1,d1
0000F908 6100                       		bsr.s	Obj4D_MakeLava
0000F90A 6000                       		bra.s	loc_EF10
0000F90C                            ; ===========================================================================
0000F90C                            
0000F90C                            Obj4D_Loop:
0000F90C 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F910 6600                       		bne.s	loc_EF0A
0000F912                            
0000F912                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F912 12BC 004D                  		move.b	#$4D,0(a1)
0000F916 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F91E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F924 137C 0004 0001             		move.b	#4,1(a1)
0000F92A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F930 3368 0008 0008             		move.w	8(a0),8(a1)
0000F936 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F93C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F942 137C 0001 0018             		move.b	#1,$18(a1)
0000F948 137C 0005 001C             		move.b	#5,$1C(a1)
0000F94E 4A28 0028                  		tst.b	$28(a0)
0000F952 6700                       		beq.s	loc_EF0A
0000F954 137C 0002 001C             		move.b	#2,$1C(a1)
0000F95A                            
0000F95A                            loc_EF0A:
0000F95A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F95E 4E75                       		rts	
0000F960                            ; ===========================================================================
0000F960                            
0000F960                            loc_EF10:				; XREF: Obj4D_Main
0000F960 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F966 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F96C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F972 137C 0093 0020             		move.b	#$93,$20(a1)
0000F978 137C 0080 0016             		move.b	#$80,$16(a1)
0000F97E 08E9 0004 0001             		bset	#4,1(a1)
0000F984 5829 0024                  		addq.b	#4,$24(a1)
0000F988 2348 003C                  		move.l	a0,$3C(a1)
0000F98C 4A28 0028                  		tst.b	$28(a0)
0000F990 6700                       		beq.s	Obj4D_PlaySnd
0000F992 7200                       		moveq	#0,d1
0000F994 6100 FF76                  		bsr.w	Obj4D_Loop
0000F998 5429 0024                  		addq.b	#2,$24(a1)
0000F99C 08E9 0004 0002             		bset	#4,2(a1)
0000F9A2 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F9A8 137C 0000 0018             		move.b	#0,$18(a1)
0000F9AE 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F9B4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F9BA 117C 0000 0028             		move.b	#0,$28(a0)
0000F9C0                            
0000F9C0                            Obj4D_PlaySnd:
0000F9C0 303C 00C8                  		move.w	#$C8,d0
0000F9C4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F9CA                            
0000F9CA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F9CA 7000                       		moveq	#0,d0
0000F9CC 1028 0028                  		move.b	$28(a0),d0
0000F9D0 D040                       		add.w	d0,d0
0000F9D2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F9D6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F9DA 6100 E650                  		bsr.w	SpeedToPos
0000F9DE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F9E4 6100 B6BA                  		bsr.w	AnimateSprite
0000F9E8                            
0000F9E8                            Obj4D_ChkDel:				; XREF: Obj4C
0000F9E8 3028 0008                  		move.w	8(a0),d0
0000F9EC 0240 FF80                  		andi.w	#$FF80,d0
0000F9F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9F4 0441 0080                  		subi.w	#$80,d1
0000F9F8 0241 FF80                  		andi.w	#$FF80,d1
0000F9FC 9041                       		sub.w	d1,d0
0000F9FE 0C40 0280                  		cmpi.w	#$280,d0
0000FA02 6200 E68A                  		bhi.w	DeleteObject
0000FA06 4E75                       		rts	
0000FA08                            ; ===========================================================================
0000FA08 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FA0A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FA0C                            ; ===========================================================================
0000FA0C                            
0000FA0C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FA0C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA12 3028 0030                  		move.w	$30(a0),d0
0000FA16 B068 000C                  		cmp.w	$C(a0),d0
0000FA1A 6400                       		bcc.s	locret_EFDA
0000FA1C 5828 0024                  		addq.b	#4,$24(a0)
0000FA20 2268 003C                  		movea.l	$3C(a0),a1
0000FA24 137C 0003 001C             		move.b	#3,$1C(a1)
0000FA2A                            
0000FA2A                            locret_EFDA:
0000FA2A 4E75                       		rts	
0000FA2C                            ; ===========================================================================
0000FA2C                            
0000FA2C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FA2C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA32 3028 0030                  		move.w	$30(a0),d0
0000FA36 B068 000C                  		cmp.w	$C(a0),d0
0000FA3A 6400                       		bcc.s	locret_EFFA
0000FA3C 5828 0024                  		addq.b	#4,$24(a0)
0000FA40 2268 003C                  		movea.l	$3C(a0),a1
0000FA44 137C 0001 001C             		move.b	#1,$1C(a1)
0000FA4A                            
0000FA4A                            locret_EFFA:
0000FA4A 4E75                       		rts	
0000FA4C                            ; ===========================================================================
0000FA4C                            
0000FA4C                            loc_EFFC:				; XREF: Obj4D_Index
0000FA4C 2268 003C                  		movea.l	$3C(a0),a1
0000FA50 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FA56 6700 0000                  		beq.w	Obj4D_Delete
0000FA5A 3029 000C                  		move.w	$C(a1),d0
0000FA5E 0640 0060                  		addi.w	#$60,d0
0000FA62 3140 000C                  		move.w	d0,$C(a0)
0000FA66 9068 0030                  		sub.w	$30(a0),d0
0000FA6A 4440                       		neg.w	d0
0000FA6C 7208                       		moveq	#8,d1
0000FA6E 0C40 0040                  		cmpi.w	#$40,d0
0000FA72 6C00                       		bge.s	loc_F026
0000FA74 720B                       		moveq	#$B,d1
0000FA76                            
0000FA76                            loc_F026:
0000FA76 0C40 0080                  		cmpi.w	#$80,d0
0000FA7A 6F00                       		ble.s	loc_F02E
0000FA7C 720E                       		moveq	#$E,d1
0000FA7E                            
0000FA7E                            loc_F02E:
0000FA7E 5328 001E                  		subq.b	#1,$1E(a0)
0000FA82 6A00                       		bpl.s	loc_F04C
0000FA84 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA8A 5228 001B                  		addq.b	#1,$1B(a0)
0000FA8E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA94 6500                       		bcs.s	loc_F04C
0000FA96 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA9C                            
0000FA9C                            loc_F04C:
0000FA9C 1028 001B                  		move.b	$1B(a0),d0
0000FAA0 D001                       		add.b	d1,d0
0000FAA2 1140 001A                  		move.b	d0,$1A(a0)
0000FAA6 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FAAA                            ; ===========================================================================
0000FAAA                            
0000FAAA                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FAAA 6000 E5E2                  		bra.w	DeleteObject
0000FAAE                            ; ===========================================================================
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            ; Object 4E - advancing	wall of	lava (MZ)
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            
0000FAAE                            Obj4E:					; XREF: Obj_Index
0000FAAE 7000                       		moveq	#0,d0
0000FAB0 1028 0024                  		move.b	$24(a0),d0
0000FAB4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FAB8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FABC                            ; ===========================================================================
0000FABC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FABE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FAC0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FAC2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FAC4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FAC6                            ; ===========================================================================
0000FAC6                            
0000FAC6                            Obj4E_Main:				; XREF: Obj4E_Index
0000FAC6 5828 0024                  		addq.b	#4,$24(a0)
0000FACA 2248                       		movea.l	a0,a1
0000FACC 7201                       		moveq	#1,d1
0000FACE 6000                       		bra.s	Obj4E_Main2
0000FAD0                            ; ===========================================================================
0000FAD0                            
0000FAD0                            Obj4E_Loop:
0000FAD0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FAD4 6600                       		bne.s	loc_F0C8
0000FAD6                            
0000FAD6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FAD6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FADA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FAE2 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FAE8 137C 0004 0001             		move.b	#4,1(a1)
0000FAEE 137C 0050 0019             		move.b	#$50,$19(a1)
0000FAF4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB00 137C 0001 0018             		move.b	#1,$18(a1)
0000FB06 137C 0000 001C             		move.b	#0,$1C(a1)
0000FB0C 137C 0094 0020             		move.b	#$94,$20(a1)
0000FB12 2348 003C                  		move.l	a0,$3C(a1)
0000FB16                            
0000FB16                            loc_F0C8:
0000FB16 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FB1A                            
0000FB1A 5C29 0024                  		addq.b	#6,$24(a1)
0000FB1E 137C 0004 001A             		move.b	#4,$1A(a1)
0000FB24                            
0000FB24                            Obj4E_Action:				; XREF: Obj4E_Index
0000FB24 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB28 9068 0008                  		sub.w	8(a0),d0
0000FB2C 6400                       		bcc.s	Obj4E_ChkSonic
0000FB2E 4440                       		neg.w	d0
0000FB30                            
0000FB30                            Obj4E_ChkSonic:
0000FB30 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FB34 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB36 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FB3A 9068 000C                  		sub.w	$C(a0),d0
0000FB3E 6400                       		bcc.s	loc_F0F4
0000FB40 4440                       		neg.w	d0
0000FB42                            
0000FB42                            loc_F0F4:
0000FB42 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FB46 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB48 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FB4E 6000                       		bra.s	Obj4E_Solid
0000FB50                            ; ===========================================================================
0000FB50                            
0000FB50                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FB50 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FB54 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FB56 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB5C 5528 0024                  		subq.b	#2,$24(a0)
0000FB60                            
0000FB60                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB60 323C 002B                  		move.w	#$2B,d1
0000FB64 343C 0018                  		move.w	#$18,d2
0000FB68 3602                       		move.w	d2,d3
0000FB6A 5243                       		addq.w	#1,d3
0000FB6C 3828 0008                  		move.w	8(a0),d4
0000FB70 1028 0024                  		move.b	$24(a0),d0
0000FB74 3F00                       		move.w	d0,-(sp)
0000FB76 6100 0000                  		bsr.w	SolidObject
0000FB7A 301F                       		move.w	(sp)+,d0
0000FB7C 1140 0024                  		move.b	d0,$24(a0)
0000FB80 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB86 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB88 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB8C 4228 0036                  		clr.b	$36(a0)
0000FB90                            
0000FB90                            Obj4E_Animate:
0000FB90 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB96 6100 B508                  		bsr.w	AnimateSprite
0000FB9A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FBA0 6400                       		bcc.s	Obj4E_ChkDel
0000FBA2 6100 E488                  		bsr.w	SpeedToPos
0000FBA6                            
0000FBA6                            Obj4E_ChkDel:
0000FBA6 6100 E4AA                  		bsr.w	DisplaySprite
0000FBAA 4A28 0036                  		tst.b	$36(a0)
0000FBAE 6600                       		bne.s	locret_F17E
0000FBB0 3028 0008                  		move.w	8(a0),d0
0000FBB4 0240 FF80                  		andi.w	#$FF80,d0
0000FBB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBBC 0441 0080                  		subi.w	#$80,d1
0000FBC0 0241 FF80                  		andi.w	#$FF80,d1
0000FBC4 9041                       		sub.w	d1,d0
0000FBC6 0C40 0280                  		cmpi.w	#$280,d0
0000FBCA 6200                       		bhi.s	Obj4E_ChkGone
0000FBCC                            
0000FBCC                            locret_F17E:
0000FBCC 4E75                       		rts	
0000FBCE                            ; ===========================================================================
0000FBCE                            
0000FBCE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FBCE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBD2 7000                       		moveq	#0,d0
0000FBD4 1028 0023                  		move.b	$23(a0),d0
0000FBD8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FBDE 117C 0008 0024             		move.b	#8,$24(a0)
0000FBE4 4E75                       		rts	
0000FBE6                            ; ===========================================================================
0000FBE6                            
0000FBE6                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FBE6 2268 003C                  		movea.l	$3C(a0),a1
0000FBEA 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FBF0 6700                       		beq.s	Obj4E_Delete
0000FBF2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FBF8 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBFE 6000 E452                  		bra.w	DisplaySprite
0000FC02                            ; ===========================================================================
0000FC02                            
0000FC02                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FC02 6000 E48A                  		bra.w	DeleteObject
0000FC06                            ; ===========================================================================
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            ; Object 54 - invisible	lava tag (MZ)
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            
0000FC06                            Obj54:					; XREF: Obj_Index
0000FC06 7000                       		moveq	#0,d0
0000FC08 1028 0024                  		move.b	$24(a0),d0
0000FC0C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FC10 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FC14                            ; ===========================================================================
0000FC14 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FC16 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FC18                            
0000FC18 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FC1C                            ; ===========================================================================
0000FC1C                            
0000FC1C                            Obj54_Main:				; XREF: Obj54_Index
0000FC1C 5428 0024                  		addq.b	#2,$24(a0)
0000FC20 7000                       		moveq	#0,d0
0000FC22 1028 0028                  		move.b	$28(a0),d0
0000FC26 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FC2C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FC34 117C 0084 0001             		move.b	#$84,1(a0)
0000FC3A                            
0000FC3A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FC3A 3028 0008                  		move.w	8(a0),d0
0000FC3E 0240 FF80                  		andi.w	#$FF80,d0
0000FC42 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC46 0441 0080                  		subi.w	#$80,d1
0000FC4A 0241 FF80                  		andi.w	#$FF80,d1
0000FC4E 9041                       		sub.w	d1,d0
0000FC50 6B00 E43C                  		bmi.w	DeleteObject
0000FC54 0C40 0280                  		cmpi.w	#$280,d0
0000FC58 6200 E434                  		bhi.w	DeleteObject
0000FC5C 4E75                       		rts	
0000FC5E                            ; ===========================================================================
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E                            Map_obj54:
0000FC5E                            	include "_maps\obj54.asm"
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E 0000                       		dc.w byte_F212-Map_obj54
0000FC60 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC62 00                         		even
0000FC62 00                         		even
0000FC62                            
0000FC62                            Ani_obj4C:
0000FC62                            	include "_anim\obj4C.asm"
0000FC62                            ; ---------------------------------------------------------------------------
0000FC62                            ; Animation script - geyser of lava (MZ)
0000FC62                            ; ---------------------------------------------------------------------------
0000FC62 0000                       		dc.w byte_F220-Ani_obj4C
0000FC64 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC66 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC68 0000                       		dc.w byte_F232-Ani_obj4C
0000FC6A 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC6C 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC6E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC78 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC7C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC80 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC88 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC8C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC90                            		even
0000FC90                            		even
0000FC90                            
0000FC90                            Ani_obj4E:
0000FC90                            	include "_anim\obj4E.asm"
0000FC90                            ; ---------------------------------------------------------------------------
0000FC90                            ; Animation script - advancing wall of lava (MZ)
0000FC90                            ; ---------------------------------------------------------------------------
0000FC90 0000                       		dc.w byte_F244-Ani_obj4E
0000FC92 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC98                            		even
0000FC98                            		even
0000FC98                            
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            Map_obj4C:
0000FC98                            	include "_maps\obj4C.asm"
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC98                            ; ---------------------------------------------------------------------------
0000FC98 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC9C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FCA0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FCA4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FCA8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FCAC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FCB0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FCB4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FCB8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FCBC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FCC0 02                         byte_F272:	dc.b 2
0000FCC1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FCC6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FCCB 02                         byte_F27D:	dc.b 2
0000FCCC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FCD1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FCD6 04                         byte_F288:	dc.b 4
0000FCD7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCDC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCE1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCE6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCEB 04                         byte_F29D:	dc.b 4
0000FCEC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCF1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCF6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCFB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD00 06                         byte_F2B2:	dc.b 6
0000FD01 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FD06 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FD0B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD10 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD15 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FD1A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FD1F 06                         byte_F2D1:	dc.b 6
0000FD20 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD25 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD2A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FD2F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD34 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FD39 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FD3E 02                         byte_F2F0:	dc.b 2
0000FD3F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FD44 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FD49 02                         byte_F2FB:	dc.b 2
0000FD4A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FD4F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FD54 0A                         byte_F306:	dc.b $A
0000FD55 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD5A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD5F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD64 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD69 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD6E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD73 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD78 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD7D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD82 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD87 0A                         byte_F339:	dc.b $A
0000FD88 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD8D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD92 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD97 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD9C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FDA1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDA6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FDAB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FDB0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FDB5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FDBA 0A                         byte_F36C:	dc.b $A
0000FDBB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDC0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDC5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDCA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDCF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDD4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDD9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FDDE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FDE3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FDE8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FDED 06                         byte_F39F:	dc.b 6
0000FDEE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDF3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDF8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDFD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE02 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE07 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE0C 06                         byte_F3BE:	dc.b 6
0000FE0D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE12 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE17 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE1C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE21 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE26 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE2B 06                         byte_F3DD:	dc.b 6
0000FE2C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE31 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE36 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE3B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE40 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE45 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE4A 10                         byte_F3FC:	dc.b $10
0000FE4B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE50 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE55 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE5A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE5F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE64 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE69 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE6E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE73 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE78 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE7D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE82 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE87 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE8C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE91 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE96 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE9B 10                         byte_F44D:	dc.b $10
0000FE9C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEA1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEA6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEAB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEB0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEB5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEBA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FEBF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FEC4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FEC9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FECE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FED3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FED8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FEDD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FEE2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FEE7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FEEC 10                         byte_F49E:	dc.b $10
0000FEED 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEF2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEF7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEFC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FF01 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FF06 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FF0B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FF10 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FF15 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FF1A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FF1F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FF24 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FF29 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FF2E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FF33 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FF38 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FF3D 06                         byte_F4EF:	dc.b 6
0000FF3E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FF43 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FF48 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FF4D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FF52 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FF57 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF5C 06                         byte_F50E:	dc.b 6
0000FF5D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF62 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF67 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF6C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF71 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF76 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF7B 00                         byte_F52D:	dc.b 0
0000FF7C                            		even
0000FF7C                            		even
0000FF7C                            
0000FF7C                            ; ---------------------------------------------------------------------------
0000FF7C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF7C                            ; ---------------------------------------------------------------------------
0000FF7C                            Map_obj4E:
0000FF7C                            	include "_maps\obj4E.asm"
0000FF7C                            ; ---------------------------------------------------------------------------
0000FF7C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF7C                            ; ---------------------------------------------------------------------------
0000FF7C 0000                       		dc.w byte_F538-Map_obj4E
0000FF7E 0000                       		dc.w byte_F566-Map_obj4E
0000FF80 0000                       		dc.w byte_F594-Map_obj4E
0000FF82 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF84 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF86 09                         byte_F538:	dc.b 9
0000FF87 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF8C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF91 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF96 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF9B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFA0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFA5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFAA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFAF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFB4 09                         byte_F566:	dc.b 9
0000FFB5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFBA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FFBF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFC4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFC9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFCE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFD3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFD8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFDD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFE2 09                         byte_F594:	dc.b 9
0000FFE3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FFE8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FFED 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFF2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFF7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFFC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010001 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010006 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001000B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010010 09                         byte_F5C2:	dc.b 9
00010011 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010016 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001001B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010020 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010025 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001002A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001002F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010034 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010039 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001003E 08                         byte_F5F0:	dc.b 8
0001003F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010044 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010049 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001004E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010053 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010058 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001005D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010062 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010068 00                         		even
00010068 00                         		even
00010068                            
00010068                            ; ===========================================================================
00010068                            ; ---------------------------------------------------------------------------
00010068                            ; Object 40 - Moto Bug enemy (GHZ)
00010068                            ; ---------------------------------------------------------------------------
00010068                            
00010068                            Obj40:					; XREF: Obj_Index
00010068 7000                       		moveq	#0,d0
0001006A 1028 0024                  		move.b	$24(a0),d0
0001006E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010072 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010076                            ; ===========================================================================
00010076 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010078 0000                       		dc.w Obj40_Action-Obj40_Index
0001007A 0000                       		dc.w Obj40_Animate-Obj40_Index
0001007C 0000                       		dc.w Obj40_Delete-Obj40_Index
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            Obj40_Main:				; XREF: Obj40_Index
0001007E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010086 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001008C 117C 0004 0001             		move.b	#4,1(a0)
00010092 117C 0004 0018             		move.b	#4,$18(a0)
00010098 117C 0014 0019             		move.b	#$14,$19(a0)
0001009E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000100A2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000100A4 117C 000E 0016             		move.b	#$E,$16(a0)
000100AA 117C 0008 0017             		move.b	#8,$17(a0)
000100B0 117C 000C 0020             		move.b	#$C,$20(a0)
000100B6 6100 DF02                  		bsr.w	ObjectFall
000100BA 4EB9 0000 0000             		jsr	ObjHitFloor
000100C0 4A41                       		tst.w	d1
000100C2 6A00                       		bpl.s	locret_F68A
000100C4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100C8 317C 0000 0012             		move.w	#0,$12(a0)
000100CE 5428 0024                  		addq.b	#2,$24(a0)
000100D2 0868 0000 0022             		bchg	#0,$22(a0)
000100D8                            
000100D8                            locret_F68A:
000100D8 4E75                       		rts	
000100DA                            ; ===========================================================================
000100DA                            
000100DA                            Obj40_SetSmoke:				; XREF: Obj40_Main
000100DA 5828 0024                  		addq.b	#4,$24(a0)
000100DE 6000 0000                  		bra.w	Obj40_Animate
000100E2                            ; ===========================================================================
000100E2                            
000100E2                            Obj40_Action:				; XREF: Obj40_Index
000100E2 7000                       		moveq	#0,d0
000100E4 1028 0025                  		move.b	$25(a0),d0
000100E8 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000100EC 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000100F0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000100F6 6100 AFA8                  		bsr.w	AnimateSprite
000100FA                            
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            
000100FA                            MarkObjGone:
000100FA 3028 0008                  		move.w	8(a0),d0
000100FE 0240 FF80                  		andi.w	#$FF80,d0
00010102 3238 F700                  		move.w	($FFFFF700).w,d1
00010106 0441 0080                  		subi.w	#$80,d1
0001010A 0241 FF80                  		andi.w	#$FF80,d1
0001010E 9041                       		sub.w	d1,d0
00010110 0C40 0280                  		cmpi.w	#$280,d0
00010114 6200 0000                  		bhi.w	Mark_ChkGone
00010118 6000 DF38                  		bra.w	DisplaySprite
0001011C                            ; ===========================================================================
0001011C                            
0001011C                            Mark_ChkGone:
0001011C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010120 7000                       		moveq	#0,d0
00010122 1028 0023                  		move.b	$23(a0),d0
00010126 6700                       		beq.s	Mark_Delete
00010128 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001012E                            
0001012E                            Mark_Delete:
0001012E 6000 DF5E                  		bra.w	DeleteObject
00010132                            
00010132                            ; ===========================================================================
00010132 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010134 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010136                            ; ===========================================================================
00010136                            
00010136                            Obj40_Move:				; XREF: Obj40_Index2
00010136 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001013A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001013C 5428 0025                  		addq.b	#2,$25(a0)
00010140 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010146 117C 0001 001C             		move.b	#1,$1C(a0)
0001014C 0868 0000 0022             		bchg	#0,$22(a0)
00010152 6600                       		bne.s	locret_F70A
00010154 4468 0010                  		neg.w	$10(a0)		; change direction
00010158                            
00010158                            locret_F70A:
00010158 4E75                       		rts	
0001015A                            ; ===========================================================================
0001015A                            
0001015A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001015A 6100 DED0                  		bsr.w	SpeedToPos
0001015E 4EB9 0000 0000             		jsr	ObjHitFloor
00010164 0C41 FFF8                  		cmpi.w	#-8,d1
00010168 6D00                       		blt.s	Obj40_Pause
0001016A 0C41 000C                  		cmpi.w	#$C,d1
0001016E 6C00                       		bge.s	Obj40_Pause
00010170 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010174 5328 0033                  		subq.b	#1,$33(a0)
00010178 6A00                       		bpl.s	locret_F756
0001017A 117C 000F 0033             		move.b	#$F,$33(a0)
00010180 6100 E356                  		bsr.w	SingleObjLoad
00010184 6600                       		bne.s	locret_F756
00010186 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001018A 3368 0008 0008             		move.w	8(a0),8(a1)
00010190 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010196 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001019C 137C 0002 001C             		move.b	#2,$1C(a1)
000101A2                            
000101A2                            locret_F756:
000101A2 4E75                       		rts	
000101A4                            ; ===========================================================================
000101A4                            
000101A4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000101A4 5528 0025                  		subq.b	#2,$25(a0)
000101A8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000101AE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000101B4 117C 0000 001C             		move.b	#0,$1C(a0)
000101BA 4E75                       		rts	
000101BC                            ; ===========================================================================
000101BC                            
000101BC                            Obj40_Animate:				; XREF: Obj40_Index
000101BC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101C2 6100 AEDC                  		bsr.w	AnimateSprite
000101C6 6000 DE8A                  		bra.w	DisplaySprite
000101CA                            ; ===========================================================================
000101CA                            
000101CA                            Obj40_Delete:				; XREF: Obj40_Index
000101CA 6000 DEC2                  		bra.w	DeleteObject
000101CE                            ; ===========================================================================
000101CE                            Ani_obj40:
000101CE                            	include "_anim\obj40.asm"
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            ; Animation script - Motobug enemy
000101CE                            ; ---------------------------------------------------------------------------
000101CE 0000                       		dc.w byte_F788-Ani_obj40
000101D0 0000                       		dc.w byte_F78C-Ani_obj40
000101D2 0000                       		dc.w byte_F792-Ani_obj40
000101D4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000101D8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000101DE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000101EC                            		even
000101EC                            		even
000101EC                            
000101EC                            ; ---------------------------------------------------------------------------
000101EC                            ; Sprite mappings - Moto Bug enemy (GHZ)
000101EC                            ; ---------------------------------------------------------------------------
000101EC                            Map_obj40:
000101EC                            	include "_maps\obj40.asm"
000101EC                            Map_cedc:
000101EC 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000101EE 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000101F0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000101F2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000101F4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000101F6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000101F8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101FA 04                         Map_cedc_E: 	dc.b $4
000101FB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010200 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010205 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001020A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0001020F 04                         Map_cedc_23: 	dc.b $4
00010210 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010215 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001021A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0001021F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010224 05                         Map_cedc_38: 	dc.b $5
00010225 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001022A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001022F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010234 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010239 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001023E 01                         Map_cedc_52: 	dc.b $1
0001023F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010244 01                         Map_cedc_58: 	dc.b $1
00010245 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001024A 01                         Map_cedc_5E: 	dc.b $1
0001024B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010250 00                         Map_cedc_64: 	dc.b $0
00010252 00                         	even
00010252 00                         	even
00010252                            
00010252                            ; ===========================================================================
00010252                            ; ---------------------------------------------------------------------------
00010252                            ; Object 4F - blank
00010252                            ; ---------------------------------------------------------------------------
00010252                            
00010252                            Obj4F:					; XREF: Obj_Index
00010252 4E75                       		rts	
00010254                            
00010254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010254                            
00010254                            
00010254                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010254 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010258 D047                       		add.w	d7,d0
0001025A 0240 0003                  		andi.w	#3,d0
0001025E 6600                       		bne.s	loc_F836
00010260 7600                       		moveq	#0,d3
00010262 1628 0019                  		move.b	$19(a0),d3
00010266 4A68 0010                  		tst.w	$10(a0)
0001026A 6B00                       		bmi.s	loc_F82C
0001026C 6100 0000                  		bsr.w	ObjHitWallRight
00010270 4A41                       		tst.w	d1
00010272 6A00                       		bpl.s	loc_F836
00010274                            
00010274                            loc_F828:
00010274 7001                       		moveq	#1,d0
00010276 4E75                       		rts	
00010278                            ; ===========================================================================
00010278                            
00010278                            loc_F82C:
00010278 4643                       		not.w	d3
0001027A 6100 0000                  		bsr.w	ObjHitWallLeft
0001027E 4A41                       		tst.w	d1
00010280 6BF2                       		bmi.s	loc_F828
00010282                            
00010282                            loc_F836:
00010282 7000                       		moveq	#0,d0
00010284 4E75                       		rts	
00010286                            ; End of function Obj50_ChkWall
00010286                            
00010286                            ; ===========================================================================
00010286                            ; ---------------------------------------------------------------------------
00010286                            ; Object 50 - Yadrin enemy (SYZ)
00010286                            ; ---------------------------------------------------------------------------
00010286                            
00010286                            Obj50:					; XREF: Obj_Index
00010286 7000                       		moveq	#0,d0
00010288 1028 0024                  		move.b	$24(a0),d0
0001028C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010290 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010294                            ; ===========================================================================
00010294 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010296 0000                       		dc.w Obj50_Action-Obj50_Index
00010298                            ; ===========================================================================
00010298                            
00010298                            Obj50_Main:				; XREF: Obj50_Index
00010298 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000102A0 317C 247B 0002             		move.w	#$247B,2(a0)
000102A6 117C 0004 0001             		move.b	#4,1(a0)
000102AC 117C 0004 0018             		move.b	#4,$18(a0)
000102B2 117C 0014 0019             		move.b	#$14,$19(a0)
000102B8 117C 0011 0016             		move.b	#$11,$16(a0)
000102BE 117C 0008 0017             		move.b	#8,$17(a0)
000102C4 117C 00CC 0020             		move.b	#$CC,$20(a0)
000102CA 6100 DCEE                  		bsr.w	ObjectFall
000102CE 6100 0000                  		bsr.w	ObjHitFloor
000102D2 4A41                       		tst.w	d1
000102D4 6A00                       		bpl.s	locret_F89E
000102D6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000102DA 317C 0000 0012             		move.w	#0,$12(a0)
000102E0 5428 0024                  		addq.b	#2,$24(a0)
000102E4 0868 0000 0022             		bchg	#0,$22(a0)
000102EA                            
000102EA                            locret_F89E:
000102EA 4E75                       		rts	
000102EC                            ; ===========================================================================
000102EC                            
000102EC                            Obj50_Action:				; XREF: Obj50_Index
000102EC 7000                       		moveq	#0,d0
000102EE 1028 0025                  		move.b	$25(a0),d0
000102F2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000102F6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102FA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010300 6100 AD9E                  		bsr.w	AnimateSprite
00010304 6000 FDF4                  		bra.w	MarkObjGone
00010308                            ; ===========================================================================
00010308 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001030A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001030C                            ; ===========================================================================
0001030C                            
0001030C                            Obj50_Move:				; XREF: Obj50_Index2
0001030C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010310 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010312 5428 0025                  		addq.b	#2,$25(a0)
00010316 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001031C 117C 0001 001C             		move.b	#1,$1C(a0)
00010322 0868 0000 0022             		bchg	#0,$22(a0)
00010328 6600                       		bne.s	locret_F8E2
0001032A 4468 0010                  		neg.w	$10(a0)		; change direction
0001032E                            
0001032E                            locret_F8E2:
0001032E 4E75                       		rts	
00010330                            ; ===========================================================================
00010330                            
00010330                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010330 6100 DCFA                  		bsr.w	SpeedToPos
00010334 6100 0000                  		bsr.w	ObjHitFloor
00010338 0C41 FFF8                  		cmpi.w	#-8,d1
0001033C 6D00                       		blt.s	Obj50_Pause
0001033E 0C41 000C                  		cmpi.w	#$C,d1
00010342 6C00                       		bge.s	Obj50_Pause
00010344 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010348 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001034C 6600                       		bne.s	Obj50_Pause
0001034E 4E75                       		rts	
00010350                            ; ===========================================================================
00010350                            
00010350                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010350 5528 0025                  		subq.b	#2,$25(a0)
00010354 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001035A 317C 0000 0010             		move.w	#0,$10(a0)
00010360 117C 0000 001C             		move.b	#0,$1C(a0)
00010366 4E75                       		rts	
00010368                            ; ===========================================================================
00010368                            Ani_obj50:
00010368                            	include "_anim\obj50.asm"
00010368                            ; ---------------------------------------------------------------------------
00010368                            ; Animation script - Yadrin enemy
00010368                            ; ---------------------------------------------------------------------------
00010368 0000                       		dc.w byte_F920-Ani_obj50
0001036A 0000                       		dc.w byte_F924-Ani_obj50
0001036C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010370 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001037A                            		even
0001037A                            		even
0001037A                            
0001037A                            ; ---------------------------------------------------------------------------
0001037A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001037A                            ; ---------------------------------------------------------------------------
0001037A                            Map_obj50:
0001037A                            	include "_maps\obj50.asm"
0001037A                            Map_ff24:
0001037A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001037C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001037E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010380 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010382 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010384 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010386 05                         Map_ff24_C: 	dc.b $5
00010387 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001038C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010391 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010396 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001039B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103A0 05                         Map_ff24_26: 	dc.b $5
000103A1 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103A6 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103AB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103B0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103B5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103BA 05                         Map_ff24_40: 	dc.b $5
000103BB F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103C0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103C5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103CA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103CF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103D4 05                         Map_ff24_5A: 	dc.b $5
000103D5 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000103DA FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000103DF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103E4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103E9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103EE 05                         Map_ff24_74: 	dc.b $5
000103EF F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103F4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103F9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103FE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010403 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010408 05                         Map_ff24_8E: 	dc.b $5
00010409 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001040E 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010413 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010418 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001041D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010422                            	even
00010422                            	even
00010422                            
00010422                            ; ---------------------------------------------------------------------------
00010422                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010422                            ;
00010422                            ; variables:
00010422                            ; d1 = width
00010422                            ; d2 = height /	2 (when	jumping)
00010422                            ; d3 = height /	2 (when	walking)
00010422                            ; d4 = x-axis position
00010422                            ; ---------------------------------------------------------------------------
00010422                            
00010422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010422                            
00010422                            
00010422                            SolidObject:
00010422 4A28 0025                  		tst.b	$25(a0)
00010426 6700 0000                  		beq.w	loc_FAC8
0001042A 3401                       		move.w	d1,d2
0001042C D442                       		add.w	d2,d2
0001042E 43F8 D000                  		lea	($FFFFD000).w,a1
00010432 0829 0001 0022             		btst	#1,$22(a1)
00010438 6600                       		bne.s	loc_F9FE
0001043A 3029 0008                  		move.w	8(a1),d0
0001043E 9068 0008                  		sub.w	8(a0),d0
00010442 D041                       		add.w	d1,d0
00010444 6B00                       		bmi.s	loc_F9FE
00010446 B042                       		cmp.w	d2,d0
00010448 6500                       		bcs.s	loc_FA12
0001044A                            
0001044A                            loc_F9FE:
0001044A 08A9 0003 0022             		bclr	#3,$22(a1)
00010450 08A8 0003 0022             		bclr	#3,$22(a0)
00010456 4228 0025                  		clr.b	$25(a0)
0001045A 7800                       		moveq	#0,d4
0001045C 4E75                       		rts	
0001045E                            ; ===========================================================================
0001045E                            
0001045E                            loc_FA12:
0001045E 3404                       		move.w	d4,d2
00010460 4EB9 0000 832E             		jsr	MvSonicOnPtfm 
00010466 7800                       		moveq	#0,d4
00010468 4E75                       		rts	
0001046A                            ; ===========================================================================
0001046A                            
0001046A                            SolidObject71:				; XREF: Obj71_Solid
0001046A 4A28 0025                  		tst.b	$25(a0)
0001046E 6700 0000                  		beq.w	loc_FAD0
00010472 3401                       		move.w	d1,d2
00010474 D442                       		add.w	d2,d2
00010476 43F8 D000                  		lea	($FFFFD000).w,a1
0001047A 0829 0001 0022             		btst	#1,$22(a1)
00010480 6600                       		bne.s	loc_FA44
00010482 3029 0008                  		move.w	8(a1),d0
00010486 9068 0008                  		sub.w	8(a0),d0
0001048A D041                       		add.w	d1,d0
0001048C 6B00                       		bmi.s	loc_FA44
0001048E B042                       		cmp.w	d2,d0
00010490 6500                       		bcs.s	loc_FA58
00010492                            
00010492                            loc_FA44:
00010492 08A9 0003 0022             		bclr	#3,$22(a1)
00010498 08A8 0003 0022             		bclr	#3,$22(a0)
0001049E 4228 0025                  		clr.b	$25(a0)
000104A2 7800                       		moveq	#0,d4
000104A4 4E75                       		rts	
000104A6                            ; ===========================================================================
000104A6                            
000104A6                            loc_FA58:
000104A6 3404                       		move.w	d4,d2
000104A8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000104A8 7800                       		moveq	#0,d4
000104AA 4E75                       		rts	
000104AC                            ; ===========================================================================
000104AC                            
000104AC                            SolidObject2F:				; XREF: Obj2F_Solid
000104AC 43F8 D000                  		lea	($FFFFD000).w,a1
000104B0 4A28 0001                  		tst.b	1(a0)
000104B4 6A00 0000                  		bpl.w	loc_FB92
000104B8 3029 0008                  		move.w	8(a1),d0
000104BC 9068 0008                  		sub.w	8(a0),d0
000104C0 D041                       		add.w	d1,d0
000104C2 6B00 0000                  		bmi.w	loc_FB92
000104C6 3601                       		move.w	d1,d3
000104C8 D643                       		add.w	d3,d3
000104CA B043                       		cmp.w	d3,d0
000104CC 6200 0000                  		bhi.w	loc_FB92
000104D0 3A00                       		move.w	d0,d5
000104D2 0828 0000 0001             		btst	#0,1(a0)
000104D8 6700                       		beq.s	loc_FA94
000104DA 4645                       		not.w	d5
000104DC DA43                       		add.w	d3,d5
000104DE                            
000104DE                            loc_FA94:
000104DE E24D                       		lsr.w	#1,d5
000104E0 7600                       		moveq	#0,d3
000104E2 1632 5000                  		move.b	(a2,d5.w),d3
000104E6 9612                       		sub.b	(a2),d3
000104E8 3A28 000C                  		move.w	$C(a0),d5
000104EC 9A43                       		sub.w	d3,d5
000104EE 1629 0016                  		move.b	$16(a1),d3
000104F2 4883                       		ext.w	d3
000104F4 D443                       		add.w	d3,d2
000104F6 3629 000C                  		move.w	$C(a1),d3
000104FA 9645                       		sub.w	d5,d3
000104FC 5843                       		addq.w	#4,d3
000104FE D642                       		add.w	d2,d3
00010500 6B00 0000                  		bmi.w	loc_FB92
00010504 3802                       		move.w	d2,d4
00010506 D844                       		add.w	d4,d4
00010508 B644                       		cmp.w	d4,d3
0001050A 6400 0000                  		bcc.w	loc_FB92
0001050E 6000 0000                  		bra.w	loc_FB0E
00010512                            ; ===========================================================================
00010512                            
00010512                            loc_FAC8:
00010512 4A28 0001                  		tst.b	1(a0)
00010516 6A00 0000                  		bpl.w	loc_FB92
0001051A                            
0001051A                            loc_FAD0:
0001051A 43F8 D000                  		lea	($FFFFD000).w,a1
0001051E 3029 0008                  		move.w	8(a1),d0
00010522 9068 0008                  		sub.w	8(a0),d0
00010526 D041                       		add.w	d1,d0
00010528 6B00 0000                  		bmi.w	loc_FB92
0001052C 3601                       		move.w	d1,d3
0001052E D643                       		add.w	d3,d3
00010530 B043                       		cmp.w	d3,d0
00010532 6200 0000                  		bhi.w	loc_FB92
00010536 1629 0016                  		move.b	$16(a1),d3
0001053A 4883                       		ext.w	d3
0001053C D443                       		add.w	d3,d2
0001053E 3629 000C                  		move.w	$C(a1),d3
00010542 9668 000C                  		sub.w	$C(a0),d3
00010546 5843                       		addq.w	#4,d3
00010548 D642                       		add.w	d2,d3
0001054A 6B00 0000                  		bmi.w	loc_FB92
0001054E 3802                       		move.w	d2,d4
00010550 D844                       		add.w	d4,d4
00010552 B644                       		cmp.w	d4,d3
00010554 6400 0000                  		bcc.w	loc_FB92
00010558                            
00010558                            loc_FB0E:
00010558 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001055C 6B00 0000                  		bmi.w	loc_FB92
00010560 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010566 6400 0000                  		bcc.w	loc_FB92
0001056A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001056E 6600 0000                  		bne.w	loc_FBAC
00010572 3A00                       		move.w	d0,d5
00010574 B240                       		cmp.w	d0,d1
00010576 6400                       		bcc.s	loc_FB36
00010578 D241                       		add.w	d1,d1
0001057A 9041                       		sub.w	d1,d0
0001057C 3A00                       		move.w	d0,d5
0001057E 4445                       		neg.w	d5
00010580                            
00010580                            loc_FB36:
00010580 3203                       		move.w	d3,d1
00010582 B443                       		cmp.w	d3,d2
00010584 6400                       		bcc.s	loc_FB44
00010586 5943                       		subq.w	#4,d3
00010588 9644                       		sub.w	d4,d3
0001058A 3203                       		move.w	d3,d1
0001058C 4441                       		neg.w	d1
0001058E                            
0001058E                            loc_FB44:
0001058E BA41                       		cmp.w	d1,d5
00010590 6200 0000                  		bhi.w	loc_FBB0
00010594 0C41 0004                  		cmpi.w	#4,d1
00010598 6300                       		bls.s	loc_FB8C
0001059A 4A40                       		tst.w	d0
0001059C 6700                       		beq.s	loc_FB70
0001059E 6B00                       		bmi.s	loc_FB5E
000105A0 4A69 0010                  		tst.w	$10(a1)
000105A4 6B00                       		bmi.s	loc_FB70
000105A6 6000                       		bra.s	loc_FB64
000105A8                            ; ===========================================================================
000105A8                            
000105A8                            loc_FB5E:
000105A8 4A69 0010                  		tst.w	$10(a1)
000105AC 6A00                       		bpl.s	loc_FB70
000105AE                            
000105AE                            loc_FB64:
000105AE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000105B4 337C 0000 0010             		move.w	#0,$10(a1)
000105BA                            
000105BA                            loc_FB70:
000105BA 9169 0008                  		sub.w	d0,8(a1)
000105BE 0829 0001 0022             		btst	#1,$22(a1)
000105C4 6600                       		bne.s	loc_FB8C
000105C6 08E9 0005 0022             		bset	#5,$22(a1)
000105CC 08E8 0005 0022             		bset	#5,$22(a0)
000105D2 7801                       		moveq	#1,d4
000105D4 4E75                       		rts	
000105D6                            ; ===========================================================================
000105D6                            
000105D6                            loc_FB8C:
000105D6 6100                       		bsr.s	loc_FBA0
000105D8 7801                       		moveq	#1,d4
000105DA 4E75                       		rts	
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            loc_FB92:
000105DC 0828 0005 0022             		btst	#5,$22(a0)
000105E2 6700                       		beq.s	loc_FBAC
000105E4 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000105EA                            
000105EA                            loc_FBA0:
000105EA 08A8 0005 0022             		bclr	#5,$22(a0)
000105F0 08A9 0005 0022             		bclr	#5,$22(a1)
000105F6                            
000105F6                            loc_FBAC:
000105F6 7800                       		moveq	#0,d4
000105F8 4E75                       		rts	
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            loc_FBB0:
000105FA 4A43                       		tst.w	d3
000105FC 6B00                       		bmi.s	loc_FBBC
000105FE 0C43 0010                  		cmpi.w	#$10,d3
00010602 6500                       		bcs.s	loc_FBEE
00010604 60D6                       		bra.s	loc_FB92
00010606                            ; ===========================================================================
00010606                            
00010606                            loc_FBBC:
00010606 4A69 0012                  		tst.w	$12(a1)
0001060A 6700                       		beq.s	loc_FBD6
0001060C 6A00                       		bpl.s	loc_FBD2
0001060E 4A43                       		tst.w	d3
00010610 6A00                       		bpl.s	loc_FBD2
00010612 9769 000C                  		sub.w	d3,$C(a1)
00010616 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001061C                            
0001061C                            loc_FBD2:
0001061C 78FF                       		moveq	#-1,d4
0001061E 4E75                       		rts	
00010620                            ; ===========================================================================
00010620                            
00010620                            loc_FBD6:
00010620 0829 0001 0022             		btst	#1,$22(a1)
00010626 66F4                       		bne.s	loc_FBD2
00010628 2F08                       		move.l	a0,-(sp)
0001062A 2049                       		movea.l	a1,a0
0001062C 4EB9 0000 0000             		jsr	KillSonic
00010632 205F                       		movea.l	(sp)+,a0
00010634 78FF                       		moveq	#-1,d4
00010636 4E75                       		rts	
00010638                            ; ===========================================================================
00010638                            
00010638                            loc_FBEE:
00010638 5943                       		subq.w	#4,d3
0001063A 7200                       		moveq	#0,d1
0001063C 1228 0019                  		move.b	$19(a0),d1
00010640 3401                       		move.w	d1,d2
00010642 D442                       		add.w	d2,d2
00010644 D269 0008                  		add.w	8(a1),d1
00010648 9268 0008                  		sub.w	8(a0),d1
0001064C 6B00                       		bmi.s	loc_FC28
0001064E B242                       		cmp.w	d2,d1
00010650 6400                       		bcc.s	loc_FC28
00010652 4A69 0012                  		tst.w	$12(a1)
00010656 6B00                       		bmi.s	loc_FC28
00010658 9769 000C                  		sub.w	d3,$C(a1)
0001065C 5369 000C                  		subq.w	#1,$C(a1)
00010660 6100                       		bsr.s	sub_FC2C
00010662 117C 0002 0025             		move.b	#2,$25(a0)
00010668 08E8 0003 0022             		bset	#3,$22(a0)
0001066E 78FF                       		moveq	#-1,d4
00010670 4E75                       		rts	
00010672                            ; ===========================================================================
00010672                            
00010672                            loc_FC28:
00010672 7800                       		moveq	#0,d4
00010674 4E75                       		rts	
00010676                            ; End of function SolidObject
00010676                            
00010676                            
00010676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010676                            
00010676                            
00010676                            sub_FC2C:				; XREF: SolidObject
00010676 0829 0003 0022             		btst	#3,$22(a1)
0001067C 6700                       		beq.s	loc_FC4E
0001067E 7000                       		moveq	#0,d0
00010680 1029 003D                  		move.b	$3D(a1),d0
00010684 ED48                       		lsl.w	#6,d0
00010686 0680 00FF D000             		addi.l	#$FFD000,d0
0001068C 2440                       		movea.l	d0,a2
0001068E 08AA 0003 0022             		bclr	#3,$22(a2)
00010694 422A 0025                  		clr.b	$25(a2)
00010698                            
00010698                            loc_FC4E:
00010698 3008                       		move.w	a0,d0
0001069A 0440 D000                  		subi.w	#-$3000,d0
0001069E EC48                       		lsr.w	#6,d0
000106A0 0240 007F                  		andi.w	#$7F,d0
000106A4 1340 003D                  		move.b	d0,$3D(a1)
000106A8 137C 0000 0026             		move.b	#0,$26(a1)
000106AE 337C 0000 0012             		move.w	#0,$12(a1)
000106B4 3369 0010 0014             		move.w	$10(a1),$14(a1)
000106BA 0829 0001 0022             		btst	#1,$22(a1)
000106C0 6700                       		beq.s	loc_FC84
000106C2 2F08                       		move.l	a0,-(sp)
000106C4 2049                       		movea.l	a1,a0
000106C6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000106CC 205F                       		movea.l	(sp)+,a0
000106CE                            
000106CE                            loc_FC84:
000106CE 08E9 0003 0022             		bset	#3,$22(a1)
000106D4 08E8 0003 0022             		bset	#3,$22(a0)
000106DA 4E75                       		rts	
000106DC                            ; End of function sub_FC2C
000106DC                            
000106DC                            ; ===========================================================================
000106DC                            ; ---------------------------------------------------------------------------
000106DC                            ; Object 51 - smashable	green block (MZ)
000106DC                            ; ---------------------------------------------------------------------------
000106DC                            
000106DC                            Obj51:					; XREF: Obj_Index
000106DC 7000                       		moveq	#0,d0
000106DE 1028 0024                  		move.b	$24(a0),d0
000106E2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000106E6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000106EA 6000 FA0E                  		bra.w	MarkObjGone
000106EE                            ; ===========================================================================
000106EE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000106F0 0000                       		dc.w Obj51_Solid-Obj51_Index
000106F2 0000                       		dc.w Obj51_Display-Obj51_Index
000106F4                            ; ===========================================================================
000106F4                            
000106F4                            Obj51_Main:				; XREF: Obj51_Index
000106F4 5428 0024                  		addq.b	#2,$24(a0)
000106F8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010700 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010706 117C 0004 0001             		move.b	#4,1(a0)
0001070C 117C 0010 0019             		move.b	#$10,$19(a0)
00010712 117C 0004 0018             		move.b	#4,$18(a0)
00010718 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001071E                            
0001071E                            Obj51_Solid:				; XREF: Obj51_Index
0001071E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010724 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001072A 323C 001B                  		move.w	#$1B,d1
0001072E 343C 0010                  		move.w	#$10,d2
00010732 363C 0011                  		move.w	#$11,d3
00010736 3828 0008                  		move.w	8(a0),d4
0001073A 6100 FCE6                  		bsr.w	SolidObject
0001073E 0828 0003 0022             		btst	#3,$22(a0)
00010744 6600                       		bne.s	Obj51_Smash
00010746                            
00010746                            locret_FCFC:
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj51_Smash:				; XREF: Obj51_Solid
00010748 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001074E 66F6                       		bne.s	locret_FCFC	; if not, branch
00010750 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010756 08E9 0002 0022             		bset	#2,$22(a1)
0001075C 137C 000E 0016             		move.b	#$E,$16(a1)
00010762 137C 0007 0017             		move.b	#7,$17(a1)
00010768 137C 0002 001C             		move.b	#2,$1C(a1)
0001076E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010774 08E9 0001 0022             		bset	#1,$22(a1)
0001077A 08A9 0003 0022             		bclr	#3,$22(a1)
00010780 137C 0002 0024             		move.b	#2,$24(a1)
00010786 08A8 0003 0022             		bclr	#3,$22(a0)
0001078C 4228 0025                  		clr.b	$25(a0)
00010790 117C 0001 001A             		move.b	#1,$1A(a0)
00010796 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001079C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001079E 343C 0038                  		move.w	#$38,d2
000107A2 6100 D456                  		bsr.w	SmashObject
000107A6 6100 DD30                  		bsr.w	SingleObjLoad
000107AA 6600                       		bne.s	Obj51_Display
000107AC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000107B0 3368 0008 0008             		move.w	8(a0),8(a1)
000107B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107BC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000107C0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000107C4 0C42 0006                  		cmpi.w	#6,d2
000107C8 6500                       		bcs.s	Obj51_Bonus
000107CA 7406                       		moveq	#6,d2
000107CC                            
000107CC                            Obj51_Bonus:
000107CC 7000                       		moveq	#0,d0
000107CE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000107D2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000107D8 6500                       		bcs.s	loc_FD98	; if not, branch
000107DA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000107DE 740A                       		moveq	#10,d2
000107E0                            
000107E0                            loc_FD98:
000107E0 4EB9 0000 0000             		jsr	AddPoints
000107E6 E24A                       		lsr.w	#1,d2
000107E8 1342 001A                  		move.b	d2,$1A(a1)
000107EC                            
000107EC                            Obj51_Display:				; XREF: Obj51_Index
000107EC 6100 D83E                  		bsr.w	SpeedToPos
000107F0 0668 0038 0012             		addi.w	#$38,$12(a0)
000107F6 6100 D85A                  		bsr.w	DisplaySprite
000107FA 4A28 0001                  		tst.b	1(a0)
000107FE 6A00 D88E                  		bpl.w	DeleteObject
00010802 4E75                       		rts	
00010804                            ; ===========================================================================
00010804 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010808 FF00 FF00                  		dc.w $FF00, $FF00
0001080C 0200 FE00                  		dc.w $200, $FE00
00010810 0100 FF00                  		dc.w $100, $FF00
00010814                            
00010814 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001081C                            ; ---------------------------------------------------------------------------
0001081C                            ; Sprite mappings - smashable green block (MZ)
0001081C                            ; ---------------------------------------------------------------------------
0001081C                            Map_obj51:
0001081C                            	include "_maps\obj51.asm"
0001081C                            ; ---------------------------------------------------------------------------
0001081C                            ; Sprite mappings - smashable green block (MZ)
0001081C                            ; ---------------------------------------------------------------------------
0001081C 0000                       		dc.w byte_FDD8-Map_obj51
0001081E 0000                       		dc.w byte_FDE3-Map_obj51
00010820 02                         byte_FDD8:	dc.b 2
00010821 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010826 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001082B 04                         byte_FDE3:	dc.b 4
0001082C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010831 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010836 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001083B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010840                            		even
00010840                            		even
00010840                            
00010840                            ; ===========================================================================
00010840                            ; ---------------------------------------------------------------------------
00010840                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010840                            ; ---------------------------------------------------------------------------
00010840                            
00010840                            Obj52:					; XREF: Obj_Index
00010840 7000                       		moveq	#0,d0
00010842 1028 0024                  		move.b	$24(a0),d0
00010846 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001084A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001084E                            ; ===========================================================================
0001084E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010850 0000                       		dc.w Obj52_Platform-Obj52_Index
00010852 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010854                            
00010854 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010856 2001                       		dc.b $20, 1
00010858 2002                       		dc.b $20, 2
0001085A 4003                       		dc.b $40, 3
0001085C 3004                       		dc.b $30, 4
0001085E                            ; ===========================================================================
0001085E                            
0001085E                            Obj52_Main:				; XREF: Obj52_Index
0001085E 5428 0024                  		addq.b	#2,$24(a0)
00010862 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001086A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010870 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010876 6600                       		bne.s	loc_FE44
00010878 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010880 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010886 117C 0007 0016             		move.b	#7,$16(a0)
0001088C                            
0001088C                            loc_FE44:
0001088C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010892 6600                       		bne.s	loc_FE60
00010894 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001089A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000108A0 6700                       		beq.s	loc_FE60	; if yes, branch
000108A2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000108A8                            
000108A8                            loc_FE60:
000108A8 117C 0004 0001             		move.b	#4,1(a0)
000108AE 7000                       		moveq	#0,d0
000108B0 1028 0028                  		move.b	$28(a0),d0
000108B4 E648                       		lsr.w	#3,d0
000108B6 0240 001E                  		andi.w	#$1E,d0
000108BA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000108BE 115A 0019                  		move.b	(a2)+,$19(a0)
000108C2 115A 001A                  		move.b	(a2)+,$1A(a0)
000108C6 117C 0004 0018             		move.b	#4,$18(a0)
000108CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000108D2 3168 000C 0032             		move.w	$C(a0),$32(a0)
000108D8 0228 000F 0028             		andi.b	#$F,$28(a0)
000108DE                            
000108DE                            Obj52_Platform:				; XREF: Obj52_Index
000108DE 6100 0000                  		bsr.w	Obj52_Move
000108E2 7200                       		moveq	#0,d1
000108E4 1228 0019                  		move.b	$19(a0),d1
000108E8 4EB9 0000 7C5C             		jsr	(PlatformObject).l
000108EE 6000                       		bra.s	Obj52_ChkDel
000108F0                            ; ===========================================================================
000108F0                            
000108F0                            Obj52_StandOn:				; XREF: Obj52_Index
000108F0 7200                       		moveq	#0,d1
000108F2 1228 0019                  		move.b	$19(a0),d1
000108F6 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
000108FC 3F28 0008                  		move.w	8(a0),-(sp)
00010900 6100 0000                  		bsr.w	Obj52_Move
00010904 341F                       		move.w	(sp)+,d2
00010906 4EB9 0000 833A             		jsr	(MvSonicOnPtfm2).l
0001090C                            
0001090C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001090C 3028 0030                  		move.w	$30(a0),d0
00010910 0240 FF80                  		andi.w	#$FF80,d0
00010914 3238 F700                  		move.w	($FFFFF700).w,d1
00010918 0441 0080                  		subi.w	#$80,d1
0001091C 0241 FF80                  		andi.w	#$FF80,d1
00010920 9041                       		sub.w	d1,d0
00010922 0C40 0280                  		cmpi.w	#$280,d0
00010926 6200 D766                  		bhi.w	DeleteObject
0001092A 6000 D726                  		bra.w	DisplaySprite
0001092E                            ; ===========================================================================
0001092E                            
0001092E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001092E 7000                       		moveq	#0,d0
00010930 1028 0028                  		move.b	$28(a0),d0
00010934 0240 000F                  		andi.w	#$F,d0
00010938 D040                       		add.w	d0,d0
0001093A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001093E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010942                            ; ===========================================================================
00010942 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010946 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001094A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001094E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010952 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010956 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010958                            ; ===========================================================================
00010958                            
00010958                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010958 4E75                       		rts	
0001095A                            ; ===========================================================================
0001095A                            
0001095A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001095A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001095E 323C 0060                  		move.w	#$60,d1
00010962 0828 0000 0022             		btst	#0,$22(a0)
00010968 6700                       		beq.s	loc_FF26
0001096A 4440                       		neg.w	d0
0001096C D041                       		add.w	d1,d0
0001096E                            
0001096E                            loc_FF26:
0001096E 3228 0030                  		move.w	$30(a0),d1
00010972 9240                       		sub.w	d0,d1
00010974 3141 0008                  		move.w	d1,8(a0)
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001097A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010980 6600                       		bne.s	Obj52_02_Wait
00010982 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010986                            
00010986                            Obj52_02_Wait:
00010986 4E75                       		rts	
00010988                            ; ===========================================================================
00010988                            
00010988                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010988 7600                       		moveq	#0,d3
0001098A 1628 0019                  		move.b	$19(a0),d3
0001098E 6100 0000                  		bsr.w	ObjHitWallRight
00010992 4A41                       		tst.w	d1		; has the platform hit a wall?
00010994 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010996 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001099A 3168 0008 0030             		move.w	8(a0),$30(a0)
000109A0 4E75                       		rts	
000109A2                            ; ===========================================================================
000109A2                            
000109A2                            Obj52_03_End:
000109A2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000109A6 4E75                       		rts	
000109A8                            ; ===========================================================================
000109A8                            
000109A8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000109A8 7600                       		moveq	#0,d3
000109AA 1628 0019                  		move.b	$19(a0),d3
000109AE 6100 0000                  		bsr.w	ObjHitWallRight
000109B2 4A41                       		tst.w	d1		; has the platform hit a wall?
000109B4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000109B6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000109BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000109C0 4E75                       		rts	
000109C2                            ; ===========================================================================
000109C2                            
000109C2                            Obj52_05_End:
000109C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000109C6 4E75                       		rts	
000109C8                            ; ===========================================================================
000109C8                            
000109C8                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000109C8 6100 D662                  		bsr.w	SpeedToPos
000109CC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000109D2 6100 0000                  		bsr.w	ObjHitFloor
000109D6 4A41                       		tst.w	d1		; has platform hit the floor?
000109D8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000109DC D368 000C                  		add.w	d1,$C(a0)
000109E0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000109E4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000109E8                            
000109E8                            locret_FFA0:
000109E8 4E75                       		rts	
000109EA                            ; ===========================================================================
000109EA                            
000109EA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000109EA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000109EE 6700                       		beq.s	Obj52_07_ChkDel
000109F0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000109F4                            
000109F4                            Obj52_07_ChkDel:
000109F4 588F                       		addq.l	#4,sp
000109F6 3028 0030                  		move.w	$30(a0),d0
000109FA 0240 FF80                  		andi.w	#$FF80,d0
000109FE 3238 F700                  		move.w	($FFFFF700).w,d1
00010A02 0441 0080                  		subi.w	#$80,d1
00010A06 0241 FF80                  		andi.w	#$FF80,d1
00010A0A 9041                       		sub.w	d1,d0
00010A0C 0C40 0280                  		cmpi.w	#$280,d0
00010A10 6200 D67C                  		bhi.w	DeleteObject
00010A14 4E75                       		rts	
00010A16                            ; ===========================================================================
00010A16                            
00010A16                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010A16 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A1A 323C 0080                  		move.w	#$80,d1
00010A1E 0828 0000 0022             		btst	#0,$22(a0)
00010A24 6700                       		beq.s	loc_FFE2
00010A26 4440                       		neg.w	d0
00010A28 D041                       		add.w	d1,d0
00010A2A                            
00010A2A                            loc_FFE2:
00010A2A 3228 0032                  		move.w	$32(a0),d1
00010A2E 9240                       		sub.w	d0,d1
00010A30 3141 000C                  		move.w	d1,$C(a0)
00010A34 4E75                       		rts	
00010A36                            ; ===========================================================================
00010A36                            
00010A36                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010A36 7600                       		moveq	#0,d3
00010A38 1628 0019                  		move.b	$19(a0),d3
00010A3C D643                       		add.w	d3,d3
00010A3E 7208                       		moveq	#8,d1
00010A40 0828 0000 0022             		btst	#0,$22(a0)
00010A46 6700                       		beq.s	loc_10004
00010A48 4441                       		neg.w	d1
00010A4A 4443                       		neg.w	d3
00010A4C                            
00010A4C                            loc_10004:
00010A4C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010A50 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010A52 3028 0008                  		move.w	8(a0),d0
00010A56 9068 0030                  		sub.w	$30(a0),d0
00010A5A B043                       		cmp.w	d3,d0
00010A5C 6700                       		beq.s	Obj52_0A_Wait
00010A5E D368 0008                  		add.w	d1,8(a0)	; move platform
00010A62 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A68 4E75                       		rts	
00010A6A                            ; ===========================================================================
00010A6A                            
00010A6A                            Obj52_0A_Wait:
00010A6A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A6E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A70 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A76                            
00010A76                            locret_1002E:
00010A76 4E75                       		rts	
00010A78                            ; ===========================================================================
00010A78                            
00010A78                            Obj52_0A_Back:
00010A78 3028 0008                  		move.w	8(a0),d0
00010A7C 9068 0030                  		sub.w	$30(a0),d0
00010A80 6700                       		beq.s	Obj52_0A_Reset
00010A82 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A86 4E75                       		rts	
00010A88                            ; ===========================================================================
00010A88                            
00010A88                            Obj52_0A_Reset:
00010A88 4268 0036                  		clr.w	$36(a0)
00010A8C 5328 0028                  		subq.b	#1,$28(a0)
00010A90 4E75                       		rts	
00010A92                            ; ===========================================================================
00010A92                            ; ---------------------------------------------------------------------------
00010A92                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A92                            ; ---------------------------------------------------------------------------
00010A92                            Map_obj52:
00010A92                            	include "_maps\obj52mz.asm"
00010A92                            ; ---------------------------------------------------------------------------
00010A92                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A92                            ; ---------------------------------------------------------------------------
00010A92 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A96 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A9A 0000                       		dc.w byte_1008F-Map_obj52
00010A9C 01                         byte_10054:	dc.b 1
00010A9D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010AA2 02                         byte_1005A:	dc.b 2
00010AA3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010AA8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010AAD 04                         byte_10065:	dc.b 4
00010AAE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010AB3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010AB8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010ABD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010AC2 04                         byte_1007A:	dc.b 4
00010AC3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010AC8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010ACD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010AD2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010AD7 03                         byte_1008F:	dc.b 3
00010AD8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010ADD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010AE2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010AE8 00                         		even
00010AE8 00                         		even
00010AE8                            
00010AE8                            ; ---------------------------------------------------------------------------
00010AE8                            ; Sprite mappings - moving block (LZ)
00010AE8                            ; ---------------------------------------------------------------------------
00010AE8                            Map_obj52a:
00010AE8                            	include "_maps\obj52lz.asm"
00010AE8                            ; ---------------------------------------------------------------------------
00010AE8                            ; Sprite mappings - moving block (LZ)
00010AE8                            ; ---------------------------------------------------------------------------
00010AE8 0000                       		dc.w byte_100A2-Map_obj52a
00010AEA 01                         byte_100A2:	dc.b 1
00010AEB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010AF0                            		even
00010AF0                            		even
00010AF0                            
00010AF0                            ; ===========================================================================
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            ; Object 55 - Basaran enemy (MZ)
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            
00010AF0                            Obj55:					; XREF: Obj_Index
00010AF0 7000                       		moveq	#0,d0
00010AF2 1028 0024                  		move.b	$24(a0),d0
00010AF6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010AFA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AFE                            ; ===========================================================================
00010AFE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010B00 0000                       		dc.w Obj55_Action-Obj55_Index
00010B02                            ; ===========================================================================
00010B02                            
00010B02                            Obj55_Main:				; XREF: Obj55_Index
00010B02 5428 0024                  		addq.b	#2,$24(a0)
00010B06 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010B0E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010B14 117C 0004 0001             		move.b	#4,1(a0)
00010B1A 117C 000C 0016             		move.b	#$C,$16(a0)
00010B20 117C 0002 0018             		move.b	#2,$18(a0)
00010B26 117C 000B 0020             		move.b	#$B,$20(a0)
00010B2C 117C 0010 0019             		move.b	#$10,$19(a0)
00010B32                            
00010B32                            Obj55_Action:				; XREF: Obj55_Index
00010B32 7000                       		moveq	#0,d0
00010B34 1028 0025                  		move.b	$25(a0),d0
00010B38 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010B3C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010B40 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010B46 6100 A558                  		bsr.w	AnimateSprite
00010B4A 6000 F5AE                  		bra.w	MarkObjGone
00010B4E                            ; ===========================================================================
00010B4E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010B50 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010B52 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010B54 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010B56                            ; ===========================================================================
00010B56                            
00010B56                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010B56 343C 0080                  		move.w	#$80,d2
00010B5A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B5E 6400                       		bcc.s	Obj55_NoDrop
00010B60 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B64 3140 0036                  		move.w	d0,$36(a0)
00010B68 9068 000C                  		sub.w	$C(a0),d0
00010B6C 6500                       		bcs.s	Obj55_NoDrop
00010B6E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B72 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B78 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B7A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B7E D007                       		add.b	d7,d0
00010B80 0200 0007                  		andi.b	#7,d0
00010B84 6600                       		bne.s	Obj55_NoDrop
00010B86 117C 0001 001C             		move.b	#1,$1C(a0)
00010B8C 5428 0025                  		addq.b	#2,$25(a0)
00010B90                            
00010B90                            Obj55_NoDrop:
00010B90 4E75                       		rts	
00010B92                            ; ===========================================================================
00010B92                            
00010B92                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B92 6100 D498                  		bsr.w	SpeedToPos
00010B96 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B9C 343C 0080                  		move.w	#$80,d2
00010BA0 6100 0000                  		bsr.w	Obj55_ChkSonic
00010BA4 3028 0036                  		move.w	$36(a0),d0
00010BA8 9068 000C                  		sub.w	$C(a0),d0
00010BAC 6500                       		bcs.s	Obj55_ChkDel
00010BAE 0C40 0010                  		cmpi.w	#$10,d0
00010BB2 6400                       		bcc.s	locret_10180
00010BB4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010BB8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010BBE 117C 0002 001C             		move.b	#2,$1C(a0)
00010BC4 5428 0025                  		addq.b	#2,$25(a0)
00010BC8                            
00010BC8                            locret_10180:
00010BC8 4E75                       		rts	
00010BCA                            ; ===========================================================================
00010BCA                            
00010BCA                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010BCA 4A28 0001                  		tst.b	1(a0)
00010BCE 6A00 D4BE                  		bpl.w	DeleteObject
00010BD2 4E75                       		rts	
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010BD4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BD8 0200 000F                  		andi.b	#$F,d0
00010BDC 6600                       		bne.s	loc_101A0
00010BDE 303C 00C0                  		move.w	#$C0,d0
00010BE2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010BE8                            
00010BE8                            loc_101A0:
00010BE8 6100 D442                  		bsr.w	SpeedToPos
00010BEC 3038 D008                  		move.w	($FFFFD008).w,d0
00010BF0 9068 0008                  		sub.w	8(a0),d0
00010BF4 6400                       		bcc.s	loc_101B0
00010BF6 4440                       		neg.w	d0
00010BF8                            
00010BF8                            loc_101B0:
00010BF8 0C40 0080                  		cmpi.w	#$80,d0
00010BFC 6500                       		bcs.s	locret_101C6
00010BFE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C02 D007                       		add.b	d7,d0
00010C04 0200 0007                  		andi.b	#7,d0
00010C08 6600                       		bne.s	locret_101C6
00010C0A 5428 0025                  		addq.b	#2,$25(a0)
00010C0E                            
00010C0E                            locret_101C6:
00010C0E 4E75                       		rts	
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010C10 6100 D41A                  		bsr.w	SpeedToPos
00010C14 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010C1A 6100 0000                  		bsr.w	ObjHitCeiling
00010C1E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010C20 6A00                       		bpl.s	locret_101F4	; if not, branch
00010C22 9368 000C                  		sub.w	d1,$C(a0)
00010C26 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010C2C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010C30 4268 0012                  		clr.w	$12(a0)
00010C34 4228 001C                  		clr.b	$1C(a0)
00010C38 4228 0025                  		clr.b	$25(a0)
00010C3C                            
00010C3C                            locret_101F4:
00010C3C 4E75                       		rts	
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010C3E 323C 0100                  		move.w	#$100,d1
00010C42 08E8 0000 0022             		bset	#0,$22(a0)
00010C48 3038 D008                  		move.w	($FFFFD008).w,d0
00010C4C 9068 0008                  		sub.w	8(a0),d0
00010C50 6400                       		bcc.s	loc_10214
00010C52 4440                       		neg.w	d0
00010C54 4441                       		neg.w	d1
00010C56 08A8 0000 0022             		bclr	#0,$22(a0)
00010C5C                            
00010C5C                            loc_10214:
00010C5C B042                       		cmp.w	d2,d0
00010C5E 4E75                       		rts	
00010C60                            ; ===========================================================================
00010C60 6100 D3CA                  		bsr.w	SpeedToPos
00010C64 6100 D3EC                  		bsr.w	DisplaySprite
00010C68 4A28 0001                  		tst.b	1(a0)
00010C6C 6A00 D420                  		bpl.w	DeleteObject
00010C70 4E75                       		rts	
00010C72                            ; ===========================================================================
00010C72                            Ani_obj55:
00010C72                            	include "_anim\obj55.asm"
00010C72                            ; ---------------------------------------------------------------------------
00010C72                            ; Animation script - Basaran enemy
00010C72                            ; ---------------------------------------------------------------------------
00010C72 0000                       		dc.w byte_10230-Ani_obj55
00010C74 0000                       		dc.w byte_10234-Ani_obj55
00010C76 0000                       		dc.w byte_10238-Ani_obj55
00010C78 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C7C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C80 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C86                            		even
00010C86                            		even
00010C86                            
00010C86                            ; ---------------------------------------------------------------------------
00010C86                            ; Sprite mappings - Basaran enemy (MZ)
00010C86                            ; ---------------------------------------------------------------------------
00010C86                            Map_obj55:
00010C86                            	include "_maps\obj55.asm"
00010C86                            ; ---------------------------------------------------------------------------
00010C86                            ; Sprite mappings - Basaran enemy (MZ)
00010C86                            ; ---------------------------------------------------------------------------
00010C86 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C8A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C8E 01                         byte_10246:	dc.b 1
00010C8F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C94 03                         byte_1024C:	dc.b 3
00010C95 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C9A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C9F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010CA4 04                         byte_1025C:	dc.b 4
00010CA5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010CAA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010CAF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010CB4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010CB9 04                         byte_10271:	dc.b 4
00010CBA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010CBF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010CC4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010CC9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010CCE                            		even
00010CCE                            		even
00010CCE                            
00010CCE                            ; ===========================================================================
00010CCE                            ; ---------------------------------------------------------------------------
00010CCE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010CCE                            ; ---------------------------------------------------------------------------
00010CCE                            
00010CCE                            Obj56:					; XREF: Obj_Index
00010CCE 7000                       		moveq	#0,d0
00010CD0 1028 0024                  		move.b	$24(a0),d0
00010CD4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010CD8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010CDC                            ; ===========================================================================
00010CDC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010CDE 0000                       		dc.w Obj56_Action-Obj56_Index
00010CE0                            
00010CE0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010CE2 2020                       		dc.b  $20, $20
00010CE4 1020                       		dc.b  $10, $20
00010CE6 201A                       		dc.b  $20, $1A
00010CE8 1027                       		dc.b  $10, $27
00010CEA 1010                       		dc.b  $10, $10
00010CEC 0820                       		dc.b	8, $20
00010CEE 4010                       		dc.b  $40, $10
00010CF0                            ; ===========================================================================
00010CF0                            
00010CF0                            Obj56_Main:				; XREF: Obj56_Index
00010CF0 5428 0024                  		addq.b	#2,$24(a0)
00010CF4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CFC 317C 4000 0002             		move.w	#$4000,2(a0)
00010D02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D08 6600                       		bne.s	loc_102C8
00010D0A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010D10                            
00010D10                            loc_102C8:
00010D10 117C 0004 0001             		move.b	#4,1(a0)
00010D16 117C 0003 0018             		move.b	#3,$18(a0)
00010D1C 7000                       		moveq	#0,d0
00010D1E 1028 0028                  		move.b	$28(a0),d0
00010D22 E648                       		lsr.w	#3,d0
00010D24 0240 000E                  		andi.w	#$E,d0
00010D28 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010D2C 115A 0019                  		move.b	(a2)+,$19(a0)
00010D30 1152 0016                  		move.b	(a2),$16(a0)
00010D34 E248                       		lsr.w	#1,d0
00010D36 1140 001A                  		move.b	d0,$1A(a0)
00010D3A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D40 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D46 7000                       		moveq	#0,d0
00010D48 1012                       		move.b	(a2),d0
00010D4A D040                       		add.w	d0,d0
00010D4C 3140 003A                  		move.w	d0,$3A(a0)
00010D50 7000                       		moveq	#0,d0
00010D52 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D58 6700                       		beq.s	loc_10332
00010D5A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D5E 0240 000F                  		andi.w	#$F,d0
00010D62 5140                       		subq.w	#8,d0
00010D64 6500                       		bcs.s	loc_10332
00010D66 E548                       		lsl.w	#2,d0
00010D68 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D6C 45F2 0000                  		lea	(a2,d0.w),a2
00010D70 4A52                       		tst.w	(a2)
00010D72 6A00                       		bpl.s	loc_10332
00010D74 0868 0000 0022             		bchg	#0,$22(a0)
00010D7A                            
00010D7A                            loc_10332:
00010D7A 1028 0028                  		move.b	$28(a0),d0
00010D7E 6A00                       		bpl.s	Obj56_Action
00010D80 0200 000F                  		andi.b	#$F,d0
00010D84 1140 003C                  		move.b	d0,$3C(a0)
00010D88 117C 0005 0028             		move.b	#5,$28(a0)
00010D8E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D94 6600                       		bne.s	Obj56_ChkGone
00010D96 117C 000C 0028             		move.b	#$C,$28(a0)
00010D9C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010DA2                            
00010DA2                            Obj56_ChkGone:
00010DA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DA6 7000                       		moveq	#0,d0
00010DA8 1028 0023                  		move.b	$23(a0),d0
00010DAC 6700                       		beq.s	Obj56_Action
00010DAE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DB4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010DBA 6700                       		beq.s	Obj56_Action
00010DBC 5228 0028                  		addq.b	#1,$28(a0)
00010DC0 4268 003A                  		clr.w	$3A(a0)
00010DC4                            
00010DC4                            Obj56_Action:				; XREF: Obj56_Index
00010DC4 3F28 0008                  		move.w	8(a0),-(sp)
00010DC8 7000                       		moveq	#0,d0
00010DCA 1028 0028                  		move.b	$28(a0),d0	; get object type
00010DCE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010DD2 D040                       		add.w	d0,d0
00010DD4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010DD8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010DDC 381F                       		move.w	(sp)+,d4
00010DDE 4A28 0001                  		tst.b	1(a0)
00010DE2 6A00                       		bpl.s	Obj56_ChkDel
00010DE4 7200                       		moveq	#0,d1
00010DE6 1228 0019                  		move.b	$19(a0),d1
00010DEA 0641 000B                  		addi.w	#$B,d1
00010DEE 7400                       		moveq	#0,d2
00010DF0 1428 0016                  		move.b	$16(a0),d2
00010DF4 3602                       		move.w	d2,d3
00010DF6 5243                       		addq.w	#1,d3
00010DF8 6100 F628                  		bsr.w	SolidObject
00010DFC                            
00010DFC                            Obj56_ChkDel:
00010DFC 3028 0034                  		move.w	$34(a0),d0
00010E00 0240 FF80                  		andi.w	#$FF80,d0
00010E04 3238 F700                  		move.w	($FFFFF700).w,d1
00010E08 0441 0080                  		subi.w	#$80,d1
00010E0C 0241 FF80                  		andi.w	#$FF80,d1
00010E10 9041                       		sub.w	d1,d0
00010E12 0C40 0280                  		cmpi.w	#$280,d0
00010E16 6200 D276                  		bhi.w	DeleteObject
00010E1A 6000 D236                  		bra.w	DisplaySprite
00010E1E                            ; ===========================================================================
00010E1E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010E22 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010E26 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010E2A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010E2E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010E32 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010E36 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010E3A                            ; ===========================================================================
00010E3A                            
00010E3A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010E3A 4E75                       		rts	
00010E3C                            ; ===========================================================================
00010E3C                            
00010E3C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010E3C 323C 0040                  		move.w	#$40,d1
00010E40 7000                       		moveq	#0,d0
00010E42 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E46 6000                       		bra.s	Obj56_Move_LR
00010E48                            ; ===========================================================================
00010E48                            
00010E48                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010E48 323C 0080                  		move.w	#$80,d1
00010E4C 7000                       		moveq	#0,d0
00010E4E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E52                            
00010E52                            Obj56_Move_LR:
00010E52 0828 0000 0022             		btst	#0,$22(a0)
00010E58 6700                       		beq.s	loc_10416
00010E5A 4440                       		neg.w	d0
00010E5C D041                       		add.w	d1,d0
00010E5E                            
00010E5E                            loc_10416:
00010E5E 3228 0034                  		move.w	$34(a0),d1
00010E62 9240                       		sub.w	d0,d1
00010E64 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E68 4E75                       		rts	
00010E6A                            ; ===========================================================================
00010E6A                            
00010E6A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E6A 323C 0040                  		move.w	#$40,d1
00010E6E 7000                       		moveq	#0,d0
00010E70 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E74 6000                       		bra.s	Obj56_Move_UD
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E76 323C 0080                  		move.w	#$80,d1
00010E7A 7000                       		moveq	#0,d0
00010E7C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E80                            
00010E80                            Obj56_Move_UD:
00010E80 0828 0000 0022             		btst	#0,$22(a0)
00010E86 6700                       		beq.s	loc_10444
00010E88 4440                       		neg.w	d0
00010E8A D041                       		add.w	d1,d0
00010E8C                            
00010E8C                            loc_10444:
00010E8C 3228 0030                  		move.w	$30(a0),d1
00010E90 9240                       		sub.w	d0,d1
00010E92 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E96 4E75                       		rts	
00010E98                            ; ===========================================================================
00010E98                            
00010E98                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E98 4A28 0038                  		tst.b	$38(a0)
00010E9C 6600                       		bne.s	loc_104A4
00010E9E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010EA4 6600                       		bne.s	loc_1047A	; if not, branch
00010EA6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010EAC 6600                       		bne.s	loc_1047A
00010EAE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EB2 3038 D008                  		move.w	($FFFFD008).w,d0
00010EB6 B068 0008                  		cmp.w	8(a0),d0
00010EBA 6400                       		bcc.s	loc_1047A
00010EBC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010EC2                            
00010EC2                            loc_1047A:
00010EC2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EC6 7000                       		moveq	#0,d0
00010EC8 1028 003C                  		move.b	$3C(a0),d0
00010ECC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010ED2 6700                       		beq.s	loc_104AE
00010ED4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010EDA 6600                       		bne.s	loc_1049E	; if not, branch
00010EDC 0C00 0003                  		cmpi.b	#3,d0
00010EE0 6600                       		bne.s	loc_1049E
00010EE2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EE6                            
00010EE6                            loc_1049E:
00010EE6 117C 0001 0038             		move.b	#1,$38(a0)
00010EEC                            
00010EEC                            loc_104A4:
00010EEC 4A68 003A                  		tst.w	$3A(a0)
00010EF0 6700                       		beq.s	loc_104C8
00010EF2 5568 003A                  		subq.w	#2,$3A(a0)
00010EF6                            
00010EF6                            loc_104AE:
00010EF6 3028 003A                  		move.w	$3A(a0),d0
00010EFA 0828 0000 0022             		btst	#0,$22(a0)
00010F00 6700                       		beq.s	loc_104BC
00010F02 4440                       		neg.w	d0
00010F04                            
00010F04                            loc_104BC:
00010F04 3228 0030                  		move.w	$30(a0),d1
00010F08 D240                       		add.w	d0,d1
00010F0A 3141 000C                  		move.w	d1,$C(a0)
00010F0E 4E75                       		rts	
00010F10                            ; ===========================================================================
00010F10                            
00010F10                            loc_104C8:
00010F10 5228 0028                  		addq.b	#1,$28(a0)
00010F14 4228 0038                  		clr.b	$38(a0)
00010F18 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F1C 7000                       		moveq	#0,d0
00010F1E 1028 0023                  		move.b	$23(a0),d0
00010F22 67D2                       		beq.s	loc_104AE
00010F24 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010F2A 60CA                       		bra.s	loc_104AE
00010F2C                            ; ===========================================================================
00010F2C                            
00010F2C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010F2C 4A28 0038                  		tst.b	$38(a0)
00010F30 6600                       		bne.s	loc_10500
00010F32 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F36 7000                       		moveq	#0,d0
00010F38 1028 003C                  		move.b	$3C(a0),d0
00010F3C 4A32 0000                  		tst.b	(a2,d0.w)
00010F40 6A00                       		bpl.s	loc_10512
00010F42 117C 0001 0038             		move.b	#1,$38(a0)
00010F48                            
00010F48                            loc_10500:
00010F48 7000                       		moveq	#0,d0
00010F4A 1028 0016                  		move.b	$16(a0),d0
00010F4E D040                       		add.w	d0,d0
00010F50 B068 003A                  		cmp.w	$3A(a0),d0
00010F54 6700                       		beq.s	loc_1052C
00010F56 5468 003A                  		addq.w	#2,$3A(a0)
00010F5A                            
00010F5A                            loc_10512:
00010F5A 3028 003A                  		move.w	$3A(a0),d0
00010F5E 0828 0000 0022             		btst	#0,$22(a0)
00010F64 6700                       		beq.s	loc_10520
00010F66 4440                       		neg.w	d0
00010F68                            
00010F68                            loc_10520:
00010F68 3228 0030                  		move.w	$30(a0),d1
00010F6C D240                       		add.w	d0,d1
00010F6E 3141 000C                  		move.w	d1,$C(a0)
00010F72 4E75                       		rts	
00010F74                            ; ===========================================================================
00010F74                            
00010F74                            loc_1052C:
00010F74 5328 0028                  		subq.b	#1,$28(a0)
00010F78 4228 0038                  		clr.b	$38(a0)
00010F7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F80 7000                       		moveq	#0,d0
00010F82 1028 0023                  		move.b	$23(a0),d0
00010F86 67D2                       		beq.s	loc_10512
00010F88 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F8E 60CA                       		bra.s	loc_10512
00010F90                            ; ===========================================================================
00010F90                            
00010F90                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F90 4A28 0038                  		tst.b	$38(a0)
00010F94 6600                       		bne.s	loc_1055E
00010F96 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F9A 6700                       		beq.s	locret_10578
00010F9C 117C 0001 0038             		move.b	#1,$38(a0)
00010FA2 4268 003A                  		clr.w	$3A(a0)
00010FA6                            
00010FA6                            loc_1055E:
00010FA6 5268 0008                  		addq.w	#1,8(a0)
00010FAA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010FB0 5268 003A                  		addq.w	#1,$3A(a0)
00010FB4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010FBA 6600                       		bne.s	locret_10578
00010FBC 4228 0028                  		clr.b	$28(a0)
00010FC0                            
00010FC0                            locret_10578:
00010FC0 4E75                       		rts	
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010FC2 4A28 0038                  		tst.b	$38(a0)
00010FC6 6600                       		bne.s	loc_10598
00010FC8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FCC 7000                       		moveq	#0,d0
00010FCE 1028 003C                  		move.b	$3C(a0),d0
00010FD2 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FD8 6700                       		beq.s	loc_105A2
00010FDA 117C 0001 0038             		move.b	#1,$38(a0)
00010FE0                            
00010FE0                            loc_10598:
00010FE0 4A68 003A                  		tst.w	$3A(a0)
00010FE4 6700                       		beq.s	loc_105C0
00010FE6 5568 003A                  		subq.w	#2,$3A(a0)
00010FEA                            
00010FEA                            loc_105A2:
00010FEA 3028 003A                  		move.w	$3A(a0),d0
00010FEE 0828 0000 0022             		btst	#0,$22(a0)
00010FF4 6700                       		beq.s	loc_105B4
00010FF6 4440                       		neg.w	d0
00010FF8 0640 0080                  		addi.w	#$80,d0
00010FFC                            
00010FFC                            loc_105B4:
00010FFC 3228 0034                  		move.w	$34(a0),d1
00011000 D240                       		add.w	d0,d1
00011002 3141 0008                  		move.w	d1,8(a0)
00011006 4E75                       		rts	
00011008                            ; ===========================================================================
00011008                            
00011008                            loc_105C0:
00011008 5228 0028                  		addq.b	#1,$28(a0)
0001100C 4228 0038                  		clr.b	$38(a0)
00011010 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011014 7000                       		moveq	#0,d0
00011016 1028 0023                  		move.b	$23(a0),d0
0001101A 67CE                       		beq.s	loc_105A2
0001101C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011022 60C6                       		bra.s	loc_105A2
00011024                            ; ===========================================================================
00011024                            
00011024                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011024 4A28 0038                  		tst.b	$38(a0)
00011028 6600                       		bne.s	loc_105F8
0001102A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001102E 7000                       		moveq	#0,d0
00011030 1028 003C                  		move.b	$3C(a0),d0
00011034 4A32 0000                  		tst.b	(a2,d0.w)
00011038 6A00                       		bpl.s	loc_10606
0001103A 117C 0001 0038             		move.b	#1,$38(a0)
00011040                            
00011040                            loc_105F8:
00011040 303C 0080                  		move.w	#$80,d0
00011044 B068 003A                  		cmp.w	$3A(a0),d0
00011048 6700                       		beq.s	loc_10624
0001104A 5468 003A                  		addq.w	#2,$3A(a0)
0001104E                            
0001104E                            loc_10606:
0001104E 3028 003A                  		move.w	$3A(a0),d0
00011052 0828 0000 0022             		btst	#0,$22(a0)
00011058 6700                       		beq.s	loc_10618
0001105A 4440                       		neg.w	d0
0001105C 0640 0080                  		addi.w	#$80,d0
00011060                            
00011060                            loc_10618:
00011060 3228 0034                  		move.w	$34(a0),d1
00011064 D240                       		add.w	d0,d1
00011066 3141 0008                  		move.w	d1,8(a0)
0001106A 4E75                       		rts	
0001106C                            ; ===========================================================================
0001106C                            
0001106C                            loc_10624:
0001106C 5328 0028                  		subq.b	#1,$28(a0)
00011070 4228 0038                  		clr.b	$38(a0)
00011074 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011078 7000                       		moveq	#0,d0
0001107A 1028 0023                  		move.b	$23(a0),d0
0001107E 67CE                       		beq.s	loc_10606
00011080 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011086 60C6                       		bra.s	loc_10606
00011088                            ; ===========================================================================
00011088                            
00011088                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011088 323C 0010                  		move.w	#$10,d1
0001108C 7000                       		moveq	#0,d0
0001108E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011092 E248                       		lsr.w	#1,d0
00011094 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011098 6000                       		bra.s	Obj56_Move_Sqr
0001109A                            ; ===========================================================================
0001109A                            
0001109A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001109A 323C 0030                  		move.w	#$30,d1
0001109E 7000                       		moveq	#0,d0
000110A0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000110A4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000110A8 6000                       		bra.s	Obj56_Move_Sqr
000110AA                            ; ===========================================================================
000110AA                            
000110AA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000110AA 323C 0050                  		move.w	#$50,d1
000110AE 7000                       		moveq	#0,d0
000110B0 1038 FE90                  		move.b	($FFFFFE90).w,d0
000110B4 3638 FE92                  		move.w	($FFFFFE92).w,d3
000110B8 6000                       		bra.s	Obj56_Move_Sqr
000110BA                            ; ===========================================================================
000110BA                            
000110BA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000110BA 323C 0070                  		move.w	#$70,d1
000110BE 7000                       		moveq	#0,d0
000110C0 1038 FE94                  		move.b	($FFFFFE94).w,d0
000110C4 3638 FE96                  		move.w	($FFFFFE96).w,d3
000110C8                            
000110C8                            Obj56_Move_Sqr:
000110C8 4A43                       		tst.w	d3
000110CA 6600                       		bne.s	loc_1068E
000110CC 5228 0022                  		addq.b	#1,$22(a0)
000110D0 0228 0003 0022             		andi.b	#3,$22(a0)
000110D6                            
000110D6                            loc_1068E:
000110D6 1428 0022                  		move.b	$22(a0),d2
000110DA 0202 0003                  		andi.b	#3,d2
000110DE 6600                       		bne.s	loc_106AE
000110E0 9041                       		sub.w	d1,d0
000110E2 D068 0034                  		add.w	$34(a0),d0
000110E6 3140 0008                  		move.w	d0,8(a0)
000110EA 4441                       		neg.w	d1
000110EC D268 0030                  		add.w	$30(a0),d1
000110F0 3141 000C                  		move.w	d1,$C(a0)
000110F4 4E75                       		rts	
000110F6                            ; ===========================================================================
000110F6                            
000110F6                            loc_106AE:
000110F6 5302                       		subq.b	#1,d2
000110F8 6600                       		bne.s	loc_106CC
000110FA 5341                       		subq.w	#1,d1
000110FC 9041                       		sub.w	d1,d0
000110FE 4440                       		neg.w	d0
00011100 D068 0030                  		add.w	$30(a0),d0
00011104 3140 000C                  		move.w	d0,$C(a0)
00011108 5241                       		addq.w	#1,d1
0001110A D268 0034                  		add.w	$34(a0),d1
0001110E 3141 0008                  		move.w	d1,8(a0)
00011112 4E75                       		rts	
00011114                            ; ===========================================================================
00011114                            
00011114                            loc_106CC:
00011114 5302                       		subq.b	#1,d2
00011116 6600                       		bne.s	loc_106EA
00011118 5341                       		subq.w	#1,d1
0001111A 9041                       		sub.w	d1,d0
0001111C 4440                       		neg.w	d0
0001111E D068 0034                  		add.w	$34(a0),d0
00011122 3140 0008                  		move.w	d0,8(a0)
00011126 5241                       		addq.w	#1,d1
00011128 D268 0030                  		add.w	$30(a0),d1
0001112C 3141 000C                  		move.w	d1,$C(a0)
00011130 4E75                       		rts	
00011132                            ; ===========================================================================
00011132                            
00011132                            loc_106EA:
00011132 9041                       		sub.w	d1,d0
00011134 D068 0030                  		add.w	$30(a0),d0
00011138 3140 000C                  		move.w	d0,$C(a0)
0001113C 4441                       		neg.w	d1
0001113E D268 0034                  		add.w	$34(a0),d1
00011142 3141 0008                  		move.w	d1,8(a0)
00011146 4E75                       		rts	
00011148                            ; ===========================================================================
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011148                            ; ---------------------------------------------------------------------------
00011148                            Map_obj56:
00011148                            	include "_maps\obj56.asm"
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011148                            ; ---------------------------------------------------------------------------
00011148 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001114C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011150 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011154 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011158 01                         byte_10710:	dc.b 1
00011159 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001115E 04                         byte_10716:	dc.b 4
0001115F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011164 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011169 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001116E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011173 02                         byte_1072B:	dc.b 2
00011174 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011179 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001117E 04                         byte_10736:	dc.b 4
0001117F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011184 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011189 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001118E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011193 03                         byte_1074B:	dc.b 3
00011194 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011199 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001119E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000111A3 01                         byte_1075B:	dc.b 1
000111A4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000111A9 02                         byte_10761:	dc.b 2
000111AA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000111AF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000111B4 04                         byte_1076C:	dc.b 4
000111B5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000111BA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000111BF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000111C4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000111CA 00                         		even
000111CA 00                         		even
000111CA                            
000111CA                            ; ===========================================================================
000111CA                            ; ---------------------------------------------------------------------------
000111CA                            ; Object 57 - spiked balls (SYZ, LZ)
000111CA                            ; ---------------------------------------------------------------------------
000111CA                            
000111CA                            Obj57:					; XREF: Obj_Index
000111CA 7000                       		moveq	#0,d0
000111CC 1028 0024                  		move.b	$24(a0),d0
000111D0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000111D4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000111D8                            ; ===========================================================================
000111D8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000111DA 0000                       		dc.w Obj57_Move-Obj57_Index
000111DC 0000                       		dc.w Obj57_Display-Obj57_Index
000111DE                            ; ===========================================================================
000111DE                            
000111DE                            Obj57_Main:				; XREF: Obj57_Index
000111DE 5428 0024                  		addq.b	#2,$24(a0)
000111E2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000111EA 317C 03BA 0002             		move.w	#$3BA,2(a0)
000111F0 117C 0004 0001             		move.b	#4,1(a0)
000111F6 117C 0004 0018             		move.b	#4,$18(a0)
000111FC 117C 0008 0019             		move.b	#8,$19(a0)
00011202 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011208 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001120E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011214 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001121A 6600                       		bne.s	loc_107E8
0001121C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011222 317C 0310 0002             		move.w	#$310,2(a0)
00011228 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011230                            
00011230                            loc_107E8:
00011230 1228 0028                  		move.b	$28(a0),d1	; get object type
00011234 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011238 4881                       		ext.w	d1
0001123A E741                       		asl.w	#3,d1		; multiply by 8
0001123C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011240 1028 0022                  		move.b	$22(a0),d0
00011244 E418                       		ror.b	#2,d0
00011246 0200 00C0                  		andi.b	#-$40,d0
0001124A 1140 0026                  		move.b	d0,$26(a0)
0001124E 45E8 0029                  		lea	$29(a0),a2
00011252 1228 0028                  		move.b	$28(a0),d1	; get object type
00011256 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001125A 14FC 0000                  		move.b	#0,(a2)+
0001125E 3601                       		move.w	d1,d3
00011260 E94B                       		lsl.w	#4,d3
00011262 1143 003C                  		move.b	d3,$3C(a0)
00011266 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011268 6500                       		bcs.s	loc_10894
0001126A 0828 0003 0028             		btst	#3,$28(a0)
00011270 6700                       		beq.s	Obj57_MakeChain
00011272 5341                       		subq.w	#1,d1
00011274 6500                       		bcs.s	loc_10894
00011276                            
00011276                            Obj57_MakeChain:
00011276 6100 D260                  		bsr.w	SingleObjLoad
0001127A 6600                       		bne.s	loc_10894
0001127C 5228 0029                  		addq.b	#1,$29(a0)
00011280 3A09                       		move.w	a1,d5
00011282 0445 D000                  		subi.w	#-$3000,d5
00011286 EC4D                       		lsr.w	#6,d5
00011288 0245 007F                  		andi.w	#$7F,d5
0001128C 14C5                       		move.b	d5,(a2)+
0001128E 137C 0004 0024             		move.b	#4,$24(a1)
00011294 1290                       		move.b	0(a0),0(a1)
00011296 2368 0004 0004             		move.l	4(a0),4(a1)
0001129C 3368 0002 0002             		move.w	2(a0),2(a1)
000112A2 1368 0001 0001             		move.b	1(a0),1(a1)
000112A8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000112AE 1368 0019 0019             		move.b	$19(a0),$19(a1)
000112B4 1368 0020 0020             		move.b	$20(a0),$20(a1)
000112BA 0403 0010                  		subi.b	#$10,d3
000112BE 1343 003C                  		move.b	d3,$3C(a1)
000112C2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000112C8 6600                       		bne.s	loc_10890
000112CA 4A03                       		tst.b	d3
000112CC 6600                       		bne.s	loc_10890
000112CE 137C 0002 001A             		move.b	#2,$1A(a1)
000112D4                            
000112D4                            loc_10890:
000112D4 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000112D8                            
000112D8                            loc_10894:
000112D8 3A08                       		move.w	a0,d5
000112DA 0445 D000                  		subi.w	#-$3000,d5
000112DE EC4D                       		lsr.w	#6,d5
000112E0 0245 007F                  		andi.w	#$7F,d5
000112E4 14C5                       		move.b	d5,(a2)+
000112E6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112EC 6600                       		bne.s	Obj57_Move
000112EE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000112F4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000112FA                            
000112FA                            Obj57_Move:				; XREF: Obj57_Index
000112FA 6100 0000                  		bsr.w	Obj57_MoveSub
000112FE 6000 0000                  		bra.w	Obj57_ChkDel
00011302                            ; ===========================================================================
00011302                            
00011302                            Obj57_MoveSub:				; XREF: Obj57_Move
00011302 3028 003E                  		move.w	$3E(a0),d0
00011306 D168 0026                  		add.w	d0,$26(a0)
0001130A 1028 0026                  		move.b	$26(a0),d0
0001130E 4EB9 0000 2D3A             		jsr	(CalcSine).l
00011314 3428 0038                  		move.w	$38(a0),d2
00011318 3628 003A                  		move.w	$3A(a0),d3
0001131C 45E8 0029                  		lea	$29(a0),a2
00011320 7C00                       		moveq	#0,d6
00011322 1C1A                       		move.b	(a2)+,d6
00011324                            
00011324                            Obj57_MoveLoop:
00011324 7800                       		moveq	#0,d4
00011326 181A                       		move.b	(a2)+,d4
00011328 ED4C                       		lsl.w	#6,d4
0001132A 0684 00FF D000             		addi.l	#$FFD000,d4
00011330 2244                       		movea.l	d4,a1
00011332 7800                       		moveq	#0,d4
00011334 1829 003C                  		move.b	$3C(a1),d4
00011338 2A04                       		move.l	d4,d5
0001133A C9C0                       		muls.w	d0,d4
0001133C E084                       		asr.l	#8,d4
0001133E CBC1                       		muls.w	d1,d5
00011340 E085                       		asr.l	#8,d5
00011342 D842                       		add.w	d2,d4
00011344 DA43                       		add.w	d3,d5
00011346 3344 000C                  		move.w	d4,$C(a1)
0001134A 3345 0008                  		move.w	d5,8(a1)
0001134E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011352 4E75                       		rts	
00011354                            ; ===========================================================================
00011354                            
00011354                            Obj57_ChkDel:				; XREF: Obj57_Move
00011354 3028 003A                  		move.w	$3A(a0),d0
00011358 0240 FF80                  		andi.w	#$FF80,d0
0001135C 3238 F700                  		move.w	($FFFFF700).w,d1
00011360 0441 0080                  		subi.w	#$80,d1
00011364 0241 FF80                  		andi.w	#$FF80,d1
00011368 9041                       		sub.w	d1,d0
0001136A 0C40 0280                  		cmpi.w	#$280,d0
0001136E 6200 0000                  		bhi.w	Obj57_Delete
00011372 6000 CCDE                  		bra.w	DisplaySprite
00011376                            ; ===========================================================================
00011376                            
00011376                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011376 7400                       		moveq	#0,d2
00011378 45E8 0029                  		lea	$29(a0),a2
0001137C 141A                       		move.b	(a2)+,d2
0001137E                            
0001137E                            Obj57_DelLoop:
0001137E 7000                       		moveq	#0,d0
00011380 101A                       		move.b	(a2)+,d0
00011382 ED48                       		lsl.w	#6,d0
00011384 0680 00FF D000             		addi.l	#$FFD000,d0
0001138A 2240                       		movea.l	d0,a1
0001138C 6100 CD02                  		bsr.w	DeleteObject2
00011390 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011394                            
00011394 4E75                       		rts	
00011396                            ; ===========================================================================
00011396                            
00011396                            Obj57_Display:				; XREF: Obj57_Index
00011396 6000 CCBA                  		bra.w	DisplaySprite
0001139A                            ; ===========================================================================
0001139A                            ; ---------------------------------------------------------------------------
0001139A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001139A                            ; ---------------------------------------------------------------------------
0001139A                            Map_obj57:
0001139A                            	include "_maps\obj57syz.asm"
0001139A                            ; ---------------------------------------------------------------------------
0001139A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001139A                            ; ---------------------------------------------------------------------------
0001139A 0000                       		dc.w byte_10958-Map_obj57
0001139C 01                         byte_10958:	dc.b 1
0001139D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000113A2                            		even
000113A2                            		even
000113A2                            
000113A2                            ; ---------------------------------------------------------------------------
000113A2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000113A2                            ; ---------------------------------------------------------------------------
000113A2                            Map_obj57a:
000113A2                            	include "_maps\obj57lz.asm"
000113A2                            ; ---------------------------------------------------------------------------
000113A2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000113A2                            ; ---------------------------------------------------------------------------
000113A2 0000                       		dc.w byte_10964-Map_obj57a
000113A4 0000                       		dc.w byte_1096A-Map_obj57a
000113A6 0000                       		dc.w byte_10970-Map_obj57a
000113A8 01                         byte_10964:	dc.b 1
000113A9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000113AE 01                         byte_1096A:	dc.b 1
000113AF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000113B4 01                         byte_10970:	dc.b 1
000113B5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000113BA                            		even
000113BA                            		even
000113BA                            
000113BA                            ; ===========================================================================
000113BA                            ; ---------------------------------------------------------------------------
000113BA                            ; Object 58 - giant spiked balls (SYZ)
000113BA                            ; ---------------------------------------------------------------------------
000113BA                            
000113BA                            Obj58:					; XREF: Obj_Index
000113BA 7000                       		moveq	#0,d0
000113BC 1028 0024                  		move.b	$24(a0),d0
000113C0 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000113C4 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000113C8                            ; ===========================================================================
000113C8 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000113CA 0000                       		dc.w Obj58_Move-Obj58_Index
000113CC                            ; ===========================================================================
000113CC                            
000113CC                            Obj58_Main:				; XREF: Obj58_Index
000113CC 5428 0024                  		addq.b	#2,$24(a0)
000113D0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000113D8 317C 0396 0002             		move.w	#$396,2(a0)
000113DE 117C 0004 0001             		move.b	#4,1(a0)
000113E4 117C 0004 0018             		move.b	#4,$18(a0)
000113EA 117C 0018 0019             		move.b	#$18,$19(a0)
000113F0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000113F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113FC 117C 0086 0020             		move.b	#$86,$20(a0)
00011402 1228 0028                  		move.b	$28(a0),d1	; get object type
00011406 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001140A 4881                       		ext.w	d1
0001140C E741                       		asl.w	#3,d1		; multiply by 8
0001140E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011412 1028 0022                  		move.b	$22(a0),d0
00011416 E418                       		ror.b	#2,d0
00011418 0200 00C0                  		andi.b	#$C0,d0
0001141C 1140 0026                  		move.b	d0,$26(a0)
00011420 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011426                            
00011426                            Obj58_Move:				; XREF: Obj58_Index
00011426 7000                       		moveq	#0,d0
00011428 1028 0028                  		move.b	$28(a0),d0	; get object type
0001142C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011430 D040                       		add.w	d0,d0
00011432 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011436 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001143A 3028 003A                  		move.w	$3A(a0),d0
0001143E 0240 FF80                  		andi.w	#$FF80,d0
00011442 3238 F700                  		move.w	($FFFFF700).w,d1
00011446 0441 0080                  		subi.w	#$80,d1
0001144A 0241 FF80                  		andi.w	#$FF80,d1
0001144E 9041                       		sub.w	d1,d0
00011450 0C40 0280                  		cmpi.w	#$280,d0
00011454 6200 CC38                  		bhi.w	DeleteObject
00011458 6000 CBF8                  		bra.w	DisplaySprite
0001145C                            ; ===========================================================================
0001145C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001145E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011460 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011462 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011464                            ; ===========================================================================
00011464                            
00011464                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011464 4E75                       		rts	
00011466                            ; ===========================================================================
00011466                            
00011466                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011466 323C 0060                  		move.w	#$60,d1
0001146A 7000                       		moveq	#0,d0
0001146C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011470 0828 0000 0022             		btst	#0,$22(a0)
00011476 6700                       		beq.s	loc_10A38
00011478 4440                       		neg.w	d0
0001147A D041                       		add.w	d1,d0
0001147C                            
0001147C                            loc_10A38:
0001147C 3228 003A                  		move.w	$3A(a0),d1
00011480 9240                       		sub.w	d0,d1
00011482 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011486 4E75                       		rts	
00011488                            ; ===========================================================================
00011488                            
00011488                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011488 323C 0060                  		move.w	#$60,d1
0001148C 7000                       		moveq	#0,d0
0001148E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011492 0828 0000 0022             		btst	#0,$22(a0)
00011498 6700                       		beq.s	loc_10A5C
0001149A 4440                       		neg.w	d0
0001149C 0640 0080                  		addi.w	#$80,d0
000114A0                            
000114A0                            loc_10A5C:
000114A0 3228 0038                  		move.w	$38(a0),d1
000114A4 9240                       		sub.w	d0,d1
000114A6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000114AA 4E75                       		rts	
000114AC                            ; ===========================================================================
000114AC                            
000114AC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000114AC 3028 003E                  		move.w	$3E(a0),d0
000114B0 D168 0026                  		add.w	d0,$26(a0)
000114B4 1028 0026                  		move.b	$26(a0),d0
000114B8 4EB9 0000 2D3A             		jsr	(CalcSine).l
000114BE 3428 0038                  		move.w	$38(a0),d2
000114C2 3628 003A                  		move.w	$3A(a0),d3
000114C6 7800                       		moveq	#0,d4
000114C8 1828 003C                  		move.b	$3C(a0),d4
000114CC 2A04                       		move.l	d4,d5
000114CE C9C0                       		muls.w	d0,d4
000114D0 E084                       		asr.l	#8,d4
000114D2 CBC1                       		muls.w	d1,d5
000114D4 E085                       		asr.l	#8,d5
000114D6 D842                       		add.w	d2,d4
000114D8 DA43                       		add.w	d3,d5
000114DA 3144 000C                  		move.w	d4,$C(a0)
000114DE 3145 0008                  		move.w	d5,8(a0)
000114E2 4E75                       		rts	
000114E4                            ; ===========================================================================
000114E4                            ; ---------------------------------------------------------------------------
000114E4                            ; Sprite mappings - SBZ	spiked ball on a chain
000114E4                            ; ---------------------------------------------------------------------------
000114E4                            Map_obj15b:
000114E4                            	include "_maps\obj15sbz.asm"
000114E4                            ; ---------------------------------------------------------------------------
000114E4                            ; Sprite mappings - spiked ball on a chain (SBZ)
000114E4                            ; ---------------------------------------------------------------------------
000114E4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000114E8 0000                       		dc.w byte_10AC6-Map_obj15b
000114EA 05                         byte_10AA6:	dc.b 5
000114EB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000114F0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000114F5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000114FA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114FF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011504 01                         byte_10AC0:	dc.b 1
00011505 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001150A 02                         byte_10AC6:	dc.b 2
0001150B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011510 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011516 00                         		even
00011516 00                         		even
00011516                            
00011516                            ; ===========================================================================
00011516                            ; ---------------------------------------------------------------------------
00011516                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011516                            ; ---------------------------------------------------------------------------
00011516                            
00011516                            Obj59:					; XREF: Obj_Index
00011516 7000                       		moveq	#0,d0
00011518 1028 0024                  		move.b	$24(a0),d0
0001151C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011520 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011524 3028 0032                  		move.w	$32(a0),d0
00011528 0240 FF80                  		andi.w	#$FF80,d0
0001152C 3238 F700                  		move.w	($FFFFF700).w,d1
00011530 0441 0080                  		subi.w	#$80,d1
00011534 0241 FF80                  		andi.w	#$FF80,d1
00011538 9041                       		sub.w	d1,d0
0001153A 0C40 0280                  		cmpi.w	#$280,d0
0001153E 6200 CB4E                  		bhi.w	DeleteObject
00011542 6000 CB0E                  		bra.w	DisplaySprite
00011546                            ; ===========================================================================
00011546 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011548 0000                       		dc.w Obj59_Platform-Obj59_Index
0001154A 0000                       		dc.w Obj59_Action-Obj59_Index
0001154C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001154E                            
0001154E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011550                            
00011550 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011552 2001                       		dc.b $20, 1
00011554 3401                       		dc.b $34, 1
00011556 1003                       		dc.b $10, 3
00011558 2003                       		dc.b $20, 3
0001155A 3403                       		dc.b $34, 3
0001155C 1401                       		dc.b $14, 1
0001155E 2401                       		dc.b $24, 1
00011560 2C01                       		dc.b $2C, 1
00011562 1403                       		dc.b $14, 3
00011564 2403                       		dc.b $24, 3
00011566 2C03                       		dc.b $2C, 3
00011568 2005                       		dc.b $20, 5
0001156A 2007                       		dc.b $20, 7
0001156C 3009                       		dc.b $30, 9
0001156E                            ; ===========================================================================
0001156E                            
0001156E                            Obj59_Main:				; XREF: Obj59_Index
0001156E 5428 0024                  		addq.b	#2,$24(a0)
00011572 7000                       		moveq	#0,d0
00011574 1028 0028                  		move.b	$28(a0),d0
00011578 6A00                       		bpl.s	Obj59_Main2
0001157A 5828 0024                  		addq.b	#4,$24(a0)
0001157E 0240 007F                  		andi.w	#$7F,d0
00011582 C0FC 0006                  		mulu.w	#6,d0
00011586 3140 003C                  		move.w	d0,$3C(a0)
0001158A 3140 003E                  		move.w	d0,$3E(a0)
0001158E 588F                       		addq.l	#4,sp
00011590 4E75                       		rts	
00011592                            ; ===========================================================================
00011592                            
00011592                            Obj59_Main2:
00011592 E648                       		lsr.w	#3,d0
00011594 0240 001E                  		andi.w	#$1E,d0
00011598 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001159C 115A 0019                  		move.b	(a2)+,$19(a0)
000115A0 115A 001A                  		move.b	(a2)+,$1A(a0)
000115A4 7000                       		moveq	#0,d0
000115A6 1028 0028                  		move.b	$28(a0),d0
000115AA D040                       		add.w	d0,d0
000115AC 0240 001E                  		andi.w	#$1E,d0
000115B0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000115B4 101A                       		move.b	(a2)+,d0
000115B6 E548                       		lsl.w	#2,d0
000115B8 3140 003C                  		move.w	d0,$3C(a0)
000115BC 115A 0028                  		move.b	(a2)+,$28(a0)
000115C0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000115C8 317C 4000 0002             		move.w	#$4000,2(a0)
000115CE 117C 0004 0001             		move.b	#4,1(a0)
000115D4 117C 0004 0018             		move.b	#4,$18(a0)
000115DA 3168 0008 0032             		move.w	8(a0),$32(a0)
000115E0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115E6                            
000115E6                            Obj59_Platform:				; XREF: Obj59_Index
000115E6 7200                       		moveq	#0,d1
000115E8 1228 0019                  		move.b	$19(a0),d1
000115EC 4EB9 0000 7C5C             		jsr	(PlatformObject).l
000115F2 6000 0000                  		bra.w	Obj59_Types
000115F6                            ; ===========================================================================
000115F6                            
000115F6                            Obj59_Action:				; XREF: Obj59_Index
000115F6 7200                       		moveq	#0,d1
000115F8 1228 0019                  		move.b	$19(a0),d1
000115FC 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
00011602 3F28 0008                  		move.w	8(a0),-(sp)
00011606 6100 0000                  		bsr.w	Obj59_Types
0001160A 341F                       		move.w	(sp)+,d2
0001160C 4A10                       		tst.b	0(a0)
0001160E 6700                       		beq.s	locret_10BD4
00011610 4EF9 0000 833A             		jmp	(MvSonicOnPtfm2).l
00011616                            ; ===========================================================================
00011616                            
00011616                            locret_10BD4:
00011616 4E75                       		rts	
00011618                            ; ===========================================================================
00011618                            
00011618                            Obj59_Types:
00011618 7000                       		moveq	#0,d0
0001161A 1028 0028                  		move.b	$28(a0),d0
0001161E 0240 000F                  		andi.w	#$F,d0
00011622 D040                       		add.w	d0,d0
00011624 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011628 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001162C                            ; ===========================================================================
0001162C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011630 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011634 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011638 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001163C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011640                            ; ===========================================================================
00011640                            
00011640                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011640 4E75                       		rts	
00011642                            ; ===========================================================================
00011642                            
00011642                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011642 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011648 6600                       		bne.s	locret_10C0C
0001164A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001164E                            
0001164E                            locret_10C0C:
0001164E 4E75                       		rts	
00011650                            ; ===========================================================================
00011650                            
00011650                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011650 6100 0000                  		bsr.w	Obj59_Move
00011654 3028 0034                  		move.w	$34(a0),d0
00011658 4440                       		neg.w	d0
0001165A D068 0030                  		add.w	$30(a0),d0
0001165E 3140 000C                  		move.w	d0,$C(a0)
00011662 4E75                       		rts	
00011664                            ; ===========================================================================
00011664                            
00011664                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011664 6100 0000                  		bsr.w	Obj59_Move
00011668 3028 0034                  		move.w	$34(a0),d0
0001166C D068 0030                  		add.w	$30(a0),d0
00011670 3140 000C                  		move.w	d0,$C(a0)
00011674 4E75                       		rts	
00011676                            ; ===========================================================================
00011676                            
00011676                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011676 6100 0000                  		bsr.w	Obj59_Move
0001167A 3028 0034                  		move.w	$34(a0),d0
0001167E E240                       		asr.w	#1,d0
00011680 4440                       		neg.w	d0
00011682 D068 0030                  		add.w	$30(a0),d0
00011686 3140 000C                  		move.w	d0,$C(a0)
0001168A 3028 0034                  		move.w	$34(a0),d0
0001168E D068 0032                  		add.w	$32(a0),d0
00011692 3140 0008                  		move.w	d0,8(a0)
00011696 4E75                       		rts	
00011698                            ; ===========================================================================
00011698                            
00011698                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011698 6100 0000                  		bsr.w	Obj59_Move
0001169C 3028 0034                  		move.w	$34(a0),d0
000116A0 E240                       		asr.w	#1,d0
000116A2 D068 0030                  		add.w	$30(a0),d0
000116A6 3140 000C                  		move.w	d0,$C(a0)
000116AA 3028 0034                  		move.w	$34(a0),d0
000116AE 4440                       		neg.w	d0
000116B0 D068 0032                  		add.w	$32(a0),d0
000116B4 3140 0008                  		move.w	d0,8(a0)
000116B8 4E75                       		rts	
000116BA                            ; ===========================================================================
000116BA                            
000116BA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000116BA 6100 0000                  		bsr.w	Obj59_Move
000116BE 3028 0034                  		move.w	$34(a0),d0
000116C2 4440                       		neg.w	d0
000116C4 D068 0030                  		add.w	$30(a0),d0
000116C8 3140 000C                  		move.w	d0,$C(a0)
000116CC 4A28 0028                  		tst.b	$28(a0)
000116D0 6700 0000                  		beq.w	loc_10C94
000116D4 4E75                       		rts	
000116D6                            ; ===========================================================================
000116D6                            
000116D6                            loc_10C94:
000116D6 0828 0003 0022             		btst	#3,$22(a0)
000116DC 6700                       		beq.s	Obj59_Delete
000116DE 08E9 0001 0022             		bset	#1,$22(a1)
000116E4 08A9 0003 0022             		bclr	#3,$22(a1)
000116EA 137C 0002 0024             		move.b	#2,$24(a1)
000116F0                            
000116F0                            Obj59_Delete:
000116F0 6000 C99C                  		bra.w	DeleteObject
000116F4                            
000116F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116F4                            
000116F4                            
000116F4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000116F4 3028 0038                  		move.w	$38(a0),d0
000116F8 4A28 003A                  		tst.b	$3A(a0)
000116FC 6600                       		bne.s	loc_10CC8
000116FE 0C40 0800                  		cmpi.w	#$800,d0
00011702 6400                       		bcc.s	loc_10CD0
00011704 0640 0010                  		addi.w	#$10,d0
00011708 6000                       		bra.s	loc_10CD0
0001170A                            ; ===========================================================================
0001170A                            
0001170A                            loc_10CC8:
0001170A 4A40                       		tst.w	d0
0001170C 6700                       		beq.s	loc_10CD0
0001170E 0440 0010                  		subi.w	#$10,d0
00011712                            
00011712                            loc_10CD0:
00011712 3140 0038                  		move.w	d0,$38(a0)
00011716 48C0                       		ext.l	d0
00011718 E180                       		asl.l	#8,d0
0001171A D0A8 0034                  		add.l	$34(a0),d0
0001171E 2140 0034                  		move.l	d0,$34(a0)
00011722 4840                       		swap	d0
00011724 3428 003C                  		move.w	$3C(a0),d2
00011728 B042                       		cmp.w	d2,d0
0001172A 6300                       		bls.s	loc_10CF0
0001172C 117C 0001 003A             		move.b	#1,$3A(a0)
00011732                            
00011732                            loc_10CF0:
00011732 D442                       		add.w	d2,d2
00011734 B042                       		cmp.w	d2,d0
00011736 6600                       		bne.s	locret_10CFA
00011738 4228 0028                  		clr.b	$28(a0)
0001173C                            
0001173C                            locret_10CFA:
0001173C 4E75                       		rts	
0001173E                            ; End of function Obj59_Move
0001173E                            
0001173E                            ; ===========================================================================
0001173E                            
0001173E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001173E 5368 003C                  		subq.w	#1,$3C(a0)
00011742 6600                       		bne.s	Obj59_ChkDel
00011744 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001174A 6100 CD8C                  		bsr.w	SingleObjLoad
0001174E 6600                       		bne.s	Obj59_ChkDel
00011750 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011754 3368 0008 0008             		move.w	8(a0),8(a1)
0001175A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011760 137C 000E 0028             		move.b	#$E,$28(a1)
00011766                            
00011766                            Obj59_ChkDel:
00011766 588F                       		addq.l	#4,sp
00011768 3028 0008                  		move.w	8(a0),d0
0001176C 0240 FF80                  		andi.w	#$FF80,d0
00011770 3238 F700                  		move.w	($FFFFF700).w,d1
00011774 0441 0080                  		subi.w	#$80,d1
00011778 0241 FF80                  		andi.w	#$FF80,d1
0001177C 9041                       		sub.w	d1,d0
0001177E 0C40 0280                  		cmpi.w	#$280,d0
00011782 6200 C90A                  		bhi.w	DeleteObject
00011786 4E75                       		rts	
00011788                            ; ===========================================================================
00011788                            ; ---------------------------------------------------------------------------
00011788                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011788                            ; ---------------------------------------------------------------------------
00011788                            Map_obj59:
00011788                            	include "_maps\obj59.asm"
00011788                            ; ---------------------------------------------------------------------------
00011788                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011788                            ; ---------------------------------------------------------------------------
00011788 0000                       		dc.w byte_10D4A-Map_obj59
0001178A 03                         byte_10D4A:	dc.b 3
0001178B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011790 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011795 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001179A                            		even
0001179A                            		even
0001179A                            
0001179A                            ; ===========================================================================
0001179A                            ; ---------------------------------------------------------------------------
0001179A                            ; Object 5A - platforms	moving in circles (SLZ)
0001179A                            ; ---------------------------------------------------------------------------
0001179A                            
0001179A                            Obj5A:					; XREF: Obj_Index
0001179A 7000                       		moveq	#0,d0
0001179C 1028 0024                  		move.b	$24(a0),d0
000117A0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000117A4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000117A8 3028 0032                  		move.w	$32(a0),d0
000117AC 0240 FF80                  		andi.w	#$FF80,d0
000117B0 3238 F700                  		move.w	($FFFFF700).w,d1
000117B4 0441 0080                  		subi.w	#$80,d1
000117B8 0241 FF80                  		andi.w	#$FF80,d1
000117BC 9041                       		sub.w	d1,d0
000117BE 0C40 0280                  		cmpi.w	#$280,d0
000117C2 6200 C8CA                  		bhi.w	DeleteObject
000117C6 6000 C88A                  		bra.w	DisplaySprite
000117CA                            ; ===========================================================================
000117CA 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000117CC 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000117CE 0000                       		dc.w Obj5A_Action-Obj5A_Index
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            Obj5A_Main:				; XREF: Obj5A_Index
000117D0 5428 0024                  		addq.b	#2,$24(a0)
000117D4 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000117DC 317C 4000 0002             		move.w	#$4000,2(a0)
000117E2 117C 0004 0001             		move.b	#4,1(a0)
000117E8 117C 0004 0018             		move.b	#4,$18(a0)
000117EE 117C 0018 0019             		move.b	#$18,$19(a0)
000117F4 3168 0008 0032             		move.w	8(a0),$32(a0)
000117FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011800                            
00011800                            Obj5A_Platform:				; XREF: Obj5A_Index
00011800 7200                       		moveq	#0,d1
00011802 1228 0019                  		move.b	$19(a0),d1
00011806 4EB9 0000 7C5C             		jsr	(PlatformObject).l
0001180C 6000 0000                  		bra.w	Obj5A_Types
00011810                            ; ===========================================================================
00011810                            
00011810                            Obj5A_Action:				; XREF: Obj5A_Index
00011810 7200                       		moveq	#0,d1
00011812 1228 0019                  		move.b	$19(a0),d1
00011816 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
0001181C 3F28 0008                  		move.w	8(a0),-(sp)
00011820 6100 0000                  		bsr.w	Obj5A_Types
00011824 341F                       		move.w	(sp)+,d2
00011826 4EF9 0000 833A             		jmp	(MvSonicOnPtfm2).l
0001182C                            ; ===========================================================================
0001182C                            
0001182C                            Obj5A_Types:
0001182C 7000                       		moveq	#0,d0
0001182E 1028 0028                  		move.b	$28(a0),d0
00011832 0240 000C                  		andi.w	#$C,d0
00011836 E248                       		lsr.w	#1,d0
00011838 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001183C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011840                            ; ===========================================================================
00011840 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011842 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011844                            ; ===========================================================================
00011844                            
00011844                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011844 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011848 0401 0050                  		subi.b	#$50,d1
0001184C 4881                       		ext.w	d1
0001184E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011852 0402 0050                  		subi.b	#$50,d2
00011856 4882                       		ext.w	d2
00011858 0828 0000 0028             		btst	#0,$28(a0)
0001185E 6700                       		beq.s	loc_10E24
00011860 4441                       		neg.w	d1
00011862 4442                       		neg.w	d2
00011864                            
00011864                            loc_10E24:
00011864 0828 0001 0028             		btst	#1,$28(a0)
0001186A 6700                       		beq.s	loc_10E30
0001186C 4441                       		neg.w	d1
0001186E C342                       		exg	d1,d2
00011870                            
00011870                            loc_10E30:
00011870 D268 0032                  		add.w	$32(a0),d1
00011874 3141 0008                  		move.w	d1,8(a0)
00011878 D468 0030                  		add.w	$30(a0),d2
0001187C 3142 000C                  		move.w	d2,$C(a0)
00011880 4E75                       		rts	
00011882                            ; ===========================================================================
00011882                            
00011882                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011882 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011886 0401 0050                  		subi.b	#$50,d1
0001188A 4881                       		ext.w	d1
0001188C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011890 0402 0050                  		subi.b	#$50,d2
00011894 4882                       		ext.w	d2
00011896 0828 0000 0028             		btst	#0,$28(a0)
0001189C 6700                       		beq.s	loc_10E62
0001189E 4441                       		neg.w	d1
000118A0 4442                       		neg.w	d2
000118A2                            
000118A2                            loc_10E62:
000118A2 0828 0001 0028             		btst	#1,$28(a0)
000118A8 6700                       		beq.s	loc_10E6E
000118AA 4441                       		neg.w	d1
000118AC C342                       		exg	d1,d2
000118AE                            
000118AE                            loc_10E6E:
000118AE 4441                       		neg.w	d1
000118B0 D268 0032                  		add.w	$32(a0),d1
000118B4 3141 0008                  		move.w	d1,8(a0)
000118B8 D468 0030                  		add.w	$30(a0),d2
000118BC 3142 000C                  		move.w	d2,$C(a0)
000118C0 4E75                       		rts	
000118C2                            ; ===========================================================================
000118C2                            ; ---------------------------------------------------------------------------
000118C2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118C2                            ; ---------------------------------------------------------------------------
000118C2                            Map_obj5A:
000118C2                            	include "_maps\obj5A.asm"
000118C2                            ; ---------------------------------------------------------------------------
000118C2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118C2                            ; ---------------------------------------------------------------------------
000118C2 0000                       		dc.w byte_10E84-Map_obj5A
000118C4 02                         byte_10E84:	dc.b 2
000118C5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000118CA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000118D0 00                         		even
000118D0 00                         		even
000118D0                            
000118D0                            ; ===========================================================================
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            ; Object 5B - blocks that form a staircase (SLZ)
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            
000118D0                            Obj5B:					; XREF: Obj_Index
000118D0 7000                       		moveq	#0,d0
000118D2 1028 0024                  		move.b	$24(a0),d0
000118D6 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000118DA 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000118DE 3028 0030                  		move.w	$30(a0),d0
000118E2 0240 FF80                  		andi.w	#$FF80,d0
000118E6 3238 F700                  		move.w	($FFFFF700).w,d1
000118EA 0441 0080                  		subi.w	#$80,d1
000118EE 0241 FF80                  		andi.w	#$FF80,d1
000118F2 9041                       		sub.w	d1,d0
000118F4 0C40 0280                  		cmpi.w	#$280,d0
000118F8 6200 C794                  		bhi.w	DeleteObject
000118FC 6000 C754                  		bra.w	DisplaySprite
00011900                            ; ===========================================================================
00011900 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011902 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011904 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011906                            ; ===========================================================================
00011906                            
00011906                            Obj5B_Main:				; XREF: Obj5B_Index
00011906 5428 0024                  		addq.b	#2,$24(a0)
0001190A 7638                       		moveq	#$38,d3
0001190C 7801                       		moveq	#1,d4
0001190E 0828 0000 0022             		btst	#0,$22(a0)
00011914 6700                       		beq.s	loc_10EDA
00011916 763B                       		moveq	#$3B,d3
00011918 78FF                       		moveq	#-1,d4
0001191A                            
0001191A                            loc_10EDA:
0001191A 3428 0008                  		move.w	8(a0),d2
0001191E 2248                       		movea.l	a0,a1
00011920 7203                       		moveq	#3,d1
00011922 6000                       		bra.s	Obj5B_MakeBlocks
00011924                            ; ===========================================================================
00011924                            
00011924                            Obj5B_Loop:
00011924 6100 CBC8                  		bsr.w	SingleObjLoad2
00011928 6600 0000                  		bne.w	Obj5B_Move
0001192C 137C 0004 0024             		move.b	#4,$24(a1)
00011932                            
00011932                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011932 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011936 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001193E 337C 4000 0002             		move.w	#$4000,2(a1)
00011944 137C 0004 0001             		move.b	#4,1(a1)
0001194A 137C 0003 0018             		move.b	#3,$18(a1)
00011950 137C 0010 0019             		move.b	#$10,$19(a1)
00011956 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001195C 3342 0008                  		move.w	d2,8(a1)
00011960 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011966 3368 0008 0030             		move.w	8(a0),$30(a1)
0001196C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011972 0642 0020                  		addi.w	#$20,d2
00011976 1343 0037                  		move.b	d3,$37(a1)
0001197A 2348 003C                  		move.l	a0,$3C(a1)
0001197E D604                       		add.b	d4,d3
00011980 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011984                            
00011984                            Obj5B_Move:				; XREF: Obj5B_Index
00011984 7000                       		moveq	#0,d0
00011986 1028 0028                  		move.b	$28(a0),d0
0001198A 0240 0007                  		andi.w	#7,d0
0001198E D040                       		add.w	d0,d0
00011990 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011994 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011998                            
00011998                            Obj5B_Solid:				; XREF: Obj5B_Index
00011998 2468 003C                  		movea.l	$3C(a0),a2
0001199C 7000                       		moveq	#0,d0
0001199E 1028 0037                  		move.b	$37(a0),d0
000119A2 1032 0000                  		move.b	(a2,d0.w),d0
000119A6 D068 0032                  		add.w	$32(a0),d0
000119AA 3140 000C                  		move.w	d0,$C(a0)
000119AE 7200                       		moveq	#0,d1
000119B0 1228 0019                  		move.b	$19(a0),d1
000119B4 0641 000B                  		addi.w	#$B,d1
000119B8 343C 0010                  		move.w	#$10,d2
000119BC 363C 0011                  		move.w	#$11,d3
000119C0 3828 0008                  		move.w	8(a0),d4
000119C4 6100 EA5C                  		bsr.w	SolidObject
000119C8 4A04                       		tst.b	d4
000119CA 6A00                       		bpl.s	loc_10F92
000119CC 1544 0036                  		move.b	d4,$36(a2)
000119D0                            
000119D0                            loc_10F92:
000119D0 0828 0003 0022             		btst	#3,$22(a0)
000119D6 6700                       		beq.s	locret_10FA0
000119D8 157C 0001 0036             		move.b	#1,$36(a2)
000119DE                            
000119DE                            locret_10FA0:
000119DE 4E75                       		rts	
000119E0                            ; ===========================================================================
000119E0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000119E2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119E4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000119E6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119E8                            ; ===========================================================================
000119E8                            
000119E8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000119E8 4A68 0034                  		tst.w	$34(a0)
000119EC 6600                       		bne.s	loc_10FC0
000119EE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000119F4 6600                       		bne.s	locret_10FBE
000119F6 317C 001E 0034             		move.w	#$1E,$34(a0)
000119FC                            
000119FC                            locret_10FBE:
000119FC 4E75                       		rts	
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            loc_10FC0:
000119FE 5368 0034                  		subq.w	#1,$34(a0)
00011A02 66F8                       		bne.s	locret_10FBE
00011A04 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A08 4E75                       		rts	
00011A0A                            ; ===========================================================================
00011A0A                            
00011A0A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011A0A 4A68 0034                  		tst.w	$34(a0)
00011A0E 6600                       		bne.s	loc_10FE0
00011A10 4A28 0036                  		tst.b	$36(a0)
00011A14 6A00                       		bpl.s	locret_10FDE
00011A16 317C 003C 0034             		move.w	#$3C,$34(a0)
00011A1C                            
00011A1C                            locret_10FDE:
00011A1C 4E75                       		rts	
00011A1E                            ; ===========================================================================
00011A1E                            
00011A1E                            loc_10FE0:
00011A1E 5368 0034                  		subq.w	#1,$34(a0)
00011A22 6600                       		bne.s	loc_10FEC
00011A24 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A28 4E75                       		rts	
00011A2A                            ; ===========================================================================
00011A2A                            
00011A2A                            loc_10FEC:
00011A2A 43E8 0038                  		lea	$38(a0),a1
00011A2E 3028 0034                  		move.w	$34(a0),d0
00011A32 E408                       		lsr.b	#2,d0
00011A34 0200 0001                  		andi.b	#1,d0
00011A38 12C0                       		move.b	d0,(a1)+
00011A3A 0A00 0001                  		eori.b	#1,d0
00011A3E 12C0                       		move.b	d0,(a1)+
00011A40 0A00 0001                  		eori.b	#1,d0
00011A44 12C0                       		move.b	d0,(a1)+
00011A46 0A00 0001                  		eori.b	#1,d0
00011A4A 12C0                       		move.b	d0,(a1)+
00011A4C 4E75                       		rts	
00011A4E                            ; ===========================================================================
00011A4E                            
00011A4E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011A4E 43E8 0038                  		lea	$38(a0),a1
00011A52 0C11 0080                  		cmpi.b	#$80,(a1)
00011A56 6700                       		beq.s	locret_11038
00011A58 5211                       		addq.b	#1,(a1)
00011A5A 7200                       		moveq	#0,d1
00011A5C 1219                       		move.b	(a1)+,d1
00011A5E 4841                       		swap	d1
00011A60 E289                       		lsr.l	#1,d1
00011A62 2401                       		move.l	d1,d2
00011A64 E289                       		lsr.l	#1,d1
00011A66 2601                       		move.l	d1,d3
00011A68 D682                       		add.l	d2,d3
00011A6A 4841                       		swap	d1
00011A6C 4842                       		swap	d2
00011A6E 4843                       		swap	d3
00011A70 12C3                       		move.b	d3,(a1)+
00011A72 12C2                       		move.b	d2,(a1)+
00011A74 12C1                       		move.b	d1,(a1)+
00011A76                            
00011A76                            locret_11038:
00011A76 4E75                       		rts	
00011A78 4E75                       		rts	
00011A7A                            ; ===========================================================================
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            Map_obj5B:
00011A7A                            	include "_maps\obj5B.asm"
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A 0000                       		dc.w byte_1103E-Map_obj5B
00011A7C 01                         byte_1103E:	dc.b 1
00011A7D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A82                            		even
00011A82                            		even
00011A82                            
00011A82                            ; ===========================================================================
00011A82                            ; ---------------------------------------------------------------------------
00011A82                            ; Object 5C - metal girders in foreground (SLZ)
00011A82                            ; ---------------------------------------------------------------------------
00011A82                            
00011A82                            Obj5C:					; XREF: Obj_Index
00011A82 7000                       		moveq	#0,d0
00011A84 1028 0024                  		move.b	$24(a0),d0
00011A88 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A8C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A90                            ; ===========================================================================
00011A90 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A92 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A94                            ; ===========================================================================
00011A94                            
00011A94                            Obj5C_Main:				; XREF: Obj5C_Index
00011A94 5428 0024                  		addq.b	#2,$24(a0)
00011A98 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011AA0 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011AA6 117C 0010 0019             		move.b	#$10,$19(a0)
00011AAC                            
00011AAC                            Obj5C_Display:				; XREF: Obj5C_Index
00011AAC 2238 F700                  		move.l	($FFFFF700).w,d1
00011AB0 D281                       		add.l	d1,d1
00011AB2 4841                       		swap	d1
00011AB4 4441                       		neg.w	d1
00011AB6 3141 0008                  		move.w	d1,8(a0)
00011ABA 2238 F704                  		move.l	($FFFFF704).w,d1
00011ABE D281                       		add.l	d1,d1
00011AC0 4841                       		swap	d1
00011AC2 0241 003F                  		andi.w	#$3F,d1
00011AC6 4441                       		neg.w	d1
00011AC8 0641 0100                  		addi.w	#$100,d1
00011ACC 3141 000A                  		move.w	d1,$A(a0)
00011AD0 6000 C580                  		bra.w	DisplaySprite
00011AD4                            ; ===========================================================================
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4                            Map_obj5C:
00011AD4                            	include "_maps\obj5C.asm"
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4 0000                       		dc.w byte_11098-Map_obj5C
00011AD6 09                         byte_11098:	dc.b 9
00011AD7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011ADC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011AE1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011AE6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011AEB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011AF0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011AF5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011AFA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AFF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011B04                            		even
00011B04                            		even
00011B04                            
00011B04                            ; ===========================================================================
00011B04                            ; ---------------------------------------------------------------------------
00011B04                            ; Object 1B - water surface (LZ)
00011B04                            ; ---------------------------------------------------------------------------
00011B04                            
00011B04                            Obj1B:					; XREF: Obj_Index
00011B04 7000                       		moveq	#0,d0
00011B06 1028 0024                  		move.b	$24(a0),d0
00011B0A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011B0E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011B12                            ; ===========================================================================
00011B12 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011B14 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            Obj1B_Main:				; XREF: Obj1B_Index
00011B16 5428 0024                  		addq.b	#2,$24(a0)
00011B1A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011B22 317C C300 0002             		move.w	#$C300,2(a0)
00011B28 117C 0004 0001             		move.b	#4,1(a0)
00011B2E 117C 0080 0019             		move.b	#$80,$19(a0)
00011B34 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B3A                            
00011B3A                            Obj1B_Action:				; XREF: Obj1B_Index
00011B3A 3238 F700                  		move.w	($FFFFF700).w,d1
00011B3E 0241 FFE0                  		andi.w	#$FFE0,d1
00011B42 D268 0030                  		add.w	$30(a0),d1
00011B46 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011B4C 6700                       		beq.s	loc_11114
00011B4E 0641 0020                  		addi.w	#$20,d1
00011B52                            
00011B52                            loc_11114:
00011B52 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011B56 3238 F646                  		move.w	($FFFFF646).w,d1
00011B5A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B5E 4A28 0032                  		tst.b	$32(a0)
00011B62 6600                       		bne.s	Obj1B_Animate
00011B64 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B6A 6700                       		beq.s	loc_1114A	; if not, branch
00011B6C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B70 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B76 6000                       		bra.s	Obj1B_Display
00011B78                            ; ===========================================================================
00011B78                            
00011B78                            Obj1B_Animate:				; XREF: loc_11114
00011B78 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B7C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B7E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B84 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B88                            
00011B88                            loc_1114A:				; XREF: loc_11114
00011B88 5328 001E                  		subq.b	#1,$1E(a0)
00011B8C 6A00                       		bpl.s	Obj1B_Display
00011B8E 117C 0007 001E             		move.b	#7,$1E(a0)
00011B94 5228 001A                  		addq.b	#1,$1A(a0)
00011B98 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B9E 6500                       		bcs.s	Obj1B_Display
00011BA0 117C 0000 001A             		move.b	#0,$1A(a0)
00011BA6                            
00011BA6                            Obj1B_Display:
00011BA6 6000 C4AA                  		bra.w	DisplaySprite
00011BAA                            ; ===========================================================================
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            ; Sprite mappings - water surface (LZ)
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            Map_obj1B:
00011BAA                            	include "_maps\obj1B.asm"
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            ; Sprite mappings - water surface (LZ)
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011BAE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011BB2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011BB6 03                         byte_11178:	dc.b 3
00011BB7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BBC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BC1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BC6 03                         byte_11188:	dc.b 3
00011BC7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BCC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BD1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BD6 03                         byte_11198:	dc.b 3
00011BD7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BDC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BE1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BE6 06                         byte_111A8:	dc.b 6
00011BE7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BEC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011BF1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BF6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011BFB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011C00 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011C05 06                         byte_111C7:	dc.b 6
00011C06 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011C0B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011C10 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C15 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011C1A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C1F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011C24 06                         byte_111E6:	dc.b 6
00011C25 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C2A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011C2F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011C34 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011C39 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011C3E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011C44 00                         		even
00011C44 00                         		even
00011C44                            
00011C44                            ; ===========================================================================
00011C44                            ; ---------------------------------------------------------------------------
00011C44                            ; Object 0B - pole that	breaks (LZ)
00011C44                            ; ---------------------------------------------------------------------------
00011C44                            
00011C44                            Obj0B:					; XREF: Obj_Index
00011C44 7000                       		moveq	#0,d0
00011C46 1028 0024                  		move.b	$24(a0),d0
00011C4A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011C4E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011C52                            ; ===========================================================================
00011C52 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011C54 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011C56 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011C58                            ; ===========================================================================
00011C58                            
00011C58                            Obj0B_Main:				; XREF: Obj0B_Index
00011C58 5428 0024                  		addq.b	#2,$24(a0)
00011C5C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C64 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C6A 117C 0004 0001             		move.b	#4,1(a0)
00011C70 117C 0008 0019             		move.b	#8,$19(a0)
00011C76 117C 0004 0018             		move.b	#4,$18(a0)
00011C7C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C82 7000                       		moveq	#0,d0
00011C84 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C88 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C8C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C90                            
00011C90                            Obj0B_Action:				; XREF: Obj0B_Index
00011C90 4A28 0032                  		tst.b	$32(a0)
00011C94 6700                       		beq.s	Obj0B_Grab
00011C96 4A68 0030                  		tst.w	$30(a0)
00011C9A 6700                       		beq.s	Obj0B_MoveUp
00011C9C 5368 0030                  		subq.w	#1,$30(a0)
00011CA0 6600                       		bne.s	Obj0B_MoveUp
00011CA2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011CA8 6000                       		bra.s	Obj0B_Release
00011CAA                            ; ===========================================================================
00011CAA                            
00011CAA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011CAA 43F8 D000                  		lea	($FFFFD000).w,a1
00011CAE 3028 000C                  		move.w	$C(a0),d0
00011CB2 0440 0018                  		subi.w	#$18,d0
00011CB6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011CBC 6700                       		beq.s	Obj0B_MoveDown
00011CBE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011CC2 B069 000C                  		cmp.w	$C(a1),d0
00011CC6 6500                       		bcs.s	Obj0B_MoveDown
00011CC8 3340 000C                  		move.w	d0,$C(a1)
00011CCC                            
00011CCC                            Obj0B_MoveDown:
00011CCC 0640 0024                  		addi.w	#$24,d0
00011CD0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011CD6 6700                       		beq.s	Obj0B_LetGo
00011CD8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011CDC B069 000C                  		cmp.w	$C(a1),d0
00011CE0 6400                       		bcc.s	Obj0B_LetGo
00011CE2 3340 000C                  		move.w	d0,$C(a1)
00011CE6                            
00011CE6                            Obj0B_LetGo:
00011CE6 1038 F603                  		move.b	($FFFFF603).w,d0
00011CEA 0240 0070                  		andi.w	#$70,d0
00011CEE 6700                       		beq.s	Obj0B_Display
00011CF0                            
00011CF0                            Obj0B_Release:				; XREF: Obj0B_Action
00011CF0 4228 0020                  		clr.b	$20(a0)
00011CF4 5428 0024                  		addq.b	#2,$24(a0)
00011CF8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CFC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D00 4228 0032                  		clr.b	$32(a0)
00011D04 6000                       		bra.s	Obj0B_Display
00011D06                            ; ===========================================================================
00011D06                            
00011D06                            Obj0B_Grab:				; XREF: Obj0B_Action
00011D06 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011D0A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00011D10 3028 0008                  		move.w	8(a0),d0
00011D14 0640 0014                  		addi.w	#$14,d0
00011D18 B069 0008                  		cmp.w	8(a1),d0
00011D1C 6400                       		bcc.s	Obj0B_Display
00011D1E 4228 0021                  		clr.b	$21(a0)
00011D22 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011D28 6400                       		bcc.s	Obj0B_Display
00011D2A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011D2E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011D32 3028 0008                  		move.w	8(a0),d0
00011D36 0640 0014                  		addi.w	#$14,d0
00011D3A 3340 0008                  		move.w	d0,8(a1)
00011D3E 08A9 0000 0022             		bclr	#0,$22(a1)
00011D44 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011D4A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011D50 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D56 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D5C                            
00011D5C                            Obj0B_Display:				; XREF: Obj0B_Index
00011D5C 6000 E39C                  		bra.w	MarkObjGone
00011D60                            ; ===========================================================================
00011D60                            ; ---------------------------------------------------------------------------
00011D60                            ; Sprite mappings - pole that breaks (LZ)
00011D60                            ; ---------------------------------------------------------------------------
00011D60                            Map_obj0B:
00011D60                            	include "_maps\obj0B.asm"
00011D60                            ; ---------------------------------------------------------------------------
00011D60                            ; Sprite mappings - pole that breaks (LZ)
00011D60                            ; ---------------------------------------------------------------------------
00011D60 0000                       		dc.w byte_11326-Map_obj0B
00011D62 0000                       		dc.w byte_11331-Map_obj0B
00011D64 02                         byte_11326:	dc.b 2			; normal pole
00011D65 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D6A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D6F 04                         byte_11331:	dc.b 4			; broken pole
00011D70 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D75 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D7A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D7F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D84                            		even
00011D84                            		even
00011D84                            
00011D84                            ; ===========================================================================
00011D84                            ; ---------------------------------------------------------------------------
00011D84                            ; Object 0C - flapping door (LZ)
00011D84                            ; ---------------------------------------------------------------------------
00011D84                            
00011D84                            Obj0C:					; XREF: Obj_Index
00011D84 7000                       		moveq	#0,d0
00011D86 1028 0024                  		move.b	$24(a0),d0
00011D8A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D8E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D92                            ; ===========================================================================
00011D92 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D94 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D96                            ; ===========================================================================
00011D96                            
00011D96                            Obj0C_Main:				; XREF: Obj0C_Index
00011D96 5428 0024                  		addq.b	#2,$24(a0)
00011D9A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011DA2 317C 4328 0002             		move.w	#$4328,2(a0)
00011DA8 0028 0004 0001             		ori.b	#4,1(a0)
00011DAE 117C 0028 0019             		move.b	#$28,$19(a0)
00011DB4 7000                       		moveq	#0,d0
00011DB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00011DBA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011DBE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011DC2                            
00011DC2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011DC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DC6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011DC8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011DCE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011DD4 4A28 0001                  		tst.b	1(a0)
00011DD8 6A00                       		bpl.s	Obj0C_Solid
00011DDA 303C 00BB                  		move.w	#$BB,d0
00011DDE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play door sound
00011DE4                            
00011DE4                            Obj0C_Solid:
00011DE4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011DEA 6100 92B4                  		bsr.w	AnimateSprite
00011DEE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011DF2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011DF6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011DF8 3038 D008                  		move.w	($FFFFD008).w,d0
00011DFC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011E00 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011E02 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E08 323C 0013                  		move.w	#$13,d1
00011E0C 343C 0020                  		move.w	#$20,d2
00011E10 3602                       		move.w	d2,d3
00011E12 5243                       		addq.w	#1,d3
00011E14 3828 0008                  		move.w	8(a0),d4
00011E18 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011E1C                            
00011E1C                            Obj0C_Display:
00011E1C 6000 E2DC                  		bra.w	MarkObjGone
00011E20                            ; ===========================================================================
00011E20                            Ani_obj0C:
00011E20                            	include "_anim\obj0C.asm"
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Animation script - flapping door (LZ)
00011E20                            ; ---------------------------------------------------------------------------
00011E20 0000                       		dc.w byte_113E6-Ani_obj0C
00011E22 0000                       		dc.w byte_113EC-Ani_obj0C
00011E24 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011E2A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011E30                            		even
00011E30                            		even
00011E30                            
00011E30                            ; ---------------------------------------------------------------------------
00011E30                            ; Sprite mappings - flapping door (LZ)
00011E30                            ; ---------------------------------------------------------------------------
00011E30                            Map_obj0C:
00011E30                            	include "_maps\obj0C.asm"
00011E30                            ; ---------------------------------------------------------------------------
00011E30                            ; Sprite mappings - flapping door (LZ)
00011E30                            ; ---------------------------------------------------------------------------
00011E30 0000                       		dc.w byte_113F8-Map_obj0C
00011E32 0000                       		dc.w byte_11403-Map_obj0C
00011E34 0000                       		dc.w byte_1140E-Map_obj0C
00011E36 02                         byte_113F8:	dc.b 2
00011E37 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011E3C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011E41 02                         byte_11403:	dc.b 2
00011E42 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011E47 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011E4C 02                         byte_1140E:	dc.b 2
00011E4D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011E52 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011E58 00                         		even
00011E58 00                         		even
00011E58                            
00011E58                            ; ===========================================================================
00011E58                            ; ---------------------------------------------------------------------------
00011E58                            ; Object 71 - invisible	solid blocks
00011E58                            ; ---------------------------------------------------------------------------
00011E58                            
00011E58                            Obj71:					; XREF: Obj_Index
00011E58 7000                       		moveq	#0,d0
00011E5A 1028 0024                  		move.b	$24(a0),d0
00011E5E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E62 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E66                            ; ===========================================================================
00011E66 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E68 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E6A                            ; ===========================================================================
00011E6A                            
00011E6A                            Obj71_Main:				; XREF: Obj71_Index
00011E6A 5428 0024                  		addq.b	#2,$24(a0)
00011E6E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E76 317C 8680 0002             		move.w	#$8680,2(a0)
00011E7C 0028 0004 0001             		ori.b	#4,1(a0)
00011E82 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E86 1200                       		move.b	d0,d1
00011E88 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E8C 0640 0010                  		addi.w	#$10,d0
00011E90 E248                       		lsr.w	#1,d0
00011E92 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E96 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E9A 5241                       		addq.w	#1,d1
00011E9C E749                       		lsl.w	#3,d1
00011E9E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011EA2                            
00011EA2                            Obj71_Solid:				; XREF: Obj71_Index
00011EA2 6100 C428                  		bsr.w	ChkObjOnScreen
00011EA6 6600                       		bne.s	Obj71_ChkDel
00011EA8 7200                       		moveq	#0,d1
00011EAA 1228 0019                  		move.b	$19(a0),d1
00011EAE 0641 000B                  		addi.w	#$B,d1
00011EB2 7400                       		moveq	#0,d2
00011EB4 1428 0016                  		move.b	$16(a0),d2
00011EB8 3602                       		move.w	d2,d3
00011EBA 5243                       		addq.w	#1,d3
00011EBC 3828 0008                  		move.w	8(a0),d4
00011EC0 6100 E5A8                  		bsr.w	SolidObject71
00011EC4                            
00011EC4                            Obj71_ChkDel:
00011EC4 3028 0008                  		move.w	8(a0),d0
00011EC8 0240 FF80                  		andi.w	#$FF80,d0
00011ECC 3238 F700                  		move.w	($FFFFF700).w,d1
00011ED0 0441 0080                  		subi.w	#$80,d1
00011ED4 0241 FF80                  		andi.w	#$FF80,d1
00011ED8 9041                       		sub.w	d1,d0
00011EDA 0C40 0280                  		cmpi.w	#$280,d0
00011EDE 6200                       		bhi.s	Obj71_Delete
00011EE0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011EE4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011EE6 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011EEA                            ; ===========================================================================
00011EEA                            
00011EEA                            Obj71_NoDisplay:
00011EEA 4E75                       		rts	
00011EEC                            ; ===========================================================================
00011EEC                            
00011EEC                            Obj71_Delete:
00011EEC 4EFA C1A0                  		jmp	DeleteObject
00011EF0                            ; ===========================================================================
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - invisible solid blocks
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            Map_obj71:
00011EF0                            	include "_maps\obj71.asm"
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - invisible solid blocks
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0 0000                       		dc.w byte_114BC-Map_obj71
00011EF2 0000                       		dc.w byte_114D1-Map_obj71
00011EF4 0000                       		dc.w byte_114E6-Map_obj71
00011EF6 04                         byte_114BC:	dc.b 4
00011EF7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011EFC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011F01 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011F06 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011F0B 04                         byte_114D1:	dc.b 4
00011F0C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011F11 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011F16 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011F1B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011F20 04                         byte_114E6:	dc.b 4
00011F21 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011F26 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011F2B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011F30 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011F36 00                         		even
00011F36 00                         		even
00011F36                            
00011F36                            ; ===========================================================================
00011F36                            ; ---------------------------------------------------------------------------
00011F36                            ; Object 5D - fans (SLZ)
00011F36                            ; ---------------------------------------------------------------------------
00011F36                            
00011F36                            Obj5D:					; XREF: Obj_Index
00011F36 7000                       		moveq	#0,d0
00011F38 1028 0024                  		move.b	$24(a0),d0
00011F3C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011F40 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011F44                            ; ===========================================================================
00011F44 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011F46 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011F48                            ; ===========================================================================
00011F48                            
00011F48                            Obj5D_Main:				; XREF: Obj5D_Index
00011F48 5428 0024                  		addq.b	#2,$24(a0)
00011F4C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011F54 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011F5A 0028 0004 0001             		ori.b	#4,1(a0)
00011F60 117C 0010 0019             		move.b	#$10,$19(a0)
00011F66 117C 0004 0018             		move.b	#4,$18(a0)
00011F6C                            
00011F6C                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F6C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F72 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F74 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F78 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F7A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F80 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F86 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F88 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F8E                            
00011F8E                            Obj5D_Blow:
00011F8E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F92 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F96 43F8 D000                  		lea	($FFFFD000).w,a1
00011F9A 3029 0008                  		move.w	8(a1),d0
00011F9E 9068 0008                  		sub.w	8(a0),d0
00011FA2 0828 0000 0022             		btst	#0,$22(a0)
00011FA8 6600                       		bne.s	Obj5D_ChkSonic
00011FAA 4440                       		neg.w	d0
00011FAC                            
00011FAC                            Obj5D_ChkSonic:
00011FAC 0640 0050                  		addi.w	#$50,d0
00011FB0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011FB4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011FB6 3229 000C                  		move.w	$C(a1),d1
00011FBA 0641 0060                  		addi.w	#$60,d1
00011FBE 9268 000C                  		sub.w	$C(a0),d1
00011FC2 6500                       		bcs.s	Obj5D_Animate
00011FC4 0C41 0070                  		cmpi.w	#$70,d1
00011FC8 6400                       		bcc.s	Obj5D_Animate
00011FCA 0440 0050                  		subi.w	#$50,d0
00011FCE 6400                       		bcc.s	loc_1159A
00011FD0 4640                       		not.w	d0
00011FD2 D040                       		add.w	d0,d0
00011FD4                            
00011FD4                            loc_1159A:
00011FD4 0640 0060                  		addi.w	#$60,d0
00011FD8 0828 0000 0022             		btst	#0,$22(a0)
00011FDE 6600                       		bne.s	loc_115A8
00011FE0 4440                       		neg.w	d0
00011FE2                            
00011FE2                            loc_115A8:
00011FE2 4400                       		neg.b	d0
00011FE4 E840                       		asr.w	#4,d0
00011FE6 0828 0000 0028             		btst	#0,$28(a0)
00011FEC 6700                       		beq.s	Obj5D_MoveSonic
00011FEE 4440                       		neg.w	d0
00011FF0                            
00011FF0                            Obj5D_MoveSonic:
00011FF0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011FF4                            
00011FF4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011FF4 5328 001E                  		subq.b	#1,$1E(a0)
00011FF8 6A00                       		bpl.s	Obj5D_ChkDel
00011FFA 117C 0000 001E             		move.b	#0,$1E(a0)
00012000 5228 001B                  		addq.b	#1,$1B(a0)
00012004 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001200A 6500                       		bcs.s	loc_115D8
0001200C 117C 0000 001B             		move.b	#0,$1B(a0)
00012012                            
00012012                            loc_115D8:
00012012 7000                       		moveq	#0,d0
00012014 0828 0000 0028             		btst	#0,$28(a0)
0001201A 6700                       		beq.s	loc_115E4
0001201C 7002                       		moveq	#2,d0
0001201E                            
0001201E                            loc_115E4:
0001201E D028 001B                  		add.b	$1B(a0),d0
00012022 1140 001A                  		move.b	d0,$1A(a0)
00012026                            
00012026                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012026 6100 C02A                  		bsr.w	DisplaySprite
0001202A 3028 0008                  		move.w	8(a0),d0
0001202E 0240 FF80                  		andi.w	#$FF80,d0
00012032 3238 F700                  		move.w	($FFFFF700).w,d1
00012036 0441 0080                  		subi.w	#$80,d1
0001203A 0241 FF80                  		andi.w	#$FF80,d1
0001203E 9041                       		sub.w	d1,d0
00012040 0C40 0280                  		cmpi.w	#$280,d0
00012044 6200 C048                  		bhi.w	DeleteObject
00012048 4E75                       		rts	
0001204A                            ; ===========================================================================
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            ; Sprite mappings - fans (SLZ)
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            Map_obj5D:
0001204A                            	include "_maps\obj5D.asm"
0001204A                            ; ---------------------------------------------------------------------------
0001204A                            ; Sprite mappings - fans (SLZ)
0001204A                            ; ---------------------------------------------------------------------------
0001204A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001204E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012052 0000                       		dc.w byte_1161A-Map_obj5D
00012054 02                         byte_1161A:	dc.b 2
00012055 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001205A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001205F 02                         byte_11625:	dc.b 2
00012060 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012065 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001206A 02                         byte_11630:	dc.b 2
0001206B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012070 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012076 00                         		even
00012076 00                         		even
00012076                            
00012076                            ; ===========================================================================
00012076                            ; ---------------------------------------------------------------------------
00012076                            ; Object 5E - seesaws (SLZ)
00012076                            ; ---------------------------------------------------------------------------
00012076                            
00012076                            Obj5E:					; XREF: Obj_Index
00012076 7000                       		moveq	#0,d0
00012078 1028 0024                  		move.b	$24(a0),d0
0001207C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012080 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012084 3028 0030                  		move.w	$30(a0),d0
00012088 0240 FF80                  		andi.w	#$FF80,d0
0001208C 3238 F700                  		move.w	($FFFFF700).w,d1
00012090 0441 0080                  		subi.w	#$80,d1
00012094 0241 FF80                  		andi.w	#$FF80,d1
00012098 9041                       		sub.w	d1,d0
0001209A 6B00 BFF2                  		bmi.w	DeleteObject
0001209E 0C40 0280                  		cmpi.w	#$280,d0
000120A2 6200 BFEA                  		bhi.w	DeleteObject
000120A6 6000 BFAA                  		bra.w	DisplaySprite
000120AA                            ; ===========================================================================
000120AA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000120AC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000120AE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000120B0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000120B2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000120B4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000120B6                            ; ===========================================================================
000120B6                            
000120B6                            Obj5E_Main:				; XREF: Obj5E_Index
000120B6 5428 0024                  		addq.b	#2,$24(a0)
000120BA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000120C2 317C 0374 0002             		move.w	#$374,2(a0)
000120C8 0028 0004 0001             		ori.b	#4,1(a0)
000120CE 117C 0004 0018             		move.b	#4,$18(a0)
000120D4 117C 0030 0019             		move.b	#$30,$19(a0)
000120DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000120E0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000120E4 6600                       		bne.s	loc_116D2	; if not, branch
000120E6 6100 C406                  		bsr.w	SingleObjLoad2
000120EA 6600                       		bne.s	loc_116D2
000120EC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000120F0 5C29 0024                  		addq.b	#6,$24(a1)
000120F4 3368 0008 0008             		move.w	8(a0),8(a1)
000120FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012100 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012106 2348 003C                  		move.l	a0,$3C(a1)
0001210A                            
0001210A                            loc_116D2:
0001210A 0828 0000 0022             		btst	#0,$22(a0)
00012110 6700                       		beq.s	loc_116E0
00012112 117C 0002 001A             		move.b	#2,$1A(a0)
00012118                            
00012118                            loc_116E0:
00012118 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001211E                            
0001211E                            Obj5E_Slope:				; XREF: Obj5E_Index
0001211E 1228 003A                  		move.b	$3A(a0),d1
00012122 6100 0000                  		bsr.w	loc_11766
00012126 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001212C 0828 0000 001A             		btst	#0,$1A(a0)
00012132 6700                       		beq.s	loc_11702
00012134 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001213A                            
0001213A                            loc_11702:
0001213A 43F8 D000                  		lea	($FFFFD000).w,a1
0001213E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012144 323C 0030                  		move.w	#$30,d1
00012148 4EB9 0000 7D30             		jsr	(SlopeObject).l
0001214E 4E75                       		rts	
00012150                            ; ===========================================================================
00012150                            
00012150                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012150 6100 0000                  		bsr.w	loc_1174A
00012154 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001215A 0828 0000 001A             		btst	#0,$1A(a0)
00012160 6700                       		beq.s	loc_11730
00012162 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012168                            
00012168                            loc_11730:
00012168 323C 0030                  		move.w	#$30,d1
0001216C 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
00012172 323C 0030                  		move.w	#$30,d1
00012176 3428 0008                  		move.w	8(a0),d2
0001217A 4EB9 0000 8DC0             		jsr	SlopeObject2
00012180 4E75                       		rts	
00012182                            ; ===========================================================================
00012182                            
00012182                            loc_1174A:				; XREF: Obj5E_Slope2
00012182 7202                       		moveq	#2,d1
00012184 43F8 D000                  		lea	($FFFFD000).w,a1
00012188 3028 0008                  		move.w	8(a0),d0
0001218C 9069 0008                  		sub.w	8(a1),d0
00012190 6400                       		bcc.s	loc_1175E
00012192 4440                       		neg.w	d0
00012194 7200                       		moveq	#0,d1
00012196                            
00012196                            loc_1175E:
00012196 0C40 0008                  		cmpi.w	#8,d0
0001219A 6400                       		bcc.s	loc_11766
0001219C 7201                       		moveq	#1,d1
0001219E                            
0001219E                            loc_11766:
0001219E 1028 001A                  		move.b	$1A(a0),d0
000121A2 B001                       		cmp.b	d1,d0
000121A4 6700                       		beq.s	locret_11790
000121A6 6400                       		bcc.s	loc_11772
000121A8 5400                       		addq.b	#2,d0
000121AA                            
000121AA                            loc_11772:
000121AA 5300                       		subq.b	#1,d0
000121AC 1140 001A                  		move.b	d0,$1A(a0)
000121B0 1141 003A                  		move.b	d1,$3A(a0)
000121B4 08A8 0000 0001             		bclr	#0,1(a0)
000121BA 0828 0001 001A             		btst	#1,$1A(a0)
000121C0 6700                       		beq.s	locret_11790
000121C2 08E8 0000 0001             		bset	#0,1(a0)
000121C8                            
000121C8                            locret_11790:
000121C8 4E75                       		rts	
000121CA                            ; ===========================================================================
000121CA                            
000121CA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000121CA 5428 0024                  		addq.b	#2,$24(a0)
000121CE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000121D6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000121DC 0028 0004 0001             		ori.b	#4,1(a0)
000121E2 117C 0004 0018             		move.b	#4,$18(a0)
000121E8 117C 008B 0020             		move.b	#$8B,$20(a0)
000121EE 117C 000C 0019             		move.b	#$C,$19(a0)
000121F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000121FA 0668 0028 0008             		addi.w	#$28,8(a0)
00012200 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012206 117C 0001 001A             		move.b	#1,$1A(a0)
0001220C 0828 0000 0022             		btst	#0,$22(a0)
00012212 6700                       		beq.s	Obj5E_MoveSpike
00012214 0468 0050 0008             		subi.w	#$50,8(a0)
0001221A 117C 0002 003A             		move.b	#2,$3A(a0)
00012220                            
00012220                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012220 2268 003C                  		movea.l	$3C(a0),a1
00012224 7000                       		moveq	#0,d0
00012226 1028 003A                  		move.b	$3A(a0),d0
0001222A 9029 003A                  		sub.b	$3A(a1),d0
0001222E 6700                       		beq.s	loc_1183E
00012230 6400                       		bcc.s	loc_117FC
00012232 4400                       		neg.b	d0
00012234                            
00012234                            loc_117FC:
00012234 323C F7E8                  		move.w	#-$818,d1
00012238 343C FEEC                  		move.w	#-$114,d2
0001223C 0C00 0001                  		cmpi.b	#1,d0
00012240 6700                       		beq.s	loc_11822
00012242 323C F510                  		move.w	#-$AF0,d1
00012246 343C FF34                  		move.w	#-$CC,d2
0001224A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012250 6D00                       		blt.s	loc_11822
00012252 323C F200                  		move.w	#-$E00,d1
00012256 343C FF60                  		move.w	#-$A0,d2
0001225A                            
0001225A                            loc_11822:
0001225A 3141 0012                  		move.w	d1,$12(a0)
0001225E 3142 0010                  		move.w	d2,$10(a0)
00012262 3028 0008                  		move.w	8(a0),d0
00012266 9068 0030                  		sub.w	$30(a0),d0
0001226A 6400                       		bcc.s	loc_11838
0001226C 4468 0010                  		neg.w	$10(a0)
00012270                            
00012270                            loc_11838:
00012270 5428 0024                  		addq.b	#2,$24(a0)
00012274 6000                       		bra.s	Obj5E_SpikeFall
00012276                            ; ===========================================================================
00012276                            
00012276                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012276 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001227C 7000                       		moveq	#0,d0
0001227E 1029 001A                  		move.b	$1A(a1),d0
00012282 343C 0028                  		move.w	#$28,d2
00012286 3228 0008                  		move.w	8(a0),d1
0001228A 9268 0030                  		sub.w	$30(a0),d1
0001228E 6400                       		bcc.s	loc_1185C
00012290 4442                       		neg.w	d2
00012292 5440                       		addq.w	#2,d0
00012294                            
00012294                            loc_1185C:
00012294 D040                       		add.w	d0,d0
00012296 3228 0034                  		move.w	$34(a0),d1
0001229A D272 0000                  		add.w	(a2,d0.w),d1
0001229E 3141 000C                  		move.w	d1,$C(a0)
000122A2 D468 0030                  		add.w	$30(a0),d2
000122A6 3142 0008                  		move.w	d2,8(a0)
000122AA 4268 000E                  		clr.w	$E(a0)
000122AE 4268 000A                  		clr.w	$A(a0)
000122B2 4E75                       		rts	
000122B4                            ; ===========================================================================
000122B4                            
000122B4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000122B4 4A68 0012                  		tst.w	$12(a0)
000122B8 6A00                       		bpl.s	loc_1189A
000122BA 6100 BCFE                  		bsr.w	ObjectFall
000122BE 3028 0034                  		move.w	$34(a0),d0
000122C2 0440 002F                  		subi.w	#$2F,d0
000122C6 B068 000C                  		cmp.w	$C(a0),d0
000122CA 6E00                       		bgt.s	locret_11898
000122CC 6100 BCEC                  		bsr.w	ObjectFall
000122D0                            
000122D0                            locret_11898:
000122D0 4E75                       		rts	
000122D2                            ; ===========================================================================
000122D2                            
000122D2                            loc_1189A:				; XREF: Obj5E_SpikeFall
000122D2 6100 BCE6                  		bsr.w	ObjectFall
000122D6 2268 003C                  		movea.l	$3C(a0),a1
000122DA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000122E0 7000                       		moveq	#0,d0
000122E2 1029 001A                  		move.b	$1A(a1),d0
000122E6 3228 0008                  		move.w	8(a0),d1
000122EA 9268 0030                  		sub.w	$30(a0),d1
000122EE 6400                       		bcc.s	loc_118BA
000122F0 5440                       		addq.w	#2,d0
000122F2                            
000122F2                            loc_118BA:
000122F2 D040                       		add.w	d0,d0
000122F4 3228 0034                  		move.w	$34(a0),d1
000122F8 D272 0000                  		add.w	(a2,d0.w),d1
000122FC B268 000C                  		cmp.w	$C(a0),d1
00012300 6E00                       		bgt.s	locret_11938
00012302 2268 003C                  		movea.l	$3C(a0),a1
00012306 7202                       		moveq	#2,d1
00012308 4A68 0010                  		tst.w	$10(a0)
0001230C 6B00                       		bmi.s	Obj5E_Spring
0001230E 7200                       		moveq	#0,d1
00012310                            
00012310                            Obj5E_Spring:
00012310 1341 003A                  		move.b	d1,$3A(a1)
00012314 1141 003A                  		move.b	d1,$3A(a0)
00012318 B229 001A                  		cmp.b	$1A(a1),d1
0001231C 6700                       		beq.s	loc_1192C
0001231E 08A9 0003 0022             		bclr	#3,$22(a1)
00012324 6700                       		beq.s	loc_1192C
00012326 4229 0025                  		clr.b	$25(a1)
0001232A 137C 0002 0024             		move.b	#2,$24(a1)
00012330 45F8 D000                  		lea	($FFFFD000).w,a2
00012334 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001233A 446A 0012                  		neg.w	$12(a2)
0001233E 08EA 0001 0022             		bset	#1,$22(a2)
00012344 08AA 0003 0022             		bclr	#3,$22(a2)
0001234A 422A 003C                  		clr.b	$3C(a2)
0001234E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012354 157C 0002 0024             		move.b	#2,$24(a2)
0001235A 303C 00CC                  		move.w	#$CC,d0
0001235E 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play spring sound
00012364                            
00012364                            loc_1192C:
00012364 4268 0010                  		clr.w	$10(a0)
00012368 4268 0012                  		clr.w	$12(a0)
0001236C 5528 0024                  		subq.b	#2,$24(a0)
00012370                            
00012370                            locret_11938:
00012370 4E75                       		rts	
00012372                            ; ===========================================================================
00012372 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001237C                            
0001237C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000123AC                            		even
000123AC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000123DC                            		even
000123DC                            ; ---------------------------------------------------------------------------
000123DC                            ; Sprite mappings - seesaws (SLZ)
000123DC                            ; ---------------------------------------------------------------------------
000123DC                            Map_obj5E:
000123DC                            	include "_maps\obj5E.asm"
000123DC                            ; ---------------------------------------------------------------------------
000123DC                            ; Sprite mappings - seesaws (SLZ)
000123DC                            ; ---------------------------------------------------------------------------
000123DC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123E0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123E4 07                         byte_119AC:	dc.b 7
000123E5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000123EA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000123EF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000123F4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000123F9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123FE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012403 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012408 04                         byte_119D0:	dc.b 4
00012409 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001240E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012413 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012418 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001241E 00                         		even
0001241E 00                         		even
0001241E                            
0001241E                            ; ---------------------------------------------------------------------------
0001241E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001241E                            ; ---------------------------------------------------------------------------
0001241E                            Map_obj5Ea:
0001241E                            	include "_maps\obj5Eballs.asm"
0001241E                            ; ---------------------------------------------------------------------------
0001241E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001241E                            ; ---------------------------------------------------------------------------
0001241E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012420 0000                       		dc.w byte_119F0-Map_obj5Ea
00012422 01                         byte_119EA:	dc.b 1
00012423 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012428 01                         byte_119F0:	dc.b 1
00012429 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001242E                            		even
0001242E                            		even
0001242E                            
0001242E                            ; ===========================================================================
0001242E                            ; ---------------------------------------------------------------------------
0001242E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001242E                            ; ---------------------------------------------------------------------------
0001242E                            
0001242E                            Obj5F:					; XREF: Obj_Index
0001242E 7000                       		moveq	#0,d0
00012430 1028 0024                  		move.b	$24(a0),d0
00012434 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012438 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001243C                            ; ===========================================================================
0001243C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001243E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012440 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012442 0000                       		dc.w Obj5F_End-Obj5F_Index
00012444                            ; ===========================================================================
00012444                            
00012444                            Obj5F_Main:				; XREF: Obj5F_Index
00012444 5428 0024                  		addq.b	#2,$24(a0)
00012448 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012450 317C 0400 0002             		move.w	#$400,2(a0)
00012456 0028 0004 0001             		ori.b	#4,1(a0)
0001245C 117C 0003 0018             		move.b	#3,$18(a0)
00012462 117C 000C 0019             		move.b	#$C,$19(a0)
00012468 1028 0028                  		move.b	$28(a0),d0
0001246C 6700                       		beq.s	loc_11A3C
0001246E 1140 0024                  		move.b	d0,$24(a0)
00012472 4E75                       		rts	
00012474                            ; ===========================================================================
00012474                            
00012474                            loc_11A3C:
00012474 117C 009A 0020             		move.b	#$9A,$20(a0)
0001247A 0868 0000 0022             		bchg	#0,$22(a0)
00012480                            
00012480                            Obj5F_Action:				; XREF: Obj5F_Index
00012480 7000                       		moveq	#0,d0
00012482 1028 0025                  		move.b	$25(a0),d0
00012486 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001248A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001248E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012494 6100 8C0A                  		bsr.w	AnimateSprite
00012498 6000 DC60                  		bra.w	MarkObjGone
0001249C                            ; ===========================================================================
0001249C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001249E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000124A0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000124A2                            ; ===========================================================================
000124A2                            
000124A2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000124A2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124A6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124AA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000124AC 5428 0025                  		addq.b	#2,$25(a0)
000124B0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000124B6 317C 0010 0010             		move.w	#$10,$10(a0)
000124BC 117C 0001 001C             		move.b	#1,$1C(a0)
000124C2 0868 0000 0022             		bchg	#0,$22(a0)
000124C8 6700                       		beq.s	locret_11A96
000124CA 4468 0010                  		neg.w	$10(a0)		; change direction
000124CE                            
000124CE                            locret_11A96:
000124CE 4E75                       		rts	
000124D0                            ; ===========================================================================
000124D0                            
000124D0                            Obj5F_Wait:				; XREF: Obj5F_Index2
000124D0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124D4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124D8 6B00                       		bmi.s	loc_11AA8
000124DA 6100 BB50                  		bsr.w	SpeedToPos
000124DE 4E75                       		rts	
000124E0                            ; ===========================================================================
000124E0                            
000124E0                            loc_11AA8:
000124E0 5528 0025                  		subq.b	#2,$25(a0)
000124E4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000124EA 4268 0010                  		clr.w	$10(a0)		; stop walking
000124EE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000124F4 4E75                       		rts	
000124F6                            ; ===========================================================================
000124F6                            
000124F6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000124F6 5368 0030                  		subq.w	#1,$30(a0)
000124FA 6A00                       		bpl.s	locret_11AD0
000124FC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012500 117C 0000 0024             		move.b	#0,$24(a0)
00012506                            
00012506                            locret_11AD0:
00012506 4E75                       		rts	
00012508                            ; ===========================================================================
00012508                            
00012508                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012508 3038 D008                  		move.w	($FFFFD008).w,d0
0001250C 9068 0008                  		sub.w	8(a0),d0
00012510 6400                       		bcc.s	loc_11ADE
00012512 4440                       		neg.w	d0
00012514                            
00012514                            loc_11ADE:
00012514 0C40 0060                  		cmpi.w	#$60,d0
00012518 6400                       		bcc.s	locret_11B5E
0001251A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001251E 9068 000C                  		sub.w	$C(a0),d0
00012522 6400                       		bcc.s	Obj5F_MakeFuse
00012524 4440                       		neg.w	d0
00012526                            
00012526                            Obj5F_MakeFuse:
00012526 0C40 0060                  		cmpi.w	#$60,d0
0001252A 6400                       		bcc.s	locret_11B5E
0001252C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012530 6600                       		bne.s	locret_11B5E
00012532 117C 0004 0025             		move.b	#4,$25(a0)
00012538 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001253E 4268 0010                  		clr.w	$10(a0)
00012542 117C 0002 001C             		move.b	#2,$1C(a0)
00012548 6100 BFA4                  		bsr.w	SingleObjLoad2
0001254C 6600                       		bne.s	locret_11B5E
0001254E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012552 3368 0008 0008             		move.w	8(a0),8(a1)
00012558 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001255E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012564 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001256A 137C 0004 0028             		move.b	#4,$28(a1)
00012570 137C 0003 001C             		move.b	#3,$1C(a1)
00012576 337C 0010 0012             		move.w	#$10,$12(a1)
0001257C 0828 0001 0022             		btst	#1,$22(a0)
00012582 6700                       		beq.s	loc_11B54
00012584 4469 0012                  		neg.w	$12(a1)
00012588                            
00012588                            loc_11B54:
00012588 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001258E 2348 003C                  		move.l	a0,$3C(a1)
00012592                            
00012592                            locret_11B5E:
00012592 4E75                       		rts	
00012594                            ; ===========================================================================
00012594                            
00012594                            Obj5F_Display:				; XREF: Obj5F_Index
00012594 6100                       		bsr.s	loc_11B70
00012596 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001259C 6100 8B02                  		bsr.w	AnimateSprite
000125A0 6000 DB58                  		bra.w	MarkObjGone
000125A4                            ; ===========================================================================
000125A4                            
000125A4                            loc_11B70:
000125A4 5368 0030                  		subq.w	#1,$30(a0)
000125A8 6B00                       		bmi.s	loc_11B7C
000125AA 6100 BA80                  		bsr.w	SpeedToPos
000125AE 4E75                       		rts	
000125B0                            ; ===========================================================================
000125B0                            
000125B0                            loc_11B7C:
000125B0 4268 0030                  		clr.w	$30(a0)
000125B4 4228 0024                  		clr.b	$24(a0)
000125B8 3168 0034 000C             		move.w	$34(a0),$C(a0)
000125BE 7203                       		moveq	#3,d1
000125C0 2248                       		movea.l	a0,a1
000125C2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000125C8 6000                       		bra.s	Obj5F_MakeShrap
000125CA                            ; ===========================================================================
000125CA                            
000125CA                            Obj5F_Loop:
000125CA 6100 BF22                  		bsr.w	SingleObjLoad2
000125CE 6600                       		bne.s	loc_11BCE
000125D0                            
000125D0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000125D0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000125D4 3368 0008 0008             		move.w	8(a0),8(a1)
000125DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125E0 137C 0006 0028             		move.b	#6,$28(a1)
000125E6 137C 0004 001C             		move.b	#4,$1C(a1)
000125EC 335A 0010                  		move.w	(a2)+,$10(a1)
000125F0 335A 0012                  		move.w	(a2)+,$12(a1)
000125F4 137C 0098 0020             		move.b	#$98,$20(a1)
000125FA 08E9 0007 0001             		bset	#7,1(a1)
00012600                            
00012600                            loc_11BCE:
00012600 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012604                            
00012604 117C 0006 0024             		move.b	#6,$24(a0)
0001260A                            
0001260A                            Obj5F_End:				; XREF: Obj5F_Index
0001260A 6100 BA20                  		bsr.w	SpeedToPos
0001260E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012614 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001261A 6100 8A84                  		bsr.w	AnimateSprite
0001261E 4A28 0001                  		tst.b	1(a0)
00012622 6A00 BA6A                  		bpl.w	DeleteObject
00012626 6000 BA2A                  		bra.w	DisplaySprite
0001262A                            ; ===========================================================================
0001262A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001263A                            
0001263A                            Ani_obj5F:
0001263A                            	include "_anim\obj5F.asm"
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Animation script - Bomb enemy
0001263A                            ; ---------------------------------------------------------------------------
0001263A 0000                       		dc.w byte_11C12-Ani_obj5F
0001263C 0000                       		dc.w byte_11C16-Ani_obj5F
0001263E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012640 0000                       		dc.w byte_11C20-Ani_obj5F
00012642 0000                       		dc.w byte_11C24-Ani_obj5F
00012644 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012648 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001264E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012652 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012656 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001265A                            		even
0001265A                            		even
0001265A                            
0001265A                            ; ---------------------------------------------------------------------------
0001265A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001265A                            ; ---------------------------------------------------------------------------
0001265A                            Map_obj5F:
0001265A                            	include "_maps\obj5F.asm"
0001265A                            ; ---------------------------------------------------------------------------
0001265A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001265A                            ; ---------------------------------------------------------------------------
0001265A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001265E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012662 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012666 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001266A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001266E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012672 03                         byte_11C40:	dc.b 3
00012673 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012678 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001267D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012682 03                         byte_11C50:	dc.b 3
00012683 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012688 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001268D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012692 03                         byte_11C60:	dc.b 3
00012693 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012698 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001269D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000126A2 03                         byte_11C70:	dc.b 3
000126A3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126A8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000126AD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126B2 03                         byte_11C80:	dc.b 3
000126B3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000126B8 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000126BD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000126C2 03                         byte_11C90:	dc.b 3
000126C3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126C8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000126CD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126D2 02                         byte_11CA0:	dc.b 2
000126D3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000126D8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126DD 02                         byte_11CAB:	dc.b 2
000126DE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126E3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126E8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000126E9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000126EE 01                         byte_11CBC:	dc.b 1			; fuse
000126EF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000126F4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000126F5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000126FA 01                         byte_11CC8:	dc.b 1			; fireball
000126FB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012700                            		even
00012700                            		even
00012700                            
00012700                            ; ===========================================================================
00012700                            ; ---------------------------------------------------------------------------
00012700                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012700                            ; ---------------------------------------------------------------------------
00012700                            
00012700                            Obj60:					; XREF: Obj_Index
00012700 7000                       		moveq	#0,d0
00012702 1028 0024                  		move.b	$24(a0),d0
00012706 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001270A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001270E                            ; ===========================================================================
0001270E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012710 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012712 0000                       		dc.w Obj60_Display-Obj60_Index
00012714 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012716 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012718                            ; ===========================================================================
00012718                            
00012718                            Obj60_Main:				; XREF: Obj60_Index
00012718 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012720 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012726 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001272C 6700                       		beq.s	loc_11D02
0001272E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012734                            
00012734                            loc_11D02:
00012734 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001273A 6600                       		bne.s	loc_11D10
0001273C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012742                            
00012742                            loc_11D10:
00012742 0028 0004 0001             		ori.b	#4,1(a0)
00012748 117C 0004 0018             		move.b	#4,$18(a0)
0001274E 117C 000B 0020             		move.b	#$B,$20(a0)
00012754 117C 000C 0019             		move.b	#$C,$19(a0)
0001275A 7400                       		moveq	#0,d2
0001275C 45E8 0037                  		lea	$37(a0),a2
00012760 264A                       		movea.l	a2,a3
00012762 524A                       		addq.w	#1,a2
00012764 7203                       		moveq	#3,d1
00012766                            
00012766                            Obj60_MakeOrbs:
00012766 6100 BD86                  		bsr.w	SingleObjLoad2
0001276A 6600                       		bne.s	loc_11D90
0001276C 5213                       		addq.b	#1,(a3)
0001276E 3A09                       		move.w	a1,d5
00012770 0445 D000                  		subi.w	#-$3000,d5
00012774 EC4D                       		lsr.w	#6,d5
00012776 0245 007F                  		andi.w	#$7F,d5
0001277A 14C5                       		move.b	d5,(a2)+
0001277C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001277E 137C 0006 0024             		move.b	#6,$24(a1)
00012784 2368 0004 0004             		move.l	4(a0),4(a1)
0001278A 3368 0002 0002             		move.w	2(a0),2(a1)
00012790 0029 0004 0001             		ori.b	#4,1(a1)
00012796 137C 0004 0018             		move.b	#4,$18(a1)
0001279C 137C 0008 0019             		move.b	#8,$19(a1)
000127A2 137C 0003 001A             		move.b	#3,$1A(a1)
000127A8 137C 0098 0020             		move.b	#$98,$20(a1)
000127AE 1342 0026                  		move.b	d2,$26(a1)
000127B2 0602 0040                  		addi.b	#$40,d2
000127B6 2348 003C                  		move.l	a0,$3C(a1)
000127BA 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000127BE                            
000127BE                            loc_11D90:
000127BE 7001                       		moveq	#1,d0
000127C0 0828 0000 0022             		btst	#0,$22(a0)
000127C6 6700                       		beq.s	Obj60_Move
000127C8 4440                       		neg.w	d0
000127CA                            
000127CA                            Obj60_Move:
000127CA 1140 0036                  		move.b	d0,$36(a0)
000127CE 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000127D4 5428 0024                  		addq.b	#2,$24(a0)
000127D8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000127DE 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000127E4 6700                       		beq.s	locret_11DBC	; if not, branch
000127E6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000127EA                            
000127EA                            locret_11DBC:
000127EA 4E75                       		rts	
000127EC                            ; ===========================================================================
000127EC                            
000127EC                            Obj60_ChkSonic:				; XREF: Obj60_Index
000127EC 3038 D008                  		move.w	($FFFFD008).w,d0
000127F0 9068 0008                  		sub.w	8(a0),d0
000127F4 6400                       		bcc.s	loc_11DCA
000127F6 4440                       		neg.w	d0
000127F8                            
000127F8                            loc_11DCA:
000127F8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127FC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127FE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012802 9068 000C                  		sub.w	$C(a0),d0
00012806 6400                       		bcc.s	loc_11DDC
00012808 4440                       		neg.w	d0
0001280A                            
0001280A                            loc_11DDC:
0001280A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001280E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012810 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012814 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012816 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001281C                            
0001281C                            Obj60_Animate:
0001281C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012822 6100 887C                  		bsr.w	AnimateSprite
00012826 6000 0000                  		bra.w	Obj60_ChkDel
0001282A                            ; ===========================================================================
0001282A                            
0001282A                            Obj60_Display:				; XREF: Obj60_Index
0001282A 6100 B800                  		bsr.w	SpeedToPos
0001282E                            
0001282E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001282E 3028 0008                  		move.w	8(a0),d0
00012832 0240 FF80                  		andi.w	#$FF80,d0
00012836 3238 F700                  		move.w	($FFFFF700).w,d1
0001283A 0441 0080                  		subi.w	#$80,d1
0001283E 0241 FF80                  		andi.w	#$FF80,d1
00012842 9041                       		sub.w	d1,d0
00012844 0C40 0280                  		cmpi.w	#$280,d0
00012848 6200 0000                  		bhi.w	Obj60_ChkGone
0001284C 6000 B804                  		bra.w	DisplaySprite
00012850                            ; ===========================================================================
00012850                            
00012850                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012850 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012854 7000                       		moveq	#0,d0
00012856 1028 0023                  		move.b	$23(a0),d0
0001285A 6700                       		beq.s	loc_11E34
0001285C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012862                            
00012862                            loc_11E34:
00012862 45E8 0037                  		lea	$37(a0),a2
00012866 7400                       		moveq	#0,d2
00012868 141A                       		move.b	(a2)+,d2
0001286A 5342                       		subq.w	#1,d2
0001286C 6500                       		bcs.s	Obj60_Delete
0001286E                            
0001286E                            loc_11E40:
0001286E 7000                       		moveq	#0,d0
00012870 101A                       		move.b	(a2)+,d0
00012872 ED48                       		lsl.w	#6,d0
00012874 0680 00FF D000             		addi.l	#$FFD000,d0
0001287A 2240                       		movea.l	d0,a1
0001287C 6100 B812                  		bsr.w	DeleteObject2
00012880 51CA FFEC                  		dbf	d2,loc_11E40
00012884                            
00012884                            Obj60_Delete:
00012884 6000 B808                  		bra.w	DeleteObject
00012888                            ; ===========================================================================
00012888                            
00012888                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012888 2268 003C                  		movea.l	$3C(a0),a1
0001288C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012890 6600 B7FC                  		bne.w	DeleteObject
00012894 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001289A 6600                       		bne.s	Obj60_Circle
0001289C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000128A2 6600                       		bne.s	Obj60_Circle
000128A4 5428 0024                  		addq.b	#2,$24(a0)
000128A8 5329 0037                  		subq.b	#1,$37(a1)
000128AC 6600                       		bne.s	Obj60_FireOrb
000128AE 5429 0024                  		addq.b	#2,$24(a1)
000128B2                            
000128B2                            Obj60_FireOrb:
000128B2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000128B8 0829 0000 0022             		btst	#0,$22(a1)
000128BE 6700                       		beq.s	Obj60_Display2
000128C0 4468 0010                  		neg.w	$10(a0)
000128C4                            
000128C4                            Obj60_Display2:
000128C4 6000 B78C                  		bra.w	DisplaySprite
000128C8                            ; ===========================================================================
000128C8                            
000128C8                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000128C8 1028 0026                  		move.b	$26(a0),d0
000128CC 4EB9 0000 2D3A             		jsr	(CalcSine).l
000128D2 E841                       		asr.w	#4,d1
000128D4 D269 0008                  		add.w	8(a1),d1
000128D8 3141 0008                  		move.w	d1,8(a0)
000128DC E840                       		asr.w	#4,d0
000128DE D069 000C                  		add.w	$C(a1),d0
000128E2 3140 000C                  		move.w	d0,$C(a0)
000128E6 1029 0036                  		move.b	$36(a1),d0
000128EA D128 0026                  		add.b	d0,$26(a0)
000128EE 6000 B762                  		bra.w	DisplaySprite
000128F2                            ; ===========================================================================
000128F2                            
000128F2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000128F2 6100 B738                  		bsr.w	SpeedToPos
000128F6 4A28 0001                  		tst.b	1(a0)
000128FA 6A00 B792                  		bpl.w	DeleteObject
000128FE 6000 B752                  		bra.w	DisplaySprite
00012902                            ; ===========================================================================
00012902                            Ani_obj60:
00012902                            	include "_anim\obj60.asm"
00012902                            ; ---------------------------------------------------------------------------
00012902                            ; Animation script - Orbinaut enemy
00012902                            ; ---------------------------------------------------------------------------
00012902 0000                       		dc.w byte_11EDA-Ani_obj60
00012904 0000                       		dc.w byte_11EDE-Ani_obj60
00012906 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001290A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012910                            		even
00012910                            		even
00012910                            
00012910                            ; ---------------------------------------------------------------------------
00012910                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012910                            ; ---------------------------------------------------------------------------
00012910                            Map_obj60:
00012910                            	include "_maps\obj60.asm"
00012910                            ; ---------------------------------------------------------------------------
00012910                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012910                            ; ---------------------------------------------------------------------------
00012910 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012914 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012918 01                         byte_11EEC:	dc.b 1
00012919 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001291E 01                         byte_11EF2:	dc.b 1
0001291F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012924 01                         byte_11EF8:	dc.b 1
00012925 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001292A 01                         byte_11EFE:	dc.b 1
0001292B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012930                            		even
00012930                            		even
00012930                            
00012930                            ; ===========================================================================
00012930                            ; ---------------------------------------------------------------------------
00012930                            ; Object 16 - harpoon (LZ)
00012930                            ; ---------------------------------------------------------------------------
00012930                            
00012930                            Obj16:					; XREF: Obj_Index
00012930 7000                       		moveq	#0,d0
00012932 1028 0024                  		move.b	$24(a0),d0
00012936 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001293A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001293E                            ; ===========================================================================
0001293E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012940 0000                       		dc.w Obj16_Move-Obj16_Index
00012942 0000                       		dc.w Obj16_Wait-Obj16_Index
00012944                            ; ===========================================================================
00012944                            
00012944                            Obj16_Main:				; XREF: Obj16_Index
00012944 5428 0024                  		addq.b	#2,$24(a0)
00012948 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012950 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012956 0028 0004 0001             		ori.b	#4,1(a0)
0001295C 117C 0004 0018             		move.b	#4,$18(a0)
00012962 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012968 117C 0014 0019             		move.b	#$14,$19(a0)
0001296E 317C 003C 0030             		move.w	#60,$30(a0)
00012974                            
00012974                            Obj16_Move:				; XREF: Obj16_Index
00012974 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001297A 6100 8724                  		bsr.w	AnimateSprite
0001297E 7000                       		moveq	#0,d0
00012980 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012984 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001298A 6000 D76E                  		bra.w	MarkObjGone
0001298E                            ; ===========================================================================
0001298E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012994                            ; ===========================================================================
00012994                            
00012994                            Obj16_Wait:				; XREF: Obj16_Index
00012994 5368 0030                  		subq.w	#1,$30(a0)
00012998 6A00                       		bpl.s	Obj16_ChkDel
0001299A 317C 003C 0030             		move.w	#60,$30(a0)
000129A0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000129A4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000129AA                            
000129AA                            Obj16_ChkDel:
000129AA 6000 D74E                  		bra.w	MarkObjGone
000129AE                            ; ===========================================================================
000129AE                            Ani_obj16:
000129AE                            	include "_anim\obj16.asm"
000129AE                            ; ---------------------------------------------------------------------------
000129AE                            ; Animation script - harpoon (LZ)
000129AE                            ; ---------------------------------------------------------------------------
000129AE 0000                       		dc.w byte_11F8A-Ani_obj16
000129B0 0000                       		dc.w byte_11F8E-Ani_obj16
000129B2 0000                       		dc.w byte_11F92-Ani_obj16
000129B4 0000                       		dc.w byte_11F96-Ani_obj16
000129B6 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000129BA 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000129BE 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000129C2 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000129C6                            		even
000129C6                            		even
000129C6                            
000129C6                            ; ---------------------------------------------------------------------------
000129C6                            ; Sprite mappings - harpoon (LZ)
000129C6                            ; ---------------------------------------------------------------------------
000129C6                            Map_obj16:
000129C6                            	include "_maps\obj16.asm"
000129C6                            ; ---------------------------------------------------------------------------
000129C6                            ; Sprite mappings - harpoon (LZ)
000129C6                            ; ---------------------------------------------------------------------------
000129C6 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000129CA 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000129CE 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000129D2 01                         byte_11FA6:	dc.b 1
000129D3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000129D8 01                         byte_11FAC:	dc.b 1
000129D9 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000129DE 02                         byte_11FB2:	dc.b 2
000129DF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000129E4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000129E9 01                         byte_11FBD:	dc.b 1
000129EA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000129EF 01                         byte_11FC3:	dc.b 1
000129F0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000129F5 02                         byte_11FC9:	dc.b 2
000129F6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000129FB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012A00                            		even
00012A00                            		even
00012A00                            
00012A00                            ; ===========================================================================
00012A00                            ; ---------------------------------------------------------------------------
00012A00                            ; Object 61 - blocks (LZ)
00012A00                            ; ---------------------------------------------------------------------------
00012A00                            
00012A00                            Obj61:					; XREF: Obj_Index
00012A00 7000                       		moveq	#0,d0
00012A02 1028 0024                  		move.b	$24(a0),d0
00012A06 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012A0A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012A0E                            ; ===========================================================================
00012A0E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012A10 0000                       		dc.w Obj61_Action-Obj61_Index
00012A12                            
00012A12 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012A14 200C                       		dc.b $20, $C
00012A16 1010                       		dc.b $10, $10
00012A18 1010                       		dc.b $10, $10
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            Obj61_Main:				; XREF: Obj61_Index
00012A1A 5428 0024                  		addq.b	#2,$24(a0)
00012A1E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012A26 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012A2C 117C 0004 0001             		move.b	#4,1(a0)
00012A32 117C 0003 0018             		move.b	#3,$18(a0)
00012A38 7000                       		moveq	#0,d0
00012A3A 1028 0028                  		move.b	$28(a0),d0
00012A3E E648                       		lsr.w	#3,d0
00012A40 0240 000E                  		andi.w	#$E,d0
00012A44 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012A48 115A 0019                  		move.b	(a2)+,$19(a0)
00012A4C 1152 0016                  		move.b	(a2),$16(a0)
00012A50 E248                       		lsr.w	#1,d0
00012A52 1140 001A                  		move.b	d0,$1A(a0)
00012A56 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A5C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A62 1028 0028                  		move.b	$28(a0),d0
00012A66 0200 000F                  		andi.b	#$F,d0
00012A6A 6700                       		beq.s	Obj61_Action
00012A6C 0C00 0007                  		cmpi.b	#7,d0
00012A70 6700                       		beq.s	Obj61_Action
00012A72 117C 0001 0038             		move.b	#1,$38(a0)
00012A78                            
00012A78                            Obj61_Action:				; XREF: Obj61_Index
00012A78 3F28 0008                  		move.w	8(a0),-(sp)
00012A7C 7000                       		moveq	#0,d0
00012A7E 1028 0028                  		move.b	$28(a0),d0
00012A82 0240 000F                  		andi.w	#$F,d0
00012A86 D040                       		add.w	d0,d0
00012A88 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A8C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A90 381F                       		move.w	(sp)+,d4
00012A92 4A28 0001                  		tst.b	1(a0)
00012A96 6A00                       		bpl.s	Obj61_ChkDel
00012A98 7200                       		moveq	#0,d1
00012A9A 1228 0019                  		move.b	$19(a0),d1
00012A9E 0641 000B                  		addi.w	#$B,d1
00012AA2 7400                       		moveq	#0,d2
00012AA4 1428 0016                  		move.b	$16(a0),d2
00012AA8 3602                       		move.w	d2,d3
00012AAA 5243                       		addq.w	#1,d3
00012AAC 6100 D974                  		bsr.w	SolidObject
00012AB0 1144 003F                  		move.b	d4,$3F(a0)
00012AB4 6100 0000                  		bsr.w	loc_12180
00012AB8                            
00012AB8                            Obj61_ChkDel:
00012AB8 3028 0034                  		move.w	$34(a0),d0
00012ABC 0240 FF80                  		andi.w	#$FF80,d0
00012AC0 3238 F700                  		move.w	($FFFFF700).w,d1
00012AC4 0441 0080                  		subi.w	#$80,d1
00012AC8 0241 FF80                  		andi.w	#$FF80,d1
00012ACC 9041                       		sub.w	d1,d0
00012ACE 0C40 0280                  		cmpi.w	#$280,d0
00012AD2 6200 B5BA                  		bhi.w	DeleteObject
00012AD6 6000 B57A                  		bra.w	DisplaySprite
00012ADA                            ; ===========================================================================
00012ADA 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012ADE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012AE2 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012AE6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012AEA                            ; ===========================================================================
00012AEA                            
00012AEA                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012AEA 4E75                       		rts	
00012AEC                            ; ===========================================================================
00012AEC                            
00012AEC                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012AEC 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012AF0 6600                       		bne.s	loc_120D6	; if yes, branch
00012AF2 0828 0003 0022             		btst	#3,$22(a0)
00012AF8 6700                       		beq.s	locret_120D4
00012AFA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012B00                            
00012B00                            locret_120D4:
00012B00 4E75                       		rts	
00012B02                            ; ===========================================================================
00012B02                            
00012B02                            loc_120D6:
00012B02 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012B06 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012B08 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B0C 4228 0038                  		clr.b	$38(a0)
00012B10 4E75                       		rts	
00012B12                            ; ===========================================================================
00012B12                            
00012B12                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012B12 6100 B518                  		bsr.w	SpeedToPos
00012B16 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012B1A 6100 0000                  		bsr.w	ObjHitFloor
00012B1E 4A41                       		tst.w	d1
00012B20 6A00 0000                  		bpl.w	locret_12106
00012B24 5241                       		addq.w	#1,d1
00012B26 D368 000C                  		add.w	d1,$C(a0)
00012B2A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012B2E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B32                            
00012B32                            locret_12106:
00012B32 4E75                       		rts	
00012B34                            ; ===========================================================================
00012B34                            
00012B34                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012B34 6100 B4F6                  		bsr.w	SpeedToPos
00012B38 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012B3C 6100 0000                  		bsr.w	ObjHitCeiling
00012B40 4A41                       		tst.w	d1
00012B42 6A00 0000                  		bpl.w	locret_12126
00012B46 9368 000C                  		sub.w	d1,$C(a0)
00012B4A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012B4E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B52                            
00012B52                            locret_12126:
00012B52 4E75                       		rts	
00012B54                            ; ===========================================================================
00012B54                            
00012B54                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012B54 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012B5A 6600                       		bne.s	locret_12138	; if not, branch
00012B5C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B60 4228 0038                  		clr.b	$38(a0)
00012B64                            
00012B64                            locret_12138:
00012B64 4E75                       		rts	
00012B66                            ; ===========================================================================
00012B66                            
00012B66                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B66 3038 F646                  		move.w	($FFFFF646).w,d0
00012B6A 9068 000C                  		sub.w	$C(a0),d0
00012B6E 6700                       		beq.s	locret_1217E
00012B70 6400                       		bcc.s	loc_12162
00012B72 0C40 FFFE                  		cmpi.w	#-2,d0
00012B76 6C00                       		bge.s	loc_1214E
00012B78 70FE                       		moveq	#-2,d0
00012B7A                            
00012B7A                            loc_1214E:
00012B7A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B7E 6100 0000                  		bsr.w	ObjHitCeiling
00012B82 4A41                       		tst.w	d1
00012B84 6A00 0000                  		bpl.w	locret_12160
00012B88 9368 000C                  		sub.w	d1,$C(a0)
00012B8C                            
00012B8C                            locret_12160:
00012B8C 4E75                       		rts	
00012B8E                            ; ===========================================================================
00012B8E                            
00012B8E                            loc_12162:				; XREF: Obj61_Type07
00012B8E 0C40 0002                  		cmpi.w	#2,d0
00012B92 6F00                       		ble.s	loc_1216A
00012B94 7002                       		moveq	#2,d0
00012B96                            
00012B96                            loc_1216A:
00012B96 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B9A 6100 0000                  		bsr.w	ObjHitFloor
00012B9E 4A41                       		tst.w	d1
00012BA0 6A00 0000                  		bpl.w	locret_1217E
00012BA4 5241                       		addq.w	#1,d1
00012BA6 D368 000C                  		add.w	d1,$C(a0)
00012BAA                            
00012BAA                            locret_1217E:
00012BAA 4E75                       		rts	
00012BAC                            ; ===========================================================================
00012BAC                            
00012BAC                            loc_12180:				; XREF: Obj61_Action
00012BAC 4A28 0038                  		tst.b	$38(a0)
00012BB0 6700                       		beq.s	locret_121C0
00012BB2 0828 0003 0022             		btst	#3,$22(a0)
00012BB8 6600                       		bne.s	loc_1219A
00012BBA 4A28 003E                  		tst.b	$3E(a0)
00012BBE 6700                       		beq.s	locret_121C0
00012BC0 5928 003E                  		subq.b	#4,$3E(a0)
00012BC4 6000                       		bra.s	loc_121A6
00012BC6                            ; ===========================================================================
00012BC6                            
00012BC6                            loc_1219A:
00012BC6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012BCC 6700                       		beq.s	locret_121C0
00012BCE 5828 003E                  		addq.b	#4,$3E(a0)
00012BD2                            
00012BD2                            loc_121A6:
00012BD2 1028 003E                  		move.b	$3E(a0),d0
00012BD6 4EB9 0000 2D3A             		jsr	(CalcSine).l
00012BDC 323C 0400                  		move.w	#$400,d1
00012BE0 C1C1                       		muls.w	d1,d0
00012BE2 4840                       		swap	d0
00012BE4 D068 0030                  		add.w	$30(a0),d0
00012BE8 3140 000C                  		move.w	d0,$C(a0)
00012BEC                            
00012BEC                            locret_121C0:
00012BEC 4E75                       		rts	
00012BEE                            ; ===========================================================================
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Sprite mappings - blocks (LZ)
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            Map_obj61:
00012BEE                            	include "_maps\obj61.asm"
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Sprite mappings - blocks (LZ)
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012BF2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012BF6 01                         byte_121CA:	dc.b 1
00012BF7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BFC 02                         byte_121D0:	dc.b 2
00012BFD F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012C02 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012C07 01                         byte_121DB:	dc.b 1
00012C08 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012C0D 01                         byte_121E1:	dc.b 1
00012C0E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012C14 00                         		even
00012C14 00                         		even
00012C14                            
00012C14                            ; ===========================================================================
00012C14                            ; ---------------------------------------------------------------------------
00012C14                            ; Object 62 - gargoyle head (LZ)
00012C14                            ; ---------------------------------------------------------------------------
00012C14                            
00012C14                            Obj62:					; XREF: Obj_Index
00012C14 7000                       		moveq	#0,d0
00012C16 1028 0024                  		move.b	$24(a0),d0
00012C1A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012C1E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012C22 6000 D4D6                  		bra.w	MarkObjGone
00012C26                            ; ===========================================================================
00012C26 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012C28 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012C2A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012C2C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012C2E                            
00012C2E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            Obj62_Main:				; XREF: Obj62_Index
00012C36 5428 0024                  		addq.b	#2,$24(a0)
00012C3A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C42 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012C48 0028 0004 0001             		ori.b	#4,1(a0)
00012C4E 117C 0003 0018             		move.b	#3,$18(a0)
00012C54 117C 0010 0019             		move.b	#$10,$19(a0)
00012C5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C5E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C62 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C68 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C6E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C74                            
00012C74                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C74 5328 001E                  		subq.b	#1,$1E(a0)
00012C78 6600                       		bne.s	Obj62_NoFire
00012C7A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C80 6100 B64A                  		bsr.w	ChkObjOnScreen
00012C84 6600                       		bne.s	Obj62_NoFire
00012C86 6100 B850                  		bsr.w	SingleObjLoad
00012C8A 6600                       		bne.s	Obj62_NoFire
00012C8C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C90 5829 0024                  		addq.b	#4,$24(a1)
00012C94 3368 0008 0008             		move.w	8(a0),8(a1)
00012C9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CA0 1368 0001 0001             		move.b	1(a0),1(a1)
00012CA6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012CAC                            
00012CAC                            Obj62_NoFire:
00012CAC 4E75                       		rts	
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            Obj62_FireBall:				; XREF: Obj62_Index
00012CAE 5428 0024                  		addq.b	#2,$24(a0)
00012CB2 117C 0008 0016             		move.b	#8,$16(a0)
00012CB8 117C 0008 0017             		move.b	#8,$17(a0)
00012CBE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012CC6 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012CCC 0028 0004 0001             		ori.b	#4,1(a0)
00012CD2 117C 0004 0018             		move.b	#4,$18(a0)
00012CD8 117C 0098 0020             		move.b	#$98,$20(a0)
00012CDE 117C 0008 0019             		move.b	#8,$19(a0)
00012CE4 117C 0002 001A             		move.b	#2,$1A(a0)
00012CEA 5068 000C                  		addq.w	#8,$C(a0)
00012CEE 317C 0200 0010             		move.w	#$200,$10(a0)
00012CF4 0828 0000 0022             		btst	#0,$22(a0)
00012CFA 6600                       		bne.s	Obj62_Sound
00012CFC 4468 0010                  		neg.w	$10(a0)
00012D00                            
00012D00                            Obj62_Sound:
00012D00 303C 00AE                  		move.w	#$AE,d0
00012D04 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012D0A                            
00012D0A                            Obj62_AniFire:				; XREF: Obj62_Index
00012D0A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012D0E 0200 0007                  		andi.b	#7,d0
00012D12 6600                       		bne.s	Obj62_StopFire
00012D14 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012D1A                            
00012D1A                            Obj62_StopFire:
00012D1A 6100 B310                  		bsr.w	SpeedToPos
00012D1E 0828 0000 0022             		btst	#0,$22(a0)
00012D24 6600                       		bne.s	Obj62_StopFire2
00012D26 76F8                       		moveq	#-8,d3
00012D28 6100 0000                  		bsr.w	ObjHitWallLeft
00012D2C 4A41                       		tst.w	d1
00012D2E 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012D32 4E75                       		rts	
00012D34                            ; ===========================================================================
00012D34                            
00012D34                            Obj62_StopFire2:
00012D34 7608                       		moveq	#8,d3
00012D36 6100 0000                  		bsr.w	ObjHitWallRight
00012D3A 4A41                       		tst.w	d1
00012D3C 6B00 B350                  		bmi.w	DeleteObject
00012D40 4E75                       		rts	
00012D42                            ; ===========================================================================
00012D42                            ; ---------------------------------------------------------------------------
00012D42                            ; Sprite mappings - gargoyle head (LZ)
00012D42                            ; ---------------------------------------------------------------------------
00012D42                            Map_obj62:
00012D42                            	include "_maps\obj62.asm"
00012D42                            ; ---------------------------------------------------------------------------
00012D42                            ; Sprite mappings - gargoyle head (LZ)
00012D42                            ; ---------------------------------------------------------------------------
00012D42 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012D46 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012D4A 03                         byte_12320:	dc.b 3
00012D4B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012D50 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012D55 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012D5A 01                         byte_12330:	dc.b 1
00012D5B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D60 01                         byte_12336:	dc.b 1
00012D61 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D66                            		even
00012D66                            		even
00012D66                            
00012D66                            ; ===========================================================================
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            
00012D66                            Obj63:					; XREF: Obj_Index
00012D66 7000                       		moveq	#0,d0
00012D68 1028 0024                  		move.b	$24(a0),d0
00012D6C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D70 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D74 3028 0030                  		move.w	$30(a0),d0
00012D78 0240 FF80                  		andi.w	#$FF80,d0
00012D7C 3238 F700                  		move.w	($FFFFF700).w,d1
00012D80 0441 0080                  		subi.w	#$80,d1
00012D84 0241 FF80                  		andi.w	#$FF80,d1
00012D88 9041                       		sub.w	d1,d0
00012D8A 0C40 0280                  		cmpi.w	#$280,d0
00012D8E 6200                       		bhi.s	loc_1236A
00012D90                            
00012D90                            Obj63_Display:				; XREF: loc_1236A
00012D90 6000 B2C0                  		bra.w	DisplaySprite
00012D94                            ; ===========================================================================
00012D94                            
00012D94                            loc_1236A:				; XREF: Obj63
00012D94 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D9A 6600                       		bne.s	loc_12378
00012D9C 0C40 FF80                  		cmpi.w	#-$80,d0
00012DA0 64EE                       		bcc.s	Obj63_Display
00012DA2                            
00012DA2                            loc_12378:
00012DA2 1028 002F                  		move.b	$2F(a0),d0
00012DA6 6A00 B2E6                  		bpl.w	DeleteObject
00012DAA 0240 007F                  		andi.w	#$7F,d0
00012DAE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012DB2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012DB8 6000 B2D4                  		bra.w	DeleteObject
00012DBC                            ; ===========================================================================
00012DBC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012DBE 0000                       		dc.w loc_124B2-Obj63_Index
00012DC0 0000                       		dc.w loc_124C2-Obj63_Index
00012DC2 0000                       		dc.w loc_124DE-Obj63_Index
00012DC4                            ; ===========================================================================
00012DC4                            
00012DC4                            Obj63_Main:				; XREF: Obj63_Index
00012DC4 1028 0028                  		move.b	$28(a0),d0
00012DC8 6B00 0000                  		bmi.w	loc_12460
00012DCC 5428 0024                  		addq.b	#2,$24(a0)
00012DD0 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012DD8 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012DDE 0028 0004 0001             		ori.b	#4,1(a0)
00012DE4 117C 0010 0019             		move.b	#$10,$19(a0)
00012DEA 117C 0004 0018             		move.b	#4,$18(a0)
00012DF0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012DF6 6600                       		bne.s	loc_123E2
00012DF8 5828 0024                  		addq.b	#4,$24(a0)
00012DFC 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012E02 117C 0001 0018             		move.b	#1,$18(a0)
00012E08 6000 0000                  		bra.w	loc_124DE
00012E0C                            ; ===========================================================================
00012E0C                            
00012E0C                            loc_123E2:
00012E0C 117C 0004 001A             		move.b	#4,$1A(a0)
00012E12 7000                       		moveq	#0,d0
00012E14 1028 0028                  		move.b	$28(a0),d0
00012E18 3200                       		move.w	d0,d1
00012E1A E648                       		lsr.w	#3,d0
00012E1C 0240 001E                  		andi.w	#$1E,d0
00012E20 45FA 0000                  		lea	Obj63_Data(pc),a2
00012E24 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E28 315A 0038                  		move.w	(a2)+,$38(a0)
00012E2C 315A 0030                  		move.w	(a2)+,$30(a0)
00012E30 214A 003C                  		move.l	a2,$3C(a0)
00012E34 0241 000F                  		andi.w	#$F,d1
00012E38 E549                       		lsl.w	#2,d1
00012E3A 1141 0038                  		move.b	d1,$38(a0)
00012E3E 117C 0004 003A             		move.b	#4,$3A(a0)
00012E44 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012E48 6700                       		beq.s	loc_1244C
00012E4A 117C 0001 003B             		move.b	#1,$3B(a0)
00012E50 4428 003A                  		neg.b	$3A(a0)
00012E54 7200                       		moveq	#0,d1
00012E56 1228 0038                  		move.b	$38(a0),d1
00012E5A D228 003A                  		add.b	$3A(a0),d1
00012E5E B228 0039                  		cmp.b	$39(a0),d1
00012E62 6500                       		bcs.s	loc_12448
00012E64 1001                       		move.b	d1,d0
00012E66 7200                       		moveq	#0,d1
00012E68 4A00                       		tst.b	d0
00012E6A 6A00                       		bpl.s	loc_12448
00012E6C 1228 0039                  		move.b	$39(a0),d1
00012E70 5901                       		subq.b	#4,d1
00012E72                            
00012E72                            loc_12448:
00012E72 1141 0038                  		move.b	d1,$38(a0)
00012E76                            
00012E76                            loc_1244C:
00012E76 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E7C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E82 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E86 6000 0000                  		bra.w	loc_124B2
00012E8A                            ; ===========================================================================
00012E8A                            
00012E8A                            loc_12460:				; XREF: Obj63_Main
00012E8A 1140 002F                  		move.b	d0,$2F(a0)
00012E8E 0240 007F                  		andi.w	#$7F,d0
00012E92 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E96 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E9C 6600 B1F0                  		bne.w	DeleteObject
00012EA0 D040                       		add.w	d0,d0
00012EA2 0240 001E                  		andi.w	#$1E,d0
00012EA6 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012EAC D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EB0 321A                       		move.w	(a2)+,d1
00012EB2 2248                       		movea.l	a0,a1
00012EB4 6000                       		bra.s	Obj63_MakePtfms
00012EB6                            ; ===========================================================================
00012EB6                            
00012EB6                            Obj63_Loop:
00012EB6 6100 B620                  		bsr.w	SingleObjLoad
00012EBA 6600                       		bne.s	loc_124AA
00012EBC                            
00012EBC                            Obj63_MakePtfms:			; XREF: loc_12460
00012EBC 12BC 0063                  		move.b	#$63,0(a1)
00012EC0 335A 0008                  		move.w	(a2)+,8(a1)
00012EC4 335A 000C                  		move.w	(a2)+,$C(a1)
00012EC8 301A                       		move.w	(a2)+,d0
00012ECA 1340 0028                  		move.b	d0,$28(a1)
00012ECE                            
00012ECE                            loc_124AA:
00012ECE 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012ED2                            
00012ED2 588F                       		addq.l	#4,sp
00012ED4 4E75                       		rts	
00012ED6                            ; ===========================================================================
00012ED6                            
00012ED6                            loc_124B2:				; XREF: Obj63_Index
00012ED6 7200                       		moveq	#0,d1
00012ED8 1228 0019                  		move.b	$19(a0),d1
00012EDC 4EB9 0000 7C5C             		jsr	(PlatformObject).l
00012EE2 6000 0000                  		bra.w	sub_12502
00012EE6                            ; ===========================================================================
00012EE6                            
00012EE6                            loc_124C2:				; XREF: Obj63_Index
00012EE6 7200                       		moveq	#0,d1
00012EE8 1228 0019                  		move.b	$19(a0),d1
00012EEC 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
00012EF2 3F28 0008                  		move.w	8(a0),-(sp)
00012EF6 6100 0000                  		bsr.w	sub_12502
00012EFA 341F                       		move.w	(sp)+,d2
00012EFC 4EF9 0000 833A             		jmp	(MvSonicOnPtfm2).l
00012F02                            ; ===========================================================================
00012F02                            
00012F02                            loc_124DE:				; XREF: Obj63_Index
00012F02 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012F06 0240 0003                  		andi.w	#3,d0
00012F0A 6600                       		bne.s	loc_124FC
00012F0C 7201                       		moveq	#1,d1
00012F0E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F12 6700                       		beq.s	loc_124F2
00012F14 4401                       		neg.b	d1
00012F16                            
00012F16                            loc_124F2:
00012F16 D328 001A                  		add.b	d1,$1A(a0)
00012F1A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012F20                            
00012F20                            loc_124FC:
00012F20 588F                       		addq.l	#4,sp
00012F22 6000 D1D6                  		bra.w	MarkObjGone
00012F26                            
00012F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F26                            
00012F26                            
00012F26                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012F26 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012F2A 6700                       		beq.s	loc_12520
00012F2C 4A28 003B                  		tst.b	$3B(a0)
00012F30 6600                       		bne.s	loc_12520
00012F32 117C 0001 003B             		move.b	#1,$3B(a0)
00012F38 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012F3E 4428 003A                  		neg.b	$3A(a0)
00012F42 6000                       		bra.s	loc_12534
00012F44                            ; ===========================================================================
00012F44                            
00012F44                            loc_12520:
00012F44 3028 0008                  		move.w	8(a0),d0
00012F48 B068 0034                  		cmp.w	$34(a0),d0
00012F4C 6600                       		bne.s	loc_1256A
00012F4E 3028 000C                  		move.w	$C(a0),d0
00012F52 B068 0036                  		cmp.w	$36(a0),d0
00012F56 6600                       		bne.s	loc_1256A
00012F58                            
00012F58                            loc_12534:
00012F58 7200                       		moveq	#0,d1
00012F5A 1228 0038                  		move.b	$38(a0),d1
00012F5E D228 003A                  		add.b	$3A(a0),d1
00012F62 B228 0039                  		cmp.b	$39(a0),d1
00012F66 6500                       		bcs.s	loc_12552
00012F68 1001                       		move.b	d1,d0
00012F6A 7200                       		moveq	#0,d1
00012F6C 4A00                       		tst.b	d0
00012F6E 6A00                       		bpl.s	loc_12552
00012F70 1228 0039                  		move.b	$39(a0),d1
00012F74 5901                       		subq.b	#4,d1
00012F76                            
00012F76                            loc_12552:
00012F76 1141 0038                  		move.b	d1,$38(a0)
00012F7A 2268 003C                  		movea.l	$3C(a0),a1
00012F7E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F84 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F8A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F8E                            
00012F8E                            loc_1256A:
00012F8E 6100 B09C                  		bsr.w	SpeedToPos
00012F92 4E75                       		rts	
00012F94                            ; End of function sub_12502
00012F94                            
00012F94                            
00012F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F94                            
00012F94                            
00012F94                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F94 7000                       		moveq	#0,d0
00012F96 343C FF00                  		move.w	#-$100,d2
00012F9A 3028 0008                  		move.w	8(a0),d0
00012F9E 9068 0034                  		sub.w	$34(a0),d0
00012FA2 6400                       		bcc.s	loc_12584
00012FA4 4440                       		neg.w	d0
00012FA6 4442                       		neg.w	d2
00012FA8                            
00012FA8                            loc_12584:
00012FA8 7200                       		moveq	#0,d1
00012FAA 363C FF00                  		move.w	#-$100,d3
00012FAE 3228 000C                  		move.w	$C(a0),d1
00012FB2 9268 0036                  		sub.w	$36(a0),d1
00012FB6 6400                       		bcc.s	loc_12598
00012FB8 4441                       		neg.w	d1
00012FBA 4443                       		neg.w	d3
00012FBC                            
00012FBC                            loc_12598:
00012FBC B240                       		cmp.w	d0,d1
00012FBE 6500                       		bcs.s	loc_125C2
00012FC0 3028 0008                  		move.w	8(a0),d0
00012FC4 9068 0034                  		sub.w	$34(a0),d0
00012FC8 6700                       		beq.s	loc_125AE
00012FCA 48C0                       		ext.l	d0
00012FCC E180                       		asl.l	#8,d0
00012FCE 81C1                       		divs.w	d1,d0
00012FD0 4440                       		neg.w	d0
00012FD2                            
00012FD2                            loc_125AE:
00012FD2 3140 0010                  		move.w	d0,$10(a0)
00012FD6 3143 0012                  		move.w	d3,$12(a0)
00012FDA 4840                       		swap	d0
00012FDC 3140 000A                  		move.w	d0,$A(a0)
00012FE0 4268 000E                  		clr.w	$E(a0)
00012FE4 4E75                       		rts	
00012FE6                            ; ===========================================================================
00012FE6                            
00012FE6                            loc_125C2:				; XREF: Obj63_ChangeDir
00012FE6 3228 000C                  		move.w	$C(a0),d1
00012FEA 9268 0036                  		sub.w	$36(a0),d1
00012FEE 6700                       		beq.s	loc_125D4
00012FF0 48C1                       		ext.l	d1
00012FF2 E181                       		asl.l	#8,d1
00012FF4 83C0                       		divs.w	d0,d1
00012FF6 4441                       		neg.w	d1
00012FF8                            
00012FF8                            loc_125D4:
00012FF8 3141 0012                  		move.w	d1,$12(a0)
00012FFC 3142 0010                  		move.w	d2,$10(a0)
00013000 4841                       		swap	d1
00013002 3141 000E                  		move.w	d1,$E(a0)
00013006 4268 000A                  		clr.w	$A(a0)
0001300A 4E75                       		rts	
0001300C                            ; End of function Obj63_ChangeDir
0001300C                            
0001300C                            ; ===========================================================================
0001300C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001300E 0000                       		dc.w word_12610-Obj63_Data
00013010 0000                       		dc.w word_12628-Obj63_Data
00013012 0000                       		dc.w word_1263C-Obj63_Data
00013014 0000                       		dc.w word_12650-Obj63_Data
00013016 0000                       		dc.w word_12668-Obj63_Data
00013018 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013028 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013034 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013044 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001304C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013060 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013074 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001308C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000130A0                            
000130A0                            ; ---------------------------------------------------------------------------
000130A0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000130A0                            ; ---------------------------------------------------------------------------
000130A0                            Map_obj63:
000130A0                            	include "_maps\obj63.asm"
000130A0                            ; ---------------------------------------------------------------------------
000130A0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000130A0                            ; ---------------------------------------------------------------------------
000130A0 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000130A4 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000130A8 0000                       		dc.w byte_1269E-Map_obj63
000130AA 01                         byte_12686:	dc.b 1
000130AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000130B0 01                         byte_1268C:	dc.b 1
000130B1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000130B6 01                         byte_12692:	dc.b 1
000130B7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000130BC 01                         byte_12698:	dc.b 1
000130BD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000130C2 01                         byte_1269E:	dc.b 1
000130C3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000130C8                            		even
000130C8                            		even
000130C8                            
000130C8                            ; ===========================================================================
000130C8                            ; ---------------------------------------------------------------------------
000130C8                            ; Object 64 - bubbles (LZ)
000130C8                            ; ---------------------------------------------------------------------------
000130C8                            
000130C8                            Obj64:					; XREF: Obj_Index
000130C8 7000                       		moveq	#0,d0
000130CA 1028 0024                  		move.b	$24(a0),d0
000130CE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000130D2 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000130D6                            ; ===========================================================================
000130D6 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000130D8 0000                       		dc.w Obj64_Animate-Obj64_Index
000130DA 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000130DC 0000                       		dc.w Obj64_Display2-Obj64_Index
000130DE 0000                       		dc.w Obj64_Delete3-Obj64_Index
000130E0 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000130E2                            ; ===========================================================================
000130E2                            
000130E2                            Obj64_Main:				; XREF: Obj64_Index
000130E2 5428 0024                  		addq.b	#2,$24(a0)
000130E6 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000130EE 317C 8348 0002             		move.w	#$8348,2(a0)
000130F4 117C 0084 0001             		move.b	#$84,1(a0)
000130FA 117C 0010 0019             		move.b	#$10,$19(a0)
00013100 117C 0001 0018             		move.b	#1,$18(a0)
00013106 1028 0028                  		move.b	$28(a0),d0	; get object type
0001310A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001310C 5028 0024                  		addq.b	#8,$24(a0)
00013110 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013114 1140 0032                  		move.b	d0,$32(a0)
00013118 1140 0033                  		move.b	d0,$33(a0)
0001311C 117C 0006 001C             		move.b	#6,$1C(a0)
00013122 6000 0000                  		bra.w	Obj64_BblMaker
00013126                            ; ===========================================================================
00013126                            
00013126                            Obj64_Bubble:				; XREF: Obj64_Main
00013126 1140 001C                  		move.b	d0,$1C(a0)
0001312A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013130 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013136 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001313C 1140 0026                  		move.b	d0,$26(a0)
00013140                            
00013140                            Obj64_Animate:				; XREF: Obj64_Index
00013140 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013146 4EB9 0000 B0A0             		jsr	AnimateSprite
0001314C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013152 6600                       		bne.s	Obj64_ChkWater
00013154 117C 0001 002E             		move.b	#1,$2E(a0)
0001315A                            
0001315A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001315A 3038 F646                  		move.w	($FFFFF646).w,d0
0001315E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013162 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013164                            
00013164                            Obj64_Burst:				; XREF: Obj64_Wobble
00013164 117C 0006 0024             		move.b	#6,$24(a0)
0001316A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001316E 6000 0000                  		bra.w	Obj64_Display2
00013172                            ; ===========================================================================
00013172                            
00013172                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013172 1028 0026                  		move.b	$26(a0),d0
00013176 5228 0026                  		addq.b	#1,$26(a0)
0001317A 0240 007F                  		andi.w	#$7F,d0
0001317E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013184 1031 0000                  		move.b	(a1,d0.w),d0
00013188 4880                       		ext.w	d0
0001318A D068 0030                  		add.w	$30(a0),d0
0001318E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013192 4A28 002E                  		tst.b	$2E(a0)
00013196 6700                       		beq.s	Obj64_Display
00013198 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001319C 6700                       		beq.s	Obj64_Display	; if not, branch
0001319E                            
0001319E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000131A2 303C 00AD                  		move.w	#$AD,d0
000131A6 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000131AC 43F8 D000                  		lea	($FFFFD000).w,a1
000131B0 4269 0010                  		clr.w	$10(a1)
000131B4 4269 0012                  		clr.w	$12(a1)
000131B8 4269 0014                  		clr.w	$14(a1)
000131BC 137C 0015 001C             		move.b	#$15,$1C(a1)
000131C2 337C 0023 003E             		move.w	#$23,$3E(a1)
000131C8 137C 0000 003C             		move.b	#0,$3C(a1)
000131CE 08A9 0005 0022             		bclr	#5,$22(a1)
000131D4 08A9 0004 0022             		bclr	#4,$22(a1)
000131DA 0829 0002 0022             		btst	#2,$22(a1)
000131E0 6700 FF82                  		beq.w	Obj64_Burst
000131E4 08A9 0002 0022             		bclr	#2,$22(a1)
000131EA 137C 0013 0016             		move.b	#$13,$16(a1)
000131F0 137C 0009 0017             		move.b	#9,$17(a1)
000131F6 5B69 000C                  		subq.w	#5,$C(a1)
000131FA 6000 FF68                  		bra.w	Obj64_Burst
000131FE                            ; ===========================================================================
000131FE                            
000131FE                            Obj64_Display:				; XREF: Obj64_Wobble
000131FE 6100 AE2C                  		bsr.w	SpeedToPos
00013202 4A28 0001                  		tst.b	1(a0)
00013206 6A00                       		bpl.s	Obj64_Delete
00013208 4EFA AE48                  		jmp	DisplaySprite
0001320C                            ; ===========================================================================
0001320C                            
0001320C                            Obj64_Delete:
0001320C 4EFA AE80                  		jmp	DeleteObject
00013210                            ; ===========================================================================
00013210                            
00013210                            Obj64_Display2:				; XREF: Obj64_Index
00013210 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013216 4EB9 0000 B0A0             		jsr	AnimateSprite
0001321C 4A28 0001                  		tst.b	1(a0)
00013220 6A00                       		bpl.s	Obj64_Delete2
00013222 4EFA AE2E                  		jmp	DisplaySprite
00013226                            ; ===========================================================================
00013226                            
00013226                            Obj64_Delete2:
00013226 4EFA AE66                  		jmp	DeleteObject
0001322A                            ; ===========================================================================
0001322A                            
0001322A                            Obj64_Delete3:				; XREF: Obj64_Index
0001322A 6000 AE62                  		bra.w	DeleteObject
0001322E                            ; ===========================================================================
0001322E                            
0001322E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001322E 4A68 0036                  		tst.w	$36(a0)
00013232 6600                       		bne.s	loc_12874
00013234 3038 F646                  		move.w	($FFFFF646).w,d0
00013238 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001323C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013240 4A28 0001                  		tst.b	1(a0)
00013244 6A00 0000                  		bpl.w	Obj64_ChkDel
00013248 5368 0038                  		subq.w	#1,$38(a0)
0001324C 6A00 0000                  		bpl.w	loc_12914
00013250 317C 0001 0036             		move.w	#1,$36(a0)
00013256                            
00013256                            loc_1283A:
00013256 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001325C 3200                       		move.w	d0,d1
0001325E 0240 0007                  		andi.w	#7,d0
00013262 0C40 0006                  		cmpi.w	#6,d0
00013266 64EE                       		bcc.s	loc_1283A
00013268                            
00013268 1140 0034                  		move.b	d0,$34(a0)
0001326C 0241 000C                  		andi.w	#$C,d1
00013270 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013276 D2C1                       		adda.w	d1,a1
00013278 2149 003C                  		move.l	a1,$3C(a0)
0001327C 5328 0032                  		subq.b	#1,$32(a0)
00013280 6A00                       		bpl.s	loc_12872
00013282 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013288 08E8 0007 0036             		bset	#7,$36(a0)
0001328E                            
0001328E                            loc_12872:
0001328E 6000                       		bra.s	loc_1287C
00013290                            ; ===========================================================================
00013290                            
00013290                            loc_12874:				; XREF: Obj64_BblMaker
00013290 5368 0038                  		subq.w	#1,$38(a0)
00013294 6A00 0000                  		bpl.w	loc_12914
00013298                            
00013298                            loc_1287C:
00013298 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001329E 0240 001F                  		andi.w	#$1F,d0
000132A2 3140 0038                  		move.w	d0,$38(a0)
000132A6 6100 B230                  		bsr.w	SingleObjLoad
000132AA 6600                       		bne.s	loc_128F8
000132AC 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000132B0 3368 0008 0008             		move.w	8(a0),8(a1)
000132B6 4EB9 0000 2D14             		jsr	(RandomNumber).l
000132BC 0240 000F                  		andi.w	#$F,d0
000132C0 5140                       		subq.w	#8,d0
000132C2 D169 0008                  		add.w	d0,8(a1)
000132C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000132CC 7000                       		moveq	#0,d0
000132CE 1028 0034                  		move.b	$34(a0),d0
000132D2 2468 003C                  		movea.l	$3C(a0),a2
000132D6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000132DC 0828 0007 0036             		btst	#7,$36(a0)
000132E2 6700                       		beq.s	loc_128F8
000132E4 4EB9 0000 2D14             		jsr	(RandomNumber).l
000132EA 0240 0003                  		andi.w	#3,d0
000132EE 6600                       		bne.s	loc_128E4
000132F0 08E8 0006 0036             		bset	#6,$36(a0)
000132F6 6600                       		bne.s	loc_128F8
000132F8 137C 0002 0028             		move.b	#2,$28(a1)
000132FE                            
000132FE                            loc_128E4:
000132FE 4A28 0034                  		tst.b	$34(a0)
00013302 6600                       		bne.s	loc_128F8
00013304 08E8 0006 0036             		bset	#6,$36(a0)
0001330A 6600                       		bne.s	loc_128F8
0001330C 137C 0002 0028             		move.b	#2,$28(a1)
00013312                            
00013312                            loc_128F8:
00013312 5328 0034                  		subq.b	#1,$34(a0)
00013316 6A00                       		bpl.s	loc_12914
00013318 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001331E 0240 007F                  		andi.w	#$7F,d0
00013322 0640 0080                  		addi.w	#$80,d0
00013326 D168 0038                  		add.w	d0,$38(a0)
0001332A 4268 0036                  		clr.w	$36(a0)
0001332E                            
0001332E                            loc_12914:
0001332E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013334 4EB9 0000 B0A0             		jsr	AnimateSprite
0001333A                            
0001333A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001333A 3028 0008                  		move.w	8(a0),d0
0001333E 0240 FF80                  		andi.w	#$FF80,d0
00013342 3238 F700                  		move.w	($FFFFF700).w,d1
00013346 0441 0080                  		subi.w	#$80,d1
0001334A 0241 FF80                  		andi.w	#$FF80,d1
0001334E 9041                       		sub.w	d1,d0
00013350 0C40 0280                  		cmpi.w	#$280,d0
00013354 6200 AD38                  		bhi.w	DeleteObject
00013358 3038 F646                  		move.w	($FFFFF646).w,d0
0001335C B068 000C                  		cmp.w	$C(a0),d0
00013360 6500 ACF0                  		bcs.w	DisplaySprite
00013364 4E75                       		rts	
00013366                            ; ===========================================================================
00013366                            ; bubble production sequence
00013366                            
00013366                            ; 0 = small bubble, 1 =	large bubble
00013366                            
00013366 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013378                            
00013378                            ; ===========================================================================
00013378                            
00013378                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013378 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001337C 6B00                       		bmi.s	loc_12998
0001337E 43F8 D000                  		lea	($FFFFD000).w,a1
00013382 3029 0008                  		move.w	8(a1),d0
00013386 3228 0008                  		move.w	8(a0),d1
0001338A 0441 0010                  		subi.w	#$10,d1
0001338E B240                       		cmp.w	d0,d1
00013390 6400                       		bcc.s	loc_12998
00013392 0641 0020                  		addi.w	#$20,d1
00013396 B240                       		cmp.w	d0,d1
00013398 6500                       		bcs.s	loc_12998
0001339A 3029 000C                  		move.w	$C(a1),d0
0001339E 3228 000C                  		move.w	$C(a0),d1
000133A2 B240                       		cmp.w	d0,d1
000133A4 6400                       		bcc.s	loc_12998
000133A6 0641 0010                  		addi.w	#$10,d1
000133AA B240                       		cmp.w	d0,d1
000133AC 6500                       		bcs.s	loc_12998
000133AE 7001                       		moveq	#1,d0
000133B0 4E75                       		rts	
000133B2                            ; ===========================================================================
000133B2                            
000133B2                            loc_12998:
000133B2 7000                       		moveq	#0,d0
000133B4 4E75                       		rts	
000133B6                            ; ===========================================================================
000133B6                            Ani_obj64:
000133B6                            	include "_anim\obj64.asm"
000133B6                            ; ---------------------------------------------------------------------------
000133B6                            ; Animation script - bubbles (LZ)
000133B6                            ; ---------------------------------------------------------------------------
000133B6 0000                       		dc.w byte_129AA-Ani_obj64
000133B8 0000                       		dc.w byte_129B0-Ani_obj64
000133BA 0000                       		dc.w byte_129B6-Ani_obj64
000133BC 0000                       		dc.w byte_129BE-Ani_obj64
000133BE 0000                       		dc.w byte_129BE-Ani_obj64
000133C0 0000                       		dc.w byte_129C0-Ani_obj64
000133C2 0000                       		dc.w byte_129C6-Ani_obj64
000133C4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000133CA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000133D0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000133D8 04FC                       byte_129BE:	dc.b 4,	$FC
000133DA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000133E0 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000133E6 00                         		even
000133E6 00                         		even
000133E6                            
000133E6                            ; ---------------------------------------------------------------------------
000133E6                            ; Sprite mappings - bubbles (LZ)
000133E6                            ; ---------------------------------------------------------------------------
000133E6                            Map_obj64:
000133E6                            	include "_maps\obj64.asm"
000133E6                            ; ---------------------------------------------------------------------------
000133E6                            ; Sprite mappings - bubbles (LZ)
000133E6                            ; ---------------------------------------------------------------------------
000133E6 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000133EA 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000133EE 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000133F2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000133F6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133FA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133FE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013402 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013406 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001340A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001340E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013412 0000                       		dc.w byte_12A9C-Map_obj64
00013414 01                         byte_129FA:	dc.b 1
00013415 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001341A 01                         byte_12A00:	dc.b 1
0001341B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013420 01                         byte_12A06:	dc.b 1
00013421 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013426 01                         byte_12A0C:	dc.b 1
00013427 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001342C 01                         byte_12A12:	dc.b 1
0001342D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013432 01                         byte_12A18:	dc.b 1
00013433 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013438 01                         byte_12A1E:	dc.b 1
00013439 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001343E 04                         byte_12A24:	dc.b 4
0001343F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013444 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013449 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001344E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013453 04                         byte_12A39:	dc.b 4
00013454 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013459 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001345E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013463 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013468 01                         byte_12A4E:	dc.b 1
00013469 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001346E 01                         byte_12A54:	dc.b 1
0001346F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013474 01                         byte_12A5A:	dc.b 1
00013475 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001347A 01                         byte_12A60:	dc.b 1
0001347B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013480 01                         byte_12A66:	dc.b 1
00013481 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013486 01                         byte_12A6C:	dc.b 1
00013487 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001348C 01                         byte_12A72:	dc.b 1
0001348D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013492 01                         byte_12A78:	dc.b 1
00013493 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013498 01                         byte_12A7E:	dc.b 1
00013499 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001349E 01                         byte_12A84:	dc.b 1
0001349F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000134A4 01                         byte_12A8A:	dc.b 1
000134A5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000134AA 01                         byte_12A90:	dc.b 1
000134AB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000134B0 01                         byte_12A96:	dc.b 1
000134B1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000134B6 00                         byte_12A9C:	dc.b 0
000134B8 00                         		even
000134B8 00                         		even
000134B8                            
000134B8                            ; ===========================================================================
000134B8                            ; ---------------------------------------------------------------------------
000134B8                            ; Object 65 - waterfalls (LZ)
000134B8                            ; ---------------------------------------------------------------------------
000134B8                            
000134B8                            Obj65:					; XREF: Obj_Index
000134B8 7000                       		moveq	#0,d0
000134BA 1028 0024                  		move.b	$24(a0),d0
000134BE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000134C2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000134C6                            ; ===========================================================================
000134C6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000134C8 0000                       		dc.w Obj65_Animate-Obj65_Index
000134CA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000134CC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000134CE 0000                       		dc.w loc_12B36-Obj65_Index
000134D0                            ; ===========================================================================
000134D0                            
000134D0                            Obj65_Main:				; XREF: Obj65_Index
000134D0 5828 0024                  		addq.b	#4,$24(a0)
000134D4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000134DC 317C 4259 0002             		move.w	#$4259,2(a0)
000134E2 0028 0004 0001             		ori.b	#4,1(a0)
000134E8 117C 0018 0019             		move.b	#$18,$19(a0)
000134EE 117C 0001 0018             		move.b	#1,$18(a0)
000134F4 1028 0028                  		move.b	$28(a0),d0	; get object type
000134F8 6A00                       		bpl.s	loc_12AE6
000134FA 08E8 0007 0002             		bset	#7,2(a0)
00013500                            
00013500                            loc_12AE6:
00013500 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013504 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013508 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001350C 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001350E 4228 0018                  		clr.b	$18(a0)
00013512 5528 0024                  		subq.b	#2,$24(a0)
00013516 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001351C 6700                       		beq.s	loc_12B0A	; if not, branch
0001351E 117C 0006 0024             		move.b	#6,$24(a0)
00013524                            
00013524                            loc_12B0A:
00013524 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001352A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001352C 117C 0008 0024             		move.b	#8,$24(a0)
00013532                            
00013532                            Obj65_Animate:				; XREF: Obj65_Index
00013532 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013538 4EB9 0000 B0A0             		jsr	AnimateSprite
0001353E                            
0001353E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001353E 6000 CBBA                  		bra.w	MarkObjGone
00013542                            ; ===========================================================================
00013542                            
00013542                            Obj65_FixHeight:			; XREF: Obj65_Index
00013542 3038 F646                  		move.w	($FFFFF646).w,d0
00013546 0440 0010                  		subi.w	#$10,d0
0001354A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001354E 60E2                       		bra.s	Obj65_Animate
00013550                            ; ===========================================================================
00013550                            
00013550                            loc_12B36:				; XREF: Obj65_Index
00013550 08A8 0007 0002             		bclr	#7,2(a0)
00013556 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001355C 6600                       		bne.s	Obj65_Animate2
0001355E 08E8 0007 0002             		bset	#7,2(a0)
00013564                            
00013564                            Obj65_Animate2:
00013564 60CC                       		bra.s	Obj65_Animate
00013566                            ; ===========================================================================
00013566                            Ani_obj65:
00013566                            	include "_anim\obj65.asm"
00013566                            ; ---------------------------------------------------------------------------
00013566                            ; Animation script - waterfall (LZ)
00013566                            ; ---------------------------------------------------------------------------
00013566 0000                       		dc.w byte_12B4E-Ani_obj65
00013568 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001356E 00                         		even
0001356E 00                         		even
0001356E                            
0001356E                            ; ---------------------------------------------------------------------------
0001356E                            ; Sprite mappings - waterfalls (LZ)
0001356E                            ; ---------------------------------------------------------------------------
0001356E                            Map_obj65:
0001356E                            	include "_maps\obj65.asm"
0001356E                            ; ---------------------------------------------------------------------------
0001356E                            ; Sprite mappings - waterfalls (LZ)
0001356E                            ; ---------------------------------------------------------------------------
0001356E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013572 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013576 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001357A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001357E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013582 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013586 01                         byte_12B6C:	dc.b 1
00013587 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001358C 02                         byte_12B72:	dc.b 2
0001358D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013592 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013597 02                         byte_12B7D:	dc.b 2
00013598 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001359D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000135A2 01                         byte_12B88:	dc.b 1
000135A3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000135A8 02                         byte_12B8E:	dc.b 2
000135A9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000135AE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000135B3 01                         byte_12B99:	dc.b 1
000135B4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000135B9 01                         byte_12B9F:	dc.b 1
000135BA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000135BF 01                         byte_12BA5:	dc.b 1
000135C0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000135C5 02                         byte_12BAB:	dc.b 2
000135C6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000135CB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000135D0 02                         byte_12BB6:	dc.b 2
000135D1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000135D6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000135DB 02                         byte_12BC1:	dc.b 2
000135DC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000135E1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000135E6 02                         byte_12BCC:	dc.b 2
000135E7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000135EC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000135F2 00                         		even
000135F2 00                         		even
000135F2                            
000135F2                            ; ===========================================================================
000135F2                            ; ---------------------------------------------------------------------------
000135F2                            ; Object 01 - Sonic
000135F2                            ; ---------------------------------------------------------------------------
000135F2                            
000135F2                            Obj01:					; XREF: Obj_Index
000135F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000135F6 6700                       		beq.s	Obj01_Normal	; if not, branch
000135F8 4EF9 0000 0000             		jmp	DebugMode
000135FE                            ; ===========================================================================
000135FE                            
000135FE                            Obj01_Normal:
000135FE 7000                       		moveq	#0,d0
00013600 1028 0024                  		move.b	$24(a0),d0
00013604 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013608 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001360C                            ; ===========================================================================
0001360C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001360E 0000                       		dc.w Obj01_Control-Obj01_Index
00013610 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013612 0000                       		dc.w Obj01_Death-Obj01_Index
00013614 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013616                            ; ===========================================================================
00013616                            
00013616                            Player_Maps:
00013616 0000 0000                  	dc.l	Map_Sonic
0001361A 0000 0000                  	dc.l	Map_Sonic ; gronic
0001361E 0000 0000                  	dc.l	Map_Sonic ; anakama
00013622 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013626                            	; insert player mapping here
00013626                            	
00013626                            Obj01_Main:				; XREF: Obj01_Index
00013626 5428 0024                  		addq.b	#2,$24(a0)
0001362A 117C 0013 0016             		move.b	#$13,$16(a0)
00013630 117C 0009 0017             		move.b	#9,$17(a0)
00013636                            		
00013636 7000                       		moveq	#0,d0
00013638 1038 FFE8                  		move.b	(v_character),d0
0001363C E548                       		lsl.w	#2,d0
0001363E 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013642 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013648                            		
00013648 317C 0780 0002             		move.w	#$780,2(a0)
0001364E 117C 0002 0018             		move.b	#2,$18(a0)
00013654 117C 0018 0019             		move.b	#$18,$19(a0)
0001365A 117C 0004 0001             		move.b	#4,1(a0)
00013660 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013666 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001366C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013672                            
00013672                            Obj01_Control:				; XREF: Obj01_Index
00013672 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013676 6700                       		beq.s	loc_12C58	; if not, branch
00013678 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001367E 6700                       		beq.s	loc_12C58	; if not, branch
00013680 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013686 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001368A 4E75                       		rts	
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            loc_12C58:
0001368C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013690 6600                       		bne.s	loc_12C64	; if yes, branch
00013692 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013698                            
00013698                            loc_12C64:
00013698 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001369E 6600                       		bne.s	loc_12C7E	; if yes, branch
000136A0 7000                       		moveq	#0,d0
000136A2 1028 0022                  		move.b	$22(a0),d0
000136A6 0240 0006                  		andi.w	#6,d0
000136AA 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000136AE 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000136B2                            
000136B2                            loc_12C7E:
000136B2 6100                       		bsr.s	Sonic_Display
000136B4 6100 0000                  		bsr.w	Sonic_RecordPos
000136B8 6100 0000                  		bsr.w	Sonic_Water
000136BC 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000136C2 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000136C8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000136CC 6700                       		beq.s	loc_12CA6
000136CE 4A28 001C                  		tst.b	$1C(a0)
000136D2 6600                       		bne.s	loc_12CA6
000136D4 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000136DA                            
000136DA                            loc_12CA6:
000136DA 6100 0000                  		bsr.w	Sonic_Animate
000136DE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000136E2 6B00                       		bmi.s	loc_12CB6
000136E4 4EB9 0000 0000             		jsr	TouchResponse
000136EA                            
000136EA                            loc_12CB6:
000136EA 6100 0000                  		bsr.w	Sonic_Loops
000136EE 6100 0000                  		bsr.w	LoadSonicDynPLC
000136F2 4E75                       		rts	
000136F4                            ; ===========================================================================
000136F4 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000136F6 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136F8 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136FA 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            ; Music	to play	after invincibility wears off
000136FC                            ; ---------------------------------------------------------------------------
000136FC                            ; ===========================================================================
000136FC                            
000136FC                            Sonic_Display:				; XREF: loc_12C7E
000136FC 3028 0030                  		move.w	$30(a0),d0
00013700 6700                       		beq.s	Obj01_Display
00013702 5368 0030                  		subq.w	#1,$30(a0)
00013706 E648                       		lsr.w	#3,d0
00013708 6400                       		bcc.s	Obj01_ChkInvin
0001370A                            
0001370A                            Obj01_Display:
0001370A 4EBA A946                  		jsr	DisplaySprite
0001370E                            
0001370E                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001370E                             
0001370E                            Obj01_ChkInvin:
0001370E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013712 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013716 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001371A 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001371E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013722 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013726 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001372A 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001372E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013734 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013738 7000                       		moveq	#0,d0
0001373A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001373E                             
0001373E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013744 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013746 43F9 0000 3D94             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001374C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001374E                             
0001374E                            Obj01_GetBgm2:
0001374E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013754 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013756 43F9 0000 3D9C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001375C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001375E                             
0001375E                            Obj01_GetBgm3:
0001375E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013764 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013766 43F9 0000 3DA4             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001376C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001376E                             
0001376E                            Obj01_GetBgm4:
0001376E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013774 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013776 43F9 0000 3DAC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001377C                             
0001377C                            Obj01_PlayMusic:
0001377C 1031 0000                  		move.b	(a1,d0.w),d0
00013780 4EB9 0000 159A             		jsr	(PlaySound).l	; play normal music
00013786                             
00013786                            ; NineKode ends here.
00013786                            
00013786                            Obj01_RmvInvin:
00013786 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001378C                            
0001378C                            Obj01_ChkShoes:
0001378C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013790 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013792 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013796 6700                       		beq.s	Obj01_ExitChk
00013798 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001379C 6600                       		bne.s	Obj01_ExitChk
0001379E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000137A4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000137AA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137B0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000137B6 303C 00E3                  		move.w	#$E3,d0
000137BA 4EF9 0000 159A             		jmp	(PlaySound).l	; run music at normal speed
000137C0                            ; ===========================================================================
000137C0                            
000137C0                            Obj01_ExitChk:
000137C0 4E75                       		rts	
000137C2                            
000137C2                            ; ---------------------------------------------------------------------------
000137C2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000137C2                            ; ---------------------------------------------------------------------------
000137C2                            
000137C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137C2                            
000137C2                            
000137C2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000137C2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000137C6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000137CA 43F1 0000                  		lea	(a1,d0.w),a1
000137CE 32E8 0008                  		move.w	8(a0),(a1)+
000137D2 32E8 000C                  		move.w	$C(a0),(a1)+
000137D6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000137DA 4E75                       		rts	
000137DC                            ; End of function Sonic_RecordPos
000137DC                            
000137DC                            ; ---------------------------------------------------------------------------
000137DC                            ; Subroutine for Sonic when he's underwater
000137DC                            ; ---------------------------------------------------------------------------
000137DC                            
000137DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137DC                            
000137DC                            
000137DC                            Sonic_Water:				; XREF: loc_12C7E
000137DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000137E2 6700                       		beq.s	Obj01_InWater	; if yes, branch
000137E4                            
000137E4                            locret_12D80:
000137E4 4E75                       		rts	
000137E6                            ; ===========================================================================
000137E6                            
000137E6                            Obj01_InWater:
000137E6 3038 F646                  		move.w	($FFFFF646).w,d0
000137EA B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000137EE 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000137F0 08E8 0006 0022             		bset	#6,$22(a0)
000137F6 66EC                       		bne.s	locret_12D80
000137F8 6100 0000                  		bsr.w	ResumeMusic
000137FC 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013802 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013808 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001380E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013814 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001381A E0E8 0010                  		asr	$10(a0)
0001381E E0E8 0012                  		asr	$12(a0)
00013822 E0E8 0012                  		asr	$12(a0)
00013826 67BC                       		beq.s	locret_12D80
00013828 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001382E 303C 00AA                  		move.w	#$AA,d0
00013832 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play splash sound
00013838                            ; ===========================================================================
00013838                            
00013838                            Obj01_OutWater:
00013838 08A8 0006 0022             		bclr	#6,$22(a0)
0001383E 67A4                       		beq.s	locret_12D80
00013840 6100 0000                  		bsr.w	ResumeMusic
00013844 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001384A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013850 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013856 E1E8 0012                  		asl	$12(a0)
0001385A 6700 FF88                  		beq.w	locret_12D80
0001385E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013864 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001386A 6E00                       		bgt.s	loc_12E0E
0001386C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013872                            
00013872                            loc_12E0E:
00013872 303C 00AA                  		move.w	#$AA,d0
00013876 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play splash sound
0001387C                            ; End of function Sonic_Water
0001387C                            
0001387C                            ; ===========================================================================
0001387C                            ; ---------------------------------------------------------------------------
0001387C                            ; Modes	for controlling	Sonic
0001387C                            ; ---------------------------------------------------------------------------
0001387C                            
0001387C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001387C 6100 0000                  		bsr.w	Sonic_Jump
00013880 6100 0000                  		bsr.w	Sonic_SlopeResist
00013884 6100 0000                  		bsr.w	Sonic_Move
00013888 6100 0000                  		bsr.w	Sonic_Roll
0001388C 6100 0000                  		bsr.w	Sonic_LevelBound
00013890 4EBA A79A                  		jsr	SpeedToPos
00013894 6100 0000                  		bsr.w	Sonic_AnglePos
00013898 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001389C 4E75                       		rts	
0001389E                            ; ===========================================================================
0001389E                            
0001389E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001389E 6100 0000                  		bsr.w	Sonic_JumpHeight
000138A2 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138A6 6100 0000                  		bsr.w	Sonic_LevelBound
000138AA 4EBA A70E                  		jsr	ObjectFall
000138AE 0828 0006 0022             		btst	#6,$22(a0)
000138B4 6700                       		beq.s	loc_12E5C
000138B6 0468 0028 0012             		subi.w	#$28,$12(a0)
000138BC                            
000138BC                            loc_12E5C:
000138BC 6100 0000                  		bsr.w	Sonic_JumpAngle
000138C0 6100 0000                  		bsr.w	Sonic_Floor
000138C4 4E75                       		rts	
000138C6                            ; ===========================================================================
000138C6                            
000138C6                            Obj01_MdRoll:				; XREF: Obj01_Modes
000138C6 6100 0000                  		bsr.w	Sonic_Jump
000138CA 6100 0000                  		bsr.w	Sonic_RollRepel
000138CE 6100 0000                  		bsr.w	Sonic_RollSpeed
000138D2 6100 0000                  		bsr.w	Sonic_LevelBound
000138D6 4EBA A754                  		jsr	SpeedToPos
000138DA 6100 0000                  		bsr.w	Sonic_AnglePos
000138DE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000138E2 4E75                       		rts	
000138E4                            ; ===========================================================================
000138E4                            
000138E4                            Obj01_MdJump2:				; XREF: Obj01_Modes
000138E4 6100 0000                  		bsr.w	Sonic_JumpHeight
000138E8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138EC 6100 0000                  		bsr.w	Sonic_LevelBound
000138F0 6100 0000                  		bsr.w	Sonic_AirUnroll
000138F4 4EBA A6C4                  		jsr	ObjectFall
000138F8 0828 0006 0022             		btst	#6,$22(a0)
000138FE 6700                       		beq.s	loc_12EA6
00013900 0468 0028 0012             		subi.w	#$28,$12(a0)
00013906                            
00013906                            loc_12EA6:
00013906 6100 0000                  		bsr.w	Sonic_JumpAngle
0001390A 6100 0000                  		bsr.w	Sonic_Floor
0001390E 4E75                       		rts	
00013910                            ; ---------------------------------------------------------------------------
00013910                            ; Subroutine to	make Sonic walk/run
00013910                            ; ---------------------------------------------------------------------------
00013910                            
00013910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013910                            
00013910                            
00013910                            Sonic_Move:				; XREF: Obj01_MdNormal
00013910 3C38 F760                  		move.w	($FFFFF760).w,d6
00013914 3A38 F762                  		move.w	($FFFFF762).w,d5
00013918 3838 F764                  		move.w	($FFFFF764).w,d4
0001391C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013920 6600 0000                  		bne.w	loc_12FEE
00013924 4A68 003E                  		tst.w	$3E(a0)
00013928 6600 0000                  		bne.w	Obj01_ResetScr
0001392C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013932 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013934 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001393A 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001393C 6100 0000                  		bsr.w	Sonic_MoveLeft
00013940                            
00013940                            Obj01_NotLeft:
00013940 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013946 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013948 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001394E 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013950 6100 0000                  		bsr.w	Sonic_MoveLeft
00013954 6000                       		bra.s	Obj01_NotRight
00013956                            
00013956                            Obj01_MoveRight:
00013956 6100 0000                  		bsr.w	Sonic_MoveRight
0001395A                            
0001395A                            Obj01_NotRight:
0001395A 1028 0026                  		move.b	$26(a0),d0
0001395E 0600 0020                  		addi.b	#$20,d0
00013962 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013966 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001396A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001396E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013972 08A8 0005 0022             		bclr	#5,$22(a0)
00013978 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001397E 0828 0003 0022             		btst	#3,$22(a0)
00013984 6700                       		beq.s	Sonic_Balance
00013986 7000                       		moveq	#0,d0
00013988 1028 003D                  		move.b	$3D(a0),d0
0001398C ED48                       		lsl.w	#6,d0
0001398E 43F8 D000                  		lea	($FFFFD000).w,a1
00013992 43F1 0000                  		lea	(a1,d0.w),a1
00013996 4A29 0022                  		tst.b	$22(a1)
0001399A 6B00                       		bmi.s	Sonic_LookUp
0001399C 7200                       		moveq	#0,d1
0001399E 1229 0019                  		move.b	$19(a1),d1
000139A2 3401                       		move.w	d1,d2
000139A4 D442                       		add.w	d2,d2
000139A6 5942                       		subq.w	#4,d2
000139A8 D268 0008                  		add.w	8(a0),d1
000139AC 9269 0008                  		sub.w	8(a1),d1
000139B0 0C41 0004                  		cmpi.w	#4,d1
000139B4 6D00                       		blt.s	loc_12F6A
000139B6 B242                       		cmp.w	d2,d1
000139B8 6C00                       		bge.s	loc_12F5A
000139BA 6000                       		bra.s	Sonic_LookUp
000139BC                            ; ===========================================================================
000139BC                            
000139BC                            Sonic_Balance:
000139BC 4EB9 0000 0000             		jsr	ObjHitFloor
000139C2 0C41 000C                  		cmpi.w	#$C,d1
000139C6 6D00                       		blt.s	Sonic_LookUp
000139C8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000139CE 6600                       		bne.s	loc_12F62
000139D0                            
000139D0                            loc_12F5A:
000139D0 08A8 0000 0022             		bclr	#0,$22(a0)
000139D6 6000                       		bra.s	loc_12F70
000139D8                            ; ===========================================================================
000139D8                            
000139D8                            loc_12F62:
000139D8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000139DE 6600                       		bne.s	Sonic_LookUp
000139E0                            
000139E0                            loc_12F6A:
000139E0 08E8 0000 0022             		bset	#0,$22(a0)
000139E6                            
000139E6                            loc_12F70:
000139E6 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000139EC 6000                       		bra.s	Obj01_ResetScr
000139EE                            ; ===========================================================================
000139EE                            
000139EE                            Sonic_LookUp:
000139EE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000139F4 6700                       		beq.s	Sonic_Duck	; if not, branch
000139F6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139FC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013A02 6700                       		beq.s	loc_12FC2
00013A04 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013A08 6000                       		bra.s	loc_12FC2
00013A0A                            ; ===========================================================================
00013A0A                            
00013A0A                            Sonic_Duck:
00013A0A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A10 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013A12 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013A18 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013A1E 6700                       		beq.s	loc_12FC2
00013A20 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A24 6000                       		bra.s	loc_12FC2
00013A26                            ; ===========================================================================
00013A26                            
00013A26                            Obj01_ResetScr:
00013A26 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013A2C 6700                       		beq.s	loc_12FC2	; if yes, branch
00013A2E 6400                       		bcc.s	loc_12FBE
00013A30 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013A34                            
00013A34                            loc_12FBE:
00013A34 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013A38                            
00013A38                            loc_12FC2:
00013A38 1038 F602                  		move.b	($FFFFF602).w,d0
00013A3C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013A40 6600                       		bne.s	loc_12FEE	; if yes, branch
00013A42 3028 0014                  		move.w	$14(a0),d0
00013A46 6700                       		beq.s	loc_12FEE
00013A48 6B00                       		bmi.s	loc_12FE2
00013A4A 9045                       		sub.w	d5,d0
00013A4C 6400                       		bcc.s	loc_12FDC
00013A4E 303C 0000                  		move.w	#0,d0
00013A52                            
00013A52                            loc_12FDC:
00013A52 3140 0014                  		move.w	d0,$14(a0)
00013A56 6000                       		bra.s	loc_12FEE
00013A58                            ; ===========================================================================
00013A58                            
00013A58                            loc_12FE2:
00013A58 D045                       		add.w	d5,d0
00013A5A 6400                       		bcc.s	loc_12FEA
00013A5C 303C 0000                  		move.w	#0,d0
00013A60                            
00013A60                            loc_12FEA:
00013A60 3140 0014                  		move.w	d0,$14(a0)
00013A64                            
00013A64                            loc_12FEE:
00013A64 1028 0026                  		move.b	$26(a0),d0
00013A68 4EB9 0000 2D3A             		jsr	(CalcSine).l
00013A6E C3E8 0014                  		muls.w	$14(a0),d1
00013A72 E081                       		asr.l	#8,d1
00013A74 3141 0010                  		move.w	d1,$10(a0)
00013A78 C1E8 0014                  		muls.w	$14(a0),d0
00013A7C E080                       		asr.l	#8,d0
00013A7E 3140 0012                  		move.w	d0,$12(a0)
00013A82                            
00013A82                            loc_1300C:
00013A82 1028 0026                  		move.b	$26(a0),d0
00013A86 0600 0040                  		addi.b	#$40,d0
00013A8A 6B00                       		bmi.s	locret_1307C
00013A8C 123C 0040                  		move.b	#$40,d1
00013A90 4A68 0014                  		tst.w	$14(a0)
00013A94 6700                       		beq.s	locret_1307C
00013A96 6B00                       		bmi.s	loc_13024
00013A98 4441                       		neg.w	d1
00013A9A                            
00013A9A                            loc_13024:
00013A9A 1028 0026                  		move.b	$26(a0),d0
00013A9E D001                       		add.b	d1,d0
00013AA0 3F00                       		move.w	d0,-(sp)
00013AA2 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013AA6 301F                       		move.w	(sp)+,d0
00013AA8 4A41                       		tst.w	d1
00013AAA 6A00                       		bpl.s	locret_1307C
00013AAC E141                       		asl.w	#8,d1
00013AAE 0600 0020                  		addi.b	#$20,d0
00013AB2 0200 00C0                  		andi.b	#$C0,d0
00013AB6 6700                       		beq.s	loc_13078
00013AB8 0C00 0040                  		cmpi.b	#$40,d0
00013ABC 6700                       		beq.s	loc_13066
00013ABE 0C00 0080                  		cmpi.b	#$80,d0
00013AC2 6700                       		beq.s	loc_13060
00013AC4 D368 0010                  		add.w	d1,$10(a0)
00013AC8 08E8 0005 0022             		bset	#5,$22(a0)
00013ACE 317C 0000 0014             		move.w	#0,$14(a0)
00013AD4 4E75                       		rts	
00013AD6                            ; ===========================================================================
00013AD6                            
00013AD6                            loc_13060:
00013AD6 9368 0012                  		sub.w	d1,$12(a0)
00013ADA 4E75                       		rts	
00013ADC                            ; ===========================================================================
00013ADC                            
00013ADC                            loc_13066:
00013ADC 9368 0010                  		sub.w	d1,$10(a0)
00013AE0 08E8 0005 0022             		bset	#5,$22(a0)
00013AE6 317C 0000 0014             		move.w	#0,$14(a0)
00013AEC 4E75                       		rts	
00013AEE                            ; ===========================================================================
00013AEE                            
00013AEE                            loc_13078:
00013AEE D368 0012                  		add.w	d1,$12(a0)
00013AF2                            
00013AF2                            locret_1307C:
00013AF2 4E75                       		rts	
00013AF4                            ; End of function Sonic_Move
00013AF4                            
00013AF4                            
00013AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AF4                            
00013AF4                            
00013AF4                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013AF4 3028 0014                  		move.w	$14(a0),d0
00013AF8 6700                       		beq.s	loc_13086
00013AFA 6A00                       		bpl.s	loc_130B2
00013AFC                            
00013AFC                            loc_13086:
00013AFC 08E8 0000 0022             		bset	#0,$22(a0)
00013B02 6600                       		bne.s	loc_1309A
00013B04 08A8 0005 0022             		bclr	#5,$22(a0)
00013B0A 117C 0001 001D             		move.b	#1,$1D(a0)
00013B10                            
00013B10                            loc_1309A:
00013B10 9045                       		sub.w	d5,d0
00013B12 3206                       		move.w	d6,d1
00013B14 4441                       		neg.w	d1
00013B16 B041                       		cmp.w	d1,d0
00013B18 6E00                       		bgt.s	loc_130A6
00013B1A 3001                       		move.w	d1,d0
00013B1C                            
00013B1C                            loc_130A6:
00013B1C 3140 0014                  		move.w	d0,$14(a0)
00013B20 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            loc_130B2:				; XREF: Sonic_MoveLeft
00013B28 9044                       		sub.w	d4,d0
00013B2A 6400                       		bcc.s	loc_130BA
00013B2C 303C FF80                  		move.w	#-$80,d0
00013B30                            
00013B30                            loc_130BA:
00013B30 3140 0014                  		move.w	d0,$14(a0)
00013B34 1028 0026                  		move.b	$26(a0),d0
00013B38 0600 0020                  		addi.b	#$20,d0
00013B3C 0200 00C0                  		andi.b	#$C0,d0
00013B40 6600                       		bne.s	locret_130E8
00013B42 0C40 0400                  		cmpi.w	#$400,d0
00013B46 6D00                       		blt.s	locret_130E8
00013B48 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B4E 08A8 0000 0022             		bclr	#0,$22(a0)
00013B54 303C 00A4                  		move.w	#$A4,d0
00013B58 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B5E                            
00013B5E                            locret_130E8:
00013B5E 4E75                       		rts	
00013B60                            ; End of function Sonic_MoveLeft
00013B60                            
00013B60                            
00013B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B60                            
00013B60                            
00013B60                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B60 3028 0014                  		move.w	$14(a0),d0
00013B64 6B00                       		bmi.s	loc_13118
00013B66 08A8 0000 0022             		bclr	#0,$22(a0)
00013B6C 6700                       		beq.s	loc_13104
00013B6E 08A8 0005 0022             		bclr	#5,$22(a0)
00013B74 117C 0001 001D             		move.b	#1,$1D(a0)
00013B7A                            
00013B7A                            loc_13104:
00013B7A D045                       		add.w	d5,d0
00013B7C B046                       		cmp.w	d6,d0
00013B7E 6D00                       		blt.s	loc_1310C
00013B80 3006                       		move.w	d6,d0
00013B82                            
00013B82                            loc_1310C:
00013B82 3140 0014                  		move.w	d0,$14(a0)
00013B86 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B8C 4E75                       		rts	
00013B8E                            ; ===========================================================================
00013B8E                            
00013B8E                            loc_13118:				; XREF: Sonic_MoveRight
00013B8E D044                       		add.w	d4,d0
00013B90 6400                       		bcc.s	loc_13120
00013B92 303C 0080                  		move.w	#$80,d0
00013B96                            
00013B96                            loc_13120:
00013B96 3140 0014                  		move.w	d0,$14(a0)
00013B9A 1028 0026                  		move.b	$26(a0),d0
00013B9E 0600 0020                  		addi.b	#$20,d0
00013BA2 0200 00C0                  		andi.b	#$C0,d0
00013BA6 6600                       		bne.s	locret_1314E
00013BA8 0C40 FC00                  		cmpi.w	#-$400,d0
00013BAC 6E00                       		bgt.s	locret_1314E
00013BAE 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013BB4 08E8 0000 0022             		bset	#0,$22(a0)
00013BBA 303C 00A4                  		move.w	#$A4,d0
00013BBE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013BC4                            
00013BC4                            locret_1314E:
00013BC4 4E75                       		rts	
00013BC6                            ; End of function Sonic_MoveRight
00013BC6                            
00013BC6                            ; ---------------------------------------------------------------------------
00013BC6                            ; Subroutine to	change Sonic's speed as he rolls
00013BC6                            ; ---------------------------------------------------------------------------
00013BC6                            
00013BC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BC6                            
00013BC6                            
00013BC6                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013BC6 3C38 F760                  		move.w	($FFFFF760).w,d6
00013BCA E346                       		asl.w	#1,d6
00013BCC 3A38 F762                  		move.w	($FFFFF762).w,d5
00013BD0 E245                       		asr.w	#1,d5
00013BD2 3838 F764                  		move.w	($FFFFF764).w,d4
00013BD6 E444                       		asr.w	#2,d4
00013BD8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BDC 6600 0000                  		bne.w	loc_131CC
00013BE0 4A68 003E                  		tst.w	$3E(a0)
00013BE4 6600                       		bne.s	loc_13188
00013BE6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013BEC 6700                       		beq.s	loc_1317C	; if not, branch
00013BEE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BF4 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013BF6 6100 0000                  		bsr.w	Sonic_RollLeft
00013BFA                            
00013BFA                            loc_1317C:
00013BFA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013C00 6700                       		beq.s	loc_13188	; if not, branch
00013C02 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013C08 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013C0A 6100 0000                  		bsr.w	Sonic_RollLeft
00013C0E 6000                       		bra.s	loc_13188
00013C10                            
00013C10                            SonicRS_RollRight:
00013C10 6100 0000                  		bsr.w	Sonic_RollRight
00013C14                            
00013C14                            loc_13188:
00013C14 3028 0014                  		move.w	$14(a0),d0
00013C18 6700                       		beq.s	loc_131AA
00013C1A 6B00                       		bmi.s	loc_1319E
00013C1C 9045                       		sub.w	d5,d0
00013C1E 6400                       		bcc.s	loc_13198
00013C20 303C 0000                  		move.w	#0,d0
00013C24                            
00013C24                            loc_13198:
00013C24 3140 0014                  		move.w	d0,$14(a0)
00013C28 6000                       		bra.s	loc_131AA
00013C2A                            ; ===========================================================================
00013C2A                            
00013C2A                            loc_1319E:				; XREF: Sonic_RollSpeed
00013C2A D045                       		add.w	d5,d0
00013C2C 6400                       		bcc.s	loc_131A6
00013C2E 303C 0000                  		move.w	#0,d0
00013C32                            
00013C32                            loc_131A6:
00013C32 3140 0014                  		move.w	d0,$14(a0)
00013C36                            
00013C36                            loc_131AA:
00013C36 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013C3A 6600                       		bne.s	loc_131CC	; if yes, branch
00013C3C 08A8 0002 0022             		bclr	#2,$22(a0)
00013C42 117C 0013 0016             		move.b	#$13,$16(a0)
00013C48 117C 0009 0017             		move.b	#9,$17(a0)
00013C4E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013C54 5B68 000C                  		subq.w	#5,$C(a0)
00013C58                            
00013C58                            loc_131CC:
00013C58 1028 0026                  		move.b	$26(a0),d0
00013C5C 4EB9 0000 2D3A             		jsr	(CalcSine).l
00013C62 C1E8 0014                  		muls.w	$14(a0),d0
00013C66 E080                       		asr.l	#8,d0
00013C68 3140 0012                  		move.w	d0,$12(a0)
00013C6C C3E8 0014                  		muls.w	$14(a0),d1
00013C70 E081                       		asr.l	#8,d1
00013C72 0C41 1000                  		cmpi.w	#$1000,d1
00013C76 6F00                       		ble.s	loc_131F0
00013C78 323C 1000                  		move.w	#$1000,d1
00013C7C                            
00013C7C                            loc_131F0:
00013C7C 0C41 F000                  		cmpi.w	#-$1000,d1
00013C80 6C00                       		bge.s	loc_131FA
00013C82 323C F000                  		move.w	#-$1000,d1
00013C86                            
00013C86                            loc_131FA:
00013C86 3141 0010                  		move.w	d1,$10(a0)
00013C8A 6000 FDF6                  		bra.w	loc_1300C
00013C8E                            ; End of function Sonic_RollSpeed
00013C8E                            
00013C8E                            
00013C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C8E                            
00013C8E                            
00013C8E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C8E 3028 0014                  		move.w	$14(a0),d0
00013C92 6700                       		beq.s	loc_1320A
00013C94 6A00                       		bpl.s	loc_13218
00013C96                            
00013C96                            loc_1320A:
00013C96 08E8 0000 0022             		bset	#0,$22(a0)
00013C9C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CA2 4E75                       		rts	
00013CA4                            ; ===========================================================================
00013CA4                            
00013CA4                            loc_13218:
00013CA4 9044                       		sub.w	d4,d0
00013CA6 6400                       		bcc.s	loc_13220
00013CA8 303C FF80                  		move.w	#-$80,d0
00013CAC                            
00013CAC                            loc_13220:
00013CAC 3140 0014                  		move.w	d0,$14(a0)
00013CB0 4E75                       		rts	
00013CB2                            ; End of function Sonic_RollLeft
00013CB2                            
00013CB2                            
00013CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CB2                            
00013CB2                            
00013CB2                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013CB2 3028 0014                  		move.w	$14(a0),d0
00013CB6 6B00                       		bmi.s	loc_1323A
00013CB8 08A8 0000 0022             		bclr	#0,$22(a0)
00013CBE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CC4 4E75                       		rts	
00013CC6                            ; ===========================================================================
00013CC6                            
00013CC6                            loc_1323A:
00013CC6 D044                       		add.w	d4,d0
00013CC8 6400                       		bcc.s	loc_13242
00013CCA 303C 0080                  		move.w	#$80,d0
00013CCE                            
00013CCE                            loc_13242:
00013CCE 3140 0014                  		move.w	d0,$14(a0)
00013CD2 4E75                       		rts	
00013CD4                            ; End of function Sonic_RollRight
00013CD4                            
00013CD4                            Sonic_AirUnroll:
00013CD4                            		
00013CD4 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013CD8 6600                       		bne.s	@timer
00013CDA 1038 F605                  		move.b	($FFFFF605).w,d0
00013CDE 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013CE2 6700                       		beq.s	@end	; if not, branch
00013CE4 08A8 0002 0022             		bclr	#2,$22(a0)
00013CEA 117C 0013 0016             		move.b	#$13,$16(a0)
00013CF0 117C 0009 0017             		move.b	#9,$17(a0)
00013CF6 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CFC 303C 00A5                  		move.w	#$A5,d0
00013D00 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play fart sound
00013D06 2028 0010                  		move.l	$10(a0),d0
00013D0A D080                       		add.l	d0,d0
00013D0C 2140 0010                  		move.l	d0,$10(a0)
00013D10 5B68 000C                  		subq.w	#5,$C(a0)
00013D14                            	@end:
00013D14 4E75                       		rts
00013D16                            	@timer:
00013D16 5328 003A                  		subq.b	#1,$3A(a0)
00013D1A 4E75                       		rts
00013D1C                            
00013D1C                            ; ---------------------------------------------------------------------------
00013D1C                            ; Subroutine to	change Sonic's direction while jumping
00013D1C                            ; ---------------------------------------------------------------------------
00013D1C                            
00013D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D1C                            
00013D1C                            
00013D1C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D1C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D20 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D24 E345                       		asl.w	#1,d5
00013D26 0828 0004 0022             		btst	#4,$22(a0)
00013D2C 6600                       		bne.s	Obj01_ResetScr2
00013D2E 3028 0010                  		move.w	$10(a0),d0
00013D32 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D38 6700                       		beq.s	loc_13278	; if not, branch
00013D3A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D40 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013D42 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D46 6E00                       		bgt.s	loc_13278
00013D48 3001                       		move.w	d1,d0
00013D4A                            
00013D4A                            loc_13278:
00013D4A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D50 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013D52 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D58 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D5A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D5E 6E00                       		bgt.s	Obj01_JumpMove
00013D60 3001                       		move.w	d1,d0
00013D62 6000                       		bra.s	Obj01_JumpMove
00013D64                            
00013D64                            SonicCJD_JumpLeft:
00013D64 08E8 0000 0022             		bset	#0,$22(a0)
00013D6A 9045                       		sub.w	d5,d0
00013D6C 3206                       		move.w	d6,d1
00013D6E 4441                       		neg.w	d1
00013D70 B041                       		cmp.w	d1,d0
00013D72                            		; bgt.s	loc_13278
00013D72                            		; move.w	d1,d0
00013D72 4E75                       		rts
00013D74                            
00013D74                            SonicCJD_JumpRight:
00013D74 08A8 0000 0022             		bclr	#0,$22(a0)
00013D7A D045                       		add.w	d5,d0
00013D7C B046                       		cmp.w	d6,d0
00013D7E 6D00                       		blt.s	Obj01_JumpMove
00013D80 3006                       		move.w	d6,d0
00013D82                            
00013D82                            Obj01_JumpMove:
00013D82 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D86                            
00013D86                            Obj01_ResetScr2:
00013D86 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D8C 6700                       		beq.s	loc_132A4	; if yes, branch
00013D8E 6400                       		bcc.s	loc_132A0
00013D90 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D94                            
00013D94                            loc_132A0:
00013D94 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D98                            
00013D98                            loc_132A4:
00013D98 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D9E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013DA0 3028 0010                  		move.w	$10(a0),d0
00013DA4 3200                       		move.w	d0,d1
00013DA6 EA41                       		asr.w	#5,d1
00013DA8 6700                       		beq.s	locret_132D2
00013DAA 6B00                       		bmi.s	loc_132C6
00013DAC 9041                       		sub.w	d1,d0
00013DAE 6400                       		bcc.s	loc_132C0
00013DB0 303C 0000                  		move.w	#0,d0
00013DB4                            
00013DB4                            loc_132C0:
00013DB4 3140 0010                  		move.w	d0,$10(a0)
00013DB8 4E75                       		rts	
00013DBA                            ; ===========================================================================
00013DBA                            
00013DBA                            loc_132C6:
00013DBA 9041                       		sub.w	d1,d0
00013DBC 6500                       		bcs.s	loc_132CE
00013DBE 303C 0000                  		move.w	#0,d0
00013DC2                            
00013DC2                            loc_132CE:
00013DC2 3140 0010                  		move.w	d0,$10(a0)
00013DC6                            
00013DC6                            locret_132D2:
00013DC6 4E75                       		rts	
00013DC8                            ; End of function Sonic_ChgJumpDir
00013DC8                            
00013DC8                            ; ===========================================================================
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8                            ; Unused subroutine to squash Sonic
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8 1028 0026                  		move.b	$26(a0),d0
00013DCC 0600 0020                  		addi.b	#$20,d0
00013DD0 0200 00C0                  		andi.b	#$C0,d0
00013DD4 6600                       		bne.s	locret_13302
00013DD6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DDA 4A41                       		tst.w	d1
00013DDC 6A00                       		bpl.s	locret_13302
00013DDE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013DE4 317C 0000 0010             		move.w	#0,$10(a0)
00013DEA 317C 0000 0012             		move.w	#0,$12(a0)
00013DF0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013DF6                            
00013DF6                            locret_13302:
00013DF6 4E75                       		rts	
00013DF8                            ; ---------------------------------------------------------------------------
00013DF8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DF8                            ; ---------------------------------------------------------------------------
00013DF8                            
00013DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF8                            
00013DF8                            
00013DF8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DF8 2228 0008                  		move.l	8(a0),d1
00013DFC 3028 0010                  		move.w	$10(a0),d0
00013E00 48C0                       		ext.l	d0
00013E02 E180                       		asl.l	#8,d0
00013E04 D280                       		add.l	d0,d1
00013E06 4841                       		swap	d1
00013E08 3038 F728                  		move.w	($FFFFF728).w,d0
00013E0C 0640 0010                  		addi.w	#$10,d0
00013E10 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E12 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013E14 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013E18 0640 0128                  		addi.w	#$128,d0
00013E1C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E20 6600                       		bne.s	loc_13332
00013E22 0640 0040                  		addi.w	#$40,d0
00013E26                            
00013E26                            loc_13332:
00013E26 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E28 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013E2A                            
00013E2A                            loc_13336:
00013E2A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E2E 0640 00E0                  		addi.w	#$E0,d0
00013E32 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013E36 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013E38 4E75                       		rts	
00013E3A                            ; ===========================================================================
00013E3A                            
00013E3A                            Boundary_Bottom:
00013E3A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013E40 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013E44 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013E4A 6500 0000                  		bcs.w	KillSonic
00013E4E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013E52 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E58 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E5E 4E75                       		rts	
00013E60                            ; ===========================================================================
00013E60                            
00013E60                            Boundary_Sides:
00013E60 3140 0008                  		move.w	d0,8(a0)
00013E64 317C 0000 000A             		move.w	#0,$A(a0)
00013E6A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E70 317C 0000 0014             		move.w	#0,$14(a0)
00013E76 60B2                       		bra.s	loc_13336
00013E78                            ; End of function Sonic_LevelBound
00013E78                            
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            ; Subroutine allowing Sonic to roll when he's moving
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            
00013E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E78                            
00013E78                            
00013E78                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E78 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E7C 6600                       		bne.s	Obj01_NoRoll
00013E7E 3028 0014                  		move.w	$14(a0),d0
00013E82 6A00                       		bpl.s	loc_13392
00013E84 4440                       		neg.w	d0
00013E86                            
00013E86                            loc_13392:
00013E86 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E8A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E8C 1038 F602                  		move.b	($FFFFF602).w,d0
00013E90 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E94 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E96 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E9C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E9E                            
00013E9E                            Obj01_NoRoll:
00013E9E 4E75                       		rts	
00013EA0                            ; ===========================================================================
00013EA0                            
00013EA0                            Obj01_ChkRoll:
00013EA0 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013EA6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013EA8 4E75                       		rts	
00013EAA                            ; ===========================================================================
00013EAA                            
00013EAA                            Obj01_DoRoll:
00013EAA 08E8 0002 0022             		bset	#2,$22(a0)
00013EB0 117C 000E 0016             		move.b	#$E,$16(a0)
00013EB6 117C 0007 0017             		move.b	#7,$17(a0)
00013EBC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EC2 5A68 000C                  		addq.w	#5,$C(a0)
00013EC6 303C 00BE                  		move.w	#$BE,d0
00013ECA 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013ED0 4A68 0014                  		tst.w	$14(a0)
00013ED4 6600                       		bne.s	locret_133E8
00013ED6 317C 0200 0014             		move.w	#$200,$14(a0)
00013EDC                            
00013EDC                            locret_133E8:
00013EDC 4E75                       		rts	
00013EDE                            ; End of function Sonic_Roll
00013EDE                            
00013EDE                            ; ---------------------------------------------------------------------------
00013EDE                            ; Subroutine allowing Sonic to jump
00013EDE                            ; ---------------------------------------------------------------------------
00013EDE                            
00013EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EDE                            
00013EDE                            
00013EDE                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013EDE 1038 F603                  		move.b	($FFFFF603).w,d0
00013EE2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013EE6 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013EEA 7000                       		moveq	#0,d0
00013EEC 1028 0026                  		move.b	$26(a0),d0
00013EF0 0600 0080                  		addi.b	#$80,d0
00013EF4 6100 0000                  		bsr.w	sub_14D48
00013EF8 0C41 0006                  		cmpi.w	#6,d1
00013EFC 6D00 0000                  		blt.w	locret_1348E
00013F00 343C 0680                  		move.w	#$680,d2
00013F04 0828 0006 0022             		btst	#6,$22(a0)
00013F0A 6700                       		beq.s	loc_1341C
00013F0C 343C 0380                  		move.w	#$380,d2
00013F10                            
00013F10                            loc_1341C:
00013F10 7000                       		moveq	#0,d0
00013F12 1028 0026                  		move.b	$26(a0),d0
00013F16 0400 0040                  		subi.b	#$40,d0
00013F1A 4EB9 0000 2D3A             		jsr	(CalcSine).l
00013F20 C3C2                       		muls.w	d2,d1
00013F22 E081                       		asr.l	#8,d1
00013F24 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013F28 C1C2                       		muls.w	d2,d0
00013F2A E080                       		asr.l	#8,d0
00013F2C D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013F30 08E8 0001 0022             		bset	#1,$22(a0)
00013F36 08A8 0005 0022             		bclr	#5,$22(a0)
00013F3C 588F                       		addq.l	#4,sp
00013F3E 117C 0001 003C             		move.b	#1,$3C(a0)
00013F44 4228 0038                  		clr.b	$38(a0)
00013F48 303C 00A0                  		move.w	#$A0,d0
00013F4C 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F52 117C 0013 0016             		move.b	#$13,$16(a0)
00013F58 117C 0009 0017             		move.b	#9,$17(a0)
00013F5E 0828 0002 0022             		btst	#2,$22(a0)
00013F64 6600                       		bne.s	loc_13490
00013F66 117C 000E 0016             		move.b	#$E,$16(a0)
00013F6C 117C 0007 0017             		move.b	#7,$17(a0)
00013F72 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F78 08E8 0002 0022             		bset	#2,$22(a0)
00013F7E 5A68 000C                  		addq.w	#5,$C(a0)
00013F82 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F88                            
00013F88                            locret_1348E:
00013F88 4E75                       		rts	
00013F8A                            ; ===========================================================================
00013F8A                            
00013F8A                            loc_13490:
00013F8A 08E8 0004 0022             		bset	#4,$22(a0)
00013F90 4E75                       		rts	
00013F92                            ; End of function Sonic_Jump
00013F92                            
00013F92                            
00013F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F92                            
00013F92                            
00013F92                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F92 4A28 003C                  		tst.b	$3C(a0)
00013F96 6700                       		beq.s	loc_134C4
00013F98 323C FC00                  		move.w	#-$400,d1
00013F9C 0828 0006 0022             		btst	#6,$22(a0)
00013FA2 6700                       		beq.s	loc_134AE
00013FA4 323C FE00                  		move.w	#-$200,d1
00013FA8                            
00013FA8                            loc_134AE:
00013FA8 B268 0012                  		cmp.w	$12(a0),d1
00013FAC 6F00                       		ble.s	locret_134C2
00013FAE 1038 F602                  		move.b	($FFFFF602).w,d0
00013FB2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013FB6 6600                       		bne.s	locret_134C2	; if yes, branch
00013FB8 3141 0012                  		move.w	d1,$12(a0)
00013FBC                            
00013FBC                            locret_134C2:
00013FBC 4E75                       		rts	
00013FBE                            ; ===========================================================================
00013FBE                            
00013FBE                            loc_134C4:
00013FBE 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013FC4 6C00                       		bge.s	locret_134D2
00013FC6 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013FCC                            
00013FCC                            locret_134D2:
00013FCC 4E75                       		rts	
00013FCE                            ; End of function Sonic_JumpHeight
00013FCE                            
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            ; Subroutine to	slow Sonic walking up a	slope
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            
00013FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FCE                            
00013FCE                            
00013FCE                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013FCE 1028 0026                  		move.b	$26(a0),d0
00013FD2 0600 0060                  		addi.b	#$60,d0
00013FD6 0C00 00C0                  		cmpi.b	#$C0,d0
00013FDA 6400                       		bcc.s	locret_13508
00013FDC 1028 0026                  		move.b	$26(a0),d0
00013FE0 4EB9 0000 2D3A             		jsr	(CalcSine).l
00013FE6 C1FC 0020                  		muls.w	#$20,d0
00013FEA E080                       		asr.l	#8,d0
00013FEC 4A68 0014                  		tst.w	$14(a0)
00013FF0 6700                       		beq.s	locret_13508
00013FF2 6B00                       		bmi.s	loc_13504
00013FF4 4A40                       		tst.w	d0
00013FF6 6700                       		beq.s	locret_13502
00013FF8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FFC                            
00013FFC                            locret_13502:
00013FFC 4E75                       		rts	
00013FFE                            ; ===========================================================================
00013FFE                            
00013FFE                            loc_13504:
00013FFE D168 0014                  		add.w	d0,$14(a0)
00014002                            
00014002                            locret_13508:
00014002 4E75                       		rts	
00014004                            ; End of function Sonic_SlopeResist
00014004                            
00014004                            ; ---------------------------------------------------------------------------
00014004                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014004                            ; ---------------------------------------------------------------------------
00014004                            
00014004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014004                            
00014004                            
00014004                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014004 1028 0026                  		move.b	$26(a0),d0
00014008 0600 0060                  		addi.b	#$60,d0
0001400C 0C00 00C0                  		cmpi.b	#-$40,d0
00014010 6400                       		bcc.s	locret_13544
00014012 1028 0026                  		move.b	$26(a0),d0
00014016 4EB9 0000 2D3A             		jsr	(CalcSine).l
0001401C C1FC 0050                  		muls.w	#$50,d0
00014020 E080                       		asr.l	#8,d0
00014022 4A68 0014                  		tst.w	$14(a0)
00014026 6B00                       		bmi.s	loc_1353A
00014028 4A40                       		tst.w	d0
0001402A 6A00                       		bpl.s	loc_13534
0001402C E480                       		asr.l	#2,d0
0001402E                            
0001402E                            loc_13534:
0001402E D168 0014                  		add.w	d0,$14(a0)
00014032 4E75                       		rts	
00014034                            ; ===========================================================================
00014034                            
00014034                            loc_1353A:
00014034 4A40                       		tst.w	d0
00014036 6B00                       		bmi.s	loc_13540
00014038 E480                       		asr.l	#2,d0
0001403A                            
0001403A                            loc_13540:
0001403A D168 0014                  		add.w	d0,$14(a0)
0001403E                            
0001403E                            locret_13544:
0001403E 4E75                       		rts	
00014040                            ; End of function Sonic_RollRepel
00014040                            
00014040                            ; ---------------------------------------------------------------------------
00014040                            ; Subroutine to	push Sonic down	a slope
00014040                            ; ---------------------------------------------------------------------------
00014040                            
00014040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014040                            
00014040                            
00014040                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014040 4E71                       		nop	
00014042 4A28 0038                  		tst.b	$38(a0)
00014046 6600                       		bne.s	locret_13580
00014048 4A68 003E                  		tst.w	$3E(a0)
0001404C 6600                       		bne.s	loc_13582
0001404E 1028 0026                  		move.b	$26(a0),d0
00014052 0600 0020                  		addi.b	#$20,d0
00014056 0200 00C0                  		andi.b	#$C0,d0
0001405A 6700                       		beq.s	locret_13580
0001405C 3028 0014                  		move.w	$14(a0),d0
00014060 6A00                       		bpl.s	loc_1356A
00014062 4440                       		neg.w	d0
00014064                            
00014064                            loc_1356A:
00014064 0C40 0280                  		cmpi.w	#$280,d0
00014068 6400                       		bcc.s	locret_13580
0001406A 4268 0014                  		clr.w	$14(a0)
0001406E 08E8 0001 0022             		bset	#1,$22(a0)
00014074 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001407A                            
0001407A                            locret_13580:
0001407A 4E75                       		rts	
0001407C                            ; ===========================================================================
0001407C                            
0001407C                            loc_13582:
0001407C 5368 003E                  		subq.w	#1,$3E(a0)
00014080 4E75                       		rts	
00014082                            ; End of function Sonic_SlopeRepel
00014082                            
00014082                            ; ---------------------------------------------------------------------------
00014082                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014082                            ; ---------------------------------------------------------------------------
00014082                            
00014082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014082                            
00014082                            
00014082                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014082 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014086 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014088 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001408A                            
0001408A 5400                       		addq.b	#2,d0		; increase angle
0001408C 6400                       		bcc.s	loc_13596
0001408E 7000                       		moveq	#0,d0
00014090                            
00014090                            loc_13596:
00014090 6000                       		bra.s	loc_1359E
00014092                            ; ===========================================================================
00014092                            
00014092                            loc_13598:
00014092 5500                       		subq.b	#2,d0		; decrease angle
00014094 6400                       		bcc.s	loc_1359E
00014096 7000                       		moveq	#0,d0
00014098                            
00014098                            loc_1359E:
00014098 1140 0026                  		move.b	d0,$26(a0)
0001409C                            
0001409C                            locret_135A2:
0001409C 4E75                       		rts	
0001409E                            ; End of function Sonic_JumpAngle
0001409E                            
0001409E                            ; ---------------------------------------------------------------------------
0001409E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001409E                            ; ---------------------------------------------------------------------------
0001409E                            
0001409E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001409E                            
0001409E                            
0001409E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001409E 3228 0010                  		move.w	$10(a0),d1
000140A2 3428 0012                  		move.w	$12(a0),d2
000140A6 4EB9 0000 3008             		jsr	(CalcAngle).l
000140AC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000140B0 0400 0020                  		subi.b	#$20,d0
000140B4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000140B8 0200 00C0                  		andi.b	#$C0,d0
000140BC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000140C0 0C00 0040                  		cmpi.b	#$40,d0
000140C4 6700 0000                  		beq.w	loc_13680
000140C8 0C00 0080                  		cmpi.b	#$80,d0
000140CC 6700 0000                  		beq.w	loc_136E2
000140D0 0C00 00C0                  		cmpi.b	#-$40,d0
000140D4 6700 0000                  		beq.w	loc_1373E
000140D8 6100 0000                  		bsr.w	Sonic_HitWall
000140DC 4A41                       		tst.w	d1
000140DE 6A00                       		bpl.s	loc_135F0
000140E0 9368 0008                  		sub.w	d1,8(a0)
000140E4 317C 0000 0010             		move.w	#0,$10(a0)
000140EA                            
000140EA                            loc_135F0:
000140EA 6100 0000                  		bsr.w	sub_14EB4
000140EE 4A41                       		tst.w	d1
000140F0 6A00                       		bpl.s	loc_13602
000140F2 D368 0008                  		add.w	d1,8(a0)
000140F6 317C 0000 0010             		move.w	#0,$10(a0)
000140FC                            
000140FC                            loc_13602:
000140FC 6100 0000                  		bsr.w	Sonic_HitFloor
00014100 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014104 4A41                       		tst.w	d1
00014106 6A00                       		bpl.s	locret_1367E
00014108 1428 0012                  		move.b	$12(a0),d2
0001410C 5002                       		addq.b	#8,d2
0001410E 4402                       		neg.b	d2
00014110 B202                       		cmp.b	d2,d1
00014112 6C00                       		bge.s	loc_1361E
00014114 B002                       		cmp.b	d2,d0
00014116 6D00                       		blt.s	locret_1367E
00014118                            
00014118                            loc_1361E:
00014118 D368 000C                  		add.w	d1,$C(a0)
0001411C 1143 0026                  		move.b	d3,$26(a0)
00014120 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014124 117C 0000 001C             		move.b	#0,$1C(a0)
0001412A 1003                       		move.b	d3,d0
0001412C 0600 0020                  		addi.b	#$20,d0
00014130 0200 0040                  		andi.b	#$40,d0
00014134 6600                       		bne.s	loc_1365C
00014136 1003                       		move.b	d3,d0
00014138 0600 0010                  		addi.b	#$10,d0
0001413C 0200 0020                  		andi.b	#$20,d0
00014140 6700                       		beq.s	loc_1364E
00014142 E0E8 0012                  		asr	$12(a0)
00014146 6000                       		bra.s	loc_13670
00014148                            ; ===========================================================================
00014148                            
00014148                            loc_1364E:
00014148 317C 0000 0012             		move.w	#0,$12(a0)
0001414E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014154 4E75                       		rts	
00014156                            ; ===========================================================================
00014156                            
00014156                            loc_1365C:
00014156 317C 0000 0010             		move.w	#0,$10(a0)
0001415C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014162 6F00                       		ble.s	loc_13670
00014164 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001416A                            
0001416A                            loc_13670:
0001416A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014170 4A03                       		tst.b	d3
00014172 6A00                       		bpl.s	locret_1367E
00014174 4468 0014                  		neg.w	$14(a0)
00014178                            
00014178                            locret_1367E:
00014178 4E75                       		rts	
0001417A                            ; ===========================================================================
0001417A                            
0001417A                            loc_13680:
0001417A 6100 0000                  		bsr.w	Sonic_HitWall
0001417E 4A41                       		tst.w	d1
00014180 6A00                       		bpl.s	loc_1369A
00014182 9368 0008                  		sub.w	d1,8(a0)
00014186 317C 0000 0010             		move.w	#0,$10(a0)
0001418C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014192 4E75                       		rts	
00014194                            ; ===========================================================================
00014194                            
00014194                            loc_1369A:
00014194 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014198 4A41                       		tst.w	d1
0001419A 6A00                       		bpl.s	loc_136B4
0001419C 9368 000C                  		sub.w	d1,$C(a0)
000141A0 4A68 0012                  		tst.w	$12(a0)
000141A4 6A00                       		bpl.s	locret_136B2
000141A6 317C 0000 0012             		move.w	#0,$12(a0)
000141AC                            
000141AC                            locret_136B2:
000141AC 4E75                       		rts	
000141AE                            ; ===========================================================================
000141AE                            
000141AE                            loc_136B4:
000141AE 4A68 0012                  		tst.w	$12(a0)
000141B2 6B00                       		bmi.s	locret_136E0
000141B4 6100 0000                  		bsr.w	Sonic_HitFloor
000141B8 4A41                       		tst.w	d1
000141BA 6A00                       		bpl.s	locret_136E0
000141BC D368 000C                  		add.w	d1,$C(a0)
000141C0 1143 0026                  		move.b	d3,$26(a0)
000141C4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141C8 117C 0000 001C             		move.b	#0,$1C(a0)
000141CE 317C 0000 0012             		move.w	#0,$12(a0)
000141D4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000141DA                            
000141DA                            locret_136E0:
000141DA 4E75                       		rts	
000141DC                            ; ===========================================================================
000141DC                            
000141DC                            loc_136E2:
000141DC 6100 0000                  		bsr.w	Sonic_HitWall
000141E0 4A41                       		tst.w	d1
000141E2 6A00                       		bpl.s	loc_136F4
000141E4 9368 0008                  		sub.w	d1,8(a0)
000141E8 317C 0000 0010             		move.w	#0,$10(a0)
000141EE                            
000141EE                            loc_136F4:
000141EE 6100 0000                  		bsr.w	sub_14EB4
000141F2 4A41                       		tst.w	d1
000141F4 6A00                       		bpl.s	loc_13706
000141F6 D368 0008                  		add.w	d1,8(a0)
000141FA 317C 0000 0010             		move.w	#0,$10(a0)
00014200                            
00014200                            loc_13706:
00014200 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014204 4A41                       		tst.w	d1
00014206 6A00                       		bpl.s	locret_1373C
00014208 9368 000C                  		sub.w	d1,$C(a0)
0001420C 1003                       		move.b	d3,d0
0001420E 0600 0020                  		addi.b	#$20,d0
00014212 0200 0040                  		andi.b	#$40,d0
00014216 6600                       		bne.s	loc_13726
00014218 317C 0000 0012             		move.w	#0,$12(a0)
0001421E 4E75                       		rts	
00014220                            ; ===========================================================================
00014220                            
00014220                            loc_13726:
00014220 1143 0026                  		move.b	d3,$26(a0)
00014224 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014228 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001422E 4A03                       		tst.b	d3
00014230 6A00                       		bpl.s	locret_1373C
00014232 4468 0014                  		neg.w	$14(a0)
00014236                            
00014236                            locret_1373C:
00014236 4E75                       		rts	
00014238                            ; ===========================================================================
00014238                            
00014238                            loc_1373E:
00014238 6100 0000                  		bsr.w	sub_14EB4
0001423C 4A41                       		tst.w	d1
0001423E 6A00                       		bpl.s	loc_13758
00014240 D368 0008                  		add.w	d1,8(a0)
00014244 317C 0000 0010             		move.w	#0,$10(a0)
0001424A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014250 4E75                       		rts	
00014252                            ; ===========================================================================
00014252                            
00014252                            loc_13758:
00014252 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014256 4A41                       		tst.w	d1
00014258 6A00                       		bpl.s	loc_13772
0001425A 9368 000C                  		sub.w	d1,$C(a0)
0001425E 4A68 0012                  		tst.w	$12(a0)
00014262 6A00                       		bpl.s	locret_13770
00014264 317C 0000 0012             		move.w	#0,$12(a0)
0001426A                            
0001426A                            locret_13770:
0001426A 4E75                       		rts	
0001426C                            ; ===========================================================================
0001426C                            
0001426C                            loc_13772:
0001426C 4A68 0012                  		tst.w	$12(a0)
00014270 6B00                       		bmi.s	locret_1379E
00014272 6100 0000                  		bsr.w	Sonic_HitFloor
00014276 4A41                       		tst.w	d1
00014278 6A00                       		bpl.s	locret_1379E
0001427A D368 000C                  		add.w	d1,$C(a0)
0001427E 1143 0026                  		move.b	d3,$26(a0)
00014282 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014286 117C 0000 001C             		move.b	#0,$1C(a0)
0001428C 317C 0000 0012             		move.w	#0,$12(a0)
00014292 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014298                            
00014298                            locret_1379E:
00014298 4E75                       		rts	
0001429A                            ; End of function Sonic_Floor
0001429A                            
0001429A                            ; ---------------------------------------------------------------------------
0001429A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001429A                            ; ---------------------------------------------------------------------------
0001429A                            
0001429A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001429A                            
0001429A                            
0001429A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001429A 0828 0004 0022             		btst	#4,$22(a0)
000142A0 6700                       		beq.s	loc_137AE
000142A2 4E71                       		nop	
000142A4 4E71                       		nop	
000142A6 4E71                       		nop	
000142A8                            
000142A8                            loc_137AE:
000142A8 08A8 0005 0022             		bclr	#5,$22(a0)
000142AE 08A8 0001 0022             		bclr	#1,$22(a0)
000142B4 08A8 0004 0022             		bclr	#4,$22(a0)
000142BA 0828 0002 0022             		btst	#2,$22(a0)
000142C0 6700                       		beq.s	loc_137E4
000142C2 08A8 0002 0022             		bclr	#2,$22(a0)
000142C8 117C 0013 0016             		move.b	#$13,$16(a0)
000142CE 117C 0009 0017             		move.b	#9,$17(a0)
000142D4 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000142DA 5B68 000C                  		subq.w	#5,$C(a0)
000142DE                            
000142DE                            loc_137E4:
000142DE 117C 0000 003C             		move.b	#0,$3C(a0)
000142E4 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000142EA 4E75                       		rts	
000142EC                            ; End of function Sonic_ResetOnFloor
000142EC                            
000142EC                            ; ===========================================================================
000142EC                            ; ---------------------------------------------------------------------------
000142EC                            ; Sonic	when he	gets hurt
000142EC                            ; ---------------------------------------------------------------------------
000142EC                            
000142EC                            Obj01_Hurt:				; XREF: Obj01_Index
000142EC 4EBA 9D3E                  		jsr	SpeedToPos
000142F0 0668 0030 0012             		addi.w	#$30,$12(a0)
000142F6 0828 0006 0022             		btst	#6,$22(a0)
000142FC 6700                       		beq.s	loc_1380C
000142FE 0468 0020 0012             		subi.w	#$20,$12(a0)
00014304                            
00014304                            loc_1380C:
00014304 6100 0000                  		bsr.w	Sonic_HurtStop
00014308 6100 FAEE                  		bsr.w	Sonic_LevelBound
0001430C 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014310 6100 0000                  		bsr.w	Sonic_Animate
00014314 6100 0000                  		bsr.w	LoadSonicDynPLC
00014318 4EFA 9D38                  		jmp	DisplaySprite
0001431C                            
0001431C                            ; ---------------------------------------------------------------------------
0001431C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001431C                            ; ---------------------------------------------------------------------------
0001431C                            
0001431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001431C                            
0001431C                            
0001431C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001431C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014320 0640 00E0                  		addi.w	#$E0,d0
00014324 B068 000C                  		cmp.w	$C(a0),d0
00014328 6500 0000                  		bcs.w	KillSonic
0001432C 6100 FD70                  		bsr.w	Sonic_Floor
00014330 0828 0001 0022             		btst	#1,$22(a0)
00014336 6600                       		bne.s	locret_13860
00014338 7000                       		moveq	#0,d0
0001433A 3140 0012                  		move.w	d0,$12(a0)
0001433E 3140 0010                  		move.w	d0,$10(a0)
00014342 3140 0014                  		move.w	d0,$14(a0)
00014346 117C 0000 001C             		move.b	#0,$1C(a0)
0001434C 5528 0024                  		subq.b	#2,$24(a0)
00014350 317C 0078 0030             		move.w	#$78,$30(a0)
00014356                            
00014356                            locret_13860:
00014356 4E75                       		rts	
00014358                            ; End of function Sonic_HurtStop
00014358                            
00014358                            ; ===========================================================================
00014358                            ; ---------------------------------------------------------------------------
00014358                            ; Sonic	when he	dies
00014358                            ; ---------------------------------------------------------------------------
00014358                            
00014358                            Obj01_Death:				; XREF: Obj01_Index
00014358 6100 0000                  		bsr.w	GameOver
0001435C 4EBA 9C5C                  		jsr	ObjectFall
00014360 6100 F460                  		bsr.w	Sonic_RecordPos
00014364 6100 0000                  		bsr.w	Sonic_Animate
00014368 6100 0000                  		bsr.w	LoadSonicDynPLC
0001436C 4EFA 9CE4                  		jmp	DisplaySprite
00014370                            
00014370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014370                            
00014370                            
00014370                            GameOver:				; XREF: Obj01_Death
00014370 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014374 0640 0100                  		addi.w	#$100,d0
00014378 B068 000C                  		cmp.w	$C(a0),d0
0001437C 6400 0000                  		bcc.w	locret_13900
00014380 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014386 5428 0024                  		addq.b	#2,$24(a0)
0001438A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001438E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014392 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014396 6600                       		bne.s	loc_138D4
00014398 317C 0000 003A             		move.w	#0,$3A(a0)
0001439E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000143A4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143AA 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000143B0 4238 FE1A                  		clr.b	($FFFFFE1A).w
000143B4                            
000143B4                            loc_138C2:
000143B4 303C 008F                  		move.w	#$8F,d0
000143B8 4EB9 0000 159A             		jsr	(PlaySound).l	; play game over music
000143BE 7003                       		moveq	#3,d0
000143C0 4EF9 0000 1784             		jmp	(LoadPLC).l	; load game over patterns
000143C6                            ; ===========================================================================
000143C6                            
000143C6                            loc_138D4:
000143C6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000143CC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000143D0 6700                       		beq.s	locret_13900	; if not, branch
000143D2 317C 0000 003A             		move.w	#0,$3A(a0)
000143D8 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000143DE 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143E4 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000143EA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000143F0 60C2                       		bra.s	loc_138C2
000143F2                            ; ===========================================================================
000143F2                            
000143F2                            locret_13900:
000143F2 4E75                       		rts	
000143F4                            ; End of function GameOver
000143F4                            
000143F4                            ; ===========================================================================
000143F4                            ; ---------------------------------------------------------------------------
000143F4                            ; Sonic	when the level is restarted
000143F4                            ; ---------------------------------------------------------------------------
000143F4                            
000143F4                            Obj01_ResetLevel:			; XREF: Obj01_Index
000143F4 4A68 003A                  		tst.w	$3A(a0)
000143F8 6700                       		beq.s	locret_13914
000143FA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143FE 6600                       		bne.s	locret_13914
00014400 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014406                            
00014406                            locret_13914:
00014406 4E75                       		rts	
00014408                            
00014408                            ; ---------------------------------------------------------------------------
00014408                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014408                            ; ---------------------------------------------------------------------------
00014408                            
00014408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014408                            
00014408                            
00014408                            Sonic_Loops:				; XREF: Obj01_Control
00014408                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014408                            ;		beq.s	loc_13926	; if yes, branch
00014408                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014408                            ;		bne.w	locret_139C2	; if not, branch
00014408                            ;		this is commented out, please do more plane messups id love that
00014408                            ;loc_13926:
00014408 3028 000C                  		move.w	$C(a0),d0
0001440C E248                       		lsr.w	#1,d0
0001440E 0240 0380                  		andi.w	#$380,d0
00014412 1228 0008                  		move.b	8(a0),d1
00014416 0241 007F                  		andi.w	#$7F,d1
0001441A D041                       		add.w	d1,d0
0001441C 43F8 A400                  		lea	($FFFFA400).w,a1
00014420 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014424 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014428 6700 FA76                  		beq.w	Obj01_ChkRoll
0001442C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014430 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014434 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014438 6700                       		beq.s	loc_13976
0001443A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001443E 6700                       		beq.s	loc_13966
00014440 08A8 0006 0001             		bclr	#6,1(a0)
00014446 4E75                       		rts	
00014448                            ; ===========================================================================
00014448                            
00014448                            loc_13966:
00014448 0828 0001 0022             		btst	#1,$22(a0)
0001444E 6700                       		beq.s	loc_13976
00014450 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014456 4E75                       		rts	
00014458                            ; ===========================================================================
00014458                            
00014458                            loc_13976:
00014458 3428 0008                  		move.w	8(a0),d2
0001445C 0C02 002C                  		cmpi.b	#$2C,d2
00014460 6400                       		bcc.s	loc_13988
00014462 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014468 4E75                       		rts	
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            loc_13988:
0001446A 0C02 00E0                  		cmpi.b	#-$20,d2
0001446E 6500                       		bcs.s	loc_13996
00014470 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014476 4E75                       		rts	
00014478                            ; ===========================================================================
00014478                            
00014478                            loc_13996:
00014478 0828 0006 0001             		btst	#6,1(a0)
0001447E 6600                       		bne.s	loc_139B2
00014480 1228 0026                  		move.b	$26(a0),d1
00014484 6700                       		beq.s	locret_139C2
00014486 0C01 0080                  		cmpi.b	#-$80,d1
0001448A 6200                       		bhi.s	locret_139C2
0001448C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014492 4E75                       		rts	
00014494                            ; ===========================================================================
00014494                            
00014494                            loc_139B2:
00014494 1228 0026                  		move.b	$26(a0),d1
00014498 0C01 0080                  		cmpi.b	#-$80,d1
0001449C 6300                       		bls.s	locret_139C2
0001449E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000144A4                            
000144A4                            locret_139C2:
000144A4 4E75                       		rts	
000144A6                            ; End of function Sonic_Loops
000144A6                            
000144A6                            ; ---------------------------------------------------------------------------
000144A6                            ; Subroutine to	animate	Sonic's sprites
000144A6                            ; ---------------------------------------------------------------------------
000144A6                            
000144A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144A6                            
000144A6                            Player_Anim:
000144A6 0000 0000                  	dc.l	SonicAniData
000144AA 0000 0000                  	dc.l	SonicAniData ; gronic
000144AE 0000 0000                  	dc.l	SonicAniData ; anakama
000144B2 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000144B6                            
000144B6                            	; Insert more animation data for other characters here
000144B6                            	
000144B6                            Sonic_Animate:				; XREF: Obj01_Control; et al
000144B6 7000                       			moveq	#0,d0
000144B8 1038 FFE8                  		move.b	(v_character),d0
000144BC E548                       		lsl.w	#2,d0
000144BE 43FA FFE6                  		lea 	Player_Anim(pc),a1
000144C2                            		
000144C2 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000144C6                            	
000144C6 7000                       		moveq	#0,d0
000144C8 1028 001C                  		move.b	$1C(a0),d0
000144CC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000144D0 6700                       		beq.s	SAnim_Do	; if not, branch
000144D2 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000144D6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000144DC 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000144E2                            
000144E2                            SAnim_Do:
000144E2 D040                       		add.w	d0,d0
000144E4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000144E8 1011                       		move.b	(a1),d0
000144EA 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000144EC 1228 0022                  		move.b	$22(a0),d1
000144F0 0201 0001                  		andi.b	#1,d1
000144F4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144FA 8328 0001                  		or.b	d1,1(a0)
000144FE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014502 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014504 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014508                            
00014508                            SAnim_Do2:
00014508 7200                       		moveq	#0,d1
0001450A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001450E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014512 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014514                            
00014514                            SAnim_Next:
00014514 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014518 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001451C                            
0001451C                            SAnim_Delay:
0001451C 4E75                       		rts	
0001451E                            ; ===========================================================================
0001451E                            
0001451E                            SAnim_End_FF:
0001451E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014520 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014522 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014528 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001452C 60E6                       		bra.s	SAnim_Next
0001452E                            ; ===========================================================================
0001452E                            
0001452E                            SAnim_End_FE:
0001452E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014530 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014532 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014536 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001453A 9200                       		sub.b	d0,d1
0001453C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014540 60D2                       		bra.s	SAnim_Next
00014542                            ; ===========================================================================
00014542                            
00014542                            SAnim_End_FD:
00014542 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014544 6600                       		bne.s	SAnim_End	; if not, branch
00014546 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001454C                            
0001454C                            SAnim_End:
0001454C 4E75                       		rts	
0001454E                            ; ===========================================================================
0001454E                            
0001454E                            SAnim_WalkRun:				; XREF: SAnim_Do
0001454E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014552 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014554 5200                       		addq.b	#1,d0		; is animation walking/running?
00014556 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001455A 7200                       		moveq	#0,d1
0001455C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014560 1428 0022                  		move.b	$22(a0),d2
00014564 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014568 6600                       		bne.s	loc_13A70	; if yes, branch
0001456A 4600                       		not.b	d0		; reverse angle
0001456C                            
0001456C                            loc_13A70:
0001456C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014570 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014572 7203                       		moveq	#3,d1
00014574                            
00014574                            loc_13A78:
00014574 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001457A B302                       		eor.b	d1,d2
0001457C 8528 0001                  		or.b	d2,1(a0)
00014580 0828 0005 0022             		btst	#5,$22(a0)
00014586 6600 0000                  		bne.w	SAnim_Push
0001458A E808                       		lsr.b	#4,d0		; divide angle by $10
0001458C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014590 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014594 6A00                       		bpl.s	loc_13A9C
00014596 4442                       		neg.w	d2
00014598                            
00014598                            loc_13A9C:
00014598 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001459E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000145A2 6400                       		bcc.s	loc_13AB4	; if yes, branch
000145A4 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000145AA 1200                       		move.b	d0,d1
000145AC E209                       		lsr.b	#1,d1
000145AE D001                       		add.b	d1,d0
000145B0                            
000145B0                            loc_13AB4:
000145B0 D000                       		add.b	d0,d0
000145B2 1600                       		move.b	d0,d3
000145B4 4442                       		neg.w	d2
000145B6 0642 0800                  		addi.w	#$800,d2
000145BA 6A00                       		bpl.s	loc_13AC2
000145BC 7400                       		moveq	#0,d2
000145BE                            
000145BE                            loc_13AC2:
000145BE E04A                       		lsr.w	#8,d2
000145C0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145C4 6100 FF42                  		bsr.w	SAnim_Do2
000145C8 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000145CC 4E75                       		rts	
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000145CE 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000145D0 6600                       		bne.s	SAnim_Push	; if not, branch
000145D2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145D6 6A00                       		bpl.s	loc_13ADE
000145D8 4442                       		neg.w	d2
000145DA                            
000145DA                            loc_13ADE:
000145DA 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000145E0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000145E4 6400                       		bcc.s	loc_13AF0	; if yes, branch
000145E6 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000145EC                            
000145EC                            loc_13AF0:
000145EC 4442                       		neg.w	d2
000145EE 0642 0400                  		addi.w	#$400,d2
000145F2 6A00                       		bpl.s	loc_13AFA
000145F4 7400                       		moveq	#0,d2
000145F6                            
000145F6                            loc_13AFA:
000145F6 E04A                       		lsr.w	#8,d2
000145F8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145FC 1228 0022                  		move.b	$22(a0),d1
00014600 0201 0001                  		andi.b	#1,d1
00014604 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001460A 8328 0001                  		or.b	d1,1(a0)
0001460E 6000 FEF8                  		bra.w	SAnim_Do2
00014612                            ; ===========================================================================
00014612                            
00014612                            SAnim_Push:				; XREF: SAnim_RollJump
00014612 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014616 6B00                       		bmi.s	loc_13B1E
00014618 4442                       		neg.w	d2
0001461A                            
0001461A                            loc_13B1E:
0001461A 0642 0800                  		addi.w	#$800,d2
0001461E 6A00                       		bpl.s	loc_13B26
00014620 7400                       		moveq	#0,d2
00014622                            
00014622                            loc_13B26:
00014622 EC4A                       		lsr.w	#6,d2
00014624 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014628 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001462E 1228 0022                  		move.b	$22(a0),d1
00014632 0201 0001                  		andi.b	#1,d1
00014636 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001463C 8328 0001                  		or.b	d1,1(a0)
00014640 6000 FEC6                  		bra.w	SAnim_Do2
00014644                            ; End of function Sonic_Animate
00014644                            
00014644                            ; ===========================================================================
00014644                            SonicAniData:
00014644                            	include "_anim\Sonic.asm"
00014644                            ; ---------------------------------------------------------------------------
00014644                            ; Animation script - Sonic
00014644                            ; ---------------------------------------------------------------------------
00014644 0000                       		dc.w SonAni_Walk-SonicAniData
00014646 0000                       		dc.w SonAni_Run-SonicAniData
00014648 0000                       		dc.w SonAni_Roll-SonicAniData
0001464A 0000                       		dc.w SonAni_Roll2-SonicAniData
0001464C 0000                       		dc.w SonAni_Push-SonicAniData
0001464E 0000                       		dc.w SonAni_Wait-SonicAniData
00014650 0000                       		dc.w SonAni_Balance-SonicAniData
00014652 0000                       		dc.w SonAni_LookUp-SonicAniData
00014654 0000                       		dc.w SonAni_Duck-SonicAniData
00014656 0000                       		dc.w SonAni_Warp1-SonicAniData
00014658 0000                       		dc.w SonAni_Warp2-SonicAniData
0001465A 0000                       		dc.w SonAni_Warp3-SonicAniData
0001465C 0000                       		dc.w SonAni_Warp4-SonicAniData
0001465E 0000                       		dc.w SonAni_Stop-SonicAniData
00014660 0000                       		dc.w SonAni_Float1-SonicAniData
00014662 0000                       		dc.w SonAni_Float2-SonicAniData
00014664 0000                       		dc.w SonAni_Spring-SonicAniData
00014666 0000                       		dc.w SonAni_LZHang-SonicAniData
00014668 0000                       		dc.w SonAni_Leap1-SonicAniData
0001466A 0000                       		dc.w SonAni_Leap2-SonicAniData
0001466C 0000                       		dc.w SonAni_Surf-SonicAniData
0001466E 0000                       		dc.w SonAni_Bubble-SonicAniData
00014670 0000                       		dc.w SonAni_Death1-SonicAniData
00014672 0000                       		dc.w SonAni_Drown-SonicAniData
00014674 0000                       		dc.w SonAni_Death2-SonicAniData
00014676 0000                       		dc.w SonAni_Shrink-SonicAniData
00014678 0000                       		dc.w SonAni_Hurt-SonicAniData
0001467A 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001467C 0000                       		dc.w SonAni_Blank-SonicAniData
0001467E 0000                       		dc.w SonAni_Float3-SonicAniData
00014680 0000                       		dc.w SonAni_Float4-SonicAniData
00014682 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001468C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014694 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001469C FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000146A4 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000146AC 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000146C2 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000146C6 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000146CA 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000146CE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000146D2 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000146D6 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000146DA 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000146DE 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000146E2 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000146E6 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000146EE 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000146F2 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000146F6 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146FC 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014702 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014706 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001470E 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014712 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014716 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001471A 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014724 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014728 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001472C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014730 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014738 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001473C                            		even
0001473C                            		even
0001473C                            
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Sonic	pattern	loading	subroutine
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            
0001473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001473C                            Player_DPLC:
0001473C 0000 0000                  	dc.l	SonicDynPLC
00014740 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014744 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014748 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
0001474C                            	; add pointers for player dplc here
0001474C                            Player_Art:
0001474C 0000 0000                  	dc.l	Art_Sonic
00014750 0000 0000                  	dc.l	Art_Sonic ; gronic
00014754 0000 0000                  	dc.l	Art_Sonic ; anakama
00014758 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
0001475C                            	; add pointers for player art here
0001475C                            
0001475C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001475C 7000                       		moveq	#0,d0
0001475E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014762 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014766 6700                       		beq.s	locret_13C96
00014768 11C0 F766                  		move.b	d0,($FFFFF766).w
0001476C                            		
0001476C 323C 0000                  		move.w	#0,d1
00014770 1238 FFE8                  		move.b	(v_character),d1
00014774 E549                       		lsl.w	#2,d1
00014776 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001477A                            
0001477A 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001477E                            		
0001477E D040                       		add.w	d0,d0
00014780 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014784 7200                       		moveq	#0,d1
00014786 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014788 5301                       		subq.b	#1,d1
0001478A 6B00                       		bmi.s	locret_13C96
0001478C 47F8 C800                  		lea	($FFFFC800).w,a3
00014790 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014796                            
00014796                            SPLC_ReadEntry:
00014796 303C 0000                  		move.w	#0,d0
0001479A 1038 FFE8                  		move.b	(v_character),d0
0001479E E548                       		lsl.w	#2,d0
000147A0 43FA FFAA                  		lea 	Player_Art(pc),a1
000147A4                            
000147A4 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000147A8                            
000147A8 7400                       		moveq	#0,d2
000147AA 141A                       		move.b	(a2)+,d2
000147AC 3002                       		move.w	d2,d0
000147AE E808                       		lsr.b	#4,d0
000147B0 E14A                       		lsl.w	#8,d2
000147B2 141A                       		move.b	(a2)+,d2
000147B4 EB4A                       		lsl.w	#5,d2
000147B6 D3C2                       		adda.l	d2,a1
000147B8                            
000147B8                            SPLC_LoadTile:
000147B8 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000147BC 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000147C0 47EB 0020                  		lea	$20(a3),a3	; next tile
000147C4 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000147C8                            
000147C8 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000147CC                            
000147CC                            locret_13C96:
000147CC 4E75                       		rts	
000147CE                            ; End of function LoadSonicDynPLC
000147CE                            
000147CE                            ; ===========================================================================
000147CE                            ; ---------------------------------------------------------------------------
000147CE                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000147CE                            ; ---------------------------------------------------------------------------
000147CE                            
000147CE                            Obj0A:					; XREF: Obj_Index
000147CE 7000                       		moveq	#0,d0
000147D0 1028 0024                  		move.b	$24(a0),d0
000147D4 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000147D8 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000147DC                            ; ===========================================================================
000147DC 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000147E0 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000147E4 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000147E8 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000147EC 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000147EE                            ; ===========================================================================
000147EE                            
000147EE                            Obj0A_Main:				; XREF: Obj0A_Index
000147EE 5428 0024                  		addq.b	#2,$24(a0)
000147F2 217C 0001 33E6 0004        		move.l	#Map_obj64,4(a0)
000147FA 317C 8348 0002             		move.w	#$8348,2(a0)
00014800 117C 0084 0001             		move.b	#$84,1(a0)
00014806 117C 0010 0019             		move.b	#$10,$19(a0)
0001480C 117C 0001 0018             		move.b	#1,$18(a0)
00014812 1028 0028                  		move.b	$28(a0),d0
00014816 6A00                       		bpl.s	loc_13D00
00014818 5028 0024                  		addq.b	#8,$24(a0)
0001481C 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014824 317C 0440 0002             		move.w	#$440,2(a0)
0001482A 0240 007F                  		andi.w	#$7F,d0
0001482E 1140 0033                  		move.b	d0,$33(a0)
00014832 6000 0000                  		bra.w	Obj0A_Countdown
00014836                            ; ===========================================================================
00014836                            
00014836                            loc_13D00:
00014836 1140 001C                  		move.b	d0,$1C(a0)
0001483A 3168 0008 0030             		move.w	8(a0),$30(a0)
00014840 317C FF78 0012             		move.w	#-$88,$12(a0)
00014846                            
00014846                            Obj0A_Animate:				; XREF: Obj0A_Index
00014846 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001484C 4EB9 0000 B0A0             		jsr	AnimateSprite
00014852                            
00014852                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014852 3038 F646                  		move.w	($FFFFF646).w,d0
00014856 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001485A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001485C 117C 0006 0024             		move.b	#6,$24(a0)
00014862 5E28 001C                  		addq.b	#7,$1C(a0)
00014866 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001486C 6700                       		beq.s	Obj0A_Display
0001486E 6000                       		bra.s	Obj0A_Display
00014870                            ; ===========================================================================
00014870                            
00014870                            Obj0A_Wobble:
00014870 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014874 6700                       		beq.s	loc_13D44
00014876 5868 0030                  		addq.w	#4,$30(a0)
0001487A                            
0001487A                            loc_13D44:
0001487A 1028 0026                  		move.b	$26(a0),d0
0001487E 5228 0026                  		addq.b	#1,$26(a0)
00014882 0240 007F                  		andi.w	#$7F,d0
00014886 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001488C 1031 0000                  		move.b	(a1,d0.w),d0
00014890 4880                       		ext.w	d0
00014892 D068 0030                  		add.w	$30(a0),d0
00014896 3140 0008                  		move.w	d0,8(a0)
0001489A 6100                       		bsr.s	Obj0A_ShowNumber
0001489C 4EBA 978E                  		jsr	SpeedToPos
000148A0 4A28 0001                  		tst.b	1(a0)
000148A4 6A00                       		bpl.s	Obj0A_Delete
000148A6 4EFA 97AA                  		jmp	DisplaySprite
000148AA                            ; ===========================================================================
000148AA                            
000148AA                            Obj0A_Delete:
000148AA 4EFA 97E2                  		jmp	DeleteObject
000148AE                            ; ===========================================================================
000148AE                            
000148AE                            Obj0A_Display:				; XREF: Obj0A_Index
000148AE 6100                       		bsr.s	Obj0A_ShowNumber
000148B0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148B6 4EB9 0000 B0A0             		jsr	AnimateSprite
000148BC 4EFA 9794                  		jmp	DisplaySprite
000148C0                            ; ===========================================================================
000148C0                            
000148C0                            Obj0A_Delete2:				; XREF: Obj0A_Index
000148C0 4EFA 97CC                  		jmp	DeleteObject
000148C4                            ; ===========================================================================
000148C4                            
000148C4                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000148C4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000148CA 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000148CC 5368 0038                  		subq.w	#1,$38(a0)
000148D0 6600                       		bne.s	Obj0A_Display2
000148D2 117C 000E 0024             		move.b	#$E,$24(a0)
000148D8 5E28 001C                  		addq.b	#7,$1C(a0)
000148DC 60D0                       		bra.s	Obj0A_Display
000148DE                            ; ===========================================================================
000148DE                            
000148DE                            Obj0A_Display2:
000148DE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148E4 4EB9 0000 B0A0             		jsr	AnimateSprite
000148EA 4A28 0001                  		tst.b	1(a0)
000148EE 6A00                       		bpl.s	Obj0A_Delete3
000148F0 4EFA 9760                  		jmp	DisplaySprite
000148F4                            ; ===========================================================================
000148F4                            
000148F4                            Obj0A_Delete3:
000148F4 4EFA 9798                  		jmp	DeleteObject
000148F8                            ; ===========================================================================
000148F8                            
000148F8                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148F8 4A68 0038                  		tst.w	$38(a0)
000148FC 6700                       		beq.s	locret_13E1A
000148FE 5368 0038                  		subq.w	#1,$38(a0)
00014902 6600                       		bne.s	locret_13E1A
00014904 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001490A 6400                       		bcc.s	locret_13E1A
0001490C 317C 000F 0038             		move.w	#$F,$38(a0)
00014912 4268 0012                  		clr.w	$12(a0)
00014916 117C 0080 0001             		move.b	#$80,1(a0)
0001491C 3028 0008                  		move.w	8(a0),d0
00014920 9078 F700                  		sub.w	($FFFFF700).w,d0
00014924 0640 0080                  		addi.w	#$80,d0
00014928 3140 0008                  		move.w	d0,8(a0)
0001492C 3028 000C                  		move.w	$C(a0),d0
00014930 9078 F704                  		sub.w	($FFFFF704).w,d0
00014934 0640 0080                  		addi.w	#$80,d0
00014938 3140 000A                  		move.w	d0,$A(a0)
0001493C 117C 000C 0024             		move.b	#$C,$24(a0)
00014942                            
00014942                            locret_13E1A:
00014942 4E75                       		rts	
00014944                            ; ===========================================================================
00014944                            Obj0A_WobbleData:
00014944 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014955 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014966 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014977 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014987 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014994 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000149A1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000149AE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000149BB FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000149C4                            ; ===========================================================================
000149C4                            
000149C4                            Obj0A_Countdown:			; XREF: Obj0A_Index
000149C4 4A68 002C                  		tst.w	$2C(a0)
000149C8 6600 0000                  		bne.w	loc_13F86
000149CC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000149D2 6400 0000                  		bcc.w	locret_1408C
000149D6 0838 0006 D022             		btst	#6,($FFFFD022).w
000149DC 6700 0000                  		beq.w	locret_1408C
000149E0 5368 0038                  		subq.w	#1,$38(a0)
000149E4 6A00 0000                  		bpl.w	loc_13FAC
000149E8 317C 003B 0038             		move.w	#59,$38(a0)
000149EE 317C 0001 0036             		move.w	#1,$36(a0)
000149F4 4EB9 0000 2D14             		jsr	(RandomNumber).l
000149FA 0240 0001                  		andi.w	#1,d0
000149FE 1140 0034                  		move.b	d0,$34(a0)
00014A02 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014A06 0C40 0019                  		cmpi.w	#$19,d0
00014A0A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014A0C 0C40 0014                  		cmpi.w	#$14,d0
00014A10 6700                       		beq.s	Obj0A_WarnSound
00014A12 0C40 000F                  		cmpi.w	#$F,d0
00014A16 6700                       		beq.s	Obj0A_WarnSound
00014A18 0C40 000C                  		cmpi.w	#$C,d0
00014A1C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014A1E 6600                       		bne.s	loc_13F02
00014A20 303C 0092                  		move.w	#$92,d0
00014A24 4EB9 0000 159A             		jsr	(PlaySound).l	; play countdown music
00014A2A                            
00014A2A                            loc_13F02:
00014A2A 5328 0032                  		subq.b	#1,$32(a0)
00014A2E 6A00                       		bpl.s	Obj0A_ReduceAir
00014A30 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014A36 08E8 0007 0036             		bset	#7,$36(a0)
00014A3C 6000                       		bra.s	Obj0A_ReduceAir
00014A3E                            ; ===========================================================================
00014A3E                            
00014A3E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014A3E 303C 00C2                  		move.w	#$C2,d0
00014A42 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014A48                            
00014A48                            Obj0A_ReduceAir:
00014A48 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014A4C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014A50 6100 0000                  		bsr.w	ResumeMusic
00014A54 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A5A 303C 00B2                  		move.w	#$B2,d0
00014A5E 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A64 117C 000A 0034             		move.b	#$A,$34(a0)
00014A6A 317C 0001 0036             		move.w	#1,$36(a0)
00014A70 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A76 2F08                       		move.l	a0,-(sp)
00014A78 41F8 D000                  		lea	($FFFFD000).w,a0
00014A7C 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A80 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A86 08E8 0001 0022             		bset	#1,$22(a0)
00014A8C 08E8 0007 0002             		bset	#7,2(a0)
00014A92 317C 0000 0012             		move.w	#0,$12(a0)
00014A98 317C 0000 0010             		move.w	#0,$10(a0)
00014A9E 317C 0000 0014             		move.w	#0,$14(a0)
00014AA4 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014AAA 205F                       		movea.l	(sp)+,a0
00014AAC 4E75                       		rts	
00014AAE                            ; ===========================================================================
00014AAE                            
00014AAE                            loc_13F86:
00014AAE 5368 002C                  		subq.w	#1,$2C(a0)
00014AB2 6600                       		bne.s	loc_13F94
00014AB4 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014ABA 4E75                       		rts	
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            loc_13F94:
00014ABC 2F08                       		move.l	a0,-(sp)
00014ABE 41F8 D000                  		lea	($FFFFD000).w,a0
00014AC2 4EBA 9568                  		jsr	SpeedToPos
00014AC6 0668 0010 0012             		addi.w	#$10,$12(a0)
00014ACC 205F                       		movea.l	(sp)+,a0
00014ACE 6000                       		bra.s	loc_13FAC
00014AD0                            ; ===========================================================================
00014AD0                            
00014AD0                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014AD0 6000                       		bra.s	Obj0A_MakeItem
00014AD2                            ; ===========================================================================
00014AD2                            
00014AD2                            loc_13FAC:
00014AD2 4A68 0036                  		tst.w	$36(a0)
00014AD6 6700 0000                  		beq.w	locret_1408C
00014ADA 5368 003A                  		subq.w	#1,$3A(a0)
00014ADE 6A00 0000                  		bpl.w	locret_1408C
00014AE2                            
00014AE2                            Obj0A_MakeItem:
00014AE2 4EB9 0000 2D14             		jsr	(RandomNumber).l
00014AE8 0240 000F                  		andi.w	#$F,d0
00014AEC 3140 003A                  		move.w	d0,$3A(a0)
00014AF0 4EBA 99E6                  		jsr	SingleObjLoad
00014AF4 6600 0000                  		bne.w	locret_1408C
00014AF8 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AFC 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014B02 7006                       		moveq	#6,d0
00014B04 0838 0000 D022             		btst	#0,($FFFFD022).w
00014B0A 6700                       		beq.s	loc_13FF2
00014B0C 4440                       		neg.w	d0
00014B0E 137C 0040 0026             		move.b	#$40,$26(a1)
00014B14                            
00014B14                            loc_13FF2:
00014B14 D169 0008                  		add.w	d0,8(a1)
00014B18 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014B1E 137C 0006 0028             		move.b	#6,$28(a1)
00014B24 4A68 002C                  		tst.w	$2C(a0)
00014B28 6700 0000                  		beq.w	loc_1403E
00014B2C 0268 0007 003A             		andi.w	#7,$3A(a0)
00014B32 0668 0000 003A             		addi.w	#0,$3A(a0)
00014B38 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014B3C 0440 000C                  		subi.w	#$C,d0
00014B40 3340 000C                  		move.w	d0,$C(a1)
00014B44 4EB9 0000 2D14             		jsr	(RandomNumber).l
00014B4A 1340 0026                  		move.b	d0,$26(a1)
00014B4E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014B52 0200 0003                  		andi.b	#3,d0
00014B56 6600                       		bne.s	loc_14082
00014B58 137C 000E 0028             		move.b	#$E,$28(a1)
00014B5E 6000                       		bra.s	loc_14082
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            loc_1403E:
00014B60 0828 0007 0036             		btst	#7,$36(a0)
00014B66 6700                       		beq.s	loc_14082
00014B68 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B6C E24A                       		lsr.w	#1,d2
00014B6E 4EB9 0000 2D14             		jsr	(RandomNumber).l
00014B74 0240 0003                  		andi.w	#3,d0
00014B78 6600                       		bne.s	loc_1406A
00014B7A 08E8 0006 0036             		bset	#6,$36(a0)
00014B80 6600                       		bne.s	loc_14082
00014B82 1342 0028                  		move.b	d2,$28(a1)
00014B86 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B8C                            
00014B8C                            loc_1406A:
00014B8C 4A28 0034                  		tst.b	$34(a0)
00014B90 6600                       		bne.s	loc_14082
00014B92 08E8 0006 0036             		bset	#6,$36(a0)
00014B98 6600                       		bne.s	loc_14082
00014B9A 1342 0028                  		move.b	d2,$28(a1)
00014B9E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014BA4                            
00014BA4                            loc_14082:
00014BA4 5328 0034                  		subq.b	#1,$34(a0)
00014BA8 6A00                       		bpl.s	locret_1408C
00014BAA 4268 0036                  		clr.w	$36(a0)
00014BAE                            
00014BAE                            locret_1408C:
00014BAE 4E75                       		rts	
00014BB0                            
00014BB0                            ; ---------------------------------------------------------------------------
00014BB0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014BB0                            ; ---------------------------------------------------------------------------
00014BB0                            
00014BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BB0                            
00014BB0                            
00014BB0                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014BB0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014BB6                             
00014BB6                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014BB6                             
00014BB6 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014BBA                             
00014BBA 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014BC0 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014BC2 43F9 0000 3D94             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014BC8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BCA                             
00014BCA                            Air_GetBgm2:
00014BCA 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014BD0 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014BD2 43F9 0000 3D9C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014BD8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BDA                             
00014BDA                            Air_GetBgm3:
00014BDA 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014BE0 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014BE2 43F9 0000 3DA4             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014BE8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BEA                             
00014BEA                            Air_GetBgm4:
00014BEA 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014BF0 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014BF2 43F9 0000 3DAC             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BF8                             
00014BF8                            Air_PlayMusic:
00014BF8 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BFC                             
00014BFC                            loc_140A6:
00014BFC 4EB9 0000 159A             		jsr	(PlaySound).l
00014C02                             
00014C02                            ; NineKode ends here
00014C02                            
00014C02                            loc_140AC:
00014C02 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014C08 4238 D372                  		clr.b	($FFFFD372).w
00014C0C 4E75                       		rts	
00014C0E                            ; End of function ResumeMusic
00014C0E                            
00014C0E                            ; ===========================================================================
00014C0E                            Ani_obj0A:
00014C0E                            	include "_anim\obj0A.asm"
00014C0E                            ; ---------------------------------------------------------------------------
00014C0E                            ; Animation script - countdown numbers and bubbles (LZ)
00014C0E                            ; ---------------------------------------------------------------------------
00014C0E 0000                       		dc.w byte_140D6-Ani_obj0A
00014C10 0000                       		dc.w byte_140E0-Ani_obj0A
00014C12 0000                       		dc.w byte_140EA-Ani_obj0A
00014C14 0000                       		dc.w byte_140F4-Ani_obj0A
00014C16 0000                       		dc.w byte_140FE-Ani_obj0A
00014C18 0000                       		dc.w byte_14108-Ani_obj0A
00014C1A 0000                       		dc.w byte_14112-Ani_obj0A
00014C1C 0000                       		dc.w byte_14118-Ani_obj0A
00014C1E 0000                       		dc.w byte_14120-Ani_obj0A
00014C20 0000                       		dc.w byte_14128-Ani_obj0A
00014C22 0000                       		dc.w byte_14130-Ani_obj0A
00014C24 0000                       		dc.w byte_14138-Ani_obj0A
00014C26 0000                       		dc.w byte_14140-Ani_obj0A
00014C28 0000                       		dc.w byte_14148-Ani_obj0A
00014C2A 0000                       		dc.w byte_1414A-Ani_obj0A
00014C2C 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014C36 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014C40 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014C4A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014C54 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C5E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C68 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C6E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C76 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C7E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C86 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C8E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C96 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C9E 0EFC                       byte_14148:	dc.b $E, $FC
00014CA0 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014CA6                            		even
00014CA6                            		even
00014CA6                            
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Sprite mappings - drowning countdown numbers (LZ)
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            Map_obj0A:
00014CA6                            	include "_maps\obj0A.asm"
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Sprite mappings - drowning countdown numbers (LZ)
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6 0000                       		dc.w byte_14152-Map_obj0A
00014CA8 01                         byte_14152:	dc.b 1
00014CA9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014CAE                            		even
00014CAE                            		even
00014CAE                            
00014CAE                            ; ===========================================================================
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE                            ; Object 38 - shield and invincibility stars
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE                            
00014CAE                            Obj38:					; XREF: Obj_Index
00014CAE 7000                       		moveq	#0,d0
00014CB0 1028 0024                  		move.b	$24(a0),d0
00014CB4 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014CB8 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014CBC                            ; ===========================================================================
00014CBC 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014CBE 0000                       		dc.w Obj38_Shield-Obj38_Index
00014CC0 0000                       		dc.w Obj38_Stars-Obj38_Index
00014CC2                            ; ===========================================================================
00014CC2                            
00014CC2                            Obj38_Main:				; XREF: Obj38_Index
00014CC2 5428 0024                  		addq.b	#2,$24(a0)
00014CC6 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014CCE 117C 0004 0001             		move.b	#4,1(a0)
00014CD4 117C 0001 0018             		move.b	#1,$18(a0)
00014CDA 117C 0010 0019             		move.b	#$10,$19(a0)
00014CE0 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014CE4 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014CE6 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014CEC 4E75                       		rts	
00014CEE                            ; ===========================================================================
00014CEE                            
00014CEE                            Obj38_DoStars:
00014CEE 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014CF2 317C 055C 0002             		move.w	#$55C,2(a0)
00014CF8 4E75                       		rts	
00014CFA                            ; ===========================================================================
00014CFA                            
00014CFA                            Obj38_Shield:				; XREF: Obj38_Index
00014CFA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CFE 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014D00 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014D04 6700                       		beq.s	Obj38_Delete	; if not, branch
00014D06 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D0C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D12 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D18 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D1E 4EB9 0000 B0A0             		jsr	AnimateSprite
00014D24 4EFA 932C                  		jmp	DisplaySprite
00014D28                            ; ===========================================================================
00014D28                            
00014D28                            Obj38_RmvShield:
00014D28 4E75                       		rts	
00014D2A                            ; ===========================================================================
00014D2A                            
00014D2A                            Obj38_Delete:
00014D2A 4EFA 9362                  		jmp	DeleteObject
00014D2E                            ; ===========================================================================
00014D2E                            
00014D2E                            Obj38_Stars:				; XREF: Obj38_Index
00014D2E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014D32 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014D34 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014D38 1228 001C                  		move.b	$1C(a0),d1
00014D3C 5301                       		subq.b	#1,d1
00014D3E 6000                       		bra.s	Obj38_StarTrail
00014D40                            ; ===========================================================================
00014D40 E909                       		lsl.b	#4,d1
00014D42 5801                       		addq.b	#4,d1
00014D44 9001                       		sub.b	d1,d0
00014D46 1228 0030                  		move.b	$30(a0),d1
00014D4A 9001                       		sub.b	d1,d0
00014D4C 5801                       		addq.b	#4,d1
00014D4E 0201 000F                  		andi.b	#$F,d1
00014D52 1141 0030                  		move.b	d1,$30(a0)
00014D56 6000                       		bra.s	Obj38_StarTrail2a
00014D58                            ; ===========================================================================
00014D58                            
00014D58                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D58 E709                       		lsl.b	#3,d1
00014D5A 1401                       		move.b	d1,d2
00014D5C D201                       		add.b	d1,d1
00014D5E D202                       		add.b	d2,d1
00014D60 5801                       		addq.b	#4,d1
00014D62 9001                       		sub.b	d1,d0
00014D64 1228 0030                  		move.b	$30(a0),d1
00014D68 9001                       		sub.b	d1,d0
00014D6A 5801                       		addq.b	#4,d1
00014D6C 0C01 0018                  		cmpi.b	#$18,d1
00014D70 6500                       		bcs.s	Obj38_StarTrail2
00014D72 7200                       		moveq	#0,d1
00014D74                            
00014D74                            Obj38_StarTrail2:
00014D74 1141 0030                  		move.b	d1,$30(a0)
00014D78                            
00014D78                            Obj38_StarTrail2a:
00014D78 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D7C 43F1 0000                  		lea	(a1,d0.w),a1
00014D80 3159 0008                  		move.w	(a1)+,8(a0)
00014D84 3159 000C                  		move.w	(a1)+,$C(a0)
00014D88 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D8E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D94 4EB9 0000 B0A0             		jsr	AnimateSprite
00014D9A 4EFA 92B6                  		jmp	DisplaySprite
00014D9E                            ; ===========================================================================
00014D9E                            
00014D9E                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D9E 4EFA 92EE                  		jmp	DeleteObject
00014DA2                            ; ===========================================================================
00014DA2                            ; ---------------------------------------------------------------------------
00014DA2                            ; Object 4A - special stage entry from beta
00014DA2                            ; ---------------------------------------------------------------------------
00014DA2                            
00014DA2                            Obj4A:					; XREF: Obj_Index
00014DA2 7000                       		moveq	#0,d0
00014DA4 1028 0024                  		move.b	$24(a0),d0
00014DA8 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014DAC 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014DB0                            ; ===========================================================================
00014DB0 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014DB2 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014DB4 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014DB6                            ; ===========================================================================
00014DB6                            
00014DB6                            Obj4A_Main:				; XREF: Obj4A_Index
00014DB6 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014DBA 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014DBC 4E75                       		rts	
00014DBE                            ; ===========================================================================
00014DBE                            
00014DBE                            Obj4A_Main2:
00014DBE 5428 0024                  		addq.b	#2,$24(a0)
00014DC2 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014DCA 117C 0004 0001             		move.b	#4,1(a0)
00014DD0 117C 0001 0018             		move.b	#1,$18(a0)
00014DD6 117C 0038 0019             		move.b	#$38,$19(a0)
00014DDC 317C 0541 0002             		move.w	#$541,2(a0)
00014DE2 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014DE8                            
00014DE8                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014DE8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014DEE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014DF4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DFA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014E00 4EB9 0000 B0A0             		jsr	AnimateSprite
00014E06 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014E0C 6600                       		bne.s	Obj4A_Display
00014E0E 4A38 D000                  		tst.b	($FFFFD000).w
00014E12 6700                       		beq.s	Obj4A_Display
00014E14 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014E1A 303C 00A8                  		move.w	#$A8,d0
00014E1E 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014E24                            
00014E24                            Obj4A_Display:
00014E24 4EFA 922C                  		jmp	DisplaySprite
00014E28                            ; ===========================================================================
00014E28                            
00014E28                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014E28 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014E2C 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014E2E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014E34 4EFA 9258                  		jmp	DeleteObject
00014E38                            ; ===========================================================================
00014E38                            
00014E38                            Obj4A_Wait:
00014E38 4E75                       		rts	
00014E3A                            ; ===========================================================================
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A                            ; Object 08 - water splash (LZ)
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A                            
00014E3A                            Obj08:					; XREF: Obj_Index
00014E3A 7000                       		moveq	#0,d0
00014E3C 1028 0024                  		move.b	$24(a0),d0
00014E40 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014E44 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014E48                            ; ===========================================================================
00014E48 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014E4A 0000                       		dc.w Obj08_Display-Obj08_Index
00014E4C 0000                       		dc.w Obj08_Delete-Obj08_Index
00014E4E                            ; ===========================================================================
00014E4E                            
00014E4E                            Obj08_Main:				; XREF: Obj08_Index
00014E4E 5428 0024                  		addq.b	#2,$24(a0)
00014E52 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E5A 0028 0004 0001             		ori.b	#4,1(a0)
00014E60 117C 0001 0018             		move.b	#1,$18(a0)
00014E66 117C 0010 0019             		move.b	#$10,$19(a0)
00014E6C 317C 4259 0002             		move.w	#$4259,2(a0)
00014E72 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E78                            
00014E78                            Obj08_Display:				; XREF: Obj08_Index
00014E78 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E7E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E84 4EB9 0000 B0A0             		jsr	AnimateSprite
00014E8A 4EFA 91C6                  		jmp	DisplaySprite
00014E8E                            ; ===========================================================================
00014E8E                            
00014E8E                            Obj08_Delete:				; XREF: Obj08_Index
00014E8E 4EFA 91FE                  		jmp	DeleteObject	; delete when animation	is complete
00014E92                            ; ===========================================================================
00014E92                            Ani_obj38:
00014E92                            	include "_anim\obj38.asm"
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Animation script - shield and invincibility stars
00014E92                            ; ---------------------------------------------------------------------------
00014E92 0000                       		dc.w byte_14356-Ani_obj38
00014E94 0000                       		dc.w byte_1435E-Ani_obj38
00014E96 0000                       		dc.w byte_14364-Ani_obj38
00014E98 0000                       		dc.w byte_1437E-Ani_obj38
00014E9A 0000                       		dc.w byte_14398-Ani_obj38
00014E9C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014EA4 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014EAA 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014EBB 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014EC4 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014ED5 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014EDE 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014EEF 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EF8                            		even
00014EF8                            		even
00014EF8                            
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8                            ; Sprite mappings - shield and invincibility stars
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8                            Map_obj38:
00014EF8                            	include "_maps\obj38.asm"
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8                            ; Sprite mappings - shield and invincibility stars
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EFC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014F00 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014F04 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014F08 04                         byte_143C2:	dc.b 4
00014F09 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F0E E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F13 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014F18 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F1D 04                         byte_143D7:	dc.b 4
00014F1E E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014F23 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014F28 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014F2D 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014F32 04                         byte_143EC:	dc.b 4
00014F33 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F38 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F3D 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F42 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F47 04                         byte_14401:	dc.b 4
00014F48 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F4D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F52 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F57 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F5C 04                         byte_14416:	dc.b 4
00014F5D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F62 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F67 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F6C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F71 04                         byte_1442B:	dc.b 4
00014F72 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F77 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F7C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F81 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F86 04                         byte_14440:	dc.b 4
00014F87 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F8C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F91 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F96 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F9C 00                         		even
00014F9C 00                         		even
00014F9C                            
00014F9C                            Ani_obj4A:
00014F9C                            	include "_anim\obj4A.asm"
00014F9C                            ; ---------------------------------------------------------------------------
00014F9C                            ; Animation script - special stage entry effect from beta
00014F9C                            ; ---------------------------------------------------------------------------
00014F9C 0000                       		dc.w byte_14458-Ani_obj4A
00014F9E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014FB2                            		even
00014FB2                            		even
00014FB2                            
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2                            ; Sprite mappings - special stage entry	from beta
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2                            Map_obj4A:
00014FB2                            	include "_maps\obj4A.asm"
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2                            ; Sprite mappings - special stage entry	from beta
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014FB6 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014FBA 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014FBE 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014FC2 03                         byte_1447C:	dc.b 3
00014FC3 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014FC8 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014FCD 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014FD2 03                         byte_1448C:	dc.b 3
00014FD3 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014FD8 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014FDD 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014FE2 05                         byte_1449C:	dc.b 5
00014FE3 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014FE8 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014FED FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FF2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FF7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FFC 09                         byte_144B6:	dc.b 9
00014FFD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015002 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015007 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001500C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015011 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015016 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001501B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015020 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015025 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001502A 12                         byte_144E4:	dc.b $12
0001502B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015030 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015035 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001503A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001503F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015044 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015049 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001504E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015053 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015058 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001505D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015062 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015067 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001506C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015071 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015076 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001507B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015080 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015085 11                         byte_1453F:	dc.b $11
00015086 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001508B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015090 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015095 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001509A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001509F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000150A4 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000150A9 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000150AE 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000150B3 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000150B8 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000150BD 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000150C2 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000150C7 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000150CC F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000150D1 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000150D6 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000150DB 09                         byte_14595:	dc.b 9
000150DC FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000150E1 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000150E6 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000150EB 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150F0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150F5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150FA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150FF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015104 04                         		dc.b 4
00015105 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001510A                            		even
0001510A                            		even
0001510A                            
0001510A                            Ani_obj08:
0001510A                            	include "_anim\obj08.asm"
0001510A                            ; ---------------------------------------------------------------------------
0001510A                            ; Animation script - water splash (LZ)
0001510A                            ; ---------------------------------------------------------------------------
0001510A 0000                       		dc.w byte_145C6-Ani_obj08
0001510C 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015112                            		even
00015112                            		even
00015112                            
00015112                            ; ---------------------------------------------------------------------------
00015112                            ; Sprite mappings - water splash (LZ)
00015112                            ; ---------------------------------------------------------------------------
00015112                            Map_obj08:
00015112                            	include "_maps\obj08.asm"
00015112                            ; ---------------------------------------------------------------------------
00015112                            ; Sprite mappings - water splash (LZ)
00015112                            ; ---------------------------------------------------------------------------
00015112 0000                       		dc.w byte_145D2-Map_obj08
00015114 0000                       		dc.w byte_145DD-Map_obj08
00015116 0000                       		dc.w byte_145E8-Map_obj08
00015118 02                         byte_145D2:	dc.b 2
00015119 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001511E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015123 02                         byte_145DD:	dc.b 2
00015124 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015129 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001512E 01                         byte_145E8:	dc.b 1
0001512F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015134                            		even
00015134                            		even
00015134                            
00015134                            ; ---------------------------------------------------------------------------
00015134                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015134                            ; ---------------------------------------------------------------------------
00015134                            
00015134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015134                            
00015134                            
00015134                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015134 0828 0003 0022             		btst	#3,$22(a0)
0001513A 6700                       		beq.s	loc_14602
0001513C 7000                       		moveq	#0,d0
0001513E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015142 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015146 4E75                       		rts	
00015148                            ; ===========================================================================
00015148                            
00015148                            loc_14602:
00015148 7003                       		moveq	#3,d0
0001514A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001514E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015152 1028 0026                  		move.b	$26(a0),d0
00015156 0600 0020                  		addi.b	#$20,d0
0001515A 6A00                       		bpl.s	loc_14624
0001515C 1028 0026                  		move.b	$26(a0),d0
00015160 6A00                       		bpl.s	loc_1461E
00015162 5300                       		subq.b	#1,d0
00015164                            
00015164                            loc_1461E:
00015164 0600 0020                  		addi.b	#$20,d0
00015168 6000                       		bra.s	loc_14630
0001516A                            ; ===========================================================================
0001516A                            
0001516A                            loc_14624:
0001516A 1028 0026                  		move.b	$26(a0),d0
0001516E 6A00                       		bpl.s	loc_1462C
00015170 5200                       		addq.b	#1,d0
00015172                            
00015172                            loc_1462C:
00015172 0600 001F                  		addi.b	#$1F,d0
00015176                            
00015176                            loc_14630:
00015176 0200 00C0                  		andi.b	#$C0,d0
0001517A 0C00 0040                  		cmpi.b	#$40,d0
0001517E 6700 0000                  		beq.w	Sonic_WalkVertL
00015182 0C00 0080                  		cmpi.b	#$80,d0
00015186 6700 0000                  		beq.w	Sonic_WalkCeiling
0001518A 0C00 00C0                  		cmpi.b	#$C0,d0
0001518E 6700 0000                  		beq.w	Sonic_WalkVertR
00015192 3428 000C                  		move.w	$C(a0),d2
00015196 3628 0008                  		move.w	8(a0),d3
0001519A 7000                       		moveq	#0,d0
0001519C 1028 0016                  		move.b	$16(a0),d0
000151A0 4880                       		ext.w	d0
000151A2 D440                       		add.w	d0,d2
000151A4 1028 0017                  		move.b	$17(a0),d0
000151A8 4880                       		ext.w	d0
000151AA D640                       		add.w	d0,d3
000151AC 49F8 F768                  		lea	($FFFFF768).w,a4
000151B0 367C 0010                  		movea.w	#$10,a3
000151B4 3C3C 0000                  		move.w	#0,d6
000151B8 7A0D                       		moveq	#$D,d5
000151BA 6100 0000                  		bsr.w	FindFloor
000151BE 3F01                       		move.w	d1,-(sp)
000151C0 3428 000C                  		move.w	$C(a0),d2
000151C4 3628 0008                  		move.w	8(a0),d3
000151C8 7000                       		moveq	#0,d0
000151CA 1028 0016                  		move.b	$16(a0),d0
000151CE 4880                       		ext.w	d0
000151D0 D440                       		add.w	d0,d2
000151D2 1028 0017                  		move.b	$17(a0),d0
000151D6 4880                       		ext.w	d0
000151D8 4440                       		neg.w	d0
000151DA D640                       		add.w	d0,d3
000151DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151E0 367C 0010                  		movea.w	#$10,a3
000151E4 3C3C 0000                  		move.w	#0,d6
000151E8 7A0D                       		moveq	#$D,d5
000151EA 6100 0000                  		bsr.w	FindFloor
000151EE 301F                       		move.w	(sp)+,d0
000151F0 6100 0000                  		bsr.w	Sonic_Angle
000151F4 4A41                       		tst.w	d1
000151F6 6700                       		beq.s	locret_146BE
000151F8 6A00                       		bpl.s	loc_146C0
000151FA 0C41 FFF2                  		cmpi.w	#-$E,d1
000151FE 6D00                       		blt.s	locret_146E6
00015200 D368 000C                  		add.w	d1,$C(a0)
00015204                            
00015204                            locret_146BE:
00015204 4E75                       		rts	
00015206                            ; ===========================================================================
00015206                            
00015206                            loc_146C0:
00015206 0C41 000E                  		cmpi.w	#$E,d1
0001520A 6E00                       		bgt.s	loc_146CC
0001520C                            
0001520C                            loc_146C6:
0001520C D368 000C                  		add.w	d1,$C(a0)
00015210 4E75                       		rts	
00015212                            ; ===========================================================================
00015212                            
00015212                            loc_146CC:
00015212 4A28 0038                  		tst.b	$38(a0)
00015216 66F4                       		bne.s	loc_146C6
00015218 08E8 0001 0022             		bset	#1,$22(a0)
0001521E 08A8 0005 0022             		bclr	#5,$22(a0)
00015224 117C 0001 001D             		move.b	#1,$1D(a0)
0001522A 4E75                       		rts	
0001522C                            ; ===========================================================================
0001522C                            
0001522C                            locret_146E6:
0001522C 4E75                       		rts	
0001522E                            ; End of function Sonic_AnglePos
0001522E                            
0001522E                            ; ===========================================================================
0001522E 2428 0008                  		move.l	8(a0),d2
00015232 3028 0010                  		move.w	$10(a0),d0
00015236 48C0                       		ext.l	d0
00015238 E180                       		asl.l	#8,d0
0001523A 9480                       		sub.l	d0,d2
0001523C 2142 0008                  		move.l	d2,8(a0)
00015240 303C 0038                  		move.w	#$38,d0
00015244 48C0                       		ext.l	d0
00015246 E180                       		asl.l	#8,d0
00015248 9680                       		sub.l	d0,d3
0001524A 2143 000C                  		move.l	d3,$C(a0)
0001524E 4E75                       		rts	
00015250                            ; ===========================================================================
00015250                            
00015250                            locret_1470A:
00015250 4E75                       		rts	
00015252                            ; ===========================================================================
00015252 2628 000C                  		move.l	$C(a0),d3
00015256 3028 0012                  		move.w	$12(a0),d0
0001525A 0440 0038                  		subi.w	#$38,d0
0001525E 3140 0012                  		move.w	d0,$12(a0)
00015262 48C0                       		ext.l	d0
00015264 E180                       		asl.l	#8,d0
00015266 9680                       		sub.l	d0,d3
00015268 2143 000C                  		move.l	d3,$C(a0)
0001526C 4E75                       		rts	
0001526E 4E75                       		rts	
00015270                            ; ===========================================================================
00015270 2428 0008                  		move.l	8(a0),d2
00015274 2628 000C                  		move.l	$C(a0),d3
00015278 3028 0010                  		move.w	$10(a0),d0
0001527C 48C0                       		ext.l	d0
0001527E E180                       		asl.l	#8,d0
00015280 9480                       		sub.l	d0,d2
00015282 3028 0012                  		move.w	$12(a0),d0
00015286 48C0                       		ext.l	d0
00015288 E180                       		asl.l	#8,d0
0001528A 9680                       		sub.l	d0,d3
0001528C 2142 0008                  		move.l	d2,8(a0)
00015290 2143 000C                  		move.l	d3,$C(a0)
00015294 4E75                       		rts	
00015296                            
00015296                            ; ---------------------------------------------------------------------------
00015296                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015296                            ; ---------------------------------------------------------------------------
00015296                            
00015296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015296                            
00015296                            
00015296                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015296 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001529A B240                       		cmp.w	d0,d1
0001529C 6F00                       		ble.s	loc_1475E
0001529E 1438 F768                  		move.b	($FFFFF768).w,d2
000152A2 3200                       		move.w	d0,d1
000152A4                            
000152A4                            loc_1475E:
000152A4 0802 0000                  		btst	#0,d2
000152A8 6600                       		bne.s	loc_1476A
000152AA 1142 0026                  		move.b	d2,$26(a0)
000152AE 4E75                       		rts	
000152B0                            ; ===========================================================================
000152B0                            
000152B0                            loc_1476A:
000152B0 1428 0026                  		move.b	$26(a0),d2
000152B4 0602 0020                  		addi.b	#$20,d2
000152B8 0202 00C0                  		andi.b	#$C0,d2
000152BC 1142 0026                  		move.b	d2,$26(a0)
000152C0 4E75                       		rts	
000152C2                            ; End of function Sonic_Angle
000152C2                            
000152C2                            ; ---------------------------------------------------------------------------
000152C2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000152C2                            ; ---------------------------------------------------------------------------
000152C2                            
000152C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C2                            
000152C2                            
000152C2                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000152C2 3428 000C                  		move.w	$C(a0),d2
000152C6 3628 0008                  		move.w	8(a0),d3
000152CA 7000                       		moveq	#0,d0
000152CC 1028 0017                  		move.b	$17(a0),d0
000152D0 4880                       		ext.w	d0
000152D2 4440                       		neg.w	d0
000152D4 D440                       		add.w	d0,d2
000152D6 1028 0016                  		move.b	$16(a0),d0
000152DA 4880                       		ext.w	d0
000152DC D640                       		add.w	d0,d3
000152DE 49F8 F768                  		lea	($FFFFF768).w,a4
000152E2 367C 0010                  		movea.w	#$10,a3
000152E6 3C3C 0000                  		move.w	#0,d6
000152EA 7A0D                       		moveq	#$D,d5
000152EC 6100 0000                  		bsr.w	FindWall
000152F0 3F01                       		move.w	d1,-(sp)
000152F2 3428 000C                  		move.w	$C(a0),d2
000152F6 3628 0008                  		move.w	8(a0),d3
000152FA 7000                       		moveq	#0,d0
000152FC 1028 0017                  		move.b	$17(a0),d0
00015300 4880                       		ext.w	d0
00015302 D440                       		add.w	d0,d2
00015304 1028 0016                  		move.b	$16(a0),d0
00015308 4880                       		ext.w	d0
0001530A D640                       		add.w	d0,d3
0001530C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015310 367C 0010                  		movea.w	#$10,a3
00015314 3C3C 0000                  		move.w	#0,d6
00015318 7A0D                       		moveq	#$D,d5
0001531A 6100 0000                  		bsr.w	FindWall
0001531E 301F                       		move.w	(sp)+,d0
00015320 6100 FF74                  		bsr.w	Sonic_Angle
00015324 4A41                       		tst.w	d1
00015326 6700                       		beq.s	locret_147F0
00015328 6A00                       		bpl.s	loc_147F2
0001532A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001532E 6D00 FF20                  		blt.w	locret_1470A
00015332 D368 0008                  		add.w	d1,8(a0)
00015336                            
00015336                            locret_147F0:
00015336 4E75                       		rts	
00015338                            ; ===========================================================================
00015338                            
00015338                            loc_147F2:
00015338 0C41 000E                  		cmpi.w	#$E,d1
0001533C 6E00                       		bgt.s	loc_147FE
0001533E                            
0001533E                            loc_147F8:
0001533E D368 0008                  		add.w	d1,8(a0)
00015342 4E75                       		rts	
00015344                            ; ===========================================================================
00015344                            
00015344                            loc_147FE:
00015344 4A28 0038                  		tst.b	$38(a0)
00015348 66F4                       		bne.s	loc_147F8
0001534A 08E8 0001 0022             		bset	#1,$22(a0)
00015350 08A8 0005 0022             		bclr	#5,$22(a0)
00015356 117C 0001 001D             		move.b	#1,$1D(a0)
0001535C 4E75                       		rts	
0001535E                            ; End of function Sonic_WalkVertR
0001535E                            
0001535E                            ; ---------------------------------------------------------------------------
0001535E                            ; Subroutine allowing Sonic to walk upside-down
0001535E                            ; ---------------------------------------------------------------------------
0001535E                            
0001535E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001535E                            
0001535E                            
0001535E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001535E 3428 000C                  		move.w	$C(a0),d2
00015362 3628 0008                  		move.w	8(a0),d3
00015366 7000                       		moveq	#0,d0
00015368 1028 0016                  		move.b	$16(a0),d0
0001536C 4880                       		ext.w	d0
0001536E 9440                       		sub.w	d0,d2
00015370 0A42 000F                  		eori.w	#$F,d2
00015374 1028 0017                  		move.b	$17(a0),d0
00015378 4880                       		ext.w	d0
0001537A D640                       		add.w	d0,d3
0001537C 49F8 F768                  		lea	($FFFFF768).w,a4
00015380 367C FFF0                  		movea.w	#-$10,a3
00015384 3C3C 1000                  		move.w	#$1000,d6
00015388 7A0D                       		moveq	#$D,d5
0001538A 6100 0000                  		bsr.w	FindFloor
0001538E 3F01                       		move.w	d1,-(sp)
00015390 3428 000C                  		move.w	$C(a0),d2
00015394 3628 0008                  		move.w	8(a0),d3
00015398 7000                       		moveq	#0,d0
0001539A 1028 0016                  		move.b	$16(a0),d0
0001539E 4880                       		ext.w	d0
000153A0 9440                       		sub.w	d0,d2
000153A2 0A42 000F                  		eori.w	#$F,d2
000153A6 1028 0017                  		move.b	$17(a0),d0
000153AA 4880                       		ext.w	d0
000153AC 9640                       		sub.w	d0,d3
000153AE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153B2 367C FFF0                  		movea.w	#-$10,a3
000153B6 3C3C 1000                  		move.w	#$1000,d6
000153BA 7A0D                       		moveq	#$D,d5
000153BC 6100 0000                  		bsr.w	FindFloor
000153C0 301F                       		move.w	(sp)+,d0
000153C2 6100 FED2                  		bsr.w	Sonic_Angle
000153C6 4A41                       		tst.w	d1
000153C8 6700                       		beq.s	locret_14892
000153CA 6A00                       		bpl.s	loc_14894
000153CC 0C41 FFF2                  		cmpi.w	#-$E,d1
000153D0 6D00 FE5A                  		blt.w	locret_146E6
000153D4 9368 000C                  		sub.w	d1,$C(a0)
000153D8                            
000153D8                            locret_14892:
000153D8 4E75                       		rts	
000153DA                            ; ===========================================================================
000153DA                            
000153DA                            loc_14894:
000153DA 0C41 000E                  		cmpi.w	#$E,d1
000153DE 6E00                       		bgt.s	loc_148A0
000153E0                            
000153E0                            loc_1489A:
000153E0 9368 000C                  		sub.w	d1,$C(a0)
000153E4 4E75                       		rts	
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            loc_148A0:
000153E6 4A28 0038                  		tst.b	$38(a0)
000153EA 66F4                       		bne.s	loc_1489A
000153EC 08E8 0001 0022             		bset	#1,$22(a0)
000153F2 08A8 0005 0022             		bclr	#5,$22(a0)
000153F8 117C 0001 001D             		move.b	#1,$1D(a0)
000153FE 4E75                       		rts	
00015400                            ; End of function Sonic_WalkCeiling
00015400                            
00015400                            ; ---------------------------------------------------------------------------
00015400                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015400                            ; ---------------------------------------------------------------------------
00015400                            
00015400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015400                            
00015400                            
00015400                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015400 3428 000C                  		move.w	$C(a0),d2
00015404 3628 0008                  		move.w	8(a0),d3
00015408 7000                       		moveq	#0,d0
0001540A 1028 0017                  		move.b	$17(a0),d0
0001540E 4880                       		ext.w	d0
00015410 9440                       		sub.w	d0,d2
00015412 1028 0016                  		move.b	$16(a0),d0
00015416 4880                       		ext.w	d0
00015418 9640                       		sub.w	d0,d3
0001541A 0A43 000F                  		eori.w	#$F,d3
0001541E 49F8 F768                  		lea	($FFFFF768).w,a4
00015422 367C FFF0                  		movea.w	#-$10,a3
00015426 3C3C 0800                  		move.w	#$800,d6
0001542A 7A0D                       		moveq	#$D,d5
0001542C 6100 0000                  		bsr.w	FindWall
00015430 3F01                       		move.w	d1,-(sp)
00015432 3428 000C                  		move.w	$C(a0),d2
00015436 3628 0008                  		move.w	8(a0),d3
0001543A 7000                       		moveq	#0,d0
0001543C 1028 0017                  		move.b	$17(a0),d0
00015440 4880                       		ext.w	d0
00015442 D440                       		add.w	d0,d2
00015444 1028 0016                  		move.b	$16(a0),d0
00015448 4880                       		ext.w	d0
0001544A 9640                       		sub.w	d0,d3
0001544C 0A43 000F                  		eori.w	#$F,d3
00015450 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015454 367C FFF0                  		movea.w	#-$10,a3
00015458 3C3C 0800                  		move.w	#$800,d6
0001545C 7A0D                       		moveq	#$D,d5
0001545E 6100 0000                  		bsr.w	FindWall
00015462 301F                       		move.w	(sp)+,d0
00015464 6100 FE30                  		bsr.w	Sonic_Angle
00015468 4A41                       		tst.w	d1
0001546A 6700                       		beq.s	locret_14934
0001546C 6A00                       		bpl.s	loc_14936
0001546E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015472 6D00 FDDC                  		blt.w	locret_1470A
00015476 9368 0008                  		sub.w	d1,8(a0)
0001547A                            
0001547A                            locret_14934:
0001547A 4E75                       		rts	
0001547C                            ; ===========================================================================
0001547C                            
0001547C                            loc_14936:
0001547C 0C41 000E                  		cmpi.w	#$E,d1
00015480 6E00                       		bgt.s	loc_14942
00015482                            
00015482                            loc_1493C:
00015482 9368 0008                  		sub.w	d1,8(a0)
00015486 4E75                       		rts	
00015488                            ; ===========================================================================
00015488                            
00015488                            loc_14942:
00015488 4A28 0038                  		tst.b	$38(a0)
0001548C 66F4                       		bne.s	loc_1493C
0001548E 08E8 0001 0022             		bset	#1,$22(a0)
00015494 08A8 0005 0022             		bclr	#5,$22(a0)
0001549A 117C 0001 001D             		move.b	#1,$1D(a0)
000154A0 4E75                       		rts	
000154A2                            ; End of function Sonic_WalkVertL
000154A2                            
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            ; Subroutine to	find which tile	the object is standing on
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            
000154A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A2                            
000154A2                            
000154A2                            Floor_ChkTile:				; XREF: FindFloor; et al
000154A2 3002                       		move.w	d2,d0
000154A4 E248                       		lsr.w	#1,d0
000154A6 0240 0380                  		andi.w	#$380,d0
000154AA 3203                       		move.w	d3,d1
000154AC E049                       		lsr.w	#8,d1
000154AE 0241 007F                  		andi.w	#$7F,d1
000154B2 D041                       		add.w	d1,d0
000154B4 72FF                       		moveq	#-1,d1
000154B6 43F8 A400                  		lea	($FFFFA400).w,a1
000154BA 1231 0000                  		move.b	(a1,d0.w),d1
000154BE 6700                       		beq.s	loc_14996
000154C0 6B00                       		bmi.s	loc_1499A
000154C2 5301                       		subq.b	#1,d1
000154C4 4881                       		ext.w	d1
000154C6 EE59                       		ror.w	#7,d1
000154C8 3002                       		move.w	d2,d0
000154CA D040                       		add.w	d0,d0
000154CC 0240 01E0                  		andi.w	#$1E0,d0
000154D0 D240                       		add.w	d0,d1
000154D2 3003                       		move.w	d3,d0
000154D4 E648                       		lsr.w	#3,d0
000154D6 0240 001E                  		andi.w	#$1E,d0
000154DA D240                       		add.w	d0,d1
000154DC                            
000154DC                            loc_14996:
000154DC 2241                       		movea.l	d1,a1
000154DE 4E75                       		rts	
000154E0                            ; ===========================================================================
000154E0                            
000154E0                            loc_1499A:
000154E0 0241 007F                  		andi.w	#$7F,d1
000154E4 0828 0006 0001             		btst	#6,1(a0)
000154EA 6700                       		beq.s	loc_149B2
000154EC 5241                       		addq.w	#1,d1
000154EE 0C41 0029                  		cmpi.w	#$29,d1
000154F2 6600                       		bne.s	loc_149B2
000154F4 323C 0051                  		move.w	#$51,d1
000154F8                            
000154F8                            loc_149B2:
000154F8 5301                       		subq.b	#1,d1
000154FA EE59                       		ror.w	#7,d1
000154FC 3002                       		move.w	d2,d0
000154FE D040                       		add.w	d0,d0
00015500 0240 01E0                  		andi.w	#$1E0,d0
00015504 D240                       		add.w	d0,d1
00015506 3003                       		move.w	d3,d0
00015508 E648                       		lsr.w	#3,d0
0001550A 0240 001E                  		andi.w	#$1E,d0
0001550E D240                       		add.w	d0,d1
00015510 2241                       		movea.l	d1,a1
00015512 4E75                       		rts	
00015514                            ; End of function Floor_ChkTile
00015514                            
00015514                            
00015514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015514                            
00015514                            
00015514                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015514 618C                       		bsr.s	Floor_ChkTile
00015516 3011                       		move.w	(a1),d0
00015518 3800                       		move.w	d0,d4
0001551A 0240 07FF                  		andi.w	#$7FF,d0
0001551E 6700                       		beq.s	loc_149DE
00015520 0B04                       		btst	d5,d4
00015522 6600                       		bne.s	loc_149EC
00015524                            
00015524                            loc_149DE:
00015524 D44B                       		add.w	a3,d2
00015526 6100 0000                  		bsr.w	FindFloor2
0001552A 944B                       		sub.w	a3,d2
0001552C 0641 0010                  		addi.w	#$10,d1
00015530 4E75                       		rts	
00015532                            ; ===========================================================================
00015532                            
00015532                            loc_149EC:
00015532 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015536 1032 0000                  		move.b	(a2,d0.w),d0
0001553A 0240 00FF                  		andi.w	#$FF,d0
0001553E 67E4                       		beq.s	loc_149DE
00015540 45F9 0000 0000             		lea	(AngleMap).l,a2
00015546 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001554A E948                       		lsl.w	#4,d0
0001554C 3203                       		move.w	d3,d1
0001554E 0804 000B                  		btst	#$B,d4
00015552 6700                       		beq.s	loc_14A12
00015554 4641                       		not.w	d1
00015556 4414                       		neg.b	(a4)
00015558                            
00015558                            loc_14A12:
00015558 0804 000C                  		btst	#$C,d4
0001555C 6700                       		beq.s	loc_14A22
0001555E 0614 0040                  		addi.b	#$40,(a4)
00015562 4414                       		neg.b	(a4)
00015564 0414 0040                  		subi.b	#$40,(a4)
00015568                            
00015568                            loc_14A22:
00015568 0241 000F                  		andi.w	#$F,d1
0001556C D240                       		add.w	d0,d1
0001556E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015574 1032 1000                  		move.b	(a2,d1.w),d0
00015578 4880                       		ext.w	d0
0001557A BD44                       		eor.w	d6,d4
0001557C 0804 000C                  		btst	#$C,d4
00015580 6700                       		beq.s	loc_14A3E
00015582 4440                       		neg.w	d0
00015584                            
00015584                            loc_14A3E:
00015584 4A40                       		tst.w	d0
00015586 679C                       		beq.s	loc_149DE
00015588 6B00                       		bmi.s	loc_14A5A
0001558A 0C00 0010                  		cmpi.b	#$10,d0
0001558E 6700                       		beq.s	loc_14A66
00015590 3202                       		move.w	d2,d1
00015592 0241 000F                  		andi.w	#$F,d1
00015596 D041                       		add.w	d1,d0
00015598 323C 000F                  		move.w	#$F,d1
0001559C 9240                       		sub.w	d0,d1
0001559E 4E75                       		rts	
000155A0                            ; ===========================================================================
000155A0                            
000155A0                            loc_14A5A:
000155A0 3202                       		move.w	d2,d1
000155A2 0241 000F                  		andi.w	#$F,d1
000155A6 D041                       		add.w	d1,d0
000155A8 6A00 FF7A                  		bpl.w	loc_149DE
000155AC                            
000155AC                            loc_14A66:
000155AC 944B                       		sub.w	a3,d2
000155AE 6100 0000                  		bsr.w	FindFloor2
000155B2 D44B                       		add.w	a3,d2
000155B4 0441 0010                  		subi.w	#$10,d1
000155B8 4E75                       		rts	
000155BA                            ; End of function FindFloor
000155BA                            
000155BA                            
000155BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155BA                            
000155BA                            
000155BA                            FindFloor2:				; XREF: FindFloor
000155BA 6100 FEE6                  		bsr.w	Floor_ChkTile
000155BE 3011                       		move.w	(a1),d0
000155C0 3800                       		move.w	d0,d4
000155C2 0240 07FF                  		andi.w	#$7FF,d0
000155C6 6700                       		beq.s	loc_14A86
000155C8 0B04                       		btst	d5,d4
000155CA 6600                       		bne.s	loc_14A94
000155CC                            
000155CC                            loc_14A86:
000155CC 323C 000F                  		move.w	#$F,d1
000155D0 3002                       		move.w	d2,d0
000155D2 0240 000F                  		andi.w	#$F,d0
000155D6 9240                       		sub.w	d0,d1
000155D8 4E75                       		rts	
000155DA                            ; ===========================================================================
000155DA                            
000155DA                            loc_14A94:
000155DA 2478 F796                  		movea.l	($FFFFF796).w,a2
000155DE 1032 0000                  		move.b	(a2,d0.w),d0
000155E2 0240 00FF                  		andi.w	#$FF,d0
000155E6 67E4                       		beq.s	loc_14A86
000155E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000155EE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155F2 E948                       		lsl.w	#4,d0
000155F4 3203                       		move.w	d3,d1
000155F6 0804 000B                  		btst	#$B,d4
000155FA 6700                       		beq.s	loc_14ABA
000155FC 4641                       		not.w	d1
000155FE 4414                       		neg.b	(a4)
00015600                            
00015600                            loc_14ABA:
00015600 0804 000C                  		btst	#$C,d4
00015604 6700                       		beq.s	loc_14ACA
00015606 0614 0040                  		addi.b	#$40,(a4)
0001560A 4414                       		neg.b	(a4)
0001560C 0414 0040                  		subi.b	#$40,(a4)
00015610                            
00015610                            loc_14ACA:
00015610 0241 000F                  		andi.w	#$F,d1
00015614 D240                       		add.w	d0,d1
00015616 45F9 0000 0000             		lea	(CollArray1).l,a2
0001561C 1032 1000                  		move.b	(a2,d1.w),d0
00015620 4880                       		ext.w	d0
00015622 BD44                       		eor.w	d6,d4
00015624 0804 000C                  		btst	#$C,d4
00015628 6700                       		beq.s	loc_14AE6
0001562A 4440                       		neg.w	d0
0001562C                            
0001562C                            loc_14AE6:
0001562C 4A40                       		tst.w	d0
0001562E 679C                       		beq.s	loc_14A86
00015630 6B00                       		bmi.s	loc_14AFC
00015632 3202                       		move.w	d2,d1
00015634 0241 000F                  		andi.w	#$F,d1
00015638 D041                       		add.w	d1,d0
0001563A 323C 000F                  		move.w	#$F,d1
0001563E 9240                       		sub.w	d0,d1
00015640 4E75                       		rts	
00015642                            ; ===========================================================================
00015642                            
00015642                            loc_14AFC:
00015642 3202                       		move.w	d2,d1
00015644 0241 000F                  		andi.w	#$F,d1
00015648 D041                       		add.w	d1,d0
0001564A 6A00 FF80                  		bpl.w	loc_14A86
0001564E 4641                       		not.w	d1
00015650 4E75                       		rts	
00015652                            ; End of function FindFloor2
00015652                            
00015652                            
00015652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015652                            
00015652                            
00015652                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015652 6100 FE4E                  		bsr.w	Floor_ChkTile
00015656 3011                       		move.w	(a1),d0
00015658 3800                       		move.w	d0,d4
0001565A 0240 07FF                  		andi.w	#$7FF,d0
0001565E 6700                       		beq.s	loc_14B1E
00015660 0B04                       		btst	d5,d4
00015662 6600                       		bne.s	loc_14B2C
00015664                            
00015664                            loc_14B1E:
00015664 D64B                       		add.w	a3,d3
00015666 6100 0000                  		bsr.w	FindWall2
0001566A 964B                       		sub.w	a3,d3
0001566C 0641 0010                  		addi.w	#$10,d1
00015670 4E75                       		rts	
00015672                            ; ===========================================================================
00015672                            
00015672                            loc_14B2C:
00015672 2478 F796                  		movea.l	($FFFFF796).w,a2
00015676 1032 0000                  		move.b	(a2,d0.w),d0
0001567A 0240 00FF                  		andi.w	#$FF,d0
0001567E 67E4                       		beq.s	loc_14B1E
00015680 45F9 0000 0000             		lea	(AngleMap).l,a2
00015686 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001568A E948                       		lsl.w	#4,d0
0001568C 3202                       		move.w	d2,d1
0001568E 0804 000C                  		btst	#$C,d4
00015692 6700                       		beq.s	loc_14B5A
00015694 4641                       		not.w	d1
00015696 0614 0040                  		addi.b	#$40,(a4)
0001569A 4414                       		neg.b	(a4)
0001569C 0414 0040                  		subi.b	#$40,(a4)
000156A0                            
000156A0                            loc_14B5A:
000156A0 0804 000B                  		btst	#$B,d4
000156A4 6700                       		beq.s	loc_14B62
000156A6 4414                       		neg.b	(a4)
000156A8                            
000156A8                            loc_14B62:
000156A8 0241 000F                  		andi.w	#$F,d1
000156AC D240                       		add.w	d0,d1
000156AE 45F9 0000 0000             		lea	(CollArray2).l,a2
000156B4 1032 1000                  		move.b	(a2,d1.w),d0
000156B8 4880                       		ext.w	d0
000156BA BD44                       		eor.w	d6,d4
000156BC 0804 000B                  		btst	#$B,d4
000156C0 6700                       		beq.s	loc_14B7E
000156C2 4440                       		neg.w	d0
000156C4                            
000156C4                            loc_14B7E:
000156C4 4A40                       		tst.w	d0
000156C6 679C                       		beq.s	loc_14B1E
000156C8 6B00                       		bmi.s	loc_14B9A
000156CA 0C00 0010                  		cmpi.b	#$10,d0
000156CE 6700                       		beq.s	loc_14BA6
000156D0 3203                       		move.w	d3,d1
000156D2 0241 000F                  		andi.w	#$F,d1
000156D6 D041                       		add.w	d1,d0
000156D8 323C 000F                  		move.w	#$F,d1
000156DC 9240                       		sub.w	d0,d1
000156DE 4E75                       		rts	
000156E0                            ; ===========================================================================
000156E0                            
000156E0                            loc_14B9A:
000156E0 3203                       		move.w	d3,d1
000156E2 0241 000F                  		andi.w	#$F,d1
000156E6 D041                       		add.w	d1,d0
000156E8 6A00 FF7A                  		bpl.w	loc_14B1E
000156EC                            
000156EC                            loc_14BA6:
000156EC 964B                       		sub.w	a3,d3
000156EE 6100 0000                  		bsr.w	FindWall2
000156F2 D64B                       		add.w	a3,d3
000156F4 0441 0010                  		subi.w	#$10,d1
000156F8 4E75                       		rts	
000156FA                            ; End of function FindWall
000156FA                            
000156FA                            
000156FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156FA                            
000156FA                            
000156FA                            FindWall2:				; XREF: FindWall
000156FA 6100 FDA6                  		bsr.w	Floor_ChkTile
000156FE 3011                       		move.w	(a1),d0
00015700 3800                       		move.w	d0,d4
00015702 0240 07FF                  		andi.w	#$7FF,d0
00015706 6700                       		beq.s	loc_14BC6
00015708 0B04                       		btst	d5,d4
0001570A 6600                       		bne.s	loc_14BD4
0001570C                            
0001570C                            loc_14BC6:
0001570C 323C 000F                  		move.w	#$F,d1
00015710 3003                       		move.w	d3,d0
00015712 0240 000F                  		andi.w	#$F,d0
00015716 9240                       		sub.w	d0,d1
00015718 4E75                       		rts	
0001571A                            ; ===========================================================================
0001571A                            
0001571A                            loc_14BD4:
0001571A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001571E 1032 0000                  		move.b	(a2,d0.w),d0
00015722 0240 00FF                  		andi.w	#$FF,d0
00015726 67E4                       		beq.s	loc_14BC6
00015728 45F9 0000 0000             		lea	(AngleMap).l,a2
0001572E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015732 E948                       		lsl.w	#4,d0
00015734 3202                       		move.w	d2,d1
00015736 0804 000C                  		btst	#$C,d4
0001573A 6700                       		beq.s	loc_14C02
0001573C 4641                       		not.w	d1
0001573E 0614 0040                  		addi.b	#$40,(a4)
00015742 4414                       		neg.b	(a4)
00015744 0414 0040                  		subi.b	#$40,(a4)
00015748                            
00015748                            loc_14C02:
00015748 0804 000B                  		btst	#$B,d4
0001574C 6700                       		beq.s	loc_14C0A
0001574E 4414                       		neg.b	(a4)
00015750                            
00015750                            loc_14C0A:
00015750 0241 000F                  		andi.w	#$F,d1
00015754 D240                       		add.w	d0,d1
00015756 45F9 0000 0000             		lea	(CollArray2).l,a2
0001575C 1032 1000                  		move.b	(a2,d1.w),d0
00015760 4880                       		ext.w	d0
00015762 BD44                       		eor.w	d6,d4
00015764 0804 000B                  		btst	#$B,d4
00015768 6700                       		beq.s	loc_14C26
0001576A 4440                       		neg.w	d0
0001576C                            
0001576C                            loc_14C26:
0001576C 4A40                       		tst.w	d0
0001576E 679C                       		beq.s	loc_14BC6
00015770 6B00                       		bmi.s	loc_14C3C
00015772 3203                       		move.w	d3,d1
00015774 0241 000F                  		andi.w	#$F,d1
00015778 D041                       		add.w	d1,d0
0001577A 323C 000F                  		move.w	#$F,d1
0001577E 9240                       		sub.w	d0,d1
00015780 4E75                       		rts	
00015782                            ; ===========================================================================
00015782                            
00015782                            loc_14C3C:
00015782 3203                       		move.w	d3,d1
00015784 0241 000F                  		andi.w	#$F,d1
00015788 D041                       		add.w	d1,d0
0001578A 6A00 FF80                  		bpl.w	loc_14BC6
0001578E 4641                       		not.w	d1
00015790 4E75                       		rts	
00015792                            ; End of function FindWall2
00015792                            
00015792                            ; ---------------------------------------------------------------------------
00015792                            ; Unused floor/wall subroutine - logs something	to do with collision
00015792                            ; ---------------------------------------------------------------------------
00015792                            
00015792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015792                            
00015792                            
00015792                            FloorLog_Unk:				; XREF: Level
00015792 4E75                       		rts	
00015794                            
00015794 43F9 0000 0000             		lea	(CollArray1).l,a1
0001579A 45F9 0000 0000             		lea	(CollArray1).l,a2
000157A0 363C 00FF                  		move.w	#$FF,d3
000157A4                            
000157A4                            loc_14C5E:
000157A4 7A10                       		moveq	#$10,d5
000157A6 343C 000F                  		move.w	#$F,d2
000157AA                            
000157AA                            loc_14C64:
000157AA 7800                       		moveq	#0,d4
000157AC 323C 000F                  		move.w	#$F,d1
000157B0                            
000157B0                            loc_14C6A:
000157B0 3019                       		move.w	(a1)+,d0
000157B2 EAA8                       		lsr.l	d5,d0
000157B4 D944                       		addx.w	d4,d4
000157B6 51C9 FFF8                  		dbf	d1,loc_14C6A
000157BA                            
000157BA 34C4                       		move.w	d4,(a2)+
000157BC 92FC 0020                  		suba.w	#$20,a1
000157C0 5345                       		subq.w	#1,d5
000157C2 51CA FFE6                  		dbf	d2,loc_14C64
000157C6                            
000157C6 D2FC 0020                  		adda.w	#$20,a1
000157CA 51CB FFD8                  		dbf	d3,loc_14C5E
000157CE                            
000157CE 43F9 0000 0000             		lea	(CollArray1).l,a1
000157D4 45F9 0000 0000             		lea	(CollArray2).l,a2
000157DA 6100                       		bsr.s	FloorLog_Unk2
000157DC 43F9 0000 0000             		lea	(CollArray1).l,a1
000157E2 45F9 0000 0000             		lea	(CollArray1).l,a2
000157E8                            
000157E8                            ; End of function FloorLog_Unk
000157E8                            
000157E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E8                            
000157E8                            
000157E8                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000157E8 363C 0FFF                  		move.w	#$FFF,d3
000157EC                            
000157EC                            loc_14CA6:
000157EC 7400                       		moveq	#0,d2
000157EE 323C 000F                  		move.w	#$F,d1
000157F2 3019                       		move.w	(a1)+,d0
000157F4 6700                       		beq.s	loc_14CD4
000157F6 6B00                       		bmi.s	loc_14CBE
000157F8                            
000157F8                            loc_14CB2:
000157F8 E248                       		lsr.w	#1,d0
000157FA 6400                       		bcc.s	loc_14CB8
000157FC 5202                       		addq.b	#1,d2
000157FE                            
000157FE                            loc_14CB8:
000157FE 51C9 FFF8                  		dbf	d1,loc_14CB2
00015802                            
00015802 6000                       		bra.s	loc_14CD6
00015804                            ; ===========================================================================
00015804                            
00015804                            loc_14CBE:
00015804 0C40 FFFF                  		cmpi.w	#-1,d0
00015808 6700                       		beq.s	loc_14CD0
0001580A                            
0001580A                            loc_14CC4:
0001580A E348                       		lsl.w	#1,d0
0001580C 6400                       		bcc.s	loc_14CCA
0001580E 5302                       		subq.b	#1,d2
00015810                            
00015810                            loc_14CCA:
00015810 51C9 FFF8                  		dbf	d1,loc_14CC4
00015814                            
00015814 6000                       		bra.s	loc_14CD6
00015816                            ; ===========================================================================
00015816                            
00015816                            loc_14CD0:
00015816 303C 0010                  		move.w	#$10,d0
0001581A                            
0001581A                            loc_14CD4:
0001581A 3400                       		move.w	d0,d2
0001581C                            
0001581C                            loc_14CD6:
0001581C 14C2                       		move.b	d2,(a2)+
0001581E 51CB FFCC                  		dbf	d3,loc_14CA6
00015822                            
00015822 4E75                       		rts	
00015824                            
00015824                            ; End of function FloorLog_Unk2
00015824                            
00015824                            
00015824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015824                            
00015824                            
00015824                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015824 2628 0008                  		move.l	8(a0),d3
00015828 2428 000C                  		move.l	$C(a0),d2
0001582C 3228 0010                  		move.w	$10(a0),d1
00015830 48C1                       		ext.l	d1
00015832 E181                       		asl.l	#8,d1
00015834 D681                       		add.l	d1,d3
00015836 3228 0012                  		move.w	$12(a0),d1
0001583A 48C1                       		ext.l	d1
0001583C E181                       		asl.l	#8,d1
0001583E D481                       		add.l	d1,d2
00015840 4842                       		swap	d2
00015842 4843                       		swap	d3
00015844 11C0 F768                  		move.b	d0,($FFFFF768).w
00015848 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001584C 1200                       		move.b	d0,d1
0001584E 0600 0020                  		addi.b	#$20,d0
00015852 6A00                       		bpl.s	loc_14D1A
00015854 1001                       		move.b	d1,d0
00015856 6A00                       		bpl.s	loc_14D14
00015858 5300                       		subq.b	#1,d0
0001585A                            
0001585A                            loc_14D14:
0001585A 0600 0020                  		addi.b	#$20,d0
0001585E 6000                       		bra.s	loc_14D24
00015860                            ; ===========================================================================
00015860                            
00015860                            loc_14D1A:
00015860 1001                       		move.b	d1,d0
00015862 6A00                       		bpl.s	loc_14D20
00015864 5200                       		addq.b	#1,d0
00015866                            
00015866                            loc_14D20:
00015866 0600 001F                  		addi.b	#$1F,d0
0001586A                            
0001586A                            loc_14D24:
0001586A 0200 00C0                  		andi.b	#$C0,d0
0001586E 6700 0000                  		beq.w	loc_14DF0
00015872 0C00 0080                  		cmpi.b	#$80,d0
00015876 6700 0000                  		beq.w	loc_14F7C
0001587A 0201 0038                  		andi.b	#$38,d1
0001587E 6600                       		bne.s	loc_14D3C
00015880 5042                       		addq.w	#8,d2
00015882                            
00015882                            loc_14D3C:
00015882 0C00 0040                  		cmpi.b	#$40,d0
00015886 6700 0000                  		beq.w	loc_1504A
0001588A 6000 0000                  		bra.w	loc_14EBC
0001588E                            
0001588E                            ; End of function Sonic_WalkSpeed
0001588E                            
0001588E                            
0001588E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001588E                            
0001588E                            
0001588E                            sub_14D48:				; XREF: Sonic_Jump
0001588E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015892 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015896 0600 0020                  		addi.b	#$20,d0
0001589A 0200 00C0                  		andi.b	#$C0,d0
0001589E 0C00 0040                  		cmpi.b	#$40,d0
000158A2 6700 0000                  		beq.w	loc_14FD6
000158A6 0C00 0080                  		cmpi.b	#$80,d0
000158AA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000158AE 0C00 00C0                  		cmpi.b	#$C0,d0
000158B2 6700 0000                  		beq.w	sub_14E50
000158B6                            
000158B6                            ; End of function sub_14D48
000158B6                            
000158B6                            ; ---------------------------------------------------------------------------
000158B6                            ; Subroutine to	make Sonic land	on the floor after jumping
000158B6                            ; ---------------------------------------------------------------------------
000158B6                            
000158B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158B6                            
000158B6                            
000158B6                            Sonic_HitFloor:				; XREF: Sonic_Floor
000158B6 3428 000C                  		move.w	$C(a0),d2
000158BA 3628 0008                  		move.w	8(a0),d3
000158BE 7000                       		moveq	#0,d0
000158C0 1028 0016                  		move.b	$16(a0),d0
000158C4 4880                       		ext.w	d0
000158C6 D440                       		add.w	d0,d2
000158C8 1028 0017                  		move.b	$17(a0),d0
000158CC 4880                       		ext.w	d0
000158CE D640                       		add.w	d0,d3
000158D0 49F8 F768                  		lea	($FFFFF768).w,a4
000158D4 367C 0010                  		movea.w	#$10,a3
000158D8 3C3C 0000                  		move.w	#0,d6
000158DC 7A0D                       		moveq	#$D,d5
000158DE 6100 FC34                  		bsr.w	FindFloor
000158E2 3F01                       		move.w	d1,-(sp)
000158E4 3428 000C                  		move.w	$C(a0),d2
000158E8 3628 0008                  		move.w	8(a0),d3
000158EC 7000                       		moveq	#0,d0
000158EE 1028 0016                  		move.b	$16(a0),d0
000158F2 4880                       		ext.w	d0
000158F4 D440                       		add.w	d0,d2
000158F6 1028 0017                  		move.b	$17(a0),d0
000158FA 4880                       		ext.w	d0
000158FC 9640                       		sub.w	d0,d3
000158FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015902 367C 0010                  		movea.w	#$10,a3
00015906 3C3C 0000                  		move.w	#0,d6
0001590A 7A0D                       		moveq	#$D,d5
0001590C 6100 FC06                  		bsr.w	FindFloor
00015910 301F                       		move.w	(sp)+,d0
00015912 143C 0000                  		move.b	#0,d2
00015916                            
00015916                            loc_14DD0:
00015916 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001591A B240                       		cmp.w	d0,d1
0001591C 6F00                       		ble.s	loc_14DDE
0001591E 1638 F768                  		move.b	($FFFFF768).w,d3
00015922 C141                       		exg	d0,d1
00015924                            
00015924                            loc_14DDE:
00015924 0803 0000                  		btst	#0,d3
00015928 6700                       		beq.s	locret_14DE6
0001592A 1602                       		move.b	d2,d3
0001592C                            
0001592C                            locret_14DE6:
0001592C 4E75                       		rts	
0001592E                            
0001592E                            ; End of function Sonic_HitFloor
0001592E                            
0001592E                            ; ===========================================================================
0001592E 3428 000C                  		move.w	$C(a0),d2
00015932 3628 0008                  		move.w	8(a0),d3
00015936                            
00015936                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015936 0642 000A                  		addi.w	#$A,d2
0001593A 49F8 F768                  		lea	($FFFFF768).w,a4
0001593E 367C 0010                  		movea.w	#$10,a3
00015942 3C3C 0000                  		move.w	#0,d6
00015946 7A0E                       		moveq	#$E,d5
00015948 6100 FBCA                  		bsr.w	FindFloor
0001594C 143C 0000                  		move.b	#0,d2
00015950                            
00015950                            loc_14E0A:				; XREF: sub_14EB4
00015950 1638 F768                  		move.b	($FFFFF768).w,d3
00015954 0803 0000                  		btst	#0,d3
00015958 6700                       		beq.s	locret_14E16
0001595A 1602                       		move.b	d2,d3
0001595C                            
0001595C                            locret_14E16:
0001595C 4E75                       		rts	
0001595E                            
0001595E                            ; ---------------------------------------------------------------------------
0001595E                            ; Subroutine allowing objects to interact with the floor
0001595E                            ; ---------------------------------------------------------------------------
0001595E                            
0001595E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595E                            
0001595E                            
0001595E                            ObjHitFloor:
0001595E 3628 0008                  		move.w	8(a0),d3
00015962                            
00015962                            ; End of function ObjHitFloor
00015962                            
00015962                            
00015962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015962                            
00015962                            
00015962                            ObjHitFloor2:
00015962 3428 000C                  		move.w	$C(a0),d2
00015966 7000                       		moveq	#0,d0
00015968 1028 0016                  		move.b	$16(a0),d0
0001596C 4880                       		ext.w	d0
0001596E D440                       		add.w	d0,d2
00015970 49F8 F768                  		lea	($FFFFF768).w,a4
00015974 18BC 0000                  		move.b	#0,(a4)
00015978 367C 0010                  		movea.w	#$10,a3
0001597C 3C3C 0000                  		move.w	#0,d6
00015980 7A0D                       		moveq	#$D,d5
00015982 6100 FB90                  		bsr.w	FindFloor
00015986 1638 F768                  		move.b	($FFFFF768).w,d3
0001598A 0803 0000                  		btst	#0,d3
0001598E 6700                       		beq.s	locret_14E4E
00015990 163C 0000                  		move.b	#0,d3
00015994                            
00015994                            locret_14E4E:
00015994 4E75                       		rts	
00015996                            ; End of function ObjHitFloor2
00015996                            
00015996                            
00015996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015996                            
00015996                            
00015996                            sub_14E50:				; XREF: sub_14D48
00015996 3428 000C                  		move.w	$C(a0),d2
0001599A 3628 0008                  		move.w	8(a0),d3
0001599E 7000                       		moveq	#0,d0
000159A0 1028 0017                  		move.b	$17(a0),d0
000159A4 4880                       		ext.w	d0
000159A6 9440                       		sub.w	d0,d2
000159A8 1028 0016                  		move.b	$16(a0),d0
000159AC 4880                       		ext.w	d0
000159AE D640                       		add.w	d0,d3
000159B0 49F8 F768                  		lea	($FFFFF768).w,a4
000159B4 367C 0010                  		movea.w	#$10,a3
000159B8 3C3C 0000                  		move.w	#0,d6
000159BC 7A0E                       		moveq	#$E,d5
000159BE 6100 FC92                  		bsr.w	FindWall
000159C2 3F01                       		move.w	d1,-(sp)
000159C4 3428 000C                  		move.w	$C(a0),d2
000159C8 3628 0008                  		move.w	8(a0),d3
000159CC 7000                       		moveq	#0,d0
000159CE 1028 0017                  		move.b	$17(a0),d0
000159D2 4880                       		ext.w	d0
000159D4 D440                       		add.w	d0,d2
000159D6 1028 0016                  		move.b	$16(a0),d0
000159DA 4880                       		ext.w	d0
000159DC D640                       		add.w	d0,d3
000159DE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159E2 367C 0010                  		movea.w	#$10,a3
000159E6 3C3C 0000                  		move.w	#0,d6
000159EA 7A0E                       		moveq	#$E,d5
000159EC 6100 FC64                  		bsr.w	FindWall
000159F0 301F                       		move.w	(sp)+,d0
000159F2 143C 00C0                  		move.b	#-$40,d2
000159F6 6000 FF1E                  		bra.w	loc_14DD0
000159FA                            
000159FA                            ; End of function sub_14E50
000159FA                            
000159FA                            
000159FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159FA                            
000159FA                            
000159FA                            sub_14EB4:				; XREF: Sonic_Floor
000159FA 3428 000C                  		move.w	$C(a0),d2
000159FE 3628 0008                  		move.w	8(a0),d3
00015A02                            
00015A02                            loc_14EBC:
00015A02 0643 000A                  		addi.w	#$A,d3
00015A06 49F8 F768                  		lea	($FFFFF768).w,a4
00015A0A 367C 0010                  		movea.w	#$10,a3
00015A0E 3C3C 0000                  		move.w	#0,d6
00015A12 7A0E                       		moveq	#$E,d5
00015A14 6100 FC3C                  		bsr.w	FindWall
00015A18 143C 00C0                  		move.b	#-$40,d2
00015A1C 6000 FF32                  		bra.w	loc_14E0A
00015A20                            
00015A20                            ; End of function sub_14EB4
00015A20                            
00015A20                            ; ---------------------------------------------------------------------------
00015A20                            ; Subroutine to	detect when an object hits a wall to its right
00015A20                            ; ---------------------------------------------------------------------------
00015A20                            
00015A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A20                            
00015A20                            
00015A20                            ObjHitWallRight:
00015A20 D668 0008                  		add.w	8(a0),d3
00015A24 3428 000C                  		move.w	$C(a0),d2
00015A28 49F8 F768                  		lea	($FFFFF768).w,a4
00015A2C 18BC 0000                  		move.b	#0,(a4)
00015A30 367C 0010                  		movea.w	#$10,a3
00015A34 3C3C 0000                  		move.w	#0,d6
00015A38 7A0E                       		moveq	#$E,d5
00015A3A 6100 FC16                  		bsr.w	FindWall
00015A3E 1638 F768                  		move.b	($FFFFF768).w,d3
00015A42 0803 0000                  		btst	#0,d3
00015A46 6700                       		beq.s	locret_14F06
00015A48 163C 00C0                  		move.b	#-$40,d3
00015A4C                            
00015A4C                            locret_14F06:
00015A4C 4E75                       		rts	
00015A4E                            
00015A4E                            ; End of function ObjHitWallRight
00015A4E                            
00015A4E                            ; ---------------------------------------------------------------------------
00015A4E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015A4E                            ; touches them
00015A4E                            ; ---------------------------------------------------------------------------
00015A4E                            
00015A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A4E                            
00015A4E                            
00015A4E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015A4E 3428 000C                  		move.w	$C(a0),d2
00015A52 3628 0008                  		move.w	8(a0),d3
00015A56 7000                       		moveq	#0,d0
00015A58 1028 0016                  		move.b	$16(a0),d0
00015A5C 4880                       		ext.w	d0
00015A5E 9440                       		sub.w	d0,d2
00015A60 0A42 000F                  		eori.w	#$F,d2
00015A64 1028 0017                  		move.b	$17(a0),d0
00015A68 4880                       		ext.w	d0
00015A6A D640                       		add.w	d0,d3
00015A6C 49F8 F768                  		lea	($FFFFF768).w,a4
00015A70 367C FFF0                  		movea.w	#-$10,a3
00015A74 3C3C 1000                  		move.w	#$1000,d6
00015A78 7A0E                       		moveq	#$E,d5
00015A7A 6100 FA98                  		bsr.w	FindFloor
00015A7E 3F01                       		move.w	d1,-(sp)
00015A80 3428 000C                  		move.w	$C(a0),d2
00015A84 3628 0008                  		move.w	8(a0),d3
00015A88 7000                       		moveq	#0,d0
00015A8A 1028 0016                  		move.b	$16(a0),d0
00015A8E 4880                       		ext.w	d0
00015A90 9440                       		sub.w	d0,d2
00015A92 0A42 000F                  		eori.w	#$F,d2
00015A96 1028 0017                  		move.b	$17(a0),d0
00015A9A 4880                       		ext.w	d0
00015A9C 9640                       		sub.w	d0,d3
00015A9E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AA2 367C FFF0                  		movea.w	#-$10,a3
00015AA6 3C3C 1000                  		move.w	#$1000,d6
00015AAA 7A0E                       		moveq	#$E,d5
00015AAC 6100 FA66                  		bsr.w	FindFloor
00015AB0 301F                       		move.w	(sp)+,d0
00015AB2 143C 0080                  		move.b	#-$80,d2
00015AB6 6000 FE5E                  		bra.w	loc_14DD0
00015ABA                            ; End of function Sonic_DontRunOnWalls
00015ABA                            
00015ABA                            ; ===========================================================================
00015ABA 3428 000C                  		move.w	$C(a0),d2
00015ABE 3628 0008                  		move.w	8(a0),d3
00015AC2                            
00015AC2                            loc_14F7C:
00015AC2 0442 000A                  		subi.w	#$A,d2
00015AC6 0A42 000F                  		eori.w	#$F,d2
00015ACA 49F8 F768                  		lea	($FFFFF768).w,a4
00015ACE 367C FFF0                  		movea.w	#-$10,a3
00015AD2 3C3C 1000                  		move.w	#$1000,d6
00015AD6 7A0E                       		moveq	#$E,d5
00015AD8 6100 FA3A                  		bsr.w	FindFloor
00015ADC 143C 0080                  		move.b	#-$80,d2
00015AE0 6000 FE6E                  		bra.w	loc_14E0A
00015AE4                            
00015AE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AE4                            
00015AE4                            
00015AE4                            ObjHitCeiling:
00015AE4 3428 000C                  		move.w	$C(a0),d2
00015AE8 3628 0008                  		move.w	8(a0),d3
00015AEC 7000                       		moveq	#0,d0
00015AEE 1028 0016                  		move.b	$16(a0),d0
00015AF2 4880                       		ext.w	d0
00015AF4 9440                       		sub.w	d0,d2
00015AF6 0A42 000F                  		eori.w	#$F,d2
00015AFA 49F8 F768                  		lea	($FFFFF768).w,a4
00015AFE 367C FFF0                  		movea.w	#-$10,a3
00015B02 3C3C 1000                  		move.w	#$1000,d6
00015B06 7A0E                       		moveq	#$E,d5
00015B08 6100 FA0A                  		bsr.w	FindFloor
00015B0C 1638 F768                  		move.b	($FFFFF768).w,d3
00015B10 0803 0000                  		btst	#0,d3
00015B14 6700                       		beq.s	locret_14FD4
00015B16 163C 0080                  		move.b	#-$80,d3
00015B1A                            
00015B1A                            locret_14FD4:
00015B1A 4E75                       		rts	
00015B1C                            ; End of function ObjHitCeiling
00015B1C                            
00015B1C                            ; ===========================================================================
00015B1C                            
00015B1C                            loc_14FD6:				; XREF: sub_14D48
00015B1C 3428 000C                  		move.w	$C(a0),d2
00015B20 3628 0008                  		move.w	8(a0),d3
00015B24 7000                       		moveq	#0,d0
00015B26 1028 0017                  		move.b	$17(a0),d0
00015B2A 4880                       		ext.w	d0
00015B2C 9440                       		sub.w	d0,d2
00015B2E 1028 0016                  		move.b	$16(a0),d0
00015B32 4880                       		ext.w	d0
00015B34 9640                       		sub.w	d0,d3
00015B36 0A43 000F                  		eori.w	#$F,d3
00015B3A 49F8 F768                  		lea	($FFFFF768).w,a4
00015B3E 367C FFF0                  		movea.w	#-$10,a3
00015B42 3C3C 0800                  		move.w	#$800,d6
00015B46 7A0E                       		moveq	#$E,d5
00015B48 6100 FB08                  		bsr.w	FindWall
00015B4C 3F01                       		move.w	d1,-(sp)
00015B4E 3428 000C                  		move.w	$C(a0),d2
00015B52 3628 0008                  		move.w	8(a0),d3
00015B56 7000                       		moveq	#0,d0
00015B58 1028 0017                  		move.b	$17(a0),d0
00015B5C 4880                       		ext.w	d0
00015B5E D440                       		add.w	d0,d2
00015B60 1028 0016                  		move.b	$16(a0),d0
00015B64 4880                       		ext.w	d0
00015B66 9640                       		sub.w	d0,d3
00015B68 0A43 000F                  		eori.w	#$F,d3
00015B6C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B70 367C FFF0                  		movea.w	#-$10,a3
00015B74 3C3C 0800                  		move.w	#$800,d6
00015B78 7A0E                       		moveq	#$E,d5
00015B7A 6100 FAD6                  		bsr.w	FindWall
00015B7E 301F                       		move.w	(sp)+,d0
00015B80 143C 0040                  		move.b	#$40,d2
00015B84 6000 FD90                  		bra.w	loc_14DD0
00015B88                            
00015B88                            ; ---------------------------------------------------------------------------
00015B88                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B88                            ; ---------------------------------------------------------------------------
00015B88                            
00015B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B88                            
00015B88                            
00015B88                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B88 3428 000C                  		move.w	$C(a0),d2
00015B8C 3628 0008                  		move.w	8(a0),d3
00015B90                            
00015B90                            loc_1504A:
00015B90 0443 000A                  		subi.w	#$A,d3
00015B94 0A43 000F                  		eori.w	#$F,d3
00015B98 49F8 F768                  		lea	($FFFFF768).w,a4
00015B9C 367C FFF0                  		movea.w	#-$10,a3
00015BA0 3C3C 0800                  		move.w	#$800,d6
00015BA4 7A0E                       		moveq	#$E,d5
00015BA6 6100 FAAA                  		bsr.w	FindWall
00015BAA 143C 0040                  		move.b	#$40,d2
00015BAE 6000 FDA0                  		bra.w	loc_14E0A
00015BB2                            ; End of function Sonic_HitWall
00015BB2                            
00015BB2                            ; ---------------------------------------------------------------------------
00015BB2                            ; Subroutine to	detect when an object hits a wall to its left
00015BB2                            ; ---------------------------------------------------------------------------
00015BB2                            
00015BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BB2                            
00015BB2                            
00015BB2                            ObjHitWallLeft:
00015BB2 D668 0008                  		add.w	8(a0),d3
00015BB6 3428 000C                  		move.w	$C(a0),d2
00015BBA 49F8 F768                  		lea	($FFFFF768).w,a4
00015BBE 18BC 0000                  		move.b	#0,(a4)
00015BC2 367C FFF0                  		movea.w	#-$10,a3
00015BC6 3C3C 0800                  		move.w	#$800,d6
00015BCA 7A0E                       		moveq	#$E,d5
00015BCC 6100 FA84                  		bsr.w	FindWall
00015BD0 1638 F768                  		move.b	($FFFFF768).w,d3
00015BD4 0803 0000                  		btst	#0,d3
00015BD8 6700                       		beq.s	locret_15098
00015BDA 163C 0040                  		move.b	#$40,d3
00015BDE                            
00015BDE                            locret_15098:
00015BDE 4E75                       		rts	
00015BE0                            ; End of function ObjHitWallLeft
00015BE0                            
00015BE0                            ; ===========================================================================
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            
00015BE0                            Obj66:					; XREF: Obj_Index
00015BE0 7000                       		moveq	#0,d0
00015BE2 1028 0024                  		move.b	$24(a0),d0
00015BE6 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015BEA 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015BEE                            ; ===========================================================================
00015BEE 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BF0 0000                       		dc.w Obj66_Action-Obj66_Index
00015BF2 0000                       		dc.w Obj66_Display-Obj66_Index
00015BF4 0000                       		dc.w Obj66_Release-Obj66_Index
00015BF6                            ; ===========================================================================
00015BF6                            
00015BF6                            Obj66_Main:				; XREF: Obj66_Index
00015BF6 5428 0024                  		addq.b	#2,$24(a0)
00015BFA 323C 0001                  		move.w	#1,d1
00015BFE 2248                       		movea.l	a0,a1
00015C00 6000                       		bra.s	Obj66_MakeItem
00015C02                            ; ===========================================================================
00015C02                            
00015C02                            Obj66_Loop:
00015C02 6100 88D4                  		bsr.w	SingleObjLoad
00015C06 6600                       		bne.s	loc_150FE
00015C08 12BC 0066                  		move.b	#$66,0(a1)
00015C0C 5829 0024                  		addq.b	#4,$24(a1)
00015C10 3368 0008 0008             		move.w	8(a0),8(a1)
00015C16 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015C1C 137C 0003 0018             		move.b	#3,$18(a1)
00015C22 137C 0010 001A             		move.b	#$10,$1A(a1)
00015C28                            
00015C28                            Obj66_MakeItem:				; XREF: Obj66_Main
00015C28 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015C30 337C 4348 0002             		move.w	#$4348,2(a1)
00015C36 0029 0004 0001             		ori.b	#4,1(a1)
00015C3C 137C 0038 0019             		move.b	#$38,$19(a1)
00015C42                            
00015C42                            loc_150FE:
00015C42 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015C46                            
00015C46 117C 0030 0019             		move.b	#$30,$19(a0)
00015C4C 117C 0004 0018             		move.b	#4,$18(a0)
00015C52 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C58 117C 0001 0034             		move.b	#1,$34(a0)
00015C5E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C64                            
00015C64                            Obj66_Action:				; XREF: Obj66_Index
00015C64 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C68 4A28 0001                  		tst.b	1(a0)
00015C6C 6A00 0000                  		bpl.w	Obj66_Display
00015C70 323C 0030                  		move.w	#$30,d1
00015C74 3401                       		move.w	d1,d2
00015C76 3602                       		move.w	d2,d3
00015C78 5243                       		addq.w	#1,d3
00015C7A 3828 0008                  		move.w	8(a0),d4
00015C7E 6100 A7A2                  		bsr.w	SolidObject
00015C82 0828 0005 0022             		btst	#5,$22(a0)
00015C88 6700 0000                  		beq.w	Obj66_Display
00015C8C 43F8 D000                  		lea	($FFFFD000).w,a1
00015C90 720E                       		moveq	#$E,d1
00015C92 3029 0008                  		move.w	8(a1),d0
00015C96 B068 0008                  		cmp.w	8(a0),d0
00015C9A 6500                       		bcs.s	Obj66_GrabSonic
00015C9C 7207                       		moveq	#7,d1
00015C9E                            
00015C9E                            Obj66_GrabSonic:
00015C9E B228 001A                  		cmp.b	$1A(a0),d1
00015CA2 6600                       		bne.s	Obj66_Display
00015CA4 1141 0032                  		move.b	d1,$32(a0)
00015CA8 5828 0024                  		addq.b	#4,$24(a0)
00015CAC 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015CB2 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015CB8 337C 0800 0014             		move.w	#$800,$14(a1)
00015CBE 337C 0000 0010             		move.w	#0,$10(a1)
00015CC4 337C 0000 0012             		move.w	#0,$12(a1)
00015CCA 08A8 0005 0022             		bclr	#5,$22(a0)
00015CD0 08A9 0005 0022             		bclr	#5,$22(a1)
00015CD6 08E9 0001 0022             		bset	#1,$22(a1)
00015CDC 3429 0008                  		move.w	8(a1),d2
00015CE0 3629 000C                  		move.w	$C(a1),d3
00015CE4 6100 0000                  		bsr.w	Obj66_ChgPos
00015CE8 D569 0008                  		add.w	d2,8(a1)
00015CEC D769 000C                  		add.w	d3,$C(a1)
00015CF0 E0E9 0008                  		asr	8(a1)
00015CF4 E0E9 000C                  		asr	$C(a1)
00015CF8                            
00015CF8                            Obj66_Display:				; XREF: Obj66_Index
00015CF8 6000 A400                  		bra.w	MarkObjGone
00015CFC                            ; ===========================================================================
00015CFC                            
00015CFC                            Obj66_Release:				; XREF: Obj66_Index
00015CFC 1028 001A                  		move.b	$1A(a0),d0
00015D00 0C00 0004                  		cmpi.b	#4,d0
00015D04 6700                       		beq.s	loc_151C8
00015D06 0C00 0007                  		cmpi.b	#7,d0
00015D0A 6600                       		bne.s	loc_151F8
00015D0C                            
00015D0C                            loc_151C8:
00015D0C B028 0032                  		cmp.b	$32(a0),d0
00015D10 6700                       		beq.s	loc_151F8
00015D12 43F8 D000                  		lea	($FFFFD000).w,a1
00015D16 337C 0000 0010             		move.w	#0,$10(a1)
00015D1C 337C 0800 0012             		move.w	#$800,$12(a1)
00015D22 0C00 0004                  		cmpi.b	#4,d0
00015D26 6700                       		beq.s	loc_151F0
00015D28 337C 0800 0010             		move.w	#$800,$10(a1)
00015D2E 337C 0800 0012             		move.w	#$800,$12(a1)
00015D34                            
00015D34                            loc_151F0:
00015D34 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015D38 5928 0024                  		subq.b	#4,$24(a0)
00015D3C                            
00015D3C                            loc_151F8:
00015D3C 6100                       		bsr.s	Obj66_ChkSwitch
00015D3E 6100                       		bsr.s	Obj66_ChgPos
00015D40 6000 A3B8                  		bra.w	MarkObjGone
00015D44                            
00015D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D44                            
00015D44                            
00015D44                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015D44 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015D48 7000                       		moveq	#0,d0
00015D4A 1028 0038                  		move.b	$38(a0),d0
00015D4E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D54 6700                       		beq.s	loc_15224	; if not, branch
00015D56 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D5A 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D5C 4428 0034                  		neg.b	$34(a0)
00015D60 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D66 6000                       		bra.s	Obj66_Animate
00015D68                            ; ===========================================================================
00015D68                            
00015D68                            loc_15224:
00015D68 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D6C                            
00015D6C                            Obj66_Animate:
00015D6C 5328 001E                  		subq.b	#1,$1E(a0)
00015D70 6A00                       		bpl.s	locret_15246
00015D72 117C 0007 001E             		move.b	#7,$1E(a0)
00015D78 1228 0034                  		move.b	$34(a0),d1
00015D7C 1028 001A                  		move.b	$1A(a0),d0
00015D80 D001                       		add.b	d1,d0
00015D82 0200 000F                  		andi.b	#$F,d0
00015D86 1140 001A                  		move.b	d0,$1A(a0)
00015D8A                            
00015D8A                            locret_15246:
00015D8A 4E75                       		rts	
00015D8C                            ; End of function Obj66_ChkSwitch
00015D8C                            
00015D8C                            
00015D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D8C                            
00015D8C                            
00015D8C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D8C 43F8 D000                  		lea	($FFFFD000).w,a1
00015D90 7000                       		moveq	#0,d0
00015D92 1028 001A                  		move.b	$1A(a0),d0
00015D96 D040                       		add.w	d0,d0
00015D98 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D9C 101A                       		move.b	(a2)+,d0
00015D9E 4880                       		ext.w	d0
00015DA0 D068 0008                  		add.w	8(a0),d0
00015DA4 3340 0008                  		move.w	d0,8(a1)
00015DA8 101A                       		move.b	(a2)+,d0
00015DAA 4880                       		ext.w	d0
00015DAC D068 000C                  		add.w	$C(a0),d0
00015DB0 3340 000C                  		move.w	d0,$C(a1)
00015DB4 4E75                       		rts	
00015DB6                            ; End of function Obj66_ChgPos
00015DB6                            
00015DB6                            ; ===========================================================================
00015DB6 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015DBA E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015DBE 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015DC2 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015DC6 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015DCA 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015DCE 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015DD2 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015DD6                            ; ---------------------------------------------------------------------------
00015DD6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD6                            ; ---------------------------------------------------------------------------
00015DD6                            Map_obj66:
00015DD6                            	include "_maps\obj66.asm"
00015DD6                            ; ---------------------------------------------------------------------------
00015DD6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD6                            ; ---------------------------------------------------------------------------
00015DD6 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015DDA 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015DDE 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015DE2 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015DE6 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015DEA 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015DEE 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DF2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DF6 0000                       		dc.w byte_154A4-Map_obj66
00015DF8 06                         byte_152B4:	dc.b 6
00015DF9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DFE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015E03 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015E08 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015E0D 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015E12 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015E17 06                         byte_152D3:	dc.b 6
00015E18 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015E1D 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015E22 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015E27 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015E2C 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015E31 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015E36 06                         byte_152F2:	dc.b 6
00015E37 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015E3C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015E41 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015E46 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015E4B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E50 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E55 06                         byte_15311:	dc.b 6
00015E56 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E5B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E60 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E65 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E6A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E6F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E74 06                         byte_15330:	dc.b 6
00015E75 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E7A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E7F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E84 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E89 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E8E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E93 06                         byte_1534F:	dc.b 6
00015E94 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E99 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E9E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015EA3 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015EA8 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015EAD 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015EB2 06                         byte_1536E:	dc.b 6
00015EB3 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015EB8 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015EBD 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015EC2 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015EC7 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015ECC 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015ED1 06                         byte_1538D:	dc.b 6
00015ED2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015ED7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015EDC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015EE1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015EE6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015EEB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015EF0 06                         byte_153AC:	dc.b 6
00015EF1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015EF6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EFB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015F00 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015F05 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015F0A 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015F0F 06                         byte_153CB:	dc.b 6
00015F10 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015F15 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015F1A DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015F1F DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015F24 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015F29 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015F2E 06                         byte_153EA:	dc.b 6
00015F2F D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015F34 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015F39 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015F3E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015F43 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015F48 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015F4D 06                         byte_15409:	dc.b 6
00015F4E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F53 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F58 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F5D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F62 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F67 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F6C 06                         byte_15428:	dc.b 6
00015F6D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F72 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F77 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F7C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F81 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F86 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F8B 06                         byte_15447:	dc.b 6
00015F8C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F91 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F96 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F9B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015FA0 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015FA5 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015FAA 06                         byte_15466:	dc.b 6
00015FAB E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015FB0 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015FB5 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015FBA D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015FBF E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015FC4 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015FC9 06                         byte_15485:	dc.b 6
00015FCA E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015FCF D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015FD4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015FD9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015FDE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015FE3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015FE8 0C                         byte_154A4:	dc.b $C
00015FE9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015FEE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FF3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FF8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FFD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016002 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016007 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001600C 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016011 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016016 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001601B 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016020 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016026 00                         		even
00016026 00                         		even
00016026                            
00016026                            ; ===========================================================================
00016026                            ; ---------------------------------------------------------------------------
00016026                            ; Object 67 - disc that	you run	around (SBZ)
00016026                            ; ---------------------------------------------------------------------------
00016026                            
00016026                            Obj67:					; XREF: Obj_Index
00016026 7000                       		moveq	#0,d0
00016028 1028 0024                  		move.b	$24(a0),d0
0001602C 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016030 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016034                            ; ===========================================================================
00016034 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016036 0000                       		dc.w Obj67_Action-Obj67_Index
00016038                            ; ===========================================================================
00016038                            
00016038                            Obj67_Main:				; XREF: Obj67_Index
00016038 5428 0024                  		addq.b	#2,$24(a0)
0001603C 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016044 317C C344 0002             		move.w	#$C344,2(a0)
0001604A 117C 0004 0001             		move.b	#4,1(a0)
00016050 117C 0004 0018             		move.b	#4,$18(a0)
00016056 117C 0008 0019             		move.b	#8,$19(a0)
0001605C 3168 0008 0032             		move.w	8(a0),$32(a0)
00016062 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016068 117C 0018 0034             		move.b	#$18,$34(a0)
0001606E 117C 0048 0038             		move.b	#$48,$38(a0)
00016074 1228 0028                  		move.b	$28(a0),d1	; get object type
00016078 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001607C 6700                       		beq.s	loc_15546
0001607E 117C 0010 0034             		move.b	#$10,$34(a0)
00016084 117C 0038 0038             		move.b	#$38,$38(a0)
0001608A                            
0001608A                            loc_15546:
0001608A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001608E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016092 4881                       		ext.w	d1
00016094 E741                       		asl.w	#3,d1
00016096 3141 0036                  		move.w	d1,$36(a0)
0001609A 1028 0022                  		move.b	$22(a0),d0
0001609E E418                       		ror.b	#2,d0
000160A0 0200 00C0                  		andi.b	#-$40,d0
000160A4 1140 0026                  		move.b	d0,$26(a0)
000160A8                            
000160A8                            Obj67_Action:				; XREF: Obj67_Index
000160A8 6100 0000                  		bsr.w	Obj67_MoveSonic
000160AC 6100 0000                  		bsr.w	Obj67_MoveSpot
000160B0 6000 0000                  		bra.w	Obj67_ChkDel
000160B4                            ; ===========================================================================
000160B4                            
000160B4                            Obj67_MoveSonic:			; XREF: Obj67_Action
000160B4 7400                       		moveq	#0,d2
000160B6 1428 0038                  		move.b	$38(a0),d2
000160BA 3602                       		move.w	d2,d3
000160BC D643                       		add.w	d3,d3
000160BE 43F8 D000                  		lea	($FFFFD000).w,a1
000160C2 3029 0008                  		move.w	8(a1),d0
000160C6 9068 0032                  		sub.w	$32(a0),d0
000160CA D042                       		add.w	d2,d0
000160CC B043                       		cmp.w	d3,d0
000160CE 6400                       		bcc.s	loc_155A8
000160D0 3229 000C                  		move.w	$C(a1),d1
000160D4 9268 0030                  		sub.w	$30(a0),d1
000160D8 D242                       		add.w	d2,d1
000160DA B243                       		cmp.w	d3,d1
000160DC 6400                       		bcc.s	loc_155A8
000160DE 0829 0001 0022             		btst	#1,$22(a1)
000160E4 6700                       		beq.s	loc_155B8
000160E6 4228 003A                  		clr.b	$3A(a0)
000160EA 4E75                       		rts	
000160EC                            ; ===========================================================================
000160EC                            
000160EC                            loc_155A8:
000160EC 4A28 003A                  		tst.b	$3A(a0)
000160F0 6700                       		beq.s	locret_155B6
000160F2 4229 0038                  		clr.b	$38(a1)
000160F6 4228 003A                  		clr.b	$3A(a0)
000160FA                            
000160FA                            locret_155B6:
000160FA 4E75                       		rts	
000160FC                            ; ===========================================================================
000160FC                            
000160FC                            loc_155B8:
000160FC 4A28 003A                  		tst.b	$3A(a0)
00016100 6600                       		bne.s	loc_155E2
00016102 117C 0001 003A             		move.b	#1,$3A(a0)
00016108 0829 0002 0022             		btst	#2,$22(a1)
0001610E 6600                       		bne.s	loc_155D0
00016110 4229 001C                  		clr.b	$1C(a1)
00016114                            
00016114                            loc_155D0:
00016114 08A9 0005 0022             		bclr	#5,$22(a1)
0001611A 137C 0001 001D             		move.b	#1,$1D(a1)
00016120 137C 0001 0038             		move.b	#1,$38(a1)
00016126                            
00016126                            loc_155E2:
00016126 3029 0014                  		move.w	$14(a1),d0
0001612A 4A68 0036                  		tst.w	$36(a0)
0001612E 6A00                       		bpl.s	loc_15608
00016130 0C40 FC00                  		cmpi.w	#-$400,d0
00016134 6F00                       		ble.s	loc_155FA
00016136 337C FC00 0014             		move.w	#-$400,$14(a1)
0001613C 4E75                       		rts	
0001613E                            ; ===========================================================================
0001613E                            
0001613E                            loc_155FA:
0001613E 0C40 F100                  		cmpi.w	#-$F00,d0
00016142 6C00                       		bge.s	locret_15606
00016144 337C F100 0014             		move.w	#-$F00,$14(a1)
0001614A                            
0001614A                            locret_15606:
0001614A 4E75                       		rts	
0001614C                            ; ===========================================================================
0001614C                            
0001614C                            loc_15608:
0001614C 0C40 0400                  		cmpi.w	#$400,d0
00016150 6C00                       		bge.s	loc_15616
00016152 337C 0400 0014             		move.w	#$400,$14(a1)
00016158 4E75                       		rts	
0001615A                            ; ===========================================================================
0001615A                            
0001615A                            loc_15616:
0001615A 0C40 0F00                  		cmpi.w	#$F00,d0
0001615E 6F00                       		ble.s	locret_15622
00016160 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016166                            
00016166                            locret_15622:
00016166 4E75                       		rts	
00016168                            ; ===========================================================================
00016168                            
00016168                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016168 3028 0036                  		move.w	$36(a0),d0
0001616C D168 0026                  		add.w	d0,$26(a0)
00016170 1028 0026                  		move.b	$26(a0),d0
00016174 4EB9 0000 2D3A             		jsr	(CalcSine).l
0001617A 3428 0030                  		move.w	$30(a0),d2
0001617E 3628 0032                  		move.w	$32(a0),d3
00016182 7800                       		moveq	#0,d4
00016184 1828 0034                  		move.b	$34(a0),d4
00016188 E14C                       		lsl.w	#8,d4
0001618A 2A04                       		move.l	d4,d5
0001618C C9C0                       		muls.w	d0,d4
0001618E 4844                       		swap	d4
00016190 CBC1                       		muls.w	d1,d5
00016192 4845                       		swap	d5
00016194 D842                       		add.w	d2,d4
00016196 DA43                       		add.w	d3,d5
00016198 3144 000C                  		move.w	d4,$C(a0)
0001619C 3145 0008                  		move.w	d5,8(a0)
000161A0 4E75                       		rts	
000161A2                            ; ===========================================================================
000161A2                            
000161A2                            Obj67_ChkDel:				; XREF: Obj67_Action
000161A2 3028 0032                  		move.w	$32(a0),d0
000161A6 0240 FF80                  		andi.w	#-$80,d0
000161AA 3238 F700                  		move.w	($FFFFF700).w,d1
000161AE 0441 0080                  		subi.w	#$80,d1
000161B2 0241 FF80                  		andi.w	#-$80,d1
000161B6 9041                       		sub.w	d1,d0
000161B8 0C40 0280                  		cmpi.w	#$280,d0
000161BC 6200                       		bhi.s	Obj67_Delete
000161BE 4EF9 0000 E052             		jmp	DisplaySprite
000161C4                            ; ===========================================================================
000161C4                            
000161C4                            Obj67_Delete:
000161C4 4EF9 0000 E08E             		jmp	DeleteObject
000161CA                            ; ===========================================================================
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            ; Sprite mappings - disc that you run around (SBZ)
000161CA                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161CA                            ; part of the level tiles.)
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            Map_obj67:
000161CA                            	include "_maps\obj67.asm"
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            ; Sprite mappings - disc that you run around (SBZ)
000161CA                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161CA                            ; part of the level tiles.)
000161CA                            ; ---------------------------------------------------------------------------
000161CA 0000                       		dc.w byte_15688-Map_obj67
000161CC 01                         byte_15688:	dc.b 1
000161CD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000161D2                            		even
000161D2                            		even
000161D2                            
000161D2                            ; ===========================================================================
000161D2                            ; ---------------------------------------------------------------------------
000161D2                            ; Object 68 - conveyor belts (SBZ)
000161D2                            ; ---------------------------------------------------------------------------
000161D2                            
000161D2                            Obj68:					; XREF: Obj_Index
000161D2 7000                       		moveq	#0,d0
000161D4 1028 0024                  		move.b	$24(a0),d0
000161D8 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000161DC 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000161E0                            ; ===========================================================================
000161E0 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000161E2 0000                       		dc.w Obj68_Action-Obj68_Index
000161E4                            ; ===========================================================================
000161E4                            
000161E4                            Obj68_Main:				; XREF: Obj68_Index
000161E4 5428 0024                  		addq.b	#2,$24(a0)
000161E8 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000161EE 1228 0028                  		move.b	$28(a0),d1	; get object type
000161F2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161F6 6700                       		beq.s	loc_156BA	; if zero, branch
000161F8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161FE                            
000161FE                            loc_156BA:
000161FE 1228 0028                  		move.b	$28(a0),d1	; get object type
00016202 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016206 4881                       		ext.w	d1
00016208 E841                       		asr.w	#4,d1
0001620A 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001620E                            
0001620E                            Obj68_Action:				; XREF: Obj68_Index
0001620E 6100                       		bsr.s	Obj68_MoveSonic
00016210 3028 0008                  		move.w	8(a0),d0
00016214 0240 FF80                  		andi.w	#$FF80,d0
00016218 3238 F700                  		move.w	($FFFFF700).w,d1
0001621C 0441 0080                  		subi.w	#$80,d1
00016220 0241 FF80                  		andi.w	#$FF80,d1
00016224 9041                       		sub.w	d1,d0
00016226 0C40 0280                  		cmpi.w	#$280,d0
0001622A 6200                       		bhi.s	Obj68_Delete
0001622C 4E75                       		rts	
0001622E                            ; ===========================================================================
0001622E                            
0001622E                            Obj68_Delete:
0001622E 4EF9 0000 E08E             		jmp	DeleteObject
00016234                            ; ===========================================================================
00016234                            
00016234                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016234 7400                       		moveq	#0,d2
00016236 1428 0038                  		move.b	$38(a0),d2
0001623A 3602                       		move.w	d2,d3
0001623C D643                       		add.w	d3,d3
0001623E 43F8 D000                  		lea	($FFFFD000).w,a1
00016242 3029 0008                  		move.w	8(a1),d0
00016246 9068 0008                  		sub.w	8(a0),d0
0001624A D042                       		add.w	d2,d0
0001624C B043                       		cmp.w	d3,d0
0001624E 6400                       		bcc.s	locret_1572E
00016250 3229 000C                  		move.w	$C(a1),d1
00016254 9268 000C                  		sub.w	$C(a0),d1
00016258 0641 0030                  		addi.w	#$30,d1
0001625C 0C41 0030                  		cmpi.w	#$30,d1
00016260 6400                       		bcc.s	locret_1572E
00016262 0829 0001 0022             		btst	#1,$22(a1)
00016268 6600                       		bne.s	locret_1572E
0001626A 3028 0036                  		move.w	$36(a0),d0
0001626E D169 0008                  		add.w	d0,8(a1)
00016272                            
00016272                            locret_1572E:
00016272 4E75                       		rts	
00016274                            
00016274                            ; ===========================================================================
00016274                            ; ---------------------------------------------------------------------------
00016274                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016274                            ; ---------------------------------------------------------------------------
00016274                            
00016274                            Obj69:					; XREF: Obj_Index
00016274 7000                       		moveq	#0,d0
00016276 1028 0024                  		move.b	$24(a0),d0
0001627A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001627E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016282                            ; ===========================================================================
00016282 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016284 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016286 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016288                            ; ===========================================================================
00016288                            
00016288                            Obj69_Main:				; XREF: Obj69_Index
00016288 5428 0024                  		addq.b	#2,$24(a0)
0001628C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016294 317C 4492 0002             		move.w	#$4492,2(a0)
0001629A 0028 0004 0001             		ori.b	#4,1(a0)
000162A0 117C 0080 0019             		move.b	#$80,$19(a0)
000162A6 7000                       		moveq	#0,d0
000162A8 1028 0028                  		move.b	$28(a0),d0
000162AC 0240 000F                  		andi.w	#$F,d0
000162B0 C0FC 003C                  		mulu.w	#$3C,d0
000162B4 3140 0032                  		move.w	d0,$32(a0)
000162B8 4A28 0028                  		tst.b	$28(a0)
000162BC 6A00                       		bpl.s	Obj69_Trapdoor
000162BE 5428 0024                  		addq.b	#2,$24(a0)
000162C2 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000162CA 317C 04DF 0002             		move.w	#$4DF,2(a0)
000162D0 117C 0010 0019             		move.b	#$10,$19(a0)
000162D6 117C 0002 001C             		move.b	#2,$1C(a0)
000162DC 7000                       		moveq	#0,d0
000162DE 1028 0028                  		move.b	$28(a0),d0	; get object type
000162E2 3200                       		move.w	d0,d1
000162E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000162E8 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000162EC 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162F0 3140 0032                  		move.w	d0,$32(a0)
000162F4 0241 0070                  		andi.w	#$70,d1
000162F8 0641 0010                  		addi.w	#$10,d1
000162FC E549                       		lsl.w	#2,d1
000162FE 5341                       		subq.w	#1,d1
00016300 3141 0036                  		move.w	d1,$36(a0)
00016304 6000                       		bra.s	Obj69_Spinner
00016306                            ; ===========================================================================
00016306                            
00016306                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016306 5368 0030                  		subq.w	#1,$30(a0)
0001630A 6A00                       		bpl.s	Obj69_Animate
0001630C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016312 0868 0000 001C             		bchg	#0,$1C(a0)
00016318 4A28 0001                  		tst.b	1(a0)
0001631C 6A00                       		bpl.s	Obj69_Animate
0001631E 303C 00BB                  		move.w	#$BB,d0
00016322 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play door sound
00016328                            
00016328                            Obj69_Animate:
00016328 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001632E 4EB9 0000 B0A0             		jsr	AnimateSprite
00016334 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016338 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001633A 323C 004B                  		move.w	#$4B,d1
0001633E 343C 000C                  		move.w	#$C,d2
00016342 3602                       		move.w	d2,d3
00016344 5243                       		addq.w	#1,d3
00016346 3828 0008                  		move.w	8(a0),d4
0001634A 6100 A0D6                  		bsr.w	SolidObject
0001634E 6000 9DAA                  		bra.w	MarkObjGone
00016352                            ; ===========================================================================
00016352                            
00016352                            Obj69_NotSolid:
00016352 0828 0003 0022             		btst	#3,$22(a0)
00016358 6700                       		beq.s	Obj69_Display
0001635A 43F8 D000                  		lea	($FFFFD000).w,a1
0001635E 08A9 0003 0022             		bclr	#3,$22(a1)
00016364 08A8 0003 0022             		bclr	#3,$22(a0)
0001636A 4228 0025                  		clr.b	$25(a0)
0001636E                            
0001636E                            Obj69_Display:
0001636E 6000 9D8A                  		bra.w	MarkObjGone
00016372                            ; ===========================================================================
00016372                            
00016372                            Obj69_Spinner:				; XREF: Obj69_Index
00016372 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016376 C068 0036                  		and.w	$36(a0),d0
0001637A 6600                       		bne.s	Obj69_Delay
0001637C 117C 0001 0034             		move.b	#1,$34(a0)
00016382                            
00016382                            Obj69_Delay:
00016382 4A28 0034                  		tst.b	$34(a0)
00016386 6700                       		beq.s	Obj69_Animate2
00016388 5368 0030                  		subq.w	#1,$30(a0)
0001638C 6A00                       		bpl.s	Obj69_Animate2
0001638E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016394 4228 0034                  		clr.b	$34(a0)
00016398 0868 0000 001C             		bchg	#0,$1C(a0)
0001639E                            
0001639E                            Obj69_Animate2:
0001639E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000163A4 4EB9 0000 B0A0             		jsr	AnimateSprite
000163AA 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000163AE 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000163B0 323C 001B                  		move.w	#$1B,d1
000163B4 343C 0007                  		move.w	#7,d2
000163B8 3602                       		move.w	d2,d3
000163BA 5243                       		addq.w	#1,d3
000163BC 3828 0008                  		move.w	8(a0),d4
000163C0 6100 A060                  		bsr.w	SolidObject
000163C4 6000 9D34                  		bra.w	MarkObjGone
000163C8                            ; ===========================================================================
000163C8                            
000163C8                            Obj69_NotSolid2:
000163C8 0828 0003 0022             		btst	#3,$22(a0)
000163CE 6700                       		beq.s	Obj69_Display2
000163D0 43F8 D000                  		lea	($FFFFD000).w,a1
000163D4 08A9 0003 0022             		bclr	#3,$22(a1)
000163DA 08A8 0003 0022             		bclr	#3,$22(a0)
000163E0 4228 0025                  		clr.b	$25(a0)
000163E4                            
000163E4                            Obj69_Display2:
000163E4 6000 9D14                  		bra.w	MarkObjGone
000163E8                            ; ===========================================================================
000163E8                            Ani_obj69:
000163E8                            	include "_anim\obj69.asm"
000163E8                            ; ---------------------------------------------------------------------------
000163E8                            ; Animation script - trapdoor (SBZ)
000163E8                            ; ---------------------------------------------------------------------------
000163E8 0000                       		dc.w byte_158AC-Ani_obj69
000163EA 0000                       		dc.w byte_158B2-Ani_obj69
000163EC 0000                       		dc.w byte_158B8-Ani_obj69
000163EE 0000                       		dc.w byte_158CC-Ani_obj69
000163F0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163F6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163FC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016409 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016410 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001641D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016424                            		even
00016424                            		even
00016424                            
00016424                            ; ---------------------------------------------------------------------------
00016424                            ; Sprite mappings - trapdoor (SBZ)
00016424                            ; ---------------------------------------------------------------------------
00016424                            Map_obj69:
00016424                            	include "_maps\obj69.asm"
00016424                            ; ---------------------------------------------------------------------------
00016424                            ; Sprite mappings - trapdoor (SBZ)
00016424                            ; ---------------------------------------------------------------------------
00016424 0000                       		dc.w byte_158E6-Map_obj69
00016426 0000                       		dc.w byte_158FB-Map_obj69
00016428 0000                       		dc.w byte_15924-Map_obj69
0001642A 04                         byte_158E6:	dc.b 4
0001642B F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016430 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016435 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001643A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001643F 08                         byte_158FB:	dc.b 8
00016440 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016445 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001644A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001644F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016454 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016459 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001645E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016463 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016468 04                         byte_15924:	dc.b 4
00016469 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001646E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016473 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016478 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001647E 00                         		even
0001647E 00                         		even
0001647E                            
0001647E                            ; ---------------------------------------------------------------------------
0001647E                            ; Sprite mappings - spinning platforms (SBZ)
0001647E                            ; ---------------------------------------------------------------------------
0001647E                            Map_obj69a:
0001647E                            	include "_maps\obj69a.asm"
0001647E                            ; ---------------------------------------------------------------------------
0001647E                            ; Sprite mappings - spinning platforms (SBZ)
0001647E                            ; ---------------------------------------------------------------------------
0001647E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016482 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016486 0000                       		dc.w byte_15970-Map_obj69a
00016488 02                         byte_15944:	dc.b 2
00016489 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001648E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016493 02                         byte_1594F:	dc.b 2
00016494 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016499 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001649E 02                         byte_1595A:	dc.b 2
0001649F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000164A4 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000164A9 02                         byte_15965:	dc.b 2
000164AA F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000164AF 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000164B4 02                         byte_15970:	dc.b 2
000164B5 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000164BA 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000164C0 00                         		even
000164C0 00                         		even
000164C0                            
000164C0                            ; ===========================================================================
000164C0                            ; ---------------------------------------------------------------------------
000164C0                            ; Object 6A - ground saws and pizza cutters (SBZ)
000164C0                            ; ---------------------------------------------------------------------------
000164C0                            
000164C0                            Obj6A:					; XREF: Obj_Index
000164C0 7000                       		moveq	#0,d0
000164C2 1028 0024                  		move.b	$24(a0),d0
000164C6 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000164CA 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000164CE                            ; ===========================================================================
000164CE 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000164D0 0000                       		dc.w Obj6A_Action-Obj6A_Index
000164D2                            ; ===========================================================================
000164D2                            
000164D2                            Obj6A_Main:				; XREF: Obj6A_Index
000164D2 5428 0024                  		addq.b	#2,$24(a0)
000164D6 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000164DE 317C 43B5 0002             		move.w	#$43B5,2(a0)
000164E4 117C 0004 0001             		move.b	#4,1(a0)
000164EA 117C 0004 0018             		move.b	#4,$18(a0)
000164F0 117C 0020 0019             		move.b	#$20,$19(a0)
000164F6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164FC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016502 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016508 6400                       		bcc.s	Obj6A_Action
0001650A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016510                            
00016510                            Obj6A_Action:				; XREF: Obj6A_Index
00016510 7000                       		moveq	#0,d0
00016512 1028 0028                  		move.b	$28(a0),d0
00016516 0240 0007                  		andi.w	#7,d0
0001651A D040                       		add.w	d0,d0
0001651C 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016520 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016524 3028 003A                  		move.w	$3A(a0),d0
00016528 0240 FF80                  		andi.w	#$FF80,d0
0001652C 3238 F700                  		move.w	($FFFFF700).w,d1
00016530 0441 0080                  		subi.w	#$80,d1
00016534 0241 FF80                  		andi.w	#$FF80,d1
00016538 9041                       		sub.w	d1,d0
0001653A 0C40 0280                  		cmpi.w	#$280,d0
0001653E 6200                       		bhi.s	Obj6A_Delete
00016540 4EF9 0000 E052             		jmp	DisplaySprite
00016546                            ; ===========================================================================
00016546                            
00016546                            Obj6A_Delete:
00016546 4EF9 0000 E08E             		jmp	DeleteObject
0001654C                            ; ===========================================================================
0001654C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016550 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016554 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016556                            ; ===========================================================================
00016556                            
00016556                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016556 4E75                       		rts	
00016558                            ; ===========================================================================
00016558                            
00016558                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016558 323C 0060                  		move.w	#$60,d1
0001655C 7000                       		moveq	#0,d0
0001655E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016562 0828 0000 0022             		btst	#0,$22(a0)
00016568 6700                       		beq.s	Obj6A_Animate01
0001656A 4440                       		neg.w	d0
0001656C D041                       		add.w	d1,d0
0001656E                            
0001656E                            Obj6A_Animate01:
0001656E 3228 003A                  		move.w	$3A(a0),d1
00016572 9240                       		sub.w	d0,d1
00016574 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016578 5328 001E                  		subq.b	#1,$1E(a0)
0001657C 6A00                       		bpl.s	loc_15A46
0001657E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016584 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001658A                            
0001658A                            loc_15A46:
0001658A 4A28 0001                  		tst.b	1(a0)
0001658E 6A00                       		bpl.s	locret_15A60
00016590 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016594 0240 000F                  		andi.w	#$F,d0
00016598 6600                       		bne.s	locret_15A60
0001659A 303C 00B0                  		move.w	#$B0,d0
0001659E 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play saw sound
000165A4                            
000165A4                            locret_15A60:
000165A4 4E75                       		rts	
000165A6                            ; ===========================================================================
000165A6                            
000165A6                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000165A6 323C 0030                  		move.w	#$30,d1
000165AA 7000                       		moveq	#0,d0
000165AC 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165B0 0828 0000 0022             		btst	#0,$22(a0)
000165B6 6700                       		beq.s	Obj6A_Animate02
000165B8 4440                       		neg.w	d0
000165BA 0640 0080                  		addi.w	#$80,d0
000165BE                            
000165BE                            Obj6A_Animate02:
000165BE 3228 0038                  		move.w	$38(a0),d1
000165C2 9240                       		sub.w	d0,d1
000165C4 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000165C8 5328 001E                  		subq.b	#1,$1E(a0)
000165CC 6A00                       		bpl.s	loc_15A96
000165CE 117C 0002 001E             		move.b	#2,$1E(a0)
000165D4 0868 0000 001A             		bchg	#0,$1A(a0)
000165DA                            
000165DA                            loc_15A96:
000165DA 4A28 0001                  		tst.b	1(a0)
000165DE 6A00                       		bpl.s	locret_15AB0
000165E0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165E4 0C00 0018                  		cmpi.b	#$18,d0
000165E8 6600                       		bne.s	locret_15AB0
000165EA 303C 00B0                  		move.w	#$B0,d0
000165EE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play saw sound
000165F4                            
000165F4                            locret_15AB0:
000165F4 4E75                       		rts	
000165F6                            ; ===========================================================================
000165F6                            
000165F6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165F6 4A28 003D                  		tst.b	$3D(a0)
000165FA 6600                       		bne.s	Obj6A_Animate03
000165FC 3038 D008                  		move.w	($FFFFD008).w,d0
00016600 0440 00C0                  		subi.w	#$C0,d0
00016604 6500                       		bcs.s	loc_15B02
00016606 9068 0008                  		sub.w	8(a0),d0
0001660A 6500                       		bcs.s	loc_15B02
0001660C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016610 0440 0080                  		subi.w	#$80,d0
00016614 B068 000C                  		cmp.w	$C(a0),d0
00016618 6400                       		bcc.s	locret_15B04
0001661A 0640 0100                  		addi.w	#$100,d0
0001661E B068 000C                  		cmp.w	$C(a0),d0
00016622 6500                       		bcs.s	locret_15B04
00016624 117C 0001 003D             		move.b	#1,$3D(a0)
0001662A 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016630 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016636 117C 0002 001A             		move.b	#2,$1A(a0)
0001663C 303C 00B0                  		move.w	#$B0,d0
00016640 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play saw sound
00016646                            
00016646                            loc_15B02:
00016646 588F                       		addq.l	#4,sp
00016648                            
00016648                            locret_15B04:
00016648 4E75                       		rts	
0001664A                            ; ===========================================================================
0001664A                            
0001664A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001664A 4EB9 0000 E02C             		jsr	SpeedToPos
00016650 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016656 5328 001E                  		subq.b	#1,$1E(a0)
0001665A 6A00                       		bpl.s	locret_15B24
0001665C 117C 0002 001E             		move.b	#2,$1E(a0)
00016662 0868 0000 001A             		bchg	#0,$1A(a0)
00016668                            
00016668                            locret_15B24:
00016668 4E75                       		rts	
0001666A                            ; ===========================================================================
0001666A                            
0001666A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001666A 4A28 003D                  		tst.b	$3D(a0)
0001666E 6600                       		bne.s	Obj6A_Animate04
00016670 3038 D008                  		move.w	($FFFFD008).w,d0
00016674 0640 00E0                  		addi.w	#$E0,d0
00016678 9068 0008                  		sub.w	8(a0),d0
0001667C 6400                       		bcc.s	loc_15B74
0001667E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016682 0440 0080                  		subi.w	#$80,d0
00016686 B068 000C                  		cmp.w	$C(a0),d0
0001668A 6400                       		bcc.s	locret_15B76
0001668C 0640 0100                  		addi.w	#$100,d0
00016690 B068 000C                  		cmp.w	$C(a0),d0
00016694 6500                       		bcs.s	locret_15B76
00016696 117C 0001 003D             		move.b	#1,$3D(a0)
0001669C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000166A2 117C 00A2 0020             		move.b	#$A2,$20(a0)
000166A8 117C 0002 001A             		move.b	#2,$1A(a0)
000166AE 303C 00B0                  		move.w	#$B0,d0
000166B2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play saw sound
000166B8                            
000166B8                            loc_15B74:
000166B8 588F                       		addq.l	#4,sp
000166BA                            
000166BA                            locret_15B76:
000166BA 4E75                       		rts	
000166BC                            ; ===========================================================================
000166BC                            
000166BC                            Obj6A_Animate04:
000166BC 4EB9 0000 E02C             		jsr	SpeedToPos
000166C2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166C8 5328 001E                  		subq.b	#1,$1E(a0)
000166CC 6A00                       		bpl.s	locret_15B96
000166CE 117C 0002 001E             		move.b	#2,$1E(a0)
000166D4 0868 0000 001A             		bchg	#0,$1A(a0)
000166DA                            
000166DA                            locret_15B96:
000166DA 4E75                       		rts	
000166DC                            ; ===========================================================================
000166DC                            ; ---------------------------------------------------------------------------
000166DC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166DC                            ; ---------------------------------------------------------------------------
000166DC                            Map_obj6A:
000166DC                            	include "_maps\obj6A.asm"
000166DC                            ; ---------------------------------------------------------------------------
000166DC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166DC                            ; ---------------------------------------------------------------------------
000166DC 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000166E0 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000166E4 07                         byte_15BA0:	dc.b 7
000166E5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166EA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166EF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166F4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166F9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166FE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016703 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016708 07                         byte_15BC4:	dc.b 7
00016709 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001670E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016713 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016718 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001671D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016722 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016727 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001672C 04                         byte_15BE8:	dc.b 4
0001672D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016732 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016737 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001673C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016741 04                         byte_15BFD:	dc.b 4
00016742 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016747 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001674C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016751 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016756                            		even
00016756                            		even
00016756                            
00016756                            ; ===========================================================================
00016756                            ; ---------------------------------------------------------------------------
00016756                            ; Object 6B - stomper (SBZ)
00016756                            ; ---------------------------------------------------------------------------
00016756                            
00016756                            Obj6B:					; XREF: Obj_Index
00016756 7000                       		moveq	#0,d0
00016758 1028 0024                  		move.b	$24(a0),d0
0001675C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016760 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016764                            ; ===========================================================================
00016764 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016766 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016768                            
00016768 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001676C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016770 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016774 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016778 8040 0005                  		dc.b  $80, $40,	  0,   5
0001677C                            ; ===========================================================================
0001677C                            
0001677C                            Obj6B_Main:				; XREF: Obj6B_Index
0001677C 5428 0024                  		addq.b	#2,$24(a0)
00016780 7000                       		moveq	#0,d0
00016782 1028 0028                  		move.b	$28(a0),d0
00016786 E448                       		lsr.w	#2,d0
00016788 0240 001C                  		andi.w	#$1C,d0
0001678C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016790 115B 0019                  		move.b	(a3)+,$19(a0)
00016794 115B 0016                  		move.b	(a3)+,$16(a0)
00016798 E448                       		lsr.w	#2,d0
0001679A 1140 001A                  		move.b	d0,$1A(a0)
0001679E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000167A6 317C 22C0 0002             		move.w	#$22C0,2(a0)
000167AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000167B2 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000167B4 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000167BA 6700                       		beq.s	Obj6B_SBZ3
000167BC                            
000167BC                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000167BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167C0 7000                       		moveq	#0,d0
000167C2 1028 0023                  		move.b	$23(a0),d0
000167C6 6700                       		beq.s	Obj6B_Delete
000167C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167CE                            
000167CE                            Obj6B_Delete:
000167CE 4EF9 0000 E08E             		jmp	DeleteObject
000167D4                            ; ===========================================================================
000167D4                            
000167D4                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000167D4 317C 41F0 0002             		move.w	#$41F0,2(a0)
000167DA 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000167E0 6600                       		bne.s	Obj6B_SBZ12
000167E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E6 7000                       		moveq	#0,d0
000167E8 1028 0023                  		move.b	$23(a0),d0
000167EC 6700                       		beq.s	Obj6B_SBZ12
000167EE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167F4 6700                       		beq.s	Obj6B_SBZ12
000167F6 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167FA 60C0                       		bra.s	Obj6B_ChkGone
000167FC                            ; ===========================================================================
000167FC                            
000167FC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167FC 0028 0004 0001             		ori.b	#4,1(a0)
00016802 117C 0004 0018             		move.b	#4,$18(a0)
00016808 3168 0008 0034             		move.w	8(a0),$34(a0)
0001680E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016814 7000                       		moveq	#0,d0
00016816 101B                       		move.b	(a3)+,d0
00016818 3140 003C                  		move.w	d0,$3C(a0)
0001681C 7000                       		moveq	#0,d0
0001681E 1028 0028                  		move.b	$28(a0),d0
00016822 6A00                       		bpl.s	Obj6B_Action
00016824 0200 000F                  		andi.b	#$F,d0
00016828 1140 003E                  		move.b	d0,$3E(a0)
0001682C 1153 0028                  		move.b	(a3),$28(a0)
00016830 0C13 0005                  		cmpi.b	#5,(a3)
00016834 6600                       		bne.s	Obj6B_ChkGone2
00016836 08E8 0004 0001             		bset	#4,1(a0)
0001683C                            
0001683C                            Obj6B_ChkGone2:
0001683C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016840 7000                       		moveq	#0,d0
00016842 1028 0023                  		move.b	$23(a0),d0
00016846 6700                       		beq.s	Obj6B_Action
00016848 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001684E                            
0001684E                            Obj6B_Action:				; XREF: Obj6B_Index
0001684E 3F28 0008                  		move.w	8(a0),-(sp)
00016852 7000                       		moveq	#0,d0
00016854 1028 0028                  		move.b	$28(a0),d0
00016858 0240 000F                  		andi.w	#$F,d0
0001685C D040                       		add.w	d0,d0
0001685E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016862 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016866 381F                       		move.w	(sp)+,d4
00016868 4A28 0001                  		tst.b	1(a0)
0001686C 6A00                       		bpl.s	Obj6B_ChkDel
0001686E 7200                       		moveq	#0,d1
00016870 1228 0019                  		move.b	$19(a0),d1
00016874 0641 000B                  		addi.w	#$B,d1
00016878 7400                       		moveq	#0,d2
0001687A 1428 0016                  		move.b	$16(a0),d2
0001687E 3602                       		move.w	d2,d3
00016880 5243                       		addq.w	#1,d3
00016882 6100 9B9E                  		bsr.w	SolidObject
00016886                            
00016886                            Obj6B_ChkDel:
00016886 3028 0034                  		move.w	$34(a0),d0
0001688A 0240 FF80                  		andi.w	#$FF80,d0
0001688E 3238 F700                  		move.w	($FFFFF700).w,d1
00016892 0441 0080                  		subi.w	#$80,d1
00016896 0241 FF80                  		andi.w	#$FF80,d1
0001689A 9041                       		sub.w	d1,d0
0001689C 0C40 0280                  		cmpi.w	#$280,d0
000168A0 6200                       		bhi.s	loc_15D64
000168A2 4EF9 0000 E052             		jmp	DisplaySprite
000168A8                            ; ===========================================================================
000168A8                            
000168A8                            loc_15D64:
000168A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000168AE 6600                       		bne.s	Obj6B_Delete2
000168B0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000168B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168B8 7000                       		moveq	#0,d0
000168BA 1028 0023                  		move.b	$23(a0),d0
000168BE 6700                       		beq.s	Obj6B_Delete2
000168C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168C6                            
000168C6                            Obj6B_Delete2:
000168C6 4EF9 0000 E08E             		jmp	DeleteObject
000168CC                            ; ===========================================================================
000168CC 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000168D0 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000168D4 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000168D8                            ; ===========================================================================
000168D8                            
000168D8                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000168D8 4E75                       		rts	
000168DA                            ; ===========================================================================
000168DA                            
000168DA                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000168DA 4A28 0038                  		tst.b	$38(a0)
000168DE 6600                       		bne.s	loc_15DB4
000168E0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168E4 7000                       		moveq	#0,d0
000168E6 1028 003E                  		move.b	$3E(a0),d0
000168EA 0832 0000 0000             		btst	#0,(a2,d0.w)
000168F0 6700                       		beq.s	loc_15DC2
000168F2 117C 0001 0038             		move.b	#1,$38(a0)
000168F8                            
000168F8                            loc_15DB4:
000168F8 3028 003C                  		move.w	$3C(a0),d0
000168FC B068 003A                  		cmp.w	$3A(a0),d0
00016900 6700                       		beq.s	loc_15DE0
00016902 5468 003A                  		addq.w	#2,$3A(a0)
00016906                            
00016906                            loc_15DC2:
00016906 3028 003A                  		move.w	$3A(a0),d0
0001690A 0828 0000 0022             		btst	#0,$22(a0)
00016910 6700                       		beq.s	loc_15DD4
00016912 4440                       		neg.w	d0
00016914 0640 0080                  		addi.w	#$80,d0
00016918                            
00016918                            loc_15DD4:
00016918 3228 0034                  		move.w	$34(a0),d1
0001691C 9240                       		sub.w	d0,d1
0001691E 3141 0008                  		move.w	d1,8(a0)
00016922 4E75                       		rts	
00016924                            ; ===========================================================================
00016924                            
00016924                            loc_15DE0:
00016924 5228 0028                  		addq.b	#1,$28(a0)
00016928 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001692E 4228 0038                  		clr.b	$38(a0)
00016932 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016936 7000                       		moveq	#0,d0
00016938 1028 0023                  		move.b	$23(a0),d0
0001693C 67C8                       		beq.s	loc_15DC2
0001693E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016944 60C0                       		bra.s	loc_15DC2
00016946                            ; ===========================================================================
00016946                            
00016946                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016946 4A28 0038                  		tst.b	$38(a0)
0001694A 6600                       		bne.s	loc_15E14
0001694C 5368 0036                  		subq.w	#1,$36(a0)
00016950 6600                       		bne.s	loc_15E1E
00016952 117C 0001 0038             		move.b	#1,$38(a0)
00016958                            
00016958                            loc_15E14:
00016958 4A68 003A                  		tst.w	$3A(a0)
0001695C 6700                       		beq.s	loc_15E3C
0001695E 5568 003A                  		subq.w	#2,$3A(a0)
00016962                            
00016962                            loc_15E1E:
00016962 3028 003A                  		move.w	$3A(a0),d0
00016966 0828 0000 0022             		btst	#0,$22(a0)
0001696C 6700                       		beq.s	loc_15E30
0001696E 4440                       		neg.w	d0
00016970 0640 0080                  		addi.w	#$80,d0
00016974                            
00016974                            loc_15E30:
00016974 3228 0034                  		move.w	$34(a0),d1
00016978 9240                       		sub.w	d0,d1
0001697A 3141 0008                  		move.w	d1,8(a0)
0001697E 4E75                       		rts	
00016980                            ; ===========================================================================
00016980                            
00016980                            loc_15E3C:
00016980 5328 0028                  		subq.b	#1,$28(a0)
00016984 4228 0038                  		clr.b	$38(a0)
00016988 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001698C 7000                       		moveq	#0,d0
0001698E 1028 0023                  		move.b	$23(a0),d0
00016992 67CE                       		beq.s	loc_15E1E
00016994 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001699A 60C6                       		bra.s	loc_15E1E
0001699C                            ; ===========================================================================
0001699C                            
0001699C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001699C 4A28 0038                  		tst.b	$38(a0)
000169A0 6600                       		bne.s	loc_15E7C
000169A2 4A68 003A                  		tst.w	$3A(a0)
000169A6 6700                       		beq.s	loc_15E6A
000169A8 5368 003A                  		subq.w	#1,$3A(a0)
000169AC 6000                       		bra.s	loc_15E8E
000169AE                            ; ===========================================================================
000169AE                            
000169AE                            loc_15E6A:
000169AE 5368 0036                  		subq.w	#1,$36(a0)
000169B2 6A00                       		bpl.s	loc_15E8E
000169B4 317C 003C 0036             		move.w	#$3C,$36(a0)
000169BA 117C 0001 0038             		move.b	#1,$38(a0)
000169C0                            
000169C0                            loc_15E7C:
000169C0 5068 003A                  		addq.w	#8,$3A(a0)
000169C4 3028 003A                  		move.w	$3A(a0),d0
000169C8 B068 003C                  		cmp.w	$3C(a0),d0
000169CC 6600                       		bne.s	loc_15E8E
000169CE 4228 0038                  		clr.b	$38(a0)
000169D2                            
000169D2                            loc_15E8E:
000169D2 3028 003A                  		move.w	$3A(a0),d0
000169D6 0828 0000 0022             		btst	#0,$22(a0)
000169DC 6700                       		beq.s	loc_15EA0
000169DE 4440                       		neg.w	d0
000169E0 0640 0038                  		addi.w	#$38,d0
000169E4                            
000169E4                            loc_15EA0:
000169E4 3228 0030                  		move.w	$30(a0),d1
000169E8 D240                       		add.w	d0,d1
000169EA 3141 000C                  		move.w	d1,$C(a0)
000169EE 4E75                       		rts	
000169F0                            ; ===========================================================================
000169F0                            
000169F0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169F0 4A28 0038                  		tst.b	$38(a0)
000169F4 6600                       		bne.s	loc_15ED0
000169F6 4A68 003A                  		tst.w	$3A(a0)
000169FA 6700                       		beq.s	loc_15EBE
000169FC 5168 003A                  		subq.w	#8,$3A(a0)
00016A00 6000                       		bra.s	loc_15EF0
00016A02                            ; ===========================================================================
00016A02                            
00016A02                            loc_15EBE:
00016A02 5368 0036                  		subq.w	#1,$36(a0)
00016A06 6A00                       		bpl.s	loc_15EF0
00016A08 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A0E 117C 0001 0038             		move.b	#1,$38(a0)
00016A14                            
00016A14                            loc_15ED0:
00016A14 3028 003A                  		move.w	$3A(a0),d0
00016A18 B068 003C                  		cmp.w	$3C(a0),d0
00016A1C 6700                       		beq.s	loc_15EE0
00016A1E 5068 003A                  		addq.w	#8,$3A(a0)
00016A22 6000                       		bra.s	loc_15EF0
00016A24                            ; ===========================================================================
00016A24                            
00016A24                            loc_15EE0:
00016A24 5368 0036                  		subq.w	#1,$36(a0)
00016A28 6A00                       		bpl.s	loc_15EF0
00016A2A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A30 4228 0038                  		clr.b	$38(a0)
00016A34                            
00016A34                            loc_15EF0:
00016A34 3028 003A                  		move.w	$3A(a0),d0
00016A38 0828 0000 0022             		btst	#0,$22(a0)
00016A3E 6700                       		beq.s	loc_15F02
00016A40 4440                       		neg.w	d0
00016A42 0640 0038                  		addi.w	#$38,d0
00016A46                            
00016A46                            loc_15F02:
00016A46 3228 0030                  		move.w	$30(a0),d1
00016A4A D240                       		add.w	d0,d1
00016A4C 3141 000C                  		move.w	d1,$C(a0)
00016A50 4E75                       		rts	
00016A52                            ; ===========================================================================
00016A52                            
00016A52                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A52 4A28 0038                  		tst.b	$38(a0)
00016A56 6600                       		bne.s	loc_15F3E
00016A58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A5C 7000                       		moveq	#0,d0
00016A5E 1028 003E                  		move.b	$3E(a0),d0
00016A62 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A68 6700                       		beq.s	locret_15F5C
00016A6A 117C 0001 0038             		move.b	#1,$38(a0)
00016A70 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A74 7000                       		moveq	#0,d0
00016A76 1028 0023                  		move.b	$23(a0),d0
00016A7A 6700                       		beq.s	loc_15F3E
00016A7C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A82                            
00016A82                            loc_15F3E:
00016A82 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A8A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A92 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A98 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A9E 6700                       		beq.s	loc_15F5E
00016AA0                            
00016AA0                            locret_15F5C:
00016AA0 4E75                       		rts	
00016AA2                            ; ===========================================================================
00016AA2                            
00016AA2                            loc_15F5E:
00016AA2 4228 0028                  		clr.b	$28(a0)
00016AA6 4228 0038                  		clr.b	$38(a0)
00016AAA 4E75                       		rts	
00016AAC                            ; ===========================================================================
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC                            Map_obj6B:
00016AAC                            	include "_maps\obj6B.asm"
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016AB0 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016AB4 0000                       		dc.w byte_15FB0-Map_obj6B
00016AB6 04                         byte_15F72:	dc.b 4
00016AB7 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016ABC F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016AC1 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016AC6 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016ACB 08                         byte_15F87:	dc.b 8
00016ACC E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016AD1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016AD6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016ADB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016AE0 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016AE5 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016AEA 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016AEF 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AF4 0E                         byte_15FB0:	dc.b $E
00016AF5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AFA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AFF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016B04 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016B09 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016B0E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016B13 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016B18 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016B1D E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016B22 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016B27 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016B2C 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016B31 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016B36 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016B3C 00                         		even
00016B3C 00                         		even
00016B3C                            
00016B3C                            ; ===========================================================================
00016B3C                            ; ---------------------------------------------------------------------------
00016B3C                            ; Object 6C - vanishing	platforms (SBZ)
00016B3C                            ; ---------------------------------------------------------------------------
00016B3C                            
00016B3C                            Obj6C:					; XREF: Obj_Index
00016B3C 7000                       		moveq	#0,d0
00016B3E 1028 0024                  		move.b	$24(a0),d0
00016B42 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016B46 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016B4A                            ; ===========================================================================
00016B4A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016B4C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B4E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B50 0000                       		dc.w loc_16068-Obj6C_Index
00016B52                            ; ===========================================================================
00016B52                            
00016B52                            Obj6C_Main:				; XREF: Obj6C_Index
00016B52 5C28 0024                  		addq.b	#6,$24(a0)
00016B56 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B5E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B64 0028 0004 0001             		ori.b	#4,1(a0)
00016B6A 117C 0010 0019             		move.b	#$10,$19(a0)
00016B70 117C 0004 0018             		move.b	#4,$18(a0)
00016B76 7000                       		moveq	#0,d0
00016B78 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B7C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B80 5240                       		addq.w	#1,d0		; add 1
00016B82 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B84 3200                       		move.w	d0,d1
00016B86 5340                       		subq.w	#1,d0
00016B88 3140 0030                  		move.w	d0,$30(a0)
00016B8C 3140 0032                  		move.w	d0,$32(a0)
00016B90 7000                       		moveq	#0,d0
00016B92 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B96 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B9A 0641 0080                  		addi.w	#$80,d1
00016B9E C0C1                       		mulu.w	d1,d0
00016BA0 E088                       		lsr.l	#8,d0
00016BA2 3140 0036                  		move.w	d0,$36(a0)
00016BA6 5341                       		subq.w	#1,d1
00016BA8 3141 0038                  		move.w	d1,$38(a0)
00016BAC                            
00016BAC                            loc_16068:				; XREF: Obj6C_Index
00016BAC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016BB0 9068 0036                  		sub.w	$36(a0),d0
00016BB4 C068 0038                  		and.w	$38(a0),d0
00016BB8 6600                       		bne.s	Obj6C_Animate
00016BBA 5928 0024                  		subq.b	#4,$24(a0)
00016BBE 6000                       		bra.s	Obj6C_Vanish
00016BC0                            ; ===========================================================================
00016BC0                            
00016BC0                            Obj6C_Animate:
00016BC0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BC6 4EB9 0000 B0A0             		jsr	AnimateSprite
00016BCC 6000 952C                  		bra.w	MarkObjGone
00016BD0                            ; ===========================================================================
00016BD0                            
00016BD0                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016BD0 5368 0030                  		subq.w	#1,$30(a0)
00016BD4 6A00                       		bpl.s	loc_160AA
00016BD6 317C 007F 0030             		move.w	#127,$30(a0)
00016BDC 4A28 001C                  		tst.b	$1C(a0)
00016BE0 6700                       		beq.s	loc_160A4
00016BE2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016BE8                            
00016BE8                            loc_160A4:
00016BE8 0868 0000 001C             		bchg	#0,$1C(a0)
00016BEE                            
00016BEE                            loc_160AA:
00016BEE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BF4 4EB9 0000 B0A0             		jsr	AnimateSprite
00016BFA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016C00 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016C02 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016C08 6600                       		bne.s	loc_160D6
00016C0A 7200                       		moveq	#0,d1
00016C0C 1228 0019                  		move.b	$19(a0),d1
00016C10 4EB9 0000 7C5C             		jsr	(PlatformObject).l
00016C16 6000 94E2                  		bra.w	MarkObjGone
00016C1A                            ; ===========================================================================
00016C1A                            
00016C1A                            loc_160D6:
00016C1A 7200                       		moveq	#0,d1
00016C1C 1228 0019                  		move.b	$19(a0),d1
00016C20 4EB9 0000 7DD0             		jsr	(ExitPlatform).l
00016C26 3428 0008                  		move.w	8(a0),d2
00016C2A 4EB9 0000 833A             		jsr	(MvSonicOnPtfm2).l
00016C30 6000 94C8                  		bra.w	MarkObjGone
00016C34                            ; ===========================================================================
00016C34                            
00016C34                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016C34 0828 0003 0022             		btst	#3,$22(a0)
00016C3A 6700                       		beq.s	Obj6C_Display
00016C3C 43F8 D000                  		lea	($FFFFD000).w,a1
00016C40 08A9 0003 0022             		bclr	#3,$22(a1)
00016C46 08A8 0003 0022             		bclr	#3,$22(a0)
00016C4C 117C 0002 0024             		move.b	#2,$24(a0)
00016C52 4228 0025                  		clr.b	$25(a0)
00016C56                            
00016C56                            Obj6C_Display:
00016C56 6000 94A2                  		bra.w	MarkObjGone
00016C5A                            ; ===========================================================================
00016C5A                            Ani_obj6C:
00016C5A                            	include "_anim\obj6C.asm"
00016C5A                            ; ---------------------------------------------------------------------------
00016C5A                            ; Animation script - vanishing platforms (SBZ)
00016C5A                            ; ---------------------------------------------------------------------------
00016C5A 0000                       		dc.w byte_1611A-Ani_obj6C
00016C5C 0000                       		dc.w byte_16122-Ani_obj6C
00016C5E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C66 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C6E                            		even
00016C6E                            		even
00016C6E                            
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            Map_obj6C:
00016C6E                            	include "_maps\obj6C.asm"
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C72 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C76 01                         byte_16132:	dc.b 1
00016C77 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C7C 01                         byte_16138:	dc.b 1
00016C7D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C82 01                         byte_1613E:	dc.b 1
00016C83 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C88 00                         byte_16144:	dc.b 0
00016C8A 00                         		even
00016C8A 00                         		even
00016C8A                            
00016C8A                            ; ===========================================================================
00016C8A                            ; ---------------------------------------------------------------------------
00016C8A                            ; Object 6E - electrocution orbs (SBZ)
00016C8A                            ; ---------------------------------------------------------------------------
00016C8A                            
00016C8A                            Obj6E:					; XREF: Obj_Index
00016C8A 7000                       		moveq	#0,d0
00016C8C 1028 0024                  		move.b	$24(a0),d0
00016C90 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C94 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C98                            ; ===========================================================================
00016C98 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C9A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C9C                            ; ===========================================================================
00016C9C                            
00016C9C                            Obj6E_Main:				; XREF: Obj6E_Index
00016C9C 5428 0024                  		addq.b	#2,$24(a0)
00016CA0 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016CA8 317C 047E 0002             		move.w	#$47E,2(a0)
00016CAE 0028 0004 0001             		ori.b	#4,1(a0)
00016CB4 117C 0028 0019             		move.b	#$28,$19(a0)
00016CBA 7000                       		moveq	#0,d0
00016CBC 1028 0028                  		move.b	$28(a0),d0	; read object type
00016CC0 E948                       		lsl.w	#4,d0		; multiply by $10
00016CC2 5340                       		subq.w	#1,d0
00016CC4 3140 0034                  		move.w	d0,$34(a0)
00016CC8                            
00016CC8                            Obj6E_Shock:				; XREF: Obj6E_Index
00016CC8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CCC C068 0034                  		and.w	$34(a0),d0
00016CD0 6600                       		bne.s	Obj6E_Animate
00016CD2 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016CD8 4A28 0001                  		tst.b	1(a0)
00016CDC 6A00                       		bpl.s	Obj6E_Animate
00016CDE 303C 00B1                  		move.w	#$B1,d0
00016CE2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016CE8                            
00016CE8                            Obj6E_Animate:
00016CE8 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016CEE 4EB9 0000 B0A0             		jsr	AnimateSprite
00016CF4 117C 0000 0020             		move.b	#0,$20(a0)
00016CFA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016D00 6600                       		bne.s	Obj6E_Display	; if not, branch
00016D02 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016D08                            
00016D08                            Obj6E_Display:
00016D08 6000 93F0                  		bra.w	MarkObjGone
00016D0C                            ; ===========================================================================
00016D0C                            Ani_obj6E:
00016D0C                            	include "_anim\obj6E.asm"
00016D0C                            ; ---------------------------------------------------------------------------
00016D0C                            ; Animation script - electrocution orbs (SBZ)
00016D0C                            ; ---------------------------------------------------------------------------
00016D0C 0000                       		dc.w byte_161CC-Ani_obj6E
00016D0E 0000                       		dc.w byte_161D0-Ani_obj6E
00016D10 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016D14 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016D24                            		even
00016D24                            		even
00016D24                            
00016D24                            ; ---------------------------------------------------------------------------
00016D24                            ; Sprite mappings - electrocution orbs (SBZ)
00016D24                            ; ---------------------------------------------------------------------------
00016D24                            Map_obj6E:
00016D24                            	include "_maps\obj6E.asm"
00016D24                            Map_26ed:
00016D24 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016D26 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016D28 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016D2A 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016D2C 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016D2E 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016D30 01                         Map_26ed_C: 	dc.b $1
00016D31 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016D36 02                         Map_26ed_12: 	dc.b $2
00016D37 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D3C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D41 06                         Map_26ed_1D: 	dc.b $6
00016D42 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D47 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D4C F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D51 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D56 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D5B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D60 08                         Map_26ed_3C: 	dc.b $8
00016D61 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D66 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D6B F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D70 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D75 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D7A F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D7F F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D84 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D89 06                         Map_26ed_65: 	dc.b $6
00016D8A F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D8F 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D94 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D99 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D9E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016DA3 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016DA8 04                         Map_26ed_84: 	dc.b $4
00016DA9 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016DAE 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016DB3 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016DB8 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016DBE 00                         	even
00016DBE 00                         	even
00016DBE                            
00016DBE                            ; ===========================================================================
00016DBE                            ; ---------------------------------------------------------------------------
00016DBE                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016DBE                            ; ---------------------------------------------------------------------------
00016DBE                            
00016DBE                            Obj6F:					; XREF: Obj_Index
00016DBE 7000                       		moveq	#0,d0
00016DC0 1028 0024                  		move.b	$24(a0),d0
00016DC4 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016DC8 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016DCC 3028 0030                  		move.w	$30(a0),d0
00016DD0 0240 FF80                  		andi.w	#$FF80,d0
00016DD4 3238 F700                  		move.w	($FFFFF700).w,d1
00016DD8 0441 0080                  		subi.w	#$80,d1
00016DDC 0241 FF80                  		andi.w	#$FF80,d1
00016DE0 9041                       		sub.w	d1,d0
00016DE2 0C40 0280                  		cmpi.w	#$280,d0
00016DE6 6200                       		bhi.s	loc_1629A
00016DE8                            
00016DE8                            Obj6F_Display:
00016DE8 4EF9 0000 E052             		jmp	DisplaySprite
00016DEE                            ; ===========================================================================
00016DEE                            
00016DEE                            loc_1629A:
00016DEE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DF4 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DF6 0C40 FF80                  		cmpi.w	#-$80,d0
00016DFA 64EC                       		bcc.s	Obj6F_Display
00016DFC                            
00016DFC                            Obj6F_Act1or2:
00016DFC 1028 002F                  		move.b	$2F(a0),d0
00016E00 6A00                       		bpl.s	Obj6F_Delete
00016E02 0240 007F                  		andi.w	#$7F,d0
00016E06 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E0A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016E10                            
00016E10                            Obj6F_Delete:
00016E10 4EF9 0000 E08E             		jmp	DeleteObject
00016E16                            ; ===========================================================================
00016E16 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016E18 0000                       		dc.w loc_163D8-Obj6F_Index
00016E1A                            ; ===========================================================================
00016E1A                            
00016E1A                            Obj6F_Main:				; XREF: Obj6F_Index
00016E1A 1028 0028                  		move.b	$28(a0),d0
00016E1E 6B00 0000                  		bmi.w	loc_16380
00016E22 5428 0024                  		addq.b	#2,$24(a0)
00016E26 217C 0001 647E 0004        		move.l	#Map_obj69a,4(a0)
00016E2E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016E34 117C 0010 0019             		move.b	#$10,$19(a0)
00016E3A 0028 0004 0001             		ori.b	#4,1(a0)
00016E40 117C 0004 0018             		move.b	#4,$18(a0)
00016E46 7000                       		moveq	#0,d0
00016E48 1028 0028                  		move.b	$28(a0),d0
00016E4C 3200                       		move.w	d0,d1
00016E4E E648                       		lsr.w	#3,d0
00016E50 0240 001E                  		andi.w	#$1E,d0
00016E54 45FA 0000                  		lea	off_164A6(pc),a2
00016E58 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E5C 315A 0038                  		move.w	(a2)+,$38(a0)
00016E60 315A 0030                  		move.w	(a2)+,$30(a0)
00016E64 214A 003C                  		move.l	a2,$3C(a0)
00016E68 0241 000F                  		andi.w	#$F,d1
00016E6C E549                       		lsl.w	#2,d1
00016E6E 1141 0038                  		move.b	d1,$38(a0)
00016E72 117C 0004 003A             		move.b	#4,$3A(a0)
00016E78 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E7C 6700                       		beq.s	loc_16356
00016E7E 117C 0001 003B             		move.b	#1,$3B(a0)
00016E84 4428 003A                  		neg.b	$3A(a0)
00016E88 7200                       		moveq	#0,d1
00016E8A 1228 0038                  		move.b	$38(a0),d1
00016E8E D228 003A                  		add.b	$3A(a0),d1
00016E92 B228 0039                  		cmp.b	$39(a0),d1
00016E96 6500                       		bcs.s	loc_16352
00016E98 1001                       		move.b	d1,d0
00016E9A 7200                       		moveq	#0,d1
00016E9C 4A00                       		tst.b	d0
00016E9E 6A00                       		bpl.s	loc_16352
00016EA0 1228 0039                  		move.b	$39(a0),d1
00016EA4 5901                       		subq.b	#4,d1
00016EA6                            
00016EA6                            loc_16352:
00016EA6 1141 0038                  		move.b	d1,$38(a0)
00016EAA                            
00016EAA                            loc_16356:
00016EAA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016EB0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016EB6 4A41                       		tst.w	d1
00016EB8 6600                       		bne.s	loc_1636C
00016EBA 117C 0001 001C             		move.b	#1,$1C(a0)
00016EC0                            
00016EC0                            loc_1636C:
00016EC0 0C41 0008                  		cmpi.w	#8,d1
00016EC4 6600                       		bne.s	loc_16378
00016EC6 117C 0000 001C             		move.b	#0,$1C(a0)
00016ECC                            
00016ECC                            loc_16378:
00016ECC 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016ED0 6000 0000                  		bra.w	loc_163D8
00016ED4                            ; ===========================================================================
00016ED4                            
00016ED4                            loc_16380:				; XREF: Obj6F_Main
00016ED4 1140 002F                  		move.b	d0,$2F(a0)
00016ED8 0240 007F                  		andi.w	#$7F,d0
00016EDC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016EE0 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016EE6 6700                       		beq.s	loc_1639A
00016EE8 4EF9 0000 E08E             		jmp	DeleteObject
00016EEE                            ; ===========================================================================
00016EEE                            
00016EEE                            loc_1639A:
00016EEE D040                       		add.w	d0,d0
00016EF0 0240 001E                  		andi.w	#$1E,d0
00016EF4 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016EFA D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EFE 321A                       		move.w	(a2)+,d1
00016F00 2248                       		movea.l	a0,a1
00016F02 6000                       		bra.s	Obj6F_LoadPform
00016F04                            ; ===========================================================================
00016F04                            
00016F04                            Obj6F_Loop:
00016F04 4EB9 0000 E4D8             		jsr	SingleObjLoad
00016F0A 6600                       		bne.s	loc_163D0
00016F0C                            
00016F0C                            Obj6F_LoadPform:			; XREF: loc_1639A
00016F0C 12BC 006F                  		move.b	#$6F,0(a1)
00016F10 335A 0008                  		move.w	(a2)+,8(a1)
00016F14 335A 000C                  		move.w	(a2)+,$C(a1)
00016F18 301A                       		move.w	(a2)+,d0
00016F1A 1340 0028                  		move.b	d0,$28(a1)
00016F1E                            
00016F1E                            loc_163D0:
00016F1E 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016F22                            
00016F22 588F                       		addq.l	#4,sp
00016F24 4E75                       		rts	
00016F26                            ; ===========================================================================
00016F26                            
00016F26                            loc_163D8:				; XREF: Obj6F_Index
00016F26 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016F2C 4EB9 0000 B0A0             		jsr	AnimateSprite
00016F32 4A28 001A                  		tst.b	$1A(a0)
00016F36 6600                       		bne.s	loc_16404
00016F38 3F28 0008                  		move.w	8(a0),-(sp)
00016F3C 6100 0000                  		bsr.w	loc_16424
00016F40 323C 001B                  		move.w	#$1B,d1
00016F44 343C 0007                  		move.w	#7,d2
00016F48 3602                       		move.w	d2,d3
00016F4A 5243                       		addq.w	#1,d3
00016F4C 381F                       		move.w	(sp)+,d4
00016F4E 6000 94D2                  		bra.w	SolidObject
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            loc_16404:
00016F52 0828 0003 0022             		btst	#3,$22(a0)
00016F58 6700                       		beq.s	loc_16420
00016F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00016F5E 08A9 0003 0022             		bclr	#3,$22(a1)
00016F64 08A8 0003 0022             		bclr	#3,$22(a0)
00016F6A 4228 0025                  		clr.b	$25(a0)
00016F6E                            
00016F6E                            loc_16420:
00016F6E 6000 0002                  		bra.w	*+4
00016F72                            
00016F72                            loc_16424:
00016F72 3028 0008                  		move.w	8(a0),d0
00016F76 B068 0034                  		cmp.w	$34(a0),d0
00016F7A 6600                       		bne.s	loc_16484
00016F7C 3028 000C                  		move.w	$C(a0),d0
00016F80 B068 0036                  		cmp.w	$36(a0),d0
00016F84 6600                       		bne.s	loc_16484
00016F86 7200                       		moveq	#0,d1
00016F88 1228 0038                  		move.b	$38(a0),d1
00016F8C D228 003A                  		add.b	$3A(a0),d1
00016F90 B228 0039                  		cmp.b	$39(a0),d1
00016F94 6500                       		bcs.s	loc_16456
00016F96 1001                       		move.b	d1,d0
00016F98 7200                       		moveq	#0,d1
00016F9A 4A00                       		tst.b	d0
00016F9C 6A00                       		bpl.s	loc_16456
00016F9E 1228 0039                  		move.b	$39(a0),d1
00016FA2 5901                       		subq.b	#4,d1
00016FA4                            
00016FA4                            loc_16456:
00016FA4 1141 0038                  		move.b	d1,$38(a0)
00016FA8 2268 003C                  		movea.l	$3C(a0),a1
00016FAC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016FB2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016FB8 4A41                       		tst.w	d1
00016FBA 6600                       		bne.s	loc_16474
00016FBC 117C 0001 001C             		move.b	#1,$1C(a0)
00016FC2                            
00016FC2                            loc_16474:
00016FC2 0C41 0008                  		cmpi.w	#8,d1
00016FC6 6600                       		bne.s	loc_16480
00016FC8 117C 0000 001C             		move.b	#0,$1C(a0)
00016FCE                            
00016FCE                            loc_16480:
00016FCE 6100 BFC4                  		bsr.w	Obj63_ChangeDir
00016FD2                            
00016FD2                            loc_16484:
00016FD2 4EF9 0000 E02C             		jmp	SpeedToPos
00016FD8                            ; ===========================================================================
00016FD8                            Ani_obj6F:
00016FD8                            	include "_anim\obj6F.asm"
00016FD8                            ; ---------------------------------------------------------------------------
00016FD8                            ; Animation script - platform on conveyor belt (SBZ)
00016FD8                            ; ---------------------------------------------------------------------------
00016FD8 0000                       		dc.w byte_1648E-Ani_obj6F
00016FDA 0000                       		dc.w byte_164A2-Ani_obj6F
00016FDC 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016FE9 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FF0 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FF4 00                         		even
00016FF4 00                         		even
00016FF4                            
00016FF4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FFA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017000 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017014 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017028 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001703C 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017050 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017064 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017078                            ; ===========================================================================
00017078                            ; ---------------------------------------------------------------------------
00017078                            ; Object 70 - large girder block (SBZ)
00017078                            ; ---------------------------------------------------------------------------
00017078                            
00017078                            Obj70:					; XREF: Obj_Index
00017078 7000                       		moveq	#0,d0
0001707A 1028 0024                  		move.b	$24(a0),d0
0001707E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017082 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017086                            ; ===========================================================================
00017086 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017088 0000                       		dc.w Obj70_Action-Obj70_Index
0001708A                            ; ===========================================================================
0001708A                            
0001708A                            Obj70_Main:				; XREF: Obj70_Index
0001708A 5428 0024                  		addq.b	#2,$24(a0)
0001708E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017096 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001709C 0028 0004 0001             		ori.b	#4,1(a0)
000170A2 117C 0004 0018             		move.b	#4,$18(a0)
000170A8 117C 0060 0019             		move.b	#$60,$19(a0)
000170AE 117C 0018 0016             		move.b	#$18,$16(a0)
000170B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000170BA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000170C0 6100 0000                  		bsr.w	Obj70_Move2
000170C4                            
000170C4                            Obj70_Action:				; XREF: Obj70_Index
000170C4 3F28 0008                  		move.w	8(a0),-(sp)
000170C8 4A68 003A                  		tst.w	$3A(a0)
000170CC 6700                       		beq.s	Obj70_Move
000170CE 5368 003A                  		subq.w	#1,$3A(a0)
000170D2 6600                       		bne.s	Obj70_Solid
000170D4                            
000170D4                            Obj70_Move:
000170D4 4EB9 0000 E02C             		jsr	SpeedToPos
000170DA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000170DE 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000170E0 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000170E4                            
000170E4                            Obj70_Solid:
000170E4 381F                       		move.w	(sp)+,d4
000170E6 4A28 0001                  		tst.b	1(a0)
000170EA 6A00                       		bpl.s	Obj70_ChkDel
000170EC 7200                       		moveq	#0,d1
000170EE 1228 0019                  		move.b	$19(a0),d1
000170F2 0641 000B                  		addi.w	#$B,d1
000170F6 7400                       		moveq	#0,d2
000170F8 1428 0016                  		move.b	$16(a0),d2
000170FC 3602                       		move.w	d2,d3
000170FE 5243                       		addq.w	#1,d3
00017100 6100 9320                  		bsr.w	SolidObject
00017104                            
00017104                            Obj70_ChkDel:
00017104 3028 0032                  		move.w	$32(a0),d0
00017108 0240 FF80                  		andi.w	#$FF80,d0
0001710C 3238 F700                  		move.w	($FFFFF700).w,d1
00017110 0441 0080                  		subi.w	#$80,d1
00017114 0241 FF80                  		andi.w	#$FF80,d1
00017118 9041                       		sub.w	d1,d0
0001711A 0C40 0280                  		cmpi.w	#$280,d0
0001711E 6200                       		bhi.s	Obj70_Delete
00017120 4EF9 0000 E052             		jmp	DisplaySprite
00017126                            ; ===========================================================================
00017126                            
00017126                            Obj70_Delete:
00017126 4EF9 0000 E08E             		jmp	DeleteObject
0001712C                            ; ===========================================================================
0001712C                            
0001712C                            Obj70_Move2:				; XREF: Obj70_Main
0001712C 1028 0038                  		move.b	$38(a0),d0
00017130 0240 0018                  		andi.w	#$18,d0
00017134 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001713A 43F1 0000                  		lea	(a1,d0.w),a1
0001713E 3159 0010                  		move.w	(a1)+,$10(a0)
00017142 3159 0012                  		move.w	(a1)+,$12(a0)
00017146 3159 0034                  		move.w	(a1)+,$34(a0)
0001714A 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001714E 317C 0007 003A             		move.w	#7,$3A(a0)
00017154 4E75                       		rts	
00017156                            ; ===========================================================================
00017156 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001715E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017166 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001716E 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017176                            ; ---------------------------------------------------------------------------
00017176                            ; Sprite mappings - large girder block (SBZ)
00017176                            ; ---------------------------------------------------------------------------
00017176                            Map_obj70:
00017176                            	include "_maps\obj70.asm"
00017176                            ; ---------------------------------------------------------------------------
00017176                            ; Sprite mappings - large girder block (SBZ)
00017176                            ; ---------------------------------------------------------------------------
00017176 0000                       		dc.w byte_1662A-Map_obj70
00017178 0C                         byte_1662A:	dc.b $C
00017179 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001717E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017183 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017188 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001718D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017192 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017197 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001719C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000171A1 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000171A6 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000171AB E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000171B0 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000171B6 00                         		even
000171B6 00                         		even
000171B6                            
000171B6                            ; ===========================================================================
000171B6                            ; ---------------------------------------------------------------------------
000171B6                            ; Object 72 - teleporter (SBZ)
000171B6                            ; ---------------------------------------------------------------------------
000171B6                            
000171B6                            Obj72:					; XREF: Obj_Index
000171B6 7000                       		moveq	#0,d0
000171B8 1028 0024                  		move.b	$24(a0),d0
000171BC 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000171C0 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000171C4 3028 0008                  		move.w	8(a0),d0
000171C8 0240 FF80                  		andi.w	#$FF80,d0
000171CC 3238 F700                  		move.w	($FFFFF700).w,d1
000171D0 0441 0080                  		subi.w	#$80,d1
000171D4 0241 FF80                  		andi.w	#$FF80,d1
000171D8 9041                       		sub.w	d1,d0
000171DA 0C40 0280                  		cmpi.w	#$280,d0
000171DE 6200                       		bhi.s	Obj72_Delete
000171E0 4E75                       		rts	
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj72_Delete:
000171E2 4EF9 0000 E08E             		jmp	DeleteObject
000171E8                            ; ===========================================================================
000171E8 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000171EA 0000                       		dc.w loc_166C8-Obj72_Index
000171EC 0000                       		dc.w loc_1675E-Obj72_Index
000171EE 0000                       		dc.w loc_16798-Obj72_Index
000171F0                            ; ===========================================================================
000171F0                            
000171F0                            Obj72_Main:				; XREF: Obj72_Index
000171F0 5428 0024                  		addq.b	#2,$24(a0)
000171F4 1028 0028                  		move.b	$28(a0),d0
000171F8 D040                       		add.w	d0,d0
000171FA 0240 001E                  		andi.w	#$1E,d0
000171FE 45FA 0000                  		lea	Obj72_Data(pc),a2
00017202 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017206 315A 003A                  		move.w	(a2)+,$3A(a0)
0001720A 214A 003C                  		move.l	a2,$3C(a0)
0001720E 315A 0036                  		move.w	(a2)+,$36(a0)
00017212 315A 0038                  		move.w	(a2)+,$38(a0)
00017216                            
00017216                            loc_166C8:				; XREF: Obj72_Index
00017216 43F8 D000                  		lea	($FFFFD000).w,a1
0001721A 3029 0008                  		move.w	8(a1),d0
0001721E 9068 0008                  		sub.w	8(a0),d0
00017222 0828 0000 0022             		btst	#0,$22(a0)
00017228 6700                       		beq.s	loc_166E0
0001722A 0640 000F                  		addi.w	#$F,d0
0001722E                            
0001722E                            loc_166E0:
0001722E 0C40 0010                  		cmpi.w	#$10,d0
00017232 6400                       		bcc.s	locret_1675C
00017234 3229 000C                  		move.w	$C(a1),d1
00017238 9268 000C                  		sub.w	$C(a0),d1
0001723C 0641 0020                  		addi.w	#$20,d1
00017240 0C41 0040                  		cmpi.w	#$40,d1
00017244 6400                       		bcc.s	locret_1675C
00017246 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001724A 6600                       		bne.s	locret_1675C
0001724C 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017252 6600                       		bne.s	loc_1670E
00017254 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001725A 6500                       		bcs.s	locret_1675C
0001725C                            
0001725C                            loc_1670E:
0001725C 5428 0024                  		addq.b	#2,$24(a0)
00017260 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017266 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001726C 337C 0800 0014             		move.w	#$800,$14(a1)
00017272 337C 0000 0010             		move.w	#0,$10(a1)
00017278 337C 0000 0012             		move.w	#0,$12(a1)
0001727E 08A8 0005 0022             		bclr	#5,$22(a0)
00017284 08A9 0005 0022             		bclr	#5,$22(a1)
0001728A 08E9 0001 0022             		bset	#1,$22(a1)
00017290 3368 0008 0008             		move.w	8(a0),8(a1)
00017296 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001729C 4228 0032                  		clr.b	$32(a0)
000172A0 303C 00BE                  		move.w	#$BE,d0
000172A4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000172AA                            
000172AA                            locret_1675C:
000172AA 4E75                       		rts	
000172AC                            ; ===========================================================================
000172AC                            
000172AC                            loc_1675E:				; XREF: Obj72_Index
000172AC 43F8 D000                  		lea	($FFFFD000).w,a1
000172B0 1028 0032                  		move.b	$32(a0),d0
000172B4 5428 0032                  		addq.b	#2,$32(a0)
000172B8 4EB9 0000 2D3A             		jsr	(CalcSine).l
000172BE EA40                       		asr.w	#5,d0
000172C0 3428 000C                  		move.w	$C(a0),d2
000172C4 9440                       		sub.w	d0,d2
000172C6 3342 000C                  		move.w	d2,$C(a1)
000172CA 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000172D0 6600                       		bne.s	locret_16796
000172D2 6100 0000                  		bsr.w	sub_1681C
000172D6 5428 0024                  		addq.b	#2,$24(a0)
000172DA 303C 00BC                  		move.w	#$BC,d0
000172DE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play teleport sound
000172E4                            
000172E4                            locret_16796:
000172E4 4E75                       		rts	
000172E6                            ; ===========================================================================
000172E6                            
000172E6                            loc_16798:				; XREF: Obj72_Index
000172E6 588F                       		addq.l	#4,sp
000172E8 43F8 D000                  		lea	($FFFFD000).w,a1
000172EC 5328 002E                  		subq.b	#1,$2E(a0)
000172F0 6A00                       		bpl.s	loc_167DA
000172F2 3368 0036 0008             		move.w	$36(a0),8(a1)
000172F8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172FE 7200                       		moveq	#0,d1
00017300 1228 003A                  		move.b	$3A(a0),d1
00017304 5801                       		addq.b	#4,d1
00017306 B228 003B                  		cmp.b	$3B(a0),d1
0001730A 6500                       		bcs.s	loc_167C2
0001730C 7200                       		moveq	#0,d1
0001730E 6000                       		bra.s	loc_16800
00017310                            ; ===========================================================================
00017310                            
00017310                            loc_167C2:
00017310 1141 003A                  		move.b	d1,$3A(a0)
00017314 2468 003C                  		movea.l	$3C(a0),a2
00017318 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001731E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017324 6000 0000                  		bra.w	sub_1681C
00017328                            ; ===========================================================================
00017328                            
00017328                            loc_167DA:
00017328 2429 0008                  		move.l	8(a1),d2
0001732C 2629 000C                  		move.l	$C(a1),d3
00017330 3029 0010                  		move.w	$10(a1),d0
00017334 48C0                       		ext.l	d0
00017336 E180                       		asl.l	#8,d0
00017338 D480                       		add.l	d0,d2
0001733A 3029 0012                  		move.w	$12(a1),d0
0001733E 48C0                       		ext.l	d0
00017340 E180                       		asl.l	#8,d0
00017342 D680                       		add.l	d0,d3
00017344 2342 0008                  		move.l	d2,8(a1)
00017348 2343 000C                  		move.l	d3,$C(a1)
0001734C 4E75                       		rts	
0001734E                            ; ===========================================================================
0001734E                            
0001734E                            loc_16800:
0001734E 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017354 4228 0024                  		clr.b	$24(a0)
00017358 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001735C 337C 0000 0010             		move.w	#0,$10(a1)
00017362 337C 0200 0012             		move.w	#$200,$12(a1)
00017368 4E75                       		rts	
0001736A                            
0001736A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001736A                            
0001736A                            
0001736A                            sub_1681C:
0001736A 7000                       		moveq	#0,d0
0001736C 343C 1000                  		move.w	#$1000,d2
00017370 3028 0036                  		move.w	$36(a0),d0
00017374 9069 0008                  		sub.w	8(a1),d0
00017378 6C00                       		bge.s	loc_16830
0001737A 4440                       		neg.w	d0
0001737C 4442                       		neg.w	d2
0001737E                            
0001737E                            loc_16830:
0001737E 7200                       		moveq	#0,d1
00017380 363C 1000                  		move.w	#$1000,d3
00017384 3228 0038                  		move.w	$38(a0),d1
00017388 9269 000C                  		sub.w	$C(a1),d1
0001738C 6C00                       		bge.s	loc_16844
0001738E 4441                       		neg.w	d1
00017390 4443                       		neg.w	d3
00017392                            
00017392                            loc_16844:
00017392 B240                       		cmp.w	d0,d1
00017394 6500                       		bcs.s	loc_1687A
00017396 7200                       		moveq	#0,d1
00017398 3228 0038                  		move.w	$38(a0),d1
0001739C 9269 000C                  		sub.w	$C(a1),d1
000173A0 4841                       		swap	d1
000173A2 83C3                       		divs.w	d3,d1
000173A4 7000                       		moveq	#0,d0
000173A6 3028 0036                  		move.w	$36(a0),d0
000173AA 9069 0008                  		sub.w	8(a1),d0
000173AE 6700                       		beq.s	loc_16866
000173B0 4840                       		swap	d0
000173B2 81C1                       		divs.w	d1,d0
000173B4                            
000173B4                            loc_16866:
000173B4 3340 0010                  		move.w	d0,$10(a1)
000173B8 3343 0012                  		move.w	d3,$12(a1)
000173BC 4A41                       		tst.w	d1
000173BE 6A00                       		bpl.s	loc_16874
000173C0 4441                       		neg.w	d1
000173C2                            
000173C2                            loc_16874:
000173C2 3141 002E                  		move.w	d1,$2E(a0)
000173C6 4E75                       		rts	
000173C8                            ; ===========================================================================
000173C8                            
000173C8                            loc_1687A:
000173C8 7000                       		moveq	#0,d0
000173CA 3028 0036                  		move.w	$36(a0),d0
000173CE 9069 0008                  		sub.w	8(a1),d0
000173D2 4840                       		swap	d0
000173D4 81C2                       		divs.w	d2,d0
000173D6 7200                       		moveq	#0,d1
000173D8 3228 0038                  		move.w	$38(a0),d1
000173DC 9269 000C                  		sub.w	$C(a1),d1
000173E0 6700                       		beq.s	loc_16898
000173E2 4841                       		swap	d1
000173E4 83C0                       		divs.w	d0,d1
000173E6                            
000173E6                            loc_16898:
000173E6 3341 0012                  		move.w	d1,$12(a1)
000173EA 3342 0010                  		move.w	d2,$10(a1)
000173EE 4A40                       		tst.w	d0
000173F0 6A00                       		bpl.s	loc_168A6
000173F2 4440                       		neg.w	d0
000173F4                            
000173F4                            loc_168A6:
000173F4 3140 002E                  		move.w	d0,$2E(a0)
000173F8 4E75                       		rts	
000173FA                            ; End of function sub_1681C
000173FA                            
000173FA                            ; ===========================================================================
000173FA 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017400 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017406 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001740A 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017410 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017416 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001741C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017422 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017428 0884 0298 0894             		dc.w $884, $298, $894
0001742E 0270 0894 0190             		dc.w $270, $894, $190
00017434 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001743A 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017440 1184 0498 1158             		dc.w $1184, $498, $1158
00017446 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001744C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017452 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017458 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001745E 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017464 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001746A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017470 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017476 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001747C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017482                            ; ===========================================================================
00017482                            ; ---------------------------------------------------------------------------
00017482                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017482                            ; ---------------------------------------------------------------------------
00017482                            
00017482                            Obj78:					; XREF: Obj_Index
00017482 7000                       		moveq	#0,d0
00017484 1028 0024                  		move.b	$24(a0),d0
00017488 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001748C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017490                            ; ===========================================================================
00017490 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017492 0000                       		dc.w Obj78_Action-Obj78_Index
00017494 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017496 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017498 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001749A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001749C 0000                       		dc.w loc_16CC0-Obj78_Index
0001749E                            ; ===========================================================================
0001749E                            
0001749E                            locret_16950:
0001749E 4E75                       		rts	
000174A0                            ; ===========================================================================
000174A0                            
000174A0                            Obj78_Main:				; XREF: Obj78_Index
000174A0 117C 0007 0016             		move.b	#7,$16(a0)
000174A6 117C 0008 0017             		move.b	#8,$17(a0)
000174AC 4EB9 0000 DFBA             		jsr	ObjectFall
000174B2 4EBA E4AA                  		jsr	ObjHitFloor
000174B6 4A41                       		tst.w	d1
000174B8 6AE4                       		bpl.s	locret_16950
000174BA D368 000C                  		add.w	d1,$C(a0)
000174BE 4268 0012                  		clr.w	$12(a0)
000174C2 5428 0024                  		addq.b	#2,$24(a0)
000174C6 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000174CE 317C 22B0 0002             		move.w	#$22B0,2(a0)
000174D4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000174DA 6700                       		beq.s	loc_16996
000174DC 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000174E2                            
000174E2                            loc_16996:
000174E2 0228 0003 0001             		andi.b	#3,1(a0)
000174E8 0028 0004 0001             		ori.b	#4,1(a0)
000174EE 1168 0001 0022             		move.b	1(a0),$22(a0)
000174F4 117C 0004 0018             		move.b	#4,$18(a0)
000174FA 117C 0008 0019             		move.b	#8,$19(a0)
00017500 117C 000B 0020             		move.b	#$B,$20(a0)
00017506 3428 0008                  		move.w	8(a0),d2
0001750A 7A0C                       		moveq	#$C,d5
0001750C 0828 0000 0022             		btst	#0,$22(a0)
00017512 6700                       		beq.s	loc_169CA
00017514 4445                       		neg.w	d5
00017516                            
00017516                            loc_169CA:
00017516 1C3C 0004                  		move.b	#4,d6
0001751A 7600                       		moveq	#0,d3
0001751C 7804                       		moveq	#4,d4
0001751E 2448                       		movea.l	a0,a2
00017520 7202                       		moveq	#2,d1
00017522                            
00017522                            Obj78_LoadBody:
00017522 4EB9 0000 E4EE             		jsr	SingleObjLoad2
00017528 6600                       		bne.s	Obj78_QuitLoad
0001752A 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001752E 1346 0024                  		move.b	d6,$24(a1)
00017532 5406                       		addq.b	#2,d6
00017534 2368 0004 0004             		move.l	4(a0),4(a1)
0001753A 3368 0002 0002             		move.w	2(a0),2(a1)
00017540 137C 0005 0018             		move.b	#5,$18(a1)
00017546 137C 0008 0019             		move.b	#8,$19(a1)
0001754C 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017552 D445                       		add.w	d5,d2
00017554 3342 0008                  		move.w	d2,8(a1)
00017558 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001755E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017564 1368 0022 0001             		move.b	$22(a0),1(a1)
0001756A 137C 0008 001A             		move.b	#8,$1A(a1)
00017570 234A 003C                  		move.l	a2,$3C(a1)
00017574 1344 003C                  		move.b	d4,$3C(a1)
00017578 5804                       		addq.b	#4,d4
0001757A 2449                       		movea.l	a1,a2
0001757C                            
0001757C                            Obj78_QuitLoad:
0001757C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017580                            
00017580 117C 0007 002A             		move.b	#7,$2A(a0)
00017586 4228 003C                  		clr.b	$3C(a0)
0001758A                            
0001758A                            Obj78_Action:				; XREF: Obj78_Index
0001758A 4A28 0022                  		tst.b	$22(a0)
0001758E 6B00 0000                  		bmi.w	loc_16C96
00017592 7000                       		moveq	#0,d0
00017594 1028 0025                  		move.b	$25(a0),d0
00017598 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001759C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000175A0 1228 002B                  		move.b	$2B(a0),d1
000175A4 6A00                       		bpl.s	Obj78_Display
000175A6 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000175AC 1028 0026                  		move.b	$26(a0),d0
000175B0 0240 007F                  		andi.w	#$7F,d0
000175B4 5828 0026                  		addq.b	#4,$26(a0)
000175B8 1031 0000                  		move.b	(a1,d0.w),d0
000175BC 6A00                       		bpl.s	Obj78_AniHead
000175BE 08A8 0007 002B             		bclr	#7,$2B(a0)
000175C4 6000                       		bra.s	Obj78_Display
000175C6                            ; ===========================================================================
000175C6                            
000175C6                            Obj78_AniHead:
000175C6 0201 0010                  		andi.b	#$10,d1
000175CA D001                       		add.b	d1,d0
000175CC 1140 001A                  		move.b	d0,$1A(a0)
000175D0                            
000175D0                            Obj78_Display:
000175D0 3028 0008                  		move.w	8(a0),d0
000175D4 0240 FF80                  		andi.w	#$FF80,d0
000175D8 3238 F700                  		move.w	($FFFFF700).w,d1
000175DC 0441 0080                  		subi.w	#$80,d1
000175E0 0241 FF80                  		andi.w	#$FF80,d1
000175E4 9041                       		sub.w	d1,d0
000175E6 0C40 0280                  		cmpi.w	#$280,d0
000175EA 6200 0000                  		bhi.w	Obj78_ChkGone
000175EE 4EF9 0000 E052             		jmp	DisplaySprite
000175F4                            ; ===========================================================================
000175F4                            
000175F4                            Obj78_ChkGone:
000175F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175F8 7000                       		moveq	#0,d0
000175FA 1028 0023                  		move.b	$23(a0),d0
000175FE 6700                       		beq.s	loc_16ABC
00017600 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017606                            
00017606                            loc_16ABC:
00017606 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001760C 4E75                       		rts	
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            Obj78_Delete:				; XREF: Obj78_Index
0001760E 4EF9 0000 E08E             		jmp	DeleteObject
00017614                            ; ===========================================================================
00017614 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017616 0000                       		dc.w loc_16B02-Obj78_Index2
00017618                            ; ===========================================================================
00017618                            
00017618                            Obj78_Move:				; XREF: Obj78_Index2
00017618 5328 002A                  		subq.b	#1,$2A(a0)
0001761C 6B00                       		bmi.s	Obj78_Move2
0001761E 4E75                       		rts	
00017620                            ; ===========================================================================
00017620                            
00017620                            Obj78_Move2:
00017620 5428 0025                  		addq.b	#2,$25(a0)
00017624 117C 0010 002A             		move.b	#$10,$2A(a0)
0001762A 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017630 317C 0040 0014             		move.w	#$40,$14(a0)
00017636 0868 0004 002B             		bchg	#4,$2B(a0)
0001763C 6600                       		bne.s	loc_16AFC
0001763E 4268 0010                  		clr.w	$10(a0)
00017642 4468 0014                  		neg.w	$14(a0)
00017646                            
00017646                            loc_16AFC:
00017646 08E8 0007 002B             		bset	#7,$2B(a0)
0001764C                            
0001764C                            loc_16B02:				; XREF: Obj78_Index2
0001764C 5328 002A                  		subq.b	#1,$2A(a0)
00017650 6B00                       		bmi.s	loc_16B5E
00017652 2F28 0008                  		move.l	8(a0),-(sp)
00017656 2428 0008                  		move.l	8(a0),d2
0001765A 3028 0010                  		move.w	$10(a0),d0
0001765E 0828 0000 0022             		btst	#0,$22(a0)
00017664 6700                       		beq.s	loc_16B1E
00017666 4440                       		neg.w	d0
00017668                            
00017668                            loc_16B1E:
00017668 48C0                       		ext.l	d0
0001766A E180                       		asl.l	#8,d0
0001766C D480                       		add.l	d0,d2
0001766E 2142 0008                  		move.l	d2,8(a0)
00017672 4EBA E2EA                  		jsr	ObjHitFloor
00017676 241F                       		move.l	(sp)+,d2
00017678 0C41 FFF8                  		cmpi.w	#-8,d1
0001767C 6D00                       		blt.s	loc_16B70
0001767E 0C41 000C                  		cmpi.w	#$C,d1
00017682 6C00                       		bge.s	loc_16B70
00017684 D368 000C                  		add.w	d1,$C(a0)
00017688 4842                       		swap	d2
0001768A B468 0008                  		cmp.w	8(a0),d2
0001768E 6700                       		beq.s	locret_16B5C
00017690 7000                       		moveq	#0,d0
00017692 1028 003C                  		move.b	$3C(a0),d0
00017696 5228 003C                  		addq.b	#1,$3C(a0)
0001769A 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176A0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000176A4                            
000176A4                            locret_16B5C:
000176A4 4E75                       		rts	
000176A6                            ; ===========================================================================
000176A6                            
000176A6                            loc_16B5E:
000176A6 5528 0025                  		subq.b	#2,$25(a0)
000176AA 117C 0007 002A             		move.b	#7,$2A(a0)
000176B0 317C 0000 0010             		move.w	#0,$10(a0)
000176B6 4E75                       		rts	
000176B8                            ; ===========================================================================
000176B8                            
000176B8                            loc_16B70:
000176B8 2142 0008                  		move.l	d2,8(a0)
000176BC 0868 0000 0022             		bchg	#0,$22(a0)
000176C2 1168 0022 0001             		move.b	$22(a0),1(a0)
000176C8 7000                       		moveq	#0,d0
000176CA 1028 003C                  		move.b	$3C(a0),d0
000176CE 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000176D4 5228 003C                  		addq.b	#1,$3C(a0)
000176D8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176DE 4E75                       		rts	
000176E0                            ; ===========================================================================
000176E0                            
000176E0                            Obj78_BodySeg2:				; XREF: Obj78_Index
000176E0 2268 003C                  		movea.l	$3C(a0),a1
000176E4 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176EA 6A00                       		bpl.s	Obj78_BodySeg1
000176EC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176F2 1028 0026                  		move.b	$26(a0),d0
000176F6 0240 007F                  		andi.w	#$7F,d0
000176FA 5828 0026                  		addq.b	#4,$26(a0)
000176FE 4A31 0004                  		tst.b	4(a1,d0.w)
00017702 6A00                       		bpl.s	Obj78_AniBody
00017704 5828 0026                  		addq.b	#4,$26(a0)
00017708                            
00017708                            Obj78_AniBody:
00017708 1031 0000                  		move.b	(a1,d0.w),d0
0001770C 5000                       		addq.b	#8,d0
0001770E 1140 001A                  		move.b	d0,$1A(a0)
00017712                            
00017712                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017712 2268 003C                  		movea.l	$3C(a0),a1
00017716 4A28 0022                  		tst.b	$22(a0)
0001771A 6B00 0000                  		bmi.w	loc_16C90
0001771E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017724 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001772A 6700 0000                  		beq.w	loc_16C64
0001772E 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017734 3029 0010                  		move.w	$10(a1),d0
00017738 D069 0014                  		add.w	$14(a1),d0
0001773C 3140 0010                  		move.w	d0,$10(a0)
00017740 2428 0008                  		move.l	8(a0),d2
00017744 2602                       		move.l	d2,d3
00017746 3028 0010                  		move.w	$10(a0),d0
0001774A 0828 0000 0022             		btst	#0,$22(a0)
00017750 6700                       		beq.s	loc_16C0C
00017752 4440                       		neg.w	d0
00017754                            
00017754                            loc_16C0C:
00017754 48C0                       		ext.l	d0
00017756 E180                       		asl.l	#8,d0
00017758 D480                       		add.l	d0,d2
0001775A 2142 0008                  		move.l	d2,8(a0)
0001775E 4843                       		swap	d3
00017760 B668 0008                  		cmp.w	8(a0),d3
00017764 6700                       		beq.s	loc_16C64
00017766 7000                       		moveq	#0,d0
00017768 1028 003C                  		move.b	$3C(a0),d0
0001776C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017770 0C01 0080                  		cmpi.b	#-$80,d1
00017774 6600                       		bne.s	loc_16C50
00017776 4843                       		swap	d3
00017778 2143 0008                  		move.l	d3,8(a0)
0001777C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017780 0868 0000 0022             		bchg	#0,$22(a0)
00017786 1168 0022 0001             		move.b	$22(a0),1(a0)
0001778C 5228 003C                  		addq.b	#1,$3C(a0)
00017790 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017796 6000                       		bra.s	loc_16C64
00017798                            ; ===========================================================================
00017798                            
00017798                            loc_16C50:
00017798 4881                       		ext.w	d1
0001779A D368 000C                  		add.w	d1,$C(a0)
0001779E 5228 003C                  		addq.b	#1,$3C(a0)
000177A2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000177A8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000177AC                            
000177AC                            loc_16C64:
000177AC 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000177B2 6700                       		beq.s	loc_16C90
000177B4 0C11 0027                  		cmpi.b	#$27,0(a1)
000177B8 6700                       		beq.s	loc_16C7C
000177BA 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000177C0 6600                       		bne.s	loc_16C82
000177C2                            
000177C2                            loc_16C7C:
000177C2 117C 000A 0024             		move.b	#$A,$24(a0)
000177C8                            
000177C8                            loc_16C82:
000177C8 4EF9 0000 E052             		jmp	DisplaySprite
000177CE                            
000177CE                            ; ===========================================================================
000177CE FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000177D6                            ; ===========================================================================
000177D6                            
000177D6                            loc_16C90:
000177D6 08E9 0007 0022             		bset	#7,$22(a1)
000177DC                            
000177DC                            loc_16C96:
000177DC 7000                       		moveq	#0,d0
000177DE 1028 0024                  		move.b	$24(a0),d0
000177E2 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000177E6 0828 0000 0022             		btst	#0,$22(a0)
000177EC 6700                       		beq.s	loc_16CAA
000177EE 4440                       		neg.w	d0
000177F0                            
000177F0                            loc_16CAA:
000177F0 3140 0010                  		move.w	d0,$10(a0)
000177F4 317C FC00 0012             		move.w	#-$400,$12(a0)
000177FA 117C 000C 0024             		move.b	#$C,$24(a0)
00017800 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017806                            
00017806                            loc_16CC0:				; XREF: Obj78_Index
00017806 4EB9 0000 DFBA             		jsr	ObjectFall
0001780C 4A68 0012                  		tst.w	$12(a0)
00017810 6B00                       		bmi.s	loc_16CE0
00017812 4EBA E14A                  		jsr	ObjHitFloor
00017816 4A41                       		tst.w	d1
00017818 6A00                       		bpl.s	loc_16CE0
0001781A D368 000C                  		add.w	d1,$C(a0)
0001781E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017824                            
00017824                            loc_16CE0:
00017824 4A28 0001                  		tst.b	1(a0)
00017828 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001782C 4EF9 0000 E052             		jmp	DisplaySprite
00017832                            ; ===========================================================================
00017832                            Ani_obj78:
00017832                            	include "_anim\obj78.asm"
00017832                            ; ---------------------------------------------------------------------------
00017832                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017832                            ; ---------------------------------------------------------------------------
00017832 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017842 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017852 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017862 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017872 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017882 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017892 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000178A2 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000178B2                            	even
000178B2                            	even
000178B2                            
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            Map_obj78:
000178B2                            	include "_maps\obj78.asm"
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178B2                            ; ---------------------------------------------------------------------------
000178B2 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000178B6 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000178BA 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000178BE 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000178C2 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000178C6 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000178CA 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000178CE 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000178D2 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000178D6 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000178DA 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000178DE 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000178E2 01                         byte_16D9E:	dc.b 1
000178E3 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000178E8 01                         byte_16DA4:	dc.b 1
000178E9 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000178EE 01                         byte_16DAA:	dc.b 1
000178EF F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178F4 01                         byte_16DB0:	dc.b 1
000178F5 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178FA 01                         byte_16DB6:	dc.b 1
000178FB EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017900 01                         byte_16DBC:	dc.b 1
00017901 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017906 01                         byte_16DC2:	dc.b 1
00017907 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001790C 01                         byte_16DC8:	dc.b 1
0001790D EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017912 01                         byte_16DCE:	dc.b 1
00017913 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017918 01                         byte_16DD4:	dc.b 1
00017919 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001791E 01                         byte_16DDA:	dc.b 1
0001791F F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017924 01                         byte_16DE0:	dc.b 1
00017925 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001792A 01                         byte_16DE6:	dc.b 1
0001792B F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017930 01                         byte_16DEC:	dc.b 1
00017931 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017936 01                         byte_16DF2:	dc.b 1
00017937 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001793C 01                         byte_16DF8:	dc.b 1
0001793D F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017942 01                         byte_16DFE:	dc.b 1
00017943 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017948 01                         byte_16E04:	dc.b 1
00017949 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001794E 01                         byte_16E0A:	dc.b 1
0001794F F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017954 01                         byte_16E10:	dc.b 1
00017955 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001795A 01                         byte_16E16:	dc.b 1
0001795B EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017960 01                         byte_16E1C:	dc.b 1
00017961 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017966 01                         byte_16E22:	dc.b 1
00017967 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001796C 01                         byte_16E28:	dc.b 1
0001796D EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017972                            		even
00017972                            		even
00017972                            
00017972                            ; ===========================================================================
00017972                            ; ---------------------------------------------------------------------------
00017972                            ; Object 79 - lamppost
00017972                            ; ---------------------------------------------------------------------------
00017972                            
00017972                            Obj79:					; XREF: Obj_Index
00017972 7000                       		moveq	#0,d0
00017974 1028 0024                  		move.b	$24(a0),d0
00017978 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001797C 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017980 4EFA 8778                  		jmp	MarkObjGone
00017984                            ; ===========================================================================
00017984 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017986 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017988 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001798A 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001798C                            ; ===========================================================================
0001798C                            
0001798C                            Obj79_Main:				; XREF: Obj79_Index
0001798C 5428 0024                  		addq.b	#2,$24(a0)
00017990 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017998 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001799E 117C 0004 0001             		move.b	#4,1(a0)
000179A4 117C 0008 0019             		move.b	#8,$19(a0)
000179AA 117C 0005 0018             		move.b	#5,$18(a0)
000179B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179B4 7000                       		moveq	#0,d0
000179B6 1028 0023                  		move.b	$23(a0),d0
000179BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000179C0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000179C6 6600                       		bne.s	Obj79_RedLamp
000179C8 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179CC 0201 007F                  		andi.b	#$7F,d1
000179D0 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000179D4 0202 007F                  		andi.b	#$7F,d2
000179D8 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000179DA 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000179DC                            
000179DC                            Obj79_RedLamp:
000179DC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179E2 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000179E8 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000179EE 4E75                       		rts	
000179F0                            ; ===========================================================================
000179F0                            
000179F0                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179F0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179F4 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179FC 6B00 0000                  		bmi.w	locret_16F90
00017A00 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017A04 0201 007F                  		andi.b	#$7F,d1
00017A08 1428 0028                  		move.b	$28(a0),d2
00017A0C 0202 007F                  		andi.b	#$7F,d2
00017A10 B202                       		cmp.b	d2,d1
00017A12 6500                       		bcs.s	Obj79_HitLamp
00017A14 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A18 7000                       		moveq	#0,d0
00017A1A 1028 0023                  		move.b	$23(a0),d0
00017A1E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A24 117C 0004 0024             		move.b	#4,$24(a0)
00017A2A 117C 0003 001A             		move.b	#3,$1A(a0)
00017A30 6000 0000                  		bra.w	locret_16F90
00017A34                            ; ===========================================================================
00017A34                            
00017A34                            Obj79_HitLamp:
00017A34 3038 D008                  		move.w	($FFFFD008).w,d0
00017A38 9068 0008                  		sub.w	8(a0),d0
00017A3C 5040                       		addq.w	#8,d0
00017A3E 0C40 0010                  		cmpi.w	#$10,d0
00017A42 6400 0000                  		bcc.w	locret_16F90
00017A46 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A4A 9068 000C                  		sub.w	$C(a0),d0
00017A4E 0640 0040                  		addi.w	#$40,d0
00017A52 0C40 0068                  		cmpi.w	#$68,d0
00017A56 6400                       		bcc.s	locret_16F90
00017A58 303C 00A1                  		move.w	#$A1,d0
00017A5C 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A62 5428 0024                  		addq.b	#2,$24(a0)
00017A66 4EB9 0000 E4D8             		jsr	SingleObjLoad
00017A6C 6600                       		bne.s	loc_16F76
00017A6E 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A72 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A78 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A7E 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A84 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A8A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A92 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A98 137C 0004 0001             		move.b	#4,1(a1)
00017A9E 137C 0008 0019             		move.b	#8,$19(a1)
00017AA4 137C 0004 0018             		move.b	#4,$18(a1)
00017AAA 137C 0002 001A             		move.b	#2,$1A(a1)
00017AB0 337C 0020 0036             		move.w	#$20,$36(a1)
00017AB6                            
00017AB6                            loc_16F76:
00017AB6 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017ABC 6100 0000                  		bsr.w	Obj79_StoreInfo
00017AC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AC4 7000                       		moveq	#0,d0
00017AC6 1028 0023                  		move.b	$23(a0),d0
00017ACA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017AD0                            
00017AD0                            locret_16F90:
00017AD0 4E75                       		rts	
00017AD2                            ; ===========================================================================
00017AD2                            
00017AD2                            Obj79_AfterHit:				; XREF: Obj79_Index
00017AD2 4E75                       		rts	
00017AD4                            ; ===========================================================================
00017AD4                            
00017AD4                            Obj79_Twirl:				; XREF: Obj79_Index
00017AD4 5368 0036                  		subq.w	#1,$36(a0)
00017AD8 6A00                       		bpl.s	loc_16FA0
00017ADA 117C 0004 0024             		move.b	#4,$24(a0)
00017AE0                            
00017AE0                            loc_16FA0:
00017AE0 1028 0026                  		move.b	$26(a0),d0
00017AE4 0428 0010 0026             		subi.b	#$10,$26(a0)
00017AEA 0400 0040                  		subi.b	#$40,d0
00017AEE 4EB9 0000 2D3A             		jsr	(CalcSine).l
00017AF4 C3FC 0C00                  		muls.w	#$C00,d1
00017AF8 4841                       		swap	d1
00017AFA D268 0030                  		add.w	$30(a0),d1
00017AFE 3141 0008                  		move.w	d1,8(a0)
00017B02 C1FC 0C00                  		muls.w	#$C00,d0
00017B06 4840                       		swap	d0
00017B08 D068 0032                  		add.w	$32(a0),d0
00017B0C 3140 000C                  		move.w	d0,$C(a0)
00017B10 4E75                       		rts	
00017B12                            ; ===========================================================================
00017B12                            ; ---------------------------------------------------------------------------
00017B12                            ; Subroutine to	store information when you hit a lamppost
00017B12                            ; ---------------------------------------------------------------------------
00017B12                            
00017B12                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017B12 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017B18 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017B1E 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017B24 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017B2A 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017B30 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017B36 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017B3C 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017B42 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017B48 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017B4E 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B54 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B5A 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B60 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B66 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B6C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B72 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B78 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B7E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B84 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B8A 4E75                       		rts	
00017B8C                            
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C                            
00017B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B8C                            
00017B8C                            
00017B8C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B8C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B92 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B98 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B9E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017BA4 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017BAA 4278 FE20                  		clr.w	($FFFFFE20).w
00017BAE 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017BB2 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017BB8 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017BBE 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017BC2 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017BC8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BCE 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017BD4 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017BDA 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017BE0 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017BE6 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017BEC 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BF2 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BF8 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BFE 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017C04 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017C0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017C10 6600                       		bne.s	loc_170E4
00017C12 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017C18 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017C1E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017C24                            
00017C24                            loc_170E4:
00017C24 4A38 FE30                  		tst.b	($FFFFFE30).w
00017C28 6A00                       		bpl.s	locret_170F6
00017C2A 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017C2E 0440 00A0                  		subi.w	#$A0,d0
00017C32 31C0 F728                  		move.w	d0,($FFFFF728).w
00017C36                            
00017C36                            locret_170F6:
00017C36 4E75                       		rts	
00017C38                            ; End of function Obj79_LoadInfo
00017C38                            
00017C38                            ; ===========================================================================
00017C38                            ; ---------------------------------------------------------------------------
00017C38                            ; Sprite mappings - lamppost
00017C38                            ; ---------------------------------------------------------------------------
00017C38                            Map_obj79:
00017C38                            	include "_maps\obj79.asm"
00017C38                            ; ---------------------------------------------------------------------------
00017C38                            ; Sprite mappings - lamppost
00017C38                            ; ---------------------------------------------------------------------------
00017C38 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017C3C 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017C40 06                         byte_17100:	dc.b 6
00017C41 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C46 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C4B F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C50 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C55 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C5A D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C5F 04                         byte_1711F:	dc.b 4
00017C60 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C65 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C6A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C6F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C74 02                         byte_17134:	dc.b 2
00017C75 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C7A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C7F 06                         byte_1713F:	dc.b 6
00017C80 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C85 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C8A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C8F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C94 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C99 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C9E                            		even
00017C9E                            		even
00017C9E                            
00017C9E                            ; ===========================================================================
00017C9E                            ; ---------------------------------------------------------------------------
00017C9E                            ; Object 7D - hidden points at the end of a level
00017C9E                            ; ---------------------------------------------------------------------------
00017C9E                            
00017C9E                            Obj7D:					; XREF: Obj_Index
00017C9E 7000                       		moveq	#0,d0
00017CA0 1028 0024                  		move.b	$24(a0),d0
00017CA4 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017CA8 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017CAC                            ; ===========================================================================
00017CAC 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017CAE 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017CB0                            ; ===========================================================================
00017CB0                            
00017CB0                            Obj7D_Main:				; XREF: Obj7D_Index
00017CB0 7410                       		moveq	#$10,d2
00017CB2 3602                       		move.w	d2,d3
00017CB4 D643                       		add.w	d3,d3
00017CB6 43F8 D000                  		lea	($FFFFD000).w,a1
00017CBA 3029 0008                  		move.w	8(a1),d0
00017CBE 9068 0008                  		sub.w	8(a0),d0
00017CC2 D042                       		add.w	d2,d0
00017CC4 B043                       		cmp.w	d3,d0
00017CC6 6400                       		bcc.s	Obj7D_ChkDel
00017CC8 3229 000C                  		move.w	$C(a1),d1
00017CCC 9268 000C                  		sub.w	$C(a0),d1
00017CD0 D242                       		add.w	d2,d1
00017CD2 B243                       		cmp.w	d3,d1
00017CD4 6400                       		bcc.s	Obj7D_ChkDel
00017CD6 4A78 FE08                  		tst.w	($FFFFFE08).w
00017CDA 6600                       		bne.s	Obj7D_ChkDel
00017CDC 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017CE0 6600                       		bne.s	Obj7D_ChkDel
00017CE2 5428 0024                  		addq.b	#2,$24(a0)
00017CE6 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017CEE 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CF4 0028 0004 0001             		ori.b	#4,1(a0)
00017CFA 117C 0000 0018             		move.b	#0,$18(a0)
00017D00 117C 0010 0019             		move.b	#$10,$19(a0)
00017D06 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017D0C 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017D12 303C 00C9                  		move.w	#$C9,d0
00017D16 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017D1C 7000                       		moveq	#0,d0
00017D1E 1028 0028                  		move.b	$28(a0),d0
00017D22 D040                       		add.w	d0,d0
00017D24 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017D28 4EB9 0000 0000             		jsr	AddPoints
00017D2E                            
00017D2E                            Obj7D_ChkDel:
00017D2E 3028 0008                  		move.w	8(a0),d0
00017D32 0240 FF80                  		andi.w	#$FF80,d0
00017D36 3238 F700                  		move.w	($FFFFF700).w,d1
00017D3A 0441 0080                  		subi.w	#$80,d1
00017D3E 0241 FF80                  		andi.w	#$FF80,d1
00017D42 9041                       		sub.w	d1,d0
00017D44 0C40 0280                  		cmpi.w	#$280,d0
00017D48 6200                       		bhi.s	Obj7D_Delete
00017D4A 4E75                       		rts	
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            Obj7D_Delete:
00017D4C 4EF9 0000 E08E             		jmp	DeleteObject
00017D52                            ; ===========================================================================
00017D52 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D54 03E8                       		dc.w 1000
00017D56 0064                       		dc.w 100
00017D58 0001                       		dc.w 1
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D5A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D5E 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D60 3028 0008                  		move.w	8(a0),d0
00017D64 0240 FF80                  		andi.w	#-$80,d0
00017D68 3238 F700                  		move.w	($FFFFF700).w,d1
00017D6C 0441 0080                  		subi.w	#$80,d1
00017D70 0241 FF80                  		andi.w	#-$80,d1
00017D74 9041                       		sub.w	d1,d0
00017D76 0C40 0280                  		cmpi.w	#$280,d0
00017D7A 6200                       		bhi.s	Obj7D_Delete2
00017D7C 4EF9 0000 E052             		jmp	DisplaySprite
00017D82                            ; ===========================================================================
00017D82                            
00017D82                            Obj7D_Delete2:
00017D82 4EF9 0000 E08E             		jmp	DeleteObject
00017D88                            ; ===========================================================================
00017D88                            ; ---------------------------------------------------------------------------
00017D88                            ; Sprite mappings - hidden points at the end of	a level
00017D88                            ; ---------------------------------------------------------------------------
00017D88                            Map_obj7D:
00017D88                            	include "_maps\obj7D.asm"
00017D88                            ; ---------------------------------------------------------------------------
00017D88                            ; Sprite mappings - hidden points at the end of	a level
00017D88                            ; ---------------------------------------------------------------------------
00017D88 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D8C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D90 00                         byte_17250:	dc.b 0
00017D91 01                         byte_17251:	dc.b 1
00017D92 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D97 01                         byte_17257:	dc.b 1
00017D98 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D9D 01                         byte_1725D:	dc.b 1
00017D9E F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017DA4 00                         		even
00017DA4 00                         		even
00017DA4                            
00017DA4                            ; ===========================================================================
00017DA4                            ; ---------------------------------------------------------------------------
00017DA4                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017DA4                            ; ---------------------------------------------------------------------------
00017DA4                            
00017DA4                            Obj8A:					; XREF: Obj_Index
00017DA4 7000                       		moveq	#0,d0
00017DA6 1028 0024                  		move.b	$24(a0),d0
00017DAA 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017DAE 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017DB2                            ; ===========================================================================
00017DB2 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017DB4 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017DB6                            ; ===========================================================================
00017DB6                            
00017DB6                            Obj8A_Main:				; XREF: Obj8A_Index
00017DB6 5428 0024                  		addq.b	#2,$24(a0)
00017DBA 317C 0120 0008             		move.w	#$120,8(a0)
00017DC0 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017DC6 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017DCE 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017DD4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017DD8 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017DDC 117C 0000 0001             		move.b	#0,1(a0)
00017DE2 117C 0000 0018             		move.b	#0,$18(a0)
00017DE8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017DEE 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DF0 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DF6 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DFC 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017E00 6700                       		beq.s	Obj8A_Display	; if not, branch
00017E02 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017E08 6600                       		bne.s	Obj8A_Display	; if not, branch
00017E0A 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017E10 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017E16 4EF9 0000 E08E             		jmp	DeleteObject
00017E1C                            ; ===========================================================================
00017E1C                            
00017E1C                            Obj8A_Display:				; XREF: Obj8A_Index
00017E1C 4EF9 0000 E052             		jmp	DisplaySprite
00017E22                            ; ===========================================================================
00017E22                            ; ---------------------------------------------------------------------------
00017E22                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E22                            ; ---------------------------------------------------------------------------
00017E22                            Map_obj8A:
00017E22                            	include "_maps\obj8A.asm"
00017E22                            Map_ca8f:
00017E22 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017E24 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017E26 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017E28 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017E2A 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017E2C 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017E2E 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017E30 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017E32 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017E34 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017E36 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017E38 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00017E3A 08                         Map_ca8f_16: 	dc.b $8
00017E3B CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017E40 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017E45 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017E4A 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017E4F B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017E54 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E59 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E5E B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E63 10                         Map_ca8f_3F: 	dc.b $10
00017E64 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E69 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E6E D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E73 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E78 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E7D D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E82 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E87 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E8C 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E91 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E96 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E9B 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017EA0 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017EA5 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017EAA 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017EAF 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017EB4 0A                         Map_ca8f_90: 	dc.b $A
00017EB5 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017EBA D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017EBF D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017EC4 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017EC9 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017ECE D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017ED3 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017ED8 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017EDD 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017EE2 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017EE7 18                         Map_ca8f_C3: 	dc.b $18
00017EE8 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017EED D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017EF2 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017EF7 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EFC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017F01 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017F06 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017F0B D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017F10 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F15 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017F1A D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017F1F D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017F24 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017F29 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017F2E D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017F33 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017F38 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017F3D 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017F42 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017F47 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017F4C 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017F51 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F56 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F5B 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F60 14                         Map_ca8f_13C: 	dc.b $14
00017F61 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F66 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F6B D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F70 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F75 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F7A D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F7F 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F84 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F89 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F8E 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F93 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F98 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F9D 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017FA2 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017FA7 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017FAC 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017FB1 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017FB6 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017FBB 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017FC0 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017FC5 1A                         Map_ca8f_1A1: 	dc.b $1A
00017FC6 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017FCB D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017FD0 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017FD5 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017FDA D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017FDF D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017FE4 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017FE9 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017FEE D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017FF3 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FF8 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FFD D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00018002 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00018007 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
0001800C 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018011 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00018016 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
0001801B 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018020 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018025 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001802A 0805 0058 18               	dc.b $8, $5, $0, $58, $18
0001802F 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018034 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00018039 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
0001803E 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018043 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00018048 17                         Map_ca8f_224: 	dc.b $17
00018049 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
0001804E D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018053 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018058 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
0001805D D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018062 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018067 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
0001806C D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018071 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018076 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
0001807B D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018080 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018085 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001808A 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001808F 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018094 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018099 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
0001809E 0005 0004 14               	dc.b $0, $5, $0, $4, $14
000180A3 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
000180A8 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000180AD 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000180B2 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000180B7 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000180BC 1F                         Map_ca8f_298: 	dc.b $1F
000180BD D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000180C2 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000180C7 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000180CC D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000180D1 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000180D6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000180DB D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000180E0 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000180E5 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000180EA D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000180EF D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000180F4 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180F9 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180FE 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00018103 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00018108 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001810D 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018112 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00018117 0009 0008 00               	dc.b $0, $9, $0, $8, $0
0001811C 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018121 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018126 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001812B 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018130 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018135 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001813A 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
0001813F 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018144 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00018149 2005 0004 08               	dc.b $20, $5, $0, $4, $8
0001814E 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018153 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018158 0F                         Map_ca8f_334: 	dc.b $F
00018159 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
0001815E F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018163 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018168 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0001816D F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018172 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018177 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
0001817C F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018181 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018186 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
0001818B F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018190 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018195 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
0001819A F805 0000 60               	dc.b $F8, $5, $0, $0, $60
0001819F F805 0004 70               	dc.b $F8, $5, $0, $4, $70
000181A4 08                         Map_ca8f_380: 	dc.b $8
000181A5 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000181AA 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000181AF 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000181B4 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000181B9 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000181BE 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000181C3 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000181C8 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000181CD 20                         Map_ca8f_3A9: 	dc.b $20
000181CE ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000181D3 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000181D8 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000181DD ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000181E2 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000181E7 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000181EC ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000181F1 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181F6 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181FB FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018200 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018205 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
0001820A FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
0001820F 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018214 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018219 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
0001821E 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018223 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018228 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001822D 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018232 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018237 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001823C 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018241 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018246 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
0001824B 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018250 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018255 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001825A 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001825F 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018264 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018269 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001826E 1C                         Map_ca8f_tmss:	dc.b 28
000182FC 00                         	even
000182FC 00                         	even
000182FC                            
000182FC                            ; ===========================================================================
000182FC                            ; ---------------------------------------------------------------------------
000182FC                            ; Object 3D - matthew boss - modified by GK89
000182FC                            ; ---------------------------------------------------------------------------
000182FC                            
000182FC                            Obj3D:					; XREF: Obj_Index
000182FC 7000                       		moveq	#0,d0
000182FE 1028 0024                  		move.b	$24(a0),d0
00018302 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018306 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001830A                            ; ===========================================================================
0001830A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001830C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001830E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018310 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018312                            
00018312 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018314 0401                       		dc.b 4,	1
00018316 0607                       		dc.b 6,	7
00018318                            ; ===========================================================================
00018318                            
00018318                            Obj3D_Main:				; XREF: Obj3D_Index
00018318 45F9 0001 8312             		lea	(Obj3D_ObjData).l,a2
0001831E 2248                       		movea.l	a0,a1
00018320 7202                       		moveq	#2,d1
00018322 6000                       		bra.s	Obj3D_LoadBoss
00018324                            ; ===========================================================================
00018324                            
00018324                            Obj3D_Loop:
00018324 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001832A 6600                       		bne.s	loc_17772
0001832C                            
0001832C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001832C 135A 0024                  		move.b	(a2)+,$24(a1)
00018330 12BC 003D                  		move.b	#$3D,0(a1)
00018334 3368 0008 0008             		move.w	8(a0),8(a1)
0001833A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018340 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018348 337C 0400 0002             		move.w	#$400,2(a1)
0001834E 137C 0004 0001             		move.b	#4,1(a1)
00018354 137C 0020 0019             		move.b	#$20,$19(a1)
0001835A 137C 0003 0018             		move.b	#3,$18(a1)
00018360 135A 001C                  		move.b	(a2)+,$1C(a1)
00018364 2348 0034                  		move.l	a0,$34(a1)
00018368 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001836C                            
0001836C                            loc_17772:
0001836C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018372 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018378 117C 000F 0020             		move.b	#$F,$20(a0)
0001837E 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018384                            
00018384                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018384 7000                       		moveq	#0,d0
00018386 1028 0025                  		move.b	$25(a0),d0
0001838A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001838E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018392 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018398 4EB9 0000 B0A0             		jsr	AnimateSprite
0001839E 1028 0022                  		move.b	$22(a0),d0
000183A2 0200 0003                  		andi.b	#3,d0
000183A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000183AC 8128 0001                  		or.b	d0,1(a0)
000183B0 4EF9 0000 E052             		jmp	DisplaySprite
000183B6                            ; ===========================================================================
000183B6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000183B8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000183BA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000183BC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000183BE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000183C0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000183C2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000183C4                            ; ===========================================================================
000183C4                            
000183C4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000183C4 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000183CA 6100 0000                  		bsr.w	BossMove
000183CE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000183D4 6600                       		bne.s	loc_177E6
000183D6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000183DC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000183E0                            
000183E0                            loc_177E6:
000183E0 1028 003F                  		move.b	$3F(a0),d0
000183E4 4EB9 0000 2D3A             		jsr	(CalcSine).l
000183EA EC40                       		asr.w	#6,d0
000183EC D068 0038                  		add.w	$38(a0),d0
000183F0 3140 000C                  		move.w	d0,$C(a0)
000183F4 3168 0030 0008             		move.w	$30(a0),8(a0)
000183FA 5428 003F                  		addq.b	#2,$3F(a0)
000183FE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018404 6400                       		bcc.s	locret_1784A
00018406 4A28 0022                  		tst.b	$22(a0)
0001840A 6B00                       		bmi.s	loc_1784C
0001840C 4A28 0020                  		tst.b	$20(a0)
00018410 6600                       		bne.s	locret_1784A
00018412 4A28 003E                  		tst.b	$3E(a0)
00018416 6600                       		bne.s	Obj3D_ShipFlash
00018418 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001841E 303C 00AC                  		move.w	#$AC,d0
00018422 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018428                            
00018428                            Obj3D_ShipFlash:
00018428 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001842C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001842E 4A51                       		tst.w	(a1)
00018430 6600                       		bne.s	loc_1783C
00018432 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018436                            
00018436                            loc_1783C:
00018436 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018438 5328 003E                  		subq.b	#1,$3E(a0)
0001843C 6600                       		bne.s	locret_1784A
0001843E 117C 000F 0020             		move.b	#$F,$20(a0)
00018444                            
00018444                            locret_1784A:
00018444 4E75                       		rts	
00018446                            ; ===========================================================================
00018446                            
00018446                            loc_1784C:				; XREF: loc_177E6
00018446 7064                       		moveq	#100,d0
00018448 6100 0000                  		bsr.w	AddPoints
0001844C 117C 0008 0025             		move.b	#8,$25(a0)
00018452 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018458 4E75                       		rts	
0001845A                            
0001845A                            ; ---------------------------------------------------------------------------
0001845A                            ; Defeated boss	subroutine
0001845A                            ; ---------------------------------------------------------------------------
0001845A                            
0001845A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001845A                            
0001845A                            
0001845A                            BossDefeated:
0001845A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001845E 0200 0007                  		andi.b	#7,d0
00018462 6600                       		bne.s	locret_178A2
00018464 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001846A 6600                       		bne.s	locret_178A2
0001846C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018470 3368 0008 0008             		move.w	8(a0),8(a1)
00018476 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001847C 4EB9 0000 2D14             		jsr	(RandomNumber).l
00018482 3200                       		move.w	d0,d1
00018484 7200                       		moveq	#0,d1
00018486 1200                       		move.b	d0,d1
00018488 E409                       		lsr.b	#2,d1
0001848A 0441 0020                  		subi.w	#$20,d1
0001848E D369 0008                  		add.w	d1,8(a1)
00018492 E048                       		lsr.w	#8,d0
00018494 E608                       		lsr.b	#3,d0
00018496 D169 000C                  		add.w	d0,$C(a1)
0001849A                            
0001849A                            locret_178A2:
0001849A 4E75                       		rts	
0001849C                            ; End of function BossDefeated
0001849C                            
0001849C                            ; ---------------------------------------------------------------------------
0001849C                            ; Subroutine to	move a boss
0001849C                            ; ---------------------------------------------------------------------------
0001849C                            
0001849C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001849C                            
0001849C                            
0001849C                            BossMove:
0001849C 2428 0030                  		move.l	$30(a0),d2
000184A0 2628 0038                  		move.l	$38(a0),d3
000184A4 3028 0010                  		move.w	$10(a0),d0
000184A8 48C0                       		ext.l	d0
000184AA E180                       		asl.l	#8,d0
000184AC D480                       		add.l	d0,d2
000184AE 3028 0012                  		move.w	$12(a0),d0
000184B2 48C0                       		ext.l	d0
000184B4 E180                       		asl.l	#8,d0
000184B6 D680                       		add.l	d0,d3
000184B8 2142 0030                  		move.l	d2,$30(a0)
000184BC 2143 0038                  		move.l	d3,$38(a0)
000184C0 4E75                       		rts	
000184C2                            ; End of function BossMove
000184C2                            
000184C2                            ; ===========================================================================
000184C2                            
000184C2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000184C2 6100 FFD8                  		bsr.w	BossMove
000184C6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000184CC 6600                       		bne.s	loc_17916
000184CE 317C 0000 0010             		move.w	#0,$10(a0)
000184D4 317C 0000 0012             		move.w	#0,$12(a0)
000184DA 5428 0025                  		addq.b	#2,$25(a0)
000184DE 4EB9 0000 E4EE             		jsr	SingleObjLoad2
000184E4 6600                       		bne.s	loc_17910
000184E6 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000184EA 3368 0030 0008             		move.w	$30(a0),8(a1)
000184F0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000184F6 2348 0034                  		move.l	a0,$34(a1)
000184FA                            
000184FA                            loc_17910:
000184FA 317C 0077 003C             		move.w	#$77,$3C(a0)
00018500                            
00018500                            loc_17916:
00018500 6000 FEDE                  		bra.w	loc_177E6
00018504                            ; ===========================================================================
00018504                            
00018504                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018504 5368 003C                  		subq.w	#1,$3C(a0)
00018508 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001850E 5428 0025                  		addq.b	#2,$25(a0)
00018512 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018518 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001851C 9068 0008                  		sub.w	8(a0),d0		 
00018520 6A00                       		bpl.s	Obj3D_left			 
00018522 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018528 6000                       		bra.s	Obj3D_right		 
0001852A 08A8 0005 0022             		bclr	#5,$22(a0)
00018530 4EB9 0000 0000              		jsr     loc_17950
00018536 4E75                       		rts
00018538                            ; ===========================================================================
00018538                            
00018538                            Obj3D_right:
00018538 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001853E 4E75                       		Rts
00018540                            
00018540                            Obj3D_left:
00018540 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018546 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001854C 6600                       		bne.s	RTSboss  	; if not, branch
0001854E 0868 0000 0022              		bchg	#0,$22(a0)
00018554                            
00018554                            RTSboss:	    
00018554 4E75                       		rts
00018556                             ; ===========================================================================
00018556                            
00018556                            Obj3D_UpStuff:
00018556 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001855A 9068 000C                  		sub.w	$C(a0),d0		 
0001855E 6A00                       		bpl.s	Obj3D_down			 
00018560 6000                        		bra.s	Obj3D_up		 
00018562 08A8 0005 0022             		bclr	#5,$22(a0)
00018568                             
00018568                            Obj3D_up:		
00018568 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001856E 4E75                        	    rts
00018570                            
00018570                            Obj3D_down:
00018570 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018576                            
00018576                            loc_17950:
00018576 6000 FE68                  		bra.w	loc_177E6
0001857A                            ; ===========================================================================
0001857A                            
0001857A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001857A 5368 003C                  		subq.w	#1,$3C(a0)
0001857E 6B00                       		bmi.s	loc_17960
00018580 6100 FF1A                  		bsr.w	BossMove
00018584 6000                       		bra.s	loc_17976
00018586                            ; ===========================================================================
00018586                            
00018586                            loc_17960:
00018586 0868 0000 0022             		bchg	#0,$22(a0)
0001858C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018592 5528 0025                  		subq.b	#2,$25(a0)
00018596 317C 0000 0010             		move.w	#0,$10(a0)
0001859C                            
0001859C                            loc_17976:
0001859C 6000 FE42                  		bra.w	loc_177E6
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            loc_1797A:				; XREF: Obj3D_ShipIndex
000185A0 5368 003C                  		subq.w	#1,$3C(a0)
000185A4 6B00                       		bmi.s	loc_17984
000185A6 6000 FEB2                  		bra.w	BossDefeated
000185AA                            ; ===========================================================================
000185AA                            
000185AA                            loc_17984:
000185AA 08E8 0000 0022             		bset	#0,$22(a0)
000185B0 08A8 0007 0022             		bclr	#7,$22(a0)
000185B6 4268 0010                  		clr.w	$10(a0)
000185BA 5428 0025                  		addq.b	#2,$25(a0)
000185BE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000185C4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000185C8 6600                       		bne.s	locret_179AA
000185CA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000185D0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000185D6 6000 FE82                  		bra.w	BossDefeated
000185DA                            
000185DA                            locret_179AA:
000185DA 4E75                       		rts	
000185DC                            ; ===========================================================================
000185DC                            
000185DC                            loc_179AC:				; XREF: Obj3D_ShipIndex
000185DC 4EB9 0000 DFBA             		jsr ObjectFall		
000185E2 5268 003C                  		addq.w	#1,$3C(a0)
000185E6 6700                       		beq.s	loc_179BC
000185E8 6A00                       		bpl.s	loc_179C2
000185EA 6000                       		bra.s	loc_179EE
000185EC                            ; ===========================================================================
000185EC                            
000185EC                            loc_179BC:
000185EC 4268 0012                  		clr.w	$12(a0)
000185F0 6000                       		bra.s	loc_179EE
000185F2                            ; ===========================================================================
000185F2                            
000185F2                            loc_179C2:
000185F2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000185F8 6500                       		bcs.s	loc_179DA
000185FA 6700                       		beq.s	loc_179E0
000185FC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018602 6500                       		bcs.s	loc_179EE
00018604 5428 0025                  		addq.b	#2,$25(a0)
00018608 6000                       		bra.s	loc_179EE
0001860A                            ; ===========================================================================
0001860A                            
0001860A                            loc_179DA:
0001860A 5168 0012                  		subq.w	#8,$12(a0)
0001860E 6000                       		bra.s	loc_179EE
00018610 6000 FE48                  		bra.w	BossDefeated
00018614                            ; ===========================================================================
00018614                            
00018614                            loc_179E0:
00018614 4268 0012                  		clr.w	$12(a0)
00018618 303C 0081                  		move.w	#$81,d0
0001861C 4EB9 0000 159A             		jsr	(PlaySound).l	; play GHZ music
00018622                            
00018622                            loc_179EE:
00018622 6100 FE78                  		bsr.w	BossMove
00018626 6000 FDB8                  		bra.w	loc_177E6
0001862A                            ; ===========================================================================
0001862A                            
0001862A                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001862A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018630 6700                       		beq.s	loc_17A10
00018632 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018636 6000                       		bra.s	loc_17A16
00018638                            ; ===========================================================================
00018638                            
00018638                            loc_17A10:
00018638 4A28 0001                  		tst.b	1(a0)
0001863C 6A00                       		bpl.s	Obj3D_ShipDel
0001863E                            
0001863E                            loc_17A16:
0001863E 6100 FE5C                  		bsr.w	BossMove
00018642 6000 FD9C                  		bra.w	loc_177E6
00018646                            ; ===========================================================================
00018646                            
00018646                            Obj3D_ShipDel:
00018646 4EF9 0000 E08E             		jmp	DeleteObject
0001864C                            ; ===========================================================================
0001864C                            
0001864C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001864C 7000                       		moveq	#0,d0
0001864E 7201                       		moveq	#1,d1
00018650 2268 0034                  		movea.l	$34(a0),a1
00018654 1029 0025                  		move.b	$25(a1),d0
00018658 5900                       		subq.b	#4,d0
0001865A 6600                       		bne.s	loc_17A3E
0001865C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018662 6600                       		bne.s	loc_17A46
00018664 7204                       		moveq	#4,d1
00018666                            
00018666                            loc_17A3E:
00018666 5D00                       		subq.b	#6,d0
00018668 6B00                       		bmi.s	loc_17A46
0001866A 720A                       		moveq	#$A,d1
0001866C 6000                       		bra.s	loc_17A5A
0001866E                            ; ===========================================================================
0001866E                            
0001866E                            loc_17A46:
0001866E 4A29 0020                  		tst.b	$20(a1)
00018672 6600                       		bne.s	loc_17A50
00018674 7205                       		moveq	#5,d1
00018676 6000                       		bra.s	loc_17A5A
00018678                            ; ===========================================================================
00018678                            
00018678                            loc_17A50:
00018678 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001867E 6500                       		bcs.s	loc_17A5A
00018680 7204                       		moveq	#4,d1
00018682                            
00018682                            loc_17A5A:
00018682 1141 001C                  		move.b	d1,$1C(a0)
00018686 5500                       		subq.b	#2,d0
00018688 6600                       		bne.s	Obj3D_FaceDisp
0001868A 117C 0006 001C             		move.b	#6,$1C(a0)
00018690 4A28 0001                  		tst.b	1(a0)
00018694 6A00                       		bpl.s	Obj3D_FaceDel
00018696                            
00018696                            Obj3D_FaceDisp:
00018696 6000                       		bra.s	Obj3D_Display
00018698                            ; ===========================================================================
00018698                            
00018698                            Obj3D_FaceDel:
00018698 4EF9 0000 E08E             		jmp	DeleteObject
0001869E                            ; ===========================================================================
0001869E                            
0001869E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001869E 117C 0007 001C             		move.b	#7,$1C(a0)
000186A4 2268 0034                  		movea.l	$34(a0),a1
000186A8 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000186AE 6600                       		bne.s	loc_17A96
000186B0 117C 000B 001C             		move.b	#$B,$1C(a0)
000186B6 4A28 0001                  		tst.b	1(a0)
000186BA 6A00                       		bpl.s	Obj3D_FlameDel
000186BC 6000                       		bra.s	Obj3D_FlameDisp
000186BE                            ; ===========================================================================
000186BE                            
000186BE                            loc_17A96:
000186BE 3029 0010                  		move.w	$10(a1),d0
000186C2 6700                       		beq.s	Obj3D_FlameDisp
000186C4 117C 0008 001C             		move.b	#8,$1C(a0)
000186CA                            
000186CA                            Obj3D_FlameDisp:
000186CA 6000                       		bra.s	Obj3D_Display
000186CC                            ; ===========================================================================
000186CC                            
000186CC                            Obj3D_FlameDel:
000186CC 4EF9 0000 E08E             		jmp	DeleteObject
000186D2                            ; ===========================================================================
000186D2                            
000186D2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000186D2 2268 0034                  		movea.l	$34(a0),a1
000186D6 3169 0008 0008             		move.w	8(a1),8(a0)
000186DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000186E2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000186E8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000186EE 4EB9 0000 B0A0             		jsr	AnimateSprite
000186F4 1028 0022                  		move.b	$22(a0),d0
000186F8 0200 0003                  		andi.b	#3,d0
000186FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018702 8128 0001                  		or.b	d0,1(a0)
00018706 4EF9 0000 E052             		jmp	DisplaySprite
0001870C                            ; ===========================================================================
0001870C                            ; ---------------------------------------------------------------------------
0001870C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001870C                            ; ---------------------------------------------------------------------------
0001870C                            
0001870C                            Obj48:					; XREF: Obj_Index
0001870C 7000                       		moveq	#0,d0
0001870E 1028 0024                  		move.b	$24(a0),d0
00018712 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018716 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001871A                            ; ===========================================================================
0001871A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001871C 0000                       		dc.w Obj48_Base-Obj48_Index
0001871E 0000                       		dc.w Obj48_Display2-Obj48_Index
00018720 0000                       		dc.w loc_17C68-Obj48_Index
00018722 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018724                            ; ===========================================================================
00018724                            
00018724                            Obj48_Main:				; XREF: Obj48_Index
00018724 5428 0024                  		addq.b	#2,$24(a0)
00018728 317C 4080 0026             		move.w	#$4080,$26(a0)
0001872E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018734 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001873C 317C 046C 0002             		move.w	#$46C,2(a0)
00018742 45E8 0028                  		lea	$28(a0),a2
00018746 14FC 0000                  		move.b	#0,(a2)+
0001874A 7205                       		moveq	#5,d1
0001874C 2248                       		movea.l	a0,a1
0001874E 6000                       		bra.s	loc_17B60
00018750                            ; ===========================================================================
00018750                            
00018750                            Obj48_MakeLinks:
00018750 4EB9 0000 E4EE             		jsr	SingleObjLoad2
00018756 6600                       		bne.s	Obj48_MakeBall
00018758 3368 0008 0008             		move.w	8(a0),8(a1)
0001875E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018764 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018768 137C 0006 0024             		move.b	#6,$24(a1)
0001876E 237C 0000 8454 0004        		move.l	#Map_obj15,4(a1)
00018776 337C 0380 0002             		move.w	#$380,2(a1)
0001877C 137C 0001 001A             		move.b	#1,$1A(a1)
00018782 5228 0028                  		addq.b	#1,$28(a0)
00018786                            
00018786                            loc_17B60:				; XREF: Obj48_Main
00018786 3A09                       		move.w	a1,d5
00018788 0445 D000                  		subi.w	#$D000,d5
0001878C EC4D                       		lsr.w	#6,d5
0001878E 0245 007F                  		andi.w	#$7F,d5
00018792 14C5                       		move.b	d5,(a2)+
00018794 137C 0004 0001             		move.b	#4,1(a1)
0001879A 137C 0008 0019             		move.b	#8,$19(a1)
000187A0 137C 0006 0018             		move.b	#6,$18(a1)
000187A6 2368 0034 0034             		move.l	$34(a0),$34(a1)
000187AC 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000187B0                            
000187B0                            Obj48_MakeBall:
000187B0 137C 0008 0024             		move.b	#8,$24(a1)
000187B6 237C 0000 8A44 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000187BE 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000187C4 137C 0001 001A             		move.b	#1,$1A(a1)
000187CA 137C 0005 0018             		move.b	#5,$18(a1)
000187D0 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000187D6 4E75                       		rts	
000187D8                            ; ===========================================================================
000187D8                            
000187D8 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000187DE                            
000187DE                            ; ===========================================================================
000187DE                            
000187DE                            Obj48_Base:				; XREF: Obj48_Index
000187DE 47F9 0001 87D8             		lea	(Obj48_PosData).l,a3
000187E4 45E8 0028                  		lea	$28(a0),a2
000187E8 7C00                       		moveq	#0,d6
000187EA 1C1A                       		move.b	(a2)+,d6
000187EC                            
000187EC                            loc_17BC6:
000187EC 7800                       		moveq	#0,d4
000187EE 181A                       		move.b	(a2)+,d4
000187F0 ED4C                       		lsl.w	#6,d4
000187F2 0684 00FF D000             		addi.l	#$FFD000,d4
000187F8 2244                       		movea.l	d4,a1
000187FA 101B                       		move.b	(a3)+,d0
000187FC B029 003C                  		cmp.b	$3C(a1),d0
00018800 6700                       		beq.s	loc_17BE0
00018802 5229 003C                  		addq.b	#1,$3C(a1)
00018806                            
00018806                            loc_17BE0:
00018806 51CE FFE4                  		dbf	d6,loc_17BC6
0001880A                            
0001880A B029 003C                  		cmp.b	$3C(a1),d0
0001880E 6600                       		bne.s	loc_17BFA
00018810 2268 0034                  		movea.l	$34(a0),a1
00018814 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001881A 6600                       		bne.s	loc_17BFA
0001881C 5428 0024                  		addq.b	#2,$24(a0)
00018820                            
00018820                            loc_17BFA:
00018820 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018826 6700                       		beq.s	Obj48_Display
00018828 5268 0032                  		addq.w	#1,$32(a0)
0001882C                            
0001882C                            Obj48_Display:
0001882C 6100 0000                  		bsr.w	sub_17C2A
00018830 1028 0026                  		move.b	$26(a0),d0
00018834 4EB9 0000 83C6             		jsr	(Obj15_Move2).l
0001883A 4EF9 0000 E052             		jmp	DisplaySprite
00018840                            ; ===========================================================================
00018840                            
00018840                            Obj48_Display2:				; XREF: Obj48_Index
00018840 6100 0000                  		bsr.w	sub_17C2A
00018844 4EB9 0000 8386             		jsr	(Obj48_Move).l
0001884A 4EF9 0000 E052             		jmp	DisplaySprite
00018850                            
00018850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018850                            
00018850                            
00018850                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018850 2268 0034                  		movea.l	$34(a0),a1
00018854 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001885A 6400                       		bcc.s	loc_17C3C
0001885C 0868 0000 001A             		bchg	#0,$1A(a0)
00018862                            
00018862                            loc_17C3C:
00018862 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018868 3029 000C                  		move.w	$C(a1),d0
0001886C D068 0032                  		add.w	$32(a0),d0
00018870 3140 0038                  		move.w	d0,$38(a0)
00018874 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001887A 4A29 0022                  		tst.b	$22(a1)
0001887E 6A00                       		bpl.s	locret_17C66
00018880 10BC 003F                  		move.b	#$3F,0(a0)
00018884 117C 0000 0024             		move.b	#0,$24(a0)
0001888A                            
0001888A                            locret_17C66:
0001888A 4E75                       		rts	
0001888C                            ; End of function sub_17C2A
0001888C                            
0001888C                            ; ===========================================================================
0001888C                            
0001888C                            loc_17C68:				; XREF: Obj48_Index
0001888C 2268 0034                  		movea.l	$34(a0),a1
00018890 4A29 0022                  		tst.b	$22(a1)
00018894 6A00                       		bpl.s	Obj48_Display3
00018896 10BC 003F                  		move.b	#$3F,0(a0)
0001889A 117C 0000 0024             		move.b	#0,$24(a0)
000188A0                            
000188A0                            Obj48_Display3:
000188A0 4EF9 0000 E052             		jmp	DisplaySprite
000188A6                            ; ===========================================================================
000188A6                            
000188A6                            Obj48_ChkVanish:			; XREF: Obj48_Index
000188A6 7000                       		moveq	#0,d0
000188A8 4A28 001A                  		tst.b	$1A(a0)
000188AC 6600                       		bne.s	Obj48_Vanish
000188AE 5200                       		addq.b	#1,d0
000188B0                            
000188B0                            Obj48_Vanish:
000188B0 1140 001A                  		move.b	d0,$1A(a0)
000188B4 2268 0034                  		movea.l	$34(a0),a1
000188B8 4A29 0022                  		tst.b	$22(a1)
000188BC 6A00                       		bpl.s	Obj48_Display4
000188BE 117C 0000 0020             		move.b	#0,$20(a0)
000188C4 6100 FB94                  		bsr.w	BossDefeated
000188C8 5328 003C                  		subq.b	#1,$3C(a0)
000188CC 6A00                       		bpl.s	Obj48_Display4
000188CE 10BC 003F                  		move.b	#$3F,(a0)
000188D2 117C 0000 0024             		move.b	#0,$24(a0)
000188D8                            
000188D8                            Obj48_Display4:
000188D8 4EF9 0000 E052             		jmp	DisplaySprite
000188DE                            ; ===========================================================================
000188DE                            Ani_Eggman:
000188DE                            	include "_anim\Eggman.asm"
000188DE                            ; ---------------------------------------------------------------------------
000188DE                            ; Animation script - Eggman (bosses)
000188DE                            ; ---------------------------------------------------------------------------
000188DE 0000                       		dc.w byte_17CD4-Ani_Eggman
000188E0 0000                       		dc.w byte_17CD8-Ani_Eggman
000188E2 0000                       		dc.w byte_17CDC-Ani_Eggman
000188E4 0000                       		dc.w byte_17CE0-Ani_Eggman
000188E6 0000                       		dc.w byte_17CE4-Ani_Eggman
000188E8 0000                       		dc.w byte_17CE8-Ani_Eggman
000188EA 0000                       		dc.w byte_17CEC-Ani_Eggman
000188EC 0000                       		dc.w byte_17CF0-Ani_Eggman
000188EE 0000                       		dc.w byte_17CF4-Ani_Eggman
000188F0 0000                       		dc.w byte_17CF8-Ani_Eggman
000188F2 0000                       		dc.w byte_17CFC-Ani_Eggman
000188F4 0000                       		dc.w byte_17D00-Ani_Eggman
000188F6 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000188FA 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000188FE 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018902 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018906 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001890A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001890E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018912 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018916 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001891A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001891E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018922 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001892E                            		even
0001892E                            		even
0001892E                            Ani_TetoB:
0001892E                            	include "_anim\TetoB.asm"
0001892E                            ; ---------------------------------------------------------------------------
0001892E                            ; Animation script - Eggman (bosses)
0001892E                            ; ---------------------------------------------------------------------------
0001892E 0000                       		dc.w spin-Ani_TetoB
00018930 0000                       		dc.w static-Ani_TetoB
00018932 0000                       		dc.w static2-Ani_TetoB
00018934 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001893B 0500 FF                    static:	dc.b 5,	0, $FF
0001893E 0501 FF                    static2:	dc.b 5,	1, $FF
00018942 00                         		even
00018942 00                         		even
00018942                            ; ---------------------------------------------------------------------------
00018942                            ; Sprite mappings - Eggman (boss levels)
00018942                            ; ---------------------------------------------------------------------------
00018942                            Map_Eggman:
00018942                            	include "_maps\Eggman.asm"
00018942                            Map_dc7e:
00018942 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018944 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018946 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018948 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001894A 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001894C 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001894E 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018950 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018952 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018954 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018956 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018958 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001895A 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001895C 06                         Map_dc7e_1A: 	dc.b $6
0001895D EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018962 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018967 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001896C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018971 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018976 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001897B 02                         Map_dc7e_39: 	dc.b $2
0001897C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018981 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018986 02                         Map_dc7e_44: 	dc.b $2
00018987 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001898C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018991 03                         Map_dc7e_4F: 	dc.b $3
00018992 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018997 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001899C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000189A1 03                         Map_dc7e_5F: 	dc.b $3
000189A2 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000189A7 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000189AC EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000189B1 03                         Map_dc7e_6F: 	dc.b $3
000189B2 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000189B7 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000189BC EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000189C1 03                         Map_dc7e_7F: 	dc.b $3
000189C2 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000189C7 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000189CC EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000189D1 04                         Map_dc7e_8F: 	dc.b $4
000189D2 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000189D7 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000189DC EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000189E1 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000189E6 01                         Map_dc7e_A4: 	dc.b $1
000189E7 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000189EC 01                         Map_dc7e_AA: 	dc.b $1
000189ED 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000189F2 00                         Map_dc7e_B0: 	dc.b $0
000189F3 02                         Map_dc7e_B1: 	dc.b $2
000189F4 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000189F9 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000189FE 02                         Map_dc7e_BC: 	dc.b $2
000189FF F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018A04 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018A0A 00                         	even
00018A0A 00                         	even
00018A0A                            
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            Map_BossItems:
00018A0A                            	include "_maps\Boss items.asm"
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018A0E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018A12 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018A16 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018A1A 01                         byte_17DE4:	dc.b 1
00018A1B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018A20 02                         byte_17DEA:	dc.b 2
00018A21 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018A26 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018A2B 00                         		dc.b 0
00018A2C 01                         byte_17DF6:	dc.b 1
00018A2D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018A32 01                         byte_17DFC:	dc.b 1
00018A33 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018A38 01                         byte_17E02:	dc.b 1
00018A39 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018A3E 04                         byte_17E08:	dc.b 4
00018A3F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018A44 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018A49 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018A4E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018A53 00                         		dc.b 0
00018A54 02                         byte_17E1E:	dc.b 2
00018A55 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018A5A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018A5F 00                         		dc.b 0
00018A60 02                         byte_17E2A:	dc.b 2
00018A61 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018A66 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018A6C 00                         		even
00018A6C 00                         		even
00018A6C                            
00018A6C                            ; ===========================================================================
00018A6C                            ; ---------------------------------------------------------------------------
00018A6C                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018A6C                            ; ---------------------------------------------------------------------------
00018A6C                            
00018A6C                            
00018A6C                            obj77:					; XREF: Obj_Index
00018A6C 7000                       		moveq	#0,d0
00018A6E 1028 0024                  		move.b	$24(a0),d0
00018A72 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018A76 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018A7A                            ; ===========================================================================
00018A7A 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018A7C 0000                       		dc.w obj77_ShipMain-obj77_Index
00018A7E 0000                       		dc.w obj77_FaceMain-obj77_Index
00018A80 0000                       		dc.w obj77_FlameMain-obj77_Index
00018A82                            
00018A82 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018A84 0401                       		dc.b 4,	1
00018A86 0607                       		dc.b 6,	7
00018A88                            ; ===========================================================================
00018A88                            
00018A88                            obj77_Main:				; XREF: obj77_Index
00018A88 45F9 0001 8A82             		lea	(obj77_ObjData).l,a2
00018A8E 2248                       		movea.l	a0,a1
00018A90 7202                       		moveq	#2,d1
00018A92 6000                       		bra.s	obj77_LoadBoss
00018A94                            ; ===========================================================================
00018A94                            
00018A94                            obj77_Loop:
00018A94 4EB9 0000 E4EE             		jsr	SingleObjLoad2
00018A9A 6600                       		bne.s	loc2_17772
00018A9C                            
00018A9C                            obj77_LoadBoss:				; XREF: obj77_Main
00018A9C 135A 0024                  		move.b	(a2)+,$24(a1)
00018AA0 12BC 0077                  		move.b	#$77,0(a1)
00018AA4 3368 0008 0008             		move.w	8(a0),8(a1)
00018AAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AB0 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018AB8 337C 0400 0002             		move.w	#$400,2(a1)
00018ABE 137C 0004 0001             		move.b	#4,1(a1)
00018AC4 137C 0020 0019             		move.b	#$20,$19(a1)
00018ACA 137C 0003 0018             		move.b	#3,$18(a1)
00018AD0 135A 001C                  		move.b	(a2)+,$1C(a1)
00018AD4 2348 0034                  		move.l	a0,$34(a1)
00018AD8 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018ADC                            
00018ADC                            loc2_17772:
00018ADC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018AE2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AE8 117C 000F 0020             		move.b	#$F,$20(a0)
00018AEE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018AF4                            
00018AF4                            obj77_ShipMain:				; XREF: obj77_Index
00018AF4 7000                       		moveq	#0,d0
00018AF6 1028 0025                  		move.b	$25(a0),d0
00018AFA 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018AFE 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018B02 43F9 0001 892E             		lea	(Ani_TetoB).l,a1
00018B08 4EB9 0000 B0A0             		jsr	AnimateSprite
00018B0E 1028 0022                  		move.b	$22(a0),d0
00018B12 0200 0003                  		andi.b	#3,d0
00018B16 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B1C 8128 0001                  		or.b	d0,1(a0)
00018B20 4EF9 0000 E052             		jmp	DisplaySprite
00018B26                            ; ===========================================================================
00018B26 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018B28 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018B2A 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018B2C 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018B2E 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018B30 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018B32 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018B34 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018B36                            ; ===========================================================================
00018B36                            
00018B36                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018B36                            	;	move.w	#$100,$12(a0)	; move ship down
00018B36 6100 F964                  		bsr.w	BossMove
00018B3A 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018B40 6600                       		bne.s	loc2_177E6
00018B42 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018B48 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018B4C                            
00018B4C                            loc2_177E6:
00018B4C                            ;		move.b	$3F(a0),d0
00018B4C                            ;		jsr	(CalcSine).l
00018B4C EC40                       		asr.w	#6,d0
00018B4E D068 0038                  		add.w	$38(a0),d0
00018B52 3140 000C                  		move.w	d0,$C(a0)
00018B56 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B5C 5428 003F                  		addq.b	#2,$3F(a0)
00018B60 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018B66 6400                       		bcc.s	locret_1784A2
00018B68 4A28 0022                  		tst.b	$22(a0)
00018B6C 6B00                       		bmi.s	loc2_1784C
00018B6E 4A28 0020                  		tst.b	$20(a0)
00018B72 6600                       		bne.s	locret_1784A2
00018B74 4A28 003E                  		tst.b	$3E(a0)
00018B78 6600                       		bne.s	obj77_ShipFlash
00018B7A 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018B80 303C 00AC                  		move.w	#$AC,d0
00018B84 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B8A                            
00018B8A                            obj77_ShipFlash:
00018B8A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018B8E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018B90 4A51                       		tst.w	(a1)
00018B92 6600                       		bne.s	loc2_1783C
00018B94 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018B98                            
00018B98                            loc2_1783C:
00018B98 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018B9A 5328 003E                  		subq.b	#1,$3E(a0)
00018B9E 6600                       		bne.s	locret_1784A2
00018BA0 117C 000F 0020             		move.b	#$F,$20(a0)
00018BA6                            
00018BA6                            locret_1784A2:
00018BA6 4E75                       		rts	
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            loc2_1784C:				; XREF: loc2_177E6
00018BA8 7064                       		moveq	#100,d0
00018BAA 6100 0000                  		bsr.w	AddPoints
00018BAE 117C 000A 0025             		move.b	#$A,$25(a0)
00018BB4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018BBA 4E75                       		rts	
00018BBC                            ; ===========================================================================
00018BBC                            
00018BBC                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018BBC 317C FF00 0010             		move.w	#-$100,$10(a0)
00018BC2 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018BC8 6100 F8D2                  		bsr.w	BossMove
00018BCC 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018BD2 6600                       		bne.s	loc2_17916
00018BD4 317C 0000 0010             		move.w	#0,$10(a0)
00018BDA 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018BE0 317C 0000 0012             		move.w	#0,$12(a0)
00018BE6 5428 0025                  		addq.b	#2,$25(a0)
00018BEA                            
00018BEA                            loc2_17910:
00018BEA 317C 0077 003C             		move.w	#$77,$3C(a0)
00018BF0                            
00018BF0                            loc2_17916:
00018BF0 6000 FF5A                  		bra.w	loc2_177E6
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018BF4 6100 F8A6                  		bsr.w	BossMove
00018BF8 5368 003C                  		subq.w	#1,$3C(a0)
00018BFC 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018BFE 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018C04 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018C0A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018C10 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018C16 6600                       		bne.s	loc2_17950 ; if not branch
00018C18                            
00018C18                            fatass_attack:
00018C18 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018C1E 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018C24 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018C2A 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018C2C 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018C30 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018C36                            
00018C36                            loc2_17950:
00018C36 6000 FF14                  		bra.w	loc2_177E6
00018C3A                            ; ===========================================================================
00018C3A                            
00018C3A                            loc2_17954:				; XREF: obj77_ShipIndex
00018C3A 6100 F860                  		bsr.w	BossMove
00018C3E 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018C44                            		; i suck at programming
00018C44 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018C4A 6600                       		bne.s	loc2_17976    ; if not blah blah
00018C4C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018C52 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018C56 303C 00B9                  		move.w	#$B9,d0
00018C5A 4EB9 0000 159A             		jsr	(PlaySound).l	; play the earthquake sound
00018C60                            
00018C60                            Peartobombs:	
00018C60 4EB9 0000 E4EE                		jsr	SingleObjLoad2
00018C66 6600                       		bne.s	secondone
00018C68 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018C6C 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018C72 337C 0670 000C             		move.w	#$670,$C(a1)
00018C78                            secondone:		
00018C78 4EB9 0000 E4EE                		jsr	SingleObjLoad2
00018C7E 6600                       		bne.s	loc2_17976		
00018C80 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018C84 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018C8A 337C 0670 000C             		move.w	#$670,$C(a1)
00018C90                            lastone:
00018C90 4EB9 0000 E4EE                		jsr	SingleObjLoad2
00018C96 6600                       		bne.s	loc2_17976		
00018C98 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018C9C 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018CA2 337C 0670 000C             		move.w	#$670,$C(a1)
00018CA8                            		
00018CA8                            loc2_17976:
00018CA8 6000 FEA2                  		bra.w	loc2_177E6
00018CAC                            		
00018CAC                            ; ===========================================================================
00018CAC                            Fatassruns:
00018CAC 6100 F7EE                   		bsr.w	BossMove
00018CB0 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018CB6 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018CBC 6600                       		bne.s	processstuff ; is not go here
00018CBE 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018CC4 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018CCA 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018CCE 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018CD4 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018CDA                            		
00018CDA                            		
00018CDA                            processstuff:
00018CDA 6000 FE70                  		bra.w	loc2_177E6
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            loc2_1797A:				; XREF: obj77_ShipIndex
00018CDE 5368 003C                  		subq.w	#1,$3C(a0)
00018CE2 6B00                       		bmi.s	loc2_17984
00018CE4 6000 F774                  		bra.w	BossDefeated
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            loc2_17984:
00018CE8 08E8 0000 0022             		bset	#0,$22(a0)
00018CEE 08A8 0007 0022             		bclr	#7,$22(a0)
00018CF4 4268 0010                  		clr.w	$10(a0)
00018CF8 5428 0025                  		addq.b	#2,$25(a0)
00018CFC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D02 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D06 6600                       		bne.s	locret_179AA2
00018D08 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D0E                            
00018D0E                            locret_179AA2:
00018D0E 4E75                       		rts	
00018D10                            ; ===========================================================================
00018D10                            
00018D10                            loc2_179AC:				; XREF: obj77_ShipIndex
00018D10 5268 003C                  		addq.w	#1,$3C(a0)
00018D14 6700                       		beq.s	loc2_179BC
00018D16 6A00                       		bpl.s	loc2_179C2
00018D18 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D1E 6000                       		bra.s	loc2_179EE
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            loc2_179BC:
00018D20 4268 0012                  		clr.w	$12(a0)
00018D24 6000                       		bra.s	loc2_179EE
00018D26                            ; ===========================================================================
00018D26                            
00018D26                            loc2_179C2:
00018D26 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D2C 6500                       		bcs.s	loc2_179DA
00018D2E 6700                       		beq.s	loc2_179E0
00018D30 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D36 6500                       		bcs.s	loc2_179EE
00018D38 5428 0025                  		addq.b	#2,$25(a0)
00018D3C 6000                       		bra.s	loc2_179EE
00018D3E                            ; ===========================================================================
00018D3E                            
00018D3E                            loc2_179DA:
00018D3E 5168 0012                  		subq.w	#8,$12(a0)
00018D42 6000                       		bra.s	loc2_179EE
00018D44                            ; ===========================================================================
00018D44                            
00018D44                            loc2_179E0:
00018D44 4268 0012                  		clr.w	$12(a0)
00018D48 303C 0097                  		move.w	#$97,d0
00018D4C 4EB9 0000 159A             		jsr	(PlaySound).l	; play lz3 music
00018D52                            
00018D52                            loc2_179EE:
00018D52 6100 F748                  		bsr.w	BossMove
00018D56 6000 FDF4                  		bra.w	loc2_177E6
00018D5A                            ; ===========================================================================
00018D5A                            
00018D5A                            loc2_179F6:				; XREF: obj77_ShipIndex
00018D5A 317C 0400 0010             		move.w	#$400,$10(a0)
00018D60 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018D66 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018D6C 6700                       		beq.s	loc2_17A10
00018D6E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D72 6000                       		bra.s	loc2_17A16
00018D74                            ; ===========================================================================
00018D74                            
00018D74                            loc2_17A10:
00018D74 4A28 0001                  		tst.b	1(a0)
00018D78 6A00                       		bpl.s	obj77_ShipDel
00018D7A                            
00018D7A                            loc2_17A16:
00018D7A 6100 F720                  		bsr.w	BossMove
00018D7E 6000 FDCC                  		bra.w	loc2_177E6
00018D82                            ; ===========================================================================
00018D82                            
00018D82                            obj77_ShipDel:
00018D82 4EF9 0000 E08E             		jmp	DeleteObject
00018D88                            ; ===========================================================================
00018D88                            
00018D88                            obj77_FaceMain:				; XREF: obj77_Index
00018D88 4E75                       		rts
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            obj77_FlameMain:			; XREF: obj77_Index
00018D8A 4E75                       		rts
00018D8C                            ; ===========================================================================
00018D8C                            
00018D8C                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018D8C 43F9 0001 892E             		lea	(Ani_TetoB).l,a1
00018D92 4EB9 0000 B0A0             		jsr	AnimateSprite
00018D98 4EF9 0000 E052             		jmp	DisplaySprite
00018D9E                            ; ---------------------------------------------------------------------------
00018D9E                            ; Sprite mappings - Fatass teto boss
00018D9E                            ; ---------------------------------------------------------------------------
00018D9E                            Map_TetoBoss:
00018D9E                            	include "_maps\tetoboss.asm"
00018D9E                            Map_f09a:
00018D9E 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018DA0 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018DA2 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018DA4 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018DA6 03                         Map_f09a_8: 	dc.b $3
00018DA7 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018DAC 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018DB1 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018DB6 06                         Map_f09a_18: 	dc.b $6
00018DB7 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018DBC 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018DC1 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018DC6 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018DCB EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018DD0 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018DD5 03                         Map_f09a_37: 	dc.b $3
00018DD6 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018DDB 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018DE0 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018DE5 06                         Map_f09a_47: 	dc.b $6
00018DE6 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018DEB 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018DF0 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018DF5 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018DFA ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018DFF 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018E04                            	even
00018E04                            	even
00018E04                            ; ===========================================================================
00018E04                            ; ---------------------------------------------------------------------------
00018E04                            ; Object 73 - Eggman (MZ)
00018E04                            ; ---------------------------------------------------------------------------
00018E04                            
00018E04                            Obj73:					; XREF: Obj_Index
00018E04 7000                       		moveq	#0,d0
00018E06 1028 0024                  		move.b	$24(a0),d0
00018E0A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018E0E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018E12                            ; ===========================================================================
00018E12 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018E14 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018E16 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018E18 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018E1A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018E1C                            
00018E1C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018E1F 0401 04                    		dc.b 4,	1, 4
00018E22 0607 04                    		dc.b 6,	7, 4
00018E25 0800 03                    		dc.b 8,	0, 3
00018E28                            ; ===========================================================================
00018E28                            
00018E28                            Obj73_Main:				; XREF: Obj73_Index
00018E28 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E2E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018E34 117C 000F 0020             		move.b	#$F,$20(a0)
00018E3A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018E40 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018E44 2248                       		movea.l	a0,a1
00018E46 7203                       		moveq	#3,d1
00018E48 6000                       		bra.s	Obj73_LoadBoss
00018E4A                            ; ===========================================================================
00018E4A                            
00018E4A                            Obj73_Loop:
00018E4A 4EB9 0000 E4EE             		jsr	SingleObjLoad2
00018E50 6600                       		bne.s	Obj73_ShipMain
00018E52 12BC 0073                  		move.b	#$73,0(a1)
00018E56 3368 0008 0008             		move.w	8(a0),8(a1)
00018E5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018E62                            
00018E62                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018E62 08A8 0000 0022             		bclr	#0,$22(a0)
00018E68 4229 0025                  		clr.b	$25(a1)
00018E6C 135A 0024                  		move.b	(a2)+,$24(a1)
00018E70 135A 001C                  		move.b	(a2)+,$1C(a1)
00018E74 135A 0018                  		move.b	(a2)+,$18(a1)
00018E78 237C 0001 8942 0004        		move.l	#Map_Eggman,4(a1)
00018E80 337C 0400 0002             		move.w	#$400,2(a1)
00018E86 137C 0004 0001             		move.b	#4,1(a1)
00018E8C 137C 0020 0019             		move.b	#$20,$19(a1)
00018E92 2348 0034                  		move.l	a0,$34(a1)
00018E96 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018E9A                            
00018E9A                            Obj73_ShipMain:
00018E9A 7000                       		moveq	#0,d0
00018E9C 1028 0025                  		move.b	$25(a0),d0
00018EA0 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018EA4 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018EA8 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
00018EAE 4EB9 0000 B0A0             		jsr	AnimateSprite
00018EB4 7003                       		moveq	#3,d0
00018EB6 C028 0022                  		and.b	$22(a0),d0
00018EBA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018EC0 8128 0001                  		or.b	d0,1(a0)
00018EC4 4EF9 0000 E052             		jmp	DisplaySprite
00018ECA                            ; ===========================================================================
00018ECA 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018ECC 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018ECE 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018ED0 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018ED2 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            loc_18302:				; XREF: Obj73_ShipIndex
00018ED4 1028 003F                  		move.b	$3F(a0),d0
00018ED8 5428 003F                  		addq.b	#2,$3F(a0)
00018EDC 4EB9 0000 2D3A             		jsr	(CalcSine).l
00018EE2 E440                       		asr.w	#2,d0
00018EE4 3140 0012                  		move.w	d0,$12(a0)
00018EE8 317C FF00 0010             		move.w	#-$100,$10(a0)
00018EEE 6100 F5AC                  		bsr.w	BossMove
00018EF2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018EF8 6600                       		bne.s	loc_18334
00018EFA 5428 0025                  		addq.b	#2,$25(a0)
00018EFE 4228 0028                  		clr.b	$28(a0)
00018F02 42A8 0010                  		clr.l	$10(a0)
00018F06                            
00018F06                            loc_18334:
00018F06 4EB9 0000 2D14             		jsr	(RandomNumber).l
00018F0C 1140 0034                  		move.b	d0,$34(a0)
00018F10                            
00018F10                            loc_1833E:
00018F10 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018F16 3168 0030 0008             		move.w	$30(a0),8(a0)
00018F1C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018F22 6400                       		bcc.s	locret_18390
00018F24 4A28 0022                  		tst.b	$22(a0)
00018F28 6B00                       		bmi.s	loc_18392
00018F2A 4A28 0020                  		tst.b	$20(a0)
00018F2E 6600                       		bne.s	locret_18390
00018F30 4A28 003E                  		tst.b	$3E(a0)
00018F34 6600                       		bne.s	loc_18374
00018F36 117C 0028 003E             		move.b	#$28,$3E(a0)
00018F3C 303C 00AC                  		move.w	#$AC,d0
00018F40 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018F46                            
00018F46                            loc_18374:
00018F46 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018F4A 7000                       		moveq	#0,d0
00018F4C 4A51                       		tst.w	(a1)
00018F4E 6600                       		bne.s	loc_18382
00018F50 303C 0EEE                  		move.w	#$EEE,d0
00018F54                            
00018F54                            loc_18382:
00018F54 3280                       		move.w	d0,(a1)
00018F56 5328 003E                  		subq.b	#1,$3E(a0)
00018F5A 6600                       		bne.s	locret_18390
00018F5C 117C 000F 0020             		move.b	#$F,$20(a0)
00018F62                            
00018F62                            locret_18390:
00018F62 4E75                       		rts	
00018F64                            ; ===========================================================================
00018F64                            
00018F64                            loc_18392:				; XREF: loc_1833E
00018F64 7064                       		moveq	#100,d0
00018F66 6100 0000                  		bsr.w	AddPoints
00018F6A 117C 0004 0025             		move.b	#4,$25(a0)
00018F70 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018F76 4268 0010                  		clr.w	$10(a0)
00018F7A 4E75                       		rts	
00018F7C                            ; ===========================================================================
00018F7C                            
00018F7C                            loc_183AA:				; XREF: Obj73_ShipIndex
00018F7C 7000                       		moveq	#0,d0
00018F7E 1028 0028                  		move.b	$28(a0),d0
00018F82 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018F86 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018F8A 0228 0006 0028             		andi.b	#6,$28(a0)
00018F90 6000 FF7E                  		bra.w	loc_1833E
00018F94                            ; ===========================================================================
00018F94 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018F96 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018F98 0000                       		dc.w loc_183CA-off_183C2
00018F9A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018F9C                            ; ===========================================================================
00018F9C                            
00018F9C                            loc_183CA:				; XREF: off_183C2
00018F9C 4A68 0010                  		tst.w	$10(a0)
00018FA0 6600                       		bne.s	loc_183FE
00018FA2 7040                       		moveq	#$40,d0
00018FA4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018FAA 6700                       		beq.s	loc_183E6
00018FAC 6500                       		bcs.s	loc_183DE
00018FAE 4440                       		neg.w	d0
00018FB0                            
00018FB0                            loc_183DE:
00018FB0 3140 0012                  		move.w	d0,$12(a0)
00018FB4 6000 F4E6                  		bra.w	BossMove
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            loc_183E6:
00018FB8 317C 0200 0010             		move.w	#$200,$10(a0)
00018FBE 317C 0100 0012             		move.w	#$100,$12(a0)
00018FC4 0828 0000 0022             		btst	#0,$22(a0)
00018FCA 6600                       		bne.s	loc_183FE
00018FCC 4468 0010                  		neg.w	$10(a0)
00018FD0                            
00018FD0                            loc_183FE:
00018FD0 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018FD6 6400                       		bcc.s	Obj73_MakeLava
00018FD8 6100 F4C2                  		bsr.w	BossMove
00018FDC 5968 0012                  		subq.w	#4,$12(a0)
00018FE0                            
00018FE0                            Obj73_MakeLava:
00018FE0 5328 0034                  		subq.b	#1,$34(a0)
00018FE4 6400                       		bcc.s	loc_1845C
00018FE6 4EB9 0000 E4D8             		jsr	SingleObjLoad
00018FEC 6600                       		bne.s	loc_1844A
00018FEE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018FF2 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018FF8 4EB9 0000 2D14             		jsr	(RandomNumber).l
00018FFE 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019004 80FC 0050                  		divu.w	#$50,d0
00019008 4840                       		swap	d0
0001900A 0640 1878                  		addi.w	#$1878,d0
0001900E 3340 0008                  		move.w	d0,8(a1)
00019012 EE09                       		lsr.b	#7,d1
00019014 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001901A                            
0001901A                            loc_1844A:
0001901A 4EB9 0000 2D14             		jsr	(RandomNumber).l
00019020 0200 001F                  		andi.b	#$1F,d0
00019024 0600 0040                  		addi.b	#$40,d0
00019028 1140 0034                  		move.b	d0,$34(a0)
0001902C                            
0001902C                            loc_1845C:
0001902C 0828 0000 0022             		btst	#0,$22(a0)
00019032 6700                       		beq.s	loc_18474
00019034 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001903A 6D00                       		blt.s	locret_1849C
0001903C 317C 1910 0030             		move.w	#$1910,$30(a0)
00019042 6000                       		bra.s	loc_18482
00019044                            ; ===========================================================================
00019044                            
00019044                            loc_18474:
00019044 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001904A 6E00                       		bgt.s	locret_1849C
0001904C 317C 1830 0030             		move.w	#$1830,$30(a0)
00019052                            
00019052                            loc_18482:
00019052 4268 0010                  		clr.w	$10(a0)
00019056 317C FE80 0012             		move.w	#-$180,$12(a0)
0001905C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019062 6400                       		bcc.s	loc_18498
00019064 4468 0012                  		neg.w	$12(a0)
00019068                            
00019068                            loc_18498:
00019068 5428 0028                  		addq.b	#2,$28(a0)
0001906C                            
0001906C                            locret_1849C:
0001906C 4E75                       		rts	
0001906E                            ; ===========================================================================
0001906E                            
0001906E                            Obj73_MakeLava2:			; XREF: off_183C2
0001906E 6100 F42C                  		bsr.w	BossMove
00019072 3028 0038                  		move.w	$38(a0),d0
00019076 0440 022C                  		subi.w	#$22C,d0
0001907A 6E00                       		bgt.s	locret_184F4
0001907C 303C 022C                  		move.w	#$22C,d0
00019080 4A68 0012                  		tst.w	$12(a0)
00019084 6700                       		beq.s	loc_184EA
00019086 4268 0012                  		clr.w	$12(a0)
0001908A 317C 0050 003C             		move.w	#$50,$3C(a0)
00019090 0868 0000 0022             		bchg	#0,$22(a0)
00019096 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001909C 6600                       		bne.s	loc_184EA
0001909E 3368 0030 0008             		move.w	$30(a0),8(a1)
000190A4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000190AA 0669 0018 000C             		addi.w	#$18,$C(a1)
000190B0 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000190B4 137C 0001 0028             		move.b	#1,$28(a1)
000190BA                            
000190BA                            loc_184EA:
000190BA 5368 003C                  		subq.w	#1,$3C(a0)
000190BE 6600                       		bne.s	locret_184F4
000190C0 5428 0028                  		addq.b	#2,$28(a0)
000190C4                            
000190C4                            locret_184F4:
000190C4 4E75                       		rts	
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            loc_184F6:				; XREF: Obj73_ShipIndex
000190C6 5368 003C                  		subq.w	#1,$3C(a0)
000190CA 6B00                       		bmi.s	loc_18500
000190CC 6000 F38C                  		bra.w	BossDefeated
000190D0                            ; ===========================================================================
000190D0                            
000190D0                            loc_18500:
000190D0 08E8 0000 0022             		bset	#0,$22(a0)
000190D6 08A8 0007 0022             		bclr	#7,$22(a0)
000190DC 4268 0010                  		clr.w	$10(a0)
000190E0 5428 0025                  		addq.b	#2,$25(a0)
000190E4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000190EA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000190EE 6600                       		bne.s	locret_1852A
000190F0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000190F6 4268 0012                  		clr.w	$12(a0)
000190FA                            
000190FA                            locret_1852A:
000190FA 4E75                       		rts	
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            loc_1852C:				; XREF: Obj73_ShipIndex
000190FC 5268 003C                  		addq.w	#1,$3C(a0)
00019100 6700                       		beq.s	loc_18544
00019102 6A00                       		bpl.s	loc_1854E
00019104 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001910A 6400                       		bcc.s	loc_18544
0001910C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019112 6000                       		bra.s	loc_1857A
00019114                            ; ===========================================================================
00019114                            
00019114                            loc_18544:
00019114 4268 0012                  		clr.w	$12(a0)
00019118 4268 003C                  		clr.w	$3C(a0)
0001911C 6000                       		bra.s	loc_1857A
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            loc_1854E:
0001911E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019124 6500                       		bcs.s	loc_18566
00019126 6700                       		beq.s	loc_1856C
00019128 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001912E 6500                       		bcs.s	loc_1857A
00019130 5428 0025                  		addq.b	#2,$25(a0)
00019134 6000                       		bra.s	loc_1857A
00019136                            ; ===========================================================================
00019136                            
00019136                            loc_18566:
00019136 5168 0012                  		subq.w	#8,$12(a0)
0001913A 6000                       		bra.s	loc_1857A
0001913C                            ; ===========================================================================
0001913C                            
0001913C                            loc_1856C:
0001913C 4268 0012                  		clr.w	$12(a0)
00019140 303C 0083                  		move.w	#$83,d0
00019144 4EB9 0000 159A             		jsr	(PlaySound).l	; play MZ music
0001914A                            
0001914A                            loc_1857A:
0001914A 6100 F350                  		bsr.w	BossMove
0001914E 6000 FDC0                  		bra.w	loc_1833E
00019152                            ; ===========================================================================
00019152                            
00019152                            loc_18582:				; XREF: Obj73_ShipIndex
00019152 317C 0500 0010             		move.w	#$500,$10(a0)
00019158 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001915E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019164 6400                       		bcc.s	loc_1859C
00019166 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001916A 6000                       		bra.s	loc_185A2
0001916C                            ; ===========================================================================
0001916C                            
0001916C                            loc_1859C:
0001916C 4A28 0001                  		tst.b	1(a0)
00019170 6A00                       		bpl.s	Obj73_ShipDel
00019172                            
00019172                            loc_185A2:
00019172 6100 F328                  		bsr.w	BossMove
00019176 6000 FD98                  		bra.w	loc_1833E
0001917A                            ; ===========================================================================
0001917A                            
0001917A                            Obj73_ShipDel:
0001917A 4EF9 0000 E08E             		jmp	DeleteObject
00019180                            ; ===========================================================================
00019180                            
00019180                            Obj73_FaceMain:				; XREF: Obj73_Index
00019180 7000                       		moveq	#0,d0
00019182 7201                       		moveq	#1,d1
00019184 2268 0034                  		movea.l	$34(a0),a1
00019188 1029 0025                  		move.b	$25(a1),d0
0001918C 5540                       		subq.w	#2,d0
0001918E 6600                       		bne.s	loc_185D2
00019190 0829 0001 0028             		btst	#1,$28(a1)
00019196 6700                       		beq.s	loc_185DA
00019198 4A69 0012                  		tst.w	$12(a1)
0001919C 6600                       		bne.s	loc_185DA
0001919E 7204                       		moveq	#4,d1
000191A0 6000                       		bra.s	loc_185EE
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            loc_185D2:
000191A2 5500                       		subq.b	#2,d0
000191A4 6B00                       		bmi.s	loc_185DA
000191A6 720A                       		moveq	#$A,d1
000191A8 6000                       		bra.s	loc_185EE
000191AA                            ; ===========================================================================
000191AA                            
000191AA                            loc_185DA:
000191AA 4A29 0020                  		tst.b	$20(a1)
000191AE 6600                       		bne.s	loc_185E4
000191B0 7205                       		moveq	#5,d1
000191B2 6000                       		bra.s	loc_185EE
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            loc_185E4:
000191B4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000191BA 6500                       		bcs.s	loc_185EE
000191BC 7204                       		moveq	#4,d1
000191BE                            
000191BE                            loc_185EE:
000191BE 1141 001C                  		move.b	d1,$1C(a0)
000191C2 5900                       		subq.b	#4,d0
000191C4 6600                       		bne.s	loc_18602
000191C6 117C 0006 001C             		move.b	#6,$1C(a0)
000191CC 4A28 0001                  		tst.b	1(a0)
000191D0 6A00                       		bpl.s	Obj73_FaceDel
000191D2                            
000191D2                            loc_18602:
000191D2 6000                       		bra.s	Obj73_Display
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            Obj73_FaceDel:
000191D4 4EF9 0000 E08E             		jmp	DeleteObject
000191DA                            ; ===========================================================================
000191DA                            
000191DA                            Obj73_FlameMain:			; XREF: Obj73_Index
000191DA 117C 0007 001C             		move.b	#7,$1C(a0)
000191E0 2268 0034                  		movea.l	$34(a0),a1
000191E4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000191EA 6D00                       		blt.s	loc_1862A
000191EC 117C 000B 001C             		move.b	#$B,$1C(a0)
000191F2 4A28 0001                  		tst.b	1(a0)
000191F6 6A00                       		bpl.s	Obj73_FlameDel
000191F8 6000                       		bra.s	loc_18636
000191FA                            ; ===========================================================================
000191FA                            
000191FA                            loc_1862A:
000191FA 4A69 0010                  		tst.w	$10(a1)
000191FE 6700                       		beq.s	loc_18636
00019200 117C 0008 001C             		move.b	#8,$1C(a0)
00019206                            
00019206                            loc_18636:
00019206 6000                       		bra.s	Obj73_Display
00019208                            ; ===========================================================================
00019208                            
00019208                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019208 4EF9 0000 E08E             		jmp	DeleteObject
0001920E                            ; ===========================================================================
0001920E                            
0001920E                            Obj73_Display:
0001920E 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
00019214 4EB9 0000 B0A0             		jsr	AnimateSprite
0001921A                            
0001921A                            loc_1864A:
0001921A 2268 0034                  		movea.l	$34(a0),a1
0001921E 3169 0008 0008             		move.w	8(a1),8(a0)
00019224 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001922A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019230 7003                       		moveq	#3,d0
00019232 C028 0022                  		and.b	$22(a0),d0
00019236 0228 00FC 0001             		andi.b	#-4,1(a0)
0001923C 8128 0001                  		or.b	d0,1(a0)
00019240 4EF9 0000 E052             		jmp	DisplaySprite
00019246                            ; ===========================================================================
00019246                            
00019246                            Obj73_TubeMain:				; XREF: Obj73_Index
00019246 2268 0034                  		movea.l	$34(a0),a1
0001924A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019250 6600                       		bne.s	loc_18688
00019252 4A28 0001                  		tst.b	1(a0)
00019256 6A00                       		bpl.s	Obj73_TubeDel
00019258                            
00019258                            loc_18688:
00019258 217C 0001 8A0A 0004        		move.l	#Map_BossItems,4(a0)
00019260 317C 246C 0002             		move.w	#$246C,2(a0)
00019266 117C 0004 001A             		move.b	#4,$1A(a0)
0001926C 60AC                       		bra.s	loc_1864A
0001926E                            ; ===========================================================================
0001926E                            
0001926E                            Obj73_TubeDel:
0001926E 4EF9 0000 E08E             		jmp	DeleteObject
00019274                            ; ===========================================================================
00019274                            ; ---------------------------------------------------------------------------
00019274                            ; Object 74 - lava that	Eggman drops (MZ)
00019274                            ; ---------------------------------------------------------------------------
00019274                            
00019274                            Obj74:					; XREF: Obj_Index
00019274 7000                       		moveq	#0,d0
00019276 1028 0024                  		move.b	$24(a0),d0
0001927A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001927E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019282 4EF9 0000 E052             		jmp	DisplaySprite
00019288                            ; ===========================================================================
00019288 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001928A 0000                       		dc.w Obj74_Action-Obj74_Index
0001928C 0000                       		dc.w loc_18886-Obj74_Index
0001928E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019290                            ; ===========================================================================
00019290                            
00019290                            Obj74_Main:				; XREF: Obj74_Index
00019290 117C 0008 0016             		move.b	#8,$16(a0)
00019296 117C 0008 0017             		move.b	#8,$17(a0)
0001929C 217C 0000 BC9E 0004        		move.l	#Map_obj14,4(a0)
000192A4 317C 0345 0002             		move.w	#$345,2(a0)
000192AA 117C 0004 0001             		move.b	#4,1(a0)
000192B0 117C 0005 0018             		move.b	#5,$18(a0)
000192B6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192BC 117C 0008 0019             		move.b	#8,$19(a0)
000192C2 5428 0024                  		addq.b	#2,$24(a0)
000192C6 4A28 0028                  		tst.b	$28(a0)
000192CA 6600                       		bne.s	loc_1870A
000192CC 117C 008B 0020             		move.b	#$8B,$20(a0)
000192D2 5428 0024                  		addq.b	#2,$24(a0)
000192D6 6000 0000                  		bra.w	loc_18886
000192DA                            ; ===========================================================================
000192DA                            
000192DA                            loc_1870A:
000192DA 117C 001E 0029             		move.b	#$1E,$29(a0)
000192E0 303C 00AE                  		move.w	#$AE,d0
000192E4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play lava sound
000192EA                            
000192EA                            Obj74_Action:				; XREF: Obj74_Index
000192EA 7000                       		moveq	#0,d0
000192EC 1028 0025                  		move.b	$25(a0),d0
000192F0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000192F4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000192F8 4EB9 0000 E02C             		jsr	SpeedToPos
000192FE 43F9 0000 EF0C             		lea	(Ani_obj14).l,a1
00019304 4EB9 0000 B0A0             		jsr	AnimateSprite
0001930A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019310 6200                       		bhi.s	Obj74_Delete
00019312 4E75                       		rts	
00019314                            ; ===========================================================================
00019314                            
00019314                            Obj74_Delete:
00019314 4EF9 0000 E08E             		jmp	DeleteObject
0001931A                            ; ===========================================================================
0001931A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001931C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001931E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019320 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019322                            ; ===========================================================================
00019322                            
00019322                            Obj74_Drop:				; XREF: Obj74_Index2
00019322 08E8 0001 0022             		bset	#1,$22(a0)
00019328 5328 0029                  		subq.b	#1,$29(a0)
0001932C 6A00                       		bpl.s	locret_18780
0001932E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019334 4228 0028                  		clr.b	$28(a0)
00019338 0668 0018 0012             		addi.w	#$18,$12(a0)
0001933E 08A8 0001 0022             		bclr	#1,$22(a0)
00019344 6100 C618                  		bsr.w	ObjHitFloor
00019348 4A41                       		tst.w	d1
0001934A 6A00                       		bpl.s	locret_18780
0001934C 5428 0025                  		addq.b	#2,$25(a0)
00019350                            
00019350                            locret_18780:
00019350 4E75                       		rts	
00019352                            ; ===========================================================================
00019352                            
00019352                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019352 5568 000C                  		subq.w	#2,$C(a0)
00019356 08E8 0007 0002             		bset	#7,2(a0)
0001935C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019362 4268 0012                  		clr.w	$12(a0)
00019366 3168 0008 0030             		move.w	8(a0),$30(a0)
0001936C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019372 117C 0003 0029             		move.b	#3,$29(a0)
00019378 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001937E 6600                       		bne.s	loc_187CA
00019380 47D1                       		lea	(a1),a3
00019382 45D0                       		lea	(a0),a2
00019384 7003                       		moveq	#3,d0
00019386                            
00019386                            Obj74_Loop:
00019386 26DA                       		move.l	(a2)+,(a3)+
00019388 26DA                       		move.l	(a2)+,(a3)+
0001938A 26DA                       		move.l	(a2)+,(a3)+
0001938C 26DA                       		move.l	(a2)+,(a3)+
0001938E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019392                            
00019392 4469 0010                  		neg.w	$10(a1)
00019396 5429 0025                  		addq.b	#2,$25(a1)
0001939A                            
0001939A                            loc_187CA:
0001939A 5428 0025                  		addq.b	#2,$25(a0)
0001939E 4E75                       		rts	
000193A0                            
000193A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000193A0                            
000193A0                            
000193A0                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000193A0 4EB9 0000 E4EE             		jsr	SingleObjLoad2
000193A6 6600                       		bne.s	locret_187EE
000193A8 3368 0008 0008             		move.w	8(a0),8(a1)
000193AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000193B4 12BC 0074                  		move.b	#$74,(a1)
000193B8 337C 0067 0028             		move.w	#$67,$28(a1)
000193BE                            
000193BE                            locret_187EE:
000193BE 4E75                       		rts	
000193C0                            ; End of function Obj74_Duplicate2
000193C0                            
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            Obj74_Duplicate:			; XREF: Obj74_Index2
000193C0 6100 C59C                  		bsr.w	ObjHitFloor
000193C4 4A41                       		tst.w	d1
000193C6 6A00                       		bpl.s	loc_18826
000193C8 3028 0008                  		move.w	8(a0),d0
000193CC 0C40 1940                  		cmpi.w	#$1940,d0
000193D0 6E00                       		bgt.s	loc_1882C
000193D2 3228 0030                  		move.w	$30(a0),d1
000193D6 B240                       		cmp.w	d0,d1
000193D8 6700                       		beq.s	loc_1881E
000193DA 0240 0010                  		andi.w	#$10,d0
000193DE 0241 0010                  		andi.w	#$10,d1
000193E2 B240                       		cmp.w	d0,d1
000193E4 6700                       		beq.s	loc_1881E
000193E6 61B8                       		bsr.s	Obj74_Duplicate2
000193E8 3168 0008 0032             		move.w	8(a0),$32(a0)
000193EE                            
000193EE                            loc_1881E:
000193EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000193F4 4E75                       		rts	
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            loc_18826:
000193F6 5428 0025                  		addq.b	#2,$25(a0)
000193FA 4E75                       		rts	
000193FC                            ; ===========================================================================
000193FC                            
000193FC                            loc_1882C:
000193FC 5428 0024                  		addq.b	#2,$24(a0)
00019400 4E75                       		rts	
00019402                            ; ===========================================================================
00019402                            
00019402                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019402 08A8 0001 0022             		bclr	#1,$22(a0)
00019408 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001940E 3028 0008                  		move.w	8(a0),d0
00019412 9068 0032                  		sub.w	$32(a0),d0
00019416 6A00                       		bpl.s	loc_1884A
00019418 4440                       		neg.w	d0
0001941A                            
0001941A                            loc_1884A:
0001941A 0C40 0012                  		cmpi.w	#$12,d0
0001941E 6600                       		bne.s	loc_18856
00019420 08A8 0007 0002             		bclr	#7,2(a0)
00019426                            
00019426                            loc_18856:
00019426 6100 C536                  		bsr.w	ObjHitFloor
0001942A 4A41                       		tst.w	d1
0001942C 6A00                       		bpl.s	locret_1887E
0001942E 5328 0029                  		subq.b	#1,$29(a0)
00019432 6700                       		beq.s	Obj74_Delete2
00019434 4268 0012                  		clr.w	$12(a0)
00019438 3168 0032 0008             		move.w	$32(a0),8(a0)
0001943E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019444 08E8 0007 0002             		bset	#7,2(a0)
0001944A 5528 0025                  		subq.b	#2,$25(a0)
0001944E                            
0001944E                            locret_1887E:
0001944E 4E75                       		rts	
00019450                            ; ===========================================================================
00019450                            
00019450                            Obj74_Delete2:
00019450 4EF9 0000 E08E             		jmp	DeleteObject
00019456                            ; ===========================================================================
00019456                            
00019456                            loc_18886:				; XREF: Obj74_Index
00019456 08E8 0007 0002             		bset	#7,2(a0)
0001945C 5328 0029                  		subq.b	#1,$29(a0)
00019460 6600                       		bne.s	Obj74_Animate
00019462 117C 0001 001C             		move.b	#1,$1C(a0)
00019468 5968 000C                  		subq.w	#4,$C(a0)
0001946C 4228 0020                  		clr.b	$20(a0)
00019470                            
00019470                            Obj74_Animate:
00019470 43F9 0000 EF0C             		lea	(Ani_obj14).l,a1
00019476 4EF9 0000 B0A0             		jmp	AnimateSprite
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            Obj74_Delete3:				; XREF: Obj74_Index
0001947C 4EF9 0000 E08E             		jmp	DeleteObject
00019482                            ; ===========================================================================
00019482                            
00019482                            Obj7A_Delete:
00019482 4EF9 0000 E08E             		jmp	DeleteObject
00019488                            ; ===========================================================================
00019488                            ; ---------------------------------------------------------------------------
00019488                            ; Object 7A - Eggman (SLZ)
00019488                            ; ---------------------------------------------------------------------------
00019488                            
00019488                            Obj7A:					; XREF: Obj_Index
00019488 7000                       		moveq	#0,d0
0001948A 1028 0024                  		move.b	$24(a0),d0
0001948E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019492 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019496                            ; ===========================================================================
00019496 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019498 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001949A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001949C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001949E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000194A0                            
000194A0 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000194A3 0401 04                    		dc.b 4,	1, 4
000194A6 0607 04                    		dc.b 6,	7, 4
000194A9 0800 03                    		dc.b 8,	0, 3
000194AC                            ; ===========================================================================
000194AC                            
000194AC                            Obj7A_Main:				; XREF: Obj7A_Index
000194AC 317C 2188 0008             		move.w	#$2188,8(a0)
000194B2 317C 0228 000C             		move.w	#$228,$C(a0)
000194B8 3168 0008 0030             		move.w	8(a0),$30(a0)
000194BE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194C4 117C 000F 0020             		move.b	#$F,$20(a0)
000194CA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000194D0 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000194D4 2248                       		movea.l	a0,a1
000194D6 7203                       		moveq	#3,d1
000194D8 6000                       		bra.s	Obj7A_LoadBoss
000194DA                            ; ===========================================================================
000194DA                            
000194DA                            Obj7A_Loop:
000194DA 4EB9 0000 E4EE             		jsr	SingleObjLoad2
000194E0 6600                       		bne.s	loc_1895C
000194E2 12BC 007A                  		move.b	#$7A,0(a1)
000194E6 3368 0008 0008             		move.w	8(a0),8(a1)
000194EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194F2                            
000194F2                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000194F2 08A8 0000 0022             		bclr	#0,$22(a0)
000194F8 4229 0025                  		clr.b	$25(a1)
000194FC 135A 0024                  		move.b	(a2)+,$24(a1)
00019500 135A 001C                  		move.b	(a2)+,$1C(a1)
00019504 135A 0018                  		move.b	(a2)+,$18(a1)
00019508 237C 0001 8942 0004        		move.l	#Map_Eggman,4(a1)
00019510 337C 0400 0002             		move.w	#$400,2(a1)
00019516 137C 0004 0001             		move.b	#4,1(a1)
0001951C 137C 0020 0019             		move.b	#$20,$19(a1)
00019522 2348 0034                  		move.l	a0,$34(a1)
00019526 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001952A                            
0001952A                            loc_1895C:
0001952A 43F8 D040                  		lea	($FFFFD040).w,a1
0001952E 45E8 002A                  		lea	$2A(a0),a2
00019532 705E                       		moveq	#$5E,d0
00019534 723E                       		moveq	#$3E,d1
00019536                            
00019536                            loc_18968:
00019536 B011                       		cmp.b	(a1),d0
00019538 6600                       		bne.s	loc_18974
0001953A 4A29 0028                  		tst.b	$28(a1)
0001953E 6700                       		beq.s	loc_18974
00019540 34C9                       		move.w	a1,(a2)+
00019542                            
00019542                            loc_18974:
00019542 D2FC 0040                  		adda.w	#$40,a1
00019546 51C9 FFEE                  		dbf	d1,loc_18968
0001954A                            
0001954A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001954A 7000                       		moveq	#0,d0
0001954C 1028 0025                  		move.b	$25(a0),d0
00019550 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019554 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019558 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
0001955E 4EB9 0000 B0A0             		jsr	AnimateSprite
00019564 7003                       		moveq	#3,d0
00019566 C028 0022                  		and.b	$22(a0),d0
0001956A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019570 8128 0001                  		or.b	d0,1(a0)
00019574 4EF9 0000 E052             		jmp	DisplaySprite
0001957A                            ; ===========================================================================
0001957A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001957C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001957E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019580 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019582 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019584 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019586                            ; ===========================================================================
00019586                            
00019586                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019586 317C FF00 0010             		move.w	#-$100,$10(a0)
0001958C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019592 6400                       		bcc.s	loc_189CA
00019594 5428 0025                  		addq.b	#2,$25(a0)
00019598                            
00019598                            loc_189CA:
00019598 6100 EF02                  		bsr.w	BossMove
0001959C 1028 003F                  		move.b	$3F(a0),d0
000195A0 5428 003F                  		addq.b	#2,$3F(a0)
000195A4 4EB9 0000 2D3A             		jsr	(CalcSine).l
000195AA EC40                       		asr.w	#6,d0
000195AC D068 0038                  		add.w	$38(a0),d0
000195B0 3140 000C                  		move.w	d0,$C(a0)
000195B4 3168 0030 0008             		move.w	$30(a0),8(a0)
000195BA 6000                       		bra.s	loc_189FE
000195BC                            ; ===========================================================================
000195BC                            
000195BC                            loc_189EE:
000195BC 6100 EEDE                  		bsr.w	BossMove
000195C0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000195C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000195CC                            
000195CC                            loc_189FE:
000195CC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000195D2 6400                       		bcc.s	locret_18A44
000195D4 4A28 0022                  		tst.b	$22(a0)
000195D8 6B00                       		bmi.s	loc_18A46
000195DA 4A28 0020                  		tst.b	$20(a0)
000195DE 6600                       		bne.s	locret_18A44
000195E0 4A28 003E                  		tst.b	$3E(a0)
000195E4 6600                       		bne.s	loc_18A28
000195E6 117C 0020 003E             		move.b	#$20,$3E(a0)
000195EC 303C 00AC                  		move.w	#$AC,d0
000195F0 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000195F6                            
000195F6                            loc_18A28:
000195F6 43F8 FB22                  		lea	($FFFFFB22).w,a1
000195FA 7000                       		moveq	#0,d0
000195FC 4A51                       		tst.w	(a1)
000195FE 6600                       		bne.s	loc_18A36
00019600 303C 0EEE                  		move.w	#$EEE,d0
00019604                            
00019604                            loc_18A36:
00019604 3280                       		move.w	d0,(a1)
00019606 5328 003E                  		subq.b	#1,$3E(a0)
0001960A 6600                       		bne.s	locret_18A44
0001960C 117C 000F 0020             		move.b	#$F,$20(a0)
00019612                            
00019612                            locret_18A44:
00019612 4E75                       		rts	
00019614                            ; ===========================================================================
00019614                            
00019614                            loc_18A46:
00019614 7064                       		moveq	#100,d0
00019616 6100 0000                  		bsr.w	AddPoints
0001961A 117C 0006 0025             		move.b	#6,$25(a0)
00019620 117C 0078 003C             		move.b	#$78,$3C(a0)
00019626 4268 0010                  		clr.w	$10(a0)
0001962A 4E75                       		rts	
0001962C                            ; ===========================================================================
0001962C                            
0001962C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001962C 3028 0030                  		move.w	$30(a0),d0
00019630 317C 0200 0010             		move.w	#$200,$10(a0)
00019636 0828 0000 0022             		btst	#0,$22(a0)
0001963C 6600                       		bne.s	loc_18A7C
0001963E 4468 0010                  		neg.w	$10(a0)
00019642 0C40 2008                  		cmpi.w	#$2008,d0
00019646 6E00                       		bgt.s	loc_18A88
00019648 6000                       		bra.s	loc_18A82
0001964A                            ; ===========================================================================
0001964A                            
0001964A                            loc_18A7C:
0001964A 0C40 2138                  		cmpi.w	#$2138,d0
0001964E 6D00                       		blt.s	loc_18A88
00019650                            
00019650                            loc_18A82:
00019650 0868 0000 0022             		bchg	#0,$22(a0)
00019656                            
00019656                            loc_18A88:
00019656 3028 0008                  		move.w	8(a0),d0
0001965A 72FF                       		moveq	#-1,d1
0001965C 7402                       		moveq	#2,d2
0001965E 45E8 002A                  		lea	$2A(a0),a2
00019662 7828                       		moveq	#$28,d4
00019664 4A68 0010                  		tst.w	$10(a0)
00019668 6A00                       		bpl.s	loc_18A9E
0001966A 4444                       		neg.w	d4
0001966C                            
0001966C                            loc_18A9E:
0001966C 321A                       		move.w	(a2)+,d1
0001966E 2641                       		movea.l	d1,a3
00019670 082B 0003 0022             		btst	#3,$22(a3)
00019676 6600                       		bne.s	loc_18AB4
00019678 362B 0008                  		move.w	8(a3),d3
0001967C D644                       		add.w	d4,d3
0001967E 9640                       		sub.w	d0,d3
00019680 6700                       		beq.s	loc_18AC0
00019682                            
00019682                            loc_18AB4:
00019682 51CA FFE8                  		dbf	d2,loc_18A9E
00019686                            
00019686 1142 0028                  		move.b	d2,$28(a0)
0001968A 6000 FF0C                  		bra.w	loc_189CA
0001968E                            ; ===========================================================================
0001968E                            
0001968E                            loc_18AC0:
0001968E 1142 0028                  		move.b	d2,$28(a0)
00019692 5428 0025                  		addq.b	#2,$25(a0)
00019696 117C 0028 003C             		move.b	#$28,$3C(a0)
0001969C 6000 FEFA                  		bra.w	loc_189CA
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000196A0 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000196A6 6600                       		bne.s	loc_18B36
000196A8 70FF                       		moveq	#-1,d0
000196AA 1028 0028                  		move.b	$28(a0),d0
000196AE 4880                       		ext.w	d0
000196B0 6B00                       		bmi.s	loc_18B40
000196B2 5540                       		subq.w	#2,d0
000196B4 4440                       		neg.w	d0
000196B6 D040                       		add.w	d0,d0
000196B8 43E8 002A                  		lea	$2A(a0),a1
000196BC 3031 0000                  		move.w	(a1,d0.w),d0
000196C0 2440                       		movea.l	d0,a2
000196C2 43F8 D040                  		lea	($FFFFD040).w,a1
000196C6 723E                       		moveq	#$3E,d1
000196C8                            
000196C8                            loc_18AFA:
000196C8 B0A9 003C                  		cmp.l	$3C(a1),d0
000196CC 6700                       		beq.s	loc_18B40
000196CE D2FC 0040                  		adda.w	#$40,a1
000196D2 51C9 FFF4                  		dbf	d1,loc_18AFA
000196D6                            
000196D6 2F08                       		move.l	a0,-(sp)
000196D8 41D2                       		lea	(a2),a0
000196DA 4EB9 0000 E4EE             		jsr	SingleObjLoad2
000196E0 205F                       		movea.l	(sp)+,a0
000196E2 6600                       		bne.s	loc_18B40
000196E4 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000196E8 3368 0008 0008             		move.w	8(a0),8(a1)
000196EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000196F4 0669 0020 000C             		addi.w	#$20,$C(a1)
000196FA 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019700 234A 003C                  		move.l	a2,$3C(a1)
00019704                            
00019704                            loc_18B36:
00019704 5328 003C                  		subq.b	#1,$3C(a0)
00019708 6700                       		beq.s	loc_18B40
0001970A 6000 FEC0                  		bra.w	loc_189FE
0001970E                            ; ===========================================================================
0001970E                            
0001970E                            loc_18B40:
0001970E 5528 0025                  		subq.b	#2,$25(a0)
00019712 6000 FE84                  		bra.w	loc_189CA
00019716                            ; ===========================================================================
00019716                            
00019716                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019716 5328 003C                  		subq.b	#1,$3C(a0)
0001971A 6B00                       		bmi.s	loc_18B52
0001971C 6000 ED3C                  		bra.w	BossDefeated
00019720                            ; ===========================================================================
00019720                            
00019720                            loc_18B52:
00019720 5428 0025                  		addq.b	#2,$25(a0)
00019724 4268 0012                  		clr.w	$12(a0)
00019728 08E8 0000 0022             		bset	#0,$22(a0)
0001972E 08A8 0007 0022             		bclr	#7,$22(a0)
00019734 4268 0010                  		clr.w	$10(a0)
00019738 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001973E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019742 6600                       		bne.s	loc_18B7C
00019744 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001974A                            
0001974A                            loc_18B7C:
0001974A 6000 FE80                  		bra.w	loc_189FE
0001974E                            ; ===========================================================================
0001974E                            
0001974E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001974E 5228 003C                  		addq.b	#1,$3C(a0)
00019752 6700                       		beq.s	loc_18B90
00019754 6A00                       		bpl.s	loc_18B96
00019756 0668 0018 0012             		addi.w	#$18,$12(a0)
0001975C 6000                       		bra.s	loc_18BC2
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_18B90:
0001975E 4268 0012                  		clr.w	$12(a0)
00019762 6000                       		bra.s	loc_18BC2
00019764                            ; ===========================================================================
00019764                            
00019764                            loc_18B96:
00019764 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001976A 6500                       		bcs.s	loc_18BAE
0001976C 6700                       		beq.s	loc_18BB4
0001976E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019774 6500                       		bcs.s	loc_18BC2
00019776 5428 0025                  		addq.b	#2,$25(a0)
0001977A 6000                       		bra.s	loc_18BC2
0001977C                            ; ===========================================================================
0001977C                            
0001977C                            loc_18BAE:
0001977C 5168 0012                  		subq.w	#8,$12(a0)
00019780 6000                       		bra.s	loc_18BC2
00019782                            ; ===========================================================================
00019782                            
00019782                            loc_18BB4:
00019782 4268 0012                  		clr.w	$12(a0)
00019786 303C 0084                  		move.w	#$84,d0
0001978A 4EB9 0000 159A             		jsr	(PlaySound).l	; play SLZ music
00019790                            
00019790                            loc_18BC2:
00019790 6000 FE2A                  		bra.w	loc_189EE
00019794                            ; ===========================================================================
00019794                            
00019794                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019794 317C 0400 0010             		move.w	#$400,$10(a0)
0001979A 317C FFC0 0012             		move.w	#-$40,$12(a0)
000197A0 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000197A6 6400                       		bcc.s	loc_18BE0
000197A8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000197AC 6000                       		bra.s	loc_18BE8
000197AE                            ; ===========================================================================
000197AE                            
000197AE                            loc_18BE0:
000197AE 4A28 0001                  		tst.b	1(a0)
000197B2 6A00 FCCE                  		bpl.w	Obj7A_Delete
000197B6                            
000197B6                            loc_18BE8:
000197B6 6100 ECE4                  		bsr.w	BossMove
000197BA 6000 FDDC                  		bra.w	loc_189CA
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000197BE 7000                       		moveq	#0,d0
000197C0 7201                       		moveq	#1,d1
000197C2 2268 0034                  		movea.l	$34(a0),a1
000197C6 1029 0025                  		move.b	$25(a1),d0
000197CA 0C00 0006                  		cmpi.b	#6,d0
000197CE 6B00                       		bmi.s	loc_18C06
000197D0 720A                       		moveq	#$A,d1
000197D2 6000                       		bra.s	loc_18C1A
000197D4                            ; ===========================================================================
000197D4                            
000197D4                            loc_18C06:
000197D4 4A29 0020                  		tst.b	$20(a1)
000197D8 6600                       		bne.s	loc_18C10
000197DA 7205                       		moveq	#5,d1
000197DC 6000                       		bra.s	loc_18C1A
000197DE                            ; ===========================================================================
000197DE                            
000197DE                            loc_18C10:
000197DE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000197E4 6500                       		bcs.s	loc_18C1A
000197E6 7204                       		moveq	#4,d1
000197E8                            
000197E8                            loc_18C1A:
000197E8 1141 001C                  		move.b	d1,$1C(a0)
000197EC 0C00 000A                  		cmpi.b	#$A,d0
000197F0 6600                       		bne.s	loc_18C32
000197F2 117C 0006 001C             		move.b	#6,$1C(a0)
000197F8 4A28 0001                  		tst.b	1(a0)
000197FC 6A00 FC84                  		bpl.w	Obj7A_Delete
00019800                            
00019800                            loc_18C32:
00019800 6000                       		bra.s	loc_18C6C
00019802                            ; ===========================================================================
00019802                            
00019802                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019802 117C 0008 001C             		move.b	#8,$1C(a0)
00019808 2268 0034                  		movea.l	$34(a0),a1
0001980C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019812 6600                       		bne.s	loc_18C56
00019814 4A28 0001                  		tst.b	1(a0)
00019818 6A00 FC68                  		bpl.w	Obj7A_Delete
0001981C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019822 6000                       		bra.s	loc_18C6C
00019824                            ; ===========================================================================
00019824                            
00019824                            loc_18C56:
00019824 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001982A 6E00                       		bgt.s	loc_18C6C
0001982C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019832 6D00                       		blt.s	loc_18C6C
00019834 117C 0007 001C             		move.b	#7,$1C(a0)
0001983A                            
0001983A                            loc_18C6C:
0001983A 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
00019840 4EB9 0000 B0A0             		jsr	AnimateSprite
00019846                            
00019846                            loc_18C78:
00019846 2268 0034                  		movea.l	$34(a0),a1
0001984A 3169 0008 0008             		move.w	8(a1),8(a0)
00019850 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019856 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001985C 7003                       		moveq	#3,d0
0001985E C028 0022                  		and.b	$22(a0),d0
00019862 0228 00FC 0001             		andi.b	#-4,1(a0)
00019868 8128 0001                  		or.b	d0,1(a0)
0001986C 4EF9 0000 E052             		jmp	DisplaySprite
00019872                            ; ===========================================================================
00019872                            
00019872                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019872 2268 0034                  		movea.l	$34(a0),a1
00019876 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001987C 6600                       		bne.s	loc_18CB8
0001987E 4A28 0001                  		tst.b	1(a0)
00019882 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019886                            
00019886                            loc_18CB8:
00019886 217C 0001 8A0A 0004        		move.l	#Map_BossItems,4(a0)
0001988E 317C 246C 0002             		move.w	#$246C,2(a0)
00019894 117C 0003 001A             		move.b	#3,$1A(a0)
0001989A 60AA                       		bra.s	loc_18C78
0001989C                            ; ===========================================================================
0001989C                            ; ---------------------------------------------------------------------------
0001989C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001989C                            ; ---------------------------------------------------------------------------
0001989C                            
0001989C                            Obj7B:					; XREF: Obj_Index
0001989C 7000                       		moveq	#0,d0
0001989E 1028 0024                  		move.b	$24(a0),d0
000198A2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000198A6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000198AA 3028 0030                  		move.w	$30(a0),d0
000198AE 0240 FF80                  		andi.w	#$FF80,d0
000198B2 3238 F700                  		move.w	($FFFFF700).w,d1
000198B6 0441 0080                  		subi.w	#$80,d1
000198BA 0241 FF80                  		andi.w	#$FF80,d1
000198BE 9041                       		sub.w	d1,d0
000198C0 6B00 FBC0                  		bmi.w	Obj7A_Delete
000198C4 0C40 0280                  		cmpi.w	#$280,d0
000198C8 6200 FBB8                  		bhi.w	Obj7A_Delete
000198CC 4EF9 0000 E052             		jmp	DisplaySprite
000198D2                            ; ===========================================================================
000198D2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000198D4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000198D6 0000                       		dc.w loc_18DC6-Obj7B_Index
000198D8 0000                       		dc.w loc_18EAA-Obj7B_Index
000198DA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000198DC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            Obj7B_Main:				; XREF: Obj7B_Index
000198DE 217C 0001 241E 0004        		move.l	#Map_obj5Ea,4(a0)
000198E6 317C 0518 0002             		move.w	#$518,2(a0)
000198EC 117C 0001 001A             		move.b	#1,$1A(a0)
000198F2 0028 0004 0001             		ori.b	#4,1(a0)
000198F8 117C 0004 0018             		move.b	#4,$18(a0)
000198FE 117C 008B 0020             		move.b	#$8B,$20(a0)
00019904 117C 000C 0019             		move.b	#$C,$19(a0)
0001990A 2268 003C                  		movea.l	$3C(a0),a1
0001990E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019914 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001991A 08E8 0000 0022             		bset	#0,$22(a0)
00019920 3028 0008                  		move.w	8(a0),d0
00019924 B069 0008                  		cmp.w	8(a1),d0
00019928 6E00                       		bgt.s	loc_18D68
0001992A 08A8 0000 0022             		bclr	#0,$22(a0)
00019930 117C 0002 003A             		move.b	#2,$3A(a0)
00019936                            
00019936                            loc_18D68:
00019936 5428 0024                  		addq.b	#2,$24(a0)
0001993A                            
0001993A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001993A 4EB9 0000 DFBA             		jsr	ObjectFall
00019940 2268 003C                  		movea.l	$3C(a0),a1
00019944 45F9 0000 0000             		lea	(word_19018).l,a2
0001994A 7000                       		moveq	#0,d0
0001994C 1029 001A                  		move.b	$1A(a1),d0
00019950 3228 0008                  		move.w	8(a0),d1
00019954 9268 0030                  		sub.w	$30(a0),d1
00019958 6400                       		bcc.s	loc_18D8E
0001995A 5440                       		addq.w	#2,d0
0001995C                            
0001995C                            loc_18D8E:
0001995C D040                       		add.w	d0,d0
0001995E 3228 0034                  		move.w	$34(a0),d1
00019962 D272 0000                  		add.w	(a2,d0.w),d1
00019966 B268 000C                  		cmp.w	$C(a0),d1
0001996A 6E00                       		bgt.s	locret_18DC4
0001996C 2268 003C                  		movea.l	$3C(a0),a1
00019970 7202                       		moveq	#2,d1
00019972 0828 0000 0022             		btst	#0,$22(a0)
00019978 6700                       		beq.s	loc_18DAE
0001997A 7200                       		moveq	#0,d1
0001997C                            
0001997C                            loc_18DAE:
0001997C 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019982 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019988 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001998E 6000 0000                  		bra.w	loc_18FA2
00019992                            ; ===========================================================================
00019992                            
00019992                            locret_18DC4:
00019992 4E75                       		rts	
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_18DC6:				; XREF: Obj7B_Index
00019994 2268 003C                  		movea.l	$3C(a0),a1
00019998 7000                       		moveq	#0,d0
0001999A 1028 003A                  		move.b	$3A(a0),d0
0001999E 9029 003A                  		sub.b	$3A(a1),d0
000199A2 6700                       		beq.s	loc_18E2A
000199A4 6400                       		bcc.s	loc_18DDA
000199A6 4400                       		neg.b	d0
000199A8                            
000199A8                            loc_18DDA:
000199A8 323C F7E8                  		move.w	#-$818,d1
000199AC 343C FEEC                  		move.w	#-$114,d2
000199B0 0C00 0001                  		cmpi.b	#1,d0
000199B4 6700                       		beq.s	loc_18E00
000199B6 323C F6A0                  		move.w	#-$960,d1
000199BA 343C FF0C                  		move.w	#-$F4,d2
000199BE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000199C4 6D00                       		blt.s	loc_18E00
000199C6 323C F5E0                  		move.w	#-$A20,d1
000199CA 343C FF80                  		move.w	#-$80,d2
000199CE                            
000199CE                            loc_18E00:
000199CE 3141 0012                  		move.w	d1,$12(a0)
000199D2 3142 0010                  		move.w	d2,$10(a0)
000199D6 3028 0008                  		move.w	8(a0),d0
000199DA 9068 0030                  		sub.w	$30(a0),d0
000199DE 6400                       		bcc.s	loc_18E16
000199E0 4468 0010                  		neg.w	$10(a0)
000199E4                            
000199E4                            loc_18E16:
000199E4 117C 0001 001A             		move.b	#1,$1A(a0)
000199EA 317C 0020 0028             		move.w	#$20,$28(a0)
000199F0 5428 0024                  		addq.b	#2,$24(a0)
000199F4 6000 0000                  		bra.w	loc_18EAA
000199F8                            ; ===========================================================================
000199F8                            
000199F8                            loc_18E2A:				; XREF: loc_18DC6
000199F8 45F9 0000 0000             		lea	(word_19018).l,a2
000199FE 7000                       		moveq	#0,d0
00019A00 1029 001A                  		move.b	$1A(a1),d0
00019A04 343C 0028                  		move.w	#$28,d2
00019A08 3228 0008                  		move.w	8(a0),d1
00019A0C 9268 0030                  		sub.w	$30(a0),d1
00019A10 6400                       		bcc.s	loc_18E48
00019A12 4442                       		neg.w	d2
00019A14 5440                       		addq.w	#2,d0
00019A16                            
00019A16                            loc_18E48:
00019A16 D040                       		add.w	d0,d0
00019A18 3228 0034                  		move.w	$34(a0),d1
00019A1C D272 0000                  		add.w	(a2,d0.w),d1
00019A20 3141 000C                  		move.w	d1,$C(a0)
00019A24 D468 0030                  		add.w	$30(a0),d2
00019A28 3142 0008                  		move.w	d2,8(a0)
00019A2C 4268 000E                  		clr.w	$E(a0)
00019A30 4268 000A                  		clr.w	$A(a0)
00019A34 5368 0028                  		subq.w	#1,$28(a0)
00019A38 6600                       		bne.s	loc_18E7A
00019A3A 317C 0020 0028             		move.w	#$20,$28(a0)
00019A40 117C 0008 0024             		move.b	#8,$24(a0)
00019A46 4E75                       		rts	
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            loc_18E7A:
00019A48 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019A4E 6600                       		bne.s	loc_18E88
00019A50 117C 0005 001F             		move.b	#5,$1F(a0)
00019A56                            
00019A56                            loc_18E88:
00019A56 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019A5C 6600                       		bne.s	loc_18E96
00019A5E 117C 0002 001F             		move.b	#2,$1F(a0)
00019A64                            
00019A64                            loc_18E96:
00019A64 5328 001E                  		subq.b	#1,$1E(a0)
00019A68 6E00                       		bgt.s	locret_18EA8
00019A6A 0868 0000 001A             		bchg	#0,$1A(a0)
00019A70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019A76                            
00019A76                            locret_18EA8:
00019A76 4E75                       		rts	
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            loc_18EAA:				; XREF: Obj7B_Index
00019A78 43F8 D040                  		lea	($FFFFD040).w,a1
00019A7C 707A                       		moveq	#$7A,d0
00019A7E 7240                       		moveq	#$40,d1
00019A80 743E                       		moveq	#$3E,d2
00019A82                            
00019A82                            loc_18EB4:
00019A82 B011                       		cmp.b	(a1),d0
00019A84 6700                       		beq.s	loc_18EC0
00019A86 D2C1                       		adda.w	d1,a1
00019A88 51CA FFF8                  		dbf	d2,loc_18EB4
00019A8C                            
00019A8C 6000                       		bra.s	loc_18F38
00019A8E                            ; ===========================================================================
00019A8E                            
00019A8E                            loc_18EC0:
00019A8E 3029 0008                  		move.w	8(a1),d0
00019A92 3229 000C                  		move.w	$C(a1),d1
00019A96 3428 0008                  		move.w	8(a0),d2
00019A9A 3628 000C                  		move.w	$C(a0),d3
00019A9E 45FA 0000                  		lea	byte_19022(pc),a2
00019AA2 47FA 0000                  		lea	byte_19026(pc),a3
00019AA6 181A                       		move.b	(a2)+,d4
00019AA8 4884                       		ext.w	d4
00019AAA D044                       		add.w	d4,d0
00019AAC 181B                       		move.b	(a3)+,d4
00019AAE 4884                       		ext.w	d4
00019AB0 D444                       		add.w	d4,d2
00019AB2 B440                       		cmp.w	d0,d2
00019AB4 6500                       		bcs.s	loc_18F38
00019AB6 181A                       		move.b	(a2)+,d4
00019AB8 4884                       		ext.w	d4
00019ABA D044                       		add.w	d4,d0
00019ABC 181B                       		move.b	(a3)+,d4
00019ABE 4884                       		ext.w	d4
00019AC0 D444                       		add.w	d4,d2
00019AC2 B042                       		cmp.w	d2,d0
00019AC4 6500                       		bcs.s	loc_18F38
00019AC6 181A                       		move.b	(a2)+,d4
00019AC8 4884                       		ext.w	d4
00019ACA D244                       		add.w	d4,d1
00019ACC 181B                       		move.b	(a3)+,d4
00019ACE 4884                       		ext.w	d4
00019AD0 D644                       		add.w	d4,d3
00019AD2 B641                       		cmp.w	d1,d3
00019AD4 6500                       		bcs.s	loc_18F38
00019AD6 181A                       		move.b	(a2)+,d4
00019AD8 4884                       		ext.w	d4
00019ADA D244                       		add.w	d4,d1
00019ADC 181B                       		move.b	(a3)+,d4
00019ADE 4884                       		ext.w	d4
00019AE0 D644                       		add.w	d4,d3
00019AE2 B243                       		cmp.w	d3,d1
00019AE4 6500                       		bcs.s	loc_18F38
00019AE6 5428 0024                  		addq.b	#2,$24(a0)
00019AEA 4268 0028                  		clr.w	$28(a0)
00019AEE 4229 0020                  		clr.b	$20(a1)
00019AF2 5329 0021                  		subq.b	#1,$21(a1)
00019AF6 6600                       		bne.s	loc_18F38
00019AF8 08E9 0007 0022             		bset	#7,$22(a1)
00019AFE 4268 0010                  		clr.w	$10(a0)
00019B02 4268 0012                  		clr.w	$12(a0)
00019B06                            
00019B06                            loc_18F38:
00019B06 4A68 0012                  		tst.w	$12(a0)
00019B0A 6A00                       		bpl.s	loc_18F5C
00019B0C 4EB9 0000 DFBA             		jsr	ObjectFall
00019B12 3028 0034                  		move.w	$34(a0),d0
00019B16 0440 002F                  		subi.w	#$2F,d0
00019B1A B068 000C                  		cmp.w	$C(a0),d0
00019B1E 6E00                       		bgt.s	loc_18F58
00019B20 4EB9 0000 DFBA             		jsr	ObjectFall
00019B26                            
00019B26                            loc_18F58:
00019B26 6000 FF20                  		bra.w	loc_18E7A
00019B2A                            ; ===========================================================================
00019B2A                            
00019B2A                            loc_18F5C:
00019B2A 4EB9 0000 DFBA             		jsr	ObjectFall
00019B30 2268 003C                  		movea.l	$3C(a0),a1
00019B34 45F9 0000 0000             		lea	(word_19018).l,a2
00019B3A 7000                       		moveq	#0,d0
00019B3C 1029 001A                  		move.b	$1A(a1),d0
00019B40 3228 0008                  		move.w	8(a0),d1
00019B44 9268 0030                  		sub.w	$30(a0),d1
00019B48 6400                       		bcc.s	loc_18F7E
00019B4A 5440                       		addq.w	#2,d0
00019B4C                            
00019B4C                            loc_18F7E:
00019B4C D040                       		add.w	d0,d0
00019B4E 3228 0034                  		move.w	$34(a0),d1
00019B52 D272 0000                  		add.w	(a2,d0.w),d1
00019B56 B268 000C                  		cmp.w	$C(a0),d1
00019B5A 6ECA                       		bgt.s	loc_18F58
00019B5C 2268 003C                  		movea.l	$3C(a0),a1
00019B60 7202                       		moveq	#2,d1
00019B62 4A68 0010                  		tst.w	$10(a0)
00019B66 6B00                       		bmi.s	loc_18F9C
00019B68 7200                       		moveq	#0,d1
00019B6A                            
00019B6A                            loc_18F9C:
00019B6A 317C 0000 0028             		move.w	#0,$28(a0)
00019B70                            
00019B70                            loc_18FA2:
00019B70 1341 003A                  		move.b	d1,$3A(a1)
00019B74 1141 003A                  		move.b	d1,$3A(a0)
00019B78 B229 001A                  		cmp.b	$1A(a1),d1
00019B7C 6700                       		beq.s	loc_19008
00019B7E 08A9 0003 0022             		bclr	#3,$22(a1)
00019B84 6700                       		beq.s	loc_19008
00019B86 4229 0025                  		clr.b	$25(a1)
00019B8A 137C 0002 0024             		move.b	#2,$24(a1)
00019B90 45F8 D000                  		lea	($FFFFD000).w,a2
00019B94 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019B9A 446A 0012                  		neg.w	$12(a2)
00019B9E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019BA4 6600                       		bne.s	loc_18FDC
00019BA6 E0EA 0012                  		asr	$12(a2)
00019BAA                            
00019BAA                            loc_18FDC:
00019BAA 08EA 0001 0022             		bset	#1,$22(a2)
00019BB0 08AA 0003 0022             		bclr	#3,$22(a2)
00019BB6 422A 003C                  		clr.b	$3C(a2)
00019BBA 2F08                       		move.l	a0,-(sp)
00019BBC 41D2                       		lea	(a2),a0
00019BBE 4EBA A2E0                  		jsr	Obj01_ChkRoll
00019BC2 205F                       		movea.l	(sp)+,a0
00019BC4 157C 0002 0024             		move.b	#2,$24(a2)
00019BCA 303C 00CC                  		move.w	#$CC,d0
00019BCE 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019BD4                            
00019BD4                            loc_19008:
00019BD4 4268 0010                  		clr.w	$10(a0)
00019BD8 4268 0012                  		clr.w	$12(a0)
00019BDC 5428 0024                  		addq.b	#2,$24(a0)
00019BE0 6000 FE66                  		bra.w	loc_18E7A
00019BE4                            ; ===========================================================================
00019BE4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019BEE                            		even
00019BEE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019BF2                            		even
00019BF2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019BF6                            		even
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            Obj7B_Explode:				; XREF: Obj7B_Index
00019BF6 10BC 003F                  		move.b	#$3F,(a0)
00019BFA 4228 0024                  		clr.b	$24(a0)
00019BFE 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019C04 6700                       		beq.s	Obj7B_MakeFrag
00019C06 4E75                       		rts	
00019C08                            ; ===========================================================================
00019C08                            
00019C08                            Obj7B_MakeFrag:
00019C08 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019C0E 7203                       		moveq	#3,d1
00019C10 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019C14                            
00019C14                            Obj7B_Loop:
00019C14 4EB9 0000 E4D8             		jsr	SingleObjLoad
00019C1A 6600                       		bne.s	loc_1909A
00019C1C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019C20 137C 000A 0024             		move.b	#$A,$24(a1)
00019C26 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019C2E 137C 0003 0018             		move.b	#3,$18(a1)
00019C34 337C 0518 0002             		move.w	#$518,2(a1)
00019C3A 3368 0008 0008             		move.w	8(a0),8(a1)
00019C40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C46 335A 0010                  		move.w	(a2)+,$10(a1)
00019C4A 335A 0012                  		move.w	(a2)+,$12(a1)
00019C4E 137C 0098 0020             		move.b	#$98,$20(a1)
00019C54 0029 0004 0001             		ori.b	#4,1(a1)
00019C5A 08E9 0007 0001             		bset	#7,1(a1)
00019C60 137C 000C 0019             		move.b	#$C,$19(a1)
00019C66                            
00019C66                            loc_1909A:
00019C66 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019C6A                            
00019C6A 4E75                       		rts	
00019C6C                            ; ===========================================================================
00019C6C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019C70 FF60 FDC0                  		dc.w $FF60, $FDC0
00019C74 0100 FCC0                  		dc.w $100, $FCC0
00019C78 00A0 FDC0                  		dc.w $A0, $FDC0
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019C7C 4EB9 0000 E02C             		jsr	SpeedToPos
00019C82 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C88 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019C8E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019C94 7004                       		moveq	#4,d0
00019C96 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019C9A E448                       		lsr.w	#2,d0
00019C9C 1140 001A                  		move.b	d0,$1A(a0)
00019CA0 4A28 0001                  		tst.b	1(a0)
00019CA4 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019CA8 4E75                       		rts	
00019CAA                            ; ===========================================================================
00019CAA                            ; ---------------------------------------------------------------------------
00019CAA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019CAA                            ; ---------------------------------------------------------------------------
00019CAA                            Map_obj7B:
00019CAA                            	include "_maps\obj7B.asm"
00019CAA                            ; ---------------------------------------------------------------------------
00019CAA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019CAA                            ; ---------------------------------------------------------------------------
00019CAA 0000                       		dc.w byte_190E2-Map_obj7B
00019CAC 0000                       		dc.w byte_190E8-Map_obj7B
00019CAE 01                         byte_190E2:	dc.b 1
00019CAF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019CB4 01                         byte_190E8:	dc.b 1
00019CB5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019CBA                            		even
00019CBA                            		even
00019CBA                            
00019CBA                            ; ===========================================================================
00019CBA                            ; ---------------------------------------------------------------------------
00019CBA                            ; Object 75 - Eggman (SYZ)
00019CBA                            ; ---------------------------------------------------------------------------
00019CBA                            
00019CBA                            Obj75:					; XREF: Obj_Index
00019CBA 7000                       		moveq	#0,d0
00019CBC 1028 0024                  		move.b	$24(a0),d0
00019CC0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019CC4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019CC8                            ; ===========================================================================
00019CC8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019CCA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019CCC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019CCE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019CD0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019CD2                            
00019CD2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019CD5 0401 05                    		dc.b 4,	1, 5
00019CD8 0607 05                    		dc.b 6,	7, 5
00019CDB 0800 05                    		dc.b 8,	0, 5
00019CDE                            ; ===========================================================================
00019CDE                            
00019CDE                            Obj75_Main:				; XREF: Obj75_Index
00019CDE 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019CE4 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019CEA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019CF0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019CF6 117C 000F 0020             		move.b	#$F,$20(a0)
00019CFC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019D02 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019D06 2248                       		movea.l	a0,a1
00019D08 7203                       		moveq	#3,d1
00019D0A 6000                       		bra.s	Obj75_LoadBoss
00019D0C                            ; ===========================================================================
00019D0C                            
00019D0C                            Obj75_Loop:
00019D0C 4EB9 0000 E4EE             		jsr	SingleObjLoad2
00019D12 6600                       		bne.s	Obj75_ShipMain
00019D14 12BC 0075                  		move.b	#$75,(a1)
00019D18 3368 0008 0008             		move.w	8(a0),8(a1)
00019D1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019D24                            
00019D24                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019D24 08A8 0000 0022             		bclr	#0,$22(a0)
00019D2A 4229 0025                  		clr.b	$25(a1)
00019D2E 135A 0024                  		move.b	(a2)+,$24(a1)
00019D32 135A 001C                  		move.b	(a2)+,$1C(a1)
00019D36 135A 0018                  		move.b	(a2)+,$18(a1)
00019D3A 237C 0001 8942 0004        		move.l	#Map_Eggman,4(a1)
00019D42 337C 0400 0002             		move.w	#$400,2(a1)
00019D48 137C 0004 0001             		move.b	#4,1(a1)
00019D4E 137C 0020 0019             		move.b	#$20,$19(a1)
00019D54 2348 0034                  		move.l	a0,$34(a1)
00019D58 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019D5C                            
00019D5C                            Obj75_ShipMain:				; XREF: Obj75_Index
00019D5C 7000                       		moveq	#0,d0
00019D5E 1028 0025                  		move.b	$25(a0),d0
00019D62 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019D66 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019D6A 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
00019D70 4EB9 0000 B0A0             		jsr	AnimateSprite
00019D76 7003                       		moveq	#3,d0
00019D78 C028 0022                  		and.b	$22(a0),d0
00019D7C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D82 8128 0001                  		or.b	d0,1(a0)
00019D86 4EF9 0000 E052             		jmp	DisplaySprite
00019D8C                            ; ===========================================================================
00019D8C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019D90 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019D94 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019D98                            ; ===========================================================================
00019D98                            
00019D98                            loc_191CC:				; XREF: Obj75_ShipIndex
00019D98 317C FF00 0010             		move.w	#-$100,$10(a0)
00019D9E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019DA4 6400                       		bcc.s	loc_191DE
00019DA6 5428 0025                  		addq.b	#2,$25(a0)
00019DAA                            
00019DAA                            loc_191DE:
00019DAA 1028 003F                  		move.b	$3F(a0),d0
00019DAE 5428 003F                  		addq.b	#2,$3F(a0)
00019DB2 4EB9 0000 2D3A             		jsr	(CalcSine).l
00019DB8 E440                       		asr.w	#2,d0
00019DBA 3140 0012                  		move.w	d0,$12(a0)
00019DBE                            
00019DBE                            loc_191F2:
00019DBE 6100 E6DC                  		bsr.w	BossMove
00019DC2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019DC8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DCE                            
00019DCE                            loc_19202:
00019DCE 3028 0008                  		move.w	8(a0),d0
00019DD2 0440 2C00                  		subi.w	#$2C00,d0
00019DD6 EA48                       		lsr.w	#5,d0
00019DD8 1140 0034                  		move.b	d0,$34(a0)
00019DDC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019DE2 6400                       		bcc.s	locret_19256
00019DE4 4A28 0022                  		tst.b	$22(a0)
00019DE8 6B00                       		bmi.s	loc_19258
00019DEA 4A28 0020                  		tst.b	$20(a0)
00019DEE 6600                       		bne.s	locret_19256
00019DF0 4A28 003E                  		tst.b	$3E(a0)
00019DF4 6600                       		bne.s	loc_1923A
00019DF6 117C 0020 003E             		move.b	#$20,$3E(a0)
00019DFC 303C 00AC                  		move.w	#$AC,d0
00019E00 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019E06                            
00019E06                            loc_1923A:
00019E06 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019E0A 7000                       		moveq	#0,d0
00019E0C 4A51                       		tst.w	(a1)
00019E0E 6600                       		bne.s	loc_19248
00019E10 303C 0EEE                  		move.w	#$EEE,d0
00019E14                            
00019E14                            loc_19248:
00019E14 3280                       		move.w	d0,(a1)
00019E16 5328 003E                  		subq.b	#1,$3E(a0)
00019E1A 6600                       		bne.s	locret_19256
00019E1C 117C 000F 0020             		move.b	#$F,$20(a0)
00019E22                            
00019E22                            locret_19256:
00019E22 4E75                       		rts	
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            loc_19258:				; XREF: loc_19202
00019E24 7064                       		moveq	#100,d0
00019E26 6100 0000                  		bsr.w	AddPoints
00019E2A 117C 0006 0025             		move.b	#6,$25(a0)
00019E30 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019E36 4268 0010                  		clr.w	$10(a0)
00019E3A 4E75                       		rts	
00019E3C                            ; ===========================================================================
00019E3C                            
00019E3C                            loc_19270:				; XREF: Obj75_ShipIndex
00019E3C 3028 0030                  		move.w	$30(a0),d0
00019E40 317C 0140 0010             		move.w	#$140,$10(a0)
00019E46 0828 0000 0022             		btst	#0,$22(a0)
00019E4C 6600                       		bne.s	loc_1928E
00019E4E 4468 0010                  		neg.w	$10(a0)
00019E52 0C40 2C08                  		cmpi.w	#$2C08,d0
00019E56 6E00                       		bgt.s	loc_1929E
00019E58 6000                       		bra.s	loc_19294
00019E5A                            ; ===========================================================================
00019E5A                            
00019E5A                            loc_1928E:
00019E5A 0C40 2D38                  		cmpi.w	#$2D38,d0
00019E5E 6D00                       		blt.s	loc_1929E
00019E60                            
00019E60                            loc_19294:
00019E60 0868 0000 0022             		bchg	#0,$22(a0)
00019E66 4228 003D                  		clr.b	$3D(a0)
00019E6A                            
00019E6A                            loc_1929E:
00019E6A 0440 2C10                  		subi.w	#$2C10,d0
00019E6E 0240 001F                  		andi.w	#$1F,d0
00019E72 0440 001F                  		subi.w	#$1F,d0
00019E76 6A00                       		bpl.s	loc_192AE
00019E78 4440                       		neg.w	d0
00019E7A                            
00019E7A                            loc_192AE:
00019E7A 5340                       		subq.w	#1,d0
00019E7C 6E00                       		bgt.s	loc_192E8
00019E7E 4A28 003D                  		tst.b	$3D(a0)
00019E82 6600                       		bne.s	loc_192E8
00019E84 3238 D008                  		move.w	($FFFFD008).w,d1
00019E88 0441 2C00                  		subi.w	#$2C00,d1
00019E8C EA41                       		asr.w	#5,d1
00019E8E B228 0034                  		cmp.b	$34(a0),d1
00019E92 6600                       		bne.s	loc_192E8
00019E94 7000                       		moveq	#0,d0
00019E96 1028 0034                  		move.b	$34(a0),d0
00019E9A EB40                       		asl.w	#5,d0
00019E9C 0640 2C10                  		addi.w	#$2C10,d0
00019EA0 3140 0030                  		move.w	d0,$30(a0)
00019EA4 6100 0000                  		bsr.w	Obj75_FindBlocks
00019EA8 5428 0025                  		addq.b	#2,$25(a0)
00019EAC 4268 0028                  		clr.w	$28(a0)
00019EB0 4268 0010                  		clr.w	$10(a0)
00019EB4                            
00019EB4                            loc_192E8:
00019EB4 6000 FEF4                  		bra.w	loc_191DE
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_192EC:				; XREF: Obj75_ShipIndex
00019EB8 7000                       		moveq	#0,d0
00019EBA 1028 0028                  		move.b	$28(a0),d0
00019EBE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019EC2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019EC6                            ; ===========================================================================
00019EC6 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019EC8 0000                       		dc.w loc_19348-off_192FA
00019ECA 0000                       		dc.w loc_1938E-off_192FA
00019ECC 0000                       		dc.w loc_193D0-off_192FA
00019ECE                            ; ===========================================================================
00019ECE                            
00019ECE                            loc_19302:				; XREF: off_192FA
00019ECE 317C 0180 0012             		move.w	#$180,$12(a0)
00019ED4 3028 0038                  		move.w	$38(a0),d0
00019ED8 0C40 0556                  		cmpi.w	#$556,d0
00019EDC 6500                       		bcs.s	loc_19344
00019EDE 317C 0556 0038             		move.w	#$556,$38(a0)
00019EE4 4268 003C                  		clr.w	$3C(a0)
00019EE8 70FF                       		moveq	#-1,d0
00019EEA 3028 0036                  		move.w	$36(a0),d0
00019EEE 6700                       		beq.s	loc_1933C
00019EF0 2240                       		movea.l	d0,a1
00019EF2 137C 00FF 0029             		move.b	#-1,$29(a1)
00019EF8 117C 00FF 0029             		move.b	#-1,$29(a0)
00019EFE 2348 0034                  		move.l	a0,$34(a1)
00019F02 317C 0032 003C             		move.w	#$32,$3C(a0)
00019F08                            
00019F08                            loc_1933C:
00019F08 4268 0012                  		clr.w	$12(a0)
00019F0C 5428 0028                  		addq.b	#2,$28(a0)
00019F10                            
00019F10                            loc_19344:
00019F10 6000 FEAC                  		bra.w	loc_191F2
00019F14                            ; ===========================================================================
00019F14                            
00019F14                            loc_19348:				; XREF: off_192FA
00019F14 5368 003C                  		subq.w	#1,$3C(a0)
00019F18 6A00                       		bpl.s	loc_19366
00019F1A 5428 0028                  		addq.b	#2,$28(a0)
00019F1E 317C F800 0012             		move.w	#-$800,$12(a0)
00019F24 4A68 0036                  		tst.w	$36(a0)
00019F28 6600                       		bne.s	loc_19362
00019F2A E0E8 0012                  		asr	$12(a0)
00019F2E                            
00019F2E                            loc_19362:
00019F2E 7000                       		moveq	#0,d0
00019F30 6000                       		bra.s	loc_1937C
00019F32                            ; ===========================================================================
00019F32                            
00019F32                            loc_19366:
00019F32 7000                       		moveq	#0,d0
00019F34 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019F3A 6E00                       		bgt.s	loc_1937C
00019F3C 7002                       		moveq	#2,d0
00019F3E 0828 0001 003D             		btst	#1,$3D(a0)
00019F44 6700                       		beq.s	loc_1937C
00019F46 4440                       		neg.w	d0
00019F48                            
00019F48                            loc_1937C:
00019F48 D068 0038                  		add.w	$38(a0),d0
00019F4C 3140 000C                  		move.w	d0,$C(a0)
00019F50 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F56 6000 FE76                  		bra.w	loc_19202
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            loc_1938E:				; XREF: off_192FA
00019F5A 303C 04DA                  		move.w	#$4DA,d0
00019F5E 4A68 0036                  		tst.w	$36(a0)
00019F62 6700                       		beq.s	loc_1939C
00019F64 0440 0018                  		subi.w	#$18,d0
00019F68                            
00019F68                            loc_1939C:
00019F68 B068 0038                  		cmp.w	$38(a0),d0
00019F6C 6D00                       		blt.s	loc_193BE
00019F6E 317C 0008 003C             		move.w	#8,$3C(a0)
00019F74 4A68 0036                  		tst.w	$36(a0)
00019F78 6700                       		beq.s	loc_193B4
00019F7A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019F80                            
00019F80                            loc_193B4:
00019F80 5428 0028                  		addq.b	#2,$28(a0)
00019F84 4268 0012                  		clr.w	$12(a0)
00019F88 6000                       		bra.s	loc_193CC
00019F8A                            ; ===========================================================================
00019F8A                            
00019F8A                            loc_193BE:
00019F8A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019F90 6C00                       		bge.s	loc_193CC
00019F92 0668 000C 0012             		addi.w	#$C,$12(a0)
00019F98                            
00019F98                            loc_193CC:
00019F98 6000 FE24                  		bra.w	loc_191F2
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_193D0:				; XREF: off_192FA
00019F9C 5368 003C                  		subq.w	#1,$3C(a0)
00019FA0 6E00                       		bgt.s	loc_19406
00019FA2 6B00                       		bmi.s	loc_193EE
00019FA4 70FF                       		moveq	#-1,d0
00019FA6 3028 0036                  		move.w	$36(a0),d0
00019FAA 6700                       		beq.s	loc_193E8
00019FAC 2240                       		movea.l	d0,a1
00019FAE 137C 000A 0029             		move.b	#$A,$29(a1)
00019FB4                            
00019FB4                            loc_193E8:
00019FB4 4268 0036                  		clr.w	$36(a0)
00019FB8 6000                       		bra.s	loc_19406
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            loc_193EE:
00019FBA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019FC0 6600                       		bne.s	loc_19406
00019FC2 4228 0029                  		clr.b	$29(a0)
00019FC6 5528 0025                  		subq.b	#2,$25(a0)
00019FCA 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019FD0 6000                       		bra.s	loc_19446
00019FD2                            ; ===========================================================================
00019FD2                            
00019FD2                            loc_19406:
00019FD2 7001                       		moveq	#1,d0
00019FD4 4A68 0036                  		tst.w	$36(a0)
00019FD8 6700                       		beq.s	loc_19410
00019FDA 7002                       		moveq	#2,d0
00019FDC                            
00019FDC                            loc_19410:
00019FDC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019FE2 6700                       		beq.s	loc_19424
00019FE4 6D00                       		blt.s	loc_1941C
00019FE6 4440                       		neg.w	d0
00019FE8                            
00019FE8                            loc_1941C:
00019FE8 4A68 0036                  		tst.w	$36(a0)
00019FEC D168 0038                  		add.w	d0,$38(a0)
00019FF0                            
00019FF0                            loc_19424:
00019FF0 7000                       		moveq	#0,d0
00019FF2 4A68 0036                  		tst.w	$36(a0)
00019FF6 6700                       		beq.s	loc_19438
00019FF8 7002                       		moveq	#2,d0
00019FFA 0828 0000 003D             		btst	#0,$3D(a0)
0001A000 6700                       		beq.s	loc_19438
0001A002 4440                       		neg.w	d0
0001A004                            
0001A004                            loc_19438:
0001A004 D068 0038                  		add.w	$38(a0),d0
0001A008 3140 000C                  		move.w	d0,$C(a0)
0001A00C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A012                            
0001A012                            loc_19446:
0001A012 6000 FDBA                  		bra.w	loc_19202
0001A016                            
0001A016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A016                            
0001A016                            
0001A016                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A016 4268 0036                  		clr.w	$36(a0)
0001A01A 43F8 D040                  		lea	($FFFFD040).w,a1
0001A01E 703E                       		moveq	#$3E,d0
0001A020 7276                       		moveq	#$76,d1
0001A022 1428 0034                  		move.b	$34(a0),d2
0001A026                            
0001A026                            Obj75_FindLoop:
0001A026 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A028 6600                       		bne.s	loc_1946A	; if not, branch
0001A02A B429 0028                  		cmp.b	$28(a1),d2
0001A02E 6600                       		bne.s	loc_1946A
0001A030 3149 0036                  		move.w	a1,$36(a0)
0001A034 6000                       		bra.s	locret_19472
0001A036                            ; ===========================================================================
0001A036                            
0001A036                            loc_1946A:
0001A036 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A03A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A03E                            
0001A03E                            locret_19472:
0001A03E 4E75                       		rts	
0001A040                            ; End of function Obj75_FindBlocks
0001A040                            
0001A040                            ; ===========================================================================
0001A040                            
0001A040                            loc_19474:				; XREF: Obj75_ShipIndex
0001A040 5368 003C                  		subq.w	#1,$3C(a0)
0001A044 6B00                       		bmi.s	loc_1947E
0001A046 6000 E412                  		bra.w	BossDefeated
0001A04A                            ; ===========================================================================
0001A04A                            
0001A04A                            loc_1947E:
0001A04A 5428 0025                  		addq.b	#2,$25(a0)
0001A04E 4268 0012                  		clr.w	$12(a0)
0001A052 08E8 0000 0022             		bset	#0,$22(a0)
0001A058 08A8 0007 0022             		bclr	#7,$22(a0)
0001A05E 4268 0010                  		clr.w	$10(a0)
0001A062 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A068 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A06C 6600                       		bne.s	loc_194A8
0001A06E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A074                            
0001A074                            loc_194A8:
0001A074 6000 FD58                  		bra.w	loc_19202
0001A078                            ; ===========================================================================
0001A078                            
0001A078                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A078 5268 003C                  		addq.w	#1,$3C(a0)
0001A07C 6700                       		beq.s	loc_194BC
0001A07E 6A00                       		bpl.s	loc_194C2
0001A080 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A086 6000                       		bra.s	loc_194EE
0001A088                            ; ===========================================================================
0001A088                            
0001A088                            loc_194BC:
0001A088 4268 0012                  		clr.w	$12(a0)
0001A08C 6000                       		bra.s	loc_194EE
0001A08E                            ; ===========================================================================
0001A08E                            
0001A08E                            loc_194C2:
0001A08E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A094 6500                       		bcs.s	loc_194DA
0001A096 6700                       		beq.s	loc_194E0
0001A098 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A09E 6500                       		bcs.s	loc_194EE
0001A0A0 5428 0025                  		addq.b	#2,$25(a0)
0001A0A4 6000                       		bra.s	loc_194EE
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_194DA:
0001A0A6 5168 0012                  		subq.w	#8,$12(a0)
0001A0AA 6000                       		bra.s	loc_194EE
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            loc_194E0:
0001A0AC 4268 0012                  		clr.w	$12(a0)
0001A0B0 303C 0085                  		move.w	#$85,d0
0001A0B4 4EB9 0000 159A             		jsr	(PlaySound).l	; play SYZ music
0001A0BA                            
0001A0BA                            loc_194EE:
0001A0BA 6000 FD02                  		bra.w	loc_191F2
0001A0BE                            ; ===========================================================================
0001A0BE                            
0001A0BE                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A0BE 317C 0400 0010             		move.w	#$400,$10(a0)
0001A0C4 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A0CA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A0D0 6400                       		bcc.s	loc_1950C
0001A0D2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A0D6 6000                       		bra.s	loc_19512
0001A0D8                            ; ===========================================================================
0001A0D8                            
0001A0D8                            loc_1950C:
0001A0D8 4A28 0001                  		tst.b	1(a0)
0001A0DC 6A00                       		bpl.s	Obj75_ShipDelete
0001A0DE                            
0001A0DE                            loc_19512:
0001A0DE 6100 E3BC                  		bsr.w	BossMove
0001A0E2 6000 FCC6                  		bra.w	loc_191DE
0001A0E6                            ; ===========================================================================
0001A0E6                            
0001A0E6                            Obj75_ShipDelete:
0001A0E6 4EF9 0000 E08E             		jmp	DeleteObject
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A0EC 7201                       		moveq	#1,d1
0001A0EE 2268 0034                  		movea.l	$34(a0),a1
0001A0F2 7000                       		moveq	#0,d0
0001A0F4 1029 0025                  		move.b	$25(a1),d0
0001A0F8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A0FC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A100 1141 001C                  		move.b	d1,$1C(a0)
0001A104 1010                       		move.b	(a0),d0
0001A106 B011                       		cmp.b	(a1),d0
0001A108 6600                       		bne.s	Obj75_FaceDelete
0001A10A 6000                       		bra.s	loc_195BE
0001A10C                            ; ===========================================================================
0001A10C                            
0001A10C                            Obj75_FaceDelete:
0001A10C 4EF9 0000 E08E             		jmp	DeleteObject
0001A112                            ; ===========================================================================
0001A112 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A116 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A11A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A11E                            ; ===========================================================================
0001A11E                            
0001A11E                            loc_19552:				; XREF: off_19546
0001A11E 720A                       		moveq	#$A,d1
0001A120 4E75                       		rts	
0001A122                            ; ===========================================================================
0001A122                            
0001A122                            loc_19556:				; XREF: off_19546
0001A122 7206                       		moveq	#6,d1
0001A124 4E75                       		rts	
0001A126                            ; ===========================================================================
0001A126                            
0001A126                            loc_1955A:				; XREF: off_19546
0001A126 7000                       		moveq	#0,d0
0001A128 1029 0028                  		move.b	$28(a1),d0
0001A12C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A130 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A134                            ; ===========================================================================
0001A134 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A138 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A13C                            ; ===========================================================================
0001A13C                            
0001A13C                            loc_19570:				; XREF: off_19568
0001A13C 6000                       		bra.s	loc_19574
0001A13E                            ; ===========================================================================
0001A13E                            
0001A13E                            loc_19572:				; XREF: off_19568
0001A13E 7206                       		moveq	#6,d1
0001A140                            
0001A140                            loc_19574:				; XREF: off_19546
0001A140 4A29 0020                  		tst.b	$20(a1)
0001A144 6600                       		bne.s	loc_1957E
0001A146 7205                       		moveq	#5,d1
0001A148 4E75                       		rts	
0001A14A                            ; ===========================================================================
0001A14A                            
0001A14A                            loc_1957E:
0001A14A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A150 6500                       		bcs.s	locret_19588
0001A152 7204                       		moveq	#4,d1
0001A154                            
0001A154                            locret_19588:
0001A154 4E75                       		rts	
0001A156                            ; ===========================================================================
0001A156                            
0001A156                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A156 117C 0007 001C             		move.b	#7,$1C(a0)
0001A15C 2268 0034                  		movea.l	$34(a0),a1
0001A160 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A166 6600                       		bne.s	loc_195AA
0001A168 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A16E 4A28 0001                  		tst.b	1(a0)
0001A172 6A00                       		bpl.s	Obj75_FlameDelete
0001A174 6000                       		bra.s	loc_195B6
0001A176                            ; ===========================================================================
0001A176                            
0001A176                            loc_195AA:
0001A176 4A69 0010                  		tst.w	$10(a1)
0001A17A 6700                       		beq.s	loc_195B6
0001A17C 117C 0008 001C             		move.b	#8,$1C(a0)
0001A182                            
0001A182                            loc_195B6:
0001A182 6000                       		bra.s	loc_195BE
0001A184                            ; ===========================================================================
0001A184                            
0001A184                            Obj75_FlameDelete:
0001A184 4EF9 0000 E08E             		jmp	DeleteObject
0001A18A                            ; ===========================================================================
0001A18A                            
0001A18A                            loc_195BE:
0001A18A 43F9 0001 88DE             		lea	(Ani_Eggman).l,a1
0001A190 4EB9 0000 B0A0             		jsr	AnimateSprite
0001A196 2268 0034                  		movea.l	$34(a0),a1
0001A19A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A1A0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1A6                            
0001A1A6                            loc_195DA:
0001A1A6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A1AC 7003                       		moveq	#3,d0
0001A1AE C028 0022                  		and.b	$22(a0),d0
0001A1B2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A1B8 8128 0001                  		or.b	d0,1(a0)
0001A1BC 4EF9 0000 E052             		jmp	DisplaySprite
0001A1C2                            ; ===========================================================================
0001A1C2                            
0001A1C2                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A1C2 217C 0001 8A0A 0004        		move.l	#Map_BossItems,4(a0)
0001A1CA 317C 246C 0002             		move.w	#$246C,2(a0)
0001A1D0 117C 0005 001A             		move.b	#5,$1A(a0)
0001A1D6 2268 0034                  		movea.l	$34(a0),a1
0001A1DA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A1E0 6600                       		bne.s	loc_1961C
0001A1E2 4A28 0001                  		tst.b	1(a0)
0001A1E6 6A00                       		bpl.s	Obj75_SpikeDelete
0001A1E8                            
0001A1E8                            loc_1961C:
0001A1E8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A1EE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1F4 3028 003C                  		move.w	$3C(a0),d0
0001A1F8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A1FE 6600                       		bne.s	loc_19652
0001A200 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A206 6700                       		beq.s	loc_1964C
0001A208 4A29 0028                  		tst.b	$28(a1)
0001A20C 6600                       		bne.s	loc_19658
0001A20E 0C40 0094                  		cmpi.w	#$94,d0
0001A212 6C00                       		bge.s	loc_19658
0001A214 5E40                       		addq.w	#7,d0
0001A216 6000                       		bra.s	loc_19658
0001A218                            ; ===========================================================================
0001A218                            
0001A218                            loc_1964C:
0001A218 4A69 003C                  		tst.w	$3C(a1)
0001A21C 6A00                       		bpl.s	loc_19658
0001A21E                            
0001A21E                            loc_19652:
0001A21E 4A40                       		tst.w	d0
0001A220 6F00                       		ble.s	loc_19658
0001A222 5B40                       		subq.w	#5,d0
0001A224                            
0001A224                            loc_19658:
0001A224 3140 003C                  		move.w	d0,$3C(a0)
0001A228 E440                       		asr.w	#2,d0
0001A22A D168 000C                  		add.w	d0,$C(a0)
0001A22E 117C 0008 0019             		move.b	#8,$19(a0)
0001A234 117C 000C 0016             		move.b	#$C,$16(a0)
0001A23A 4228 0020                  		clr.b	$20(a0)
0001A23E 2268 0034                  		movea.l	$34(a0),a1
0001A242 4A29 0020                  		tst.b	$20(a1)
0001A246 6700                       		beq.s	loc_19688
0001A248 4A29 0029                  		tst.b	$29(a1)
0001A24C 6600                       		bne.s	loc_19688
0001A24E 117C 0084 0020             		move.b	#$84,$20(a0)
0001A254                            
0001A254                            loc_19688:
0001A254 6000 FF50                  		bra.w	loc_195DA
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            Obj75_SpikeDelete:
0001A258 4EF9 0000 E08E             		jmp	DeleteObject
0001A25E                            ; ===========================================================================
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E                            
0001A25E                            Obj76:					; XREF: Obj_Index
0001A25E 7000                       		moveq	#0,d0
0001A260 1028 0024                  		move.b	$24(a0),d0
0001A264 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A268 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A26C                            ; ===========================================================================
0001A26C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A26E 0000                       		dc.w Obj76_Action-Obj76_Index
0001A270 0000                       		dc.w loc_19762-Obj76_Index
0001A272                            ; ===========================================================================
0001A272                            
0001A272                            Obj76_Main:				; XREF: Obj76_Index
0001A272 7800                       		moveq	#0,d4
0001A274 3A3C 2C10                  		move.w	#$2C10,d5
0001A278 7C09                       		moveq	#9,d6
0001A27A 43D0                       		lea	(a0),a1
0001A27C 6000                       		bra.s	Obj76_MakeBlock
0001A27E                            ; ===========================================================================
0001A27E                            
0001A27E                            Obj76_Loop:
0001A27E 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001A284 6600                       		bne.s	Obj76_ExitLoop
0001A286                            
0001A286                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A286 12BC 0076                  		move.b	#$76,(a1)
0001A28A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A292 337C 4000 0002             		move.w	#$4000,2(a1)
0001A298 137C 0004 0001             		move.b	#4,1(a1)
0001A29E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A2A4 137C 0010 0016             		move.b	#$10,$16(a1)
0001A2AA 137C 0003 0018             		move.b	#3,$18(a1)
0001A2B0 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A2B4 337C 0582 000C             		move.w	#$582,$C(a1)
0001A2BA 3344 0028                  		move.w	d4,$28(a1)
0001A2BE 0644 0101                  		addi.w	#$101,d4
0001A2C2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A2C6 5429 0024                  		addq.b	#2,$24(a1)
0001A2CA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A2CE                            
0001A2CE                            Obj76_ExitLoop:
0001A2CE 4E75                       		rts	
0001A2D0                            ; ===========================================================================
0001A2D0                            
0001A2D0                            Obj76_Action:				; XREF: Obj76_Index
0001A2D0 1028 0029                  		move.b	$29(a0),d0
0001A2D4 B028 0028                  		cmp.b	$28(a0),d0
0001A2D8 6700                       		beq.s	Obj76_Solid
0001A2DA 4A00                       		tst.b	d0
0001A2DC 6B00                       		bmi.s	loc_19718
0001A2DE                            
0001A2DE                            loc_19712:
0001A2DE 6100 0000                  		bsr.w	Obj76_Break
0001A2E2 6000                       		bra.s	Obj76_Display
0001A2E4                            ; ===========================================================================
0001A2E4                            
0001A2E4                            loc_19718:
0001A2E4 2268 0034                  		movea.l	$34(a0),a1
0001A2E8 4A29 0021                  		tst.b	$21(a1)
0001A2EC 67F0                       		beq.s	loc_19712
0001A2EE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A2F4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A2FA 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A300 B2C8                       		cmpa.w	a0,a1
0001A302 6500                       		bcs.s	Obj76_Display
0001A304 3029 0012                  		move.w	$12(a1),d0
0001A308 48C0                       		ext.l	d0
0001A30A E080                       		asr.l	#8,d0
0001A30C D168 000C                  		add.w	d0,$C(a0)
0001A310 6000                       		bra.s	Obj76_Display
0001A312                            ; ===========================================================================
0001A312                            
0001A312                            Obj76_Solid:				; XREF: Obj76_Action
0001A312 323C 001B                  		move.w	#$1B,d1
0001A316 343C 0010                  		move.w	#$10,d2
0001A31A 363C 0011                  		move.w	#$11,d3
0001A31E 3828 0008                  		move.w	8(a0),d4
0001A322 4EB9 0001 0422             		jsr	SolidObject
0001A328                            
0001A328                            Obj76_Display:				; XREF: Obj76_Action
0001A328 4EF9 0000 E052             		jmp	DisplaySprite
0001A32E                            ; ===========================================================================
0001A32E                            
0001A32E                            loc_19762:				; XREF: Obj76_Index
0001A32E 4A28 0001                  		tst.b	1(a0)
0001A332 6A00                       		bpl.s	Obj76_Delete
0001A334 4EB9 0000 DFBA             		jsr	ObjectFall
0001A33A 4EF9 0000 E052             		jmp	DisplaySprite
0001A340                            ; ===========================================================================
0001A340                            
0001A340                            Obj76_Delete:
0001A340 4EF9 0000 E08E             		jmp	DeleteObject
0001A346                            
0001A346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A346                            
0001A346                            
0001A346                            Obj76_Break:				; XREF: Obj76_Action
0001A346 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A34A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A34E 7801                       		moveq	#1,d4
0001A350 7203                       		moveq	#3,d1
0001A352 7438                       		moveq	#$38,d2
0001A354 5428 0024                  		addq.b	#2,$24(a0)
0001A358 117C 0008 0019             		move.b	#8,$19(a0)
0001A35E 117C 0008 0016             		move.b	#8,$16(a0)
0001A364 43D0                       		lea	(a0),a1
0001A366 6000                       		bra.s	Obj76_MakeFrag
0001A368                            ; ===========================================================================
0001A368                            
0001A368                            Obj76_LoopFrag:
0001A368 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001A36E 6600                       		bne.s	loc_197D4
0001A370                            
0001A370                            Obj76_MakeFrag:
0001A370 45D0                       		lea	(a0),a2
0001A372 47D1                       		lea	(a1),a3
0001A374 7603                       		moveq	#3,d3
0001A376                            
0001A376                            loc_197AA:
0001A376 26DA                       		move.l	(a2)+,(a3)+
0001A378 26DA                       		move.l	(a2)+,(a3)+
0001A37A 26DA                       		move.l	(a2)+,(a3)+
0001A37C 26DA                       		move.l	(a2)+,(a3)+
0001A37E 51CB FFF6                  		dbf	d3,loc_197AA
0001A382                            
0001A382 335C 0010                  		move.w	(a4)+,$10(a1)
0001A386 335C 0012                  		move.w	(a4)+,$12(a1)
0001A38A 361D                       		move.w	(a5)+,d3
0001A38C D769 0008                  		add.w	d3,8(a1)
0001A390 361D                       		move.w	(a5)+,d3
0001A392 D769 000C                  		add.w	d3,$C(a1)
0001A396 1344 001A                  		move.b	d4,$1A(a1)
0001A39A 5244                       		addq.w	#1,d4
0001A39C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A3A0                            
0001A3A0                            loc_197D4:
0001A3A0 303C 00CB                  		move.w	#$CB,d0
0001A3A4 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A3AA                            ; End of function Obj76_Break
0001A3AA                            
0001A3AA                            ; ===========================================================================
0001A3AA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A3AE 0180 FE00                  		dc.w $180, $FE00
0001A3B2 FF00 FF00                  		dc.w $FF00, $FF00
0001A3B6 0100 FF00                  		dc.w $100, $FF00
0001A3BA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A3BE 0010 0000                  		dc.w $10, 0
0001A3C2 0000 0010                  		dc.w 0,	$10
0001A3C6 0010 0010                  		dc.w $10, $10
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA                            Map_obj76:
0001A3CA                            	include "_maps\obj76.asm"
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A3CE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A3D2 0000                       		dc.w byte_19826-Map_obj76
0001A3D4 02                         byte_19808:	dc.b 2
0001A3D5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A3DA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A3DF 00                         		dc.b 0
0001A3E0 01                         byte_19814:	dc.b 1
0001A3E1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A3E6 01                         byte_1981A:	dc.b 1
0001A3E7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A3EC 01                         byte_19820:	dc.b 1
0001A3ED F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A3F2 01                         byte_19826:	dc.b 1
0001A3F3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A3F8                            		even
0001A3F8                            		even
0001A3F8                            
0001A3F8                            ; ===========================================================================
0001A3F8                            
0001A3F8                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A3F8 4EF9 0000 E08E             		jmp	DeleteObject
0001A3FE                            ; ===========================================================================
0001A3FE                            ; ---------------------------------------------------------------------------
0001A3FE                            ; Object 82 - Eggman (SBZ2)
0001A3FE                            ; ---------------------------------------------------------------------------
0001A3FE                            
0001A3FE                            Obj82:					; XREF: Obj_Index
0001A3FE 7000                       		moveq	#0,d0
0001A400 1028 0024                  		move.b	$24(a0),d0
0001A404 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A408 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A40C                            ; ===========================================================================
0001A40C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A40E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A410 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A412                            
0001A412 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A415 0400 03                    		dc.b 4,	0, 3
0001A418                            ; ===========================================================================
0001A418                            
0001A418                            Obj82_Main:				; XREF: Obj82_Index
0001A418 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A41C 317C 2160 0008             		move.w	#$2160,8(a0)
0001A422 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A428 117C 000F 0020             		move.b	#$F,$20(a0)
0001A42E 117C 0010 0021             		move.b	#$10,$21(a0)
0001A434 08A8 0000 0022             		bclr	#0,$22(a0)
0001A43A 4228 0025                  		clr.b	$25(a0)
0001A43E 115A 0024                  		move.b	(a2)+,$24(a0)
0001A442 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A446 115A 0018                  		move.b	(a2)+,$18(a0)
0001A44A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A452 317C 0400 0002             		move.w	#$400,2(a0)
0001A458 117C 0004 0001             		move.b	#4,1(a0)
0001A45E 08E8 0007 0001             		bset	#7,1(a0)
0001A464 117C 0020 0019             		move.b	#$20,$19(a0)
0001A46A 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001A470 6600                       		bne.s	Obj82_Eggman
0001A472 2348 0034                  		move.l	a0,$34(a1)
0001A476 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A47A 337C 2130 0008             		move.w	#$2130,8(a1)
0001A480 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A486 4228 0025                  		clr.b	$25(a0)
0001A48A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A48E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A492 135A 0018                  		move.b	(a2)+,$18(a1)
0001A496 237C 0000 C7D4 0004        		move.l	#Map_obj32,4(a1)
0001A49E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A4A4 137C 0004 0001             		move.b	#4,1(a1)
0001A4AA 08E9 0007 0001             		bset	#7,1(a1)
0001A4B0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4B6 137C 0000 001A             		move.b	#0,$1A(a1)
0001A4BC                            
0001A4BC                            Obj82_Eggman:				; XREF: Obj82_Index
0001A4BC 7000                       		moveq	#0,d0
0001A4BE 1028 0025                  		move.b	$25(a0),d0
0001A4C2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A4C6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A4CA 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A4CE 4EB9 0000 B0A0             		jsr	AnimateSprite
0001A4D4 4EF9 0000 E052             		jmp	DisplaySprite
0001A4DA                            ; ===========================================================================
0001A4DA 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A4DC 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A4DE 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A4E0 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A4E2                            ; ===========================================================================
0001A4E2                            
0001A4E2                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A4E2 3028 0008                  		move.w	8(a0),d0
0001A4E6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A4EA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A4EE 6400                       		bcc.s	loc_19934	; if not, branch
0001A4F0 5428 0025                  		addq.b	#2,$25(a0)
0001A4F4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A4FA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A500                            
0001A500                            loc_19934:				; XREF: Obj82_EggIndex
0001A500 4EF9 0000 E02C             		jmp	SpeedToPos
0001A506                            ; ===========================================================================
0001A506                            
0001A506                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A506 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A50A 6600                       		bne.s	loc_19954	; if time remains, branch
0001A50C 5428 0025                  		addq.b	#2,$25(a0)
0001A510 117C 0002 001C             		move.b	#2,$1C(a0)
0001A516 5868 000C                  		addq.w	#4,$C(a0)
0001A51A 317C 000F 003C             		move.w	#15,$3C(a0)
0001A520                            
0001A520                            loc_19954:
0001A520 60DE                       		bra.s	loc_19934
0001A522                            ; ===========================================================================
0001A522                            
0001A522                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A522 5368 003C                  		subq.w	#1,$3C(a0)
0001A526 6E00                       		bgt.s	loc_199D0
0001A528 6600                       		bne.s	loc_1996A
0001A52A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A530 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A536                            
0001A536                            loc_1996A:
0001A536 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A53C 6E00                       		bgt.s	loc_19976
0001A53E 4268 0010                  		clr.w	$10(a0)
0001A542                            
0001A542                            loc_19976:
0001A542 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A548 4A68 0012                  		tst.w	$12(a0)
0001A54C 6B00                       		bmi.s	Obj82_FindBlocks
0001A54E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A554 6500                       		bcs.s	Obj82_FindBlocks
0001A556 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A55C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A562 6500                       		bcs.s	Obj82_FindBlocks
0001A564 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A56A 4268 0012                  		clr.w	$12(a0)
0001A56E                            
0001A56E                            Obj82_FindBlocks:
0001A56E 3028 0010                  		move.w	$10(a0),d0
0001A572 8068 0012                  		or.w	$12(a0),d0
0001A576 6600                       		bne.s	loc_199D0
0001A578 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A57C 703E                       		moveq	#$3E,d0
0001A57E 7240                       		moveq	#$40,d1
0001A580                            
0001A580                            Obj82_FindLoop:	
0001A580 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A582 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A586 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A58A                            
0001A58A 6600                       		bne.s	loc_199D0
0001A58C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A592 5428 0025                  		addq.b	#2,$25(a0)
0001A596 117C 0001 001C             		move.b	#1,$1C(a0)
0001A59C                            
0001A59C                            loc_199D0:
0001A59C 6000 FF62                  		bra.w	loc_19934
0001A5A0                            ; ===========================================================================
0001A5A0                            
0001A5A0                            Obj82_Switch:				; XREF: Obj82_Index
0001A5A0 7000                       		moveq	#0,d0
0001A5A2 1028 0025                  		move.b	$25(a0),d0
0001A5A6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A5AA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A5AE                            ; ===========================================================================
0001A5AE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A5B0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A5B2                            ; ===========================================================================
0001A5B2                            
0001A5B2                            loc_199E6:				; XREF: Obj82_SwIndex
0001A5B2 2268 0034                  		movea.l	$34(a0),a1
0001A5B6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A5BC 6600                       		bne.s	Obj82_SwDisplay
0001A5BE 117C 0001 001A             		move.b	#1,$1A(a0)
0001A5C4 5428 0025                  		addq.b	#2,$25(a0)
0001A5C8                            
0001A5C8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A5C8 4EF9 0000 E052             		jmp	DisplaySprite
0001A5CE                            ; ===========================================================================
0001A5CE                            Ani_obj82:
0001A5CE                            	include "_anim\obj82.asm"
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE                            ; Animation script - Eggman (SBZ2)
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE 0000                       		dc.w byte_19A10-Ani_obj82
0001A5D0 0000                       		dc.w byte_19A14-Ani_obj82
0001A5D2 0000                       		dc.w byte_19A18-Ani_obj82
0001A5D4 0000                       		dc.w byte_19A20-Ani_obj82
0001A5D6 0000                       		dc.w byte_19A24-Ani_obj82
0001A5D8 0000                       		dc.w byte_19A2A-Ani_obj82
0001A5DA 0000                       		dc.w byte_19A30-Ani_obj82
0001A5DC 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A5E0 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A5E4 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A5EC 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A5F0 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A5F6 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A5FC 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A600                            		even
0001A600                            		even
0001A600                            
0001A600                            ; ---------------------------------------------------------------------------
0001A600                            ; Sprite mappings - Eggman (SBZ2)
0001A600                            ; ---------------------------------------------------------------------------
0001A600                            Map_obj82:
0001A600                            	include "_maps\obj82.asm"
0001A600                            ; ================================================================================
0001A600                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A600                            ; ================================================================================
0001A600                            
0001A600                            DATAA16Z12RYSAF:
0001A600 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A604 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A608 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A60C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A610 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A614 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A616 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A617 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A61C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A621 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A626 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A627 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A62C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A631 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A636 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A63B 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A63C E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A641 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A646 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A64B FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A650 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A651 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A656 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A65B F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A660 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A661 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A666 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A66B 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A670 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A675 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A676 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A67B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A680 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A685 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A68A 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A68B E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A690 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A695 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A69A 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A69F F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A6A4 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A6A9 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A6AE 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A6AF 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A6B4 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A6B9 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A6BE F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A6C3 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A6C4 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A6C9 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A6CE 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A6D3 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A6D8 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A6DD 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A6DE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A6E3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A6E8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A6ED 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A6F2 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A6F7 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A6FC 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A701 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A706 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A707 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A70C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A711 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A716                            	even
0001A716                            	even
0001A716                            
0001A716                            ; ===========================================================================
0001A716                            ; ---------------------------------------------------------------------------
0001A716                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A716                            ; ---------------------------------------------------------------------------
0001A716                            
0001A716                            Obj83:					; XREF: Obj_Index
0001A716 7000                       		moveq	#0,d0
0001A718 1028 0024                  		move.b	$24(a0),d0
0001A71C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A720 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A724                            ; ===========================================================================
0001A724 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A726 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A728 0000                       		dc.w loc_19C36-Obj83_Index
0001A72A 0000                       		dc.w loc_19C62-Obj83_Index
0001A72C 0000                       		dc.w loc_19C72-Obj83_Index
0001A72E 0000                       		dc.w loc_19C80-Obj83_Index
0001A730                            ; ===========================================================================
0001A730                            
0001A730                            Obj83_Main:				; XREF: Obj83_Index
0001A730 317C 2080 0008             		move.w	#$2080,8(a0)
0001A736 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A73C 117C 0080 0019             		move.b	#$80,$19(a0)
0001A742 117C 0010 0016             		move.b	#$10,$16(a0)
0001A748 117C 0004 0001             		move.b	#4,1(a0)
0001A74E 08E8 0007 0001             		bset	#7,1(a0)
0001A754 7800                       		moveq	#0,d4
0001A756 3A3C 2010                  		move.w	#$2010,d5
0001A75A 7C07                       		moveq	#7,d6
0001A75C 45E8 0030                  		lea	$30(a0),a2
0001A760                            
0001A760                            Obj83_MakeBlock:
0001A760 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001A766 6600                       		bne.s	Obj83_ExitMake
0001A768 34C9                       		move.w	a1,(a2)+
0001A76A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A76E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A776 337C 4518 0002             		move.w	#$4518,2(a1)
0001A77C 137C 0004 0001             		move.b	#4,1(a1)
0001A782 137C 0010 0019             		move.b	#$10,$19(a1)
0001A788 137C 0010 0016             		move.b	#$10,$16(a1)
0001A78E 137C 0003 0018             		move.b	#3,$18(a1)
0001A794 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A798 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A79E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A7A2 137C 0008 0024             		move.b	#8,$24(a1)
0001A7A8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A7AC                            
0001A7AC                            Obj83_ExitMake:
0001A7AC 5428 0024                  		addq.b	#2,$24(a0)
0001A7B0 4E75                       		rts	
0001A7B2                            ; ===========================================================================
0001A7B2                            
0001A7B2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A7B2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A7B8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A7BA 4228 001A                  		clr.b	$1A(a0)
0001A7BE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A7C2                            
0001A7C2                            Obj83_Solid:
0001A7C2 7000                       		moveq	#0,d0
0001A7C4 1028 001A                  		move.b	$1A(a0),d0
0001A7C8 4400                       		neg.b	d0
0001A7CA 4880                       		ext.w	d0
0001A7CC 5040                       		addq.w	#8,d0
0001A7CE E940                       		asl.w	#4,d0
0001A7D0 383C 2100                  		move.w	#$2100,d4
0001A7D4 9840                       		sub.w	d0,d4
0001A7D6 1140 0019                  		move.b	d0,$19(a0)
0001A7DA 3144 0008                  		move.w	d4,8(a0)
0001A7DE 720B                       		moveq	#$B,d1
0001A7E0 D240                       		add.w	d0,d1
0001A7E2 7410                       		moveq	#$10,d2
0001A7E4 7611                       		moveq	#$11,d3
0001A7E6 4EF9 0001 0422             		jmp	SolidObject
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_19C36:				; XREF: Obj83_Index
0001A7EC 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A7F2 6400                       		bcc.s	Obj83_Solid2
0001A7F4 70FF                       		moveq	#-1,d0
0001A7F6 1028 001A                  		move.b	$1A(a0),d0
0001A7FA 4880                       		ext.w	d0
0001A7FC D040                       		add.w	d0,d0
0001A7FE 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A802 2240                       		movea.l	d0,a1
0001A804 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A80A 5228 001A                  		addq.b	#1,$1A(a0)
0001A80E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A814 6700                       		beq.s	loc_19C62
0001A816                            
0001A816                            Obj83_Solid2:
0001A816 60AA                       		bra.s	Obj83_Solid
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            loc_19C62:				; XREF: Obj83_Index
0001A818 08A8 0003 0022             		bclr	#3,$22(a0)
0001A81E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A824 6000 FBD2                  		bra.w	loc_1982C
0001A828                            ; ===========================================================================
0001A828                            
0001A828                            loc_19C72:				; XREF: Obj83_Index
0001A828 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A82E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A830 4EF9 0000 E052             		jmp	DisplaySprite
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            loc_19C80:				; XREF: Obj83_Index
0001A836 4A28 0001                  		tst.b	1(a0)
0001A83A 6A00 FBBC                  		bpl.w	loc_1982C
0001A83E 4EB9 0000 DFBA             		jsr	ObjectFall
0001A844 4EF9 0000 E052             		jmp	DisplaySprite
0001A84A                            ; ===========================================================================
0001A84A                            
0001A84A                            Obj83_Break:				; XREF: loc_19C72
0001A84A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A84E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A852 7801                       		moveq	#1,d4
0001A854 7203                       		moveq	#3,d1
0001A856 7438                       		moveq	#$38,d2
0001A858 5428 0024                  		addq.b	#2,$24(a0)
0001A85C 117C 0008 0019             		move.b	#8,$19(a0)
0001A862 117C 0008 0016             		move.b	#8,$16(a0)
0001A868 43D0                       		lea	(a0),a1
0001A86A 6000                       		bra.s	Obj83_MakeFrag
0001A86C                            ; ===========================================================================
0001A86C                            
0001A86C                            Obj83_LoopFrag:
0001A86C 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001A872 6600                       		bne.s	Obj83_BreakSnd
0001A874                            
0001A874                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A874 45D0                       		lea	(a0),a2
0001A876 47D1                       		lea	(a1),a3
0001A878 7603                       		moveq	#3,d3
0001A87A                            
0001A87A                            loc_19CC4:
0001A87A 26DA                       		move.l	(a2)+,(a3)+
0001A87C 26DA                       		move.l	(a2)+,(a3)+
0001A87E 26DA                       		move.l	(a2)+,(a3)+
0001A880 26DA                       		move.l	(a2)+,(a3)+
0001A882 51CB FFF6                  		dbf	d3,loc_19CC4
0001A886                            
0001A886 335C 0012                  		move.w	(a4)+,$12(a1)
0001A88A 361D                       		move.w	(a5)+,d3
0001A88C D769 0008                  		add.w	d3,8(a1)
0001A890 361D                       		move.w	(a5)+,d3
0001A892 D769 000C                  		add.w	d3,$C(a1)
0001A896 1344 001A                  		move.b	d4,$1A(a1)
0001A89A 5244                       		addq.w	#1,d4
0001A89C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A8A0                            
0001A8A0                            Obj83_BreakSnd:
0001A8A0 303C 00CB                  		move.w	#$CB,d0
0001A8A4 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A8AA 4EF9 0000 E052             		jmp	DisplaySprite
0001A8B0                            ; ===========================================================================
0001A8B0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A8B4 0120 00C0                  		dc.w $120, $C0
0001A8B8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A8BC 0010 0000                  		dc.w $10, 0
0001A8C0 0000 0010                  		dc.w 0,	$10
0001A8C4 0010 0010                  		dc.w $10, $10
0001A8C8                            ; ---------------------------------------------------------------------------
0001A8C8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A8C8                            ; ---------------------------------------------------------------------------
0001A8C8                            Map_obj83:
0001A8C8                            	include "_maps\obj83.asm"
0001A8C8                            ; ---------------------------------------------------------------------------
0001A8C8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A8C8                            ; ---------------------------------------------------------------------------
0001A8C8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A8CC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A8D0 0000                       		dc.w byte_19D46-Map_obj83
0001A8D2 01                         byte_19D1C:	dc.b 1
0001A8D3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A8D8 02                         byte_19D22:	dc.b 2
0001A8D9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A8DE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A8E3 00                         		dc.b 0
0001A8E4 02                         byte_19D2E:	dc.b 2
0001A8E5 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A8EA F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A8EF 00                         		dc.b 0
0001A8F0 02                         byte_19D3A:	dc.b 2
0001A8F1 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A8F6 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A8FB 00                         		dc.b 0
0001A8FC 02                         byte_19D46:	dc.b 2
0001A8FD F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A902 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A908 00                         		even
0001A908 00                         		even
0001A908                            
0001A908                            ; ===========================================================================
0001A908                            ; ---------------------------------------------------------------------------
0001A908                            ; Object 85 - Eggman (FZ)
0001A908                            ; ---------------------------------------------------------------------------
0001A908                            
0001A908                            Obj85_Delete:
0001A908 4EF9 0000 E08E             		jmp	DeleteObject
0001A90E                            ; ===========================================================================
0001A90E                            
0001A90E                            Obj85:					; XREF: Obj_Index
0001A90E 7000                       		moveq	#0,d0
0001A910 1028 0024                  		move.b	$24(a0),d0
0001A914 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A918 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A91C                            ; ===========================================================================
0001A91C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A91E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A920 0000                       		dc.w loc_1A38E-Obj85_Index
0001A922 0000                       		dc.w loc_1A346-Obj85_Index
0001A924 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A926 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A928 0000                       		dc.w loc_1A264-Obj85_Index
0001A92A                            
0001A92A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A930 0001 A600                  		dc.l Map_obj82		; mappings pointer
0001A934 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A93A 0000 0000                  		dc.l Map_obj84
0001A93E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A944 0000 0000                  		dc.l Map_FZBoss
0001A948 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A94E 0001 A600                  		dc.l Map_obj82
0001A952 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A958 0001 8942                  		dc.l Map_Eggman
0001A95C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A962 0001 8942                  		dc.l Map_Eggman
0001A966                            
0001A966 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A96B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A970 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A975 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A97A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A97F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A984                            ; ===========================================================================
0001A984                            
0001A984                            Obj85_Main:				; XREF: Obj85_Index
0001A984 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A988 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A98C 2248                       		movea.l	a0,a1
0001A98E 7205                       		moveq	#5,d1
0001A990 6000                       		bra.s	Obj85_LoadBoss
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            Obj85_Loop:
0001A992 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001A998 6600                       		bne.s	loc_19E20
0001A99A                            
0001A99A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A99A 12BC 0085                  		move.b	#$85,(a1)
0001A99E 335A 0008                  		move.w	(a2)+,8(a1)
0001A9A2 335A 000C                  		move.w	(a2)+,$C(a1)
0001A9A6 335A 0002                  		move.w	(a2)+,2(a1)
0001A9AA 235A 0004                  		move.l	(a2)+,4(a1)
0001A9AE 135B 0024                  		move.b	(a3)+,$24(a1)
0001A9B2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A9B6 135B 0018                  		move.b	(a3)+,$18(a1)
0001A9BA 135B 0017                  		move.b	(a3)+,$17(a1)
0001A9BE 135B 0016                  		move.b	(a3)+,$16(a1)
0001A9C2 137C 0004 0001             		move.b	#4,1(a1)
0001A9C8 08E8 0007 0001             		bset	#7,1(a0)
0001A9CE 2348 0034                  		move.l	a0,$34(a1)
0001A9D2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A9D6                            
0001A9D6                            loc_19E20:
0001A9D6 45E8 0036                  		lea	$36(a0),a2
0001A9DA 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001A9E0 6600                       		bne.s	loc_19E5A
0001A9E2 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A9E6 3489                       		move.w	a1,(a2)
0001A9E8 2348 0034                  		move.l	a0,$34(a1)
0001A9EC 45E8 0038                  		lea	$38(a0),a2
0001A9F0 7400                       		moveq	#0,d2
0001A9F2 7203                       		moveq	#3,d1
0001A9F4                            
0001A9F4                            loc_19E3E:
0001A9F4 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001A9FA 6600                       		bne.s	loc_19E5A
0001A9FC 34C9                       		move.w	a1,(a2)+
0001A9FE 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001AA02 2348 0034                  		move.l	a0,$34(a1)
0001AA06 1342 0028                  		move.b	d2,$28(a1)
0001AA0A 5442                       		addq.w	#2,d2
0001AA0C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AA10                            
0001AA10                            loc_19E5A:
0001AA10 317C 0000 0034             		move.w	#0,$34(a0)
0001AA16 4EB8 2D14                  		jsr	RandomNumber	; get a number between 0 and 250
0001AA1A 4240                       		clr.w	d0
0001AA1C 4840                       		swap	d0
0001AA1E 80FC 00FB                  		divu.w	#251,d0
0001AA22 4840                       		swap	d0
0001AA24 0640 0118                  		add.w	#280,d0		; add 280
0001AA28 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001AA2E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA34                            
0001AA34                            Obj85_Eggman:				; XREF: Obj85_Index
0001AA34 7000                       		moveq	#0,d0
0001AA36 1028 0034                  		move.b	$34(a0),d0
0001AA3A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001AA3E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001AA42 4EF9 0000 E052             		jmp	DisplaySprite
0001AA48                            ; ===========================================================================
0001AA48 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001AA4C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001AA50 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001AA54 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001AA58                            ; ===========================================================================
0001AA58                            
0001AA58                            loc_19E90:				; XREF: off_19E80
0001AA58 4AB8 F680                  		tst.l	($FFFFF680).w
0001AA5C 6600                       		bne.s	loc_19EA2
0001AA5E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001AA64 6500                       		bcs.s	loc_19EA2
0001AA66 5428 0034                  		addq.b	#2,$34(a0)
0001AA6A                            
0001AA6A                            loc_19EA2:
0001AA6A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001AA6E 4E75                       		rts	
0001AA70                            ; ===========================================================================
0001AA70                            
0001AA70                            loc_19EA8:				; XREF: off_19E80
0001AA70 4A68 0030                  		tst.w	$30(a0)
0001AA74 6A00                       		bpl.s	loc_19F10
0001AA76 4268 0030                  		clr.w	$30(a0)
0001AA7A 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001AA80 0240 000C                  		andi.w	#$C,d0
0001AA84 3200                       		move.w	d0,d1
0001AA86 5441                       		addq.w	#2,d1
0001AA88 4A80                       		tst.l	d0
0001AA8A 6A00                       		bpl.s	loc_19EC6
0001AA8C C141                       		exg	d1,d0
0001AA8E                            
0001AA8E                            loc_19EC6:
0001AA8E 43FA 0000                  		lea	word_19FD6(pc),a1
0001AA92 3031 0000                  		move.w	(a1,d0.w),d0
0001AA96 3231 1000                  		move.w	(a1,d1.w),d1
0001AA9A 3140 0030                  		move.w	d0,$30(a0)
0001AA9E 74FF                       		moveq	#-1,d2
0001AAA0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AAA4 2242                       		movea.l	d2,a1
0001AAA6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AAAC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AAB2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AAB6 2242                       		movea.l	d2,a1
0001AAB8 137C 0001 0029             		move.b	#1,$29(a1)
0001AABE 337C 0000 0030             		move.w	#0,$30(a1)
0001AAC4 317C 0001 0032             		move.w	#1,$32(a0)
0001AACA 4228 0035                  		clr.b	$35(a0)
0001AACE 303C 00B7                  		move.w	#$B7,d0
0001AAD2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AAD8                            
0001AAD8                            loc_19F10:
0001AAD8 4A68 0032                  		tst.w	$32(a0)
0001AADC 6B00 0000                  		bmi.w	loc_19FA6
0001AAE0 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAE6 3038 D008                  		move.w	($FFFFD008).w,d0
0001AAEA 9068 0008                  		sub.w	8(a0),d0
0001AAEE 6500                       		bcs.s	loc_19F2E
0001AAF0 08E8 0000 0022             		bset	#0,$22(a0)
0001AAF6                            
0001AAF6                            loc_19F2E:
0001AAF6 323C 002B                  		move.w	#$2B,d1
0001AAFA 343C 0014                  		move.w	#$14,d2
0001AAFE 363C 0014                  		move.w	#$14,d3
0001AB02 3828 0008                  		move.w	8(a0),d4
0001AB06 4EB9 0001 0422             		jsr	SolidObject
0001AB0C 4A44                       		tst.w	d4
0001AB0E 6E00                       		bgt.s	loc_19F50
0001AB10                            
0001AB10                            loc_19F48:
0001AB10 4A28 0035                  		tst.b	$35(a0)
0001AB14 6600                       		bne.s	loc_19F88
0001AB16 6000                       		bra.s	loc_19F96
0001AB18                            ; ===========================================================================
0001AB18                            
0001AB18                            loc_19F50:
0001AB18 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AB1C                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AB1C                            ;		bne.s	loc_19F48
0001AB1C                            ;		move.w	#$300,d0		; knock player back (nah)
0001AB1C                            ;		btst	#0,$22(a0)
0001AB1C                            ;		bne.s	loc_19F6A
0001AB1C                            ;		neg.w	d0
0001AB1C                            ;
0001AB1C                            ;loc_19F6A:
0001AB1C                            ;		move.w	d0,($FFFFD010).w
0001AB1C 4A28 0035                  		tst.b	$35(a0)
0001AB20 6600                       		bne.s	loc_19F88
0001AB22 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AB28 6400                       		bcc.s	@notoverflown
0001AB2A 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AB30                            @notoverflown:
0001AB30 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AB36 303C 00AC                  		move.w	#$AC,d0
0001AB3A 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB40                            
0001AB40                            loc_19F88:
0001AB40 5328 0035                  		subq.b	#1,$35(a0)
0001AB44 6700                       		beq.s	loc_19F96
0001AB46 117C 0003 001C             		move.b	#3,$1C(a0)
0001AB4C 6000                       		bra.s	loc_19F9C
0001AB4E                            ; ===========================================================================
0001AB4E                            
0001AB4E                            loc_19F96:
0001AB4E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB54                            
0001AB54                            loc_19F9C:
0001AB54 43FA FA78                  		lea	Ani_obj82(pc),a1
0001AB58 4EF9 0000 B0A0             		jmp	AnimateSprite
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_19FA6:
0001AB5E 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AB64 6700                       		beq.s	loc_19FBC
0001AB66 5428 0034                  		addq.b	#2,$34(a0)
0001AB6A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB70 4268 0032                  		clr.w	$32(a0)
0001AB74 4E75                       		rts	
0001AB76                            ; ===========================================================================
0001AB76                            
0001AB76                            loc_19FBC:
0001AB76 117C 0006 0034             		move.b	#6,$34(a0)
0001AB7C 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AB82 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AB88 117C 0014 0016             		move.b	#$14,$16(a0)
0001AB8E 4E75                       		rts	
0001AB90                            ; ===========================================================================
0001AB90 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            loc_19FE6:				; XREF: off_19E80
0001ABA0 70FF                       		moveq	#-1,d0
0001ABA2 3028 0036                  		move.w	$36(a0),d0
0001ABA6 2240                       		movea.l	d0,a1
0001ABA8 4A68 0030                  		tst.w	$30(a0)
0001ABAC 6A00                       		bpl.s	loc_1A000
0001ABAE 4268 0030                  		clr.w	$30(a0)
0001ABB2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ABB8 6100                       		bsr.s	loc_1A020
0001ABBA                            
0001ABBA                            loc_1A000:
0001ABBA 700F                       		moveq	#$F,d0
0001ABBC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001ABC0 6600                       		bne.s	loc_1A00A
0001ABC2 6100                       		bsr.s	loc_1A020
0001ABC4                            
0001ABC4                            loc_1A00A:
0001ABC4 4A68 0032                  		tst.w	$32(a0)
0001ABC8 6700                       		beq.s	locret_1A01E
0001ABCA 5528 0034                  		subq.b	#2,$34(a0)
0001ABCE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ABD4 4268 0032                  		clr.w	$32(a0)
0001ABD8                            
0001ABD8                            locret_1A01E:
0001ABD8 4E75                       		rts	
0001ABDA                            ; ===========================================================================
0001ABDA                            
0001ABDA                            loc_1A020:
0001ABDA 303C 00B1                  		move.w	#$B1,d0
0001ABDE 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            loc_1A02A:				; XREF: off_19E80
0001ABE4 117C 0030 0017             		move.b	#$30,$17(a0)
0001ABEA 08E8 0000 0022             		bset	#0,$22(a0)
0001ABF0 4EB9 0000 E02C             		jsr	SpeedToPos
0001ABF6 117C 0006 001A             		move.b	#6,$1A(a0)
0001ABFC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AC02 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AC08 6500                       		bcs.s	loc_1A070
0001AC0A 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AC10 5428 0034                  		addq.b	#2,$34(a0)
0001AC14 117C 0020 0017             		move.b	#$20,$17(a0)
0001AC1A 317C 0100 0010             		move.w	#$100,$10(a0)
0001AC20 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AC26 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AC2A                            
0001AC2A                            loc_1A070:
0001AC2A 6000 0000                  		bra.w	loc_1A166
0001AC2E                            ; ===========================================================================
0001AC2E                            
0001AC2E                            loc_1A074:				; XREF: off_19E80
0001AC2E 08E8 0000 0022             		bset	#0,$22(a0)
0001AC34 117C 0004 001C             		move.b	#4,$1C(a0)
0001AC3A 4EB9 0000 E02C             		jsr	SpeedToPos
0001AC40 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AC46 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AC4C 6500                       		bcs.s	loc_1A09A
0001AC4E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AC54                            
0001AC54                            loc_1A09A:
0001AC54 317C 0400 0010             		move.w	#$400,$10(a0)
0001AC5A 3028 0008                  		move.w	8(a0),d0
0001AC5E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AC62 6A00                       		bpl.s	loc_1A0B4
0001AC64 317C 0500 0010             		move.w	#$500,$10(a0)
0001AC6A 6000 0000                  		bra.w	loc_1A0F2
0001AC6E                            ; ===========================================================================
0001AC6E                            
0001AC6E                            loc_1A0B4:
0001AC6E 0440 0070                  		subi.w	#$70,d0
0001AC72 6500                       		bcs.s	loc_1A0F2
0001AC74 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AC7A 5140                       		subq.w	#8,d0
0001AC7C 6500                       		bcs.s	loc_1A0F2
0001AC7E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AC84 5140                       		subq.w	#8,d0
0001AC86 6500                       		bcs.s	loc_1A0F2
0001AC88 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC8E 5140                       		subq.w	#8,d0
0001AC90 6500                       		bcs.s	loc_1A0F2
0001AC92 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC98 5140                       		subq.w	#8,d0
0001AC9A 6500                       		bcs.s	loc_1A0F2
0001AC9C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ACA2 0440 0038                  		subi.w	#$38,d0
0001ACA6 6500                       		bcs.s	loc_1A0F2
0001ACA8 4268 0010                  		clr.w	$10(a0)
0001ACAC                            
0001ACAC                            loc_1A0F2:
0001ACAC 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ACB2 6500                       		bcs.s	loc_1A110
0001ACB4 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ACBA 317C 0240 0010             		move.w	#$240,$10(a0)
0001ACC0 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ACC6 5428 0034                  		addq.b	#2,$34(a0)
0001ACCA                            
0001ACCA                            loc_1A110:
0001ACCA 6000                       		bra.s	loc_1A15C
0001ACCC                            ; ===========================================================================
0001ACCC                            
0001ACCC                            loc_1A112:				; XREF: off_19E80
0001ACCC 4EB9 0000 E02C             		jsr	SpeedToPos
0001ACD2 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ACD8 6500                       		bcs.s	loc_1A124
0001ACDA 4268 0010                  		clr.w	$10(a0)
0001ACDE                            
0001ACDE                            loc_1A124:
0001ACDE 0668 0034 0012             		addi.w	#$34,$12(a0)
0001ACE4 4A68 0012                  		tst.w	$12(a0)
0001ACE8 6B00                       		bmi.s	loc_1A142
0001ACEA 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001ACF0 6500                       		bcs.s	loc_1A142
0001ACF2 317C 0592 000C             		move.w	#$592,$C(a0)
0001ACF8 4268 0012                  		clr.w	$12(a0)
0001ACFC                            
0001ACFC                            loc_1A142:
0001ACFC 3028 0010                  		move.w	$10(a0),d0
0001AD00 8068 0012                  		or.w	$12(a0),d0
0001AD04 6600                       		bne.s	loc_1A15C
0001AD06 5428 0034                  		addq.b	#2,$34(a0)
0001AD0A 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AD10 117C 0001 0021             		move.b	#1,$21(a0)
0001AD16                            
0001AD16                            loc_1A15C:
0001AD16 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AD1A 4EB9 0000 B0A0             		jsr	AnimateSprite
0001AD20                            
0001AD20                            loc_1A166:
0001AD20 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AD26 6C00                       		bge.s	loc_1A172
0001AD28 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AD2C                            
0001AD2C                            loc_1A172:
0001AD2C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AD32 6C00                       		bge.s	locret_1A190
0001AD34 323C 001B                  		move.w	#$1B,d1
0001AD38 343C 0070                  		move.w	#$70,d2
0001AD3C 363C 0071                  		move.w	#$71,d3
0001AD40 3828 0008                  		move.w	8(a0),d4
0001AD44 4EF9 0001 0422             		jmp	SolidObject
0001AD4A                            ; ===========================================================================
0001AD4A                            
0001AD4A                            locret_1A190:
0001AD4A 4E75                       		rts	
0001AD4C                            ; ===========================================================================
0001AD4C                            
0001AD4C                            loc_1A192:				; XREF: off_19E80
0001AD4C 217C 0001 8942 0004        		move.l	#Map_Eggman,4(a0)
0001AD54 317C 0400 0002             		move.w	#$400,2(a0)
0001AD5A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AD60 08E8 0000 0022             		bset	#0,$22(a0)
0001AD66 4EB9 0000 E02C             		jsr	SpeedToPos
0001AD6C 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AD72 6400                       		bcc.s	loc_1A1D0
0001AD74 317C 0180 0010             		move.w	#$180,$10(a0)
0001AD7A 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AD80 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD86 5428 0034                  		addq.b	#2,$34(a0)
0001AD8A                            
0001AD8A                            loc_1A1D0:
0001AD8A 6000 FF8A                  		bra.w	loc_1A15C
0001AD8E                            ; ===========================================================================
0001AD8E                            
0001AD8E                            loc_1A1D4:				; XREF: off_19E80
0001AD8E 08E8 0000 0022             		bset	#0,$22(a0)
0001AD94 4EB9 0000 E02C             		jsr	SpeedToPos
0001AD9A 4A68 0030                  		tst.w	$30(a0)
0001AD9E 6600                       		bne.s	loc_1A1FC
0001ADA0 4A28 0020                  		tst.b	$20(a0)
0001ADA4 6600                       		bne.s	loc_1A216
0001ADA6 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ADAC 303C 00AC                  		move.w	#$AC,d0
0001ADB0 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ADB6                            
0001ADB6                            loc_1A1FC:
0001ADB6 5368 0030                  		subq.w	#1,$30(a0)
0001ADBA 6600                       		bne.s	loc_1A216
0001ADBC 4A28 0022                  		tst.b	$22(a0)
0001ADC0 6A00                       		bpl.s	loc_1A210
0001ADC2 317C 0060 0012             		move.w	#$60,$12(a0)
0001ADC8 6000                       		bra.s	loc_1A216
0001ADCA                            ; ===========================================================================
0001ADCA                            
0001ADCA                            loc_1A210:
0001ADCA 117C 000F 0020             		move.b	#$F,$20(a0)
0001ADD0                            
0001ADD0                            loc_1A216:
0001ADD0 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ADD6 6D00                       		blt.s	loc_1A23A
0001ADD8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ADDE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001ADE4 4278 D014                  		clr.w	($FFFFD014).w
0001ADE8 4A68 0012                  		tst.w	$12(a0)
0001ADEC 6A00                       		bpl.s	loc_1A248
0001ADEE 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001ADF4                            
0001ADF4                            loc_1A23A:
0001ADF4 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001ADFA 6D00                       		blt.s	loc_1A248
0001ADFC 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AE02                            
0001AE02                            loc_1A248:
0001AE02 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AE08 6500                       		bcs.s	loc_1A260
0001AE0A 4A28 0001                  		tst.b	1(a0)
0001AE0E 6B00                       		bmi.s	loc_1A260
0001AE10 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AE16 6000 FAF0                  		bra.w	Obj85_Delete
0001AE1A                            ; ===========================================================================
0001AE1A                            
0001AE1A                            loc_1A260:
0001AE1A 6000 FEFA                  		bra.w	loc_1A15C
0001AE1E                            ; ===========================================================================
0001AE1E                            
0001AE1E                            loc_1A264:				; XREF: Obj85_Index
0001AE1E 2268 0034                  		movea.l	$34(a0),a1
0001AE22 1011                       		move.b	(a1),d0
0001AE24 B010                       		cmp.b	(a0),d0
0001AE26 6600 FAE0                  		bne.w	Obj85_Delete
0001AE2A 117C 0007 001C             		move.b	#7,$1C(a0)
0001AE30 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE36 6C00                       		bge.s	loc_1A280
0001AE38 6000                       		bra.s	loc_1A2A6
0001AE3A                            ; ===========================================================================
0001AE3A                            
0001AE3A                            loc_1A280:
0001AE3A 4A69 0010                  		tst.w	$10(a1)
0001AE3E 6700                       		beq.s	loc_1A28C
0001AE40 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AE46                            
0001AE46                            loc_1A28C:
0001AE46 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AE4A 4EB9 0000 B0A0             		jsr	AnimateSprite
0001AE50                            
0001AE50                            loc_1A296:
0001AE50 2268 0034                  		movea.l	$34(a0),a1
0001AE54 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE5A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE60                            
0001AE60                            loc_1A2A6:
0001AE60 2268 0034                  		movea.l	$34(a0),a1
0001AE64 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AE6A 7003                       		moveq	#3,d0
0001AE6C C028 0022                  		and.b	$22(a0),d0
0001AE70 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AE76 8128 0001                  		or.b	d0,1(a0)
0001AE7A 4EF9 0000 E052             		jmp	DisplaySprite
0001AE80                            ; ===========================================================================
0001AE80                            
0001AE80                            loc_1A2C6:				; XREF: Obj85_Index
0001AE80 2268 0034                  		movea.l	$34(a0),a1
0001AE84 1011                       		move.b	(a1),d0
0001AE86 B010                       		cmp.b	(a0),d0
0001AE88 6600 FA7E                  		bne.w	Obj85_Delete
0001AE8C 0CA9 0001 8942 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE94 6700                       		beq.s	loc_1A2E4
0001AE96 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AE9C 60C2                       		bra.s	loc_1A2A6
0001AE9E                            ; ===========================================================================
0001AE9E                            
0001AE9E                            loc_1A2E4:
0001AE9E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AEA4 4A29 0021                  		tst.b	$21(a1)
0001AEA8 6F00                       		ble.s	loc_1A312
0001AEAA 117C 0006 001C             		move.b	#6,$1C(a0)
0001AEB0 217C 0001 8942 0004        		move.l	#Map_Eggman,4(a0)
0001AEB8 317C 0400 0002             		move.w	#$400,2(a0)
0001AEBE 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001AEC2 4EB9 0000 B0A0             		jsr	AnimateSprite
0001AEC8 6000 FF86                  		bra.w	loc_1A296
0001AECC                            ; ===========================================================================
0001AECC                            
0001AECC                            loc_1A312:
0001AECC 4A28 0001                  		tst.b	1(a0)
0001AED0 6A00 FA36                  		bpl.w	Obj85_Delete
0001AED4 6100 D584                  		bsr.w	BossDefeated
0001AED8 117C 0002 0018             		move.b	#2,$18(a0)
0001AEDE 117C 0000 001C             		move.b	#0,$1C(a0)
0001AEE4 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AEEC 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AEF2 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AEF6 4EB9 0000 B0A0             		jsr	AnimateSprite
0001AEFC 6000 FF52                  		bra.w	loc_1A296
0001AF00                            ; ===========================================================================
0001AF00                            
0001AF00                            loc_1A346:				; XREF: Obj85_Index
0001AF00 08E8 0000 0022             		bset	#0,$22(a0)
0001AF06 2268 0034                  		movea.l	$34(a0),a1
0001AF0A 0CA9 0001 8942 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF12 6700                       		beq.s	loc_1A35E
0001AF14 6000 FF4A                  		bra.w	loc_1A2A6
0001AF18                            ; ===========================================================================
0001AF18                            
0001AF18                            loc_1A35E:
0001AF18 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF1E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF24 4A28 001E                  		tst.b	$1E(a0)
0001AF28 6600                       		bne.s	loc_1A376
0001AF2A 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AF30                            
0001AF30                            loc_1A376:
0001AF30 5328 001E                  		subq.b	#1,$1E(a0)
0001AF34 6E00                       		bgt.s	loc_1A38A
0001AF36 5228 001A                  		addq.b	#1,$1A(a0)
0001AF3A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AF40 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AF44                            
0001AF44                            loc_1A38A:
0001AF44 6000 FF0A                  		bra.w	loc_1A296
0001AF48                            ; ===========================================================================
0001AF48                            
0001AF48                            loc_1A38E:				; XREF: Obj85_Index
0001AF48 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AF4E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF52 9068 0008                  		sub.w	8(a0),d0
0001AF56 6500                       		bcs.s	loc_1A3A6
0001AF58 4A28 0001                  		tst.b	1(a0)
0001AF5C 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AF60                            
0001AF60                            loc_1A3A6:
0001AF60 4EF9 0000 E052             		jmp	DisplaySprite
0001AF66                            ; ===========================================================================
0001AF66                            
0001AF66                            loc_1A3AC:				; XREF: Obj85_Index
0001AF66 117C 0000 001A             		move.b	#0,$1A(a0)
0001AF6C 08E8 0000 0022             		bset	#0,$22(a0)
0001AF72 2268 0034                  		movea.l	$34(a0),a1
0001AF76 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AF7C 6600                       		bne.s	loc_1A3D0
0001AF7E 0CA9 0001 8942 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF86 6700 F980                  		beq.w	Obj85_Delete
0001AF8A                            
0001AF8A                            loc_1A3D0:
0001AF8A 6000 FED4                  		bra.w	loc_1A2A6
0001AF8E                            ; ===========================================================================
0001AF8E                            Ani_obj85:
0001AF8E                            	include "_anim\obj85.asm"
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            ; Animation script - Eggman (FZ)
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AF90 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AF94                            		even
0001AF94                            		even
0001AF94                            
0001AF94                            Map_Eggman2:
0001AF94                            	include "_maps\Eggman2.asm"
0001AF94                            ; ---------------------------------------------------------------------------
0001AF94                            ; Sprite mappings - Eggman (FZ)
0001AF94                            ; ---------------------------------------------------------------------------
0001AF94 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AF96 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AF98 06                         byte_1A3DE:	dc.b 6
0001AF99 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AF9E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AFA3 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AFA8 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AFAD FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AFB2 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AFB7 06                         byte_1A3FD:	dc.b 6
0001AFB8 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AFBD EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AFC2 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AFC7 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AFCC FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AFD1 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AFD6                            		even
0001AFD6                            		even
0001AFD6                            
0001AFD6                            Map_FZBoss:
0001AFD6                            	include "_maps\FZ boss.asm"
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6                            ; Sprite mappings - boss (FZ)
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6 0000                       		dc.w byte_1A422-Map_FZBoss
0001AFD8 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AFDA 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AFDC 02                         byte_1A422:	dc.b 2
0001AFDD 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AFE2 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AFE7 03                         byte_1A42D:	dc.b 3
0001AFE8 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AFED 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AFF2 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AFF7 02                         byte_1A43D:	dc.b 2
0001AFF8 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AFFD 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B002                            		even
0001B002                            		even
0001B002                            
0001B002                            ; ===========================================================================
0001B002                            
0001B002                            Obj84_Delete:
0001B002 4EF9 0000 E08E             		jmp	DeleteObject
0001B008                            ; ===========================================================================
0001B008                            ; ---------------------------------------------------------------------------
0001B008                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B008                            ; ---------------------------------------------------------------------------
0001B008                            
0001B008                            Obj84:					; XREF: Obj_Index
0001B008 7000                       		moveq	#0,d0
0001B00A 1028 0024                  		move.b	$24(a0),d0
0001B00E 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B012 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B016                            ; ===========================================================================
0001B016 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B018 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B01A 0000                       		dc.w loc_1A57E-Obj84_Index
0001B01C                            
0001B01C 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B020 2550 0620                  		dc.w $2550, $620
0001B024 2490 04C0                  		dc.w $2490, $4C0
0001B028 2510 04C0                  		dc.w $2510, $4C0
0001B02C                            ; ===========================================================================
0001B02C                            
0001B02C                            Obj84_Main:				; XREF: Obj84_Index
0001B02C 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B030 7000                       		moveq	#0,d0
0001B032 1028 0028                  		move.b	$28(a0),d0
0001B036 D040                       		add.w	d0,d0
0001B038 D2C0                       		adda.w	d0,a1
0001B03A 117C 0004 0001             		move.b	#4,1(a0)
0001B040 08E8 0007 0001             		bset	#7,1(a0)
0001B046 08E8 0004 0001             		bset	#4,1(a0)
0001B04C 317C 0300 0002             		move.w	#$300,2(a0)
0001B052 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B05A 3159 0008                  		move.w	(a1)+,8(a0)
0001B05E 3151 000C                  		move.w	(a1),$C(a0)
0001B062 3159 0038                  		move.w	(a1)+,$38(a0)
0001B066 117C 0020 0016             		move.b	#$20,$16(a0)
0001B06C 117C 0060 0017             		move.b	#$60,$17(a0)
0001B072 117C 0020 0019             		move.b	#$20,$19(a0)
0001B078 117C 0060 0016             		move.b	#$60,$16(a0)
0001B07E 117C 0003 0018             		move.b	#3,$18(a0)
0001B084 5428 0024                  		addq.b	#2,$24(a0)
0001B088                            
0001B088                            loc_1A4CE:				; XREF: Obj84_Index
0001B088 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B08E 6F00                       		ble.s	loc_1A4DC
0001B090 08E8 0001 0001             		bset	#1,1(a0)
0001B096                            
0001B096                            loc_1A4DC:
0001B096 42A8 003C                  		clr.l	$3C(a0)
0001B09A 4A28 0029                  		tst.b	$29(a0)
0001B09E 6700                       		beq.s	loc_1A4EA
0001B0A0 5428 0024                  		addq.b	#2,$24(a0)
0001B0A4                            
0001B0A4                            loc_1A4EA:
0001B0A4 2028 003C                  		move.l	$3C(a0),d0
0001B0A8 2228 0038                  		move.l	$38(a0),d1
0001B0AC D280                       		add.l	d0,d1
0001B0AE 4841                       		swap	d1
0001B0B0 3141 000C                  		move.w	d1,$C(a0)
0001B0B4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B0BA 6600                       		bne.s	loc_1A524
0001B0BC 4A68 0030                  		tst.w	$30(a0)
0001B0C0 6A00                       		bpl.s	loc_1A524
0001B0C2 70F6                       		moveq	#-$A,d0
0001B0C4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B0CA 6F00                       		ble.s	loc_1A514
0001B0CC 700E                       		moveq	#$E,d0
0001B0CE                            
0001B0CE                            loc_1A514:
0001B0CE D240                       		add.w	d0,d1
0001B0D0 2268 0034                  		movea.l	$34(a0),a1
0001B0D4 3341 000C                  		move.w	d1,$C(a1)
0001B0D8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0DE                            
0001B0DE                            loc_1A524:
0001B0DE 323C 002B                  		move.w	#$2B,d1
0001B0E2 343C 0060                  		move.w	#$60,d2
0001B0E6 363C 0061                  		move.w	#$61,d3
0001B0EA 3828 0008                  		move.w	8(a0),d4
0001B0EE 4EB9 0001 0422             		jsr	SolidObject
0001B0F4 7000                       		moveq	#0,d0
0001B0F6 3228 003C                  		move.w	$3C(a0),d1
0001B0FA 6A00                       		bpl.s	loc_1A550
0001B0FC 4441                       		neg.w	d1
0001B0FE 5141                       		subq.w	#8,d1
0001B100 6500                       		bcs.s	loc_1A55C
0001B102 5200                       		addq.b	#1,d0
0001B104 E841                       		asr.w	#4,d1
0001B106 D041                       		add.w	d1,d0
0001B108 6000                       		bra.s	loc_1A55C
0001B10A                            ; ===========================================================================
0001B10A                            
0001B10A                            loc_1A550:
0001B10A 0441 0027                  		subi.w	#$27,d1
0001B10E 6500                       		bcs.s	loc_1A55C
0001B110 5200                       		addq.b	#1,d0
0001B112 E841                       		asr.w	#4,d1
0001B114 D041                       		add.w	d1,d0
0001B116                            
0001B116                            loc_1A55C:
0001B116 1140 001A                  		move.b	d0,$1A(a0)
0001B11A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B11E 9068 0008                  		sub.w	8(a0),d0
0001B122 6B00                       		bmi.s	loc_1A578
0001B124 0440 0140                  		subi.w	#$140,d0
0001B128 6B00                       		bmi.s	loc_1A578
0001B12A 4A28 0001                  		tst.b	1(a0)
0001B12E 6A00 FED2                  		bpl.w	Obj84_Delete
0001B132                            
0001B132                            loc_1A578:
0001B132 4EF9 0000 E052             		jmp	DisplaySprite
0001B138                            ; ===========================================================================
0001B138                            
0001B138                            loc_1A57E:				; XREF: Obj84_Index
0001B138 7000                       		moveq	#0,d0
0001B13A 1028 0028                  		move.b	$28(a0),d0
0001B13E 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B142 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B146 6000 FF5C                  		bra.w	loc_1A4EA
0001B14A                            ; ===========================================================================
0001B14A 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B14C 0000                       		dc.w loc_1A598-off_1A590
0001B14E 0000                       		dc.w loc_1A604-off_1A590
0001B150 0000                       		dc.w loc_1A604-off_1A590
0001B152                            ; ===========================================================================
0001B152                            
0001B152                            loc_1A598:				; XREF: off_1A590
0001B152 4A28 0029                  		tst.b	$29(a0)
0001B156 6600                       		bne.s	loc_1A5D4
0001B158 2268 0034                  		movea.l	$34(a0),a1
0001B15C 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B162 6600                       		bne.s	loc_1A5B4
0001B164 6100 D2F4                  		bsr.w	BossDefeated
0001B168 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B170                            
0001B170                            loc_1A5B4:
0001B170 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B178 6400                       		bcc.s	locret_1A602
0001B17A 42A8 003C                  		clr.l	$3C(a0)
0001B17E 2268 0034                  		movea.l	$34(a0),a1
0001B182 5369 0032                  		subq.w	#1,$32(a1)
0001B186 4269 0030                  		clr.w	$30(a1)
0001B18A 5528 0024                  		subq.b	#2,$24(a0)
0001B18E 4E75                       		rts	
0001B190                            ; ===========================================================================
0001B190                            
0001B190                            loc_1A5D4:
0001B190 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B196 6C00                       		bge.s	loc_1A5E4
0001B198 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B1A0                            
0001B1A0                            loc_1A5E4:
0001B1A0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B1A8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B1AE 6E00                       		bgt.s	locret_1A602
0001B1B0 4268 003E                  		clr.w	$3E(a0)
0001B1B4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B1BA 4228 0029                  		clr.b	$29(a0)
0001B1BE                            
0001B1BE                            locret_1A602:
0001B1BE 4E75                       		rts	
0001B1C0                            ; ===========================================================================
0001B1C0                            
0001B1C0                            loc_1A604:				; XREF: off_1A590
0001B1C0 08E8 0001 0001             		bset	#1,1(a0)
0001B1C6 4A28 0029                  		tst.b	$29(a0)
0001B1CA 6600                       		bne.s	loc_1A646
0001B1CC 2268 0034                  		movea.l	$34(a0),a1
0001B1D0 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B1D6 6600                       		bne.s	loc_1A626
0001B1D8 6100 D280                  		bsr.w	BossDefeated
0001B1DC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B1E4                            
0001B1E4                            loc_1A626:
0001B1E4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B1EC 6400                       		bcc.s	locret_1A674
0001B1EE 42A8 003C                  		clr.l	$3C(a0)
0001B1F2 2268 0034                  		movea.l	$34(a0),a1
0001B1F6 5369 0032                  		subq.w	#1,$32(a1)
0001B1FA 4269 0030                  		clr.w	$30(a1)
0001B1FE 5528 0024                  		subq.b	#2,$24(a0)
0001B202 4E75                       		rts	
0001B204                            ; ===========================================================================
0001B204                            
0001B204                            loc_1A646:
0001B204 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B20A 6D00                       		blt.s	loc_1A656
0001B20C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B214                            
0001B214                            loc_1A656:
0001B214 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B21C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B222 6D00                       		blt.s	locret_1A674
0001B224 4268 003E                  		clr.w	$3E(a0)
0001B228 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B22E 4228 0029                  		clr.b	$29(a0)
0001B232                            
0001B232                            locret_1A674:
0001B232 4E75                       		rts	
0001B234                            ; ===========================================================================
0001B234                            ; ---------------------------------------------------------------------------
0001B234                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B234                            ; ---------------------------------------------------------------------------
0001B234                            Map_obj84:
0001B234                            	include "_maps\obj84.asm"
0001B234                            ; ---------------------------------------------------------------------------
0001B234                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B234                            ; ---------------------------------------------------------------------------
0001B234 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B238 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B23C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B240 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B244 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B248 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B24C 06                         byte_1A68E:	dc.b 6
0001B24D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B252 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B257 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B25C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B261 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B266 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B26B 08                         byte_1A6AD:	dc.b 8
0001B26C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B271 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B276 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B27B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B280 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B285 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B28A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B28F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B294 0A                         byte_1A6D6:	dc.b $A
0001B295 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B29A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B29F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2AE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2B3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2B8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2BD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2C2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2C7 0C                         byte_1A709:	dc.b $C
0001B2C8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B2CD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B2D2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2D7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2DC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2E1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2E6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2EB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2F0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2F5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2FA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2FF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B304 0D                         byte_1A746:	dc.b $D
0001B305 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B30A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B30F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B314 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B319 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B31E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B323 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B328 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B32D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B332 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B337 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B33C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B341 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B346 0E                         byte_1A788:	dc.b $E
0001B347 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B34C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B351 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B356 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B35B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B360 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B365 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B36A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B36F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B374 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B379 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B37E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B383 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B388 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B38D 02                         byte_1A7CF:	dc.b 2
0001B38E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B393 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B398                            		even
0001B398                            		even
0001B398                            
0001B398                            ; ===========================================================================
0001B398                            ; ---------------------------------------------------------------------------
0001B398                            ; Object 86 - energy balls (FZ)
0001B398                            ; ---------------------------------------------------------------------------
0001B398                            
0001B398                            Obj86:					; XREF: Obj_Index
0001B398 7000                       		moveq	#0,d0
0001B39A 1028 0024                  		move.b	$24(a0),d0
0001B39E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B3A2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B3A6                            ; ===========================================================================
0001B3A6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B3A8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B3AA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B3AC 0000                       		dc.w loc_1A962-Obj86_Index
0001B3AE 0000                       		dc.w loc_1A982-Obj86_Index
0001B3B0                            ; ===========================================================================
0001B3B0                            
0001B3B0                            Obj86_Main:				; XREF: Obj86_Index
0001B3B0 317C 2588 0008             		move.w	#$2588,8(a0)
0001B3B6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B3BC 317C 0300 0002             		move.w	#$300,2(a0)
0001B3C2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B3CA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B3D0 117C 0003 0018             		move.b	#3,$18(a0)
0001B3D6 117C 0008 0017             		move.b	#8,$17(a0)
0001B3DC 117C 0008 0016             		move.b	#8,$16(a0)
0001B3E2 117C 0004 0001             		move.b	#4,1(a0)
0001B3E8 08E8 0007 0001             		bset	#7,1(a0)
0001B3EE 5428 0024                  		addq.b	#2,$24(a0)
0001B3F2                            
0001B3F2                            Obj86_Generator:			; XREF: Obj86_Index
0001B3F2 2268 0034                  		movea.l	$34(a0),a1
0001B3F6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B3FC 6600                       		bne.s	loc_1A850
0001B3FE 10BC 003F                  		move.b	#$3F,(a0)
0001B402 117C 0000 0024             		move.b	#0,$24(a0)
0001B408 4EF9 0000 E052             		jmp	DisplaySprite
0001B40E                            ; ===========================================================================
0001B40E                            
0001B40E                            loc_1A850:
0001B40E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B414 4A28 0029                  		tst.b	$29(a0)
0001B418 6700                       		beq.s	loc_1A86C
0001B41A 5428 0024                  		addq.b	#2,$24(a0)
0001B41E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B424 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B42A                            
0001B42A                            loc_1A86C:
0001B42A 323C 0013                  		move.w	#$13,d1
0001B42E 343C 0008                  		move.w	#8,d2
0001B432 363C 0011                  		move.w	#$11,d3
0001B436 3828 0008                  		move.w	8(a0),d4
0001B43A 4EB9 0001 0422             		jsr	SolidObject
0001B440 3038 D008                  		move.w	($FFFFD008).w,d0
0001B444 9068 0008                  		sub.w	8(a0),d0
0001B448 6B00                       		bmi.s	loc_1A89A
0001B44A 0440 0140                  		subi.w	#$140,d0
0001B44E 6B00                       		bmi.s	loc_1A89A
0001B450 4A28 0001                  		tst.b	1(a0)
0001B454 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B458                            
0001B458                            loc_1A89A:
0001B458 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B45C 4EB9 0000 B0A0             		jsr	AnimateSprite
0001B462 4EF9 0000 E052             		jmp	DisplaySprite
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B468 4A28 0029                  		tst.b	$29(a0)
0001B46C 6700 0000                  		beq.w	loc_1A954
0001B470 4228 0029                  		clr.b	$29(a0)
0001B474 D068 0030                  		add.w	$30(a0),d0
0001B478 0240 001E                  		andi.w	#$1E,d0
0001B47C D4C0                       		adda.w	d0,a2
0001B47E 5868 0030                  		addq.w	#4,$30(a0)
0001B482 4268 0032                  		clr.w	$32(a0)
0001B486 7403                       		moveq	#3,d2
0001B488                            
0001B488                            Obj86_Loop:
0001B488 4EB9 0000 E4EE             		jsr	SingleObjLoad2
0001B48E 6600 0000                  		bne.w	loc_1A954
0001B492 12BC 0086                  		move.b	#$86,(a1)
0001B496 3368 0008 0008             		move.w	8(a0),8(a1)
0001B49C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B4A2 137C 0008 0024             		move.b	#8,$24(a1)
0001B4A8 337C 2300 0002             		move.w	#$2300,2(a1)
0001B4AE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B4B6 137C 000C 0016             		move.b	#$C,$16(a1)
0001B4BC 137C 000C 0017             		move.b	#$C,$17(a1)
0001B4C2 137C 0000 0020             		move.b	#0,$20(a1)
0001B4C8 137C 0003 0018             		move.b	#3,$18(a1)
0001B4CE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B4D4 137C 0004 0001             		move.b	#4,1(a1)
0001B4DA 08E9 0007 0001             		bset	#7,1(a1)
0001B4E0 2348 0034                  		move.l	a0,$34(a1)
0001B4E4 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001B4EA 3228 0032                  		move.w	$32(a0),d1
0001B4EE C3FC FFB1                  		muls.w	#-$4F,d1
0001B4F2 0641 2578                  		addi.w	#$2578,d1
0001B4F6 0240 001F                  		andi.w	#$1F,d0
0001B4FA 0440 0010                  		subi.w	#$10,d0
0001B4FE D041                       		add.w	d1,d0
0001B500 3340 0030                  		move.w	d0,$30(a1)
0001B504 5268 0032                  		addq.w	#1,$32(a0)
0001B508 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B50E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B512                            
0001B512                            loc_1A954:
0001B512 4A68 0032                  		tst.w	$32(a0)
0001B516 6600                       		bne.s	loc_1A95E
0001B518 5428 0024                  		addq.b	#2,$24(a0)
0001B51C                            
0001B51C                            loc_1A95E:
0001B51C 6000 FF0C                  		bra.w	loc_1A86C
0001B520                            ; ===========================================================================
0001B520                            
0001B520                            loc_1A962:				; XREF: Obj86_Index
0001B520 117C 0002 001C             		move.b	#2,$1C(a0)
0001B526 4A68 0038                  		tst.w	$38(a0)
0001B52A 6600                       		bne.s	loc_1A97E
0001B52C 117C 0002 0024             		move.b	#2,$24(a0)
0001B532 2268 0034                  		movea.l	$34(a0),a1
0001B536 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B53C                            
0001B53C                            loc_1A97E:
0001B53C 6000 FEEC                  		bra.w	loc_1A86C
0001B540                            ; ===========================================================================
0001B540                            
0001B540                            loc_1A982:				; XREF: Obj86_Index
0001B540 7000                       		moveq	#0,d0
0001B542 1028 0025                  		move.b	$25(a0),d0
0001B546 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B54A 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B54E                            ; ===========================================================================
0001B54E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B550 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B552 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B554 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B556 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B558 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B55A 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B55C 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B55E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B560 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            loc_1A9A6:				; XREF: Obj86_Index2
0001B562 3028 0030                  		move.w	$30(a0),d0
0001B566 9068 0008                  		sub.w	8(a0),d0
0001B56A E940                       		asl.w	#4,d0
0001B56C 3140 0010                  		move.w	d0,$10(a0)
0001B570 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B576 5428 0025                  		addq.b	#2,$25(a0)
0001B57A                            
0001B57A                            Obj86_Ball_Animate:
0001B57A 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B57E 4EB9 0000 B0A0             		jsr	AnimateSprite
0001B584 4EF9 0000 E052             		jmp	DisplaySprite
0001B58A                            ; ===========================================================================
0001B58A                            
0001B58A                            loc_1A9C0:				; XREF: Obj86_Index2
0001B58A 4A68 0010                  		tst.w	$10(a0)
0001B58E 6700                       		beq.s	loc_1A9E6
0001B590 4EB9 0000 E02C             		jsr	SpeedToPos
0001B596 3028 0008                  		move.w	8(a0),d0
0001B59A 9068 0030                  		sub.w	$30(a0),d0
0001B59E 6400                       		bcc.s	loc_1A9E6
0001B5A0 4268 0010                  		clr.w	$10(a0)
0001B5A4 D168 0008                  		add.w	d0,8(a0)
0001B5A8 2268 0034                  		movea.l	$34(a0),a1
0001B5AC 5369 0032                  		subq.w	#1,$32(a1)
0001B5B0                            
0001B5B0                            loc_1A9E6:
0001B5B0 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5B6 5368 0028                  		subq.w	#1,$28(a0)
0001B5BA 6600                       		bne.s	locret_1AA1C
0001B5BC 4EB8 2D14                  		jsr	RandomNumber
0001B5C0 0240 000E                  		and.w	#7*2,d0
0001B5C4 5840                       		addq.w	#2*2,d0
0001B5C6 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B5CA 4840                       		swap	d0
0001B5CC 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B5D0 117C 0001 001C             		move.b	#1,$1C(a0)
0001B5D6 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B5DC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B5E0 9068 0008                  		sub.w	8(a0),d0
0001B5E4 3140 0010                  		move.w	d0,$10(a0)
0001B5E8 317C 0140 0012             		move.w	#$140,$12(a0)
0001B5EE                            
0001B5EE                            locret_1AA1C:
0001B5EE 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B5F2                            ; ===========================================================================
0001B5F2                            
0001B5F2                            Obj86_Ball_Explode:
0001B5F2 5328 0028                  		subq.b	#1,$28(a0)
0001B5F6 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B5FA 2268 0034                  		movea.l	$34(a0),a1
0001B5FE 5369 0038                  		subq.w	#1,$38(a1)
0001B602 2248                       		move.l	a0,a1
0001B604 7400                       		moveq	#0,d2	; GMZ
0001B606 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B608 6000                       		bra.s	@start
0001B60A                            @loop:
0001B60A 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001B610 6600                       		bne.s	@exit
0001B612 3368 0008 0008             		move.w	8(a0),8(a1)
0001B618 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B61E                            @start:
0001B61E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B622 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B628 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B62C 5802                       		addq.b	#4,d2
0001B62E 51C9 FFDA                  		dbf	d1,@loop
0001B632                            @exit:
0001B632 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            Obj86_Ball_Sine:
0001B636 1028 0028                  		move.b	$28(a0),d0
0001B63A 5828 0028                  		addq.b	#4,$28(a0)
0001B63E 4EB8 2D3A                  		jsr	CalcSine
0001B642 C1FC 0002                  		muls.w	#2,d0
0001B646 3140 0010                  		move.w	d0,$10(a0)
0001B64A                            
0001B64A 1028 0029                  		move.b	$29(a0),d0
0001B64E 5828 0029                  		addq.b	#4,$29(a0)
0001B652 4EB8 2D3A                  		jsr	CalcSine
0001B656 4A40                       		tst.w	d0
0001B658 6B00                       		bmi.s	@upwards
0001B65A E548                       		lsl.w	#2,d0		; x4 go down faster
0001B65C                            @upwards:
0001B65C 3140 0012                  		move.w	d0,$12(a0)
0001B660 6000 0000                  		bra.w	loc_1AA1E
0001B664                            ; ===========================================================================
0001B664                            
0001B664                            Obj86_Ball_Homing:
0001B664 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B66A 6400                       		bhs.s	@homer
0001B66C 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B672 6400                       		bhs.s	Obj86_Ball_Vanish
0001B674 5328 0028                  		subq.b	#1,$28(a0)
0001B678 6400                       		bcc.s	@nomorehoming
0001B67A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B67E 9068 0008                  		sub.w	8(a0),d0
0001B682 D168 0010                  		add.w	d0,$10(a0)
0001B686 D168 0010                  		add.w	d0,$10(a0)
0001B68A                            @nomorehoming:
0001B68A 6000 0000                  		bra.w	loc_1AA1E
0001B68E                            @homer:
0001B68E 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B694 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B696                            ; ===========================================================================
0001B696                            
0001B696                            Obj86_Ball_Speed:
0001B696 4268 0010                  		clr.w	$10(a0)
0001B69A 7000                       		moveq	#0,d0
0001B69C 1028 0028                  		move.b	$28(a0),d0
0001B6A0 E448                       		lsr.w	#2,d0
0001B6A2 D168 0012                  		add.w	d0,$12(a0)
0001B6A6 1028 0029                  		move.b	$29(a0),d0
0001B6AA D128 0028                  		add.b	d0,$28(a0)
0001B6AE 6000 0000                  		bra.w	loc_1AA1E
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            Obj86_Ball_Vanish:
0001B6B2 303C 00E1                  		move.w	#$E1,d0
0001B6B6 4EB9 0000 15A0             		jsr	(PlaySound_Special).l
0001B6BC 6000 0000                  		bra.w	loc_1AA34
0001B6C0                            ; ===========================================================================
0001B6C0                            
0001B6C0                            Obj86_Ball_Static:
0001B6C0 4268 0010                  		clr.w	$10(a0)
0001B6C4 7000                       		moveq	#0,d0
0001B6C6 7200                       		moveq	#0,d1
0001B6C8 1028 0028                  		move.b	$28(a0),d0
0001B6CC 1228 0029                  		move.b	$29(a0),d1
0001B6D0 D041                       		add.w	d1,d0
0001B6D2 3140 0012                  		move.w	d0,$12(a0)
0001B6D6 6000 0000                  		bra.w	loc_1AA1E
0001B6DA                            ; ===========================================================================
0001B6DA                            
0001B6DA                            Obj86_Ball_Standard:
0001B6DA                            loc_1AA1E:
0001B6DA 4EB9 0000 E02C             		jsr	SpeedToPos
0001B6E0 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B6E6 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B6EA                            loc_1AA34:
0001B6EA 2268 0034                  		movea.l	$34(a0),a1
0001B6EE 5369 0038                  		subq.w	#1,$38(a1)
0001B6F2 6000 F90E                  		bra.w	Obj84_Delete
0001B6F6                            ; ===========================================================================
0001B6F6                            Ani_obj86:
0001B6F6                            	include "_anim\obj86.asm"
0001B6F6                            ; ---------------------------------------------------------------------------
0001B6F6                            ; Animation script - energy ball launcher (FZ)
0001B6F6                            ; ---------------------------------------------------------------------------
0001B6F6 0000                       		dc.w byte_1AA46-Ani_obj86
0001B6F8 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B6FA 0000                       		dc.w byte_1AA50-Ani_obj86
0001B6FC 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B700 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B706 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B70C                            		even
0001B70C                            		even
0001B70C                            
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            Map_obj86:
0001B70C                            	include "_maps\obj86.asm"
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B710 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B714 01                         byte_1AA5E:	dc.b 1
0001B715 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B71A 01                         byte_1AA64:	dc.b 1
0001B71B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B720 01                         byte_1AA6A:	dc.b 1
0001B721 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B726 01                         byte_1AA70:	dc.b 1
0001B727 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B72C                            		even
0001B72C                            		even
0001B72C                            
0001B72C                            Ani_obj86a:
0001B72C                            	include "_anim\obj86a.asm"
0001B72C                            ; ---------------------------------------------------------------------------
0001B72C                            ; Animation script - energy balls (FZ)
0001B72C                            ; ---------------------------------------------------------------------------
0001B72C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B72E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B730 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B73F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B74E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B752 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B75C                            		even
0001B75C                            		even
0001B75C                            
0001B75C                            ; ---------------------------------------------------------------------------
0001B75C                            ; Sprite mappings - energy balls (FZ)
0001B75C                            ; ---------------------------------------------------------------------------
0001B75C                            Map_obj86a:
0001B75C                            	include "_maps\obj86a.asm"
0001B75C                            ; ---------------------------------------------------------------------------
0001B75C                            ; Sprite mappings - energy balls (FZ)
0001B75C                            ; ---------------------------------------------------------------------------
0001B75C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B760 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B764 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B768 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B76C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B770 0000                       		dc.w byte_1AB20-Map_obj86a
0001B772 02                         byte_1AABC:	dc.b 2
0001B773 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B778 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B77D 02                         byte_1AAC7:	dc.b 2
0001B77E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B783 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B788 02                         byte_1AAD2:	dc.b 2
0001B789 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B78E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B793 02                         byte_1AADD:	dc.b 2
0001B794 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B799 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B79E 02                         byte_1AAE8:	dc.b 2
0001B79F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B7A4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B7A9 02                         byte_1AAF3:	dc.b 2
0001B7AA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B7AF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B7B4 01                         byte_1AAFE:	dc.b 1
0001B7B5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B7BA 01                         byte_1AB04:	dc.b 1
0001B7BB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B7C0 02                         byte_1AB0A:	dc.b 2
0001B7C1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B7C6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B7CB 02                         byte_1AB15:	dc.b 2
0001B7CC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B7D1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B7D6 00                         byte_1AB20:	dc.b 0
0001B7D8 00                         		even
0001B7D8 00                         		even
0001B7D8                            
0001B7D8                            ; ===========================================================================
0001B7D8                            ; ---------------------------------------------------------------------------
0001B7D8                            ; Object 3E - prison capsule
0001B7D8                            ; ---------------------------------------------------------------------------
0001B7D8                            
0001B7D8                            Obj3E:					; XREF: Obj_Index
0001B7D8 7000                       		moveq	#0,d0
0001B7DA 1028 0024                  		move.b	$24(a0),d0
0001B7DE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B7E2 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B7E6 3028 0008                  		move.w	8(a0),d0
0001B7EA 0240 FF80                  		andi.w	#$FF80,d0
0001B7EE 3238 F700                  		move.w	($FFFFF700).w,d1
0001B7F2 0441 0080                  		subi.w	#$80,d1
0001B7F6 0241 FF80                  		andi.w	#$FF80,d1
0001B7FA 9041                       		sub.w	d1,d0
0001B7FC 0C40 0280                  		cmpi.w	#$280,d0
0001B800 6200                       		bhi.s	Obj3E_Delete
0001B802 4EF9 0000 E052             		jmp	DisplaySprite
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            Obj3E_Delete:
0001B808 4EF9 0000 E08E             		jmp	DeleteObject
0001B80E                            ; ===========================================================================
0001B80E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B810 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B812 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B814 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B816 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B818 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B81A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B81C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B81E                            
0001B81E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B822 040C 0501                  		dc.b 4,	$C, 5, 1
0001B826 0610 0403                  		dc.b 6,	$10, 4,	3
0001B82A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B82E                            ; ===========================================================================
0001B82E                            
0001B82E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B82E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B836 317C 049D 0002             		move.w	#$49D,2(a0)
0001B83C 117C 0004 0001             		move.b	#4,1(a0)
0001B842 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B848 7000                       		moveq	#0,d0
0001B84A 1028 0028                  		move.b	$28(a0),d0
0001B84E E548                       		lsl.w	#2,d0
0001B850 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B854 1159 0024                  		move.b	(a1)+,$24(a0)
0001B858 1159 0019                  		move.b	(a1)+,$19(a0)
0001B85C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B860 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B864 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B868 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B86A 117C 0006 0020             		move.b	#6,$20(a0)
0001B870 117C 0008 0021             		move.b	#8,$21(a0)
0001B876                            
0001B876                            Obj3E_Not02:
0001B876 4E75                       		rts	
0001B878                            ; ===========================================================================
0001B878                            
0001B878                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B878 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B87E 6700                       		beq.s	Obj3E_ChkOpened
0001B880 323C 002B                  		move.w	#$2B,d1
0001B884 343C 0018                  		move.w	#$18,d2
0001B888 363C 0018                  		move.w	#$18,d3
0001B88C 3828 0008                  		move.w	8(a0),d4
0001B890 4EF9 0001 0422             		jmp	SolidObject
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            Obj3E_ChkOpened:
0001B896 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B89A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B89C 4228 0025                  		clr.b	$25(a0)
0001B8A0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B8A6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B8AC                            
0001B8AC                            Obj3E_DoOpen:
0001B8AC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B8B2 4E75                       		rts	
0001B8B4                            ; ===========================================================================
0001B8B4                            
0001B8B4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B8B4 323C 0017                  		move.w	#$17,d1
0001B8B8 343C 0008                  		move.w	#8,d2
0001B8BC 363C 0008                  		move.w	#8,d3
0001B8C0 3828 0008                  		move.w	8(a0),d4
0001B8C4 4EB9 0001 0422             		jsr	SolidObject
0001B8CA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B8D0 4EB9 0000 B0A0             		jsr	AnimateSprite
0001B8D6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B8DC 4A28 0025                  		tst.b	$25(a0)
0001B8E0 6700                       		beq.s	locret_1AC60
0001B8E2 5068 000C                  		addq.w	#8,$C(a0)
0001B8E6 117C 000A 0024             		move.b	#$A,$24(a0)
0001B8EC 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B8F2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B8F6 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B8FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B900 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B906 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B908 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B90E 6000                       		bra.s	Obj3E_ContinueCode
0001B910                            
0001B910                            Obj3E_MoveLeft:
0001B910 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B916                            
0001B916                            Obj3E_ContinueCode:
0001B916 4228 0025                  		clr.b	$25(a0)
0001B91A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B920 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B926                            
0001B926                            locret_1AC60:
0001B926 4E75                       		rts	
0001B928                            ; ===========================================================================
0001B928                            
0001B928                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B928 7007                       		moveq	#7,d0
0001B92A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B92E 6600                       		bne.s	loc_1ACA0
0001B930 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001B936 6600                       		bne.s	loc_1ACA0
0001B938 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B93C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B942 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B948 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001B94E 7200                       		moveq	#0,d1
0001B950 1200                       		move.b	d0,d1
0001B952 E409                       		lsr.b	#2,d1
0001B954 0441 0020                  		subi.w	#$20,d1
0001B958 D369 0008                  		add.w	d1,8(a1)
0001B95C E048                       		lsr.w	#8,d0
0001B95E E608                       		lsr.b	#3,d0
0001B960 D169 000C                  		add.w	d0,$C(a1)
0001B964                            
0001B964                            loc_1ACA0:
0001B964 5368 001E                  		subq.w	#1,$1E(a0)
0001B968 6700                       		beq.s	Obj3E_MakeAnimal
0001B96A 4E75                       		rts	
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            Obj3E_MakeAnimal:
0001B96C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B972 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B978 117C 0006 001A             		move.b	#6,$1A(a0)
0001B97E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B984 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B98A 7C07                       		moveq	#7,d6
0001B98C 3A3C 009A                  		move.w	#$9A,d5
0001B990 78E4                       		moveq	#-$1C,d4
0001B992                            
0001B992                            Obj3E_Loop:
0001B992 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001B998 6600                       		bne.s	locret_1ACF8
0001B99A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B99E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B9A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B9AA D969 0008                  		add.w	d4,8(a1)
0001B9AE 5E44                       		addq.w	#7,d4
0001B9B0 3345 0036                  		move.w	d5,$36(a1)
0001B9B4 5145                       		subq.w	#8,d5
0001B9B6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B9BA                            
0001B9BA                            locret_1ACF8:
0001B9BA 4E75                       		rts	
0001B9BC                            ; ===========================================================================
0001B9BC                            
0001B9BC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B9BC 7007                       		moveq	#7,d0
0001B9BE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B9C2 6600                       		bne.s	loc_1AD38
0001B9C4 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001B9CA 6600                       		bne.s	loc_1AD38
0001B9CC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B9D0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B9D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B9DC 4EB9 0000 2D14             		jsr	(RandomNumber).l
0001B9E2 0240 001F                  		andi.w	#$1F,d0
0001B9E6 5D40                       		subq.w	#6,d0
0001B9E8 4A41                       		tst.w	d1
0001B9EA 6A00                       		bpl.s	loc_1AD2E
0001B9EC 4440                       		neg.w	d0
0001B9EE                            
0001B9EE                            loc_1AD2E:
0001B9EE D169 0008                  		add.w	d0,8(a1)
0001B9F2 337C 000C 0036             		move.w	#$C,$36(a1)
0001B9F8                            
0001B9F8                            loc_1AD38:
0001B9F8 5368 001E                  		subq.w	#1,$1E(a0)
0001B9FC 6600                       		bne.s	locret_1AD48
0001B9FE 5428 0024                  		addq.b	#2,$24(a0)
0001BA02 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BA08                            
0001BA08                            locret_1AD48:
0001BA08 4E75                       		rts	
0001BA0A                            ; ===========================================================================
0001BA0A                            
0001BA0A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BA0A 703E                       		moveq	#$3E,d0
0001BA0C 7228                       		moveq	#$28,d1
0001BA0E 7440                       		moveq	#$40,d2
0001BA10 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BA14                            
0001BA14                            Obj3E_FindObj28:
0001BA14 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BA16 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BA18 D2C2                       		adda.w	d2,a1		; next object RAM
0001BA1A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BA1E                            
0001BA1E 4EB9 0000 F6DE             		jsr	GotThroughAct
0001BA24 4EF9 0000 E08E             		jmp	DeleteObject
0001BA2A                            ; ===========================================================================
0001BA2A                            
0001BA2A                            Obj3E_Obj28Found:
0001BA2A 4E75                       		rts	
0001BA2C                            ; ===========================================================================
0001BA2C                            Ani_obj3E:
0001BA2C                            	include "_anim\obj3E.asm"
0001BA2C                            ; ---------------------------------------------------------------------------
0001BA2C                            ; Animation script - prison capsule
0001BA2C                            ; ---------------------------------------------------------------------------
0001BA2C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BA2E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BA30 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BA34                            		even
0001BA34                            		even
0001BA34                            
0001BA34                            ; ---------------------------------------------------------------------------
0001BA34                            ; Sprite mappings - prison capsule
0001BA34                            ; ---------------------------------------------------------------------------
0001BA34                            Map_obj3E:
0001BA34                            	include "_maps\obj3E.asm"
0001BA34                            ; ---------------------------------------------------------------------------
0001BA34                            ; Sprite mappings - prison capsule
0001BA34                            ; ---------------------------------------------------------------------------
0001BA34 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BA38 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BA3C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BA40 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BA42 07                         byte_1AD82:	dc.b 7
0001BA43 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BA48 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BA4D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BA52 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BA57 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BA5C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BA61 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BA66 01                         byte_1ADA6:	dc.b 1
0001BA67 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BA6C 06                         byte_1ADAC:	dc.b 6
0001BA6D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BA72 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BA77 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BA7C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BA81 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BA86 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BA8B 01                         byte_1ADCB:	dc.b 1
0001BA8C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BA91 02                         byte_1ADD1:	dc.b 2
0001BA92 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BA97 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BA9C 01                         byte_1ADDC:	dc.b 1
0001BA9D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BAA2 00                         byte_1ADE2:	dc.b 0
0001BAA4 00                         		even
0001BAA4 00                         		even
0001BAA4                            
0001BAA4                            ; ---------------------------------------------------------------------------
0001BAA4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BAA4                            ; ---------------------------------------------------------------------------
0001BAA4                            
0001BAA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAA4                            
0001BAA4                            
0001BAA4                            TouchResponse:				; XREF: Obj01
0001BAA4 4E71                       		nop	
0001BAA6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BAAA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BAAE 5142                       		subq.w	#8,d2
0001BAB0 7A00                       		moveq	#0,d5
0001BAB2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BAB6 5705                       		subq.b	#3,d5
0001BAB8 9645                       		sub.w	d5,d3
0001BABA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BAC0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BAC2 0643 000C                  		addi.w	#$C,d3
0001BAC6 7A0A                       		moveq	#$A,d5
0001BAC8                            
0001BAC8                            Touch_NoDuck:
0001BAC8 383C 0010                  		move.w	#$10,d4
0001BACC DA45                       		add.w	d5,d5
0001BACE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BAD2 3C3C 005F                  		move.w	#$5F,d6
0001BAD6                            
0001BAD6                            Touch_Loop:
0001BAD6 4A29 0001                  		tst.b	1(a1)
0001BADA 6A00                       		bpl.s	Touch_NextObj
0001BADC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BAE0 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BAE2                            
0001BAE2                            Touch_NextObj:
0001BAE2 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BAE6 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BAEA                            
0001BAEA 7000                       		moveq	#0,d0
0001BAEC 4E75                       		rts	
0001BAEE                            ; ===========================================================================
0001BAEE 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BAF0 0C14                       		dc.b   $C, $14
0001BAF2 140C                       		dc.b  $14,  $C
0001BAF4 0410                       		dc.b	4, $10
0001BAF6 0C12                       		dc.b   $C, $12
0001BAF8 1010                       		dc.b  $10, $10
0001BAFA 0606                       		dc.b	6,   6
0001BAFC 180C                       		dc.b  $18,  $C
0001BAFE 0C10                       		dc.b   $C, $10
0001BB00 100C                       		dc.b  $10,  $C
0001BB02 0808                       		dc.b	8,   8
0001BB04 1410                       		dc.b  $14, $10
0001BB06 1408                       		dc.b  $14,   8
0001BB08 0E0E                       		dc.b   $E,  $E
0001BB0A 1818                       		dc.b  $18, $18
0001BB0C 2810                       		dc.b  $28, $10
0001BB0E 1018                       		dc.b  $10, $18
0001BB10 0810                       		dc.b	8, $10
0001BB12 2070                       		dc.b  $20, $70
0001BB14 4020                       		dc.b  $40, $20
0001BB16 8020                       		dc.b  $80, $20
0001BB18 2020                       		dc.b  $20, $20
0001BB1A 0808                       		dc.b	8,   8
0001BB1C 0404                       		dc.b	4,   4
0001BB1E 2008                       		dc.b  $20,   8
0001BB20 0C0C                       		dc.b   $C,  $C
0001BB22 0804                       		dc.b	8,   4
0001BB24 1804                       		dc.b  $18,   4
0001BB26 2804                       		dc.b  $28,   4
0001BB28 0408                       		dc.b	4,   8
0001BB2A 0418                       		dc.b	4, $18
0001BB2C 0428                       		dc.b	4, $28
0001BB2E 0420                       		dc.b	4, $20
0001BB30 1818                       		dc.b  $18, $18
0001BB32 0C18                       		dc.b   $C, $18
0001BB34 4808                       		dc.b  $48,   8
0001BB36                            ; ===========================================================================
0001BB36                            
0001BB36                            Touch_Height:				; XREF: TouchResponse
0001BB36 0240 003F                  		andi.w	#$3F,d0
0001BB3A D040                       		add.w	d0,d0
0001BB3C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BB40 7200                       		moveq	#0,d1
0001BB42 121A                       		move.b	(a2)+,d1
0001BB44 3029 0008                  		move.w	8(a1),d0
0001BB48 9041                       		sub.w	d1,d0
0001BB4A 9042                       		sub.w	d2,d0
0001BB4C 6400                       		bcc.s	loc_1AE98
0001BB4E D241                       		add.w	d1,d1
0001BB50 D041                       		add.w	d1,d0
0001BB52 6500                       		bcs.s	Touch_Width
0001BB54 6000 FF8C                  		bra.w	Touch_NextObj
0001BB58                            ; ===========================================================================
0001BB58                            
0001BB58                            loc_1AE98:
0001BB58 B044                       		cmp.w	d4,d0
0001BB5A 6200 FF86                  		bhi.w	Touch_NextObj
0001BB5E                            
0001BB5E                            Touch_Width:
0001BB5E 7200                       		moveq	#0,d1
0001BB60 121A                       		move.b	(a2)+,d1
0001BB62 3029 000C                  		move.w	$C(a1),d0
0001BB66 9041                       		sub.w	d1,d0
0001BB68 9043                       		sub.w	d3,d0
0001BB6A 6400                       		bcc.s	loc_1AEB6
0001BB6C D241                       		add.w	d1,d1
0001BB6E D240                       		add.w	d0,d1
0001BB70 6500                       		bcs.s	Touch_ChkValue
0001BB72 6000 FF6E                  		bra.w	Touch_NextObj
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            loc_1AEB6:
0001BB76 B045                       		cmp.w	d5,d0
0001BB78 6200 FF68                  		bhi.w	Touch_NextObj
0001BB7C                            
0001BB7C                            Touch_ChkValue:
0001BB7C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BB80 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BB84 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BB88 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BB8C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BB90 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BB92 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BB96                            
0001BB96                            ; touch	response is $40-$7F
0001BB96                            
0001BB96 1029 0020                  		move.b	$20(a1),d0
0001BB9A 0200 003F                  		andi.b	#$3F,d0
0001BB9E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BBA2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BBA4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BBAA 6400 0000                  		bcc.w	locret_1AEF2
0001BBAE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BBB2                            
0001BBB2                            locret_1AEF2:
0001BBB2 4E75                       		rts	
0001BBB4                            ; ===========================================================================
0001BBB4                            
0001BBB4                            Touch_Monitor:
0001BBB4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BBB8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BBBA 3028 000C                  		move.w	$C(a0),d0
0001BBBE 0440 0010                  		subi.w	#$10,d0
0001BBC2 B069 000C                  		cmp.w	$C(a1),d0
0001BBC6 6500                       		bcs.s	locret_1AF2E
0001BBC8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BBCC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BBD2 4A29 0025                  		tst.b	$25(a1)
0001BBD6 6600                       		bne.s	locret_1AF2E
0001BBD8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BBDC 4E75                       		rts	
0001BBDE                            ; ===========================================================================
0001BBDE                            
0001BBDE                            loc_1AF1E:
0001BBDE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BBE4 6600                       		bne.s	locret_1AF2E
0001BBE6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BBEA 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BBEE                            
0001BBEE                            locret_1AF2E:
0001BBEE 4E75                       		rts	
0001BBF0                            ; ===========================================================================
0001BBF0                            
0001BBF0                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BBF0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BBF4 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BBF6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BBFC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BC00                            
0001BC00                            loc_1AF40:
0001BC00 4A29 0021                  		tst.b	$21(a1)
0001BC04 6700                       		beq.s	Touch_KillEnemy
0001BC06 4468 0010                  		neg.w	$10(a0)
0001BC0A 4468 0012                  		neg.w	$12(a0)
0001BC0E E0E8 0010                  		asr	$10(a0)
0001BC12 E0E8 0012                  		asr	$12(a0)
0001BC16 137C 0000 0020             		move.b	#0,$20(a1)
0001BC1C 5329 0021                  		subq.b	#1,$21(a1)
0001BC20 6600                       		bne.s	locret_1AF68
0001BC22 08E9 0007 0022             		bset	#7,$22(a1)
0001BC28                            
0001BC28                            locret_1AF68:
0001BC28 4E75                       		rts	
0001BC2A                            ; ===========================================================================
0001BC2A                            
0001BC2A                            Touch_KillEnemy:
0001BC2A 08E9 0007 0022             		bset	#7,$22(a1)
0001BC30 7000                       		moveq	#0,d0
0001BC32 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BC36 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BC3A 0C40 0006                  		cmpi.w	#6,d0
0001BC3E 6500                       		bcs.s	loc_1AF82
0001BC40 7006                       		moveq	#6,d0
0001BC42                            
0001BC42                            loc_1AF82:
0001BC42 3340 003E                  		move.w	d0,$3E(a1)
0001BC46 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BC4A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BC50 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BC52 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BC56 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BC5C                            
0001BC5C                            loc_1AF9C:
0001BC5C 6100 0000                  		bsr.w	AddPoints
0001BC60 7400                       		moveq	#0,d2	; GMZ
0001BC62 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BC64 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BC66                            
0001BC66                            TouchKE_Explode:
0001BC66 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BC6A 137C 0000 0024             		move.b	#0,$24(a1)
0001BC70 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BC74                            
0001BC74                            TouchKE_NextExplosion:
0001BC74 5802                       		addq.b	#4,d2
0001BC76 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001BC7C 6600                       		bne.s	TouchKE_NoExplosion
0001BC7E 336A 0008 0008             		move.w	8(a2),8(a1)
0001BC84 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BC8A 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BC8E                            
0001BC8E                            TouchKE_NoExplosion:
0001BC8E 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BC90 4A68 0012                  		tst.w	$12(a0)
0001BC94 6B00                       		bmi.s	loc_1AFC2
0001BC96 3028 000C                  		move.w	$C(a0),d0
0001BC9A B069 000C                  		cmp.w	$C(a1),d0
0001BC9E 6400                       		bcc.s	loc_1AFCA
0001BCA0 4468 0012                  		neg.w	$12(a0)
0001BCA4 4E75                       		rts	
0001BCA6                            ; ===========================================================================
0001BCA6                            
0001BCA6                            loc_1AFC2:
0001BCA6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BCAC 4E75                       		rts	
0001BCAE                            ; ===========================================================================
0001BCAE                            
0001BCAE                            loc_1AFCA:
0001BCAE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BCB4 4E75                       		rts	
0001BCB6                            ; ===========================================================================
0001BCB6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BCBE 08E9 0007 0022             		bset	#7,$22(a1)
0001BCC4                            
0001BCC4                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BCC4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BCC8 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BCCA                            
0001BCCA                            loc_1AFE6:				; XREF: Touch_Hurt
0001BCCA 70FF                       		moveq	#-1,d0
0001BCCC 4E75                       		rts	
0001BCCE                            ; ===========================================================================
0001BCCE                            
0001BCCE                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BCCE 4E71                       		nop	
0001BCD0 4A68 0030                  		tst.w	$30(a0)
0001BCD4 66F4                       		bne.s	loc_1AFE6
0001BCD6 2449                       		movea.l	a1,a2
0001BCD8                            
0001BCD8                            ; End of function TouchResponse
0001BCD8                            ; continue straight to HurtSonic
0001BCD8                            
0001BCD8                            ; ---------------------------------------------------------------------------
0001BCD8                            ; Hurting Sonic	subroutine
0001BCD8                            ; ---------------------------------------------------------------------------
0001BCD8                            
0001BCD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCD8                            
0001BCD8                            
0001BCD8                            HurtSonic:
0001BCD8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BCDC 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BCDE 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BCE2 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BCE6 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001BCEC 6600                       		bne.s	Hurt_Shield
0001BCEE 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BCF2 3368 0008 0008             		move.w	8(a0),8(a1)
0001BCF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BCFE                            
0001BCFE                            Hurt_Shield:
0001BCFE 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BD04 117C 0004 0024             		move.b	#4,$24(a0)
0001BD0A 6100 858E                  		bsr.w	Sonic_ResetOnFloor
0001BD0E 08E8 0001 0022             		bset	#1,$22(a0)
0001BD14 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BD1A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BD20 0828 0006 0022             		btst	#6,$22(a0)
0001BD26 6700                       		beq.s	Hurt_Reverse
0001BD28 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BD2E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BD34                            
0001BD34                            Hurt_Reverse:
0001BD34 3028 0008                  		move.w	8(a0),d0
0001BD38 B06A 0008                  		cmp.w	8(a2),d0
0001BD3C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BD3E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BD42                            
0001BD42                            Hurt_ChkSpikes:
0001BD42 317C 0000 0014             		move.w	#0,$14(a0)
0001BD48 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BD4E 317C 0078 0030             		move.w	#$78,$30(a0)
0001BD54 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BD58 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BD5C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BD5E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BD62 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BD64 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BD68                            
0001BD68                            Hurt_Sound:
0001BD68 4EB9 0000 15A0             		jsr	(PlaySound_Special).l
0001BD6E 70FF                       		moveq	#-1,d0
0001BD70 4E75                       		rts	
0001BD72                            ; ===========================================================================
0001BD72                            
0001BD72                            Hurt_NoRings:
0001BD72 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BD76 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BD7A                            ; End of function HurtSonic
0001BD7A                            
0001BD7A                            ; ---------------------------------------------------------------------------
0001BD7A                            ; Subroutine to	kill Sonic
0001BD7A                            ; ---------------------------------------------------------------------------
0001BD7A                            
0001BD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD7A                            
0001BD7A                            
0001BD7A                            KillSonic:
0001BD7A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BD7E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BD80 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BD86 117C 0006 0024             		move.b	#6,$24(a0)
0001BD8C 6100 850C                  		bsr.w	Sonic_ResetOnFloor
0001BD90 08E8 0001 0022             		bset	#1,$22(a0)
0001BD96 317C F900 0012             		move.w	#-$700,$12(a0)
0001BD9C 317C 0000 0010             		move.w	#0,$10(a0)
0001BDA2 317C 0000 0014             		move.w	#0,$14(a0)
0001BDA8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BDAE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BDB4 08E8 0007 0002             		bset	#7,2(a0)
0001BDBA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BDBE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BDC2 6600                       		bne.s	Kill_Sound
0001BDC4 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BDC8                            
0001BDC8                            Kill_Sound:
0001BDC8 4EB9 0000 15A0             		jsr	(PlaySound_Special).l
0001BDCE                            
0001BDCE                            Kill_NoDeath:
0001BDCE 70FF                       		moveq	#-1,d0
0001BDD0 4E75                       		rts	
0001BDD2                            ; End of function KillSonic
0001BDD2                            
0001BDD2                            
0001BDD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDD2                            
0001BDD2                            
0001BDD2                            Touch_Special:				; XREF: Touch_ChkValue
0001BDD2 1229 0020                  		move.b	$20(a1),d1
0001BDD6 0201 003F                  		andi.b	#$3F,d1
0001BDDA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BDDE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BDE0 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BDE4 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BDE6 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BDEA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BDEC 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BDF0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BDF2 4E75                       		rts	
0001BDF4                            ; ===========================================================================
0001BDF4                            
0001BDF4                            Touch_CatKiller:			; XREF: Touch_Special
0001BDF4 6000 FEC8                  		bra.w	loc_1AFDA
0001BDF8                            ; ===========================================================================
0001BDF8                            
0001BDF8                            Touch_Yadrin:				; XREF: Touch_Special
0001BDF8 9A40                       		sub.w	d0,d5
0001BDFA 0C45 0008                  		cmpi.w	#8,d5
0001BDFE 6400                       		bcc.s	loc_1B144
0001BE00 3029 0008                  		move.w	8(a1),d0
0001BE04 5940                       		subq.w	#4,d0
0001BE06 0829 0000 0022             		btst	#0,$22(a1)
0001BE0C 6700                       		beq.s	loc_1B130
0001BE0E 0440 0010                  		subi.w	#$10,d0
0001BE12                            
0001BE12                            loc_1B130:
0001BE12 9042                       		sub.w	d2,d0
0001BE14 6400                       		bcc.s	loc_1B13C
0001BE16 0640 0018                  		addi.w	#$18,d0
0001BE1A 6500                       		bcs.s	loc_1B140
0001BE1C 6000                       		bra.s	loc_1B144
0001BE1E                            ; ===========================================================================
0001BE1E                            
0001BE1E                            loc_1B13C:
0001BE1E B044                       		cmp.w	d4,d0
0001BE20 6200                       		bhi.s	loc_1B144
0001BE22                            
0001BE22                            loc_1B140:
0001BE22 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            loc_1B144:
0001BE26 6000 FDC8                  		bra.w	Touch_Enemy
0001BE2A                            ; ===========================================================================
0001BE2A                            
0001BE2A                            Touch_D7orE1:				; XREF: Touch_Special
0001BE2A 5229 0021                  		addq.b	#1,$21(a1)
0001BE2E 4E75                       		rts	
0001BE30                            ; End of function Touch_Special
0001BE30                            
0001BE30                            ; ---------------------------------------------------------------------------
0001BE30                            ; Subroutine to	show the special stage layout
0001BE30                            ; ---------------------------------------------------------------------------
0001BE30                            
0001BE30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE30                            
0001BE30                            
0001BE30                            SS_ShowLayout:				; XREF: SpecialStage
0001BE30 6100 0000                  		bsr.w	SS_AniWallsRings
0001BE34 6100 0000                  		bsr.w	SS_AniItems
0001BE38 3F05                       		move.w	d5,-(sp)
0001BE3A 43F8 8000                  		lea	($FFFF8000).w,a1
0001BE3E 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE42 0200 00FC                  		andi.b	#$FC,d0
0001BE46 4EB9 0000 2D3A             		jsr	(CalcSine).l
0001BE4C 3800                       		move.w	d0,d4
0001BE4E 3A01                       		move.w	d1,d5
0001BE50 C9FC 0018                  		muls.w	#$18,d4
0001BE54 CBFC 0018                  		muls.w	#$18,d5
0001BE58 7400                       		moveq	#0,d2
0001BE5A 3438 F700                  		move.w	($FFFFF700).w,d2
0001BE5E 84FC 0018                  		divu.w	#$18,d2
0001BE62 4842                       		swap	d2
0001BE64 4442                       		neg.w	d2
0001BE66 0642 FF4C                  		addi.w	#-$B4,d2
0001BE6A 7600                       		moveq	#0,d3
0001BE6C 3638 F704                  		move.w	($FFFFF704).w,d3
0001BE70 86FC 0018                  		divu.w	#$18,d3
0001BE74 4843                       		swap	d3
0001BE76 4443                       		neg.w	d3
0001BE78 0643 FF4C                  		addi.w	#-$B4,d3
0001BE7C 3E3C 000F                  		move.w	#$F,d7
0001BE80                            
0001BE80                            loc_1B19E:
0001BE80 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BE84 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BE88 4440                       		neg.w	d0
0001BE8A C3C2                       		muls.w	d2,d1
0001BE8C C1C3                       		muls.w	d3,d0
0001BE8E 2C00                       		move.l	d0,d6
0001BE90 DC81                       		add.l	d1,d6
0001BE92 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BE96 C1C2                       		muls.w	d2,d0
0001BE98 C3C3                       		muls.w	d3,d1
0001BE9A D280                       		add.l	d0,d1
0001BE9C 2406                       		move.l	d6,d2
0001BE9E 3C3C 000F                  		move.w	#$F,d6
0001BEA2                            
0001BEA2                            loc_1B1C0:
0001BEA2 2002                       		move.l	d2,d0
0001BEA4 E080                       		asr.l	#8,d0
0001BEA6 32C0                       		move.w	d0,(a1)+
0001BEA8 2001                       		move.l	d1,d0
0001BEAA E080                       		asr.l	#8,d0
0001BEAC 32C0                       		move.w	d0,(a1)+
0001BEAE D485                       		add.l	d5,d2
0001BEB0 D284                       		add.l	d4,d1
0001BEB2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BEB6                            
0001BEB6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BEBA 0643 0018                  		addi.w	#$18,d3
0001BEBE 51CF FFC0                  		dbf	d7,loc_1B19E
0001BEC2                            
0001BEC2 3A1F                       		move.w	(sp)+,d5
0001BEC4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BECA 7000                       		moveq	#0,d0
0001BECC 3038 F704                  		move.w	($FFFFF704).w,d0
0001BED0 80FC 0018                  		divu.w	#$18,d0
0001BED4 C0FC 0080                  		mulu.w	#$80,d0
0001BED8 D1C0                       		adda.l	d0,a0
0001BEDA 7000                       		moveq	#0,d0
0001BEDC 3038 F700                  		move.w	($FFFFF700).w,d0
0001BEE0 80FC 0018                  		divu.w	#$18,d0
0001BEE4 D0C0                       		adda.w	d0,a0
0001BEE6 49F8 8000                  		lea	($FFFF8000).w,a4
0001BEEA 3E3C 000F                  		move.w	#$F,d7
0001BEEE                            
0001BEEE                            loc_1B20C:
0001BEEE 3C3C 000F                  		move.w	#$F,d6
0001BEF2                            
0001BEF2                            loc_1B210:
0001BEF2 7000                       		moveq	#0,d0
0001BEF4 1018                       		move.b	(a0)+,d0
0001BEF6 6700                       		beq.s	loc_1B268
0001BEF8 0C00 004E                  		cmpi.b	#$4E,d0
0001BEFC 6200                       		bhi.s	loc_1B268
0001BEFE 3614                       		move.w	(a4),d3
0001BF00 0643 0120                  		addi.w	#$120,d3
0001BF04 0C43 0070                  		cmpi.w	#$70,d3
0001BF08 6500                       		bcs.s	loc_1B268
0001BF0A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BF0E 6400                       		bcc.s	loc_1B268
0001BF10 342C 0002                  		move.w	2(a4),d2
0001BF14 0642 00F0                  		addi.w	#$F0,d2
0001BF18 0C42 0070                  		cmpi.w	#$70,d2
0001BF1C 6500                       		bcs.s	loc_1B268
0001BF1E 0C42 0170                  		cmpi.w	#$170,d2
0001BF22 6400                       		bcc.s	loc_1B268
0001BF24 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BF2A E748                       		lsl.w	#3,d0
0001BF2C 4BF5 0000                  		lea	(a5,d0.w),a5
0001BF30 225D                       		movea.l	(a5)+,a1
0001BF32 321D                       		move.w	(a5)+,d1
0001BF34 D241                       		add.w	d1,d1
0001BF36 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BF3A 365D                       		movea.w	(a5)+,a3
0001BF3C 7200                       		moveq	#0,d1
0001BF3E 1219                       		move.b	(a1)+,d1
0001BF40 5301                       		subq.b	#1,d1
0001BF42 6B00                       		bmi.s	loc_1B268
0001BF44 4EB9 0000 E1B0             		jsr	sub_D762
0001BF4A                            
0001BF4A                            loc_1B268:
0001BF4A 584C                       		addq.w	#4,a4
0001BF4C 51CE FFA4                  		dbf	d6,loc_1B210
0001BF50                            
0001BF50 41E8 0070                  		lea	$70(a0),a0
0001BF54 51CF FF98                  		dbf	d7,loc_1B20C
0001BF58                            
0001BF58 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BF5C 0C05 0050                  		cmpi.b	#$50,d5
0001BF60 6700                       		beq.s	loc_1B288
0001BF62 24BC 0000 0000             		move.l	#0,(a2)
0001BF68 4E75                       		rts	
0001BF6A                            ; ===========================================================================
0001BF6A                            
0001BF6A                            loc_1B288:
0001BF6A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BF70 4E75                       		rts	
0001BF72                            ; End of function SS_ShowLayout
0001BF72                            
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            ; Subroutine to	animate	walls and rings	in the special stage
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            
0001BF72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF72                            
0001BF72                            
0001BF72                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BF72 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BF78 7000                       		moveq	#0,d0
0001BF7A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF7E E408                       		lsr.b	#2,d0
0001BF80 0240 000F                  		andi.w	#$F,d0
0001BF84 7223                       		moveq	#$23,d1
0001BF86                            
0001BF86                            loc_1B2A4:
0001BF86 3280                       		move.w	d0,(a1)
0001BF88 5049                       		addq.w	#8,a1
0001BF8A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BF8E                            
0001BF8E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BF94 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BF98 6A00                       		bpl.s	loc_1B2C8
0001BF9A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BFA0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BFA4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BFAA                            
0001BFAA                            loc_1B2C8:
0001BFAA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BFB0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BFB4 6A00                       		bpl.s	loc_1B2E4
0001BFB6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BFBC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BFC0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BFC6                            
0001BFC6                            loc_1B2E4:
0001BFC6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BFCA 1340 0138                  		move.b	d0,$138(a1)
0001BFCE 1340 0160                  		move.b	d0,$160(a1)
0001BFD2 1340 0148                  		move.b	d0,$148(a1)
0001BFD6 1340 0150                  		move.b	d0,$150(a1)
0001BFDA 1340 01D8                  		move.b	d0,$1D8(a1)
0001BFDE 1340 01E0                  		move.b	d0,$1E0(a1)
0001BFE2 1340 01E8                  		move.b	d0,$1E8(a1)
0001BFE6 1340 01F0                  		move.b	d0,$1F0(a1)
0001BFEA 1340 01F8                  		move.b	d0,$1F8(a1)
0001BFEE 1340 0200                  		move.b	d0,$200(a1)
0001BFF2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BFF6 6A00                       		bpl.s	loc_1B326
0001BFF8 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BFFE 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C002 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C008                            
0001C008                            loc_1B326:
0001C008 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C00C 1340 0168                  		move.b	d0,$168(a1)
0001C010 1340 0170                  		move.b	d0,$170(a1)
0001C014 1340 0178                  		move.b	d0,$178(a1)
0001C018 1340 0180                  		move.b	d0,$180(a1)
0001C01C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C020 6A00                       		bpl.s	loc_1B350
0001C022 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C028 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C02C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C032                            
0001C032                            loc_1B350:
0001C032 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C038 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C03E 7000                       		moveq	#0,d0
0001C040 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C044 D040                       		add.w	d0,d0
0001C046 41F0 0000                  		lea	(a0,d0.w),a0
0001C04A 3290                       		move.w	(a0),(a1)
0001C04C 3368 0002 0008             		move.w	2(a0),8(a1)
0001C052 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C058 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C05E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C064 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C06A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C070 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C076 D0FC 0020                  		adda.w	#$20,a0
0001C07A D2FC 0048                  		adda.w	#$48,a1
0001C07E 3290                       		move.w	(a0),(a1)
0001C080 3368 0002 0008             		move.w	2(a0),8(a1)
0001C086 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C08C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C092 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C098 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C09E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C0A4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C0AA D0FC 0020                  		adda.w	#$20,a0
0001C0AE D2FC 0048                  		adda.w	#$48,a1
0001C0B2 3290                       		move.w	(a0),(a1)
0001C0B4 3368 0002 0008             		move.w	2(a0),8(a1)
0001C0BA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C0C0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C0C6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C0CC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C0D2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C0D8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C0DE D0FC 0020                  		adda.w	#$20,a0
0001C0E2 D2FC 0048                  		adda.w	#$48,a1
0001C0E6 3290                       		move.w	(a0),(a1)
0001C0E8 3368 0002 0008             		move.w	2(a0),8(a1)
0001C0EE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C0F4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C0FA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C100 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C106 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C10C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C112 D0FC 0020                  		adda.w	#$20,a0
0001C116 D2FC 0048                  		adda.w	#$48,a1
0001C11A 4E75                       		rts	
0001C11C                            ; End of function SS_AniWallsRings
0001C11C                            
0001C11C                            ; ===========================================================================
0001C11C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C12C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C13C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C14C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C15C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C16C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C17C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C18C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C19C                            ; ---------------------------------------------------------------------------
0001C19C                            ; Subroutine to	remove items when you collect them in the special stage
0001C19C                            ; ---------------------------------------------------------------------------
0001C19C                            
0001C19C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C19C                            
0001C19C                            
0001C19C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C19C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C1A2 303C 001F                  		move.w	#$1F,d0
0001C1A6                            
0001C1A6                            loc_1B4C4:
0001C1A6 4A12                       		tst.b	(a2)
0001C1A8 6700                       		beq.s	locret_1B4CE
0001C1AA 504A                       		addq.w	#8,a2
0001C1AC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C1B0                            
0001C1B0                            locret_1B4CE:
0001C1B0 4E75                       		rts	
0001C1B2                            ; End of function SS_RemoveCollectedItem
0001C1B2                            
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2                            ; Subroutine to	animate	special	stage items when you touch them
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2                            
0001C1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B2                            
0001C1B2                            
0001C1B2                            SS_AniItems:				; XREF: SS_ShowLayout
0001C1B2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C1B8 3E3C 001F                  		move.w	#$1F,d7
0001C1BC                            
0001C1BC                            loc_1B4DA:
0001C1BC 7000                       		moveq	#0,d0
0001C1BE 1010                       		move.b	(a0),d0
0001C1C0 6700                       		beq.s	loc_1B4E8
0001C1C2 E548                       		lsl.w	#2,d0
0001C1C4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C1C8 4E91                       		jsr	(a1)
0001C1CA                            
0001C1CA                            loc_1B4E8:
0001C1CA 5048                       		addq.w	#8,a0
0001C1CC                            
0001C1CC                            loc_1B4EA:
0001C1CC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C1D0                            
0001C1D0 4E75                       		rts	
0001C1D2                            ; End of function SS_AniItems
0001C1D2                            
0001C1D2                            ; ===========================================================================
0001C1D2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C1D6 0000 0000                  		dc.l SS_AniBumper
0001C1DA 0000 0000                  		dc.l SS_Ani1Up
0001C1DE 0000 0000                  		dc.l SS_AniReverse
0001C1E2 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C1E6 0000 0000                  		dc.l SS_AniGlassBlock
0001C1EA                            ; ===========================================================================
0001C1EA                            
0001C1EA                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C1EA 5328 0002                  		subq.b	#1,2(a0)
0001C1EE 6A00                       		bpl.s	locret_1B530
0001C1F0 117C 0005 0002             		move.b	#5,2(a0)
0001C1F6 7000                       		moveq	#0,d0
0001C1F8 1028 0003                  		move.b	3(a0),d0
0001C1FC 5228 0003                  		addq.b	#1,3(a0)
0001C200 2268 0004                  		movea.l	4(a0),a1
0001C204 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C208 1280                       		move.b	d0,(a1)
0001C20A 6600                       		bne.s	locret_1B530
0001C20C 4290                       		clr.l	(a0)
0001C20E 42A8 0004                  		clr.l	4(a0)
0001C212                            
0001C212                            locret_1B530:
0001C212 4E75                       		rts	
0001C214                            ; ===========================================================================
0001C214 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C21A                            ; ===========================================================================
0001C21A                            
0001C21A                            SS_AniBumper:				; XREF: SS_AniIndex
0001C21A 5328 0002                  		subq.b	#1,2(a0)
0001C21E 6A00                       		bpl.s	locret_1B566
0001C220 117C 0007 0002             		move.b	#7,2(a0)
0001C226 7000                       		moveq	#0,d0
0001C228 1028 0003                  		move.b	3(a0),d0
0001C22C 5228 0003                  		addq.b	#1,3(a0)
0001C230 2268 0004                  		movea.l	4(a0),a1
0001C234 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C238 6600                       		bne.s	loc_1B564
0001C23A 4290                       		clr.l	(a0)
0001C23C 42A8 0004                  		clr.l	4(a0)
0001C240 12BC 0025                  		move.b	#$25,(a1)
0001C244 4E75                       		rts	
0001C246                            ; ===========================================================================
0001C246                            
0001C246                            loc_1B564:
0001C246 1280                       		move.b	d0,(a1)
0001C248                            
0001C248                            locret_1B566:
0001C248 4E75                       		rts	
0001C24A                            ; ===========================================================================
0001C24A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C250                            ; ===========================================================================
0001C250                            
0001C250                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C250 5328 0002                  		subq.b	#1,2(a0)
0001C254 6A00                       		bpl.s	locret_1B596
0001C256 117C 0005 0002             		move.b	#5,2(a0)
0001C25C 7000                       		moveq	#0,d0
0001C25E 1028 0003                  		move.b	3(a0),d0
0001C262 5228 0003                  		addq.b	#1,3(a0)
0001C266 2268 0004                  		movea.l	4(a0),a1
0001C26A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C26E 1280                       		move.b	d0,(a1)
0001C270 6600                       		bne.s	locret_1B596
0001C272 4290                       		clr.l	(a0)
0001C274 42A8 0004                  		clr.l	4(a0)
0001C278                            
0001C278                            locret_1B596:
0001C278 4E75                       		rts	
0001C27A                            ; ===========================================================================
0001C27A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C280                            ; ===========================================================================
0001C280                            
0001C280                            SS_AniReverse:				; XREF: SS_AniIndex
0001C280 5328 0002                  		subq.b	#1,2(a0)
0001C284 6A00                       		bpl.s	locret_1B5CC
0001C286 117C 0007 0002             		move.b	#7,2(a0)
0001C28C 7000                       		moveq	#0,d0
0001C28E 1028 0003                  		move.b	3(a0),d0
0001C292 5228 0003                  		addq.b	#1,3(a0)
0001C296 2268 0004                  		movea.l	4(a0),a1
0001C29A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C29E 6600                       		bne.s	loc_1B5CA
0001C2A0 4290                       		clr.l	(a0)
0001C2A2 42A8 0004                  		clr.l	4(a0)
0001C2A6 12BC 002B                  		move.b	#$2B,(a1)
0001C2AA 4E75                       		rts	
0001C2AC                            ; ===========================================================================
0001C2AC                            
0001C2AC                            loc_1B5CA:
0001C2AC 1280                       		move.b	d0,(a1)
0001C2AE                            
0001C2AE                            locret_1B5CC:
0001C2AE 4E75                       		rts	
0001C2B0                            ; ===========================================================================
0001C2B0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C2B6                            ; ===========================================================================
0001C2B6                            
0001C2B6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C2B6 5328 0002                  		subq.b	#1,2(a0)
0001C2BA 6A00                       		bpl.s	locret_1B60C
0001C2BC 117C 0005 0002             		move.b	#5,2(a0)
0001C2C2 7000                       		moveq	#0,d0
0001C2C4 1028 0003                  		move.b	3(a0),d0
0001C2C8 5228 0003                  		addq.b	#1,3(a0)
0001C2CC 2268 0004                  		movea.l	4(a0),a1
0001C2D0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C2D4 1280                       		move.b	d0,(a1)
0001C2D6 6600                       		bne.s	locret_1B60C
0001C2D8 4290                       		clr.l	(a0)
0001C2DA 42A8 0004                  		clr.l	4(a0)
0001C2DE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C2E4 303C 00A8                  		move.w	#$A8,d0
0001C2E8 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C2EE                            
0001C2EE                            locret_1B60C:
0001C2EE 4E75                       		rts	
0001C2F0                            ; ===========================================================================
0001C2F0 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C2F6                            ; ===========================================================================
0001C2F6                            
0001C2F6                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C2F6 5328 0002                  		subq.b	#1,2(a0)
0001C2FA 6A00                       		bpl.s	locret_1B640
0001C2FC 117C 0001 0002             		move.b	#1,2(a0)
0001C302 7000                       		moveq	#0,d0
0001C304 1028 0003                  		move.b	3(a0),d0
0001C308 5228 0003                  		addq.b	#1,3(a0)
0001C30C 2268 0004                  		movea.l	4(a0),a1
0001C310 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C314 1280                       		move.b	d0,(a1)
0001C316 6600                       		bne.s	locret_1B640
0001C318 12A8 0004                  		move.b	4(a0),(a1)
0001C31C 4290                       		clr.l	(a0)
0001C31E 42A8 0004                  		clr.l	4(a0)
0001C322                            
0001C322                            locret_1B640:
0001C322 4E75                       		rts	
0001C324                            ; ===========================================================================
0001C324 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C32E                            ; ---------------------------------------------------------------------------
0001C32E                            ; Special stage	layout pointers
0001C32E                            ; ---------------------------------------------------------------------------
0001C32E                            SS_LayoutIndex:
0001C32E                            	include "_inc\Special stage layout pointers.asm"
0001C32E                            ; ---------------------------------------------------------------------------
0001C32E                            ; Special stage	layout pointers
0001C32E                            ; ---------------------------------------------------------------------------
0001C32E 0000 0000                  	dc.l SS_1
0001C332 0000 0000                  	dc.l SS_2
0001C336 0000 0000                  	dc.l SS_3
0001C33A 0000 0000                  	dc.l SS_4
0001C33E 0000 0000                  	dc.l SS_5
0001C342 0000 0000                  	dc.l SS_6
0001C346                            	even
0001C346                            	even
0001C346                            
0001C346                            ; ---------------------------------------------------------------------------
0001C346                            ; Special stage	start locations
0001C346                            ; ---------------------------------------------------------------------------
0001C346                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C35E                            		even
0001C35E                            
0001C35E                            ; ---------------------------------------------------------------------------
0001C35E                            ; Subroutine to	load special stage layout
0001C35E                            ; ---------------------------------------------------------------------------
0001C35E                            
0001C35E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C35E                            
0001C35E                            
0001C35E                            SS_Load:				; XREF: SpecialStage
0001C35E 7000                       		moveq	#0,d0
0001C360 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C364 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C368 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C36E 6500                       		bcs.s	SS_ChkEmldNum
0001C370 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C376                            
0001C376                            SS_ChkEmldNum:
0001C376 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C37C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C37E 7200                       		moveq	#0,d1
0001C380 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C384 5301                       		subq.b	#1,d1
0001C386 6500                       		bcs.s	SS_LoadData
0001C388 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C38C                            
0001C38C                            SS_ChkEmldLoop:	
0001C38C B033 1000                  		cmp.b	(a3,d1.w),d0
0001C390 6600                       		bne.s	SS_ChkEmldRepeat
0001C392 60CA                       		bra.s	SS_Load
0001C394                            ; ===========================================================================
0001C394                            
0001C394                            SS_ChkEmldRepeat:
0001C394 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C398                            
0001C398                            SS_LoadData:
0001C398 E548                       		lsl.w	#2,d0
0001C39A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C39E 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C3A2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C3A6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C3AA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C3B0 303C 0000                  		move.w	#0,d0
0001C3B4 4EB9 0000 1922             		jsr	(EniDec).l
0001C3BA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C3C0 303C 0FFF                  		move.w	#$FFF,d0
0001C3C4                            
0001C3C4                            SS_ClrRAM3:
0001C3C4 4299                       		clr.l	(a1)+
0001C3C6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C3CA                            
0001C3CA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C3D0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C3D6 723F                       		moveq	#$3F,d1
0001C3D8                            
0001C3D8                            loc_1B6F6:
0001C3D8 743F                       		moveq	#$3F,d2
0001C3DA                            
0001C3DA                            loc_1B6F8:
0001C3DA 12D8                       		move.b	(a0)+,(a1)+
0001C3DC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C3E0                            
0001C3E0 43E9 0040                  		lea	$40(a1),a1
0001C3E4 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C3E8                            
0001C3E8 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C3EE 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C3F4 724D                       		moveq	#$4D,d1
0001C3F6                            
0001C3F6                            loc_1B714:
0001C3F6 22D8                       		move.l	(a0)+,(a1)+
0001C3F8 32FC 0000                  		move.w	#0,(a1)+
0001C3FC 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C402 32D8                       		move.w	(a0)+,(a1)+
0001C404 51C9 FFF0                  		dbf	d1,loc_1B714
0001C408                            
0001C408 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C40E 323C 003F                  		move.w	#$3F,d1
0001C412                            
0001C412                            loc_1B730:
0001C412                            
0001C412 4299                       		clr.l	(a1)+
0001C414 51C9 FFFC                  		dbf	d1,loc_1B730
0001C418                            
0001C418 4E75                       		rts	
0001C41A                            ; End of function SS_Load
0001C41A                            
0001C41A                            ; ===========================================================================
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            ; Special stage	mappings and VRAM pointers
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            SS_MapIndex:
0001C41A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            ; Special stage	mappings and VRAM pointers
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C41E 0142                       	dc.w $142		; VRAM setting
0001C420 0000 0000                  	dc.l Map_SSWalls
0001C424 0142                       	dc.w $142
0001C426 0000 0000                  	dc.l Map_SSWalls
0001C42A 0142                       	dc.w $142
0001C42C 0000 0000                  	dc.l Map_SSWalls
0001C430 0142                       	dc.w $142
0001C432 0000 0000                  	dc.l Map_SSWalls
0001C436 0142                       	dc.w $142
0001C438 0000 0000                  	dc.l Map_SSWalls
0001C43C 0142                       	dc.w $142
0001C43E 0000 0000                  	dc.l Map_SSWalls
0001C442 0142                       	dc.w $142
0001C444 0000 0000                  	dc.l Map_SSWalls
0001C448 0142                       	dc.w $142
0001C44A 0000 0000                  	dc.l Map_SSWalls
0001C44E 0142                       	dc.w $142
0001C450 0000 0000                  	dc.l Map_SSWalls
0001C454 2142                       	dc.w $2142
0001C456 0000 0000                  	dc.l Map_SSWalls
0001C45A 2142                       	dc.w $2142
0001C45C 0000 0000                  	dc.l Map_SSWalls
0001C460 2142                       	dc.w $2142
0001C462 0000 0000                  	dc.l Map_SSWalls
0001C466 2142                       	dc.w $2142
0001C468 0000 0000                  	dc.l Map_SSWalls
0001C46C 2142                       	dc.w $2142
0001C46E 0000 0000                  	dc.l Map_SSWalls
0001C472 2142                       	dc.w $2142
0001C474 0000 0000                  	dc.l Map_SSWalls
0001C478 2142                       	dc.w $2142
0001C47A 0000 0000                  	dc.l Map_SSWalls
0001C47E 2142                       	dc.w $2142
0001C480 0000 0000                  	dc.l Map_SSWalls
0001C484 2142                       	dc.w $2142
0001C486 0000 0000                  	dc.l Map_SSWalls
0001C48A 4142                       	dc.w $4142
0001C48C 0000 0000                  	dc.l Map_SSWalls
0001C490 4142                       	dc.w $4142
0001C492 0000 0000                  	dc.l Map_SSWalls
0001C496 4142                       	dc.w $4142
0001C498 0000 0000                  	dc.l Map_SSWalls
0001C49C 4142                       	dc.w $4142
0001C49E 0000 0000                  	dc.l Map_SSWalls
0001C4A2 4142                       	dc.w $4142
0001C4A4 0000 0000                  	dc.l Map_SSWalls
0001C4A8 4142                       	dc.w $4142
0001C4AA 0000 0000                  	dc.l Map_SSWalls
0001C4AE 4142                       	dc.w $4142
0001C4B0 0000 0000                  	dc.l Map_SSWalls
0001C4B4 4142                       	dc.w $4142
0001C4B6 0000 0000                  	dc.l Map_SSWalls
0001C4BA 4142                       	dc.w $4142
0001C4BC 0000 0000                  	dc.l Map_SSWalls
0001C4C0 6142                       	dc.w $6142
0001C4C2 0000 0000                  	dc.l Map_SSWalls
0001C4C6 6142                       	dc.w $6142
0001C4C8 0000 0000                  	dc.l Map_SSWalls
0001C4CC 6142                       	dc.w $6142
0001C4CE 0000 0000                  	dc.l Map_SSWalls
0001C4D2 6142                       	dc.w $6142
0001C4D4 0000 0000                  	dc.l Map_SSWalls
0001C4D8 6142                       	dc.w $6142
0001C4DA 0000 0000                  	dc.l Map_SSWalls
0001C4DE 6142                       	dc.w $6142
0001C4E0 0000 0000                  	dc.l Map_SSWalls
0001C4E4 6142                       	dc.w $6142
0001C4E6 0000 0000                  	dc.l Map_SSWalls
0001C4EA 6142                       	dc.w $6142
0001C4EC 0000 0000                  	dc.l Map_SSWalls
0001C4F0 6142                       	dc.w $6142
0001C4F2 0000 F546                  	dc.l Map_obj47
0001C4F6 023B                       	dc.w $23B
0001C4F8 0000 0000                  	dc.l Map_SS_R
0001C4FC 0570                       	dc.w $570
0001C4FE 0000 0000                  	dc.l Map_SS_R
0001C502 0251                       	dc.w $251
0001C504 0000 0000                  	dc.l Map_SS_R
0001C508 0370                       	dc.w $370
0001C50A 0000 0000                  	dc.l Map_SS_Up
0001C50E 0263                       	dc.w $263
0001C510 0000 0000                  	dc.l Map_SS_Down
0001C514 0263                       	dc.w $263
0001C516 0000 0000                  	dc.l Map_SS_R
0001C51A 22F0                       	dc.w $22F0
0001C51C 0000 0000                  	dc.l Map_SS_Glass
0001C520 0470                       	dc.w $470
0001C522 0000 0000                  	dc.l Map_SS_Glass
0001C526 05F0                       	dc.w $5F0
0001C528 0000 0000                  	dc.l Map_SS_Glass
0001C52C 65F0                       	dc.w $65F0
0001C52E 0000 0000                  	dc.l Map_SS_Glass
0001C532 25F0                       	dc.w $25F0
0001C534 0000 0000                  	dc.l Map_SS_Glass
0001C538 45F0                       	dc.w $45F0
0001C53A 0000 0000                  	dc.l Map_SS_R
0001C53E 02F0                       	dc.w $2F0
0001C540 0100 F546                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C544 023B                       	dc.w $23B
0001C546 0200 F546                  	dc.l Map_obj47+$2000000
0001C54A 023B                       	dc.w $23B
0001C54C 0000 0000                  	dc.l Map_SS_R
0001C550 0797                       	dc.w $797
0001C552 0000 0000                  	dc.l Map_SS_R
0001C556 07A0                       	dc.w $7A0
0001C558 0000 0000                  	dc.l Map_SS_R
0001C55C 07A9                       	dc.w $7A9
0001C55E 0000 0000                  	dc.l Map_SS_R
0001C562 0797                       	dc.w $797
0001C564 0000 0000                  	dc.l Map_SS_R
0001C568 07A0                       	dc.w $7A0
0001C56A 0000 0000                  	dc.l Map_SS_R
0001C56E 07A9                       	dc.w $7A9
0001C570 0000 A83E                  	dc.l Map_obj25
0001C574 27B2                       	dc.w $27B2
0001C576 0000 0000                  	dc.l Map_SS_Chaos3
0001C57A 0770                       	dc.w $770
0001C57C 0000 0000                  	dc.l Map_SS_Chaos3
0001C580 2770                       	dc.w $2770
0001C582 0000 0000                  	dc.l Map_SS_Chaos3
0001C586 4770                       	dc.w $4770
0001C588 0000 0000                  	dc.l Map_SS_Chaos3
0001C58C 6770                       	dc.w $6770
0001C58E 0000 0000                  	dc.l Map_SS_Chaos1
0001C592 0770                       	dc.w $770
0001C594 0000 0000                  	dc.l Map_SS_Chaos2
0001C598 0770                       	dc.w $770
0001C59A 0000 0000                  	dc.l Map_SS_R
0001C59E 04F0                       	dc.w $4F0
0001C5A0 0400 A83E                  	dc.l Map_obj25+$4000000
0001C5A4 27B2                       	dc.w $27B2
0001C5A6 0500 A83E                  	dc.l Map_obj25+$5000000
0001C5AA 27B2                       	dc.w $27B2
0001C5AC 0600 A83E                  	dc.l Map_obj25+$6000000
0001C5B0 27B2                       	dc.w $27B2
0001C5B2 0700 A83E                  	dc.l Map_obj25+$7000000
0001C5B6 27B2                       	dc.w $27B2
0001C5B8 0000 0000                  	dc.l Map_SS_Glass
0001C5BC 23F0                       	dc.w $23F0
0001C5BE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C5C2 23F0                       	dc.w $23F0
0001C5C4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C5C8 23F0                       	dc.w $23F0
0001C5CA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C5CE 23F0                       	dc.w $23F0
0001C5D0 0000 0000                  	dc.l Map_SS_R+$2000000
0001C5D4 04F0                       	dc.w $4F0
0001C5D6 0000 0000                  	dc.l Map_SS_Glass
0001C5DA 05F0                       	dc.w $5F0
0001C5DC 0000 0000                  	dc.l Map_SS_Glass
0001C5E0 65F0                       	dc.w $65F0
0001C5E2 0000 0000                  	dc.l Map_SS_Glass
0001C5E6 25F0                       	dc.w $25F0
0001C5E8 0000 0000                  	dc.l Map_SS_Glass
0001C5EC 45F0                       	dc.w $45F0
0001C5EC 45F0                       	dc.w $45F0
0001C5EE                            
0001C5EE                            ; ---------------------------------------------------------------------------
0001C5EE                            ; Sprite mappings - special stage "R" block
0001C5EE                            ; ---------------------------------------------------------------------------
0001C5EE                            Map_SS_R:
0001C5EE                            	include "_maps\SSRblock.asm"
0001C5EE                            ; ---------------------------------------------------------------------------
0001C5EE                            ; Sprite mappings - special stage "R" block
0001C5EE                            ; ---------------------------------------------------------------------------
0001C5EE 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C5F2 0000                       		dc.w byte_1B91E-Map_SS_R
0001C5F4 01                         byte_1B912:	dc.b 1
0001C5F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C5FA 01                         byte_1B918:	dc.b 1
0001C5FB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C600 00                         byte_1B91E:	dc.b 0
0001C602 00                         		even
0001C602 00                         		even
0001C602                            
0001C602                            ; ---------------------------------------------------------------------------
0001C602                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C602                            ; ---------------------------------------------------------------------------
0001C602                            Map_SS_Glass:
0001C602                            	include "_maps\SSglassblock.asm"
0001C602                            ; ---------------------------------------------------------------------------
0001C602                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C602                            ; ---------------------------------------------------------------------------
0001C602 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C606 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C60A 01                         byte_1B928:	dc.b 1
0001C60B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C610 01                         byte_1B92E:	dc.b 1
0001C611 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C616 01                         byte_1B934:	dc.b 1
0001C617 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C61C 01                         byte_1B93A:	dc.b 1
0001C61D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C622                            		even
0001C622                            		even
0001C622                            
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            ; Sprite mappings - special stage "UP" block
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            Map_SS_Up:
0001C622                            	include "_maps\SSUPblock.asm"
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            ; Sprite mappings - special stage "UP" block
0001C622                            ; ---------------------------------------------------------------------------
0001C622 0000                       		dc.w byte_1B944-Map_SS_Up
0001C624 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C626 01                         byte_1B944:	dc.b 1
0001C627 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C62C 01                         byte_1B94A:	dc.b 1
0001C62D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C632                            		even
0001C632                            		even
0001C632                            
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            ; Sprite mappings - special stage "DOWN" block
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            Map_SS_Down:
0001C632                            	include "_maps\SSDOWNblock.asm"
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            ; Sprite mappings - special stage "DOWN" block
0001C632                            ; ---------------------------------------------------------------------------
0001C632 0000                       		dc.w byte_1B954-Map_SS_Down
0001C634 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C636 01                         byte_1B954:	dc.b 1
0001C637 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C63C 01                         byte_1B95A:	dc.b 1
0001C63D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C642                            		even
0001C642                            		even
0001C642                            
0001C642                            ; ---------------------------------------------------------------------------
0001C642                            ; Sprite mappings - special stage chaos	emeralds
0001C642                            ; ---------------------------------------------------------------------------
0001C642 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C644 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C646 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C648 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C64A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C64C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C64E 01                         byte_1B96C:	dc.b 1
0001C64F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C654 01                         byte_1B972:	dc.b 1
0001C655 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C65A 01                         byte_1B978:	dc.b 1
0001C65B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C660 01                         byte_1B97E:	dc.b 1
0001C661 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C666                            		even
0001C666                            ; ===========================================================================
0001C666                            ; ---------------------------------------------------------------------------
0001C666                            ; Object 09 - Sonic (special stage)
0001C666                            ; ---------------------------------------------------------------------------
0001C666                            
0001C666                            Obj09:					; XREF: Obj_Index
0001C666                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C666                            ;		beq.s	Obj09_Normal	; if not, branch
0001C666 6100 0000                  		bsr.w	SS_FixCamera
0001C66A                            ;		bra.w	DebugMode
0001C66A                            ; ===========================================================================
0001C66A                            
0001C66A                            Obj09_Normal:
0001C66A 7000                       		moveq	#0,d0
0001C66C 1028 0024                  		move.b	$24(a0),d0
0001C670 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C674 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C678                            ; ===========================================================================
0001C678 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C67A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C67C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C67E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C680                            ; ===========================================================================
0001C680                            
0001C680                            Obj09_Main:				; XREF: Obj09_Index
0001C680 5428 0024                  		addq.b	#2,$24(a0)
0001C684 117C 000E 0016             		move.b	#$E,$16(a0)
0001C68A 117C 0007 0017             		move.b	#7,$17(a0)
0001C690 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C698 317C 0780 0002             		move.w	#$780,2(a0)
0001C69E 117C 0004 0001             		move.b	#4,1(a0)
0001C6A4 117C 0000 0018             		move.b	#0,$18(a0)
0001C6AA 117C 0002 001C             		move.b	#2,$1C(a0)
0001C6B0 08E8 0002 0022             		bset	#2,$22(a0)
0001C6B6 08E8 0001 0022             		bset	#1,$22(a0)
0001C6BC                            
0001C6BC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C6BC                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C6BC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C6BC                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C6BC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C6BC                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C6BC                            
0001C6BC                            Obj09_NoDebug:
0001C6BC 117C 0000 0030             		move.b	#0,$30(a0)
0001C6C2 7000                       		moveq	#0,d0
0001C6C4 1028 0022                  		move.b	$22(a0),d0
0001C6C8 0240 0002                  		andi.w	#2,d0
0001C6CC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C6D0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C6D4 4EBA 8086                  		jsr	LoadSonicDynPLC
0001C6D8 4EF9 0000 E052             		jmp	DisplaySprite
0001C6DE                            ; ===========================================================================
0001C6DE 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C6E0 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C6E2                            ; ===========================================================================
0001C6E2                            
0001C6E2                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C6E2 6100 0000                  		bsr.w	Obj09_Rise
0001C6E6 6100 0000                  		bsr.w	Obj09_Move
0001C6EA 6100 0000                  		bsr.w	Obj09_Fall
0001C6EE 6000                       		bra.s	Obj09_Display
0001C6F0                            ; ===========================================================================
0001C6F0                            
0001C6F0                            Obj09_InAir:				; XREF: Obj09_Modes
0001C6F0 6100 0000                  		bsr.w	Obj09_Rise
0001C6F4 6100 0000                  		bsr.w	Obj09_Move
0001C6F8 6100 0000                  		bsr.w	Obj09_Fall
0001C6FC                            
0001C6FC                            Obj09_Display:				; XREF: Obj09_OnWall
0001C6FC 6100 0000                  		bsr.w	Obj09_ChkItems
0001C700 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C704 4EB9 0000 E02C             		jsr	SpeedToPos
0001C70A 6100 0000                  		bsr.w	SS_FixCamera
0001C70E 3038 F780                  		move.w	($FFFFF780).w,d0
0001C712 D078 F782                  		add.w	($FFFFF782).w,d0
0001C716 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C71A 4EB9 0001 44B6             		jsr	Sonic_Animate
0001C720 4E75                       		rts	
0001C722                            
0001C722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C722                            
0001C722                            
0001C722                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C722 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C728 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C72A 4A78 F784                          tst.w   ($FFFFF784).w
0001C72E 6600                               bne.s   @corereverse1
0001C730 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C734 6000                               bra.s   Obj09_ChkRight          
0001C736                            
0001C736                            @corereverse1:
0001C736 6100 0000                          bsr.w	Obj09_MoveRight
0001C73A                            
0001C73A                            Obj09_ChkRight:
0001C73A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C740 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C742 4A78 F784                          tst.w   ($FFFFF784).w
0001C746 6600                               bne.s   @corereverse2
0001C748 6100 0000                  		bsr.w	Obj09_MoveRight
0001C74C 6000                               bra.s   Obj09_MoveSpeed 
0001C74E                            
0001C74E                            @corereverse2:
0001C74E 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C752                            
0001C752                            Obj09_MoveSpeed:
0001C752 1038 F602                  		move.b	($FFFFF602).w,d0
0001C756 0200 000C                  		andi.b	#$C,d0
0001C75A 6600                       		bne.s	Obj09_MoveCollision
0001C75C 3028 0010                  		move.w	$10(a0),d0
0001C760 6700                       		beq.s	Obj09_MoveCollision
0001C762 317C 0000 0010             		move.w	#0,$10(a0)
0001C768                            
0001C768                            Obj09_MoveCollision:
0001C768 1038 F780                  		move.b	($FFFFF780).w,d0
0001C76C 0600 0020                  		addi.b	#$20,d0
0001C770 0200 00C0                  		andi.b	#$C0,d0
0001C774 4400                       		neg.b	d0
0001C776 4EB9 0000 2D3A             		jsr	(CalcSine).l
0001C77C C3E8 0010                  		muls.w	$10(a0),d1
0001C780 D3A8 0008                  		add.l	d1,8(a0)
0001C784 C1E8 0012                  		muls.w	$12(a0),d0
0001C788 D1A8 000C                  		add.l	d0,$C(a0)
0001C78C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C790 2428 000C                  		move.l	$C(a0),d2
0001C794 2628 0008                  		move.l	8(a0),d3
0001C798 6100 0000                  		bsr.w	sub_1BCE8
0001C79C 6700                       		beq.s	loc_1BAF2
0001C79E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C7A2 93A8 0008                  		sub.l	d1,8(a0)
0001C7A6 91A8 000C                  		sub.l	d0,$C(a0)
0001C7AA 317C 0000 0010             		move.w	#0,$10(a0)
0001C7B0 4E75                       		rts	
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            loc_1BAF2:
0001C7B2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C7B6 4E75                       		rts	
0001C7B8                            ; End of function Obj09_Move
0001C7B8                            
0001C7B8                            
0001C7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7B8                            
0001C7B8                            
0001C7B8                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C7B8 08E8 0000 0022             		bset	#0,$22(a0)
0001C7BE 4240                               clr.w   d0
0001C7C0 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7C4 D040                               add.w   d0,d0
0001C7C6 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C7CC 4468 0010                          neg.w   $10(a0)
0001C7D0 4E75                               rts
0001C7D2                            
0001C7D2                            ; End of function Obj09_MoveLeft
0001C7D2                            
0001C7D2                            
0001C7D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7D2                            
0001C7D2                            
0001C7D2                            Obj09_MoveRight:
0001C7D2 08A8 0000 0022             		bclr	#0,$22(a0)
0001C7D8 4240                               clr.w   d0
0001C7DA 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7DE D040                               add.w   d0,d0
0001C7E0 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C7E6 4E75                       		rts
0001C7E8                            
0001C7E8                            ; End of function Obj09_MoveRight
0001C7E8                            
0001C7E8                            ; ---------------------------------------------------------------------------
0001C7E8                            
0001C7E8                            SS_XSpdIndex:
0001C7E8 0032                       		dc.w 50
0001C7EA 0064                       		dc.w 100
0001C7EC 0096                       		dc.w 150
0001C7EE 00C8                       		dc.w 200
0001C7F0 00FA                       		dc.w 250
0001C7F2                            
0001C7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7F2                            
0001C7F2                            
0001C7F2                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C7F2 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C7F8 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C7FA 4A78 F784                          tst.w   ($FFFFF784).w
0001C7FE 6600 0000                          bne.w   @corereverse1
0001C802 6100 0000                  		bsr.w	Obj09_MoveUp
0001C806 6000                               bra.s   Obj09_NoRise
0001C808                            
0001C808                            @corereverse1:
0001C808 6100 0000                  		bsr.w	Obj09_Falling 
0001C80C                                    
0001C80C                            Obj09_NoRise:
0001C80C 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C812 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C814 4A78 F784                          tst.w   ($FFFFF784).w
0001C818 6600 0000                          bne.w   @corereverse2
0001C81C 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C820 6000                               bra.s   Obj09_MoveYSpeed
0001C822                            
0001C822                            @corereverse2:
0001C822 6100 0000                  		bsr.w	Obj09_MoveUp
0001C826                            		
0001C826                            Obj09_MoveYSpeed:
0001C826 1038 F602                  		move.b	($FFFFF602).w,d0
0001C82A 0200 0003                  		andi.b	#3,d0
0001C82E 6600                       		bne.s	Obj09_MoveYCollision
0001C830 3028 0012                  		move.w	$12(a0),d0
0001C834 6700                       		beq.s	Obj09_MoveYCollision
0001C836 317C 0000 0012             		move.w	#0,$12(a0)
0001C83C                            
0001C83C                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C83C 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C840 0600 0020                  		addi.b	#$20,d0					;	?
0001C844 0200 00C0                  		andi.b	#$C0,d0					;	
0001C848 4400                       		neg.b	d0						;	?
0001C84A 4EB9 0000 2D3A             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C850 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C854 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C858 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C85C D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C860 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C864 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C868 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C86C 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C870 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C874 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C878 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C87C 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C880 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C886 4E75                       		rts								;	end routine
0001C888                            
0001C888                            Obj09_MoveUp:
0001C888 4240                               clr.w   d0
0001C88A 3038 F786                          move.w  ($FFFFF786).w,d0
0001C88E D040                               add.w   d0,d0
0001C890 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C896 4468 0012                          neg.w   $12(a0)
0001C89A 4E75                               rts
0001C89C                            
0001C89C                            Obj09_Falling:
0001C89C 4240                               clr.w   d0
0001C89E 3038 F786                          move.w  ($FFFFF786).w,d0
0001C8A2 D040                               add.w   d0,d0
0001C8A4 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C8AA 4E75                       		rts
0001C8AC                            ; End of function Obj09_Jump
0001C8AC                            
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            SS_YSpdIndex:
0001C8AC 0080                       		dc.w $80
0001C8AE 0100                       		dc.w $100
0001C8B0 0180                       		dc.w $180
0001C8B2 0200                       		dc.w $200
0001C8B4 0280                       		dc.w $280
0001C8B6                            
0001C8B6                            
0001C8B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8B6                            
0001C8B6                            
0001C8B6                            nullsub_2:				; XREF: Obj09_InAir
0001C8B6 4E75                       		rts	
0001C8B8                            ; End of function nullsub_2
0001C8B8                            
0001C8B8                            ; ===========================================================================
0001C8B8                            ; ---------------------------------------------------------------------------
0001C8B8                            ; unused subroutine to limit Sonic's upward vertical speed
0001C8B8                            ; ---------------------------------------------------------------------------
0001C8B8 323C FC00                  		move.w	#-$400,d1
0001C8BC B268 0012                  		cmp.w	$12(a0),d1
0001C8C0 6F00                       		ble.s	locret_1BBB4
0001C8C2 1038 F602                  		move.b	($FFFFF602).w,d0
0001C8C6 0200 0070                  		andi.b	#$70,d0
0001C8CA 6600                       		bne.s	locret_1BBB4
0001C8CC 3141 0012                  		move.w	d1,$12(a0)
0001C8D0                            
0001C8D0                            locret_1BBB4:
0001C8D0 4E75                       		rts	
0001C8D2                            ; ---------------------------------------------------------------------------
0001C8D2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C8D2                            ; ---------------------------------------------------------------------------
0001C8D2                            
0001C8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8D2                            
0001C8D2                            
0001C8D2                            SS_FixCamera:				; XREF: Obj09
0001C8D2 3428 000C                  		move.w	$C(a0),d2
0001C8D6 3628 0008                  		move.w	8(a0),d3
0001C8DA 3038 F700                  		move.w	($FFFFF700).w,d0
0001C8DE 0443 00A0                  		subi.w	#$A0,d3
0001C8E2 6500                       		bcs.s	loc_1BBCE
0001C8E4 9043                       		sub.w	d3,d0
0001C8E6 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C8EA                            
0001C8EA                            loc_1BBCE:
0001C8EA 3038 F704                  		move.w	($FFFFF704).w,d0
0001C8EE 0442 0070                  		subi.w	#$70,d2
0001C8F2 6500                       		bcs.s	locret_1BBDE
0001C8F4 9042                       		sub.w	d2,d0
0001C8F6 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C8FA                            
0001C8FA                            locret_1BBDE:
0001C8FA 4E75                       		rts	
0001C8FC                            ; End of function SS_FixCamera
0001C8FC                            
0001C8FC                            ; ===========================================================================
0001C8FC                            
0001C8FC                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C8FC 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C902 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C908 6600                       		bne.s	loc_1BBF4
0001C90A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C910                            
0001C910                            loc_1BBF4:
0001C910 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C916 6D00                       		blt.s	loc_1BC12
0001C918 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C91E                            ;		move.w	#$4000,($FFFFF780).w
0001C91E 5428 0024                  		addq.b	#2,$24(a0)
0001C922 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C928                            
0001C928                            loc_1BC12:
0001C928                            ;		move.w	($FFFFF780).w,d0
0001C928                            ;		add.w	($FFFFF782).w,d0
0001C928                            ;		move.w	d0,($FFFFF780).w
0001C928 4EB9 0001 44B6             		jsr	Sonic_Animate
0001C92E 4EB9 0001 475C             		jsr	LoadSonicDynPLC
0001C934 6100 FF9C                  		bsr.w	SS_FixCamera
0001C938 4EF9 0000 E052             		jmp	DisplaySprite
0001C93E                            ; ===========================================================================
0001C93E                            
0001C93E                            Obj09_Exit2:				; XREF: Obj09_Index
0001C93E 5368 0038                  		subq.w	#1,$38(a0)
0001C942 6600                       		bne.s	loc_1BC40
0001C944 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C94A                            
0001C94A                            loc_1BC40:
0001C94A 4EB9 0001 44B6             		jsr	Sonic_Animate
0001C950 4EB9 0001 475C             		jsr	LoadSonicDynPLC
0001C956 6100 FF7A                  		bsr.w	SS_FixCamera
0001C95A 4EF9 0000 E052             		jmp	DisplaySprite
0001C960                            
0001C960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C960                            
0001C960                            
0001C960                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C960 2428 000C                  		move.l	$C(a0),d2
0001C964 2628 0008                  		move.l	8(a0),d3
0001C968 1038 F780                  		move.b	($FFFFF780).w,d0
0001C96C 0200 00FC                  		andi.b	#$FC,d0
0001C970 4EB9 0000 2D3A             		jsr	(CalcSine).l
0001C976 3828 0010                  		move.w	$10(a0),d4
0001C97A 48C4                       		ext.l	d4
0001C97C E184                       		asl.l	#8,d4
0001C97E C1FC 002A                  		muls.w	#$2A,d0
0001C982 D084                       		add.l	d4,d0
0001C984 3828 0012                  		move.w	$12(a0),d4
0001C988 48C4                       		ext.l	d4
0001C98A E184                       		asl.l	#8,d4
0001C98C C3FC 002A                  		muls.w	#$2A,d1
0001C990 D284                       		add.l	d4,d1
0001C992 7A00                       		moveq	#0,d5
0001C994 3A28 0010                  		move.w	$10(a0),d5
0001C998 6700                       		beq.s	Obj09_NoXFall
0001C99A D680                       		add.l	d0,d3
0001C99C 6100 0000                  		bsr.w	sub_1BCE8
0001C9A0 6700                       		beq.s	loc_1BCB0
0001C9A2 9680                       		sub.l	d0,d3
0001C9A4 7000                       		moveq	#0,d0
0001C9A6 3140 0010                  		move.w	d0,$10(a0)
0001C9AA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C9B0                            
0001C9B0                            Obj09_NoXFall
0001C9B0 7C00                       		moveq	#0,d6
0001C9B2 3C28 0012                  		move.w	$12(a0),d6
0001C9B6 6700                       		beq.s	Obj09_NoYFall
0001C9B8 D481                       		add.l	d1,d2
0001C9BA 6100 0000                  		bsr.w	sub_1BCE8
0001C9BE 6700                       		beq.s	loc_1BCC6
0001C9C0 9481                       		sub.l	d1,d2
0001C9C2 7200                       		moveq	#0,d1
0001C9C4 3141 0012                  		move.w	d1,$12(a0)
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            
0001C9CA                            loc_1BCB0:
0001C9CA 7C00                       		moveq	#0,d6
0001C9CC 3C28 0012                  		move.w	$12(a0),d6
0001C9D0 6700                       		beq.s	Obj09_NoYFall
0001C9D2 D481                       		add.l	d1,d2
0001C9D4 6100 0000                  		bsr.w	sub_1BCE8
0001C9D8 6700                       		beq.s	loc_1BCD4
0001C9DA 9481                       		sub.l	d1,d2
0001C9DC 7200                       		moveq	#0,d1
0001C9DE 3141 0012                  		move.w	d1,$12(a0)
0001C9E2 08A8 0001 0022             		bclr	#1,$22(a0)
0001C9E8                            
0001C9E8                            loc_1BCC6:
0001C9E8 E080                       		asr.l	#8,d0
0001C9EA E081                       		asr.l	#8,d1
0001C9EC 3140 0010                  		move.w	d0,$10(a0)
0001C9F0 3141 0012                  		move.w	d1,$12(a0)
0001C9F4 4E75                       		rts	
0001C9F6                            ; ===========================================================================
0001C9F6                            
0001C9F6                            loc_1BCD4:
0001C9F6 E080                       		asr.l	#8,d0
0001C9F8 E081                       		asr.l	#8,d1
0001C9FA 3140 0010                  		move.w	d0,$10(a0)
0001C9FE 3141 0012                  		move.w	d1,$12(a0)
0001CA02 08E8 0001 0022             		bset	#1,$22(a0)
0001CA08 4E75                       		rts	
0001CA0A                            
0001CA0A                            Obj09_NoYFall:
0001CA0A 4E75                       		rts
0001CA0C                            ; End of function Obj09_Fall
0001CA0C                            
0001CA0C                            
0001CA0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA0C                            
0001CA0C                            
0001CA0C                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CA0C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CA12 7800                       		moveq	#0,d4
0001CA14 4842                       		swap	d2
0001CA16 3802                       		move.w	d2,d4
0001CA18 4842                       		swap	d2
0001CA1A 0644 0044                  		addi.w	#$44,d4
0001CA1E 88FC 0018                  		divu.w	#$18,d4
0001CA22 C8FC 0080                  		mulu.w	#$80,d4
0001CA26 D3C4                       		adda.l	d4,a1
0001CA28 7800                       		moveq	#0,d4
0001CA2A 4843                       		swap	d3
0001CA2C 3803                       		move.w	d3,d4
0001CA2E 4843                       		swap	d3
0001CA30 0644 0014                  		addi.w	#$14,d4
0001CA34 88FC 0018                  		divu.w	#$18,d4
0001CA38 D2C4                       		adda.w	d4,a1
0001CA3A 7A00                       		moveq	#0,d5
0001CA3C 1819                       		move.b	(a1)+,d4
0001CA3E 6100                       		bsr.s	sub_1BD30
0001CA40 1819                       		move.b	(a1)+,d4
0001CA42 6100                       		bsr.s	sub_1BD30
0001CA44 D2FC 007E                  		adda.w	#$7E,a1
0001CA48 1819                       		move.b	(a1)+,d4
0001CA4A 6100                       		bsr.s	sub_1BD30
0001CA4C 1819                       		move.b	(a1)+,d4
0001CA4E 6100                       		bsr.s	sub_1BD30
0001CA50 4A05                       		tst.b	d5
0001CA52 4E75                       		rts	
0001CA54                            ; End of function sub_1BCE8
0001CA54                            
0001CA54                            
0001CA54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA54                            
0001CA54                            
0001CA54                            sub_1BD30:				; XREF: sub_1BCE8
0001CA54 6700                       		beq.s	locret_1BD44
0001CA56 0C04 0028                  		cmpi.b	#$28,d4
0001CA5A 6500                       		blo.s	loc_1BD46
0001CA5C 0C04 004B                  		cmpi.b	#$4B,d4
0001CA60 6400                       		bhs.s	loc_1BD46
0001CA62 0C04 003A                  		cmpi.b	#$3A,d4
0001CA66 6400                       		bhs.s	locret_1BD44
0001CA68 0C04 002C                  		cmpi.b	#$2C,d4
0001CA6C 6400                       		bhs.s	loc_1BD46
0001CA6E                            
0001CA6E                            locret_1BD44:
0001CA6E 4E75                       		rts	
0001CA70                            ; ===========================================================================
0001CA70                            
0001CA70                            loc_1BD46:
0001CA70 1144 0030                  		move.b	d4,$30(a0)
0001CA74 2149 0032                  		move.l	a1,$32(a0)
0001CA78 7AFF                       		moveq	#-1,d5
0001CA7A 4E75                       		rts	
0001CA7C                            ; End of function sub_1BD30
0001CA7C                            
0001CA7C                            
0001CA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA7C                            
0001CA7C                            
0001CA7C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CA7C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CA82 7800                       		moveq	#0,d4
0001CA84 3828 000C                  		move.w	$C(a0),d4
0001CA88 0644 0050                  		addi.w	#$50,d4
0001CA8C 88FC 0018                  		divu.w	#$18,d4
0001CA90 C8FC 0080                  		mulu.w	#$80,d4
0001CA94 D3C4                       		adda.l	d4,a1
0001CA96 7800                       		moveq	#0,d4
0001CA98 3828 0008                  		move.w	8(a0),d4
0001CA9C 0644 0020                  		addi.w	#$20,d4
0001CAA0 88FC 0018                  		divu.w	#$18,d4
0001CAA4 D2C4                       		adda.w	d4,a1
0001CAA6 1811                       		move.b	(a1),d4
0001CAA8 6600                       		bne.s	Obj09_ChkCont
0001CAAA 4A28 003A                  		tst.b	$3A(a0)
0001CAAE 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CAB2 7800                       		moveq	#0,d4
0001CAB4 4E75                       		rts	
0001CAB6                            ; ===========================================================================
0001CAB6                            
0001CAB6                            Obj09_ChkCont:
0001CAB6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CABA 6600                       		bne.s	Obj09_Chk1Up
0001CABC 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CAC0 6600                       		bne.s	Obj09_GetCont
0001CAC2 14BC 0001                  		move.b	#1,(a2)
0001CAC6 2549 0004                  		move.l	a1,4(a2)
0001CACA                            
0001CACA                            Obj09_GetCont:
0001CACA 4EB9 0000 A526             		jsr	CollectRing
0001CAD0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CAD6 6500                       		bcs.s	Obj09_NoCont
0001CAD8 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CADE 6600                       		bne.s	Obj09_NoCont
0001CAE0 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CAE4 303C 00BF                  		move.w	#$BF,d0
0001CAE8 4EB9 0000 159A             		jsr	(PlaySound).l	; play extra continue sound
0001CAEE                            
0001CAEE                            Obj09_NoCont:
0001CAEE 7800                       		moveq	#0,d4
0001CAF0 4E75                       		rts	
0001CAF2                            ; ===========================================================================
0001CAF2                            
0001CAF2                            Obj09_Chk1Up:
0001CAF2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CAF6 6600                       		bne.s	Obj09_ChkEmer
0001CAF8 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CAFC 6600                       		bne.s	Obj09_Get1Up
0001CAFE 14BC 0003                  		move.b	#3,(a2)
0001CB02 2549 0004                  		move.l	a1,4(a2)
0001CB06                            
0001CB06                            Obj09_Get1Up:
0001CB06 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CB0A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CB0E 303C 0088                  		move.w	#$88,d0
0001CB12 4EB9 0000 159A             		jsr	(PlaySound).l	; play extra life music
0001CB18 7800                       		moveq	#0,d4
0001CB1A 4E75                       		rts	
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            Obj09_ChkEmer:
0001CB1C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CB20 6500                       		bcs.s	Obj09_UPblock
0001CB22 0C04 0040                  		cmpi.b	#$40,d4
0001CB26 6200                       		bhi.s	Obj09_UPblock
0001CB28 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CB2C 6600                       		bne.s	Obj09_GetEmer
0001CB2E 14BC 0005                  		move.b	#5,(a2)
0001CB32 2549 0004                  		move.l	a1,4(a2)
0001CB36                            
0001CB36                            Obj09_GetEmer:
0001CB36 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CB3C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CB3E 0404 003B                  		subi.b	#$3B,d4
0001CB42 7000                       		moveq	#0,d0
0001CB44 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CB48 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CB4C 1584 0000                  		move.b	d4,(a2,d0.w)
0001CB50 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CB54                            
0001CB54                            Obj09_NoEmer:
0001CB54 303C 0093                  		move.w	#$93,d0
0001CB58 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play emerald music
0001CB5E 7800                       		moveq	#0,d4
0001CB60 4E75                       		rts	
0001CB62                            
0001CB62                            ; ===========================================================================
0001CB62                            
0001CB62                            Obj09_UPblock:
0001CB62 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CB66 6600                       		bne.s	Obj09_DOWNblock
0001CB68 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CB6C 6600                       		bne.s	Obj09_SpeedUp
0001CB6E 14BC 0001                  		move.b	#1,(a2)
0001CB72 2549 0004                  		move.l	a1,4(a2)
0001CB76                            
0001CB76                            Obj09_SpeedUp:
0001CB76 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CB7C 6400                       		bhs.s	Obj09_UPsnd
0001CB7E 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CB82                            
0001CB82                            Obj09_UPsnd:
0001CB82 303C 00A9                  		move.w	#$A9,d0
0001CB86 4EB9 0000 15A0             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB8C 7800                       		moveq	#0,d4
0001CB8E 4E75                       		rts	
0001CB90                            ; ===========================================================================
0001CB90                            
0001CB90                            Obj09_DOWNblock:
0001CB90 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CB94 6600                       		bne.s	Obj09_Rblock
0001CB96 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CB9A 6600                       		bne.s	Obj09_SpeedDown
0001CB9C 14BC 0001                  		move.b	#1,(a2)
0001CBA0 2549 0004                  		move.l	a1,4(a2)
0001CBA4                            
0001CBA4                            Obj09_SpeedDown:
0001CBA4 4A78 F786                  		tst.w 	($FFFFF786).w
0001CBA8 6700                       		beq.s	Obj09_DOWNsnd
0001CBAA 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CBAE                            
0001CBAE                            Obj09_DOWNsnd:
0001CBAE 303C 00A9                  		move.w	#$A9,d0
0001CBB2 4EB9 0000 15A0             		jsr	(PlaySound_Special).l	; play up/down sound
0001CBB8 7800                       		moveq	#0,d4
0001CBBA 4E75                       		rts	
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            Obj09_Rblock:
0001CBBC 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CBC0 6600                       		bne.s	Obj09_ChkGhost
0001CBC2 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CBC6 6600                       		bne.s	Obj09_RevStage
0001CBC8 14BC 0001                  		move.b	#1,(a2)
0001CBCC 2549 0004                  		move.l	a1,4(a2)
0001CBD0                            
0001CBD0                            Obj09_RevStage:
0001CBD0 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CBD6 103C 00A9                  		move.b	#$A9,d0
0001CBDA 4EB9 0000 15A0             		jsr	(PlaySound_Special).l	; play sound
0001CBE0 7800                       		moveq	#0,d4
0001CBE2 4E75                       		rts	
0001CBE4                            
0001CBE4                            ; ===========================================================================
0001CBE4                            
0001CBE4                            Obj09_ChkGhost:
0001CBE4 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CBE8 6600                       		bne.s	Obj09_ChkGhostTag
0001CBEA 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CBF0                            
0001CBF0                            Obj09_ChkGhostTag:
0001CBF0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CBF4 6600                       		bne.s	Obj09_NoGhost
0001CBF6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CBFC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CBFE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CC04                            
0001CC04                            Obj09_NoGhost:
0001CC04 78FF                       		moveq	#-1,d4
0001CC06 4E75                       		rts	
0001CC08                            ; ===========================================================================
0001CC08                            
0001CC08                            Obj09_MakeGhostSolid:
0001CC08 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CC0E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CC10 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC16 723F                       		moveq	#$3F,d1
0001CC18                            
0001CC18                            Obj09_GhostLoop2:
0001CC18 743F                       		moveq	#$3F,d2
0001CC1A                            
0001CC1A                            Obj09_GhostLoop:
0001CC1A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CC1E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CC20 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CC24                            
0001CC24                            Obj09_NoReplace:
0001CC24 5249                       		addq.w	#1,a1
0001CC26 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CC2A 43E9 0040                  		lea	$40(a1),a1
0001CC2E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CC32                            
0001CC32                            Obj09_GhostNotSolid:
0001CC32 4228 003A                  		clr.b	$3A(a0)
0001CC36 7800                       		moveq	#0,d4
0001CC38 4E75                       		rts	
0001CC3A                            ; End of function Obj09_ChkItems
0001CC3A                            
0001CC3A                            
0001CC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC3A                            
0001CC3A                            
0001CC3A                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CC3A 1028 0030                  		move.b	$30(a0),d0
0001CC3E 6600                       		bne.s	Obj09_GOAL
0001CC40 5328 0036                  		subq.b	#1,$36(a0)
0001CC44 6A00                       		bpl.s	loc_1BEA0
0001CC46 117C 0000 0036             		move.b	#0,$36(a0)
0001CC4C                            
0001CC4C                            loc_1BEA0:
0001CC4C 5328 0037                  		subq.b	#1,$37(a0)
0001CC50 6A00                       		bpl.s	locret_1BEAC
0001CC52 117C 0000 0037             		move.b	#0,$37(a0)
0001CC58                            
0001CC58                            locret_1BEAC:
0001CC58 4E75                       		rts	
0001CC5A                            ; ===========================================================================
0001CC5A                            
0001CC5A                            ; ===========================================================================
0001CC5A                            
0001CC5A                            Obj09_GOAL:
0001CC5A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CC5E 6600                       		bne.s	Obj09_ChkGlass
0001CC60 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CC64 303C 00A8                  		move.w	#$A8,d0		; change item
0001CC68 4EB9 0000 15A0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CC6E 4E75                       		rts	
0001CC70                            ; ===========================================================================
0001CC70                            
0001CC70                            ; ===========================================================================
0001CC70                            
0001CC70                            Obj09_ChkGlass:
0001CC70 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CC74 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CC76 0C00 002E                  		cmpi.b	#$2E,d0
0001CC7A 6700                       		beq.s	Obj09_Glass
0001CC7C 0C00 002F                  		cmpi.b	#$2F,d0
0001CC80 6700                       		beq.s	Obj09_Glass
0001CC82 0C00 0030                  		cmpi.b	#$30,d0
0001CC86 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CC88                            
0001CC88                            Obj09_Glass:
0001CC88 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CC8C 6600                       		bne.s	Obj09_GlassSnd
0001CC8E 14BC 0006                  		move.b	#6,(a2)
0001CC92 2268 0032                  		movea.l	$32(a0),a1
0001CC96 5389                       		subq.l	#1,a1
0001CC98 2549 0004                  		move.l	a1,4(a2)
0001CC9C 1011                       		move.b	(a1),d0
0001CC9E 5200                       		addq.b	#1,d0		; change glass type when touched
0001CCA0 0C00 0030                  		cmpi.b	#$30,d0
0001CCA4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CCA6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CCA8                            
0001CCA8                            Obj09_GlassUpdate:
0001CCA8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CCAC                            
0001CCAC                            Obj09_GlassSnd:
0001CCAC 303C 00BA                  		move.w	#$BA,d0
0001CCB0 4EF9 0000 15A0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CCB6                            ; ===========================================================================
0001CCB6                            
0001CCB6                            Obj09_NoGlass:
0001CCB6 4E75                       		rts	
0001CCB8                            ; End of function Obj09_ChkItems2
0001CCB8                            
0001CCB8                            ; ===========================================================================
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            ; Object 10 - blank
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            
0001CCB8                            Obj10:					; XREF: Obj_Index
0001CCB8 4E75                       		rts	
0001CCBA                            ; ---------------------------------------------------------------------------
0001CCBA                            ; Subroutine to	animate	level graphics
0001CCBA                            ; ---------------------------------------------------------------------------
0001CCBA                            
0001CCBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCBA                            
0001CCBA                            
0001CCBA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CCBA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CCBE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CCC0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CCC6 6100 0000                  		bsr.w	AniArt_GiantRing
0001CCCA 7000                       		moveq	#0,d0
0001CCCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CCD0 D040                       		add.w	d0,d0
0001CCD2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CCD6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CCDA                            ; ===========================================================================
0001CCDA                            
0001CCDA                            AniArt_Pause:
0001CCDA 4E75                       		rts	
0001CCDC                            ; End of function AniArt_Load
0001CCDC                            
0001CCDC                            ; ===========================================================================
0001CCDC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CCE0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CCE4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CCE8 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CCEC                            ; ===========================================================================
0001CCEC                            ; ---------------------------------------------------------------------------
0001CCEC                            ; Animated pattern routine - Green Hill
0001CCEC                            ; ---------------------------------------------------------------------------
0001CCEC                            
0001CCEC                            AniArt_GHZ:				; XREF: AniArt_Index
0001CCEC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCF0 6A00                       		bpl.s	loc_1C08A
0001CCF2 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CCF8 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CCFE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD02 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CD06 0240 0001                  		andi.w	#1,d0
0001CD0A 6700                       		beq.s	loc_1C078
0001CD0C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CD10                            
0001CD10                            loc_1C078:
0001CD10 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CD1A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CD1E 6000 0000                  		bra.w	LoadTiles
0001CD22                            ; ===========================================================================
0001CD22                            
0001CD22                            loc_1C08A:
0001CD22 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD26 6A00                       		bpl.s	loc_1C0C0
0001CD28 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CD2E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CD34 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD38 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD3C 0240 0001                  		andi.w	#1,d0
0001CD40 6700                       		beq.s	loc_1C0AE
0001CD42 43E9 0200                  		lea	$200(a1),a1
0001CD46                            
0001CD46                            loc_1C0AE:
0001CD46 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CD50 323C 000F                  		move.w	#$F,d1
0001CD54 6000 0000                  		bra.w	LoadTiles
0001CD58                            ; ===========================================================================
0001CD58                            
0001CD58                            loc_1C0C0:
0001CD58 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD5C 6A00                       		bpl.s	locret_1C10C
0001CD5E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CD64 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CD68 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CD6C 0240 0003                  		andi.w	#3,d0
0001CD70 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CD74 0800 0000                  		btst	#0,d0
0001CD78 6600                       		bne.s	loc_1C0E8
0001CD7A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CD80                            
0001CD80                            loc_1C0E8:
0001CD80 EF48                       		lsl.w	#7,d0
0001CD82 3200                       		move.w	d0,d1
0001CD84 D040                       		add.w	d0,d0
0001CD86 D041                       		add.w	d1,d0
0001CD88 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CD92 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CD98 43F1 0000                  		lea	(a1,d0.w),a1
0001CD9C 323C 000B                  		move.w	#$B,d1
0001CDA0 6100 0000                  		bsr.w	LoadTiles
0001CDA4                            
0001CDA4                            locret_1C10C:
0001CDA4 4E75                       		rts	
0001CDA6                            ; ===========================================================================
0001CDA6 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CDAA                            ; ===========================================================================
0001CDAA                            ; ---------------------------------------------------------------------------
0001CDAA                            ; Animated pattern routine - Marble
0001CDAA                            ; ---------------------------------------------------------------------------
0001CDAA                            
0001CDAA                            AniArt_MZ:				; XREF: AniArt_Index
0001CDAA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDAE 6A00                       		bpl.s	loc_1C150
0001CDB0 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CDB6 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CDBC 7000                       		moveq	#0,d0
0001CDBE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDC2 5200                       		addq.b	#1,d0
0001CDC4 0C00 0003                  		cmpi.b	#3,d0
0001CDC8 6600                       		bne.s	loc_1C134
0001CDCA 7000                       		moveq	#0,d0
0001CDCC                            
0001CDCC                            loc_1C134:
0001CDCC 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CDD0 C0FC 0100                  		mulu.w	#$100,d0
0001CDD4 D2C0                       		adda.w	d0,a1
0001CDD6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CDE0 323C 0007                  		move.w	#7,d1
0001CDE4 6100 0000                  		bsr.w	LoadTiles
0001CDE8                            
0001CDE8                            loc_1C150:
0001CDE8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CDEC 6A00                       		bpl.s	loc_1C1AE
0001CDEE 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CDF4 7000                       		moveq	#0,d0
0001CDF6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDFA 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CE00 EE58                       		ror.w	#7,d0
0001CE02 D8C0                       		adda.w	d0,a4
0001CE04 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CE0E 7600                       		moveq	#0,d3
0001CE10 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CE14 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE18 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CE1C 343C 0003                  		move.w	#3,d2
0001CE20                            
0001CE20                            loc_1C188:
0001CE20 3003                       		move.w	d3,d0
0001CE22 D040                       		add.w	d0,d0
0001CE24 0240 001E                  		andi.w	#$1E,d0
0001CE28 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CE2E 3033 0000                  		move.w	(a3,d0.w),d0
0001CE32 47F3 0000                  		lea	(a3,d0.w),a3
0001CE36 224C                       		movea.l	a4,a1
0001CE38 323C 001F                  		move.w	#$1F,d1
0001CE3C 4E93                       		jsr	(a3)
0001CE3E 5843                       		addq.w	#4,d3
0001CE40 51CA FFDE                  		dbf	d2,loc_1C188
0001CE44 4E75                       		rts	
0001CE46                            ; ===========================================================================
0001CE46                            
0001CE46                            loc_1C1AE:
0001CE46 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE4A 6A00 0000                  		bpl.w	locret_1C1EA
0001CE4E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CE54 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CE5A 7000                       		moveq	#0,d0
0001CE5C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CE60 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CE64 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CE6A C0FC 00C0                  		mulu.w	#$C0,d0
0001CE6E D2C0                       		adda.w	d0,a1
0001CE70 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CE7A 323C 0005                  		move.w	#5,d1
0001CE7E 6000 0000                  		bra.w	LoadTiles
0001CE82                            ; ===========================================================================
0001CE82                            
0001CE82                            locret_1C1EA:
0001CE82 4E75                       		rts	
0001CE84                            ; ===========================================================================
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84                            ; Animated pattern routine - Scrap Brain
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84                            
0001CE84                            AniArt_SBZ:				; XREF: AniArt_Index
0001CE84 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CE88 6700                       		beq.s	loc_1C1F8
0001CE8A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CE8E 6000                       		bra.s	loc_1C250
0001CE90                            ; ===========================================================================
0001CE90                            
0001CE90                            loc_1C1F8:
0001CE90 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CE94 6A00                       		bpl.s	loc_1C250
0001CE96 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CE9C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CEA2 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CEAC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CEB0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CEB4 0240 0007                  		andi.w	#7,d0
0001CEB8 6700                       		beq.s	loc_1C234
0001CEBA 5340                       		subq.w	#1,d0
0001CEBC C0FC 0180                  		mulu.w	#$180,d0
0001CEC0 43F1 0000                  		lea	(a1,d0.w),a1
0001CEC4 323C 000B                  		move.w	#$B,d1
0001CEC8 6000 0000                  		bra.w	LoadTiles
0001CECC                            ; ===========================================================================
0001CECC                            
0001CECC                            loc_1C234:
0001CECC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CED2                            
0001CED2                            loc_1C23A:
0001CED2 323C 0005                  		move.w	#5,d1
0001CED6 6100 0000                  		bsr.w	LoadTiles
0001CEDA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CEE0 323C 0005                  		move.w	#5,d1
0001CEE4 6000 0000                  		bra.w	LoadTiles
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            loc_1C250:
0001CEE8 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CEEC 6700                       		beq.s	loc_1C25C
0001CEEE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEF2 6000                       		bra.s	locret_1C2A0
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            loc_1C25C:
0001CEF4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEF8 6A00                       		bpl.s	locret_1C2A0
0001CEFA 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CF00 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CF06 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CF10 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF14 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF18 0240 0007                  		andi.w	#7,d0
0001CF1C 6700                       		beq.s	loc_1C298
0001CF1E 5340                       		subq.w	#1,d0
0001CF20 C0FC 0180                  		mulu.w	#$180,d0
0001CF24 43F1 0000                  		lea	(a1,d0.w),a1
0001CF28 323C 000B                  		move.w	#$B,d1
0001CF2C 6000 0000                  		bra.w	LoadTiles
0001CF30                            ; ===========================================================================
0001CF30                            
0001CF30                            loc_1C298:
0001CF30 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CF36 609A                       		bra.s	loc_1C23A
0001CF38                            ; ===========================================================================
0001CF38                            
0001CF38                            locret_1C2A0:
0001CF38 4E75                       		rts	
0001CF3A                            ; ===========================================================================
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            ; Animated pattern routine - ending sequence
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            
0001CF3A                            AniArt_Ending:				; XREF: AniArt_Index
0001CF3A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CF3E 6A00                       		bpl.s	loc_1C2F4
0001CF40 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CF46 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CF4C 45F8 9400                  		lea	($FFFF9400).w,a2
0001CF50 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF54 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF58 0240 0001                  		andi.w	#1,d0
0001CF5C 6700                       		beq.s	loc_1C2CE
0001CF5E 43E9 0200                  		lea	$200(a1),a1
0001CF62 45EA 0200                  		lea	$200(a2),a2
0001CF66                            
0001CF66                            loc_1C2CE:
0001CF66 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CF70 323C 000F                  		move.w	#$F,d1
0001CF74 6100 0000                  		bsr.w	LoadTiles
0001CF78 224A                       		movea.l	a2,a1
0001CF7A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CF84 323C 000F                  		move.w	#$F,d1
0001CF88 6000 0000                  		bra.w	LoadTiles
0001CF8C                            ; ===========================================================================
0001CF8C                            
0001CF8C                            loc_1C2F4:
0001CF8C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF90 6A00                       		bpl.s	loc_1C33C
0001CF92 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF98 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF9C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CFA0 0240 0007                  		andi.w	#7,d0
0001CFA4 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CFA8 EF48                       		lsl.w	#7,d0
0001CFAA 3200                       		move.w	d0,d1
0001CFAC D040                       		add.w	d0,d0
0001CFAE D041                       		add.w	d1,d0
0001CFB0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CFBA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CFC0 43F1 0000                  		lea	(a1,d0.w),a1
0001CFC4 323C 000B                  		move.w	#$B,d1
0001CFC8 6000 0000                  		bra.w	LoadTiles
0001CFCC                            ; ===========================================================================
0001CFCC 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CFD4                            ; ===========================================================================
0001CFD4                            
0001CFD4                            loc_1C33C:
0001CFD4 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CFD8 6A00                       		bpl.s	loc_1C37A
0001CFDA 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CFE0 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CFE4 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CFE8 0240 0003                  		andi.w	#3,d0
0001CFEC 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CFF0 E148                       		lsl.w	#8,d0
0001CFF2 D040                       		add.w	d0,d0
0001CFF4 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CFFE 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D002 43F1 0000                  		lea	(a1,d0.w),a1
0001D006 323C 000F                  		move.w	#$F,d1
0001D00A 6000 0000                  		bra.w	LoadTiles
0001D00E                            ; ===========================================================================
0001D00E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            loc_1C37A:
0001D012 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D016 6A00                       		bpl.s	locret_1C3B4
0001D018 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D01E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D022 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D026 0240 0003                  		andi.w	#3,d0
0001D02A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D02E E148                       		lsl.w	#8,d0
0001D030 D040                       		add.w	d0,d0
0001D032 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D03C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D040 43F1 0000                  		lea	(a1,d0.w),a1
0001D044 323C 000F                  		move.w	#$F,d1
0001D048 6000 0000                  		bra.w	LoadTiles
0001D04C                            ; ===========================================================================
0001D04C                            
0001D04C                            locret_1C3B4:
0001D04C 4E75                       		rts	
0001D04E                            ; ===========================================================================
0001D04E                            
0001D04E                            AniArt_none:				; XREF: AniArt_Index
0001D04E 4E75                       		rts	
0001D050                            
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            
0001D050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D050                            
0001D050                            
0001D050                            LoadTiles:
0001D050 2C99                       		move.l	(a1)+,(a6)
0001D052 2C99                       		move.l	(a1)+,(a6)
0001D054 2C99                       		move.l	(a1)+,(a6)
0001D056 2C99                       		move.l	(a1)+,(a6)
0001D058 2C99                       		move.l	(a1)+,(a6)
0001D05A 2C99                       		move.l	(a1)+,(a6)
0001D05C 2C99                       		move.l	(a1)+,(a6)
0001D05E 2C99                       		move.l	(a1)+,(a6)
0001D060 51C9 FFEE                  		dbf	d1,LoadTiles
0001D064 4E75                       		rts	
0001D066                            ; End of function LoadTiles
0001D066                            
0001D066                            ; ===========================================================================
0001D066                            ; ---------------------------------------------------------------------------
0001D066                            ; Animated pattern routine - more Marble Zone
0001D066                            ; ---------------------------------------------------------------------------
0001D066 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D06A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D06E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D072 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D076 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D07A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D07E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D082 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D086                            ; ===========================================================================
0001D086                            
0001D086                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D086 2C91                       		move.l	(a1),(a6)
0001D088 43E9 0010                  		lea	$10(a1),a1
0001D08C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D090 4E75                       		rts	
0001D092                            ; ===========================================================================
0001D092                            
0001D092                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D092 2029 0002                  		move.l	2(a1),d0
0001D096 1029 0001                  		move.b	1(a1),d0
0001D09A E098                       		ror.l	#8,d0
0001D09C 2C80                       		move.l	d0,(a6)
0001D09E 43E9 0010                  		lea	$10(a1),a1
0001D0A2 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D0A6 4E75                       		rts	
0001D0A8                            ; ===========================================================================
0001D0A8                            
0001D0A8                            loc_1C410:				; XREF: AniArt_MZextra
0001D0A8 2CA9 0002                  		move.l	2(a1),(a6)
0001D0AC 43E9 0010                  		lea	$10(a1),a1
0001D0B0 51C9 FFF6                  		dbf	d1,loc_1C410
0001D0B4 4E75                       		rts	
0001D0B6                            ; ===========================================================================
0001D0B6                            
0001D0B6                            loc_1C41E:				; XREF: AniArt_MZextra
0001D0B6 2029 0004                  		move.l	4(a1),d0
0001D0BA 1029 0003                  		move.b	3(a1),d0
0001D0BE E098                       		ror.l	#8,d0
0001D0C0 2C80                       		move.l	d0,(a6)
0001D0C2 43E9 0010                  		lea	$10(a1),a1
0001D0C6 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D0CA 4E75                       		rts	
0001D0CC                            ; ===========================================================================
0001D0CC                            
0001D0CC                            loc_1C434:				; XREF: AniArt_MZextra
0001D0CC 2CA9 0004                  		move.l	4(a1),(a6)
0001D0D0 43E9 0010                  		lea	$10(a1),a1
0001D0D4 51C9 FFF6                  		dbf	d1,loc_1C434
0001D0D8 4E75                       		rts	
0001D0DA                            ; ===========================================================================
0001D0DA                            
0001D0DA                            loc_1C442:				; XREF: AniArt_MZextra
0001D0DA 2029 0006                  		move.l	6(a1),d0
0001D0DE 1029 0005                  		move.b	5(a1),d0
0001D0E2 E098                       		ror.l	#8,d0
0001D0E4 2C80                       		move.l	d0,(a6)
0001D0E6 43E9 0010                  		lea	$10(a1),a1
0001D0EA 51C9 FFEE                  		dbf	d1,loc_1C442
0001D0EE 4E75                       		rts	
0001D0F0                            ; ===========================================================================
0001D0F0                            
0001D0F0                            loc_1C458:				; XREF: AniArt_MZextra
0001D0F0 2CA9 0006                  		move.l	6(a1),(a6)
0001D0F4 43E9 0010                  		lea	$10(a1),a1
0001D0F8 51C9 FFF6                  		dbf	d1,loc_1C458
0001D0FC 4E75                       		rts	
0001D0FE                            ; ===========================================================================
0001D0FE                            
0001D0FE                            loc_1C466:				; XREF: AniArt_MZextra
0001D0FE 2029 0008                  		move.l	8(a1),d0
0001D102 1029 0007                  		move.b	7(a1),d0
0001D106 E098                       		ror.l	#8,d0
0001D108 2C80                       		move.l	d0,(a6)
0001D10A 43E9 0010                  		lea	$10(a1),a1
0001D10E 51C9 FFEE                  		dbf	d1,loc_1C466
0001D112 4E75                       		rts	
0001D114                            ; ===========================================================================
0001D114                            
0001D114                            loc_1C47C:				; XREF: AniArt_MZextra
0001D114 2CA9 0008                  		move.l	8(a1),(a6)
0001D118 43E9 0010                  		lea	$10(a1),a1
0001D11C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D120 4E75                       		rts	
0001D122                            ; ===========================================================================
0001D122                            
0001D122                            loc_1C48A:				; XREF: AniArt_MZextra
0001D122 2029 000A                  		move.l	$A(a1),d0
0001D126 1029 0009                  		move.b	9(a1),d0
0001D12A E098                       		ror.l	#8,d0
0001D12C 2C80                       		move.l	d0,(a6)
0001D12E 43E9 0010                  		lea	$10(a1),a1
0001D132 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D136 4E75                       		rts	
0001D138                            ; ===========================================================================
0001D138                            
0001D138                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D138 2CA9 000A                  		move.l	$A(a1),(a6)
0001D13C 43E9 0010                  		lea	$10(a1),a1
0001D140 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D144 4E75                       		rts	
0001D146                            ; ===========================================================================
0001D146                            
0001D146                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D146 2029 000C                  		move.l	$C(a1),d0
0001D14A 1029 000B                  		move.b	$B(a1),d0
0001D14E E098                       		ror.l	#8,d0
0001D150 2C80                       		move.l	d0,(a6)
0001D152 43E9 0010                  		lea	$10(a1),a1
0001D156 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D15A 4E75                       		rts	
0001D15C                            ; ===========================================================================
0001D15C                            
0001D15C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D15C 2CA9 000C                  		move.l	$C(a1),(a6)
0001D160 43E9 0010                  		lea	$10(a1),a1
0001D164 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D168 4E75                       		rts	
0001D16A                            ; ===========================================================================
0001D16A                            
0001D16A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D16A 2029 000C                  		move.l	$C(a1),d0
0001D16E E198                       		rol.l	#8,d0
0001D170 1011                       		move.b	0(a1),d0
0001D172 2C80                       		move.l	d0,(a6)
0001D174 43E9 0010                  		lea	$10(a1),a1
0001D178 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D17C 4E75                       		rts	
0001D17E                            ; ===========================================================================
0001D17E                            
0001D17E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D17E 3CA9 000E                  		move.w	$E(a1),(a6)
0001D182 3C91                       		move.w	0(a1),(a6)
0001D184 43E9 0010                  		lea	$10(a1),a1
0001D188 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D18C 4E75                       		rts	
0001D18E                            ; ===========================================================================
0001D18E                            
0001D18E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D18E 2011                       		move.l	0(a1),d0
0001D190 1029 000F                  		move.b	$F(a1),d0
0001D194 E098                       		ror.l	#8,d0
0001D196 2C80                       		move.l	d0,(a6)
0001D198 43E9 0010                  		lea	$10(a1),a1
0001D19C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D1A0 4E75                       		rts	
0001D1A2                            
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            ; Animated pattern routine - giant ring
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            
0001D1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A2                            
0001D1A2                            
0001D1A2                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D1A2 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D1A6 6600                       		bne.s	loc_1C518
0001D1A8 4E75                       		rts	
0001D1AA                            ; ===========================================================================
0001D1AA                            
0001D1AA                            loc_1C518:
0001D1AA 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D1B0 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D1B6 7000                       		moveq	#0,d0
0001D1B8 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D1BC 43F1 0000                  		lea	(a1,d0.w),a1
0001D1C0 0640 8000                  		addi.w	#$8000,d0
0001D1C4 E588                       		lsl.l	#2,d0
0001D1C6 E448                       		lsr.w	#2,d0
0001D1C8 0040 4000                  		ori.w	#$4000,d0
0001D1CC 4840                       		swap	d0
0001D1CE 2D40 0004                  		move.l	d0,4(a6)
0001D1D2 323C 000D                  		move.w	#$D,d1
0001D1D6 6000 FE78                  		bra.w	LoadTiles
0001D1DA                            ; End of function AniArt_GiantRing
0001D1DA                            
0001D1DA                            ; ===========================================================================
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            ; Object 21 - SCORE, TIME, RINGS
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            
0001D1DA                            Obj21:					; XREF: Obj_Index
0001D1DA 7000                       		moveq	#0,d0
0001D1DC 1028 0024                  		move.b	$24(a0),d0
0001D1E0 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D1E4 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D1E8                            ; ===========================================================================
0001D1E8 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D1EA 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D1EC                            ; ===========================================================================
0001D1EC                            
0001D1EC                            Obj21_Main:				; XREF: Obj21_Main
0001D1EC 5428 0024                  		addq.b	#2,$24(a0)
0001D1F0 317C 0090 0008             		move.w	#$90,8(a0)
0001D1F6 317C 0108 000A             		move.w	#$108,$A(a0)
0001D1FC 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D204 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D20A 117C 0000 0001             		move.b	#0,1(a0)
0001D210 117C 0000 0018             		move.b	#0,$18(a0)
0001D216                            
0001D216                            Obj21_Flash:				; XREF: Obj21_Main
0001D216 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D21A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D21C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D220 4EF9 0000 E052             		jmp	DisplaySprite
0001D226                            ; ===========================================================================
0001D226                            
0001D226                            Obj21_Flash2:
0001D226 7000                       		moveq	#0,d0
0001D228 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D22E 6600                       		bne.s	Obj21_Display
0001D230 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D232 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D238 6600                       		bne.s	Obj21_Display	; if not, branch
0001D23A 5440                       		addq.w	#2,d0		; make time counter flash red
0001D23C                            
0001D23C                            Obj21_Display:
0001D23C 1140 001A                  		move.b	d0,$1A(a0)
0001D240 4EF9 0000 E052             		jmp	DisplaySprite
0001D246                            ; ===========================================================================
0001D246                            ; ---------------------------------------------------------------------------
0001D246                            ; Sprite mappings - SCORE, TIME, RINGS
0001D246                            ; ---------------------------------------------------------------------------
0001D246                            Map_obj21:
0001D246                            	include "_maps\obj21.asm"
0001D246                            Map_549d:
0001D246 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D248 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D24A 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D24C 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D24E 09                         Map_549d_8: 	dc.b $9
0001D24F 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D254 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D259 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D25E 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D263 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D268 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D26D 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D272 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D277 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D27C 09                         Map_549d_36: 	dc.b $9
0001D27D 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D282 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D287 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D28C 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D291 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D296 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D29B 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D2A0 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D2A5 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D2AA 09                         Map_549d_64: 	dc.b $9
0001D2AB 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D2B0 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D2B5 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D2BA 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D2BF A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D2C4 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D2C9 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D2CE 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D2D3 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D2D8 09                         Map_549d_92: 	dc.b $9
0001D2D9 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D2DE 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D2E3 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D2E8 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D2ED A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D2F2 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D2F7 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D2FC 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D301 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D306                            	even
0001D306                            	even
0001D306                            
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            ; Add points subroutine
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            
0001D306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D306                            
0001D306                            
0001D306                            AddPoints:
0001D306 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D30C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D310 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D314 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D316 223C 000F 423F             		move.l	#999999,d1
0001D31C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D31E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D322 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D324 2481                       		move.l	d1,(a2)
0001D326                            
0001D326                            loc_1C6AC:
0001D326 2013                       		move.l	(a3),d0
0001D328 B092                       		cmp.l	(a2),d0
0001D32A 6500 0000                  		bcs.w	locret_1C6B6
0001D32E 2480                       		move.l	d0,(a2)
0001D330                            
0001D330                            locret_1C6B6:
0001D330 4E75                       		rts	
0001D332                            ; End of function AddPoints
0001D332                            
0001D332                            ; ---------------------------------------------------------------------------
0001D332                            ; Subroutine to	update the HUD
0001D332                            ; ---------------------------------------------------------------------------
0001D332                            
0001D332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D332                            
0001D332                            
0001D332                            HudUpdate:
0001D332 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D336 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D33A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D33E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D340 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D344 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D34A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D34E 6100 0000                  		bsr.w	Hud_Score
0001D352                            
0001D352                            Hud_ChkRings:
0001D352 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D356 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D358 6A00                       		bpl.s	loc_1C6E4
0001D35A 6100 0000                  		bsr.w	Hud_LoadZero
0001D35E                            
0001D35E                            loc_1C6E4:
0001D35E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D362 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D368 7200                       		moveq	#0,d1
0001D36A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D36E 6100 0000                  		bsr.w	Hud_Rings
0001D372                            
0001D372                            Hud_ChkTime:
0001D372 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D376 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D378 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D37C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D37E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D382 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D388 6700                       		beq.s	TimeOver	; if yes, branch
0001D38A 5221                       		addq.b	#1,-(a1)
0001D38C 0C11 003C                  		cmpi.b	#60,(a1)
0001D390 6500                       		bcs.s	Hud_ChkLives
0001D392 12BC 0000                  		move.b	#0,(a1)
0001D396 5221                       		addq.b	#1,-(a1)
0001D398 0C11 003C                  		cmpi.b	#60,(a1)
0001D39C 6500                       		bcs.s	loc_1C734
0001D39E 12BC 0000                  		move.b	#0,(a1)
0001D3A2 5221                       		addq.b	#1,-(a1)
0001D3A4 0C11 0009                  		cmpi.b	#9,(a1)
0001D3A8 6500                       		bcs.s	loc_1C734
0001D3AA 12BC 0009                  		move.b	#9,(a1)
0001D3AE                            
0001D3AE                            loc_1C734:
0001D3AE 203C 5E40 0003             		move.l	#$5E400003,d0
0001D3B4 7200                       		moveq	#0,d1
0001D3B6 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D3BA 6100 0000                  		bsr.w	Hud_Mins
0001D3BE 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D3C4 7200                       		moveq	#0,d1
0001D3C6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D3CA 6100 0000                  		bsr.w	Hud_Secs
0001D3CE                            
0001D3CE                            Hud_ChkLives:
0001D3CE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D3D2 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D3D4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D3D8 6100 0000                  		bsr.w	Hud_Lives
0001D3DC                            
0001D3DC                            Hud_ChkBonus:
0001D3DC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D3E0 6700                       		beq.s	Hud_End		; if not, branch
0001D3E2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3E6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D3F0 7200                       		moveq	#0,d1
0001D3F2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3F6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3FA 7200                       		moveq	#0,d1
0001D3FC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D400 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D404                            
0001D404                            Hud_End:
0001D404 4E75                       		rts	
0001D406                            ; ===========================================================================
0001D406                            
0001D406                            TimeOver:				; XREF: Hud_ChkTime
0001D406 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D40A 41F8 D000                  		lea	($FFFFD000).w,a0
0001D40E 2448                       		movea.l	a0,a2
0001D410 6100 E968                  		bsr.w	KillSonic
0001D414 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D41A 4E75                       		rts	
0001D41C                            ; ===========================================================================
0001D41C                            
0001D41C                            HudDebug:				; XREF: HudUpdate
0001D41C 6100 0000                  		bsr.w	HudDb_XY
0001D420 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D424 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D426 6A00                       		bpl.s	HudDb_Rings
0001D428 6100 0000                  		bsr.w	Hud_LoadZero
0001D42C                            
0001D42C                            HudDb_Rings:
0001D42C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D430 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D436 7200                       		moveq	#0,d1
0001D438 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D43C 6100 0000                  		bsr.w	Hud_Rings
0001D440                            
0001D440                            HudDb_ObjCount:
0001D440 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D446 7200                       		moveq	#0,d1
0001D448 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D44C 6100 0000                  		bsr.w	Hud_Secs
0001D450 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D454 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D456 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D45A 6100 0000                  		bsr.w	Hud_Lives
0001D45E                            
0001D45E                            HudDb_ChkBonus:
0001D45E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D462 6700                       		beq.s	HudDb_End	; if not, branch
0001D464 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D468 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D472 7200                       		moveq	#0,d1
0001D474 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D478 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D47C 7200                       		moveq	#0,d1
0001D47E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D482 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D486                            
0001D486                            HudDb_End:
0001D486 4E75                       		rts	
0001D488                            ; End of function HudUpdate
0001D488                            
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            ; Subroutine to	load "0" on the	HUD
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            
0001D488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D488                            
0001D488                            
0001D488                            Hud_LoadZero:				; XREF: HudUpdate
0001D488 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D492 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D496 343C 0002                  		move.w	#2,d2
0001D49A 6000                       		bra.s	loc_1C83E
0001D49C                            ; End of function Hud_LoadZero
0001D49C                            
0001D49C                            ; ---------------------------------------------------------------------------
0001D49C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D49C                            ; ---------------------------------------------------------------------------
0001D49C                            
0001D49C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D49C                            
0001D49C                            
0001D49C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D49C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D4A2 6100 0000                  		bsr.w	Hud_Lives
0001D4A6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D4B0 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D4B4 343C 000E                  		move.w	#$E,d2
0001D4B8                            
0001D4B8                            loc_1C83E:				; XREF: Hud_LoadZero
0001D4B8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4BC                            
0001D4BC                            loc_1C842:
0001D4BC 323C 000F                  		move.w	#$F,d1
0001D4C0 101A                       		move.b	(a2)+,d0
0001D4C2 6B00                       		bmi.s	loc_1C85E
0001D4C4 4880                       		ext.w	d0
0001D4C6 EB48                       		lsl.w	#5,d0
0001D4C8 47F1 0000                  		lea	(a1,d0.w),a3
0001D4CC                            
0001D4CC                            loc_1C852:
0001D4CC 2C9B                       		move.l	(a3)+,(a6)
0001D4CE 51C9 FFFC                  		dbf	d1,loc_1C852
0001D4D2                            
0001D4D2                            loc_1C858:
0001D4D2 51CA FFE8                  		dbf	d2,loc_1C842
0001D4D6                            
0001D4D6 4E75                       		rts	
0001D4D8                            ; ===========================================================================
0001D4D8                            
0001D4D8                            loc_1C85E:
0001D4D8 2CBC 0000 0000             		move.l	#0,(a6)
0001D4DE 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D4E2                            
0001D4E2 60EE                       		bra.s	loc_1C858
0001D4E4                            ; End of function Hud_Base
0001D4E4                            
0001D4E4                            ; ===========================================================================
0001D4E4 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D4F0 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D4F4                            ; ---------------------------------------------------------------------------
0001D4F4                            ; Subroutine to	load debug mode	numbers	patterns
0001D4F4                            ; ---------------------------------------------------------------------------
0001D4F4                            
0001D4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4F4                            
0001D4F4                            
0001D4F4                            HudDb_XY:				; XREF: HudDebug
0001D4F4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D4FE 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D502 4841                       		swap	d1
0001D504 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D508 6100                       		bsr.s	HudDb_XY2
0001D50A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D50E 4841                       		swap	d1
0001D510 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D514                            ; End of function HudDb_XY
0001D514                            
0001D514                            
0001D514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D514                            
0001D514                            
0001D514                            HudDb_XY2:
0001D514 7C07                       		moveq	#7,d6
0001D516 43F9 0000 05E8             		lea	(Art_Text).l,a1
0001D51C                            
0001D51C                            HudDb_XYLoop:
0001D51C E959                       		rol.w	#4,d1
0001D51E 3401                       		move.w	d1,d2
0001D520 0242 000F                  		andi.w	#$F,d2
0001D524 0C42 000A                  		cmpi.w	#$A,d2
0001D528 6500                       		bcs.s	loc_1C8B2
0001D52A 5E42                       		addq.w	#7,d2
0001D52C                            
0001D52C                            loc_1C8B2:
0001D52C EB4A                       		lsl.w	#5,d2
0001D52E 47F1 2000                  		lea	(a1,d2.w),a3
0001D532 2C9B                       		move.l	(a3)+,(a6)
0001D534 2C9B                       		move.l	(a3)+,(a6)
0001D536 2C9B                       		move.l	(a3)+,(a6)
0001D538 2C9B                       		move.l	(a3)+,(a6)
0001D53A 2C9B                       		move.l	(a3)+,(a6)
0001D53C 2C9B                       		move.l	(a3)+,(a6)
0001D53E 2C9B                       		move.l	(a3)+,(a6)
0001D540 2C9B                       		move.l	(a3)+,(a6)
0001D542 4841                       		swap	d1
0001D544 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D548                            
0001D548 4E75                       		rts	
0001D54A                            ; End of function HudDb_XY2
0001D54A                            
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A                            ; Subroutine to	load rings numbers patterns
0001D54A                            ; ---------------------------------------------------------------------------
0001D54A                            
0001D54A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D54A                            
0001D54A                            
0001D54A                            Hud_Rings:				; XREF: HudUpdate
0001D54A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D550 7C02                       		moveq	#2,d6
0001D552 6000                       		bra.s	Hud_LoadArt
0001D554                            ; End of function Hud_Rings
0001D554                            
0001D554                            ; ---------------------------------------------------------------------------
0001D554                            ; Subroutine to	load score numbers patterns
0001D554                            ; ---------------------------------------------------------------------------
0001D554                            
0001D554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D554                            
0001D554                            
0001D554                            Hud_Score:				; XREF: HudUpdate
0001D554 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D55A 7C05                       		moveq	#5,d6
0001D55C                            
0001D55C                            Hud_LoadArt:
0001D55C 7800                       		moveq	#0,d4
0001D55E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D562                            
0001D562                            Hud_ScoreLoop:
0001D562 7400                       		moveq	#0,d2
0001D564 261A                       		move.l	(a2)+,d3
0001D566                            
0001D566                            loc_1C8EC:
0001D566 9283                       		sub.l	d3,d1
0001D568 6500                       		bcs.s	loc_1C8F4
0001D56A 5242                       		addq.w	#1,d2
0001D56C 60F8                       		bra.s	loc_1C8EC
0001D56E                            ; ===========================================================================
0001D56E                            
0001D56E                            loc_1C8F4:
0001D56E D283                       		add.l	d3,d1
0001D570 4A42                       		tst.w	d2
0001D572 6700                       		beq.s	loc_1C8FE
0001D574 383C 0001                  		move.w	#1,d4
0001D578                            
0001D578                            loc_1C8FE:
0001D578 4A44                       		tst.w	d4
0001D57A 6700                       		beq.s	loc_1C92C
0001D57C ED4A                       		lsl.w	#6,d2
0001D57E 2D40 0004                  		move.l	d0,4(a6)
0001D582 47F1 2000                  		lea	(a1,d2.w),a3
0001D586 2C9B                       		move.l	(a3)+,(a6)
0001D588 2C9B                       		move.l	(a3)+,(a6)
0001D58A 2C9B                       		move.l	(a3)+,(a6)
0001D58C 2C9B                       		move.l	(a3)+,(a6)
0001D58E 2C9B                       		move.l	(a3)+,(a6)
0001D590 2C9B                       		move.l	(a3)+,(a6)
0001D592 2C9B                       		move.l	(a3)+,(a6)
0001D594 2C9B                       		move.l	(a3)+,(a6)
0001D596 2C9B                       		move.l	(a3)+,(a6)
0001D598 2C9B                       		move.l	(a3)+,(a6)
0001D59A 2C9B                       		move.l	(a3)+,(a6)
0001D59C 2C9B                       		move.l	(a3)+,(a6)
0001D59E 2C9B                       		move.l	(a3)+,(a6)
0001D5A0 2C9B                       		move.l	(a3)+,(a6)
0001D5A2 2C9B                       		move.l	(a3)+,(a6)
0001D5A4 2C9B                       		move.l	(a3)+,(a6)
0001D5A6                            
0001D5A6                            loc_1C92C:
0001D5A6 0680 0040 0000             		addi.l	#$400000,d0
0001D5AC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D5B0                            
0001D5B0 4E75                       		rts	
0001D5B2                            ; End of function Hud_Score
0001D5B2                            
0001D5B2                            ; ---------------------------------------------------------------------------
0001D5B2                            ; Subroutine to	load countdown numbers on the continue screen
0001D5B2                            ; ---------------------------------------------------------------------------
0001D5B2                            
0001D5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5B2                            
0001D5B2                            
0001D5B2                            ContScrCounter:				; XREF: ContinueScreen
0001D5B2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D5BC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D5C2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D5C8 7C01                       		moveq	#1,d6
0001D5CA 7800                       		moveq	#0,d4
0001D5CC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D5D0                            
0001D5D0                            ContScr_Loop:
0001D5D0 7400                       		moveq	#0,d2
0001D5D2 261A                       		move.l	(a2)+,d3
0001D5D4                            
0001D5D4                            loc_1C95A:
0001D5D4 9283                       		sub.l	d3,d1
0001D5D6 6500                       		bcs.s	loc_1C962
0001D5D8 5242                       		addq.w	#1,d2
0001D5DA 60F8                       		bra.s	loc_1C95A
0001D5DC                            ; ===========================================================================
0001D5DC                            
0001D5DC                            loc_1C962:
0001D5DC D283                       		add.l	d3,d1
0001D5DE ED4A                       		lsl.w	#6,d2
0001D5E0 47F1 2000                  		lea	(a1,d2.w),a3
0001D5E4 2C9B                       		move.l	(a3)+,(a6)
0001D5E6 2C9B                       		move.l	(a3)+,(a6)
0001D5E8 2C9B                       		move.l	(a3)+,(a6)
0001D5EA 2C9B                       		move.l	(a3)+,(a6)
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 2C9B                       		move.l	(a3)+,(a6)
0001D5F6 2C9B                       		move.l	(a3)+,(a6)
0001D5F8 2C9B                       		move.l	(a3)+,(a6)
0001D5FA 2C9B                       		move.l	(a3)+,(a6)
0001D5FC 2C9B                       		move.l	(a3)+,(a6)
0001D5FE 2C9B                       		move.l	(a3)+,(a6)
0001D600 2C9B                       		move.l	(a3)+,(a6)
0001D602 2C9B                       		move.l	(a3)+,(a6)
0001D604 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D608                            
0001D608 4E75                       		rts	
0001D60A                            ; End of function ContScrCounter
0001D60A                            
0001D60A                            ; ===========================================================================
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A                            ; HUD counter sizes
0001D60A                            ; ---------------------------------------------------------------------------
0001D60A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D60E 0000 2710                  Hud_10000:	dc.l 10000
0001D612 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D616 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D61A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D61E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D622                            
0001D622                            ; ---------------------------------------------------------------------------
0001D622                            ; Subroutine to	load time numbers patterns
0001D622                            ; ---------------------------------------------------------------------------
0001D622                            
0001D622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D622                            
0001D622                            
0001D622                            Hud_Mins:				; XREF: Hud_ChkTime
0001D622 45F9 0001 D61E             		lea	(Hud_1).l,a2
0001D628 7C00                       		moveq	#0,d6
0001D62A 6000                       		bra.s	loc_1C9BA
0001D62C                            ; End of function Hud_Mins
0001D62C                            
0001D62C                            
0001D62C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D62C                            
0001D62C                            
0001D62C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D62C 45F9 0001 D61A             		lea	(Hud_10).l,a2
0001D632 7C01                       		moveq	#1,d6
0001D634                            
0001D634                            loc_1C9BA:
0001D634 7800                       		moveq	#0,d4
0001D636 43FA 0000                  		lea	Art_Hud(pc),a1
0001D63A                            
0001D63A                            Hud_TimeLoop:
0001D63A 7400                       		moveq	#0,d2
0001D63C 261A                       		move.l	(a2)+,d3
0001D63E                            
0001D63E                            loc_1C9C4:
0001D63E 9283                       		sub.l	d3,d1
0001D640 6500                       		bcs.s	loc_1C9CC
0001D642 5242                       		addq.w	#1,d2
0001D644 60F8                       		bra.s	loc_1C9C4
0001D646                            ; ===========================================================================
0001D646                            
0001D646                            loc_1C9CC:
0001D646 D283                       		add.l	d3,d1
0001D648 4A42                       		tst.w	d2
0001D64A 6700                       		beq.s	loc_1C9D6
0001D64C 383C 0001                  		move.w	#1,d4
0001D650                            
0001D650                            loc_1C9D6:
0001D650 ED4A                       		lsl.w	#6,d2
0001D652 2D40 0004                  		move.l	d0,4(a6)
0001D656 47F1 2000                  		lea	(a1,d2.w),a3
0001D65A 2C9B                       		move.l	(a3)+,(a6)
0001D65C 2C9B                       		move.l	(a3)+,(a6)
0001D65E 2C9B                       		move.l	(a3)+,(a6)
0001D660 2C9B                       		move.l	(a3)+,(a6)
0001D662 2C9B                       		move.l	(a3)+,(a6)
0001D664 2C9B                       		move.l	(a3)+,(a6)
0001D666 2C9B                       		move.l	(a3)+,(a6)
0001D668 2C9B                       		move.l	(a3)+,(a6)
0001D66A 2C9B                       		move.l	(a3)+,(a6)
0001D66C 2C9B                       		move.l	(a3)+,(a6)
0001D66E 2C9B                       		move.l	(a3)+,(a6)
0001D670 2C9B                       		move.l	(a3)+,(a6)
0001D672 2C9B                       		move.l	(a3)+,(a6)
0001D674 2C9B                       		move.l	(a3)+,(a6)
0001D676 2C9B                       		move.l	(a3)+,(a6)
0001D678 2C9B                       		move.l	(a3)+,(a6)
0001D67A 0680 0040 0000             		addi.l	#$400000,d0
0001D680 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D684                            
0001D684 4E75                       		rts	
0001D686                            ; End of function Hud_Secs
0001D686                            
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            ; Subroutine to	load time/ring bonus numbers patterns
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            
0001D686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D686                            
0001D686                            
0001D686                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D686 45F9 0001 D612             		lea	(Hud_1000).l,a2
0001D68C 7C03                       		moveq	#3,d6
0001D68E 7800                       		moveq	#0,d4
0001D690 43FA 0000                  		lea	Art_Hud(pc),a1
0001D694                            
0001D694                            Hud_BonusLoop:
0001D694 7400                       		moveq	#0,d2
0001D696 261A                       		move.l	(a2)+,d3
0001D698                            
0001D698                            loc_1CA1E:
0001D698 9283                       		sub.l	d3,d1
0001D69A 6500                       		bcs.s	loc_1CA26
0001D69C 5242                       		addq.w	#1,d2
0001D69E 60F8                       		bra.s	loc_1CA1E
0001D6A0                            ; ===========================================================================
0001D6A0                            
0001D6A0                            loc_1CA26:
0001D6A0 D283                       		add.l	d3,d1
0001D6A2 4A42                       		tst.w	d2
0001D6A4 6700                       		beq.s	loc_1CA30
0001D6A6 383C 0001                  		move.w	#1,d4
0001D6AA                            
0001D6AA                            loc_1CA30:
0001D6AA 4A44                       		tst.w	d4
0001D6AC 6700                       		beq.s	Hud_ClrBonus
0001D6AE ED4A                       		lsl.w	#6,d2
0001D6B0 47F1 2000                  		lea	(a1,d2.w),a3
0001D6B4 2C9B                       		move.l	(a3)+,(a6)
0001D6B6 2C9B                       		move.l	(a3)+,(a6)
0001D6B8 2C9B                       		move.l	(a3)+,(a6)
0001D6BA 2C9B                       		move.l	(a3)+,(a6)
0001D6BC 2C9B                       		move.l	(a3)+,(a6)
0001D6BE 2C9B                       		move.l	(a3)+,(a6)
0001D6C0 2C9B                       		move.l	(a3)+,(a6)
0001D6C2 2C9B                       		move.l	(a3)+,(a6)
0001D6C4 2C9B                       		move.l	(a3)+,(a6)
0001D6C6 2C9B                       		move.l	(a3)+,(a6)
0001D6C8 2C9B                       		move.l	(a3)+,(a6)
0001D6CA 2C9B                       		move.l	(a3)+,(a6)
0001D6CC 2C9B                       		move.l	(a3)+,(a6)
0001D6CE 2C9B                       		move.l	(a3)+,(a6)
0001D6D0 2C9B                       		move.l	(a3)+,(a6)
0001D6D2 2C9B                       		move.l	(a3)+,(a6)
0001D6D4                            
0001D6D4                            loc_1CA5A:
0001D6D4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D6D8                            
0001D6D8 4E75                       		rts	
0001D6DA                            ; ===========================================================================
0001D6DA                            
0001D6DA                            Hud_ClrBonus:
0001D6DA 7A0F                       		moveq	#$F,d5
0001D6DC                            
0001D6DC                            Hud_ClrBonusLoop:
0001D6DC 2CBC 0000 0000             		move.l	#0,(a6)
0001D6E2 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D6E6                            
0001D6E6 60EC                       		bra.s	loc_1CA5A
0001D6E8                            ; End of function Hud_TimeRingBonus
0001D6E8                            
0001D6E8                            ; ---------------------------------------------------------------------------
0001D6E8                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D6E8                            ; ---------------------------------------------------------------------------
0001D6E8                            
0001D6E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6E8                            
0001D6E8                            
0001D6E8                            Hud_Lives:				; XREF: Hud_ChkLives
0001D6E8 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D6EE 7200                       		moveq	#0,d1
0001D6F0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D6F4 45F9 0001 D61A             		lea	(Hud_10).l,a2
0001D6FA 7C01                       		moveq	#1,d6
0001D6FC 7800                       		moveq	#0,d4
0001D6FE 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D702                            
0001D702                            Hud_LivesLoop:
0001D702 2D40 0004                  		move.l	d0,4(a6)
0001D706 7400                       		moveq	#0,d2
0001D708 261A                       		move.l	(a2)+,d3
0001D70A                            
0001D70A                            loc_1CA90:
0001D70A 9283                       		sub.l	d3,d1
0001D70C 6500                       		bcs.s	loc_1CA98
0001D70E 5242                       		addq.w	#1,d2
0001D710 60F8                       		bra.s	loc_1CA90
0001D712                            ; ===========================================================================
0001D712                            
0001D712                            loc_1CA98:
0001D712 D283                       		add.l	d3,d1
0001D714 4A42                       		tst.w	d2
0001D716 6700                       		beq.s	loc_1CAA2
0001D718 383C 0001                  		move.w	#1,d4
0001D71C                            
0001D71C                            loc_1CAA2:
0001D71C 4A44                       		tst.w	d4
0001D71E 6700                       		beq.s	Hud_ClrLives
0001D720                            
0001D720                            loc_1CAA6:
0001D720 EB4A                       		lsl.w	#5,d2
0001D722 47F1 2000                  		lea	(a1,d2.w),a3
0001D726 2C9B                       		move.l	(a3)+,(a6)
0001D728 2C9B                       		move.l	(a3)+,(a6)
0001D72A 2C9B                       		move.l	(a3)+,(a6)
0001D72C 2C9B                       		move.l	(a3)+,(a6)
0001D72E 2C9B                       		move.l	(a3)+,(a6)
0001D730 2C9B                       		move.l	(a3)+,(a6)
0001D732 2C9B                       		move.l	(a3)+,(a6)
0001D734 2C9B                       		move.l	(a3)+,(a6)
0001D736                            
0001D736                            loc_1CABC:
0001D736 0680 0040 0000             		addi.l	#$400000,d0
0001D73C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D740                            
0001D740 4E75                       		rts	
0001D742                            ; ===========================================================================
0001D742                            
0001D742                            Hud_ClrLives:
0001D742 4A46                       		tst.w	d6
0001D744 67DA                       		beq.s	loc_1CAA6
0001D746 7A07                       		moveq	#7,d5
0001D748                            
0001D748                            Hud_ClrLivesLoop:
0001D748 2CBC 0000 0000             		move.l	#0,(a6)
0001D74E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D752 60E2                       		bra.s	loc_1CABC
0001D754                            ; End of function Hud_Lives
0001D754                            
0001D754                            ; ===========================================================================
0001D754                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DA54                            		even
0001DA54                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DB94                            		even
0001DB94                            ; ===========================================================================
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            ; When debug mode is currently in use
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            
0001DB94                            DebugMode:				; XREF: Obj01; Obj09
0001DB94 7000                       		moveq	#0,d0
0001DB96 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DB9A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DB9E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DBA2                            ; ===========================================================================
0001DBA2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DBA4 0000                       		dc.w Debug_Skip-Debug_Index
0001DBA6                            ; ===========================================================================
0001DBA6                            
0001DBA6                            Debug_Main:				; XREF: Debug_Index
0001DBA6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DBAA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DBB0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DBB6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DBBC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DBC2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DBC8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DBCE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DBD4 117C 0000 001A             		move.b	#0,$1A(a0)
0001DBDA 117C 0000 001C             		move.b	#0,$1C(a0)
0001DBE0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DBE6 6600                       		bne.s	Debug_Zone	; if not, branch
0001DBE8 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DBEE 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DBF4 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DBF6 6000                       		bra.s	Debug_UseList
0001DBF8                            ; ===========================================================================
0001DBF8                            
0001DBF8                            Debug_Zone:
0001DBF8 7000                       		moveq	#0,d0
0001DBFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DBFE                            
0001DBFE                            Debug_UseList:
0001DBFE 45F9 0000 0000             		lea	(DebugList).l,a2
0001DC04 D040                       		add.w	d0,d0
0001DC06 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DC0A 3C1A                       		move.w	(a2)+,d6
0001DC0C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC10 6200                       		bhi.s	loc_1CF9E
0001DC12 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DC18                            
0001DC18                            loc_1CF9E:
0001DC18 6100 0000                  		bsr.w	Debug_ShowItem
0001DC1C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DC22 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DC28                            
0001DC28                            Debug_Skip:				; XREF: Debug_Index
0001DC28 7006                       		moveq	#6,d0
0001DC2A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DC30 6700                       		beq.s	loc_1CFBE
0001DC32 7000                       		moveq	#0,d0
0001DC34 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DC38                            
0001DC38                            loc_1CFBE:
0001DC38 45F9 0000 0000             		lea	(DebugList).l,a2
0001DC3E D040                       		add.w	d0,d0
0001DC40 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DC44 3C1A                       		move.w	(a2)+,d6
0001DC46 6100 0000                  		bsr.w	Debug_Control
0001DC4A 4EF9 0000 E052             		jmp	DisplaySprite
0001DC50                            
0001DC50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC50                            
0001DC50                            
0001DC50                            Debug_Control:
0001DC50 7800                       		moveq	#0,d4
0001DC52 323C 0001                  		move.w	#1,d1
0001DC56 1838 F605                  		move.b	($FFFFF605).w,d4
0001DC5A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DC5E 6600                       		bne.s	loc_1D018	; if yes, branch
0001DC60 1038 F604                  		move.b	($FFFFF604).w,d0
0001DC64 0240 000F                  		andi.w	#$F,d0
0001DC68 6600                       		bne.s	loc_1D000
0001DC6A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DC70 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DC76 6000 0000                  		bra.w	Debug_BackItem
0001DC7A                            ; ===========================================================================
0001DC7A                            
0001DC7A                            loc_1D000:
0001DC7A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DC7E 6600                       		bne.s	loc_1D01C
0001DC80 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DC86 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DC8A 6600                       		bne.s	loc_1D018
0001DC8C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DC92                            
0001DC92                            loc_1D018:
0001DC92 1838 F604                  		move.b	($FFFFF604).w,d4
0001DC96                            
0001DC96                            loc_1D01C:
0001DC96 7200                       		moveq	#0,d1
0001DC98 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DC9C 5241                       		addq.w	#1,d1
0001DC9E 4841                       		swap	d1
0001DCA0 E881                       		asr.l	#4,d1
0001DCA2 2428 000C                  		move.l	$C(a0),d2
0001DCA6 2628 0008                  		move.l	8(a0),d3
0001DCAA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DCAE 6700                       		beq.s	loc_1D03C	; if not, branch
0001DCB0 9481                       		sub.l	d1,d2
0001DCB2 6400                       		bcc.s	loc_1D03C
0001DCB4 7400                       		moveq	#0,d2
0001DCB6                            
0001DCB6                            loc_1D03C:
0001DCB6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DCBA 6700                       		beq.s	loc_1D052	; if not, branch
0001DCBC D481                       		add.l	d1,d2
0001DCBE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DCC4 6500                       		bcs.s	loc_1D052
0001DCC6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DCCC                            
0001DCCC                            loc_1D052:
0001DCCC 0804 0002                  		btst	#2,d4
0001DCD0 6700                       		beq.s	loc_1D05E
0001DCD2 9681                       		sub.l	d1,d3
0001DCD4 6400                       		bcc.s	loc_1D05E
0001DCD6 7600                       		moveq	#0,d3
0001DCD8                            
0001DCD8                            loc_1D05E:
0001DCD8 0804 0003                  		btst	#3,d4
0001DCDC 6700                       		beq.s	loc_1D066
0001DCDE D681                       		add.l	d1,d3
0001DCE0                            
0001DCE0                            loc_1D066:
0001DCE0 2142 000C                  		move.l	d2,$C(a0)
0001DCE4 2143 0008                  		move.l	d3,8(a0)
0001DCE8                            
0001DCE8                            Debug_BackItem:
0001DCE8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DCEE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DCF0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCF6 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DCF8 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DCFC 6400                       		bcc.s	Debug_NoLoop
0001DCFE DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DD02 6000                       		bra.s	Debug_NoLoop
0001DD04                            ; ===========================================================================
0001DD04                            
0001DD04                            Debug_NextItem:
0001DD04 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DD0A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DD0C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DD10 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DD14 6200                       		bhi.s	Debug_NoLoop
0001DD16 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DD1C                            
0001DD1C                            Debug_NoLoop:
0001DD1C 6000 0000                  		bra.w	Debug_ShowItem
0001DD20                            ; ===========================================================================
0001DD20                            
0001DD20                            Debug_MakeItem:
0001DD20 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DD26 6700                       		beq.s	Debug_Exit	; if not, branch
0001DD28 4EB9 0000 E4D8             		jsr	SingleObjLoad
0001DD2E 6600                       		bne.s	Debug_Exit
0001DD30 3368 0008 0008             		move.w	8(a0),8(a1)
0001DD36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DD3C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DD40 1368 0001 0001             		move.b	1(a0),1(a1)
0001DD46 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DD4C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DD52 7000                       		moveq	#0,d0
0001DD54 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD58 E748                       		lsl.w	#3,d0
0001DD5A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DD60 4E75                       		rts	
0001DD62                            ; ===========================================================================
0001DD62                            
0001DD62                            Debug_Exit:
0001DD62 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DD68 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DD6A 7000                       		moveq	#0,d0
0001DD6C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DD70 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD78 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD7E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DD82 3140 000A                  		move.w	d0,$A(a0)
0001DD86 3140 000E                  		move.w	d0,$E(a0)
0001DD8A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DD90 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DD96 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DD9C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DD9E 4278 F780                  		clr.w	($FFFFF780).w
0001DDA2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DDA8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DDB0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DDB6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DDBC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DDC2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DDC8                            
0001DDC8                            Debug_DoNothing:
0001DDC8 4E75                       		rts	
0001DDCA                            ; End of function Debug_Control
0001DDCA                            
0001DDCA                            
0001DDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDCA                            
0001DDCA                            
0001DDCA                            Debug_ShowItem:				; XREF: Debug_Main
0001DDCA 7000                       		moveq	#0,d0
0001DDCC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DDD0 E748                       		lsl.w	#3,d0
0001DDD2 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DDD8 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DDDE 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DDE4 4E75                       		rts	
0001DDE6                            ; End of function Debug_ShowItem
0001DDE6                            
0001DDE6                            ; ===========================================================================
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            ; Debug	list pointers
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            DebugList:
0001DDE6                            	include "_inc\Debug list pointers.asm"
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            ; Debug	list pointers
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6 0000                       	dc.w Debug_GHZ-DebugList
0001DDE8 0000                       	dc.w Debug_LZ-DebugList
0001DDEA 0000                       	dc.w Debug_MZ-DebugList
0001DDEC 0000                       	dc.w Debug_SLZ-DebugList
0001DDEE 0000                       	dc.w Debug_SYZ-DebugList
0001DDF0 0000                       	dc.w Debug_SBZ-DebugList
0001DDF2 0000                       	dc.w Debug_Ending-DebugList
0001DDF4 0000                       	dc.w Debug_GHZ-DebugList
0001DDF4 0000                       	dc.w Debug_GHZ-DebugList
0001DDF6                            
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6                            ; Debug	list - Green Hill
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6                            Debug_GHZ:
0001DDF6                            	include "_inc\Debug list - GHZ.asm"
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6                            ; Debug	list - Green Hill
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6 0010                       	dc.w $10			; number of items in list
0001DDF8 2500 A83E                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DDFC 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DE00 2600 AE44                  	dc.l Map_obj26+$26000000
0001DE04 0000 0680                  	dc.b 0,	0, 6, $80
0001DE08 1F00 A036                  	dc.l Map_obj1F+$1F000000
0001DE0C 0000 0400                  	dc.b 0,	0, 4, 0
0001DE10 2200 A2F2                  	dc.l Map_obj22+$22000000
0001DE14 0000 0444                  	dc.b 0,	0, 4, $44
0001DE18 2B00 B4B8                  	dc.l Map_obj2B+$2B000000
0001DE1C 0000 047B                  	dc.b 0,	0, 4, $7B
0001DE20 3600 D9F4                  	dc.l Map_obj36+$36000000
0001DE24 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE28 1800 8944                  	dc.l Map_obj18+$18000000
0001DE2C 0000 4000                  	dc.b 0,	0, $40,	0
0001DE30 3B00 DB1A                  	dc.l Map_obj3B+$3B000000
0001DE34 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DE38 4001 01EC                  	dc.l Map_obj40+$40000000
0001DE3C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DE40 4100 E766                  	dc.l Map_obj41+$41000000
0001DE44 0000 0523                  	dc.b 0,	0, 5, $23
0001DE48 4200 E98C                  	dc.l Map_obj42+$42000000
0001DE4C 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DE50 4400 EC9A                  	dc.l Map_obj44+$44000000
0001DE54 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DE58 1900 8A44                  	dc.l Map_obj48+$19000000
0001DE5C 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DE60 7901 7C38                  	dc.l Map_obj79+$79000000
0001DE64 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE68 4B00 A87E                  	dc.l Map_obj4B+$4B000000
0001DE6C 0000 2400                  	dc.b 0,	0, $24,	0
0001DE70 7D01 7D88                  	dc.l Map_obj7D+$7D000000
0001DE74 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DE78                            	even
0001DE78                            	even
0001DE78                            
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78                            ; Debug	list - Labyrinth
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78                            Debug_LZ:
0001DE78                            	include "_inc\Debug list - LZ.asm"
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78                            ; Debug	list - Labyrinth
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78 0019                       	dc.w $19
0001DE7A 2500 A83E                  	dc.l Map_obj25+$25000000
0001DE7E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE82 2600 AE44                  	dc.l Map_obj26+$26000000
0001DE86 0000 0680                  	dc.b 0,	0, 6, $80
0001DE8A 4100 E766                  	dc.l Map_obj41+$41000000
0001DE8E 0000 0523                  	dc.b 0,	0, 5, $23
0001DE92 2C00 B568                  	dc.l Map_obj2C+$2C000000
0001DE96 0800 2486                  	dc.b 8,	0, $24,	$86
0001DE9A 2D00 B75C                  	dc.l Map_obj2D+$2D000000
0001DE9E 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DEA2 1601 29C6                  	dc.l Map_obj16+$16000000
0001DEA6 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DEAA 1601 29C6                  	dc.l Map_obj16+$16000000
0001DEAE 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DEB2 3300 CC14                  	dc.l Map_obj33+$33000000
0001DEB6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DEBA 3200 C7D4                  	dc.l Map_obj32+$32000000
0001DEBE 0000 0513                  	dc.b 0,	0, 5, $13
0001DEC2 3600 D9F4                  	dc.l Map_obj36+$36000000
0001DEC6 0000 051B                  	dc.b 0,	0, 5, $1B
0001DECA 5201 0AE8                  	dc.l Map_obj52a+$52000000
0001DECE 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DED2 6101 2BEE                  	dc.l Map_obj61+$61000000
0001DED6 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DEDA 6101 2BEE                  	dc.l Map_obj61+$61000000
0001DEDE 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DEE2 6101 2BEE                  	dc.l Map_obj61+$61000000
0001DEE6 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DEEA 6201 2D42                  	dc.l Map_obj62+$62000000
0001DEEE 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DEF2 6101 2BEE                  	dc.l Map_obj61+$61000000
0001DEF6 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DEFA 6101 2BEE                  	dc.l Map_obj61+$61000000
0001DEFE 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DF02 6301 30A0                  	dc.l Map_obj63+$63000000
0001DF06 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DF0A 6001 2910                  	dc.l Map_obj60+$60000000
0001DF0E 0000 0467                  	dc.b 0,	0, 4, $67
0001DF12 6401 33E6                  	dc.l Map_obj64+$64000000
0001DF16 8413 8348                  	dc.b $84, $13, $83, $48
0001DF1A 6501 356E                  	dc.l Map_obj65+$65000000
0001DF1E 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DF22 6501 356E                  	dc.l Map_obj65+$65000000
0001DF26 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DF2A 0B01 1D60                  	dc.l Map_obj0B+$B000000
0001DF2E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DF32 0C01 1E30                  	dc.l Map_obj0C+$C000000
0001DF36 0200 4328                  	dc.b 2,	0, $43,	$28
0001DF3A 7901 7C38                  	dc.l Map_obj79+$79000000
0001DF3E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF42                            	even
0001DF42                            	even
0001DF42                            
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42                            ; Debug	list - Marble
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42                            Debug_MZ:
0001DF42                            	include "_inc\Debug list - MZ.asm"
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42                            ; Debug	list - Marble
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42 0012                       	dc.w $12
0001DF44 2500 A83E                  	dc.l Map_obj25+$25000000
0001DF48 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF4C 2600 AE44                  	dc.l Map_obj26+$26000000
0001DF50 0000 0680                  	dc.b 0,	0, 6, $80
0001DF54 2200 A2F2                  	dc.l Map_obj22+$22000000
0001DF58 0000 0444                  	dc.b 0,	0, 4, $44
0001DF5C 3600 D9F4                  	dc.l Map_obj36+$36000000
0001DF60 0000 051B                  	dc.b 0,	0, 5, $1B
0001DF64 4100 E766                  	dc.l Map_obj41+$41000000
0001DF68 0000 0523                  	dc.b 0,	0, 5, $23
0001DF6C 1300 BC9E                  	dc.l Map_obj14+$13000000
0001DF70 0000 0345                  	dc.b 0,	0, 3, $45
0001DF74 4600 F34C                  	dc.l Map_obj46+$46000000
0001DF78 0000 4000                  	dc.b 0,	0, $40,	0
0001DF7C 4C00 FC98                  	dc.l Map_obj4C+$4C000000
0001DF80 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF84 4E00 FF7C                  	dc.l Map_obj4E+$4E000000
0001DF88 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF8C 3300 CC14                  	dc.l Map_obj33+$33000000
0001DF90 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF94 5001 037A                  	dc.l Map_obj50+$50000000
0001DF98 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF9C 5101 081C                  	dc.l Map_obj51+$51000000
0001DFA0 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DFA4 5201 0A92                  	dc.l Map_obj52+$52000000
0001DFA8 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DFAC 5300 8FDC                  	dc.l Map_obj53+$53000000
0001DFB0 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DFB4 5400 FC5E                  	dc.l Map_obj54+$54000000
0001DFB8 0000 8680                  	dc.b 0,	0, $86,	$80
0001DFBC 5501 0C86                  	dc.l Map_obj55+$55000000
0001DFC0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFC4 7801 78B2                  	dc.l Map_obj78+$78000000
0001DFC8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DFCC 7901 7C38                  	dc.l Map_obj79+$79000000
0001DFD0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFD4                            	even
0001DFD4                            	even
0001DFD4                            
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4                            ; Debug	list - Star Light
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4                            Debug_SLZ:
0001DFD4                            	include "_inc\Debug list - SLZ.asm"
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4                            ; Debug	list - Star Light
0001DFD4                            ; ---------------------------------------------------------------------------
0001DFD4 000F                       	dc.w $F
0001DFD6 2500 A83E                  	dc.l Map_obj25+$25000000
0001DFDA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFDE 2600 AE44                  	dc.l Map_obj26+$26000000
0001DFE2 0000 0680                  	dc.b 0,	0, 6, $80
0001DFE6 5901 1788                  	dc.l Map_obj59+$59000000
0001DFEA 0000 4000                  	dc.b 0,	0, $40,	0
0001DFEE 5300 8FDC                  	dc.l Map_obj53+$53000000
0001DFF2 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DFF6 1800 89A2                  	dc.l Map_obj18b+$18000000
0001DFFA 0000 4000                  	dc.b 0,	0, $40,	0
0001DFFE 5A01 18C2                  	dc.l Map_obj5A+$5A000000
0001E002 0000 4000                  	dc.b 0,	0, $40,	0
0001E006 5B01 1A7A                  	dc.l Map_obj5B+$5B000000
0001E00A 0000 4000                  	dc.b 0,	0, $40,	0
0001E00E 5D01 204A                  	dc.l Map_obj5D+$5D000000
0001E012 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E016 5E01 23DC                  	dc.l Map_obj5E+$5E000000
0001E01A 0000 0374                  	dc.b 0,	0, 3, $74
0001E01E 4100 E766                  	dc.l Map_obj41+$41000000
0001E022 0000 0523                  	dc.b 0,	0, 5, $23
0001E026 1300 BC9E                  	dc.l Map_obj14+$13000000
0001E02A 0000 0480                  	dc.b 0,	0, 4, $80
0001E02E 1C00 90EC                  	dc.l Map_obj1C+$1C000000
0001E032 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E036 5F01 265A                  	dc.l Map_obj5F+$5F000000
0001E03A 0000 0400                  	dc.b 0,	0, 4, 0
0001E03E 6001 2910                  	dc.l Map_obj60+$60000000
0001E042 0000 2429                  	dc.b 0,	0, $24,	$29
0001E046 7901 7C38                  	dc.l Map_obj79+$79000000
0001E04A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E04E                            	even
0001E04E                            	even
0001E04E                            
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            ; Debug	list - Spring Yard
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            Debug_SYZ:
0001E04E                            	include "_inc\Debug list - SYZ.asm"
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            ; Debug	list - Spring Yard
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E 000F                       	dc.w $F
0001E050 2500 A83E                  	dc.l Map_obj25+$25000000
0001E054 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E058 2600 AE44                  	dc.l Map_obj26+$26000000
0001E05C 0000 0680                  	dc.b 0,	0, 6, $80
0001E060 3600 D9F4                  	dc.l Map_obj36+$36000000
0001E064 0000 051B                  	dc.b 0,	0, 5, $1B
0001E068 4100 E766                  	dc.l Map_obj41+$41000000
0001E06C 0000 0523                  	dc.b 0,	0, 5, $23
0001E070 4300 EBEC                  	dc.l Map_obj43+$43000000
0001E074 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E078 1200 F3CA                  	dc.l Map_obj12+$12000000
0001E07C 0000 0000                  	dc.b 0,	0, 0, 0
0001E080 4700 F546                  	dc.l Map_obj47+$47000000
0001E084 0000 0380                  	dc.b 0,	0, 3, $80
0001E088 1F00 A036                  	dc.l Map_obj1F+$1F000000
0001E08C 0000 0400                  	dc.b 0,	0, 4, 0
0001E090 2200 A2F2                  	dc.l Map_obj22+$22000000
0001E094 0000 0444                  	dc.b 0,	0, 4, $44
0001E098 5001 037A                  	dc.l Map_obj50+$50000000
0001E09C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E0A0 1800 8990                  	dc.l Map_obj18a+$18000000
0001E0A4 0000 4000                  	dc.b 0,	0, $40,	0
0001E0A8 5601 1148                  	dc.l Map_obj56+$56000000
0001E0AC 0000 4000                  	dc.b 0,	0, $40,	0
0001E0B0 3200 C7D4                  	dc.l Map_obj32+$32000000
0001E0B4 0000 0513                  	dc.b 0,	0, 5, $13
0001E0B8 7801 78B2                  	dc.l Map_obj78+$78000000
0001E0BC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E0C0 7901 7C38                  	dc.l Map_obj79+$79000000
0001E0C4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E0C8                            	even
0001E0C8                            	even
0001E0C8                            
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Debug	list - Scrap Brain
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            Debug_SBZ:
0001E0C8                            	include "_inc\Debug list - SBZ.asm"
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Debug	list - Scrap Brain
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8 001D                       	dc.w $1D
0001E0CA 2500 A83E                  	dc.l Map_obj25+$25000000
0001E0CE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E0D2 2600 AE44                  	dc.l Map_obj26+$26000000
0001E0D6 0000 0680                  	dc.b 0,	0, 6, $80
0001E0DA 5F01 265A                  	dc.l Map_obj5F+$5F000000
0001E0DE 0000 0400                  	dc.b 0,	0, 4, 0
0001E0E2 6001 2910                  	dc.l Map_obj60+$60000000
0001E0E6 0000 0429                  	dc.b 0,	0, 4, $29
0001E0EA 7801 78B2                  	dc.l Map_obj78+$78000000
0001E0EE 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E0F2 1501 14E4                  	dc.l Map_obj15b+$15000000
0001E0F6 0702 4391                  	dc.b 7,	2, $43,	$91
0001E0FA 6701 61CA                  	dc.l Map_obj67+$67000000
0001E0FE E000 C344                  	dc.b $E0, 0, $C3, $44
0001E102 5201 0A92                  	dc.l Map_obj52+$52000000
0001E106 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E10A 3200 C7D4                  	dc.l Map_obj32+$32000000
0001E10E 0000 0513                  	dc.b 0,	0, 5, $13
0001E112 6901 6424                  	dc.l Map_obj69+$69000000
0001E116 0300 4492                  	dc.b 3,	0, $44,	$92
0001E11A 6901 647E                  	dc.l Map_obj69a+$69000000
0001E11E 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E122 6A01 66DC                  	dc.l Map_obj6A+$6A000000
0001E126 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E12A 5300 8FDC                  	dc.l Map_obj53+$53000000
0001E12E 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E132 5201 0A92                  	dc.l Map_obj52+$52000000
0001E136 3903 4460                  	dc.b $39, 3, $44, $60
0001E13A 6B01 6AAC                  	dc.l Map_obj6B+$6B000000
0001E13E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E142 2A00 9282                  	dc.l Map_obj2A+$2A000000
0001E146 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E14A 6B01 6AAC                  	dc.l Map_obj6B+$6B000000
0001E14E 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E152 6A01 66DC                  	dc.l Map_obj6A+$6A000000
0001E156 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E15A 6B01 6AAC                  	dc.l Map_obj6B+$6B000000
0001E15E 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E162 6A01 66DC                  	dc.l Map_obj6A+$6A000000
0001E166 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E16A 6B01 6AAC                  	dc.l Map_obj6B+$6B000000
0001E16E 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E172 6C01 6C6E                  	dc.l Map_obj6C+$6C000000
0001E176 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E17A 6D00 F03C                  	dc.l Map_obj6D+$6D000000
0001E17E 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E182 6D00 F03C                  	dc.l Map_obj6D+$6D000000
0001E186 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E18A 6E01 6D24                  	dc.l Map_obj6E+$6E000000
0001E18E 0400 047E                  	dc.b 4,	0, 4, $7E
0001E192 7001 7176                  	dc.l Map_obj70+$70000000
0001E196 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E19A 7101 1EF0                  	dc.l Map_obj71+$71000000
0001E19E 1100 8680                  	dc.b $11, 0, $86, $80
0001E1A2 1E00 9740                  	dc.l Map_obj1E+$1E000000
0001E1A6 0400 2302                  	dc.b 4,	0, $23,	2
0001E1AA 7901 7C38                  	dc.l Map_obj79+$79000000
0001E1AE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E1B2                            	even
0001E1B2                            	even
0001E1B2                            
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2                            ; Debug	list - ending sequence / special stage
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2                            Debug_Ending:
0001E1B2                            	include "_inc\Debug list - Ending and SS.asm"
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2                            ; Debug	list - ending sequence / special stage
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2 000D                       	dc.w $D
0001E1B4 2500 A83E                  	dc.l Map_obj25+$25000000
0001E1B8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E1BC 4700 F546                  	dc.l Map_obj47+$47000000
0001E1C0 0000 0380                  	dc.b 0,	0, 3, $80
0001E1C4 2800 9D68                  	dc.l Map_obj28a+$28000000
0001E1C8 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E1CC 2800 9D68                  	dc.l Map_obj28a+$28000000
0001E1D0 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E1D4 2800 9D68                  	dc.l Map_obj28a+$28000000
0001E1D8 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E1DC 2800 9D50                  	dc.l Map_obj28+$28000000
0001E1E0 0D00 0553                  	dc.b $D, 0, 5, $53
0001E1E4 2800 9D50                  	dc.l Map_obj28+$28000000
0001E1E8 0E00 0553                  	dc.b $E, 0, 5, $53
0001E1EC 2800 9D50                  	dc.l Map_obj28+$28000000
0001E1F0 0F00 0573                  	dc.b $F, 0, 5, $73
0001E1F4 2800 9D50                  	dc.l Map_obj28+$28000000
0001E1F8 1000 0573                  	dc.b $10, 0, 5,	$73
0001E1FC 2800 9D68                  	dc.l Map_obj28a+$28000000
0001E200 1100 0585                  	dc.b $11, 0, 5,	$85
0001E204 2800 9D80                  	dc.l Map_obj28b+$28000000
0001E208 1200 0593                  	dc.b $12, 0, 5,	$93
0001E20C 2800 9D68                  	dc.l Map_obj28a+$28000000
0001E210 1300 0565                  	dc.b $13, 0, 5,	$65
0001E214 2800 9D80                  	dc.l Map_obj28b+$28000000
0001E218 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E21C                            	even
0001E21C                            	even
0001E21C                            
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            ; Main level load blocks
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            MainLoadBlocks:
0001E21C                            	include "_inc\Main level load blocks.asm"
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            ; Main level load blocks
0001E21C                            ;
0001E21C                            ; ===FORMAT===
0001E21C                            ; level	patterns + (1st	PLC num	* 10^6)
0001E21C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E21C                            ; 256x256 mappings
0001E21C                            ; blank, music (unused), pal index (unused), pal index
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E220 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E224 0000 0000                  	dc.l Blk256_GHZ
0001E228 0081 0404                  	dc.b 0,	$81, 4,	4
0001E22C 0000 0000                  	dc.l Nem_LZ|6<<24
0001E230 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E234 0000 0000                  	dc.l Blk256_LZ
0001E238 0082 0505                  	dc.b 0,	$82, 5,	5
0001E23C 0000 0000                  	dc.l Nem_MZ|8<<24
0001E240 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E244 0000 0000                  	dc.l Blk256_MZ
0001E248 0083 0606                  	dc.b 0,	$83, 6,	6
0001E24C 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E250 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E254 0000 0000                  	dc.l Blk256_SLZ
0001E258 0084 0707                  	dc.b 0,	$84, 7,	7
0001E25C 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E260 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E264 0000 0000                  	dc.l Blk256_SYZ
0001E268 0085 0808                  	dc.b 0,	$85, 8,	8
0001E26C 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E270 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E274 0000 0000                  	dc.l Blk256_SBZ
0001E278 0086 0909                  	dc.b 0,	$86, 9,	9
0001E27C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E280 0000 0000                  	dc.l Blk16_GHZ
0001E284 0000 0000                  	dc.l Blk256_GHZ
0001E288 0086 1313                  	dc.b 0,	$86, $13, $13
0001E28C                            ; there you go lol
0001E28C 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001E290 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E294 0000 0000                  	dc.l Blk256_BHZ
0001E298 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E29C                            	even
0001E29C                            	even
0001E29C                            
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ArtLoadCues:
0001E29C                            	include "_inc\Pattern load cues.asm"
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues - index
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E2A0 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E2A4 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E2A8 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E2AC 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E2B0 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E2B4 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E2B8 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E2BC 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E2C0 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E2C4 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E2C8 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E2CC 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E2D0 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E2D4 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E2D8 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E2DC                            
0001E2DC 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E2E0 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E2E2                            ; ---------------------------------------------------------------------------
0001E2E2                            ; Pattern load cues - standard block 1
0001E2E2                            ; ---------------------------------------------------------------------------
0001E2E2 0004                       PLC_Main:	dc.w 4
0001E2E4 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E2E8 F400                       		dc.w $F400
0001E2EA 0000 0000                  		dc.l Nem_Hud		; HUD
0001E2EE D940                       		dc.w $D940
0001E2F0 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E2F4 FA80                       		dc.w $FA80
0001E2F6 0000 0000                  		dc.l Nem_Ring		; rings
0001E2FA F640                       		dc.w $F640
0001E2FC 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E300 F2E0                       		dc.w $F2E0
0001E302                            ; ---------------------------------------------------------------------------
0001E302                            ; Pattern load cues - standard block 2
0001E302                            ; ---------------------------------------------------------------------------
0001E302 0002                       PLC_Main2:	dc.w 2
0001E304 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E308 D000                       		dc.w $D000
0001E30A 0000 0000                  		dc.l Nem_Shield		; shield
0001E30E A820                       		dc.w $A820
0001E310 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E314 AB80                       		dc.w $AB80
0001E316                            ; ---------------------------------------------------------------------------
0001E316                            ; Pattern load cues - explosion
0001E316                            ; ---------------------------------------------------------------------------
0001E316 0000                       PLC_Explode:	dc.w 0
0001E318 0000 0000                  		dc.l Nem_Explode	; explosion
0001E31C B400                       		dc.w $B400
0001E31E                            ; ---------------------------------------------------------------------------
0001E31E                            ; Pattern load cues - game/time	over
0001E31E                            ; ---------------------------------------------------------------------------
0001E31E 0000                       PLC_GameOver:	dc.w 0
0001E320 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E324 ABC0                       		dc.w $ABC0
0001E326                            ; ---------------------------------------------------------------------------
0001E326                            ; Pattern load cues - Green Hill
0001E326                            ; ---------------------------------------------------------------------------
0001E326 000B                       PLC_GHZ:	dc.w $B
0001E328 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E32C 0000                       		dc.w 0
0001E32E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E332 39A0                       		dc.w $39A0
0001E334 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E338 6B00                       		dc.w $6B00
0001E33A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E33E 7A00                       		dc.w $7A00
0001E340 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E344 8000                       		dc.w $8000
0001E346 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E34A 8880                       		dc.w $8880
0001E34C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E350 8F60                       		dc.w $8F60
0001E352 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E356 9360                       		dc.w $9360
0001E358 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E35C 9E00                       		dc.w $9E00
0001E35E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E362 A360                       		dc.w $A360
0001E364 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E368 A460                       		dc.w $A460
0001E36A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E36E A660                       		dc.w $A660
0001E370 0005                       PLC_GHZ2:	dc.w 5
0001E372 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E376 7000                       		dc.w $7000
0001E378 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E37C 71C0                       		dc.w $71C0
0001E37E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E382 7300                       		dc.w $7300
0001E384 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E388 7540                       		dc.w $7540
0001E38A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E38E A1E0                       		dc.w $A1E0
0001E390 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E394 6980                       		dc.w $6980
0001E396                            ; ---------------------------------------------------------------------------
0001E396                            ; Pattern load cues - Labyrinth
0001E396                            ; ---------------------------------------------------------------------------
0001E396 000B                       PLC_LZ:		dc.w $B
0001E398 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E39C 0000                       		dc.w 0
0001E39E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E3A2 3C00                       		dc.w $3C00
0001E3A4 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E3A8 3E00                       		dc.w $3E00
0001E3AA 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E3AE 4B20                       		dc.w $4B20
0001E3B0 0000 0000                  		dc.l Nem_Water		; water	surface
0001E3B4 6000                       		dc.w $6000
0001E3B6 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E3BA 6200                       		dc.w $6200
0001E3BC 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E3C0 6500                       		dc.w $6500
0001E3C2 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E3C6 6900                       		dc.w $6900
0001E3C8 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E3CC 7780                       		dc.w $7780
0001E3CE 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E3D2 7880                       		dc.w $7880
0001E3D4 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E3D8 7980                       		dc.w $7980
0001E3DA 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E3DE 94C0                       		dc.w $94C0
0001E3E0 000C                       PLC_LZ2:	dc.w $C
0001E3E2 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E3E6 7BC0                       		dc.w $7BC0
0001E3E8 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E3EC 7CC0                       		dc.w $7CC0
0001E3EE 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E3F2 7EC0                       		dc.w $7EC0
0001E3F4 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E3F8 5D20                       		dc.w $5D20
0001E3FA 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E3FE 8800                       		dc.w $8800
0001E400 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E404 89E0                       		dc.w $89E0
0001E406 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E40A 8CE0                       		dc.w $8CE0
0001E40C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E410 90C0                       		dc.w $90C0
0001E412 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E416 A1E0                       		dc.w $A1E0
0001E418 0000 0000                  		dc.l Nem_Cork		; cork block
0001E41C A000                       		dc.w $A000
0001E41E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E422 A360                       		dc.w $A360
0001E424 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E428 A460                       		dc.w $A460
0001E42A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E42E A660                       		dc.w $A660
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            ; Pattern load cues - Marble
0001E430                            ; ---------------------------------------------------------------------------
0001E430 0009                       PLC_MZ:		dc.w 9
0001E432 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E436 0000                       		dc.w 0
0001E438 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E43C 6000                       		dc.w $6000
0001E43E 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E442 68A0                       		dc.w $68A0
0001E444 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E448 7000                       		dc.w $7000
0001E44A 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E44E 71C0                       		dc.w $71C0
0001E450 0000 0000                  		dc.l Nem_Lava		; lava
0001E454 7500                       		dc.w $7500
0001E456 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E45A 8880                       		dc.w $8880
0001E45C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E460 8F60                       		dc.w $8F60
0001E462 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E466 9700                       		dc.w $9700
0001E468 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E46C 9FE0                       		dc.w $9FE0
0001E46E 0004                       PLC_MZ2:	dc.w 4
0001E470 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E474 A260                       		dc.w $A260
0001E476 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E47A A360                       		dc.w $A360
0001E47C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E480 A460                       		dc.w $A460
0001E482 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E486 A660                       		dc.w $A660
0001E488 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E48C 5700                       		dc.w $5700
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E                            ; Pattern load cues - Star Light
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E 0008                       PLC_SLZ:	dc.w 8
0001E490 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E494 0000                       		dc.w 0
0001E496 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E49A 8000                       		dc.w $8000
0001E49C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E4A0 8520                       		dc.w $8520
0001E4A2 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E4A6 9000                       		dc.w $9000
0001E4A8 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E4AC 9C00                       		dc.w $9C00
0001E4AE 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E4B2 A260                       		dc.w $A260
0001E4B4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4B8 A360                       		dc.w $A360
0001E4BA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4BE A460                       		dc.w $A460
0001E4C0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4C4 A660                       		dc.w $A660
0001E4C6 0005                       PLC_SLZ2:	dc.w 5
0001E4C8 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E4CC 6E80                       		dc.w $6E80
0001E4CE 0000 0000                  		dc.l Nem_Fan		; fan
0001E4D2 7400                       		dc.w $7400
0001E4D4 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E4D8 7980                       		dc.w $7980
0001E4DA 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E4DE 7B80                       		dc.w $7B80
0001E4E0 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E4E4 9B00                       		dc.w $9B00
0001E4E6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E4EA 9E00                       		dc.w $9E00
0001E4EC                            ; ---------------------------------------------------------------------------
0001E4EC                            ; Pattern load cues - Spring Yard
0001E4EC                            ; ---------------------------------------------------------------------------
0001E4EC 0004                       PLC_SYZ:	dc.w 4
0001E4EE 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E4F2 0000                       		dc.w 0
0001E4F4 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E4F8 8000                       		dc.w $8000
0001E4FA 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E4FE 8880                       		dc.w $8880
0001E500 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E504 8F60                       		dc.w $8F60
0001E506 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E50A 9700                       		dc.w $9700
0001E50C 0007                       PLC_SYZ2:	dc.w 7
0001E50E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E512 7000                       		dc.w $7000
0001E514 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E518 72C0                       		dc.w $72C0
0001E51A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E51E 7740                       		dc.w $7740
0001E520 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E524 9FE0                       		dc.w $9FE0
0001E526 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E52A A1E0                       		dc.w $A1E0
0001E52C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E530 A360                       		dc.w $A360
0001E532 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E536 A460                       		dc.w $A460
0001E538 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E53C A660                       		dc.w $A660
0001E53E                            ; ---------------------------------------------------------------------------
0001E53E                            ; Pattern load cues - Scrap Brain
0001E53E                            ; ---------------------------------------------------------------------------
0001E53E 000B                       PLC_SBZ:	dc.w $B
0001E540 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E544 0000                       		dc.w 0
0001E546 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E54A 5800                       		dc.w $5800
0001E54C 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E550 5D00                       		dc.w $5D00
0001E552 0000 0000                  		dc.l Nem_Girder		; girder
0001E556 5E00                       		dc.w $5E00
0001E558 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E55C 6040                       		dc.w $6040
0001E55E 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E562 6880                       		dc.w $6880
0001E564 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E568 6900                       		dc.w $6900
0001E56A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E56E 7220                       		dc.w $7220
0001E570 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E574 76A0                       		dc.w $76A0
0001E576 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E57A 7B20                       		dc.w $7B20
0001E57C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E580 7EA0                       		dc.w $7EA0
0001E582 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E586 9860                       		dc.w $9860
0001E588 000C                       PLC_SBZ2:	dc.w $C
0001E58A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E58E 5600                       		dc.w $5600
0001E590 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E594 8000                       		dc.w $8000
0001E596 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E59A 8520                       		dc.w $8520
0001E59C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E5A0 8C00                       		dc.w $8C00
0001E5A2 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E5A6 8DE0                       		dc.w $8DE0
0001E5A8 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E5AC 8FC0                       		dc.w $8FC0
0001E5AE 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E5B2 9240                       		dc.w $9240
0001E5B4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E5B8 7F20                       		dc.w $7F20
0001E5BA 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E5BE 9BE0                       		dc.w $9BE0
0001E5C0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E5C4 A1E0                       		dc.w $A1E0
0001E5C6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E5CA A360                       		dc.w $A360
0001E5CC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E5D0 A460                       		dc.w $A460
0001E5D2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E5D6 A660                       		dc.w $A660
0001E5D8                            ; ---------------------------------------------------------------------------
0001E5D8                            ; Pattern load cues - DR. Breen Hill
0001E5D8                            ; ---------------------------------------------------------------------------
0001E5D8 000A                       PLC_BHZ:	dc.w $A
0001E5DA 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001E5DE 0000                       		dc.w 0
0001E5E0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E5E4 6B00                       		dc.w $6B00
0001E5E6 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E5EA 7A00                       		dc.w $7A00
0001E5EC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E5F0 8000                       		dc.w $8000
0001E5F2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E5F6 8880                       		dc.w $8880
0001E5F8 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E5FC 8F60                       		dc.w $8F60
0001E5FE 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E602 9360                       		dc.w $9360
0001E604 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E608 9E00                       		dc.w $9E00
0001E60A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E60E A360                       		dc.w $A360
0001E610 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E614 A460                       		dc.w $A460
0001E616 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E61A A660                       		dc.w $A660
0001E61C 0005                       PLC_BHZ2:	dc.w 5
0001E61E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E622 7000                       		dc.w $7000
0001E624 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E628 71C0                       		dc.w $71C0
0001E62A 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E62E 7300                       		dc.w $7300
0001E630 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E634 7540                       		dc.w $7540
0001E636 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E63A A1E0                       		dc.w $A1E0
0001E63C 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E640 6980                       		dc.w $6980
0001E642                            ; ---------------------------------------------------------------------------
0001E642                            ; Pattern load cues - title card
0001E642                            ; ---------------------------------------------------------------------------
0001E642 0000                       PLC_TitleCard:	dc.w 0
0001E644 0000 0000                  		dc.l Nem_TitleCard
0001E648 B000                       		dc.w $B000
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A                            ; Pattern load cues - act 3 boss
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A 0005                       PLC_Boss:	dc.w 5
0001E64C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E650 8000                       		dc.w $8000
0001E652 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E656 8D80                       		dc.w $8D80
0001E658 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E65C 93A0                       		dc.w $93A0
0001E65E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E662 A300                       		dc.w $A300
0001E664 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E668 A300                       		dc.w $A300
0001E66A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E66E A540                       		dc.w $A540
0001E670                            ; ---------------------------------------------------------------------------
0001E670                            ; Pattern load cues - act 1/2 signpost
0001E670                            ; ---------------------------------------------------------------------------
0001E670 0002                       PLC_Signpost:	dc.w 2
0001E672 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E676 D000                       		dc.w $D000
0001E678 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E67C 96C0                       		dc.w $96C0
0001E67E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E682 8C40                       		dc.w $8C40
0001E684                            ; ---------------------------------------------------------------------------
0001E684                            ; Pattern load cues - beta special stage warp effect
0001E684                            ; ---------------------------------------------------------------------------
0001E684 0000                       PLC_Warp:	dc.w 0
0001E686 0000 0000                  		dc.l Nem_Warp
0001E68A A820                       		dc.w $A820
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C                            ; Pattern load cues - special stage
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C 0010                       PLC_SpeStage:	dc.w $10
0001E68E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E692 0000                       		dc.w 0
0001E694 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E698 0A20                       		dc.w $A20
0001E69A 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E69E 2840                       		dc.w $2840
0001E6A0 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E6A4 4760                       		dc.w $4760
0001E6A6 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E6AA 4A20                       		dc.w $4A20
0001E6AC 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E6B0 4C60                       		dc.w $4C60
0001E6B2 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E6B6 5E00                       		dc.w $5E00
0001E6B8 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E6BC 6E00                       		dc.w $6E00
0001E6BE 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E6C2 7E00                       		dc.w $7E00
0001E6C4 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E6C8 8E00                       		dc.w $8E00
0001E6CA 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E6CE 9E00                       		dc.w $9E00
0001E6D0 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E6D4 AE00                       		dc.w $AE00
0001E6D6 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E6DA BE00                       		dc.w $BE00
0001E6DC 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E6E0 EE00                       		dc.w $EE00
0001E6E2 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E6E6 F2E0                       		dc.w $F2E0
0001E6E8 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E6EC F400                       		dc.w $F400
0001E6EE 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E6F2 F520                       		dc.w $F520
0001E6F4 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E6F8 F2E0                       		dc.w $F2E0
0001E6FA 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E6FE F400                       		dc.w $F400
0001E700 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E704 F520                       		dc.w $F520
0001E706                            ; ---------------------------------------------------------------------------
0001E706                            ; Pattern load cues - GHZ animals
0001E706                            ; ---------------------------------------------------------------------------
0001E706 0001                       PLC_GHZAnimals:	dc.w 1
0001E708 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E70C B000                       		dc.w $B000
0001E70E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E712 B240                       		dc.w $B240
0001E714                            ; ---------------------------------------------------------------------------
0001E714                            ; Pattern load cues - LZ animals
0001E714                            ; ---------------------------------------------------------------------------
0001E714 0001                       PLC_LZAnimals:	dc.w 1
0001E716 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E71A B000                       		dc.w $B000
0001E71C 0000 0000                  		dc.l Nem_Seal		; seal
0001E720 B240                       		dc.w $B240
0001E722                            ; ---------------------------------------------------------------------------
0001E722                            ; Pattern load cues - MZ animals
0001E722                            ; ---------------------------------------------------------------------------
0001E722 0001                       PLC_MZAnimals:	dc.w 1
0001E724 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E728 B000                       		dc.w $B000
0001E72A 0000 0000                  		dc.l Nem_Seal		; seal
0001E72E B240                       		dc.w $B240
0001E730                            ; ---------------------------------------------------------------------------
0001E730                            ; Pattern load cues - SLZ animals
0001E730                            ; ---------------------------------------------------------------------------
0001E730 0001                       PLC_SLZAnimals:	dc.w 1
0001E732 0000 0000                  		dc.l Nem_Pig		; pig
0001E736 B000                       		dc.w $B000
0001E738 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E73C B240                       		dc.w $B240
0001E73E                            ; ---------------------------------------------------------------------------
0001E73E                            ; Pattern load cues - SYZ animals
0001E73E                            ; ---------------------------------------------------------------------------
0001E73E 0001                       PLC_SYZAnimals:	dc.w 1
0001E740 0000 0000                  		dc.l Nem_Pig		; pig
0001E744 B000                       		dc.w $B000
0001E746 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E74A B240                       		dc.w $B240
0001E74C                            ; ---------------------------------------------------------------------------
0001E74C                            ; Pattern load cues - SBZ animals
0001E74C                            ; ---------------------------------------------------------------------------
0001E74C 0001                       PLC_SBZAnimals:	dc.w 1
0001E74E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E752 B000                       		dc.w $B000
0001E754 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E758 B240                       		dc.w $B240
0001E75A                            ; ---------------------------------------------------------------------------
0001E75A                            ; Pattern load cues - special stage results screen
0001E75A                            ; ---------------------------------------------------------------------------
0001E75A 0001                       PLC_SpeStResult:dc.w 1
0001E75C 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E760 A820                       		dc.w $A820
0001E762 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E766 AA20                       		dc.w $AA20
0001E768                            ; ---------------------------------------------------------------------------
0001E768                            ; Pattern load cues - ending sequence
0001E768                            ; ---------------------------------------------------------------------------
0001E768 000E                       PLC_Ending:	dc.w $E
0001E76A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E76E 0000                       		dc.w 0
0001E770 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E774 39A0                       		dc.w $39A0
0001E776 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E77A 6B00                       		dc.w $6B00
0001E77C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E780 7400                       		dc.w $7400
0001E782 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E786 78A0                       		dc.w $78A0
0001E788 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E78C 7C20                       		dc.w $7C20
0001E78E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E792 A480                       		dc.w $A480
0001E794 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E798 AA60                       		dc.w $AA60
0001E79A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E79E ACA0                       		dc.w $ACA0
0001E7A0 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E7A4 AE60                       		dc.w $AE60
0001E7A6 0000 0000                  		dc.l Nem_Seal		; seal
0001E7AA B0A0                       		dc.w $B0A0
0001E7AC 0000 0000                  		dc.l Nem_Pig		; pig
0001E7B0 B260                       		dc.w $B260
0001E7B2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E7B6 B4A0                       		dc.w $B4A0
0001E7B8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E7BC B660                       		dc.w $B660
0001E7BE 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E7C2 B8A0                       		dc.w $B8A0
0001E7C4                            ; ---------------------------------------------------------------------------
0001E7C4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E7C4                            ; ---------------------------------------------------------------------------
0001E7C4 0002                       PLC_TryAgain:	dc.w 2
0001E7C6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E7CA 78A0                       		dc.w $78A0
0001E7CC 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E7D0 7C20                       		dc.w $7C20
0001E7D2 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E7D6 B400                       		dc.w $B400
0001E7D8                            ; ---------------------------------------------------------------------------
0001E7D8                            ; Pattern load cues - Eggman on SBZ 2
0001E7D8                            ; ---------------------------------------------------------------------------
0001E7D8 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E7DA 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E7DE A300                       		dc.w $A300
0001E7E0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E7E4 8000                       		dc.w $8000
0001E7E6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E7EA 9400                       		dc.w $9400
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC                            ; Pattern load cues - final boss
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC 0004                       PLC_FZBoss:	dc.w 4
0001E7EE 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E7F2 7400                       		dc.w $7400
0001E7F4 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E7F8 6000                       		dc.w $6000
0001E7FA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E7FE 8000                       		dc.w $8000
0001E800 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E804 8E00                       		dc.w $8E00
0001E806 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E80A A540                       		dc.w $A540
0001E80C                            ; ---------------------------------------------------------------------------
0001E80C                            ; Pattern load cues - Teto boss
0001E80C                            ; ---------------------------------------------------------------------------
0001E80C 0002                       PLC_TetoBoss:	dc.w 2
0001E80E 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E812 8000                       		dc.w $8000
0001E814 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E818 93A0                       		dc.w $93A0
0001E81A 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E81E 9000                       		dc.w $9000
0001E820                            		even
0001E820                            		even
0001E820                            
0001E820                            		incbin	misc\padding.bin
0001E90E                            		even
0001E90E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ED64                            		even
0001ED64                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EDFC                            		even
0001EDFC                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EF3E                            		even
0001EF3E                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EF8C                            		even
0001EF8C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F0A0                            		even
0001F0A0                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FF6A                            		even
0001FF6A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00024070                            		even
00024070                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000240A4                            		even
000240A4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00024162                            		even
00024162                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002460A                            		even
0002460A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024668                            		even
00024668                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
0002526E                            		even
0002526E                            ; ---------------------------------------------------------------------------
0002526E                            ; Sprite mappings - Sonic
0002526E                            ; ---------------------------------------------------------------------------
0002526E                            Map_Sonic:
0002526E                            	include "_maps\Sonic.asm"
0002526E                            Map_a933:
0002526E 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
00025270 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
00025272 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00025274 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00025276 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00025278 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
0002527A 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
0002527C 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
0002527E 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
00025280 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
00025282 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00025284 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00025286 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00025288 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
0002528A 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
0002528C 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
0002528E 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
00025290 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
00025292 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00025294 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00025296 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00025298 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
0002529A 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
0002529C 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
0002529E 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000252A0 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000252A2 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000252A4 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000252A6 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000252A8 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000252AA 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000252AC 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000252AE 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000252B0 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000252B2 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000252B4 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000252B6 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000252B8 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000252BA 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000252BC 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000252BE 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000252C0 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000252C2 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000252C4 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000252C6 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000252C8 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000252CA 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000252CC 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000252CE 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000252D0 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000252D2 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000252D4 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000252D6 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000252D8 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000252DA 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000252DC 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000252DE 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000252E0 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000252E2 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000252E4 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000252E6 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000252E8 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000252EA 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
000252EC 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
000252EE 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
000252F0 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
000252F2 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
000252F4 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
000252F6 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
000252F8 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
000252FA 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
000252FC 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
000252FE 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00025300 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025302 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025304 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025306 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025308 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
0002530A 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002530C 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002530E 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00025310 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025312 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025314 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025316 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025318 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
0002531A 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002531C 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002531E 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00025320 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025322 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025324 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025326 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025328 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
0002532A 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002532C 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002532E 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00025330 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00025332 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00025334 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025336 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025338 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
0002533A 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
0002533C 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
0002533E 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00025340 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00025342 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00025344 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025346 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025348 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
0002534A 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
0002534C 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
0002534E 00                         Map_a933_E0: 	dc.b $0
0002534F 02                         Map_a933_E1: 	dc.b $2
00025350 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00025355 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
0002535A 03                         Map_a933_EC: 	dc.b $3
0002535B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025360 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025365 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002536A 03                         Map_a933_FC: 	dc.b $3
0002536B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025370 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025375 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002537A 03                         Map_a933_10C: 	dc.b $3
0002537B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025380 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025385 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002538A 03                         Map_a933_11C: 	dc.b $3
0002538B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025390 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00025395 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002539A 04                         Map_a933_12C: 	dc.b $4
0002539B EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000253A0 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000253A5 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000253AA 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000253AF 02                         Map_a933_141: 	dc.b $2
000253B0 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000253B5 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000253BA 02                         Map_a933_14C: 	dc.b $2
000253BB ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000253C0 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000253C5 04                         Map_a933_157: 	dc.b $4
000253C6 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000253CB FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000253D0 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000253D5 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000253DA 02                         Map_a933_16C: 	dc.b $2
000253DB FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000253E0 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000253E5 03                         Map_a933_177: 	dc.b $3
000253E6 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000253EB FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
000253F0 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
000253F5 05                         Map_a933_187: 	dc.b $5
000253F6 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000253FB EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00025400 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025405 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002540A 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002540F 06                         Map_a933_1A1: 	dc.b $6
00025410 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025415 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002541A FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002541F 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025424 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025429 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002542E 04                         Map_a933_1C0: 	dc.b $4
0002542F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025434 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025439 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002543E 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025443 05                         Map_a933_1D5: 	dc.b $5
00025444 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025449 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002544E FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025453 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025458 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002545D 04                         Map_a933_1EF: 	dc.b $4
0002545E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025463 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025468 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002546D 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00025472 05                         Map_a933_204: 	dc.b $5
00025473 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025478 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002547D FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00025482 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025487 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002548C 04                         Map_a933_21E: 	dc.b $4
0002548D F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025492 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025497 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002549C 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000254A1 02                         Map_a933_233: 	dc.b $2
000254A2 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000254A7 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000254AC 02                         Map_a933_23E: 	dc.b $2
000254AD F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000254B2 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000254B7 04                         Map_a933_249: 	dc.b $4
000254B8 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000254BD EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000254C2 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000254C7 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000254CC 02                         Map_a933_25E: 	dc.b $2
000254CD F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000254D2 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000254D7 03                         Map_a933_269: 	dc.b $3
000254D8 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000254DD EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000254E2 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000254E7 06                         Map_a933_279: 	dc.b $6
000254E8 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000254ED ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000254F2 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000254F7 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000254FC 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025501 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025506 06                         Map_a933_298: 	dc.b $6
00025507 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002550C E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025511 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025516 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
0002551B F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025520 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025525 04                         Map_a933_2B7: 	dc.b $4
00025526 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002552B F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025530 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025535 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002553A 05                         Map_a933_2CC: 	dc.b $5
0002553B FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025540 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025545 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
0002554A F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002554F 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025554 04                         Map_a933_2E6: 	dc.b $4
00025555 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002555A F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002555F EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025564 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025569 05                         Map_a933_2FB: 	dc.b $5
0002556A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002556F EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025574 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025579 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002557E 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025583 02                         Map_a933_315: 	dc.b $2
00025584 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025589 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002558E 02                         Map_a933_320: 	dc.b $2
0002558F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025594 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025599 02                         Map_a933_32B: 	dc.b $2
0002559A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002559F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000255A4 02                         Map_a933_336: 	dc.b $2
000255A5 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000255AA FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000255AF 04                         Map_a933_341: 	dc.b $4
000255B0 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255B5 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255BA FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255BF FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000255C4 03                         Map_a933_356: 	dc.b $3
000255C5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255CA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255CF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255D4 04                         Map_a933_366: 	dc.b $4
000255D5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255DA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255DF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255E4 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000255E9 03                         Map_a933_37B: 	dc.b $3
000255EA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255EF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255F4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255F9 02                         Map_a933_38B: 	dc.b $2
000255FA F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000255FF F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025604 02                         Map_a933_396: 	dc.b $2
00025605 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002560A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002560F 02                         Map_a933_3A1: 	dc.b $2
00025610 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025615 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002561A 02                         Map_a933_3AC: 	dc.b $2
0002561B F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025620 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025625 04                         Map_a933_3B7: 	dc.b $4
00025626 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002562B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025630 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025635 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002563A 02                         Map_a933_3CC: 	dc.b $2
0002563B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025640 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025645 04                         Map_a933_3D7: 	dc.b $4
00025646 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002564B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025650 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025655 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002565A 02                         Map_a933_3EC: 	dc.b $2
0002565B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025660 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025665 01                         Map_a933_3F7: 	dc.b $1
00025666 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002566B 01                         Map_a933_3FD: 	dc.b $1
0002566C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025671 01                         Map_a933_403: 	dc.b $1
00025672 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025677 01                         Map_a933_409: 	dc.b $1
00025678 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002567D 01                         Map_a933_40F: 	dc.b $1
0002567E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025683 02                         Map_a933_415: 	dc.b $2
00025684 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025689 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002568E 01                         Map_a933_420: 	dc.b $1
0002568F F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025694 02                         Map_a933_426: 	dc.b $2
00025695 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002569A 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002569F 01                         Map_a933_431: 	dc.b $1
000256A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000256A5 02                         Map_a933_437: 	dc.b $2
000256A6 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000256AB FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000256B0 04                         Map_a933_442: 	dc.b $4
000256B1 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000256B6 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000256BB 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000256C0 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000256C5 06                         Map_a933_457: 	dc.b $6
000256C6 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000256CB FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000256D0 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000256D5 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000256DA FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000256DF F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000256E4 02                         Map_a933_476: 	dc.b $2
000256E5 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000256EA EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000256EF 02                         Map_a933_481: 	dc.b $2
000256F0 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000256F5 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000256FA 04                         Map_a933_48C: 	dc.b $4
000256FB F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025700 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025705 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002570A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002570F 02                         Map_a933_4A1: 	dc.b $2
00025710 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025715 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002571A 03                         Map_a933_4AC: 	dc.b $3
0002571B F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025720 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025725 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002572A 04                         Map_a933_4BC: 	dc.b $4
0002572B F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025730 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025735 0408 000C 02               	dc.b $4, $8, $0, $C, $2
0002573A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002573F 02                         Map_a933_4D1: 	dc.b $2
00025740 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025745 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
0002574A 04                         Map_a933_4DC: 	dc.b $4
0002574B F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025750 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025755 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002575A F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002575F 04                         Map_a933_4F1: 	dc.b $4
00025760 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025765 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002576A F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002576F F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025774 05                         Map_a933_506: 	dc.b $5
00025775 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002577A F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002577F 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025784 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025789 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002578E 05                         Map_a933_520: 	dc.b $5
0002578F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025794 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025799 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002579E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000257A3 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000257A8 02                         Map_a933_53A: 	dc.b $2
000257A9 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000257AE 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000257B3 03                         Map_a933_545: 	dc.b $3
000257B4 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000257B9 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000257BE 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000257C3 02                         Map_a933_555: 	dc.b $2
000257C4 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000257C9 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000257CE 03                         Map_a933_560: 	dc.b $3
000257CF EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000257D4 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000257D9 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000257DE 02                         Map_a933_570: 	dc.b $2
000257DF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000257E4 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000257E9 03                         Map_a933_57B: 	dc.b $3
000257EA EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000257EF 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000257F4 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000257F9 03                         Map_a933_58B: 	dc.b $3
000257FA E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000257FF E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025804 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025809 05                         Map_a933_59B: 	dc.b $5
0002580A E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002580F E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025814 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025819 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002581E 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025823 05                         Map_a933_5B5: 	dc.b $5
00025824 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025829 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002582E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025833 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025838 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002583D 02                         Map_a933_5CF: 	dc.b $2
0002583E EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025843 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025848 03                         Map_a933_5DA: 	dc.b $3
00025849 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002584E F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025853 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025858 01                         Map_a933_5EA: 	dc.b $1
00025859 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002585E 01                         Map_a933_5F0: 	dc.b $1
0002585F F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025864 01                         Map_a933_5F6: 	dc.b $1
00025865 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002586A 04                         Map_a933_5FC: 	dc.b $4
0002586B F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025870 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025875 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002587A 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002587F 03                         Map_a933_611: 	dc.b $3
00025880 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025885 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002588A 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002588F 03                         Map_a933_621: 	dc.b $3
00025890 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025895 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002589A 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002589F 03                         Map_a933_631: 	dc.b $3
000258A0 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000258A5 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000258AA 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000258AF 02                         Map_a933_641: 	dc.b $2
000258B0 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000258B5 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000258BA 02                         Map_a933_64C: 	dc.b $2
000258BB F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258C0 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258C5 03                         Map_a933_657: 	dc.b $3
000258C6 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000258CB 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000258D0 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000258D5 02                         Map_a933_667: 	dc.b $2
000258D6 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000258DB EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000258E0 04                         Map_a933_672: 	dc.b $4
000258E1 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000258E6 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000258EB F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000258F0 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000258F5 00                         Map_a933_687: 	dc.b $0
000258F6 00                         Map_a933_688: 	dc.b $0
000258F7 00                         Map_a933_689: 	dc.b $0
000258F8 00                         Map_a933_68A: 	dc.b $0
000258F9 02                         Map_a933_68B: 	dc.b $2
000258FA F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258FF EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025904 00                         Map_a933_696: 	dc.b $0
00025905 02                         Map_a933_697: 	dc.b $2
00025906 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002590B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025910 00                         Map_a933_6A2: 	dc.b $0
00025911 00                         Map_a933_6A3: 	dc.b $0
00025912 00                         Map_a933_6A4: 	dc.b $0
00025913 02                         Map_a933_6A5: 	dc.b $2
00025914 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025919 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002591E 00                         Map_a933_6B0: 	dc.b $0
0002591F 02                         Map_a933_6B1: 	dc.b $2
00025920 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025925 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002592A 00                         Map_a933_6BC: 	dc.b $0
0002592B 00                         Map_a933_6BD: 	dc.b $0
0002592C 00                         Map_a933_6BE: 	dc.b $0
0002592D 02                         Map_a933_6BF: 	dc.b $2
0002592E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025933 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025938 00                         Map_a933_6CA: 	dc.b $0
00025939 02                         Map_a933_6CB: 	dc.b $2
0002593A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002593F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025944 00                         Map_a933_6D6: 	dc.b $0
00025946 00                         	even
00025946 00                         	even
00025946                            
00025946                            ; ---------------------------------------------------------------------------
00025946                            ; Uncompressed graphics	loading	array for Sonic
00025946                            ; ---------------------------------------------------------------------------
00025946                            SonicDynPLC:
00025946                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025946                            DPLC_33c5:
00025946 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025948 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
0002594A 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
0002594C 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
0002594E 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00025950 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025952 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025954 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025956 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025958 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
0002595A 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
0002595C 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
0002595E 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00025960 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025962 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025964 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025966 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025968 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
0002596A 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
0002596C 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
0002596E 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00025970 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00025972 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00025974 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00025976 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00025978 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
0002597A 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
0002597C 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
0002597E 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00025980 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00025982 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00025984 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025986 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025988 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
0002598A 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
0002598C 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
0002598E 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00025990 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00025992 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00025994 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025996 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025998 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
0002599A 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
0002599C 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
0002599E 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000259A0 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000259A2 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000259A4 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000259A6 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000259A8 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000259AA 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000259AC 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000259AE 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000259B0 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000259B2 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000259B4 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000259B6 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000259B8 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000259BA 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000259BC 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000259BE 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000259C0 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000259C2 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000259C4 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000259C6 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000259C8 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000259CA 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000259CC 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000259CE 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000259D0 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
000259D2 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
000259D4 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
000259D6 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
000259D8 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
000259DA 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
000259DC 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
000259DE 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
000259E0 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
000259E2 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
000259E4 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
000259E6 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
000259E8 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
000259EA 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
000259EC 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
000259EE 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
000259F0 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
000259F2 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
000259F4 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
000259F6 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
000259F8 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
000259FA 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
000259FC 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
000259FE 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025A00 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025A02 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025A04 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025A06 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025A08 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025A0A 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025A0C 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025A0E 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025A10 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025A12 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025A14 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025A16 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025A18 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025A1A 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025A1C 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025A1E 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025A20 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025A22 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025A24 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025A26 00                         DPLC_33c5_E0: 	dc.b $0
00025A27 02                         DPLC_33c5_E1: 	dc.b $2
00025A28 F000                       	dc.b $F0, $0
00025A2A 1010                       	dc.b $10, $10
00025A2C 03                         DPLC_33c5_E6: 	dc.b $3
00025A2D 5012                       	dc.b $50, $12
00025A2F 5018                       	dc.b $50, $18
00025A31 201E                       	dc.b $20, $1E
00025A33 03                         DPLC_33c5_ED: 	dc.b $3
00025A34 5021                       	dc.b $50, $21
00025A36 5018                       	dc.b $50, $18
00025A38 201E                       	dc.b $20, $1E
00025A3A 03                         DPLC_33c5_F4: 	dc.b $3
00025A3B 5021                       	dc.b $50, $21
00025A3D 5018                       	dc.b $50, $18
00025A3F 2027                       	dc.b $20, $27
00025A41 03                         DPLC_33c5_FB: 	dc.b $3
00025A42 802A                       	dc.b $80, $2A
00025A44 2033                       	dc.b $20, $33
00025A46 2036                       	dc.b $20, $36
00025A48 04                         DPLC_33c5_102: 	dc.b $4
00025A49 7039                       	dc.b $70, $39
00025A4B 5041                       	dc.b $50, $41
00025A4D 5047                       	dc.b $50, $47
00025A4F 104D                       	dc.b $10, $4D
00025A51 02                         DPLC_33c5_10B: 	dc.b $2
00025A52 7039                       	dc.b $70, $39
00025A54 B04F                       	dc.b $B0, $4F
00025A56 02                         DPLC_33c5_110: 	dc.b $2
00025A57 505B                       	dc.b $50, $5B
00025A59 8061                       	dc.b $80, $61
00025A5B 04                         DPLC_33c5_115: 	dc.b $4
00025A5C 505B                       	dc.b $50, $5B
00025A5E 506A                       	dc.b $50, $6A
00025A60 5070                       	dc.b $50, $70
00025A62 1076                       	dc.b $10, $76
00025A64 02                         DPLC_33c5_11E: 	dc.b $2
00025A65 F4F0                       	dc.b $F4, $F0
00025A67 1500                       	dc.b $15, $0
00025A69 03                         DPLC_33c5_123: 	dc.b $3
00025A6A 7039                       	dc.b $70, $39
00025A6C 3078                       	dc.b $30, $78
00025A6E 507C                       	dc.b $50, $7C
00025A70 05                         DPLC_33c5_12A: 	dc.b $5
00025A71 5082                       	dc.b $50, $82
00025A73 5088                       	dc.b $50, $88
00025A75 208E                       	dc.b $20, $8E
00025A77 5091                       	dc.b $50, $91
00025A79 0097                       	dc.b $0, $97
00025A7B 06                         DPLC_33c5_135: 	dc.b $6
00025A7C 5082                       	dc.b $50, $82
00025A7E 1098                       	dc.b $10, $98
00025A80 309A                       	dc.b $30, $9A
00025A82 509E                       	dc.b $50, $9E
00025A84 30A4                       	dc.b $30, $A4
00025A86 00A8                       	dc.b $0, $A8
00025A88 04                         DPLC_33c5_142: 	dc.b $4
00025A89 50A9                       	dc.b $50, $A9
00025A8B 10AF                       	dc.b $10, $AF
00025A8D 70B1                       	dc.b $70, $B1
00025A8F 20B9                       	dc.b $20, $B9
00025A91 05                         DPLC_33c5_14B: 	dc.b $5
00025A92 50BC                       	dc.b $50, $BC
00025A94 30C2                       	dc.b $30, $C2
00025A96 70C6                       	dc.b $70, $C6
00025A98 20CE                       	dc.b $20, $CE
00025A9A 10D1                       	dc.b $10, $D1
00025A9C 04                         DPLC_33c5_156: 	dc.b $4
00025A9D 50BC                       	dc.b $50, $BC
00025A9F 10D3                       	dc.b $10, $D3
00025AA1 70D5                       	dc.b $70, $D5
00025AA3 20DD                       	dc.b $20, $DD
00025AA5 05                         DPLC_33c5_15F: 	dc.b $5
00025AA6 5082                       	dc.b $50, $82
00025AA8 1098                       	dc.b $10, $98
00025AAA 008E                       	dc.b $0, $8E
00025AAC 70E0                       	dc.b $70, $E0
00025AAE 20E8                       	dc.b $20, $E8
00025AB0 04                         DPLC_33c5_16A: 	dc.b $4
00025AB1 70EB                       	dc.b $70, $EB
00025AB3 50F3                       	dc.b $50, $F3
00025AB5 10F9                       	dc.b $10, $F9
00025AB7 50FB                       	dc.b $50, $FB
00025AB9 02                         DPLC_33c5_173: 	dc.b $2
00025ABA 70EB                       	dc.b $70, $EB
00025ABC B101                       	dc.b $B1, $1
00025ABE 02                         DPLC_33c5_178: 	dc.b $2
00025ABF 510D                       	dc.b $51, $D
00025AC1 8113                       	dc.b $81, $13
00025AC3 04                         DPLC_33c5_17D: 	dc.b $4
00025AC4 510D                       	dc.b $51, $D
00025AC6 511C                       	dc.b $51, $1C
00025AC8 1122                       	dc.b $11, $22
00025ACA 5124                       	dc.b $51, $24
00025ACC 02                         DPLC_33c5_186: 	dc.b $2
00025ACD 510D                       	dc.b $51, $D
00025ACF B12A                       	dc.b $B1, $2A
00025AD1 03                         DPLC_33c5_18B: 	dc.b $3
00025AD2 70EB                       	dc.b $70, $EB
00025AD4 0101                       	dc.b $1, $1
00025AD6 8136                       	dc.b $81, $36
00025AD8 06                         DPLC_33c5_192: 	dc.b $6
00025AD9 513F                       	dc.b $51, $3F
00025ADB 1145                       	dc.b $11, $45
00025ADD 1147                       	dc.b $11, $47
00025ADF 8149                       	dc.b $81, $49
00025AE1 0152                       	dc.b $1, $52
00025AE3 0153                       	dc.b $1, $53
00025AE5 06                         DPLC_33c5_19F: 	dc.b $6
00025AE6 513F                       	dc.b $51, $3F
00025AE8 2154                       	dc.b $21, $54
00025AEA 1157                       	dc.b $11, $57
00025AEC 1159                       	dc.b $11, $59
00025AEE 815B                       	dc.b $81, $5B
00025AF0 0152                       	dc.b $1, $52
00025AF2 04                         DPLC_33c5_1AC: 	dc.b $4
00025AF3 5164                       	dc.b $51, $64
00025AF5 116A                       	dc.b $11, $6A
00025AF7 816C                       	dc.b $81, $6C
00025AF9 1175                       	dc.b $11, $75
00025AFB 05                         DPLC_33c5_1B5: 	dc.b $5
00025AFC 5177                       	dc.b $51, $77
00025AFE 217D                       	dc.b $21, $7D
00025B00 1180                       	dc.b $11, $80
00025B02 7182                       	dc.b $71, $82
00025B04 218A                       	dc.b $21, $8A
00025B06 04                         DPLC_33c5_1C0: 	dc.b $4
00025B07 5177                       	dc.b $51, $77
00025B09 118D                       	dc.b $11, $8D
00025B0B 818F                       	dc.b $81, $8F
00025B0D 1198                       	dc.b $11, $98
00025B0F 05                         DPLC_33c5_1C9: 	dc.b $5
00025B10 513F                       	dc.b $51, $3F
00025B12 819A                       	dc.b $81, $9A
00025B14 1159                       	dc.b $11, $59
00025B16 11A3                       	dc.b $11, $A3
00025B18 0152                       	dc.b $1, $52
00025B1A 02                         DPLC_33c5_1D4: 	dc.b $2
00025B1B 51A5                       	dc.b $51, $A5
00025B1D B1AB                       	dc.b $B1, $AB
00025B1F 02                         DPLC_33c5_1D9: 	dc.b $2
00025B20 505B                       	dc.b $50, $5B
00025B22 B1B7                       	dc.b $B1, $B7
00025B24 02                         DPLC_33c5_1DE: 	dc.b $2
00025B25 51A5                       	dc.b $51, $A5
00025B27 B1C3                       	dc.b $B1, $C3
00025B29 02                         DPLC_33c5_1E3: 	dc.b $2
00025B2A 505B                       	dc.b $50, $5B
00025B2C B1CF                       	dc.b $B1, $CF
00025B2E 04                         DPLC_33c5_1E8: 	dc.b $4
00025B2F 51DB                       	dc.b $51, $DB
00025B31 11E1                       	dc.b $11, $E1
00025B33 B1E3                       	dc.b $B1, $E3
00025B35 01EF                       	dc.b $1, $EF
00025B37 03                         DPLC_33c5_1F1: 	dc.b $3
00025B38 51F0                       	dc.b $51, $F0
00025B3A 11F6                       	dc.b $11, $F6
00025B3C B1F8                       	dc.b $B1, $F8
00025B3E 04                         DPLC_33c5_1F8: 	dc.b $4
00025B3F 51DB                       	dc.b $51, $DB
00025B41 1204                       	dc.b $12, $4
00025B43 B206                       	dc.b $B2, $6
00025B45 01EF                       	dc.b $1, $EF
00025B47 03                         DPLC_33c5_201: 	dc.b $3
00025B48 51F0                       	dc.b $51, $F0
00025B4A 11F6                       	dc.b $11, $F6
00025B4C B212                       	dc.b $B2, $12
00025B4E 02                         DPLC_33c5_208: 	dc.b $2
00025B4F 521E                       	dc.b $52, $1E
00025B51 B224                       	dc.b $B2, $24
00025B53 02                         DPLC_33c5_20D: 	dc.b $2
00025B54 510D                       	dc.b $51, $D
00025B56 B230                       	dc.b $B2, $30
00025B58 02                         DPLC_33c5_212: 	dc.b $2
00025B59 521E                       	dc.b $52, $1E
00025B5B B23C                       	dc.b $B2, $3C
00025B5D 02                         DPLC_33c5_217: 	dc.b $2
00025B5E 510D                       	dc.b $51, $D
00025B60 B248                       	dc.b $B2, $48
00025B62 04                         DPLC_33c5_21C: 	dc.b $4
00025B63 5254                       	dc.b $52, $54
00025B65 125A                       	dc.b $12, $5A
00025B67 B25C                       	dc.b $B2, $5C
00025B69 0268                       	dc.b $2, $68
00025B6B 02                         DPLC_33c5_225: 	dc.b $2
00025B6C 7269                       	dc.b $72, $69
00025B6E B271                       	dc.b $B2, $71
00025B70 04                         DPLC_33c5_22A: 	dc.b $4
00025B71 5254                       	dc.b $52, $54
00025B73 127D                       	dc.b $12, $7D
00025B75 B27F                       	dc.b $B2, $7F
00025B77 0268                       	dc.b $2, $68
00025B79 02                         DPLC_33c5_233: 	dc.b $2
00025B7A 7269                       	dc.b $72, $69
00025B7C B28B                       	dc.b $B2, $8B
00025B7E 01                         DPLC_33c5_238: 	dc.b $1
00025B7F F297                       	dc.b $F2, $97
00025B81 01                         DPLC_33c5_23B: 	dc.b $1
00025B82 F2A7                       	dc.b $F2, $A7
00025B84 01                         DPLC_33c5_23E: 	dc.b $1
00025B85 F2B7                       	dc.b $F2, $B7
00025B87 01                         DPLC_33c5_241: 	dc.b $1
00025B88 F2C7                       	dc.b $F2, $C7
00025B8A 01                         DPLC_33c5_244: 	dc.b $1
00025B8B F2D7                       	dc.b $F2, $D7
00025B8D 02                         DPLC_33c5_247: 	dc.b $2
00025B8E B2E7                       	dc.b $B2, $E7
00025B90 22F3                       	dc.b $22, $F3
00025B92 01                         DPLC_33c5_24C: 	dc.b $1
00025B93 F2F6                       	dc.b $F2, $F6
00025B95 02                         DPLC_33c5_24F: 	dc.b $2
00025B96 B306                       	dc.b $B3, $6
00025B98 2312                       	dc.b $23, $12
00025B9A 01                         DPLC_33c5_254: 	dc.b $1
00025B9B F315                       	dc.b $F3, $15
00025B9D 02                         DPLC_33c5_257: 	dc.b $2
00025B9E 5325                       	dc.b $53, $25
00025BA0 B32B                       	dc.b $B3, $2B
00025BA2 04                         DPLC_33c5_25C: 	dc.b $4
00025BA3 5337                       	dc.b $53, $37
00025BA5 733D                       	dc.b $73, $3D
00025BA7 1345                       	dc.b $13, $45
00025BA9 0347                       	dc.b $3, $47
00025BAB 02                         DPLC_33c5_265: 	dc.b $2
00025BAC D348                       	dc.b $D3, $48
00025BAE 34EC                       	dc.b $34, $EC
00025BB0 02                         DPLC_33c5_26A: 	dc.b $2
00025BB1 F528                       	dc.b $F5, $28
00025BB3 0538                       	dc.b $5, $38
00025BB5 02                         DPLC_33c5_26F: 	dc.b $2
00025BB6 F539                       	dc.b $F5, $39
00025BB8 0549                       	dc.b $5, $49
00025BBA 02                         DPLC_33c5_274: 	dc.b $2
00025BBB E356                       	dc.b $E3, $56
00025BBD 054A                       	dc.b $5, $4A
00025BBF 01                         DPLC_33c5_279: 	dc.b $1
00025BC0 8365                       	dc.b $83, $65
00025BC2 03                         DPLC_33c5_27C: 	dc.b $3
00025BC3 736E                       	dc.b $73, $6E
00025BC5 0376                       	dc.b $3, $76
00025BC7 3377                       	dc.b $33, $77
00025BC9 02                         DPLC_33c5_283: 	dc.b $2
00025BCA E37B                       	dc.b $E3, $7B
00025BCC 054A                       	dc.b $5, $4A
00025BCE 01                         DPLC_33c5_288: 	dc.b $1
00025BCF D561                       	dc.b $D5, $61
00025BD1 04                         DPLC_33c5_28B: 	dc.b $4
00025BD2 B399                       	dc.b $B3, $99
00025BD4 33A5                       	dc.b $33, $A5
00025BD6 03A9                       	dc.b $3, $A9
00025BD8 03AA                       	dc.b $3, $AA
00025BDA 04                         DPLC_33c5_294: 	dc.b $4
00025BDB B3AB                       	dc.b $B3, $AB
00025BDD 33B7                       	dc.b $33, $B7
00025BDF 03BB                       	dc.b $3, $BB
00025BE1 03BC                       	dc.b $3, $BC
00025BE3 05                         DPLC_33c5_29D: 	dc.b $5
00025BE4 83BD                       	dc.b $83, $BD
00025BE6 13C6                       	dc.b $13, $C6
00025BE8 53C8                       	dc.b $53, $C8
00025BEA 13CE                       	dc.b $13, $CE
00025BEC 03D0                       	dc.b $3, $D0
00025BEE 05                         DPLC_33c5_2A8: 	dc.b $5
00025BEF 83D1                       	dc.b $83, $D1
00025BF1 13DA                       	dc.b $13, $DA
00025BF3 53C8                       	dc.b $53, $C8
00025BF5 13CE                       	dc.b $13, $CE
00025BF7 03D0                       	dc.b $3, $D0
00025BF9 02                         DPLC_33c5_2B3: 	dc.b $2
00025BFA 83DC                       	dc.b $83, $DC
00025BFC 73E5                       	dc.b $73, $E5
00025BFE 03                         DPLC_33c5_2B8: 	dc.b $3
00025BFF 83ED                       	dc.b $83, $ED
00025C01 23F6                       	dc.b $23, $F6
00025C03 13F9                       	dc.b $13, $F9
00025C05 02                         DPLC_33c5_2BF: 	dc.b $2
00025C06 83FB                       	dc.b $83, $FB
00025C08 7404                       	dc.b $74, $4
00025C0A 03                         DPLC_33c5_2C4: 	dc.b $3
00025C0B 83ED                       	dc.b $83, $ED
00025C0D 240C                       	dc.b $24, $C
00025C0F 140F                       	dc.b $14, $F
00025C11 02                         DPLC_33c5_2CB: 	dc.b $2
00025C12 5411                       	dc.b $54, $11
00025C14 B417                       	dc.b $B4, $17
00025C16 03                         DPLC_33c5_2D0: 	dc.b $3
00025C17 8423                       	dc.b $84, $23
00025C19 342C                       	dc.b $34, $2C
00025C1B 0430                       	dc.b $4, $30
00025C1D 03                         DPLC_33c5_2D7: 	dc.b $3
00025C1E 7431                       	dc.b $74, $31
00025C20 1439                       	dc.b $14, $39
00025C22 B43B                       	dc.b $B4, $3B
00025C24 05                         DPLC_33c5_2DE: 	dc.b $5
00025C25 7447                       	dc.b $74, $47
00025C27 144F                       	dc.b $14, $4F
00025C29 5451                       	dc.b $54, $51
00025C2B 3457                       	dc.b $34, $57
00025C2D 045B                       	dc.b $4, $5B
00025C2F 05                         DPLC_33c5_2E9: 	dc.b $5
00025C30 745C                       	dc.b $74, $5C
00025C32 144F                       	dc.b $14, $4F
00025C34 5464                       	dc.b $54, $64
00025C36 3457                       	dc.b $34, $57
00025C38 045B                       	dc.b $4, $5B
00025C3A 02                         DPLC_33c5_2F4: 	dc.b $2
00025C3B 246A                       	dc.b $24, $6A
00025C3D F46D                       	dc.b $F4, $6D
00025C3F 03                         DPLC_33c5_2F9: 	dc.b $3
00025C40 247D                       	dc.b $24, $7D
00025C42 B480                       	dc.b $B4, $80
00025C44 248C                       	dc.b $24, $8C
00025C46 01                         DPLC_33c5_300: 	dc.b $1
00025C47 B48F                       	dc.b $B4, $8F
00025C49 01                         DPLC_33c5_303: 	dc.b $1
00025C4A 549B                       	dc.b $54, $9B
00025C4C 01                         DPLC_33c5_306: 	dc.b $1
00025C4D 14A1                       	dc.b $14, $A1
00025C4F 02                         DPLC_33c5_309: 	dc.b $2
00025C50 E356                       	dc.b $E3, $56
00025C52 054A                       	dc.b $5, $4A
00025C54 03                         DPLC_33c5_30E: 	dc.b $3
00025C55 736E                       	dc.b $73, $6E
00025C57 0376                       	dc.b $3, $76
00025C59 3377                       	dc.b $33, $77
00025C5B 03                         DPLC_33c5_315: 	dc.b $3
00025C5C B4A3                       	dc.b $B4, $A3
00025C5E 14AF                       	dc.b $14, $AF
00025C60 34B1                       	dc.b $34, $B1
00025C62 03                         DPLC_33c5_31C: 	dc.b $3
00025C63 54B5                       	dc.b $54, $B5
00025C65 B4BB                       	dc.b $B4, $BB
00025C67 1074                       	dc.b $10, $74
00025C69 02                         DPLC_33c5_323: 	dc.b $2
00025C6A F4C7                       	dc.b $F4, $C7
00025C6C 24D7                       	dc.b $24, $D7
00025C6E 02                         DPLC_33c5_328: 	dc.b $2
00025C6F F4DA                       	dc.b $F4, $DA
00025C71 14EA                       	dc.b $14, $EA
00025C73 02                         DPLC_33c5_32D: 	dc.b $2
00025C74 F502                       	dc.b $F5, $2
00025C76 2512                       	dc.b $25, $12
00025C78 02                         DPLC_33c5_332: 	dc.b $2
00025C79 F515                       	dc.b $F5, $15
00025C7B 2525                       	dc.b $25, $25
00025C7D 02                         DPLC_33c5_337: 	dc.b $2
00025C7E F54B                       	dc.b $F5, $4B
00025C80 755B                       	dc.b $75, $5B
00025C82 00                         DPLC_33c5_33C: 	dc.b $0
00025C83 00                         DPLC_33c5_33D: 	dc.b $0
00025C84 00                         DPLC_33c5_33E: 	dc.b $0
00025C85 00                         DPLC_33c5_33F: 	dc.b $0
00025C86 02                         DPLC_33c5_340: 	dc.b $2
00025C87 F4DA                       	dc.b $F4, $DA
00025C89 14EA                       	dc.b $14, $EA
00025C8B 00                         DPLC_33c5_345: 	dc.b $0
00025C8C 02                         DPLC_33c5_346: 	dc.b $2
00025C8D F4DA                       	dc.b $F4, $DA
00025C8F 14EA                       	dc.b $14, $EA
00025C91 00                         DPLC_33c5_34B: 	dc.b $0
00025C92 00                         DPLC_33c5_34C: 	dc.b $0
00025C93 00                         DPLC_33c5_34D: 	dc.b $0
00025C94 02                         DPLC_33c5_34E: 	dc.b $2
00025C95 F4DA                       	dc.b $F4, $DA
00025C97 14EA                       	dc.b $14, $EA
00025C99 00                         DPLC_33c5_353: 	dc.b $0
00025C9A 02                         DPLC_33c5_354: 	dc.b $2
00025C9B F4DA                       	dc.b $F4, $DA
00025C9D 14EA                       	dc.b $14, $EA
00025C9F 00                         DPLC_33c5_359: 	dc.b $0
00025CA0 00                         DPLC_33c5_35A: 	dc.b $0
00025CA1 00                         DPLC_33c5_35B: 	dc.b $0
00025CA2 02                         DPLC_33c5_35C: 	dc.b $2
00025CA3 F4DA                       	dc.b $F4, $DA
00025CA5 14EA                       	dc.b $14, $EA
00025CA7 00                         DPLC_33c5_361: 	dc.b $0
00025CA8 02                         DPLC_33c5_362: 	dc.b $2
00025CA9 F4DA                       	dc.b $F4, $DA
00025CAB 14EA                       	dc.b $14, $EA
00025CAD 00                         DPLC_33c5_367: 	dc.b $0
00025CAE                            	even
00025CAE                            	even
00025CAE                            
00025CAE                            ; ---------------------------------------------------------------------------
00025CAE                            ; Uncompressed graphics	- Sonic
00025CAE                            ; ---------------------------------------------------------------------------
00025CAE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030A8E                            		even
00030A8E                            ; ---------------------------------------------------------------------------
00030A8E                            ; Compressed graphics - various
00030A8E                            ; ---------------------------------------------------------------------------
00030A8E                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030B92                            		even
00030B92                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030BCC                            		even
00030BCC                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030D62                            		even
00030D62                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030EAA                            		even
00030EAA                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030FB4                            		even
00030FB4                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00031006                            		even
00031006                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003124E                            		even
0003124E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000313D4                            		even
000313D4                            ; ---------------------------------------------------------------------------
000313D4                            ; Sprite mappings - walls of the special stage
000313D4                            ; ---------------------------------------------------------------------------
000313D4                            Map_SSWalls:
000313D4                            	include "_maps\SSwalls.asm"
000313D4                            ; ---------------------------------------------------------------------------
000313D4                            ; Sprite mappings - walls of the special stage
000313D4                            ; ---------------------------------------------------------------------------
000313D4 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000313D8 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000313DC 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000313E0 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000313E4 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000313E8 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000313EC 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000313F0 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000313F4 01                         byte_2C584:	dc.b 1
000313F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000313FA 01                         byte_2C58A:	dc.b 1
000313FB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00031400 01                         byte_2C590:	dc.b 1
00031401 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031406 01                         byte_2C596:	dc.b 1
00031407 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003140C 01                         byte_2C59C:	dc.b 1
0003140D F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031412 01                         byte_2C5A2:	dc.b 1
00031413 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031418 01                         byte_2C5A8:	dc.b 1
00031419 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003141E 01                         byte_2C5AE:	dc.b 1
0003141F F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031424 01                         byte_2C5B4:	dc.b 1
00031425 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003142A 01                         byte_2C5BA:	dc.b 1
0003142B F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00031430 01                         byte_2C5C0:	dc.b 1
00031431 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031436 01                         byte_2C5C6:	dc.b 1
00031437 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003143C 01                         byte_2C5CC:	dc.b 1
0003143D F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00031442 01                         byte_2C5D2:	dc.b 1
00031443 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031448 01                         byte_2C5D8:	dc.b 1
00031449 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003144E 01                         byte_2C5DE:	dc.b 1
0003144F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00031454                            		even
00031454                            		even
00031454                            ; ---------------------------------------------------------------------------
00031454                            ; Compressed graphics - special stage
00031454                            ; ---------------------------------------------------------------------------
00031454                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031D8C                            		even
00031D8C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031EDA                            		even
00031EDA                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003336C                            		even
0003336C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003366C                            		even
0003366C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033B60                            		even
00033B60                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033C4E                            		even
00033C4E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033D1E                            		even
00033D1E                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033E14                            		even
00033E14                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033E72                            		even
00033E72                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033F04                            		even
00033F04                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033FC6                            		even
00033FC6                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00034094                            		even
00034094                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00034160                            		even
00034160                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034228                            		even
00034228                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000342F2                            		even
000342F2                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000343C2                            		even
000343C2                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000345B6                            		even
000345B6                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003471E                            		even
0003471E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000347CE                            		even
000347CE                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000348A8                            		even
000348A8                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003492C                            		even
0003492C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034AAA                            		even
00034AAA                            ; ---------------------------------------------------------------------------
00034AAA                            ; Compressed graphics - GHZ stuff
00034AAA                            ; ---------------------------------------------------------------------------
00034AAA                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034AF4                            		even
00034AF4                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034C0E                            		even
00034C0E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034CFA                            		even
00034CFA                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034D42                            		even
00034D42                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034EE0                            		even
00034EE0                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034F9C                            		even
00034F9C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000351B0                            		even
000351B0                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000352DC                            		even
000352DC                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003540A                            		even
0003540A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000354A8                            		even
000354A8                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035508                            		even
00035508                            ; ---------------------------------------------------------------------------
00035508                            ; Compressed graphics - LZ stuff
00035508                            ; ---------------------------------------------------------------------------
00035508                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003562C                            		even
0003562C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035E20                            		even
00035E20                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035FA0                            		even
00035FA0                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003610A                            		even
0003610A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036760                            		even
00036760                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036816                            		even
00036816                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000368B8                            		even
000368B8                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036A14                            		even
00036A14                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036A78                            		even
00036A78                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036BCA                            		even
00036BCA                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000370AC                            		even
000370AC                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003721C                            		even
0003721C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000374D4                            		even
000374D4                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003760C                            		even
0003760C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037736                            		even
00037736                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037846                            		even
00037846                            ; ---------------------------------------------------------------------------
00037846                            ; Compressed graphics - MZ stuff
00037846                            ; ---------------------------------------------------------------------------
00037846                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037AD4                            		even
00037AD4                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037B92                            		even
00037B92                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037C4A                            		even
00037C4A                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037C9E                            		even
00037C9E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037F7C                            		even
00037F7C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038892                            		even
00038892                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000389F6                            		even
000389F6                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038A7E                            		even
00038A7E                            ; ---------------------------------------------------------------------------
00038A7E                            ; Compressed graphics - SLZ stuff
00038A7E                            ; ---------------------------------------------------------------------------
00038A7E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038CBA                            		even
00038CBA                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038E00                            		even
00038E00                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00039044                            		even
00039044                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000390A6                            		even
000390A6                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00039188                            		even
00039188                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003936A                            		even
0003936A                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00039476                            		even
00039476                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003951A                            		even
0003951A                            ; ---------------------------------------------------------------------------
0003951A                            ; Compressed graphics - SYZ stuff
0003951A                            ; ---------------------------------------------------------------------------
0003951A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00039684                            		even
00039684                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000396E6                            		even
000396E6                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000397C8                            		even
000397C8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039A56                            		even
00039A56                            ; ---------------------------------------------------------------------------
00039A56                            ; Compressed graphics - SBZ stuff
00039A56                            ; ---------------------------------------------------------------------------
00039A56                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039AAA                            		even
00039AAA                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039D46                            		even
00039D46                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039F4A                            		even
00039F4A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A0E8                            		even
0003A0E8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A418                            		even
0003A418                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A5F6                            		even
0003A5F6                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A64E                            		even
0003A64E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A818 00                         		even
0003A818                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A916                            		even
0003A916                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003AAA2                            		even
0003AAA2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AAF2                            		even
0003AAF2                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AB4A                            		even
0003AB4A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AC46                            		even
0003AC46                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AD5C                            		even
0003AD5C                            ; ---------------------------------------------------------------------------
0003AD5C                            ; Compressed graphics - enemies
0003AD5C                            ; ---------------------------------------------------------------------------
0003AD5C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B1CA 00                         		even
0003B1CA                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B374 00                         		even
0003B374                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B736 00                         		even
0003B736                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B91E                            		even
0003B91E                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BAD6 00                         		even
0003BAD6                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BC20                            		even
0003BC20                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BEAA                            		even
0003BEAA                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C4CE                            		even
0003C4CE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C6C4                            		even
0003C6C4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CCE2                            		even
0003CCE2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D0E2 00                         		even
0003D0E2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D3DE                            		even
0003D3DE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D626                            		even
0003D626                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D8BE                            		even
0003D8BE                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DA9C                            		even
0003DA9C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DC2A                            		even
0003DC2A                            ; ---------------------------------------------------------------------------
0003DC2A                            ; Compressed graphics - various
0003DC2A                            ; ---------------------------------------------------------------------------
0003DC2A                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E15A                            		even
0003E15A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E250                            		even
0003E250                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E356                            		even
0003E356                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E44A                            		even
0003E44A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E98E                            		even
0003E98E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EFF4                            		even
0003EFF4                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F0A4                            		even
0003F0A4                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F236                            		even
0003F236                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F34A                            		even
0003F34A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F41C                            		even
0003F41C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F898                            		even
0003F898                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F958                            		even
0003F958                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FACC                            		even
0003FACC                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FDCE                            		even
0003FDCE                            ; ---------------------------------------------------------------------------
0003FDCE                            ; Compressed graphics - continue screen
0003FDCE                            ; ---------------------------------------------------------------------------
0003FDCE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0004007E                            		even
0004007E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000402B8                            		even
000402B8                            ; ---------------------------------------------------------------------------
000402B8                            ; Compressed graphics - animals
000402B8                            ; ---------------------------------------------------------------------------
000402B8                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040410                            		even
00040410                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004056C                            		even
0004056C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000406E8                            		even
000406E8                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040804                            		even
00040804                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004093A                            		even
0004093A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040A74                            		even
00040A74                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040BD0                            		even
00040BD0                            ; ---------------------------------------------------------------------------
00040BD0                            ; Compressed graphics - primary patterns and block mappings
00040BD0                            ; ---------------------------------------------------------------------------
00040BD0                            Blk16_GHZ:	incbin	map16\ghz.bin
000414E4                            		even
000414E4                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042DF2                            		even
00042DF2                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00044172                            		even
00044172                            Blk256_GHZ:	incbin	map256\ghz.bin
000465AC                            		even
000465AC                            Blk16_LZ:	incbin	map16\lz.bin
00046CE6                            		even
00046CE6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004913A                            		even
0004913A                            Blk256_LZ:	incbin	map256\lz.bin
0004BABA                            		even
0004BABA                            Blk16_MZ:	incbin	map16\mz.bin
0004C222                            		even
0004C222                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EB5E                            		even
0004EB5E                            Blk256_MZ:	incbin	map256\mz.bin
00050374                            		even
00050374                            Blk16_SLZ:	incbin	map16\slz.bin
00050A3E                            		even
00050A3E                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052992                            		even
00052992                            Blk256_SLZ:	incbin	map256\slz.bin
0005300C                            		even
0005300C                            Blk16_SYZ:	incbin	map16\syz.bin
00053C32                            		even
00053C32                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000581C4                            		even
000581C4                            Blk256_SYZ:	incbin	map256\syz.bin
0005A220                            		even
0005A220                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B168                            		even
0005B168                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DB2C                            		even
0005DB2C                            Blk256_SBZ:	incbin	map256\sbz.bin
00060622                            		even
00060622                            Blk16_BHZ:	incbin	map16\bhz.bin
00060EB0                            		even
00060EB0                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00063CAE                            		even
00063CAE                            Blk256_BHZ:	incbin	map256\bhz.bin
000658DC                            		even
000658DC                            ; ---------------------------------------------------------------------------
000658DC                            ; Compressed graphics - bosses and ending sequence
000658DC                            ; ---------------------------------------------------------------------------
000658DC                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000660F6 00                         		even
000660F6                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00066744                            		even
00066744                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000667BE                            		even
000667BE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066AA8                            		even
00066AA8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006732C                            		even
0006732C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00068082 00                         		even
00068082                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000687EA                            		even
000687EA                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068D6A                            		even
00068D6A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068E8A                            		even
00068E8A                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00069088                            		even
00069088                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A266                            		even
0006A266                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006ABAA                            		even
0006ABAA                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AF80                            		even
0006AF80                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B510                            		even
0006B510                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B798                            		even
0006B798                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BD86 00                         		even
0006BD86                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C00E                            		even
0006C00E                            		incbin	misc\padding2.bin
0006C112                            		even
0006C112                            ; ---------------------------------------------------------------------------
0006C112                            ; Collision data
0006C112                            ; ---------------------------------------------------------------------------
0006C112                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C212                            		even
0006C212                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D212                            		even
0006D212                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E212                            		even
0006E212                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E3CA 00                         		even
0006E3CA                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E532                            		even
0006E532                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E6C2 00                         		even
0006E6C2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E8B6                            		even
0006E8B6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EABC                            		even
0006EABC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ED5A                            		even
0006ED5A                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EEE6                            		even
0006EEE6                            ; ---------------------------------------------------------------------------
0006EEE6                            ; Special layouts
0006EEE6                            ; ---------------------------------------------------------------------------
0006EEE6                            SS_1:		incbin	sslayout\1.bin
0006F12E                            		even
0006F12E                            SS_2:		incbin	sslayout\2.bin
0006F4E6                            		even
0006F4E6                            SS_3:		incbin	sslayout\3.bin
0006F842                            		even
0006F842                            SS_4:		incbin	sslayout\4.bin
0006FD1C                            		even
0006FD1C                            SS_5:		incbin	sslayout\5.bin
000701CC                            		even
000701CC                            SS_6:		incbin	sslayout\6.bin
000704BE                            		even
000704BE                            ; ---------------------------------------------------------------------------
000704BE                            ; Animated uncompressed graphics
000704BE                            ; ---------------------------------------------------------------------------
000704BE                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000706BE                            		even
000706BE                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070ABE                            		even
00070ABE                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070F3E                            		even
00070F3E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007123E                            		even
0007123E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007183E                            		even
0007183E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071B3E                            		even
00071B3E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000725BE                            		even
000725BE                            
000725BE                            ; ---------------------------------------------------------------------------
000725BE                            ; Level	layout index
000725BE                            ; ---------------------------------------------------------------------------
000725BE 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000725C4 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000725CA 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000725D0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000725D6 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000725DC 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000725E2 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000725E8 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000725EE 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000725F4 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000725FA 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00072600 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072606 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007260C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072612 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072618 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007261E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00072624 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007262A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00072630 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00072636 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007263C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00072642 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00072648 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007264E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072654 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007265A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072660 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072666 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007266C 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00072672 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00072678 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007267E                            
0007267E                            Level_GHZ1:	incbin	levels\ghz1.bin
00072770                            		even
00072770 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072774                            Level_GHZ2:	incbin	levels\ghz2.bin
0007283C                            		even
0007283C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072840                            Level_GHZ3:	incbin	levels\ghz3.bin
00072962                            		even
00072962                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072984                            		even
00072984 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072988 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007298C                            
0007298C                            Level_LZ1:	incbin	levels\lz1.bin
00072A8E                            		even
00072A8E                            Level_LZbg:	incbin	levels\lzbg.bin
00072B90                            		even
00072B90 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072B94                            Level_LZ2:	incbin	levels\lz2.bin
00072C2E                            		even
00072C2E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072C32                            Level_LZ3:	incbin	levels\lz3.bin
00072D4C                            		even
00072D4C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072D50                            Level_SBZ3:	incbin	levels\sbz3.bin
00072E0A                            		even
00072E0A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072E0E                            
00072E0E                            Level_MZ1:	incbin	levels\mz1.bin
00072EAC                            		even
00072EAC                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072F26                            		even
00072F26                            Level_MZ2:	incbin	levels\mz2.bin
00072FCA                            		even
00072FCA                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007305C                            		even
0007305C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00073060                            Level_MZ3:	incbin	levels\mz3.bin
00073142                            		even
00073142                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000731E6 00                         		even
000731E6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000731EA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000731EE                            
000731EE                            Level_SLZ1:	incbin	levels\slz1.bin
00073300                            		even
00073300                            Level_SLZbg:	incbin	levels\slzbg.bin
0007331A                            		even
0007331A                            Level_SLZ2:	incbin	levels\slz2.bin
0007340A                            		even
0007340A                            Level_SLZ3:	incbin	levels\slz3.bin
00073524                            		even
00073524 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073528                            
00073528                            Level_SYZ1:	incbin	levels\syz1.bin
000735E4 00                         		even
000735E4                            Level_SYZbg:	incbin	levels\syzbg.bin
0007361E                            		even
0007361E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00073622                            Level_SYZ2:	incbin	levels\syz2.bin
00073726                            		even
00073726 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007372A                            Level_SYZ3:	incbin	levels\syz3.bin
00073884 00                         		even
00073884 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073888 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007388C                            
0007388C                            Level_SBZ1:	incbin	levels\sbz1.bin
000739AE                            		even
000739AE                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000739EC                            		even
000739EC                            Level_SBZ2:	incbin	levels\sbz2.bin
00073B2E                            		even
00073B2E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073C98                            		even
00073C98 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073C9C 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073CA0                            Level_End:	incbin	levels\ending.bin
00073CD0 00                         		even
00073CD0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073CD4                            Level_BHZ1:	incbin	levels\bhz1.bin
00073DC6                            		even
00073DC6                            
00073DC6                            Level_BHZ2:	incbin	levels\bhz2.bin
00073E8E                            		even
00073E8E                            
00073E8E                            Level_BHZ3:	incbin	levels\bhz3.bin
00073FB0                            		even
00073FB0                            Level_BHZbg:	incbin	levels\bhzbg.bin
000740B2                            		even
000740B2                            ; ---------------------------------------------------------------------------
000740B2                            ; Animated uncompressed giant ring graphics
000740B2                            ; ---------------------------------------------------------------------------
000740B2                            Art_BigRing:	incbin	artunc\bigring.bin
00074CF2                            		even
00074CF2                            
00074CF2                            		incbin	misc\padding3.bin
00074D8E                            		even
00074D8E                            
00074D8E                            ; ---------------------------------------------------------------------------
00074D8E                            ; Sprite locations index
00074D8E                            ; ---------------------------------------------------------------------------
00074D8E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D92 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D96 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D9A 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D9E 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DA2 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DA6 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DAA 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DAE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DB2 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DB6 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DBA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DBE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DC2 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DC6 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DCA 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DCE 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DD2 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DD6 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DDA 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DDE 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DE2 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DE6 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DEA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DEE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DF2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DF6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DFA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DFE 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E02 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E06 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E0A 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E0E                            ObjPos_LZxpf_Index:
00074E0E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074E12 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00074E16 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00074E1A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074E1E                            
00074E1E                            ObjPos_SBZ1pf_Index:
00074E1E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074E22 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00074E26 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00074E2A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074E2E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074E34                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000756DA                            		even
000756DA                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000759A4                            		even
000759A4                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00076370                            		even
00076370                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00076718                            		even
00076718                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076A4E                            		even
00076A4E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076F64                            		even
00076F64                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000773FC                            		even
000773FC                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007742E                            		even
0007742E                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077460                            		even
00077460                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00077492                            		even
00077492                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000774C4                            		even
000774C4                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007750E                            		even
0007750E                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007754C                            		even
0007754C                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00077846                            		even
00077846                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077CF0                            		even
00077CF0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078266                            		even
00078266                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078290                            		even
00078290                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000786F8                            		even
000786F8                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078CDA                            		even
00078CDA                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007934C                            		even
0007934C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000798B6                            		even
000798B6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079EBC                            		even
00079EBC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A5FA                            		even
0007A5FA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007ACD8                            		even
0007ACD8                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AD20                            		even
0007AD20                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AD52                            		even
0007AD52                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007AD84                            		even
0007AD84                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007ADB6                            		even
0007ADB6                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007ADE8                            		even
0007ADE8                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AE1A                            		even
0007AE1A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AE52                            		even
0007AE52                            ObjPos_End:	incbin	objpos\ending.bin
0007AFAE                            		even
0007AFAE                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B5C0                            		even
0007B5C0                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BB84                            		even
0007BB84                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C23E                            		even
0007C23E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C244                            ; ---------------------------------------------------------------------------
0007C244                            		incbin	misc\padding4.bin
0007C86E                            		even
0007C86E                            
0007C86E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C872 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0007C876 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
0007C87A 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
0007C87E 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
0007C882 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0007C886 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C88A                            ; ---------------------------------------------------------------------------
0007C88A                            ; PSG instruments used in music
0007C88A                            ; ---------------------------------------------------------------------------
0007C88A 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C896 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C8A2 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C8AE                            
0007C8AE 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C8BE 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C8C5                            
0007C8C5 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C8CC                            
0007C8CC 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C8DC 80                                     dc.b    $80
0007C8DD                            
0007C8DD 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C8E8                            
0007C8E8 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C8F8 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C908 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C912                            
0007C912 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C921                            
0007C921 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C931 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C93D                            
0007C93D 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C94D 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C95D 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C965                            
0007C965 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C975 80                                     dc.b    $80
0007C976                            
0007C976 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C97E                            ; ---------------------------------------------------------------------------
0007C97E                            ; Music	Pointers
0007C97E                            ; ---------------------------------------------------------------------------
0007C97E                            MusicIndex:	
0007C97E 0000 0000                  		dc.l Music9F ; test
0007C982 0000 0000                  		dc.l Music92 ; test
0007C986                            
0007C986                            MusicIndex80:
0007C986 0000 0000 0000 0000        		dc.l Music81, Music82
0007C98E 0000 0000 0000 0000        		dc.l Music83, Music84
0007C996 0000 0000 0000 0000        		dc.l Music85, Music86
0007C99E 0000 0000 0000 0000        		dc.l Music87, Music88
0007C9A6 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C9AE 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C9B6 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C9BE 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C9C6 0000 0000 0000 0000        		dc.l Music91, Music92
0007C9CE 0000 0000 0000 0000        		dc.l Music93, Music94
0007C9D6 0000 0000 0000 0000        		dc.l Music95, Music96
0007C9DE 0000 0000 0000 0000        		dc.l Music97, Music98
0007C9E6 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C9EE 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C9F6 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C9FE 0000 0000                  		dc.l Music9F
0007CA02                            ; ---------------------------------------------------------------------------
0007CA02                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
0007CA02                            ; ---------------------------------------------------------------------------
0007CA02                            SoundTypes:			
0007CA02 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $01
0007CA12 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $10
0007CA22 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $20
0007CA32 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $30
0007CA42 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $40
0007CA52 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $50
0007CA62 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $60
0007CA72 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $70
0007CA82 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $80
0007CA92 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $90
0007CAA2 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$60,$70	; $A0
0007CAB2 7070 7060 7070 7070 7070+  		dc.b $70,$70,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0007CAC2 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0007CAD2 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
0007CAE2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $E0
0007CAF2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; $F0
0007CB02                            		even
0007CB02                            
0007CB02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB02                            
0007CB02                            
0007CB02                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007CB02                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007CB02 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0007CB08 6700                       		beq.s	@main
0007CB0A 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007CB0C 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007CB10 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007CB14 4840                       		swap	d0
0007CB16 4A40                       		tst.w	d0
0007CB18 6600                       		bne.s	@main
0007CB1A 6100 0000                  		bsr.w	@main
0007CB1E                            @main:
0007CB1E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007CB26 4E71                       		nop
0007CB28 4E71                       		nop
0007CB2A 4E71                       		nop
0007CB2C                            ; loc_71B5A:
0007CB2C                            @wait:
0007CB2C 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007CB34 66F6                       		bne.s	@wait
0007CB36                            
0007CB36 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007CB3E 6700                       		beq.s	loc_71B82
0007CB40 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CB48 4E71                       		nop
0007CB4A 4E71                       		nop
0007CB4C 4E71                       		nop
0007CB4E 4E71                       		nop
0007CB50 4E71                       		nop
0007CB52 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007CB54                            ; ===========================================================================
0007CB54                            
0007CB54                            loc_71B82:
0007CB54 4DF9 00FF F000             		lea	($FFF000).l,a6
0007CB5A 422E 000E                  		clr.b	$E(a6)
0007CB5E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007CB62 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007CB66 532E 0001                  		subq.b	#1,1(a6)
0007CB6A 6600                       		bne.s	loc_71B9E
0007CB6C 4EBA 0000                  		jsr	sub_7260C(pc)
0007CB70                            
0007CB70                            loc_71B9E:
0007CB70 102E 0004                  		move.b	4(a6),d0
0007CB74 6700                       		beq.s	loc_71BA8
0007CB76 4EBA 0000                  		jsr	sub_72504(pc)
0007CB7A                            
0007CB7A                            loc_71BA8:
0007CB7A 4A2E 0024                  		tst.b	$24(a6)
0007CB7E 6700                       		beq.s	loc_71BB2
0007CB80 4EBA 0000                  		jsr	sub_7267C(pc)
0007CB84                            
0007CB84                            loc_71BB2:
0007CB84 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CB88 6700                       		beq.s	loc_71BBC	; if not, branch
0007CB8A 4EBA 0000                  		jsr	Sound_Play(pc)
0007CB8E                            
0007CB8E                            loc_71BBC:
0007CB8E 4BEE 0040                  		lea	$40(a6),a5
0007CB92 4A15                       		tst.b	(a5)
0007CB94 6A00                       		bpl.s	loc_71BD4
0007CB96 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CB9A                            
0007CB9A                            loc_71BD4:
0007CB9A 422E 0008                  		clr.b	8(a6)
0007CB9E 7E05                       		moveq	#5,d7
0007CBA0                            
0007CBA0                            loc_71BDA:
0007CBA0 DAFC 0030                  		adda.w	#$30,a5
0007CBA4 4A15                       		tst.b	(a5)
0007CBA6 6A00                       		bpl.s	loc_71BE6
0007CBA8 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBAC                            
0007CBAC                            loc_71BE6:
0007CBAC 51CF FFF2                  		dbf	d7,loc_71BDA
0007CBB0                            
0007CBB0 7E02                       		moveq	#2,d7
0007CBB2                            
0007CBB2                            loc_71BEC:
0007CBB2 DAFC 0030                  		adda.w	#$30,a5
0007CBB6 4A15                       		tst.b	(a5)
0007CBB8 6A00                       		bpl.s	loc_71BF8
0007CBBA 4EBA 0000                  		jsr	sub_72850(pc)
0007CBBE                            
0007CBBE                            loc_71BF8:
0007CBBE 51CF FFF2                  		dbf	d7,loc_71BEC
0007CBC2                            
0007CBC2 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CBC8 7E02                       		moveq	#2,d7
0007CBCA                            
0007CBCA                            loc_71C04:
0007CBCA DAFC 0030                  		adda.w	#$30,a5
0007CBCE 4A15                       		tst.b	(a5)
0007CBD0 6A00                       		bpl.s	loc_71C10
0007CBD2 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBD6                            
0007CBD6                            loc_71C10:
0007CBD6 51CF FFF2                  		dbf	d7,loc_71C04
0007CBDA                            
0007CBDA 7E02                       		moveq	#2,d7
0007CBDC                            
0007CBDC                            loc_71C16:
0007CBDC DAFC 0030                  		adda.w	#$30,a5
0007CBE0 4A15                       		tst.b	(a5)
0007CBE2 6A00                       		bpl.s	loc_71C22
0007CBE4 4EBA 0000                  		jsr	sub_72850(pc)
0007CBE8                            
0007CBE8                            loc_71C22:
0007CBE8 51CF FFF2                  		dbf	d7,loc_71C16
0007CBEC 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CBF2 DAFC 0030                  		adda.w	#$30,a5
0007CBF6 4A15                       		tst.b	(a5)
0007CBF8 6A00                       		bpl.s	loc_71C38
0007CBFA 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBFE                            
0007CBFE                            loc_71C38:
0007CBFE DAFC 0030                  		adda.w	#$30,a5
0007CC02 4A15                       		tst.b	(a5)
0007CC04 6A00                       		bpl.s	loc_71C44
0007CC06 4EBA 0000                  		jsr	sub_72850(pc)
0007CC0A                            
0007CC0A                            loc_71C44:
0007CC0A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CC12 4E75                       		rts	
0007CC14                            ; End of function sub_71B4C
0007CC14                            
0007CC14                            
0007CC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC14                            
0007CC14                            
0007CC14                            sub_71C4E:				; XREF: sub_71B4C
0007CC14 532D 000E                  		subq.b	#1,$E(a5)
0007CC18 6600                       		bne.s	locret_71CAA
0007CC1A 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CC20 286D 0004                  		movea.l	4(a5),a4
0007CC24                            
0007CC24                            loc_71C5E:
0007CC24 7A00                       		moveq	#0,d5
0007CC26 1A1C                       		move.b	(a4)+,d5
0007CC28 0C05 00E0                  		cmpi.b	#-$20,d5
0007CC2C 6500                       		bcs.s	loc_71C6E
0007CC2E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CC32 60F0                       		bra.s	loc_71C5E
0007CC34                            ; ===========================================================================
0007CC34                            
0007CC34                            loc_71C6E:
0007CC34 4A05                       		tst.b	d5
0007CC36 6A00                       		bpl.s	loc_71C84
0007CC38 1B45 0010                  		move.b	d5,$10(a5)
0007CC3C 1A1C                       		move.b	(a4)+,d5
0007CC3E 6A00                       		bpl.s	loc_71C84
0007CC40 534C                       		subq.w	#1,a4
0007CC42 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CC48 6000                       		bra.s	loc_71C88
0007CC4A                            ; ===========================================================================
0007CC4A                            
0007CC4A                            loc_71C84:
0007CC4A 4EBA 0000                  		jsr	sub_71D40(pc)
0007CC4E                            
0007CC4E                            loc_71C88:
0007CC4E 2B4C 0004                  		move.l	a4,4(a5)
0007CC52 0815 0002                  		btst	#2,(a5)
0007CC56 6600                       		bne.s	locret_71CAA
0007CC58 7000                       		moveq	#0,d0
0007CC5A 102D 0010                  		move.b	$10(a5),d0
0007CC5E 0C00 0080                  		cmpi.b	#$80,d0
0007CC62 6700                       		beq.s	locret_71CAA
0007CC64 0800 0003                  		btst	#3,d0
0007CC68 6600                       		bne.s	loc_71CAC
0007CC6A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CC70                            
0007CC70                            locret_71CAA:
0007CC70 4E75                       		rts	
0007CC72                            ; ===========================================================================
0007CC72                            
0007CC72                            loc_71CAC:
0007CC72 0400 0088                  		subi.b	#$88,d0
0007CC76 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CC7A 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CC80 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CC88 4E75                       		rts	
0007CC8A                            ; End of function sub_71C4E
0007CC8A                            
0007CC8A                            ; ===========================================================================
0007CC8A 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CC90                            
0007CC90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC90                            
0007CC90                            
0007CC90                            sub_71CCA:				; XREF: sub_71B4C
0007CC90 532D 000E                  		subq.b	#1,$E(a5)
0007CC94 6600                       		bne.s	loc_71CE0
0007CC96 0895 0004                  		bclr	#4,(a5)
0007CC9A 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CC9E 4EBA 0000                  		jsr	sub_71E18(pc)
0007CCA2 6000 0000                  		bra.w	loc_726E2
0007CCA6                            ; ===========================================================================
0007CCA6                            
0007CCA6                            loc_71CE0:
0007CCA6 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CCAA 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CCAE 6000 0000                  		bra.w	loc_71E24
0007CCB2                            ; End of function sub_71CCA
0007CCB2                            
0007CCB2                            
0007CCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCB2                            
0007CCB2                            
0007CCB2                            sub_71CEC:				; XREF: sub_71CCA
0007CCB2 286D 0004                  		movea.l	4(a5),a4
0007CCB6 0895 0001                  		bclr	#1,(a5)
0007CCBA                            
0007CCBA                            loc_71CF4:
0007CCBA 7A00                       		moveq	#0,d5
0007CCBC 1A1C                       		move.b	(a4)+,d5
0007CCBE 0C05 00E0                  		cmpi.b	#-$20,d5
0007CCC2 6500                       		bcs.s	loc_71D04
0007CCC4 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CCC8 60F0                       		bra.s	loc_71CF4
0007CCCA                            ; ===========================================================================
0007CCCA                            
0007CCCA                            loc_71D04:
0007CCCA 4EBA 0000                  		jsr	sub_726FE(pc)
0007CCCE 4A05                       		tst.b	d5
0007CCD0 6A00                       		bpl.s	loc_71D1A
0007CCD2 4EBA 0000                  		jsr	sub_71D22(pc)
0007CCD6 1A1C                       		move.b	(a4)+,d5
0007CCD8 6A00                       		bpl.s	loc_71D1A
0007CCDA 534C                       		subq.w	#1,a4
0007CCDC 6000 0000                  		bra.w	sub_71D60
0007CCE0                            ; ===========================================================================
0007CCE0                            
0007CCE0                            loc_71D1A:
0007CCE0 4EBA 0000                  		jsr	sub_71D40(pc)
0007CCE4 6000 0000                  		bra.w	sub_71D60
0007CCE8                            ; End of function sub_71CEC
0007CCE8                            
0007CCE8                            
0007CCE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCE8                            
0007CCE8                            
0007CCE8                            sub_71D22:				; XREF: sub_71CEC
0007CCE8 0405 0080                  		subi.b	#$80,d5
0007CCEC 6700                       		beq.s	loc_71D58
0007CCEE DA2D 0008                  		add.b	8(a5),d5
0007CCF2 0245 007F                  		andi.w	#$7F,d5
0007CCF6 E34D                       		lsl.w	#1,d5
0007CCF8 41FA 0000                  		lea	word_72790(pc),a0
0007CCFC 3C30 5000                  		move.w	(a0,d5.w),d6
0007CD00 3B46 0010                  		move.w	d6,$10(a5)
0007CD04 4E75                       		rts	
0007CD06                            ; End of function sub_71D22
0007CD06                            
0007CD06                            
0007CD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD06                            
0007CD06                            
0007CD06                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CD06 1005                       		move.b	d5,d0
0007CD08 122D 0002                  		move.b	2(a5),d1
0007CD0C                            
0007CD0C                            loc_71D46:
0007CD0C 5301                       		subq.b	#1,d1
0007CD0E 6700                       		beq.s	loc_71D4E
0007CD10 D005                       		add.b	d5,d0
0007CD12 60F8                       		bra.s	loc_71D46
0007CD14                            ; ===========================================================================
0007CD14                            
0007CD14                            loc_71D4E:
0007CD14 1B40 000F                  		move.b	d0,$F(a5)
0007CD18 1B40 000E                  		move.b	d0,$E(a5)
0007CD1C 4E75                       		rts	
0007CD1E                            ; End of function sub_71D40
0007CD1E                            
0007CD1E                            ; ===========================================================================
0007CD1E                            
0007CD1E                            loc_71D58:				; XREF: sub_71D22
0007CD1E 08D5 0001                  		bset	#1,(a5)
0007CD22 426D 0010                  		clr.w	$10(a5)
0007CD26                            
0007CD26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD26                            
0007CD26                            
0007CD26                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CD26 2B4C 0004                  		move.l	a4,4(a5)
0007CD2A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CD30 0815 0004                  		btst	#4,(a5)
0007CD34 6600                       		bne.s	locret_71D9C
0007CD36 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CD3C 422D 000C                  		clr.b	$C(a5)
0007CD40 0815 0003                  		btst	#3,(a5)
0007CD44 6700                       		beq.s	locret_71D9C
0007CD46 206D 0014                  		movea.l	$14(a5),a0
0007CD4A 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CD4E 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CD52 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CD56 1018                       		move.b	(a0)+,d0
0007CD58 E208                       		lsr.b	#1,d0
0007CD5A 1B40 001B                  		move.b	d0,$1B(a5)
0007CD5E 426D 001C                  		clr.w	$1C(a5)
0007CD62                            
0007CD62                            locret_71D9C:
0007CD62 4E75                       		rts	
0007CD64                            ; End of function sub_71D60
0007CD64                            
0007CD64                            
0007CD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD64                            
0007CD64                            
0007CD64                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CD64 4A2D 0012                  		tst.b	$12(a5)
0007CD68 6700                       		beq.s	locret_71DC4
0007CD6A 532D 0012                  		subq.b	#1,$12(a5)
0007CD6E 6600                       		bne.s	locret_71DC4
0007CD70 08D5 0001                  		bset	#1,(a5)
0007CD74 4A2D 0001                  		tst.b	1(a5)
0007CD78 6B00 0000                  		bmi.w	loc_71DBE
0007CD7C 4EBA 0000                  		jsr	sub_726FE(pc)
0007CD80 584F                       		addq.w	#4,sp
0007CD82 4E75                       		rts	
0007CD84                            ; ===========================================================================
0007CD84                            
0007CD84                            loc_71DBE:
0007CD84 4EBA 0000                  		jsr	sub_729A0(pc)
0007CD88 584F                       		addq.w	#4,sp
0007CD8A                            
0007CD8A                            locret_71DC4:
0007CD8A 4E75                       		rts	
0007CD8C                            ; End of function sub_71D9E
0007CD8C                            
0007CD8C                            
0007CD8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD8C                            
0007CD8C                            
0007CD8C                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CD8C 584F                       		addq.w	#4,sp
0007CD8E 0815 0003                  		btst	#3,(a5)
0007CD92 6700                       		beq.s	locret_71E16
0007CD94 4A2D 0018                  		tst.b	$18(a5)
0007CD98 6700                       		beq.s	loc_71DDA
0007CD9A 532D 0018                  		subq.b	#1,$18(a5)
0007CD9E 4E75                       		rts	
0007CDA0                            ; ===========================================================================
0007CDA0                            
0007CDA0                            loc_71DDA:
0007CDA0 532D 0019                  		subq.b	#1,$19(a5)
0007CDA4 6700                       		beq.s	loc_71DE2
0007CDA6 4E75                       		rts	
0007CDA8                            ; ===========================================================================
0007CDA8                            
0007CDA8                            loc_71DE2:
0007CDA8 206D 0014                  		movea.l	$14(a5),a0
0007CDAC 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CDB2 4A2D 001B                  		tst.b	$1B(a5)
0007CDB6 6600                       		bne.s	loc_71DFE
0007CDB8 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CDBE 442D 001A                  		neg.b	$1A(a5)
0007CDC2 4E75                       		rts	
0007CDC4                            ; ===========================================================================
0007CDC4                            
0007CDC4                            loc_71DFE:
0007CDC4 532D 001B                  		subq.b	#1,$1B(a5)
0007CDC8 1C2D 001A                  		move.b	$1A(a5),d6
0007CDCC 4886                       		ext.w	d6
0007CDCE DC6D 001C                  		add.w	$1C(a5),d6
0007CDD2 3B46 001C                  		move.w	d6,$1C(a5)
0007CDD6 DC6D 0010                  		add.w	$10(a5),d6
0007CDDA 594F                       		subq.w	#4,sp
0007CDDC                            
0007CDDC                            locret_71E16:
0007CDDC 4E75                       		rts	
0007CDDE                            ; End of function sub_71DC6
0007CDDE                            
0007CDDE                            
0007CDDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CDDE                            
0007CDDE                            
0007CDDE                            sub_71E18:				; XREF: sub_71CCA
0007CDDE 0815 0001                  		btst	#1,(a5)
0007CDE2 6600                       		bne.s	locret_71E48
0007CDE4 3C2D 0010                  		move.w	$10(a5),d6
0007CDE8 6700                       		beq.s	loc_71E4A
0007CDEA                            
0007CDEA                            loc_71E24:				; XREF: sub_71CCA
0007CDEA 102D 001E                  		move.b	$1E(a5),d0
0007CDEE 4880                       		ext.w	d0
0007CDF0 DC40                       		add.w	d0,d6
0007CDF2 0815 0002                  		btst	#2,(a5)
0007CDF6 6600                       		bne.s	locret_71E48
0007CDF8 3206                       		move.w	d6,d1
0007CDFA E049                       		lsr.w	#8,d1
0007CDFC 103C 00A4                  		move.b	#-$5C,d0
0007CE00 4EBA 0000                  		jsr	sub_72722(pc)
0007CE04 1206                       		move.b	d6,d1
0007CE06 103C 00A0                  		move.b	#-$60,d0
0007CE0A 4EBA 0000                  		jsr	sub_72722(pc)
0007CE0E                            
0007CE0E                            locret_71E48:
0007CE0E 4E75                       		rts	
0007CE10                            ; ===========================================================================
0007CE10                            
0007CE10                            loc_71E4A:
0007CE10 08D5 0001                  		bset	#1,(a5)
0007CE14 4E75                       		rts	
0007CE16                            ; End of function sub_71E18
0007CE16                            
0007CE16                            ; ===========================================================================
0007CE16                            
0007CE16                            loc_71E50:				; XREF: sub_71B4C
0007CE16 6B00                       		bmi.s	loc_71E94
0007CE18 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CE1E 6700 0000                  		beq.w	loc_71EFE
0007CE22 1D7C 0002 0003             		move.b	#2,3(a6)
0007CE28 7602                       		moveq	#2,d3
0007CE2A 103C 00B4                  		move.b	#-$4C,d0
0007CE2E 7200                       		moveq	#0,d1
0007CE30                            
0007CE30                            loc_71E6A:
0007CE30 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE34 4EBA 0000                  		jsr	sub_72764(pc)
0007CE38 5200                       		addq.b	#1,d0
0007CE3A 51CB FFF4                  		dbf	d3,loc_71E6A
0007CE3E                            
0007CE3E 7602                       		moveq	#2,d3
0007CE40 7028                       		moveq	#$28,d0
0007CE42                            
0007CE42                            loc_71E7C:
0007CE42 1203                       		move.b	d3,d1
0007CE44 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE48 5801                       		addq.b	#4,d1
0007CE4A 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE4E 51CB FFF2                  		dbf	d3,loc_71E7C
0007CE52                            
0007CE52 4EBA 0000                  		jsr	sub_729B6(pc)
0007CE56 6000 FDB2                  		bra.w	loc_71C44
0007CE5A                            ; ===========================================================================
0007CE5A                            
0007CE5A                            loc_71E94:				; XREF: loc_71E50
0007CE5A 422E 0003                  		clr.b	3(a6)
0007CE5E 7630                       		moveq	#$30,d3
0007CE60 4BEE 0040                  		lea	$40(a6),a5
0007CE64 7806                       		moveq	#6,d4
0007CE66                            
0007CE66                            loc_71EA0:
0007CE66 0815 0007                  		btst	#7,(a5)
0007CE6A 6700                       		beq.s	loc_71EB8
0007CE6C 0815 0002                  		btst	#2,(a5)
0007CE70 6600                       		bne.s	loc_71EB8
0007CE72 103C 00B4                  		move.b	#-$4C,d0
0007CE76 122D 000A                  		move.b	$A(a5),d1
0007CE7A 4EBA 0000                  		jsr	sub_72722(pc)
0007CE7E                            
0007CE7E                            loc_71EB8:
0007CE7E DAC3                       		adda.w	d3,a5
0007CE80 51CC FFE4                  		dbf	d4,loc_71EA0
0007CE84                            
0007CE84 4BEE 0220                  		lea	$220(a6),a5
0007CE88 7802                       		moveq	#2,d4
0007CE8A                            
0007CE8A                            loc_71EC4:
0007CE8A 0815 0007                  		btst	#7,(a5)
0007CE8E 6700                       		beq.s	loc_71EDC
0007CE90 0815 0002                  		btst	#2,(a5)
0007CE94 6600                       		bne.s	loc_71EDC
0007CE96 103C 00B4                  		move.b	#-$4C,d0
0007CE9A 122D 000A                  		move.b	$A(a5),d1
0007CE9E 4EBA 0000                  		jsr	sub_72722(pc)
0007CEA2                            
0007CEA2                            loc_71EDC:
0007CEA2 DAC3                       		adda.w	d3,a5
0007CEA4 51CC FFE4                  		dbf	d4,loc_71EC4
0007CEA8                            
0007CEA8 4BEE 0340                  		lea	$340(a6),a5
0007CEAC 0815 0007                  		btst	#7,(a5)
0007CEB0 6700                       		beq.s	loc_71EFE
0007CEB2 0815 0002                  		btst	#2,(a5)
0007CEB6 6600                       		bne.s	loc_71EFE
0007CEB8 103C 00B4                  		move.b	#-$4C,d0
0007CEBC 122D 000A                  		move.b	$A(a5),d1
0007CEC0 4EBA 0000                  		jsr	sub_72722(pc)
0007CEC4                            
0007CEC4                            loc_71EFE:
0007CEC4 6000 FD44                  		bra.w	loc_71C44
0007CEC8                            
0007CEC8                            ; ---------------------------------------------------------------------------
0007CEC8                            ; Subroutine to	play a sound or	music track
0007CEC8                            ; ---------------------------------------------------------------------------
0007CEC8                            
0007CEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEC8                            
0007CEC8                            
0007CEC8                            Sound_Play:				; XREF: sub_71B4C
0007CEC8 2079 0007 C86E             		movea.l	(Go_SoundTypes).l,a0
0007CECE 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CED2 1616                       		move.b	0(a6),d3
0007CED4 7802                       		moveq	#2,d4
0007CED6                            
0007CED6                            loc_71F12:
0007CED6 1011                       		move.b	(a1),d0		; move track number to d0
0007CED8 1200                       		move.b	d0,d1
0007CEDA 4219                       		clr.b	(a1)+
0007CEDC 0400 0081                  		subi.b	#$81,d0
0007CEE0 6500                       		bcs.s	loc_71F3E
0007CEE2                            ; ===========================================================================
0007CEE2                            
0007CEE2                            loc_71F2C:
0007CEE2 1430 0000                  		move.b	(a0,d0.w),d2
0007CEE6 B403                       		cmp.b	d3,d2
0007CEE8 6500                       		bcs.s	loc_71F3E
0007CEEA 1602                       		move.b	d2,d3
0007CEEC 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CEF0                            
0007CEF0                            loc_71F3E:
0007CEF0 51CC FFE4                  		dbf	d4,loc_71F12
0007CEF4                            
0007CEF4 4A03                       		tst.b	d3
0007CEF6 6B00                       		bmi.s	Sound_ChkValue
0007CEF8 1C83                       		move.b	d3,0(a6)
0007CEFA                            ; End of function Sound_Play
0007CEFA                            
0007CEFA                            
0007CEFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEFA                            
0007CEFA                            ; no checks if you play something fucked up it's your fault
0007CEFA                            Sound_ChkValue:				; XREF: sub_71B4C
0007CEFA 7E00                       		moveq	#0,d7
0007CEFC 1E2E 0009                  		move.b	9(a6),d7
0007CF00                            		
0007CF00 6700 0000                  		beq.w	Sound_E4
0007CF04 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CF0A 0C07 00A0                  		cmpi.b	#$A0,d7
0007CF0E 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
0007CF12                            		
0007CF12 0C07 00D0                  		cmpi.b	#$D0,d7
0007CF16 6700 0000                  		beq.w	Sound_D0
0007CF1A 0C07 00E0                  		cmpi.b	#$E0,d7
0007CF1E 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
0007CF22                            		
0007CF22                            		; falls to command
0007CF22                            ; ===========================================================================
0007CF22                            
0007CF22                            Sound_Command				; XREF: Sound_ChkValue
0007CF22 0407 00E0                  		subi.b	#$E0,d7
0007CF26 E54F                       		lsl.w	#2,d7
0007CF28 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CF2C                            ; ===========================================================================
0007CF2C                            
0007CF2C                            Sound_ExIndex:
0007CF2C 6000 0000                  		bra.w	Sound_E0
0007CF30                            ; ===========================================================================
0007CF30 6000 0000                  		bra.w	Sound_E1
0007CF34                            ; ===========================================================================
0007CF34 6000 0000                  		bra.w	Sound_E2
0007CF38                            ; ===========================================================================
0007CF38 6000 0000                  		bra.w	Sound_E3
0007CF3C                            ; ===========================================================================
0007CF3C 6000 0000                  		bra.w	Sound_E4
0007CF40                            ; ===========================================================================
0007CF40 6000 0000                  		bra.w	Sound_E5
0007CF44                            ; ===========================================================================
0007CF44                            ; ---------------------------------------------------------------------------
0007CF44                            ; Play "Say-gaa" PCM sound
0007CF44                            ; ---------------------------------------------------------------------------
0007CF44                            
0007CF44                            Sound_E1:				  
0007CF44 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CF4C 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CF54 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007CF58 51C8 FFFE                  		dbf	d0,*
0007CF5C 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CF62 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CF68 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CF70                            PlayPCM_Loop:	  
0007CF70 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CF76 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CF7A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CF7E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CF80 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CF82 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CF86 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CF8C 4EB8 13EC                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CF90 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CF96 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CF98 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CF9A                            return_PlayPCM: 
0007CF9A 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007CFA2 584F                       		addq.w	#4,sp 
0007CFA4 4E75                       		rts
0007CFA6                            		
0007CFA6                            ; ---------------------------------------------------------------------------
0007CFA6                            ; Play you are an idiot pcm sound
0007CFA6                            ; since the sfx already crashes the game forever load it here :V
0007CFA6                            ; ---------------------------------------------------------------------------
0007CFA6                            
0007CFA6                            Sound_E5: 
0007CFA6 4EB8 14C8                  		jsr	ClearScreen
0007CFAA 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CFB2 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CFBA                            
0007CFBA                            		;control port on a5
0007CFBA 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CFC0 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CFC6 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CFCA 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CFCE 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CFD2                            		
0007CFD2 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CFD6                            		
0007CFD6 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CFDC 41F9 0002 4668             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CFE2 4EB8 1644                  		jsr	NemDec
0007CFE6 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CFEC 41F9 0002 460A             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CFF2 303C 0000                  		move.w	#0,d0
0007CFF6 4EB8 1922                  		jsr	EniDec
0007CFFA 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D000 203C 4304 0003             		move.l	#$43040003,d0
0007D006 7223                       		moveq	#35,d1
0007D008 740D                       		moveq	#13,d2
0007D00A 4EB8 1624                  		jsr	ShowVDPGraphics
0007D00E 7014                       		moveq	#20,d0
0007D010 4EB8 22E8                  		jsr	PalLoad2	; load pallet
0007D014                            
0007D014                            
0007D014 4BF9 00C0 0004             		lea	($C00004).l,a5
0007D01A 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007D01E 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007D020 6000                       		bra.s	@palett
0007D022                            @start:
0007D022 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D028 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007D02E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007D036                            @loop:
0007D036 44D5                       		move.w	(a5),ccr
0007D038 6B00                       		bmi.s	@vblank
0007D03A                            
0007D03A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D040 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D044 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D048 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D04A 66EA                       		bne.s	@loop				; if not zero, loop
0007D04C 60D4                       		bra.s	@start
0007D04E                            @vblank:
0007D04E 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007D054 6700                       		beq.s	@palett
0007D056 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007D05A                            @loop_vblank:
0007D05A 44D5                       		move.w	(a5),ccr
0007D05C 6AD8                       		bpl.s	@loop
0007D05E                            
0007D05E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D064 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D068 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D06C 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D06E 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007D070 60B0                       		bra.s	@start
0007D072                            @palett:
0007D072 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007D078                            
0007D078 4238 FE24                  		clr.b	($FFFFFE24).w
0007D07C 4638 FE25                  		not.b	($FFFFFE25).w
0007D080 6700                       		beq.s	@not_black
0007D082 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007D088 6000                       		bra.s	@merge
0007D08A                            	@not_black:
0007D08A 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007D090                            	@merge:
0007D090 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007D094 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007D098 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007D09C 3A9F                       		move.w	(sp)+,(a5)
0007D09E                            		
0007D09E 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007D0A2 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007D0A6 4A83                       		tst.l	d3
0007D0A8 66B0                       		bne.s	@loop_vblank
0007D0AA 6000 FF76                  		bra.w	@start
0007D0AE                            ; ===========================================================================
0007D0AE                            ; ---------------------------------------------------------------------------
0007D0AE                            ; Play music track $81-$9F
0007D0AE                            ; ---------------------------------------------------------------------------
0007D0AE                            
0007D0AE                            Sound_Music:				; XREF: Sound_ChkValue
0007D0AE 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007D0B2 6600                       		bne.s	loc_72024	; if not, branch
0007D0B4 4A2E 0027                  		tst.b	$27(a6)
0007D0B8 6600 0000                  		bne.w	loc_721B6
0007D0BC 4BEE 0040                  		lea	$40(a6),a5
0007D0C0 7009                       		moveq	#9,d0
0007D0C2                            
0007D0C2                            loc_71FE6:
0007D0C2 0895 0002                  		bclr	#2,(a5)
0007D0C6 DAFC 0030                  		adda.w	#$30,a5
0007D0CA 51C8 FFF6                  		dbf	d0,loc_71FE6
0007D0CE                            
0007D0CE 4BEE 0220                  		lea	$220(a6),a5
0007D0D2 7005                       		moveq	#5,d0
0007D0D4                            
0007D0D4                            loc_71FF8:
0007D0D4 0895 0007                  		bclr	#7,(a5)
0007D0D8 DAFC 0030                  		adda.w	#$30,a5
0007D0DC 51C8 FFF6                  		dbf	d0,loc_71FF8
0007D0E0 4216                       		clr.b	0(a6)
0007D0E2 204E                       		movea.l	a6,a0
0007D0E4 43EE 03A0                  		lea	$3A0(a6),a1
0007D0E8 303C 0087                  		move.w	#$87,d0
0007D0EC                            
0007D0EC                            loc_72012:
0007D0EC 22D8                       		move.l	(a0)+,(a1)+
0007D0EE 51C8 FFFC                  		dbf	d0,loc_72012
0007D0F2                            
0007D0F2 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007D0F8 4216                       		clr.b	0(a6)
0007D0FA 6000                       		bra.s	loc_7202C
0007D0FC                            ; ===========================================================================
0007D0FC                            
0007D0FC                            loc_72024:
0007D0FC 422E 0027                  		clr.b	$27(a6)
0007D100 422E 0026                  		clr.b	$26(a6)
0007D104                            
0007D104                            loc_7202C:
0007D104 4EBA 0000                  		jsr	sub_725CA(pc)
0007D108 2879 0007 C882             		movea.l	(off_719A0).l,a4
0007D10E 0C07 0080                  		cmpi.b	#$80,d7
0007D112 6500                       		blo.s	@zeroindex
0007D114                            		
0007D114 0407 0080                  		subi.b	#$80,d7
0007D118 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D11E 2879 0007 C87A             		movea.l	(Go_MusicIndex80).l,a4
0007D124 6000                       		bra.s @continue
0007D126                            	@zeroindex:
0007D126 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D12C 2879 0007 C876             		movea.l	(Go_MusicIndex).l,a4
0007D132                            	@continue:
0007D132 E54F                       		lsl.w	#2,d7
0007D134 2874 7000                  		movea.l	(a4,d7.w),a4
0007D138 7000                       		moveq	#0,d0
0007D13A 3014                       		move.w	(a4),d0
0007D13C D08C                       		add.l	a4,d0
0007D13E 2D40 0018                  		move.l	d0,$18(a6)
0007D142 102C 0005                  		move.b	5(a4),d0
0007D146 1D40 0028                  		move.b	d0,$28(a6)
0007D14A 4A2E 002A                  		tst.b	$2A(a6)
0007D14E 6700                       		beq.s	loc_72068
0007D150 102E 0029                  		move.b	$29(a6),d0
0007D154                            
0007D154                            loc_72068:
0007D154 1D40 0002                  		move.b	d0,2(a6)
0007D158 1D40 0001                  		move.b	d0,1(a6)
0007D15C 7200                       		moveq	#0,d1
0007D15E 264C                       		movea.l	a4,a3
0007D160 5C4C                       		addq.w	#6,a4
0007D162 7E00                       		moveq	#0,d7
0007D164 1E2B 0002                  		move.b	2(a3),d7
0007D168 6700 0000                  		beq.w	loc_72114
0007D16C 5307                       		subq.b	#1,d7
0007D16E 123C 00C0                  		move.b	#-$40,d1
0007D172 182B 0004                  		move.b	4(a3),d4
0007D176 7C30                       		moveq	#$30,d6
0007D178 1A3C 0001                  		move.b	#1,d5
0007D17C 43EE 0040                  		lea	$40(a6),a1
0007D180 45FA 0000                  		lea	byte_721BA(pc),a2
0007D184                            
0007D184                            loc_72098:
0007D184 08D1 0007                  		bset	#7,(a1)
0007D188 135A 0001                  		move.b	(a2)+,1(a1)
0007D18C 1344 0002                  		move.b	d4,2(a1)
0007D190 1346 000D                  		move.b	d6,$D(a1)
0007D194 1341 000A                  		move.b	d1,$A(a1)
0007D198 1345 000E                  		move.b	d5,$E(a1)
0007D19C 7000                       		moveq	#0,d0
0007D19E 301C                       		move.w	(a4)+,d0
0007D1A0 D08B                       		add.l	a3,d0
0007D1A2 2340 0004                  		move.l	d0,4(a1)
0007D1A6 335C 0008                  		move.w	(a4)+,8(a1)
0007D1AA D2C6                       		adda.w	d6,a1
0007D1AC 51CF FFD6                  		dbf	d7,loc_72098
0007D1B0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D1B6 6600                       		bne.s	loc_720D8
0007D1B8 702B                       		moveq	#$2B,d0
0007D1BA 7200                       		moveq	#0,d1
0007D1BC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D1C0 6000 0000                  		bra.w	loc_72114
0007D1C4                            ; ===========================================================================
0007D1C4                            
0007D1C4                            loc_720D8:
0007D1C4 7028                       		moveq	#$28,d0
0007D1C6 7206                       		moveq	#6,d1
0007D1C8 4EBA 0000                  		jsr	sub_7272E(pc)
0007D1CC 103C 0042                  		move.b	#$42,d0
0007D1D0 727F                       		moveq	#$7F,d1
0007D1D2 4EBA 0000                  		jsr	sub_72764(pc)
0007D1D6 103C 004A                  		move.b	#$4A,d0
0007D1DA 727F                       		moveq	#$7F,d1
0007D1DC 4EBA 0000                  		jsr	sub_72764(pc)
0007D1E0 103C 0046                  		move.b	#$46,d0
0007D1E4 727F                       		moveq	#$7F,d1
0007D1E6 4EBA 0000                  		jsr	sub_72764(pc)
0007D1EA 103C 004E                  		move.b	#$4E,d0
0007D1EE 727F                       		moveq	#$7F,d1
0007D1F0 4EBA 0000                  		jsr	sub_72764(pc)
0007D1F4 103C 00B6                  		move.b	#-$4A,d0
0007D1F8 123C 00C0                  		move.b	#-$40,d1
0007D1FC 4EBA 0000                  		jsr	sub_72764(pc)
0007D200                            
0007D200                            loc_72114:
0007D200 7E00                       		moveq	#0,d7
0007D202 1E2B 0003                  		move.b	3(a3),d7
0007D206 6700                       		beq.s	loc_72154
0007D208 5307                       		subq.b	#1,d7
0007D20A 43EE 0190                  		lea	$190(a6),a1
0007D20E 45FA 0000                  		lea	byte_721C2(pc),a2
0007D212                            
0007D212                            loc_72126:
0007D212 08D1 0007                  		bset	#7,(a1)
0007D216 135A 0001                  		move.b	(a2)+,1(a1)
0007D21A 1344 0002                  		move.b	d4,2(a1)
0007D21E 1346 000D                  		move.b	d6,$D(a1)
0007D222 1345 000E                  		move.b	d5,$E(a1)
0007D226 7000                       		moveq	#0,d0
0007D228 301C                       		move.w	(a4)+,d0
0007D22A D08B                       		add.l	a3,d0
0007D22C 2340 0004                  		move.l	d0,4(a1)
0007D230 335C 0008                  		move.w	(a4)+,8(a1)
0007D234 101C                       		move.b	(a4)+,d0
0007D236 135C 000B                  		move.b	(a4)+,$B(a1)
0007D23A D2C6                       		adda.w	d6,a1
0007D23C 51CF FFD4                  		dbf	d7,loc_72126
0007D240                            
0007D240                            loc_72154:
0007D240 43EE 0220                  		lea	$220(a6),a1
0007D244 7E05                       		moveq	#5,d7
0007D246                            
0007D246                            loc_7215A:
0007D246 4A11                       		tst.b	(a1)
0007D248 6A00 0000                  		bpl.w	loc_7217C
0007D24C 7000                       		moveq	#0,d0
0007D24E 1029 0001                  		move.b	1(a1),d0
0007D252 6B00                       		bmi.s	loc_7216E
0007D254 5500                       		subq.b	#2,d0
0007D256 E508                       		lsl.b	#2,d0
0007D258 6000                       		bra.s	loc_72170
0007D25A                            ; ===========================================================================
0007D25A                            
0007D25A                            loc_7216E:
0007D25A E608                       		lsr.b	#3,d0
0007D25C                            
0007D25C                            loc_72170:
0007D25C 41FA 0000                  		lea	dword_722CC(pc),a0
0007D260 2070 0000                  		movea.l	(a0,d0.w),a0
0007D264 08D0 0002                  		bset	#2,(a0)
0007D268                            
0007D268                            loc_7217C:
0007D268 D2C6                       		adda.w	d6,a1
0007D26A 51CF FFDA                  		dbf	d7,loc_7215A
0007D26E                            
0007D26E 4A6E 0340                  		tst.w	$340(a6)
0007D272 6A00                       		bpl.s	loc_7218E
0007D274 08EE 0002 0100             		bset	#2,$100(a6)
0007D27A                            
0007D27A                            loc_7218E:
0007D27A 4A6E 0370                  		tst.w	$370(a6)
0007D27E 6A00                       		bpl.s	loc_7219A
0007D280 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D286                            
0007D286                            loc_7219A:
0007D286 4BEE 0070                  		lea	$70(a6),a5
0007D28A 7805                       		moveq	#5,d4
0007D28C                            
0007D28C                            loc_721A0:
0007D28C 4EBA 0000                  		jsr	sub_726FE(pc)
0007D290 DAC6                       		adda.w	d6,a5
0007D292 51CC FFF8                  		dbf	d4,loc_721A0
0007D296 7802                       		moveq	#2,d4
0007D298                            
0007D298                            loc_721AC:
0007D298 4EBA 0000                  		jsr	sub_729A0(pc)
0007D29C DAC6                       		adda.w	d6,a5
0007D29E 51CC FFF8                  		dbf	d4,loc_721AC
0007D2A2                            
0007D2A2                            loc_721B6:
0007D2A2 584F                       		addq.w	#4,sp
0007D2A4 4E75                       		rts	
0007D2A6                            ; ===========================================================================
0007D2A6 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D2AE                            		even
0007D2AE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D2B2                            		even
0007D2B2                            ; ===========================================================================
0007D2B2                            ; ---------------------------------------------------------------------------
0007D2B2                            ; Play normal sound effect
0007D2B2                            ; ---------------------------------------------------------------------------
0007D2B2                            
0007D2B2                            Sound_SFX:				; XREF: Sound_ChkValue
0007D2B2 4A2E 0027                  		tst.b	$27(a6)
0007D2B6 6600 0000                  		bne.w	loc_722C6
0007D2BA 4A2E 0004                  		tst.b	4(a6)
0007D2BE 6600 0000                  		bne.w	loc_722C6
0007D2C2 4A2E 0024                  		tst.b	$24(a6)
0007D2C6 6600 0000                  		bne.w	loc_722C6
0007D2CA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D2CE 6600                       		bne.s	Sound_notB5	; if not, branch
0007D2D0 4A2E 002B                  		tst.b	$2B(a6)
0007D2D4 6600                       		bne.s	loc_721EE
0007D2D6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D2DA                            
0007D2DA                            loc_721EE:
0007D2DA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D2E0                            
0007D2E0                            Sound_notB5:
0007D2E0 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D2E4 6600                       		bne.s	Sound_notA7	; if not, branch
0007D2E6 4A2E 002C                  		tst.b	$2C(a6)
0007D2EA 6600 0000                  		bne.w	locret_722C4
0007D2EE 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D2F4                            
0007D2F4                            Sound_notA7:
0007D2F4 2079 0007 C87E             		movea.l	(Go_SoundIndex).l,a0
0007D2FA 0407 00A0                  		subi.b	#$A0,d7
0007D2FE E54F                       		lsl.w	#2,d7
0007D300 2670 7000                  		movea.l	(a0,d7.w),a3
0007D304 224B                       		movea.l	a3,a1
0007D306 7200                       		moveq	#0,d1
0007D308 3219                       		move.w	(a1)+,d1
0007D30A D28B                       		add.l	a3,d1
0007D30C 1A19                       		move.b	(a1)+,d5
0007D30E 1E19                       		move.b	(a1)+,d7
0007D310 5307                       		subq.b	#1,d7
0007D312 7C30                       		moveq	#$30,d6
0007D314                            
0007D314                            loc_72228:
0007D314 7600                       		moveq	#0,d3
0007D316 1629 0001                  		move.b	1(a1),d3
0007D31A 1803                       		move.b	d3,d4
0007D31C 6B00                       		bmi.s	loc_72244
0007D31E 5543                       		subq.w	#2,d3
0007D320 E54B                       		lsl.w	#2,d3
0007D322 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D326 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D32A 08D5 0002                  		bset	#2,(a5)
0007D32E 6000                       		bra.s	loc_7226E
0007D330                            ; ===========================================================================
0007D330                            
0007D330                            loc_72244:
0007D330 E64B                       		lsr.w	#3,d3
0007D332 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D336 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D33A 08D5 0002                  		bset	#2,(a5)
0007D33E 0C04 00C0                  		cmpi.b	#$C0,d4
0007D342 6600                       		bne.s	loc_7226E
0007D344 1004                       		move.b	d4,d0
0007D346 0000 001F                  		ori.b	#$1F,d0
0007D34A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D350 0840 0005                  		bchg	#5,d0
0007D354 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D35A                            
0007D35A                            loc_7226E:
0007D35A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D35E 244D                       		movea.l	a5,a2
0007D360 700B                       		moveq	#$B,d0
0007D362                            
0007D362                            loc_72276:
0007D362 429A                       		clr.l	(a2)+
0007D364 51C8 FFFC                  		dbf	d0,loc_72276
0007D368                            
0007D368 3A99                       		move.w	(a1)+,(a5)
0007D36A 1B45 0002                  		move.b	d5,2(a5)
0007D36E 7000                       		moveq	#0,d0
0007D370 3019                       		move.w	(a1)+,d0
0007D372 D08B                       		add.l	a3,d0
0007D374 2B40 0004                  		move.l	d0,4(a5)
0007D378 3B59 0008                  		move.w	(a1)+,8(a5)
0007D37C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D382 1B46 000D                  		move.b	d6,$D(a5)
0007D386 4A04                       		tst.b	d4
0007D388 6B00                       		bmi.s	loc_722A8
0007D38A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D390 2B41 0020                  		move.l	d1,$20(a5)
0007D394                            
0007D394                            loc_722A8:
0007D394 51CF FF7E                  		dbf	d7,loc_72228
0007D398                            
0007D398 4A2E 0250                  		tst.b	$250(a6)
0007D39C 6A00                       		bpl.s	loc_722B8
0007D39E 08EE 0002 0340             		bset	#2,$340(a6)
0007D3A4                            
0007D3A4                            loc_722B8:
0007D3A4 4A2E 0310                  		tst.b	$310(a6)
0007D3A8 6A00                       		bpl.s	locret_722C4
0007D3AA 08EE 0002 0370             		bset	#2,$370(a6)
0007D3B0                            
0007D3B0                            locret_722C4:
0007D3B0 4E75                       		rts	
0007D3B2                            ; ===========================================================================
0007D3B2                            
0007D3B2                            loc_722C6:
0007D3B2 4216                       		clr.b	0(a6)
0007D3B4 4E75                       		rts	
0007D3B6                            ; ===========================================================================
0007D3B6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D3BA 0000 0000                  		dc.l 0
0007D3BE 00FF F100                  		dc.l $FFF100
0007D3C2 00FF F130                  		dc.l $FFF130
0007D3C6 00FF F190                  		dc.l $FFF190
0007D3CA 00FF F1C0                  		dc.l $FFF1C0
0007D3CE 00FF F1F0                  		dc.l $FFF1F0
0007D3D2 00FF F1F0                  		dc.l $FFF1F0
0007D3D6 00FF F220                  dword_722EC:	dc.l $FFF220
0007D3DA 0000 0000                  		dc.l 0
0007D3DE 00FF F250                  		dc.l $FFF250
0007D3E2 00FF F280                  		dc.l $FFF280
0007D3E6 00FF F2B0                  		dc.l $FFF2B0
0007D3EA 00FF F2E0                  		dc.l $FFF2E0
0007D3EE 00FF F310                  		dc.l $FFF310
0007D3F2 00FF F310                  		dc.l $FFF310
0007D3F6                            ; ===========================================================================
0007D3F6                            ; ---------------------------------------------------------------------------
0007D3F6                            ; Play GHZ waterfall sound
0007D3F6                            ; ---------------------------------------------------------------------------
0007D3F6                            
0007D3F6                            Sound_D0:				; XREF: Sound_ChkValue
0007D3F6 4A2E 0027                  		tst.b	$27(a6)
0007D3FA 6600 0000                  		bne.w	locret_723C6
0007D3FE 4A2E 0004                  		tst.b	4(a6)
0007D402 6600 0000                  		bne.w	locret_723C6
0007D406 4A2E 0024                  		tst.b	$24(a6)
0007D40A 6600 0000                  		bne.w	locret_723C6
0007D40E 2079 0007 C872             		movea.l	(Go_SoundD0).l,a0
0007D414 0407 00D0                  		subi.b	#$D0,d7
0007D418 E54F                       		lsl.w	#2,d7
0007D41A 2670 7000                  		movea.l	(a0,d7.w),a3
0007D41E 224B                       		movea.l	a3,a1
0007D420 7000                       		moveq	#0,d0
0007D422 3019                       		move.w	(a1)+,d0
0007D424 D08B                       		add.l	a3,d0
0007D426 2D40 0020                  		move.l	d0,$20(a6)
0007D42A 1A19                       		move.b	(a1)+,d5
0007D42C 1E19                       		move.b	(a1)+,d7
0007D42E 5307                       		subq.b	#1,d7
0007D430 7C30                       		moveq	#$30,d6
0007D432                            
0007D432                            loc_72348:
0007D432 1829 0001                  		move.b	1(a1),d4
0007D436 6B00                       		bmi.s	loc_7235A
0007D438 08EE 0002 0100             		bset	#2,$100(a6)
0007D43E 4BEE 0340                  		lea	$340(a6),a5
0007D442 6000                       		bra.s	loc_72364
0007D444                            ; ===========================================================================
0007D444                            
0007D444                            loc_7235A:
0007D444 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D44A 4BEE 0370                  		lea	$370(a6),a5
0007D44E                            
0007D44E                            loc_72364:
0007D44E 244D                       		movea.l	a5,a2
0007D450 700B                       		moveq	#$B,d0
0007D452                            
0007D452                            loc_72368:
0007D452 429A                       		clr.l	(a2)+
0007D454 51C8 FFFC                  		dbf	d0,loc_72368
0007D458                            
0007D458 3A99                       		move.w	(a1)+,(a5)
0007D45A 1B45 0002                  		move.b	d5,2(a5)
0007D45E 7000                       		moveq	#0,d0
0007D460 3019                       		move.w	(a1)+,d0
0007D462 D08B                       		add.l	a3,d0
0007D464 2B40 0004                  		move.l	d0,4(a5)
0007D468 3B59 0008                  		move.w	(a1)+,8(a5)
0007D46C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D472 1B46 000D                  		move.b	d6,$D(a5)
0007D476 4A04                       		tst.b	d4
0007D478 6B00                       		bmi.s	loc_72396
0007D47A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D480                            
0007D480                            loc_72396:
0007D480 51CF FFB0                  		dbf	d7,loc_72348
0007D484                            
0007D484 4A2E 0250                  		tst.b	$250(a6)
0007D488 6A00                       		bpl.s	loc_723A6
0007D48A 08EE 0002 0340             		bset	#2,$340(a6)
0007D490                            
0007D490                            loc_723A6:
0007D490 4A2E 0310                  		tst.b	$310(a6)
0007D494 6A00                       		bpl.s	locret_723C6
0007D496 08EE 0002 0370             		bset	#2,$370(a6)
0007D49C 0004 001F                  		ori.b	#$1F,d4
0007D4A0 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D4A6 0844 0005                  		bchg	#5,d4
0007D4AA 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D4B0                            
0007D4B0                            locret_723C6:
0007D4B0 4E75                       		rts	
0007D4B2                            ; End of function Sound_ChkValue
0007D4B2                            
0007D4B2                            ; ===========================================================================
0007D4B2 00FF F100                  		dc.l $FFF100
0007D4B6 00FF F1F0                  		dc.l $FFF1F0
0007D4BA 00FF F250                  		dc.l $FFF250
0007D4BE 00FF F310                  		dc.l $FFF310
0007D4C2 00FF F340                  		dc.l $FFF340
0007D4C6 00FF F370                  		dc.l $FFF370
0007D4CA                            
0007D4CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D4CA                            
0007D4CA                            
0007D4CA                            Snd_FadeOut1:				; XREF: Sound_E0
0007D4CA 4216                       		clr.b	0(a6)
0007D4CC 4BEE 0220                  		lea	$220(a6),a5
0007D4D0 7E05                       		moveq	#5,d7
0007D4D2                            
0007D4D2                            loc_723EA:
0007D4D2 4A15                       		tst.b	(a5)
0007D4D4 6A00 0000                  		bpl.w	loc_72472
0007D4D8 0895 0007                  		bclr	#7,(a5)
0007D4DC 7600                       		moveq	#0,d3
0007D4DE 162D 0001                  		move.b	1(a5),d3
0007D4E2 6B00                       		bmi.s	loc_7243C
0007D4E4 4EBA 0000                  		jsr	sub_726FE(pc)
0007D4E8 0C03 0004                  		cmpi.b	#4,d3
0007D4EC 6600                       		bne.s	loc_72416
0007D4EE 4A2E 0340                  		tst.b	$340(a6)
0007D4F2 6A00                       		bpl.s	loc_72416
0007D4F4 4BEE 0340                  		lea	$340(a6),a5
0007D4F8 226E 0020                  		movea.l	$20(a6),a1
0007D4FC 6000                       		bra.s	loc_72428
0007D4FE                            ; ===========================================================================
0007D4FE                            
0007D4FE                            loc_72416:
0007D4FE 5503                       		subq.b	#2,d3
0007D500 E50B                       		lsl.b	#2,d3
0007D502 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D506 264D                       		movea.l	a5,a3
0007D508 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D50C 226E 0018                  		movea.l	$18(a6),a1
0007D510                            
0007D510                            loc_72428:
0007D510 0895 0002                  		bclr	#2,(a5)
0007D514 08D5 0001                  		bset	#1,(a5)
0007D518 102D 000B                  		move.b	$B(a5),d0
0007D51C 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D520 2A4B                       		movea.l	a3,a5
0007D522 6000                       		bra.s	loc_72472
0007D524                            ; ===========================================================================
0007D524                            
0007D524                            loc_7243C:
0007D524 4EBA 0000                  		jsr	sub_729A0(pc)
0007D528 41EE 0370                  		lea	$370(a6),a0
0007D52C 0C03 00E0                  		cmpi.b	#$E0,d3
0007D530 6700                       		beq.s	loc_7245A
0007D532 0C03 00C0                  		cmpi.b	#$C0,d3
0007D536 6700                       		beq.s	loc_7245A
0007D538 E60B                       		lsr.b	#3,d3
0007D53A 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D53E 2070 3000                  		movea.l	(a0,d3.w),a0
0007D542                            
0007D542                            loc_7245A:
0007D542 0890 0002                  		bclr	#2,(a0)
0007D546 08D0 0001                  		bset	#1,(a0)
0007D54A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D550 6600                       		bne.s	loc_72472
0007D552 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D55A                            
0007D55A                            loc_72472:
0007D55A DAFC 0030                  		adda.w	#$30,a5
0007D55E 51CF FF72                  		dbf	d7,loc_723EA
0007D562                            
0007D562 4E75                       		rts	
0007D564                            ; End of function Snd_FadeOut1
0007D564                            
0007D564                            
0007D564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D564                            
0007D564                            
0007D564                            Snd_FadeOut2:				; XREF: Sound_E0
0007D564 4BEE 0340                  		lea	$340(a6),a5
0007D568 4A15                       		tst.b	(a5)
0007D56A 6A00                       		bpl.s	loc_724AE
0007D56C 0895 0007                  		bclr	#7,(a5)
0007D570 0815 0002                  		btst	#2,(a5)
0007D574 6600                       		bne.s	loc_724AE
0007D576 4EBA 0000                  		jsr	loc_7270A(pc)
0007D57A 4BEE 0100                  		lea	$100(a6),a5
0007D57E 0895 0002                  		bclr	#2,(a5)
0007D582 08D5 0001                  		bset	#1,(a5)
0007D586 4A15                       		tst.b	(a5)
0007D588 6A00                       		bpl.s	loc_724AE
0007D58A 226E 0018                  		movea.l	$18(a6),a1
0007D58E 102D 000B                  		move.b	$B(a5),d0
0007D592 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D596                            
0007D596                            loc_724AE:
0007D596 4BEE 0370                  		lea	$370(a6),a5
0007D59A 4A15                       		tst.b	(a5)
0007D59C 6A00                       		bpl.s	locret_724E4
0007D59E 0895 0007                  		bclr	#7,(a5)
0007D5A2 0815 0002                  		btst	#2,(a5)
0007D5A6 6600                       		bne.s	locret_724E4
0007D5A8 4EBA 0000                  		jsr	loc_729A6(pc)
0007D5AC 4BEE 01F0                  		lea	$1F0(a6),a5
0007D5B0 0895 0002                  		bclr	#2,(a5)
0007D5B4 08D5 0001                  		bset	#1,(a5)
0007D5B8 4A15                       		tst.b	(a5)
0007D5BA 6A00                       		bpl.s	locret_724E4
0007D5BC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D5C2 6600                       		bne.s	locret_724E4
0007D5C4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D5CC                            
0007D5CC                            locret_724E4:
0007D5CC 4E75                       		rts	
0007D5CE                            ; End of function Snd_FadeOut2
0007D5CE                            
0007D5CE                            ; ===========================================================================
0007D5CE                            ; ---------------------------------------------------------------------------
0007D5CE                            ; Fade out music
0007D5CE                            ; ---------------------------------------------------------------------------
0007D5CE                            
0007D5CE                            Sound_E0:				; XREF: Sound_ExIndex
0007D5CE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D5D2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D5D6 1D7C 0003 0006             		move.b	#3,6(a6)
0007D5DC 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D5E2 422E 0040                  		clr.b	$40(a6)
0007D5E6 422E 002A                  		clr.b	$2A(a6)
0007D5EA 4E75                       		rts	
0007D5EC                            
0007D5EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5EC                            
0007D5EC                            
0007D5EC                            sub_72504:				; XREF: sub_71B4C
0007D5EC 102E 0006                  		move.b	6(a6),d0
0007D5F0 6700                       		beq.s	loc_72510
0007D5F2 532E 0006                  		subq.b	#1,6(a6)
0007D5F6 4E75                       		rts	
0007D5F8                            ; ===========================================================================
0007D5F8                            
0007D5F8                            loc_72510:
0007D5F8 532E 0004                  		subq.b	#1,4(a6)
0007D5FC 6700 0000                  		beq.w	Sound_E4
0007D600 1D7C 0003 0006             		move.b	#3,6(a6)
0007D606 4BEE 0070                  		lea	$70(a6),a5
0007D60A 7E05                       		moveq	#5,d7
0007D60C                            
0007D60C                            loc_72524:
0007D60C 4A15                       		tst.b	(a5)
0007D60E 6A00                       		bpl.s	loc_72538
0007D610 522D 0009                  		addq.b	#1,9(a5)
0007D614 6A00                       		bpl.s	loc_72534
0007D616 0895 0007                  		bclr	#7,(a5)
0007D61A 6000                       		bra.s	loc_72538
0007D61C                            ; ===========================================================================
0007D61C                            
0007D61C                            loc_72534:
0007D61C 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D620                            
0007D620                            loc_72538:
0007D620 DAFC 0030                  		adda.w	#$30,a5
0007D624 51CF FFE6                  		dbf	d7,loc_72524
0007D628                            
0007D628 7E02                       		moveq	#2,d7
0007D62A                            
0007D62A                            loc_72542:
0007D62A 4A15                       		tst.b	(a5)
0007D62C 6A00                       		bpl.s	loc_72560
0007D62E 522D 0009                  		addq.b	#1,9(a5)
0007D632 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D638 6500                       		bcs.s	loc_72558
0007D63A 0895 0007                  		bclr	#7,(a5)
0007D63E 6000                       		bra.s	loc_72560
0007D640                            ; ===========================================================================
0007D640                            
0007D640                            loc_72558:
0007D640 1C2D 0009                  		move.b	9(a5),d6
0007D644 4EBA 0000                  		jsr	sub_7296A(pc)
0007D648                            
0007D648                            loc_72560:
0007D648 DAFC 0030                  		adda.w	#$30,a5
0007D64C 51CF FFDC                  		dbf	d7,loc_72542
0007D650                            
0007D650 4E75                       		rts	
0007D652                            ; End of function sub_72504
0007D652                            
0007D652                            
0007D652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D652                            
0007D652                            
0007D652                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D652 7602                       		moveq	#2,d3
0007D654 7028                       		moveq	#$28,d0
0007D656                            
0007D656                            loc_7256E:
0007D656 1203                       		move.b	d3,d1
0007D658 4EBA 0000                  		jsr	sub_7272E(pc)
0007D65C 5801                       		addq.b	#4,d1
0007D65E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D662 51CB FFF2                  		dbf	d3,loc_7256E
0007D666                            
0007D666 7040                       		moveq	#$40,d0
0007D668 727F                       		moveq	#$7F,d1
0007D66A 7802                       		moveq	#2,d4
0007D66C                            
0007D66C                            loc_72584:
0007D66C 7603                       		moveq	#3,d3
0007D66E                            
0007D66E                            loc_72586:
0007D66E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D672 4EBA 0000                  		jsr	sub_72764(pc)
0007D676 5840                       		addq.w	#4,d0
0007D678 51CB FFF4                  		dbf	d3,loc_72586
0007D67C                            
0007D67C 0400 000F                  		subi.b	#$F,d0
0007D680 51CC FFEA                  		dbf	d4,loc_72584
0007D684                            
0007D684 4E75                       		rts	
0007D686                            ; End of function sub_7256A
0007D686                            
0007D686                            ; ===========================================================================
0007D686                            ; ---------------------------------------------------------------------------
0007D686                            ; Stop music
0007D686                            ; ---------------------------------------------------------------------------
0007D686                            
0007D686                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D686 702B                       		moveq	#$2B,d0
0007D688 123C 0080                  		move.b	#$80,d1
0007D68C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D690 7027                       		moveq	#$27,d0
0007D692 7200                       		moveq	#0,d1
0007D694 4EBA 0000                  		jsr	sub_7272E(pc)
0007D698 204E                       		movea.l	a6,a0
0007D69A 303C 00E3                  		move.w	#$E3,d0
0007D69E                            
0007D69E                            loc_725B6:
0007D69E 4298                       		clr.l	(a0)+
0007D6A0 51C8 FFFC                  		dbf	d0,loc_725B6
0007D6A4                            
0007D6A4 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D6AA 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D6AE 6000 0000                  		bra.w	sub_729B6
0007D6B2                            
0007D6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6B2                            
0007D6B2                            
0007D6B2                            sub_725CA:				; XREF: Sound_ChkValue
0007D6B2 204E                       		movea.l	a6,a0
0007D6B4 1216                       		move.b	0(a6),d1
0007D6B6 142E 0027                  		move.b	$27(a6),d2
0007D6BA 162E 002A                  		move.b	$2A(a6),d3
0007D6BE 182E 0026                  		move.b	$26(a6),d4
0007D6C2 3A2E 000A                  		move.w	$A(a6),d5
0007D6C6 303C 0087                  		move.w	#$87,d0
0007D6CA                            
0007D6CA                            loc_725E4:
0007D6CA 4298                       		clr.l	(a0)+
0007D6CC 51C8 FFFC                  		dbf	d0,loc_725E4
0007D6D0                            
0007D6D0 1C81                       		move.b	d1,0(a6)
0007D6D2 1D42 0027                  		move.b	d2,$27(a6)
0007D6D6 1D43 002A                  		move.b	d3,$2A(a6)
0007D6DA 1D44 0026                  		move.b	d4,$26(a6)
0007D6DE 3D45 000A                  		move.w	d5,$A(a6)
0007D6E2 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D6E8 4EBA FF68                  		jsr	sub_7256A(pc)
0007D6EC 6000 0000                  		bra.w	sub_729B6
0007D6F0                            ; End of function sub_725CA
0007D6F0                            
0007D6F0                            
0007D6F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6F0                            
0007D6F0                            
0007D6F0                            sub_7260C:				; XREF: sub_71B4C
0007D6F0 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D6F6 41EE 004E                  		lea	$4E(a6),a0
0007D6FA 7030                       		moveq	#$30,d0
0007D6FC 7209                       		moveq	#9,d1
0007D6FE                            
0007D6FE                            loc_7261A:
0007D6FE 5210                       		addq.b	#1,(a0)
0007D700 D0C0                       		adda.w	d0,a0
0007D702 51C9 FFFA                  		dbf	d1,loc_7261A
0007D706                            
0007D706 4E75                       		rts	
0007D708                            ; End of function sub_7260C
0007D708                            
0007D708                            ; ===========================================================================
0007D708                            ; ---------------------------------------------------------------------------
0007D708                            ; Speed	up music
0007D708                            ; ---------------------------------------------------------------------------
0007D708                            
0007D708                            Sound_E2:				; XREF: Sound_ExIndex
0007D708 4A2E 0027                  		tst.b	$27(a6)
0007D70C 6600                       		bne.s	loc_7263E
0007D70E 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D714 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D71A 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D720 4E75                       		rts	
0007D722                            ; ===========================================================================
0007D722                            
0007D722                            loc_7263E:
0007D722 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D728 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D72E 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D734 4E75                       		rts	
0007D736                            ; ===========================================================================
0007D736                            ; ---------------------------------------------------------------------------
0007D736                            ; Change music back to normal speed
0007D736                            ; ---------------------------------------------------------------------------
0007D736                            
0007D736                            Sound_E3:				; XREF: Sound_ExIndex
0007D736 4A2E 0027                  		tst.b	$27(a6)
0007D73A 6600                       		bne.s	loc_7266A
0007D73C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D742 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D748 422E 002A                  		clr.b	$2A(a6)
0007D74C 4E75                       		rts	
0007D74E                            ; ===========================================================================
0007D74E                            
0007D74E                            loc_7266A:
0007D74E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D754 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D75A 422E 03CA                  		clr.b	$3CA(a6)
0007D75E 4E75                       		rts	
0007D760                            
0007D760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D760                            
0007D760                            
0007D760                            sub_7267C:				; XREF: sub_71B4C
0007D760 4A2E 0025                  		tst.b	$25(a6)
0007D764 6700                       		beq.s	loc_72688
0007D766 532E 0025                  		subq.b	#1,$25(a6)
0007D76A 4E75                       		rts	
0007D76C                            ; ===========================================================================
0007D76C                            
0007D76C                            loc_72688:
0007D76C 4A2E 0026                  		tst.b	$26(a6)
0007D770 6700                       		beq.s	loc_726D6
0007D772 532E 0026                  		subq.b	#1,$26(a6)
0007D776 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D77C 4BEE 0070                  		lea	$70(a6),a5
0007D780 7E05                       		moveq	#5,d7
0007D782                            
0007D782                            loc_7269E:
0007D782 4A15                       		tst.b	(a5)
0007D784 6A00                       		bpl.s	loc_726AA
0007D786 532D 0009                  		subq.b	#1,9(a5)
0007D78A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D78E                            
0007D78E                            loc_726AA:
0007D78E DAFC 0030                  		adda.w	#$30,a5
0007D792 51CF FFEE                  		dbf	d7,loc_7269E
0007D796 7E02                       		moveq	#2,d7
0007D798                            
0007D798                            loc_726B4:
0007D798 4A15                       		tst.b	(a5)
0007D79A 6A00                       		bpl.s	loc_726CC
0007D79C 532D 0009                  		subq.b	#1,9(a5)
0007D7A0 1C2D 0009                  		move.b	9(a5),d6
0007D7A4 0C06 0010                  		cmpi.b	#$10,d6
0007D7A8 6500                       		bcs.s	loc_726C8
0007D7AA 7C0F                       		moveq	#$F,d6
0007D7AC                            
0007D7AC                            loc_726C8:
0007D7AC 4EBA 0000                  		jsr	sub_7296A(pc)
0007D7B0                            
0007D7B0                            loc_726CC:
0007D7B0 DAFC 0030                  		adda.w	#$30,a5
0007D7B4 51CF FFE2                  		dbf	d7,loc_726B4
0007D7B8 4E75                       		rts	
0007D7BA                            ; ===========================================================================
0007D7BA                            
0007D7BA                            loc_726D6:
0007D7BA 08AE 0002 0040             		bclr	#2,$40(a6)
0007D7C0 422E 0024                  		clr.b	$24(a6)
0007D7C4 4E75                       		rts	
0007D7C6                            ; End of function sub_7267C
0007D7C6                            
0007D7C6                            ; ===========================================================================
0007D7C6                            
0007D7C6                            loc_726E2:				; XREF: sub_71CCA
0007D7C6 0815 0001                  		btst	#1,(a5)
0007D7CA 6600                       		bne.s	locret_726FC
0007D7CC 0815 0002                  		btst	#2,(a5)
0007D7D0 6600                       		bne.s	locret_726FC
0007D7D2 7028                       		moveq	#$28,d0
0007D7D4 122D 0001                  		move.b	1(a5),d1
0007D7D8 0001 00F0                  		ori.b	#-$10,d1
0007D7DC 6000 0000                  		bra.w	sub_7272E
0007D7E0                            ; ===========================================================================
0007D7E0                            
0007D7E0                            locret_726FC:
0007D7E0 4E75                       		rts	
0007D7E2                            
0007D7E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7E2                            
0007D7E2                            
0007D7E2                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D7E2 0815 0004                  		btst	#4,(a5)
0007D7E6 6600                       		bne.s	locret_72714
0007D7E8 0815 0002                  		btst	#2,(a5)
0007D7EC 6600                       		bne.s	locret_72714
0007D7EE                            
0007D7EE                            loc_7270A:				; XREF: Snd_FadeOut2
0007D7EE 7028                       		moveq	#$28,d0
0007D7F0 122D 0001                  		move.b	1(a5),d1
0007D7F4 6000 0000                  		bra.w	sub_7272E
0007D7F8                            ; ===========================================================================
0007D7F8                            
0007D7F8                            locret_72714:
0007D7F8 4E75                       		rts	
0007D7FA                            ; End of function sub_726FE
0007D7FA                            
0007D7FA                            ; ===========================================================================
0007D7FA                            
0007D7FA                            loc_72716:				; XREF: sub_72A5A
0007D7FA 0815 0002                  		btst	#2,(a5)
0007D7FE 6600                       		bne.s	locret_72720
0007D800 6000 0000                  		bra.w	sub_72722
0007D804                            ; ===========================================================================
0007D804                            
0007D804                            locret_72720:
0007D804 4E75                       		rts	
0007D806                            
0007D806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D806                            
0007D806                            
0007D806                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D806 082D 0002 0001             		btst	#2,1(a5)
0007D80C 6600                       		bne.s	loc_7275A
0007D80E D02D 0001                  		add.b	1(a5),d0
0007D812                            ; End of function sub_72722
0007D812                            
0007D812                            
0007D812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D812                            
0007D812                            
0007D812                            sub_7272E:				; XREF: loc_71E6A
0007D812 1439 00A0 4000             		move.b	($A04000).l,d2
0007D818 0802 0007                  		btst	#7,d2
0007D81C 66F4                       		bne.s	sub_7272E
0007D81E 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D824 4E71                       		nop	
0007D826 4E71                       		nop	
0007D828 4E71                       		nop	
0007D82A                            
0007D82A                            loc_72746:
0007D82A 1439 00A0 4000             		move.b	($A04000).l,d2
0007D830 0802 0007                  		btst	#7,d2
0007D834 66F4                       		bne.s	loc_72746
0007D836                            
0007D836 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D83C 4E75                       		rts	
0007D83E                            ; End of function sub_7272E
0007D83E                            
0007D83E                            ; ===========================================================================
0007D83E                            
0007D83E                            loc_7275A:				; XREF: sub_72722
0007D83E 142D 0001                  		move.b	1(a5),d2
0007D842 0882 0002                  		bclr	#2,d2
0007D846 D002                       		add.b	d2,d0
0007D848                            
0007D848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D848                            
0007D848                            
0007D848                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D848 1439 00A0 4000             		move.b	($A04000).l,d2
0007D84E 0802 0007                  		btst	#7,d2
0007D852 66F4                       		bne.s	sub_72764
0007D854 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D85A 4E71                       		nop	
0007D85C 4E71                       		nop	
0007D85E 4E71                       		nop	
0007D860                            
0007D860                            loc_7277C:
0007D860 1439 00A0 4000             		move.b	($A04000).l,d2
0007D866 0802 0007                  		btst	#7,d2
0007D86A 66F4                       		bne.s	loc_7277C
0007D86C                            
0007D86C 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D872 4E75                       		rts	
0007D874                            ; End of function sub_72764
0007D874                            
0007D874                            ; ===========================================================================
0007D874 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D886 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D898 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D8A8 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D8B8 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D8C8 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D8D8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D8E8 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D8F8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D908 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D918 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D928 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D934                            
0007D934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D934                            
0007D934                            
0007D934                            sub_72850:				; XREF: sub_71B4C
0007D934 532D 000E                  		subq.b	#1,$E(a5)
0007D938 6600                       		bne.s	loc_72866
0007D93A 0895 0004                  		bclr	#4,(a5)
0007D93E 4EBA 0000                  		jsr	sub_72878(pc)
0007D942 4EBA 0000                  		jsr	sub_728DC(pc)
0007D946 6000 0000                  		bra.w	loc_7292E
0007D94A                            ; ===========================================================================
0007D94A                            
0007D94A                            loc_72866:
0007D94A 4EBA F418                  		jsr	sub_71D9E(pc)
0007D94E 4EBA 0000                  		jsr	sub_72926(pc)
0007D952 4EBA F438                  		jsr	sub_71DC6(pc)
0007D956 4EBA 0000                  		jsr	sub_728E2(pc)
0007D95A 4E75                       		rts	
0007D95C                            ; End of function sub_72850
0007D95C                            
0007D95C                            
0007D95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D95C                            
0007D95C                            
0007D95C                            sub_72878:				; XREF: sub_72850
0007D95C 0895 0001                  		bclr	#1,(a5)
0007D960 286D 0004                  		movea.l	4(a5),a4
0007D964                            
0007D964                            loc_72880:
0007D964 7A00                       		moveq	#0,d5
0007D966 1A1C                       		move.b	(a4)+,d5
0007D968 0C05 00E0                  		cmpi.b	#$E0,d5
0007D96C 6500                       		bcs.s	loc_72890
0007D96E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D972 60F0                       		bra.s	loc_72880
0007D974                            ; ===========================================================================
0007D974                            
0007D974                            loc_72890:
0007D974 4A05                       		tst.b	d5
0007D976 6A00                       		bpl.s	loc_728A4
0007D978 4EBA 0000                  		jsr	sub_728AC(pc)
0007D97C 1A1C                       		move.b	(a4)+,d5
0007D97E 4A05                       		tst.b	d5
0007D980 6A00                       		bpl.s	loc_728A4
0007D982 534C                       		subq.w	#1,a4
0007D984 6000 F3A0                  		bra.w	sub_71D60
0007D988                            ; ===========================================================================
0007D988                            
0007D988                            loc_728A4:
0007D988 4EBA F37C                  		jsr	sub_71D40(pc)
0007D98C 6000 F398                  		bra.w	sub_71D60
0007D990                            ; End of function sub_72878
0007D990                            
0007D990                            
0007D990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D990                            
0007D990                            
0007D990                            sub_728AC:				; XREF: sub_72878
0007D990 0405 0081                  		subi.b	#$81,d5
0007D994 6500                       		bcs.s	loc_728CA
0007D996 DA2D 0008                  		add.b	8(a5),d5
0007D99A 0245 007F                  		andi.w	#$7F,d5
0007D99E E34D                       		lsl.w	#1,d5
0007D9A0 41FA 0000                  		lea	word_729CE(pc),a0
0007D9A4 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D9AA 6000 F37A                  		bra.w	sub_71D60
0007D9AE                            ; ===========================================================================
0007D9AE                            
0007D9AE                            loc_728CA:
0007D9AE 08D5 0001                  		bset	#1,(a5)
0007D9B2 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D9B8 4EBA F36C                  		jsr	sub_71D60(pc)
0007D9BC 6000 0000                  		bra.w	sub_729A0
0007D9C0                            ; End of function sub_728AC
0007D9C0                            
0007D9C0                            
0007D9C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9C0                            
0007D9C0                            
0007D9C0                            sub_728DC:				; XREF: sub_72850
0007D9C0 3C2D 0010                  		move.w	$10(a5),d6
0007D9C4 6B00                       		bmi.s	loc_72920
0007D9C6                            ; End of function sub_728DC
0007D9C6                            
0007D9C6                            
0007D9C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9C6                            
0007D9C6                            
0007D9C6                            sub_728E2:				; XREF: sub_72850
0007D9C6 102D 001E                  		move.b	$1E(a5),d0
0007D9CA 4880                       		ext.w	d0
0007D9CC DC40                       		add.w	d0,d6
0007D9CE 0815 0002                  		btst	#2,(a5)
0007D9D2 6600                       		bne.s	locret_7291E
0007D9D4 0815 0001                  		btst	#1,(a5)
0007D9D8 6600                       		bne.s	locret_7291E
0007D9DA 102D 0001                  		move.b	1(a5),d0
0007D9DE 0C00 00E0                  		cmpi.b	#$E0,d0
0007D9E2 6600                       		bne.s	loc_72904
0007D9E4 103C 00C0                  		move.b	#$C0,d0
0007D9E8                            
0007D9E8                            loc_72904:
0007D9E8 3206                       		move.w	d6,d1
0007D9EA 0201 000F                  		andi.b	#$F,d1
0007D9EE 8001                       		or.b	d1,d0
0007D9F0 E84E                       		lsr.w	#4,d6
0007D9F2 0206 003F                  		andi.b	#$3F,d6
0007D9F6 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D9FC 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DA02                            
0007DA02                            locret_7291E:
0007DA02 4E75                       		rts	
0007DA04                            ; End of function sub_728E2
0007DA04                            
0007DA04                            ; ===========================================================================
0007DA04                            
0007DA04                            loc_72920:				; XREF: sub_728DC
0007DA04 08D5 0001                  		bset	#1,(a5)
0007DA08 4E75                       		rts	
0007DA0A                            
0007DA0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA0A                            
0007DA0A                            
0007DA0A                            sub_72926:				; XREF: sub_72850
0007DA0A 4A2D 000B                  		tst.b	$B(a5)
0007DA0E 6700 0000                  		beq.w	locret_7298A
0007DA12                            
0007DA12                            loc_7292E:				; XREF: sub_72850
0007DA12 1C2D 0009                  		move.b	9(a5),d6
0007DA16 7000                       		moveq	#0,d0
0007DA18 102D 000B                  		move.b	$B(a5),d0
0007DA1C 6700                       		beq.s	sub_7296A
0007DA1E 2079 0007 C886             		movea.l	(Go_PSGIndex).l,a0
0007DA24 5340                       		subq.w	#1,d0
0007DA26 E548                       		lsl.w	#2,d0
0007DA28 2070 0000                  		movea.l	(a0,d0.w),a0
0007DA2C 102D 000C                  		move.b	$C(a5),d0
0007DA30 1030 0000                  		move.b	(a0,d0.w),d0
0007DA34 522D 000C                  		addq.b	#1,$C(a5)
0007DA38 0800 0007                  		btst	#7,d0
0007DA3C 6700                       		beq.s	loc_72960
0007DA3E 0C00 0080                  		cmpi.b	#$80,d0
0007DA42 6700                       		beq.s	loc_7299A
0007DA44                            
0007DA44                            loc_72960:
0007DA44 DC40                       		add.w	d0,d6
0007DA46 0C06 0010                  		cmpi.b	#$10,d6
0007DA4A 6500                       		bcs.s	sub_7296A
0007DA4C 7C0F                       		moveq	#$F,d6
0007DA4E                            ; End of function sub_72926
0007DA4E                            
0007DA4E                            
0007DA4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA4E                            
0007DA4E                            
0007DA4E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007DA4E 0815 0001                  		btst	#1,(a5)
0007DA52 6600                       		bne.s	locret_7298A
0007DA54 0815 0002                  		btst	#2,(a5)
0007DA58 6600                       		bne.s	locret_7298A
0007DA5A 0815 0004                  		btst	#4,(a5)
0007DA5E 6600                       		bne.s	loc_7298C
0007DA60                            
0007DA60                            loc_7297C:
0007DA60 8C2D 0001                  		or.b	1(a5),d6
0007DA64 0606 0010                  		addi.b	#$10,d6
0007DA68 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DA6E                            
0007DA6E                            locret_7298A:
0007DA6E 4E75                       		rts	
0007DA70                            ; ===========================================================================
0007DA70                            
0007DA70                            loc_7298C:
0007DA70 4A2D 0013                  		tst.b	$13(a5)
0007DA74 67EA                       		beq.s	loc_7297C
0007DA76 4A2D 0012                  		tst.b	$12(a5)
0007DA7A 66E4                       		bne.s	loc_7297C
0007DA7C 4E75                       		rts	
0007DA7E                            ; End of function sub_7296A
0007DA7E                            
0007DA7E                            ; ===========================================================================
0007DA7E                            
0007DA7E                            loc_7299A:				; XREF: sub_72926
0007DA7E 532D 000C                  		subq.b	#1,$C(a5)
0007DA82 4E75                       		rts	
0007DA84                            
0007DA84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA84                            
0007DA84                            
0007DA84                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007DA84 0815 0002                  		btst	#2,(a5)
0007DA88 6600                       		bne.s	locret_729B4
0007DA8A                            
0007DA8A                            loc_729A6:				; XREF: Snd_FadeOut2
0007DA8A 102D 0001                  		move.b	1(a5),d0
0007DA8E 0000 001F                  		ori.b	#$1F,d0
0007DA92 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DA98                            
0007DA98                            locret_729B4:
0007DA98 4E75                       		rts	
0007DA9A                            ; End of function sub_729A0
0007DA9A                            
0007DA9A                            
0007DA9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA9A                            
0007DA9A                            
0007DA9A                            sub_729B6:				; XREF: loc_71E7C
0007DA9A 41F9 00C0 0011             		lea	($C00011).l,a0
0007DAA0 10BC 009F                  		move.b	#$9F,(a0)
0007DAA4 10BC 00BF                  		move.b	#$BF,(a0)
0007DAA8 10BC 00DF                  		move.b	#$DF,(a0)
0007DAAC 10BC 00FF                  		move.b	#$FF,(a0)
0007DAB0 4E75                       		rts	
0007DAB2                            ; End of function sub_729B6
0007DAB2                            
0007DAB2                            ; ===========================================================================
0007DAB2 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007DAC4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007DAD6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007DAEA 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007DAFE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007DB12 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007DB26 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007DB3A 0011 0000                  		dc.w $11, 0
0007DB3E                            
0007DB3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB3E                            
0007DB3E                            
0007DB3E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007DB3E 0445 00E0                  		subi.w	#$E0,d5
0007DB42 E54D                       		lsl.w	#2,d5
0007DB44 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007DB48                            ; End of function sub_72A5A
0007DB48                            
0007DB48                            ; ===========================================================================
0007DB48                            
0007DB48                            loc_72A64:
0007DB48 6000 0000                  		bra.w	loc_72ACC
0007DB4C                            ; ===========================================================================
0007DB4C 6000 0000                  		bra.w	loc_72AEC
0007DB50                            ; ===========================================================================
0007DB50 6000 0000                  		bra.w	loc_72AF2
0007DB54                            ; ===========================================================================
0007DB54 6000 0000                  		bra.w	loc_72AF8
0007DB58                            ; ===========================================================================
0007DB58 6000 0000                  		bra.w	loc_72B14
0007DB5C                            ; ===========================================================================
0007DB5C 6000 0000                  		bra.w	loc_72B9E
0007DB60                            ; ===========================================================================
0007DB60 6000 0000                  		bra.w	loc_72BA4
0007DB64                            ; ===========================================================================
0007DB64 6000 0000                  		bra.w	loc_72BAE
0007DB68                            ; ===========================================================================
0007DB68 6000 0000                  		bra.w	loc_72BB4
0007DB6C                            ; ===========================================================================
0007DB6C 6000 0000                  		bra.w	loc_72BBE
0007DB70                            ; ===========================================================================
0007DB70 6000 0000                  		bra.w	loc_72BC6
0007DB74                            ; ===========================================================================
0007DB74 6000 0000                  		bra.w	loc_72BD0
0007DB78                            ; ===========================================================================
0007DB78 6000 0000                  		bra.w	loc_72BE6
0007DB7C                            ; ===========================================================================
0007DB7C 6000 0000                  		bra.w	loc_72BEE
0007DB80                            ; ===========================================================================
0007DB80 6000 0000                  		bra.w	loc_72BF4
0007DB84                            ; ===========================================================================
0007DB84 6000 0000                  		bra.w	loc_72C26
0007DB88                            ; ===========================================================================
0007DB88 6000 0000                  		bra.w	loc_72D30
0007DB8C                            ; ===========================================================================
0007DB8C 6000 0000                  		bra.w	loc_72D52
0007DB90                            ; ===========================================================================
0007DB90 6000 0000                  		bra.w	loc_72D58
0007DB94                            ; ===========================================================================
0007DB94 6000 0000                  		bra.w	loc_72E06
0007DB98                            ; ===========================================================================
0007DB98 6000 0000                  		bra.w	loc_72E20
0007DB9C                            ; ===========================================================================
0007DB9C 6000 0000                  		bra.w	loc_72E26
0007DBA0                            ; ===========================================================================
0007DBA0 6000 0000                  		bra.w	loc_72E2C
0007DBA4                            ; ===========================================================================
0007DBA4 6000 0000                  		bra.w	loc_72E38
0007DBA8                            ; ===========================================================================
0007DBA8 6000 0000                  		bra.w	loc_72E52
0007DBAC                            ; ===========================================================================
0007DBAC 6000 0000                  		bra.w	loc_72E64
0007DBB0                            ; ===========================================================================
0007DBB0                            
0007DBB0                            loc_72ACC:				; XREF: loc_72A64
0007DBB0 121C                       		move.b	(a4)+,d1
0007DBB2 4A2D 0001                  		tst.b	1(a5)
0007DBB6 6B00                       		bmi.s	locret_72AEA
0007DBB8 102D 000A                  		move.b	$A(a5),d0
0007DBBC 0200 0037                  		andi.b	#$37,d0
0007DBC0 8200                       		or.b	d0,d1
0007DBC2 1B41 000A                  		move.b	d1,$A(a5)
0007DBC6 103C 00B4                  		move.b	#$B4,d0
0007DBCA 6000 FC2E                  		bra.w	loc_72716
0007DBCE                            ; ===========================================================================
0007DBCE                            
0007DBCE                            locret_72AEA:
0007DBCE 4E75                       		rts	
0007DBD0                            ; ===========================================================================
0007DBD0                            
0007DBD0                            loc_72AEC:				; XREF: loc_72A64
0007DBD0 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DBD4 4E75                       		rts	
0007DBD6                            ; ===========================================================================
0007DBD6                            
0007DBD6                            loc_72AF2:				; XREF: loc_72A64
0007DBD6 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DBDA 4E75                       		rts	
0007DBDC                            ; ===========================================================================
0007DBDC                            
0007DBDC                            loc_72AF8:				; XREF: loc_72A64
0007DBDC 7000                       		moveq	#0,d0
0007DBDE 102D 000D                  		move.b	$D(a5),d0
0007DBE2 2875 0000                  		movea.l	(a5,d0.w),a4
0007DBE6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DBEE 544C                       		addq.w	#2,a4
0007DBF0 5800                       		addq.b	#4,d0
0007DBF2 1B40 000D                  		move.b	d0,$D(a5)
0007DBF6 4E75                       		rts	
0007DBF8                            ; ===========================================================================
0007DBF8                            
0007DBF8                            loc_72B14:				; XREF: loc_72A64
0007DBF8 204E                       		movea.l	a6,a0
0007DBFA 43EE 03A0                  		lea	$3A0(a6),a1
0007DBFE 303C 0087                  		move.w	#$87,d0
0007DC02                            
0007DC02                            loc_72B1E:
0007DC02 20D9                       		move.l	(a1)+,(a0)+
0007DC04 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DC08                            
0007DC08 08EE 0002 0040             		bset	#2,$40(a6)
0007DC0E 264D                       		movea.l	a5,a3
0007DC10 1C3C 0028                  		move.b	#$28,d6
0007DC14 9C2E 0026                  		sub.b	$26(a6),d6
0007DC18 7E05                       		moveq	#5,d7
0007DC1A 4BEE 0070                  		lea	$70(a6),a5
0007DC1E                            
0007DC1E                            loc_72B3A:
0007DC1E 0815 0007                  		btst	#7,(a5)
0007DC22 6700                       		beq.s	loc_72B5C
0007DC24 08D5 0001                  		bset	#1,(a5)
0007DC28 DD2D 0009                  		add.b	d6,9(a5)
0007DC2C 0815 0002                  		btst	#2,(a5)
0007DC30 6600                       		bne.s	loc_72B5C
0007DC32 7000                       		moveq	#0,d0
0007DC34 102D 000B                  		move.b	$B(a5),d0
0007DC38 226E 0018                  		movea.l	$18(a6),a1
0007DC3C 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DC40                            
0007DC40                            loc_72B5C:
0007DC40 DAFC 0030                  		adda.w	#$30,a5
0007DC44 51CF FFD8                  		dbf	d7,loc_72B3A
0007DC48                            
0007DC48 7E02                       		moveq	#2,d7
0007DC4A                            
0007DC4A                            loc_72B66:
0007DC4A 0815 0007                  		btst	#7,(a5)
0007DC4E 6700                       		beq.s	loc_72B78
0007DC50 08D5 0001                  		bset	#1,(a5)
0007DC54 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DC58 DD2D 0009                  		add.b	d6,9(a5)
0007DC5C                            
0007DC5C                            loc_72B78:
0007DC5C DAFC 0030                  		adda.w	#$30,a5
0007DC60 51CF FFE8                  		dbf	d7,loc_72B66
0007DC64 2A4B                       		movea.l	a3,a5
0007DC66 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DC6C 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DC72 422E 0027                  		clr.b	$27(a6)
0007DC76 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DC7E 504F                       		addq.w	#8,sp
0007DC80 4E75                       		rts	
0007DC82                            ; ===========================================================================
0007DC82                            
0007DC82                            loc_72B9E:				; XREF: loc_72A64
0007DC82 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DC86 4E75                       		rts	
0007DC88                            ; ===========================================================================
0007DC88                            
0007DC88                            loc_72BA4:				; XREF: loc_72A64
0007DC88 101C                       		move.b	(a4)+,d0
0007DC8A D12D 0009                  		add.b	d0,9(a5)
0007DC8E 6000 0000                  		bra.w	sub_72CB4
0007DC92                            ; ===========================================================================
0007DC92                            
0007DC92                            loc_72BAE:				; XREF: loc_72A64
0007DC92 08D5 0004                  		bset	#4,(a5)
0007DC96 4E75                       		rts	
0007DC98                            ; ===========================================================================
0007DC98                            
0007DC98                            loc_72BB4:				; XREF: loc_72A64
0007DC98 1B54 0012                  		move.b	(a4),$12(a5)
0007DC9C 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DCA0 4E75                       		rts	
0007DCA2                            ; ===========================================================================
0007DCA2                            
0007DCA2                            loc_72BBE:				; XREF: loc_72A64
0007DCA2 101C                       		move.b	(a4)+,d0
0007DCA4 D12D 0008                  		add.b	d0,8(a5)
0007DCA8 4E75                       		rts	
0007DCAA                            ; ===========================================================================
0007DCAA                            
0007DCAA                            loc_72BC6:				; XREF: loc_72A64
0007DCAA 1D54 0002                  		move.b	(a4),2(a6)
0007DCAE 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DCB2 4E75                       		rts	
0007DCB4                            ; ===========================================================================
0007DCB4                            
0007DCB4                            loc_72BD0:				; XREF: loc_72A64
0007DCB4 41EE 0040                  		lea	$40(a6),a0
0007DCB8 101C                       		move.b	(a4)+,d0
0007DCBA 7230                       		moveq	#$30,d1
0007DCBC 7409                       		moveq	#9,d2
0007DCBE                            
0007DCBE                            loc_72BDA:
0007DCBE 1140 0002                  		move.b	d0,2(a0)
0007DCC2 D0C1                       		adda.w	d1,a0
0007DCC4 51CA FFF8                  		dbf	d2,loc_72BDA
0007DCC8                            
0007DCC8 4E75                       		rts	
0007DCCA                            ; ===========================================================================
0007DCCA                            
0007DCCA                            loc_72BE6:				; XREF: loc_72A64
0007DCCA 101C                       		move.b	(a4)+,d0
0007DCCC D12D 0009                  		add.b	d0,9(a5)
0007DCD0 4E75                       		rts	
0007DCD2                            ; ===========================================================================
0007DCD2                            
0007DCD2                            loc_72BEE:				; XREF: loc_72A64
0007DCD2 422E 002C                  		clr.b	$2C(a6)
0007DCD6 4E75                       		rts	
0007DCD8                            ; ===========================================================================
0007DCD8                            
0007DCD8                            loc_72BF4:				; XREF: loc_72A64
0007DCD8 0895 0007                  		bclr	#7,(a5)
0007DCDC 0895 0004                  		bclr	#4,(a5)
0007DCE0 4EBA FB00                  		jsr	sub_726FE(pc)
0007DCE4 4A2E 0250                  		tst.b	$250(a6)
0007DCE8 6B00                       		bmi.s	loc_72C22
0007DCEA 264D                       		movea.l	a5,a3
0007DCEC 4BEE 0100                  		lea	$100(a6),a5
0007DCF0 226E 0018                  		movea.l	$18(a6),a1
0007DCF4 0895 0002                  		bclr	#2,(a5)
0007DCF8 08D5 0001                  		bset	#1,(a5)
0007DCFC 102D 000B                  		move.b	$B(a5),d0
0007DD00 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DD04 2A4B                       		movea.l	a3,a5
0007DD06                            
0007DD06                            loc_72C22:
0007DD06 504F                       		addq.w	#8,sp
0007DD08 4E75                       		rts	
0007DD0A                            ; ===========================================================================
0007DD0A                            
0007DD0A                            loc_72C26:				; XREF: loc_72A64
0007DD0A 7000                       		moveq	#0,d0
0007DD0C 101C                       		move.b	(a4)+,d0
0007DD0E 1B40 000B                  		move.b	d0,$B(a5)
0007DD12 0815 0002                  		btst	#2,(a5)
0007DD16 6600 0000                  		bne.w	locret_72CAA
0007DD1A 226E 0018                  		movea.l	$18(a6),a1
0007DD1E 4A2E 000E                  		tst.b	$E(a6)
0007DD22 6700                       		beq.s	sub_72C4E
0007DD24 226D 0020                  		movea.l	$20(a5),a1
0007DD28 4A2E 000E                  		tst.b	$E(a6)
0007DD2C 6B00                       		bmi.s	sub_72C4E
0007DD2E 226E 0020                  		movea.l	$20(a6),a1
0007DD32                            
0007DD32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD32                            
0007DD32                            
0007DD32                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DD32 5340                       		subq.w	#1,d0
0007DD34 6B00                       		bmi.s	loc_72C5C
0007DD36 323C 0019                  		move.w	#$19,d1
0007DD3A                            
0007DD3A                            loc_72C56:
0007DD3A D2C1                       		adda.w	d1,a1
0007DD3C 51C8 FFFC                  		dbf	d0,loc_72C56
0007DD40                            
0007DD40                            loc_72C5C:
0007DD40 1219                       		move.b	(a1)+,d1
0007DD42 1B41 001F                  		move.b	d1,$1F(a5)
0007DD46 1801                       		move.b	d1,d4
0007DD48 103C 00B0                  		move.b	#$B0,d0
0007DD4C 4EBA FAB8                  		jsr	sub_72722(pc)
0007DD50 45FA 0000                  		lea	byte_72D18(pc),a2
0007DD54 7613                       		moveq	#$13,d3
0007DD56                            
0007DD56                            loc_72C72:
0007DD56 101A                       		move.b	(a2)+,d0
0007DD58 1219                       		move.b	(a1)+,d1
0007DD5A 4EBA FAAA                  		jsr	sub_72722(pc)
0007DD5E 51CB FFF6                  		dbf	d3,loc_72C72
0007DD62 7A03                       		moveq	#3,d5
0007DD64 0244 0007                  		andi.w	#7,d4
0007DD68 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DD6C 162D 0009                  		move.b	9(a5),d3
0007DD70                            
0007DD70                            loc_72C8C:
0007DD70 101A                       		move.b	(a2)+,d0
0007DD72 1219                       		move.b	(a1)+,d1
0007DD74 E20C                       		lsr.b	#1,d4
0007DD76 6400                       		bcc.s	loc_72C96
0007DD78 D203                       		add.b	d3,d1
0007DD7A                            
0007DD7A                            loc_72C96:
0007DD7A 4EBA FA8A                  		jsr	sub_72722(pc)
0007DD7E 51CD FFF0                  		dbf	d5,loc_72C8C
0007DD82 103C 00B4                  		move.b	#$B4,d0
0007DD86 122D 000A                  		move.b	$A(a5),d1
0007DD8A 4EBA FA7A                  		jsr	sub_72722(pc)
0007DD8E                            
0007DD8E                            locret_72CAA:
0007DD8E 4E75                       		rts	
0007DD90                            ; End of function sub_72C4E
0007DD90                            
0007DD90                            ; ===========================================================================
0007DD90 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DD98                            
0007DD98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD98                            
0007DD98                            
0007DD98                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DD98 0815 0002                  		btst	#2,(a5)
0007DD9C 6600                       		bne.s	locret_72D16
0007DD9E 7000                       		moveq	#0,d0
0007DDA0 102D 000B                  		move.b	$B(a5),d0
0007DDA4 226E 0018                  		movea.l	$18(a6),a1
0007DDA8 4A2E 000E                  		tst.b	$E(a6)
0007DDAC 6700                       		beq.s	loc_72CD8
0007DDAE 226E 0020                  		movea.l	$20(a6),a1
0007DDB2 4A2E 000E                  		tst.b	$E(a6)
0007DDB6 6B00                       		bmi.s	loc_72CD8
0007DDB8 226E 0020                  		movea.l	$20(a6),a1
0007DDBC                            
0007DDBC                            loc_72CD8:
0007DDBC 5340                       		subq.w	#1,d0
0007DDBE 6B00                       		bmi.s	loc_72CE6
0007DDC0 323C 0019                  		move.w	#$19,d1
0007DDC4                            
0007DDC4                            loc_72CE0:
0007DDC4 D2C1                       		adda.w	d1,a1
0007DDC6 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DDCA                            
0007DDCA                            loc_72CE6:
0007DDCA D2FC 0015                  		adda.w	#$15,a1
0007DDCE 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DDD2 102D 001F                  		move.b	$1F(a5),d0
0007DDD6 0240 0007                  		andi.w	#7,d0
0007DDDA 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DDDE 162D 0009                  		move.b	9(a5),d3
0007DDE2 6B00                       		bmi.s	locret_72D16
0007DDE4 7A03                       		moveq	#3,d5
0007DDE6                            
0007DDE6                            loc_72D02:
0007DDE6 101A                       		move.b	(a2)+,d0
0007DDE8 1219                       		move.b	(a1)+,d1
0007DDEA E20C                       		lsr.b	#1,d4
0007DDEC 6400                       		bcc.s	loc_72D12
0007DDEE D203                       		add.b	d3,d1
0007DDF0 6500                       		bcs.s	loc_72D12
0007DDF2 4EBA FA12                  		jsr	sub_72722(pc)
0007DDF6                            
0007DDF6                            loc_72D12:
0007DDF6 51CD FFEE                  		dbf	d5,loc_72D02
0007DDFA                            
0007DDFA                            locret_72D16:
0007DDFA 4E75                       		rts	
0007DDFC                            ; End of function sub_72CB4
0007DDFC                            
0007DDFC                            ; ===========================================================================
0007DDFC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DE06 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DE10 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DE14                            ; ===========================================================================
0007DE14                            
0007DE14                            loc_72D30:				; XREF: loc_72A64
0007DE14 08D5 0003                  		bset	#3,(a5)
0007DE18 2B4C 0014                  		move.l	a4,$14(a5)
0007DE1C 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DE20 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DE24 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DE28 101C                       		move.b	(a4)+,d0
0007DE2A E208                       		lsr.b	#1,d0
0007DE2C 1B40 001B                  		move.b	d0,$1B(a5)
0007DE30 426D 001C                  		clr.w	$1C(a5)
0007DE34 4E75                       		rts	
0007DE36                            ; ===========================================================================
0007DE36                            
0007DE36                            loc_72D52:				; XREF: loc_72A64
0007DE36 08D5 0003                  		bset	#3,(a5)
0007DE3A 4E75                       		rts	
0007DE3C                            ; ===========================================================================
0007DE3C                            
0007DE3C                            loc_72D58:				; XREF: loc_72A64
0007DE3C 0895 0007                  		bclr	#7,(a5)
0007DE40 0895 0004                  		bclr	#4,(a5)
0007DE44 4A2D 0001                  		tst.b	1(a5)
0007DE48 6B00                       		bmi.s	loc_72D74
0007DE4A 4A2E 0008                  		tst.b	8(a6)
0007DE4E 6B00 0000                  		bmi.w	loc_72E02
0007DE52 4EBA F98E                  		jsr	sub_726FE(pc)
0007DE56 6000                       		bra.s	loc_72D78
0007DE58                            ; ===========================================================================
0007DE58                            
0007DE58                            loc_72D74:
0007DE58 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DE5C                            
0007DE5C                            loc_72D78:
0007DE5C 4A2E 000E                  		tst.b	$E(a6)
0007DE60 6A00 0000                  		bpl.w	loc_72E02
0007DE64 4216                       		clr.b	0(a6)
0007DE66 7000                       		moveq	#0,d0
0007DE68 102D 0001                  		move.b	1(a5),d0
0007DE6C 6B00                       		bmi.s	loc_72DCC
0007DE6E 41FA F546                  		lea	dword_722CC(pc),a0
0007DE72 264D                       		movea.l	a5,a3
0007DE74 0C00 0004                  		cmpi.b	#4,d0
0007DE78 6600                       		bne.s	loc_72DA8
0007DE7A 4A2E 0340                  		tst.b	$340(a6)
0007DE7E 6A00                       		bpl.s	loc_72DA8
0007DE80 4BEE 0340                  		lea	$340(a6),a5
0007DE84 226E 0020                  		movea.l	$20(a6),a1
0007DE88 6000                       		bra.s	loc_72DB8
0007DE8A                            ; ===========================================================================
0007DE8A                            
0007DE8A                            loc_72DA8:
0007DE8A 5500                       		subq.b	#2,d0
0007DE8C E508                       		lsl.b	#2,d0
0007DE8E 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DE92 4A15                       		tst.b	(a5)
0007DE94 6A00                       		bpl.s	loc_72DC8
0007DE96 226E 0018                  		movea.l	$18(a6),a1
0007DE9A                            
0007DE9A                            loc_72DB8:
0007DE9A 0895 0002                  		bclr	#2,(a5)
0007DE9E 08D5 0001                  		bset	#1,(a5)
0007DEA2 102D 000B                  		move.b	$B(a5),d0
0007DEA6 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DEAA                            
0007DEAA                            loc_72DC8:
0007DEAA 2A4B                       		movea.l	a3,a5
0007DEAC 6000                       		bra.s	loc_72E02
0007DEAE                            ; ===========================================================================
0007DEAE                            
0007DEAE                            loc_72DCC:
0007DEAE 41EE 0370                  		lea	$370(a6),a0
0007DEB2 4A10                       		tst.b	(a0)
0007DEB4 6A00                       		bpl.s	loc_72DE0
0007DEB6 0C00 00E0                  		cmpi.b	#$E0,d0
0007DEBA 6700                       		beq.s	loc_72DEA
0007DEBC 0C00 00C0                  		cmpi.b	#$C0,d0
0007DEC0 6700                       		beq.s	loc_72DEA
0007DEC2                            
0007DEC2                            loc_72DE0:
0007DEC2 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DEC6 E608                       		lsr.b	#3,d0
0007DEC8 2070 0000                  		movea.l	(a0,d0.w),a0
0007DECC                            
0007DECC                            loc_72DEA:
0007DECC 0890 0002                  		bclr	#2,(a0)
0007DED0 08D0 0001                  		bset	#1,(a0)
0007DED4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DEDA 6600                       		bne.s	loc_72E02
0007DEDC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DEE4                            
0007DEE4                            loc_72E02:
0007DEE4 504F                       		addq.w	#8,sp
0007DEE6 4E75                       		rts	
0007DEE8                            ; ===========================================================================
0007DEE8                            
0007DEE8                            loc_72E06:				; XREF: loc_72A64
0007DEE8 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DEEE 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DEF2 0815 0002                  		btst	#2,(a5)
0007DEF6 6600                       		bne.s	locret_72E1E
0007DEF8 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DF00                            
0007DF00                            locret_72E1E:
0007DF00 4E75                       		rts	
0007DF02                            ; ===========================================================================
0007DF02                            
0007DF02                            loc_72E20:				; XREF: loc_72A64
0007DF02 0895 0003                  		bclr	#3,(a5)
0007DF06 4E75                       		rts	
0007DF08                            ; ===========================================================================
0007DF08                            
0007DF08                            loc_72E26:				; XREF: loc_72A64
0007DF08 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DF0C 4E75                       		rts	
0007DF0E                            ; ===========================================================================
0007DF0E                            
0007DF0E                            loc_72E2C:				; XREF: loc_72A64
0007DF0E 101C                       		move.b	(a4)+,d0
0007DF10 E148                       		lsl.w	#8,d0
0007DF12 101C                       		move.b	(a4)+,d0
0007DF14 D8C0                       		adda.w	d0,a4
0007DF16 534C                       		subq.w	#1,a4
0007DF18 4E75                       		rts	
0007DF1A                            ; ===========================================================================
0007DF1A                            
0007DF1A                            loc_72E38:				; XREF: loc_72A64
0007DF1A 7000                       		moveq	#0,d0
0007DF1C 101C                       		move.b	(a4)+,d0
0007DF1E 121C                       		move.b	(a4)+,d1
0007DF20 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DF24 6600                       		bne.s	loc_72E48
0007DF26 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DF2A                            
0007DF2A                            loc_72E48:
0007DF2A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DF2E 66DE                       		bne.s	loc_72E2C
0007DF30 544C                       		addq.w	#2,a4
0007DF32 4E75                       		rts	
0007DF34                            ; ===========================================================================
0007DF34                            
0007DF34                            loc_72E52:				; XREF: loc_72A64
0007DF34 7000                       		moveq	#0,d0
0007DF36 102D 000D                  		move.b	$D(a5),d0
0007DF3A 5900                       		subq.b	#4,d0
0007DF3C 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DF40 1B40 000D                  		move.b	d0,$D(a5)
0007DF44 60C8                       		bra.s	loc_72E2C
0007DF46                            ; ===========================================================================
0007DF46                            
0007DF46                            loc_72E64:				; XREF: loc_72A64
0007DF46 103C 0088                  		move.b	#$88,d0
0007DF4A 123C 000F                  		move.b	#$F,d1
0007DF4E 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DF52 103C 008C                  		move.b	#$8C,d0
0007DF56 123C 000F                  		move.b	#$F,d1
0007DF5A 6000 F8B6                  		bra.w	sub_7272E
0007DF5E                            ; ===========================================================================
0007DF5E                            Kos_Z80:	incbin	sound\z80_1.bin
0007E00E 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007E010 21                         		dc.b $21
0007E011 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007E013                            		incbin	sound\z80_2.bin
0007F6BE                            		even
0007F6BE                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085EBE                            		even
00085EBE                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F75C                            		even
0008F75C                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0009337C 00                         		even
0009337C                            Music84:	include	sound\music84.asm ; Star Light Act 1
0009337C                            music84_Header:
0009337C =00000001                  smpsHeaderStartSong = 1
0009337C 0000                       	smpsHeaderVoice     music84_Voices
0009337E 0603                       	smpsHeaderChan      $06, $03
00093380 0205                       	smpsHeaderTempo     $02, $05
00093382                            
00093386 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0009338A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0009338E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00093392 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00093396 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0009339A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000933A0 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000933A6 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000933AC                            
000933AC                            ; FM1 Data
000933AC                            music84_FM1:
000933AC E0C0                       	smpsPan             panCenter, $00
000933B0 E107                       	smpsAlterNote       $07
000933B2 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000933B6 E106                       	smpsAlterNote       $06
000933B8 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000933BC E10B                       	smpsAlterNote       $0B
000933BE 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000933C4 E10C                       	smpsAlterNote       $0C
000933C6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000933C9 E10B                       	smpsAlterNote       $0B
000933CB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000933CE E109                       	smpsAlterNote       $09
000933D0 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000933D5 E108                       	smpsAlterNote       $08
000933D7 8001                       	dc.b	nRst, $01
000933D9 E10B                       	smpsAlterNote       $0B
000933DB 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000933E1 E107                       	smpsAlterNote       $07
000933E3 9B03                       	dc.b	nD2, $03
000933E5                            
000933E5                            music84_Jump04:
000933E5 E107                       	smpsAlterNote       $07
000933E7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000933EB E10B                       	smpsAlterNote       $0B
000933ED A202 8001                  	dc.b	nA2, $02, nRst, $01
000933F1 E107                       	smpsAlterNote       $07
000933F3 9B03                       	dc.b	nD2, $03
000933F5 E11A                       	smpsAlterNote       $1A
000933F7 A301                       	dc.b	nBb2, $01
000933F9 E1F2                       	smpsAlterNote       $F2
000933FB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000933FE E1FF                       	smpsAlterNote       $FF
00093400 E701                       	dc.b	smpsNoAttack, $01
00093402 E111                       	smpsAlterNote       $11
00093404 E701                       	dc.b	smpsNoAttack, $01
00093406 E106                       	smpsAlterNote       $06
00093408 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009340B E107                       	smpsAlterNote       $07
0009340D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093411 E108                       	smpsAlterNote       $08
00093413 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009341B E109                       	smpsAlterNote       $09
0009341D A003                       	dc.b	nG2, $03
0009341F E10C                       	smpsAlterNote       $0C
00093421 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093425 E1FD                       	smpsAlterNote       $FD
00093427 A401                       	dc.b	nB2, $01
00093429 E109                       	smpsAlterNote       $09
0009342B E701                       	dc.b	smpsNoAttack, $01
0009342D E106                       	smpsAlterNote       $06
0009342F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093432 E109                       	smpsAlterNote       $09
00093434 A007                       	dc.b	nG2, $07
00093436 E108                       	smpsAlterNote       $08
00093438 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009343C E107                       	smpsAlterNote       $07
0009343E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093444 E10B                       	smpsAlterNote       $0B
00093446 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009344A E107                       	smpsAlterNote       $07
0009344C 9B03                       	dc.b	nD2, $03
0009344E E11A                       	smpsAlterNote       $1A
00093450 A301                       	dc.b	nBb2, $01
00093452 E1F9                       	smpsAlterNote       $F9
00093454 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093457 E107                       	smpsAlterNote       $07
00093459 E701                       	dc.b	smpsNoAttack, $01
0009345B E111                       	smpsAlterNote       $11
0009345D E701                       	dc.b	smpsNoAttack, $01
0009345F E106                       	smpsAlterNote       $06
00093461 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093466 E107                       	smpsAlterNote       $07
00093468 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093470 E1EC                       	smpsAlterNote       $EC
00093472 A101                       	dc.b	nAb2, $01
00093474 E108                       	smpsAlterNote       $08
00093476 E701                       	dc.b	smpsNoAttack, $01
00093478 E116                       	smpsAlterNote       $16
0009347A E701                       	dc.b	smpsNoAttack, $01
0009347C E1F5                       	smpsAlterNote       $F5
0009347E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093481 E10B                       	smpsAlterNote       $0B
00093483 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093487 E107                       	smpsAlterNote       $07
00093489 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009348F E109                       	smpsAlterNote       $09
00093491 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093495 E10B                       	smpsAlterNote       $0B
00093497 9603                       	dc.b	nA1, $03
00093499 E107                       	smpsAlterNote       $07
0009349B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000934A1 E10B                       	smpsAlterNote       $0B
000934A3 A203 8001                  	dc.b	nA2, $03, nRst, $01
000934A7 E107                       	smpsAlterNote       $07
000934A9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000934AD E11A                       	smpsAlterNote       $1A
000934AF A301                       	dc.b	nBb2, $01
000934B1 E1F9                       	smpsAlterNote       $F9
000934B3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000934B6 E107                       	smpsAlterNote       $07
000934B8 E701                       	dc.b	smpsNoAttack, $01
000934BA E1FB                       	smpsAlterNote       $FB
000934BC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000934BF E106                       	smpsAlterNote       $06
000934C1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000934C5 E107                       	smpsAlterNote       $07
000934C7 9B03                       	dc.b	nD2, $03
000934C9 E108                       	smpsAlterNote       $08
000934CB 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000934D1 E109                       	smpsAlterNote       $09
000934D3 A002 8001                  	dc.b	nG2, $02, nRst, $01
000934D7 E10C                       	smpsAlterNote       $0C
000934D9 A303                       	dc.b	nBb2, $03
000934DB E1F0                       	smpsAlterNote       $F0
000934DD A401                       	dc.b	nB2, $01
000934DF E1FD                       	smpsAlterNote       $FD
000934E1 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000934E6 E106                       	smpsAlterNote       $06
000934E8 8001                       	dc.b	nRst, $01
000934EA E109                       	smpsAlterNote       $09
000934EC A006 8001                  	dc.b	nG2, $06, nRst, $01
000934F0 E108                       	smpsAlterNote       $08
000934F2 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000934F6 E107                       	smpsAlterNote       $07
000934F8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000934FE E10B                       	smpsAlterNote       $0B
00093500 A203                       	dc.b	nA2, $03
00093502 E107                       	smpsAlterNote       $07
00093504 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093508 E1F2                       	smpsAlterNote       $F2
0009350A A401                       	dc.b	nB2, $01
0009350C E1FF                       	smpsAlterNote       $FF
0009350E E701                       	dc.b	smpsNoAttack, $01
00093510 E107                       	smpsAlterNote       $07
00093512 E701                       	dc.b	smpsNoAttack, $01
00093514 E1FB                       	smpsAlterNote       $FB
00093516 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093519 E106                       	smpsAlterNote       $06
0009351B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009351F E107                       	smpsAlterNote       $07
00093521 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0009352B E117                       	smpsAlterNote       $17
0009352D A001                       	dc.b	nG2, $01
0009352F E1FA                       	smpsAlterNote       $FA
00093531 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093534 E108                       	smpsAlterNote       $08
00093536 E701                       	dc.b	smpsNoAttack, $01
00093538 E1E7                       	smpsAlterNote       $E7
0009353A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009353D E103                       	smpsAlterNote       $03
0009353F E701                       	dc.b	smpsNoAttack, $01
00093541 E10B                       	smpsAlterNote       $0B
00093543 E702                       	dc.b	smpsNoAttack, $02
00093545 E107                       	smpsAlterNote       $07
00093547 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0009354F E106                       	smpsAlterNote       $06
00093551 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00093557 E10C                       	smpsAlterNote       $0C
00093559 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0009355F E109                       	smpsAlterNote       $09
00093561 9E03                       	dc.b	nF2, $03
00093563 E10C                       	smpsAlterNote       $0C
00093565 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093569 E1EA                       	smpsAlterNote       $EA
0009356B A201                       	dc.b	nA2, $01
0009356D E106                       	smpsAlterNote       $06
0009356F E701                       	dc.b	smpsNoAttack, $01
00093571 E1E2                       	smpsAlterNote       $E2
00093573 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093576 E1F0                       	smpsAlterNote       $F0
00093578 E701                       	dc.b	smpsNoAttack, $01
0009357A E10C                       	smpsAlterNote       $0C
0009357C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093588 E116                       	smpsAlterNote       $16
0009358A 9C01                       	dc.b	nEb2, $01
0009358C E105                       	smpsAlterNote       $05
0009358E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093591 E1F1                       	smpsAlterNote       $F1
00093593 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093596 E1FF                       	smpsAlterNote       $FF
00093598 E701                       	dc.b	smpsNoAttack, $01
0009359A E109                       	smpsAlterNote       $09
0009359C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000935A0 E10C                       	smpsAlterNote       $0C
000935A2 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000935AE 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000935B4 E109                       	smpsAlterNote       $09
000935B6 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000935BA E10C                       	smpsAlterNote       $0C
000935BC 9703                       	dc.b	nBb1, $03
000935BE E11A                       	smpsAlterNote       $1A
000935C0 A101                       	dc.b	nAb2, $01
000935C2 E1FB                       	smpsAlterNote       $FB
000935C4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935C7 E10A                       	smpsAlterNote       $0A
000935C9 E701                       	dc.b	smpsNoAttack, $01
000935CB E1E8                       	smpsAlterNote       $E8
000935CD E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000935D0 E106                       	smpsAlterNote       $06
000935D2 E701                       	dc.b	smpsNoAttack, $01
000935D4 E10C                       	smpsAlterNote       $0C
000935D6 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000935E2 E1F9                       	smpsAlterNote       $F9
000935E4 9D01                       	dc.b	nE2, $01
000935E6 E108                       	smpsAlterNote       $08
000935E8 E701                       	dc.b	smpsNoAttack, $01
000935EA E1F6                       	smpsAlterNote       $F6
000935EC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000935EF E109                       	smpsAlterNote       $09
000935F1 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000935F5 E10C                       	smpsAlterNote       $0C
000935F7 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093603 E108                       	smpsAlterNote       $08
00093605 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0009360B E106                       	smpsAlterNote       $06
0009360D A403 8001                  	dc.b	nB2, $03, nRst, $01
00093611 E108                       	smpsAlterNote       $08
00093613 9D03                       	dc.b	nE2, $03
00093615 E1EB                       	smpsAlterNote       $EB
00093617 A801                       	dc.b	nEb3, $01
00093619 E109                       	smpsAlterNote       $09
0009361B E701                       	dc.b	smpsNoAttack, $01
0009361D E1FA                       	smpsAlterNote       $FA
0009361F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093622 E108                       	smpsAlterNote       $08
00093624 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093630 E1E9                       	smpsAlterNote       $E9
00093632 A301                       	dc.b	nBb2, $01
00093634 E107                       	smpsAlterNote       $07
00093636 E701                       	dc.b	smpsNoAttack, $01
00093638 E1F0                       	smpsAlterNote       $F0
0009363A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009363D E1F7                       	smpsAlterNote       $F7
0009363F E701                       	dc.b	smpsNoAttack, $01
00093641 E107                       	smpsAlterNote       $07
00093643 E701                       	dc.b	smpsNoAttack, $01
00093645 E106                       	smpsAlterNote       $06
00093647 E701                       	dc.b	smpsNoAttack, $01
00093649 E108                       	smpsAlterNote       $08
0009364B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093651 E106                       	smpsAlterNote       $06
00093653 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093657 E108                       	smpsAlterNote       $08
00093659 9D03                       	dc.b	nE2, $03
0009365B E10B                       	smpsAlterNote       $0B
0009365D 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00093665 E108                       	smpsAlterNote       $08
00093667 9D03                       	dc.b	nE2, $03
00093669 E10B                       	smpsAlterNote       $0B
0009366B 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009366F E113                       	smpsAlterNote       $13
00093671 A001                       	dc.b	nG2, $01
00093673 E118                       	smpsAlterNote       $18
00093675 E701                       	dc.b	smpsNoAttack, $01
00093677 E1E9                       	smpsAlterNote       $E9
00093679 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009367C E1F3                       	smpsAlterNote       $F3
0009367E E701                       	dc.b	smpsNoAttack, $01
00093680 E1FD                       	smpsAlterNote       $FD
00093682 E701                       	dc.b	smpsNoAttack, $01
00093684 E102                       	smpsAlterNote       $02
00093686 E701                       	dc.b	smpsNoAttack, $01
00093688 E107                       	smpsAlterNote       $07
0009368A 8001                       	dc.b	nRst, $01
0009368C E10B                       	smpsAlterNote       $0B
0009368E 9603                       	dc.b	nA1, $03
00093690 E10C                       	smpsAlterNote       $0C
00093692 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00093698 E10B                       	smpsAlterNote       $0B
0009369A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000936A6 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000936AC E107                       	smpsAlterNote       $07
000936AE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000936B4 E10B                       	smpsAlterNote       $0B
000936B6 A203                       	dc.b	nA2, $03
000936B8 E107                       	smpsAlterNote       $07
000936BA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000936BE E1F2                       	smpsAlterNote       $F2
000936C0 A401                       	dc.b	nB2, $01
000936C2 E1FF                       	smpsAlterNote       $FF
000936C4 E701                       	dc.b	smpsNoAttack, $01
000936C6 E107                       	smpsAlterNote       $07
000936C8 E701                       	dc.b	smpsNoAttack, $01
000936CA E1FB                       	smpsAlterNote       $FB
000936CC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936CF E106                       	smpsAlterNote       $06
000936D1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936D5 E107                       	smpsAlterNote       $07
000936D7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936DB E108                       	smpsAlterNote       $08
000936DD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000936E3 E109                       	smpsAlterNote       $09
000936E5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000936E9 E10C                       	smpsAlterNote       $0C
000936EB A302 8001                  	dc.b	nBb2, $02, nRst, $01
000936EF E1F0                       	smpsAlterNote       $F0
000936F1 A401                       	dc.b	nB2, $01
000936F3 E109                       	smpsAlterNote       $09
000936F5 E701                       	dc.b	smpsNoAttack, $01
000936F7 E106                       	smpsAlterNote       $06
000936F9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936FC E109                       	smpsAlterNote       $09
000936FE A007                       	dc.b	nG2, $07
00093700 E108                       	smpsAlterNote       $08
00093702 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093706 E107                       	smpsAlterNote       $07
00093708 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009370E E10B                       	smpsAlterNote       $0B
00093710 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093714 E107                       	smpsAlterNote       $07
00093716 9B03                       	dc.b	nD2, $03
00093718 E11A                       	smpsAlterNote       $1A
0009371A A301                       	dc.b	nBb2, $01
0009371C E1F2                       	smpsAlterNote       $F2
0009371E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093721 E1FF                       	smpsAlterNote       $FF
00093723 E701                       	dc.b	smpsNoAttack, $01
00093725 E111                       	smpsAlterNote       $11
00093727 E701                       	dc.b	smpsNoAttack, $01
00093729 E106                       	smpsAlterNote       $06
0009372B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009372E E107                       	smpsAlterNote       $07
00093730 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0009373C E117                       	smpsAlterNote       $17
0009373E A001                       	dc.b	nG2, $01
00093740 E1FA                       	smpsAlterNote       $FA
00093742 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093745 E116                       	smpsAlterNote       $16
00093747 E701                       	dc.b	smpsNoAttack, $01
00093749 E1F5                       	smpsAlterNote       $F5
0009374B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009374E E103                       	smpsAlterNote       $03
00093750 E701                       	dc.b	smpsNoAttack, $01
00093752 E10B                       	smpsAlterNote       $0B
00093754 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093758 E107                       	smpsAlterNote       $07
0009375A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093760 E109                       	smpsAlterNote       $09
00093762 9E03                       	dc.b	nF2, $03
00093764 E10B                       	smpsAlterNote       $0B
00093766 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009376A E107                       	smpsAlterNote       $07
0009376C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093772 E10B                       	smpsAlterNote       $0B
00093774 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093778 E107                       	smpsAlterNote       $07
0009377A 9B03                       	dc.b	nD2, $03
0009377C E11A                       	smpsAlterNote       $1A
0009377E A301                       	dc.b	nBb2, $01
00093780 E1F9                       	smpsAlterNote       $F9
00093782 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093785 E107                       	smpsAlterNote       $07
00093787 E701                       	dc.b	smpsNoAttack, $01
00093789 E111                       	smpsAlterNote       $11
0009378B E701                       	dc.b	smpsNoAttack, $01
0009378D E106                       	smpsAlterNote       $06
0009378F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093794 E107                       	smpsAlterNote       $07
00093796 9B03                       	dc.b	nD2, $03
00093798 E108                       	smpsAlterNote       $08
0009379A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000937A0 E109                       	smpsAlterNote       $09
000937A2 A003                       	dc.b	nG2, $03
000937A4 E10C                       	smpsAlterNote       $0C
000937A6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000937AA E1FD                       	smpsAlterNote       $FD
000937AC A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000937B1 E106                       	smpsAlterNote       $06
000937B3 8001                       	dc.b	nRst, $01
000937B5 E109                       	smpsAlterNote       $09
000937B7 A006 8001                  	dc.b	nG2, $06, nRst, $01
000937BB E108                       	smpsAlterNote       $08
000937BD 9C03                       	dc.b	nEb2, $03
000937BF E107                       	smpsAlterNote       $07
000937C1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000937C7 E10B                       	smpsAlterNote       $0B
000937C9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000937CD E107                       	smpsAlterNote       $07
000937CF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000937D3 E11A                       	smpsAlterNote       $1A
000937D5 A301                       	dc.b	nBb2, $01
000937D7 E1F9                       	smpsAlterNote       $F9
000937D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000937DC E107                       	smpsAlterNote       $07
000937DE E701                       	dc.b	smpsNoAttack, $01
000937E0 E1FB                       	smpsAlterNote       $FB
000937E2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937E5 E106                       	smpsAlterNote       $06
000937E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937EB E107                       	smpsAlterNote       $07
000937ED 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000937F5 E1EC                       	smpsAlterNote       $EC
000937F7 A101                       	dc.b	nAb2, $01
000937F9 E108                       	smpsAlterNote       $08
000937FB E701                       	dc.b	smpsNoAttack, $01
000937FD E1E7                       	smpsAlterNote       $E7
000937FF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093802 E1F5                       	smpsAlterNote       $F5
00093804 E701                       	dc.b	smpsNoAttack, $01
00093806 E10B                       	smpsAlterNote       $0B
00093808 E702                       	dc.b	smpsNoAttack, $02
0009380A E107                       	smpsAlterNote       $07
0009380C 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093812 E106                       	smpsAlterNote       $06
00093814 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0009381A E10C                       	smpsAlterNote       $0C
0009381C 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093824 E109                       	smpsAlterNote       $09
00093826 9E03                       	dc.b	nF2, $03
00093828 E10C                       	smpsAlterNote       $0C
0009382A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009382E E1EA                       	smpsAlterNote       $EA
00093830 A201                       	dc.b	nA2, $01
00093832 E106                       	smpsAlterNote       $06
00093834 E701                       	dc.b	smpsNoAttack, $01
00093836 E114                       	smpsAlterNote       $14
00093838 E701                       	dc.b	smpsNoAttack, $01
0009383A E1F0                       	smpsAlterNote       $F0
0009383C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009383F E10C                       	smpsAlterNote       $0C
00093841 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0009384D 9703                       	dc.b	nBb1, $03
0009384F E116                       	smpsAlterNote       $16
00093851 9C01                       	dc.b	nEb2, $01
00093853 E105                       	smpsAlterNote       $05
00093855 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093858 E113                       	smpsAlterNote       $13
0009385A E701                       	dc.b	smpsNoAttack, $01
0009385C E1FF                       	smpsAlterNote       $FF
0009385E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093861 E109                       	smpsAlterNote       $09
00093863 E703                       	dc.b	smpsNoAttack, $03
00093865 E10C                       	smpsAlterNote       $0C
00093867 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093873 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009387B E109                       	smpsAlterNote       $09
0009387D 9E03                       	dc.b	nF2, $03
0009387F E10C                       	smpsAlterNote       $0C
00093881 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093885 E1EC                       	smpsAlterNote       $EC
00093887 A201                       	dc.b	nA2, $01
00093889 E10A                       	smpsAlterNote       $0A
0009388B E701                       	dc.b	smpsNoAttack, $01
0009388D E1E8                       	smpsAlterNote       $E8
0009388F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093892 E1F7                       	smpsAlterNote       $F7
00093894 E701                       	dc.b	smpsNoAttack, $01
00093896 E10C                       	smpsAlterNote       $0C
00093898 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000938A4 E1EA                       	smpsAlterNote       $EA
000938A6 9D01                       	dc.b	nE2, $01
000938A8 E108                       	smpsAlterNote       $08
000938AA E701                       	dc.b	smpsNoAttack, $01
000938AC E1F6                       	smpsAlterNote       $F6
000938AE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000938B1 E105                       	smpsAlterNote       $05
000938B3 E701                       	dc.b	smpsNoAttack, $01
000938B5 E109                       	smpsAlterNote       $09
000938B7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938BB E10C                       	smpsAlterNote       $0C
000938BD 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000938C9 E108                       	smpsAlterNote       $08
000938CB 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000938D1 E106                       	smpsAlterNote       $06
000938D3 A403 8001                  	dc.b	nB2, $03, nRst, $01
000938D7 E108                       	smpsAlterNote       $08
000938D9 9D03                       	dc.b	nE2, $03
000938DB E1EB                       	smpsAlterNote       $EB
000938DD A801                       	dc.b	nEb3, $01
000938DF E109                       	smpsAlterNote       $09
000938E1 E701                       	dc.b	smpsNoAttack, $01
000938E3 E1EB                       	smpsAlterNote       $EB
000938E5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000938E8 E108                       	smpsAlterNote       $08
000938EA E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000938F6 E1E9                       	smpsAlterNote       $E9
000938F8 A301                       	dc.b	nBb2, $01
000938FA E1F8                       	smpsAlterNote       $F8
000938FC E701                       	dc.b	smpsNoAttack, $01
000938FE E116                       	smpsAlterNote       $16
00093900 E701                       	dc.b	smpsNoAttack, $01
00093902 E1F7                       	smpsAlterNote       $F7
00093904 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093907 E107                       	smpsAlterNote       $07
00093909 E701                       	dc.b	smpsNoAttack, $01
0009390B E1EE                       	smpsAlterNote       $EE
0009390D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093910 E106                       	smpsAlterNote       $06
00093912 8001                       	dc.b	nRst, $01
00093914 E108                       	smpsAlterNote       $08
00093916 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0009391C E106                       	smpsAlterNote       $06
0009391E A402 8001                  	dc.b	nB2, $02, nRst, $01
00093922 E108                       	smpsAlterNote       $08
00093924 9D03                       	dc.b	nE2, $03
00093926 E10B                       	smpsAlterNote       $0B
00093928 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0009392E E108                       	smpsAlterNote       $08
00093930 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00093934 E10B                       	smpsAlterNote       $0B
00093936 9603                       	dc.b	nA1, $03
00093938 E10E                       	smpsAlterNote       $0E
0009393A A001                       	dc.b	nG2, $01
0009393C E118                       	smpsAlterNote       $18
0009393E E701                       	dc.b	smpsNoAttack, $01
00093940 E1E9                       	smpsAlterNote       $E9
00093942 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093945 E1EE                       	smpsAlterNote       $EE
00093947 E701                       	dc.b	smpsNoAttack, $01
00093949 E1F8                       	smpsAlterNote       $F8
0009394B E701                       	dc.b	smpsNoAttack, $01
0009394D E102                       	smpsAlterNote       $02
0009394F E701                       	dc.b	smpsNoAttack, $01
00093951 E107                       	smpsAlterNote       $07
00093953 8001                       	dc.b	nRst, $01
00093955 E10B                       	smpsAlterNote       $0B
00093957 9603                       	dc.b	nA1, $03
00093959 E10C                       	smpsAlterNote       $0C
0009395B 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093961 E10B                       	smpsAlterNote       $0B
00093963 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009396F 8001 9603                  	dc.b	nRst, $01, nA1, $03
00093973 E10C                       	smpsAlterNote       $0C
00093975 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093981 8001                       	dc.b	nRst, $01
00093983 E10B                       	smpsAlterNote       $0B
00093985 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0009398D E107                       	smpsAlterNote       $07
0009398F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093993 E10B                       	smpsAlterNote       $0B
00093995 9603                       	dc.b	nA1, $03
00093997 E109                       	smpsAlterNote       $09
00093999 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009399D E108                       	smpsAlterNote       $08
0009399F 9D06                       	dc.b	nE2, $06
000939A1 E107                       	smpsAlterNote       $07
000939A3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939A7 E106                       	smpsAlterNote       $06
000939A9 9903                       	dc.b	nC2, $03
000939AB E10C                       	smpsAlterNote       $0C
000939AD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000939B1 E10B                       	smpsAlterNote       $0B
000939B3 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000939BF 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000939C9 E10C                       	smpsAlterNote       $0C
000939CB 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000939D7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000939E3 8001                       	dc.b	nRst, $01
000939E5 E10B                       	smpsAlterNote       $0B
000939E7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000939F3 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000939FF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093A0B 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093A15 E10C                       	smpsAlterNote       $0C
00093A17 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093A23 E10B                       	smpsAlterNote       $0B
00093A25 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093A2D E107                       	smpsAlterNote       $07
00093A2F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093A33 E10B                       	smpsAlterNote       $0B
00093A35 9603                       	dc.b	nA1, $03
00093A37 E109                       	smpsAlterNote       $09
00093A39 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093A3D E108                       	smpsAlterNote       $08
00093A3F 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093A43 E107                       	smpsAlterNote       $07
00093A45 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A49 E106                       	smpsAlterNote       $06
00093A4B 9903                       	dc.b	nC2, $03
00093A4D E10C                       	smpsAlterNote       $0C
00093A4F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093A53 E10B                       	smpsAlterNote       $0B
00093A55 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A61 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A6B E10C                       	smpsAlterNote       $0C
00093A6D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093A79 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093A85 8001                       	dc.b	nRst, $01
00093A87 E10B                       	smpsAlterNote       $0B
00093A89 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093A95 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A9F E10C                       	smpsAlterNote       $0C
00093AA1 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093AAD 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093AB9 E10B                       	smpsAlterNote       $0B
00093ABB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093AC7 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093AD1 E10C                       	smpsAlterNote       $0C
00093AD3 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093ADF 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093AEB E10B                       	smpsAlterNote       $0B
00093AED 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093AF9 8001                       	dc.b	nRst, $01
00093AFB E1EC                       	smpsAlterNote       $EC
00093AFD A101                       	dc.b	nAb2, $01
00093AFF E1FA                       	smpsAlterNote       $FA
00093B01 E701                       	dc.b	smpsNoAttack, $01
00093B03 E116                       	smpsAlterNote       $16
00093B05 E701                       	dc.b	smpsNoAttack, $01
00093B07 E1F5                       	smpsAlterNote       $F5
00093B09 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093B0C E10B                       	smpsAlterNote       $0B
00093B0E E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093B1A 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093B26 E107                       	smpsAlterNote       $07
00093B28 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B2E E10B                       	smpsAlterNote       $0B
00093B30 A203                       	dc.b	nA2, $03
00093B32 E107                       	smpsAlterNote       $07
00093B34 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B38 E1F3                       	smpsAlterNote       $F3
00093B3A A401                       	dc.b	nB2, $01
00093B3C E102                       	smpsAlterNote       $02
00093B3E E701                       	dc.b	smpsNoAttack, $01
00093B40 E109                       	smpsAlterNote       $09
00093B42 E701                       	dc.b	smpsNoAttack, $01
00093B44 E102                       	smpsAlterNote       $02
00093B46 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B49 E106                       	smpsAlterNote       $06
00093B4B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B4F E107                       	smpsAlterNote       $07
00093B51 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093B55 E108                       	smpsAlterNote       $08
00093B57 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093B5D E109                       	smpsAlterNote       $09
00093B5F A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B63 E1F2                       	smpsAlterNote       $F2
00093B65 A401                       	dc.b	nB2, $01
00093B67 E1FF                       	smpsAlterNote       $FF
00093B69 E701                       	dc.b	smpsNoAttack, $01
00093B6B E111                       	smpsAlterNote       $11
00093B6D E701                       	dc.b	smpsNoAttack, $01
00093B6F E1FB                       	smpsAlterNote       $FB
00093B71 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B74 E106                       	smpsAlterNote       $06
00093B76 E702                       	dc.b	smpsNoAttack, $02
00093B78 E109                       	smpsAlterNote       $09
00093B7A A007                       	dc.b	nG2, $07
00093B7C E108                       	smpsAlterNote       $08
00093B7E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093B82 E107                       	smpsAlterNote       $07
00093B84 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B8A E10B                       	smpsAlterNote       $0B
00093B8C A202 8001                  	dc.b	nA2, $02, nRst, $01
00093B90 E107                       	smpsAlterNote       $07
00093B92 9B03                       	dc.b	nD2, $03
00093B94 E11A                       	smpsAlterNote       $1A
00093B96 A301                       	dc.b	nBb2, $01
00093B98 E1F2                       	smpsAlterNote       $F2
00093B9A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B9D E1FF                       	smpsAlterNote       $FF
00093B9F E701                       	dc.b	smpsNoAttack, $01
00093BA1 E111                       	smpsAlterNote       $11
00093BA3 E701                       	dc.b	smpsNoAttack, $01
00093BA5 E106                       	smpsAlterNote       $06
00093BA7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093BAA E107                       	smpsAlterNote       $07
00093BAC 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093BB8 E117                       	smpsAlterNote       $17
00093BBA A001                       	dc.b	nG2, $01
00093BBC E1FA                       	smpsAlterNote       $FA
00093BBE E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093BC1 E116                       	smpsAlterNote       $16
00093BC3 E701                       	dc.b	smpsNoAttack, $01
00093BC5 E1F5                       	smpsAlterNote       $F5
00093BC7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093BCA E103                       	smpsAlterNote       $03
00093BCC E701                       	dc.b	smpsNoAttack, $01
00093BCE E10B                       	smpsAlterNote       $0B
00093BD0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093BD4 E107                       	smpsAlterNote       $07
00093BD6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093BDC E109                       	smpsAlterNote       $09
00093BDE 9E03                       	dc.b	nF2, $03
00093BE0 E10B                       	smpsAlterNote       $0B
00093BE2 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093BE6 E107                       	smpsAlterNote       $07
00093BE8 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093BEE E10B                       	smpsAlterNote       $0B
00093BF0 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093BF4 E107                       	smpsAlterNote       $07
00093BF6 9B03                       	dc.b	nD2, $03
00093BF8 E11A                       	smpsAlterNote       $1A
00093BFA A301                       	dc.b	nBb2, $01
00093BFC E1F9                       	smpsAlterNote       $F9
00093BFE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093C01 E1FF                       	smpsAlterNote       $FF
00093C03 E701                       	dc.b	smpsNoAttack, $01
00093C05 E111                       	smpsAlterNote       $11
00093C07 E701                       	dc.b	smpsNoAttack, $01
00093C09 E106                       	smpsAlterNote       $06
00093C0B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093C0E E107                       	smpsAlterNote       $07
00093C10 9B03                       	dc.b	nD2, $03
00093C12 E108                       	smpsAlterNote       $08
00093C14 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093C1A E109                       	smpsAlterNote       $09
00093C1C A003                       	dc.b	nG2, $03
00093C1E E1F0                       	smpsAlterNote       $F0
00093C20 A501                       	dc.b	nC3, $01
00093C22 E106                       	smpsAlterNote       $06
00093C24 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093C28 E109                       	smpsAlterNote       $09
00093C2A A006 8001                  	dc.b	nG2, $06, nRst, $01
00093C2E E108                       	smpsAlterNote       $08
00093C30 9C03                       	dc.b	nEb2, $03
00093C32 E107                       	smpsAlterNote       $07
00093C34 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093C3A E10B                       	smpsAlterNote       $0B
00093C3C A203 8001                  	dc.b	nA2, $03, nRst, $01
00093C40 E107                       	smpsAlterNote       $07
00093C42 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C46 E11A                       	smpsAlterNote       $1A
00093C48 A301                       	dc.b	nBb2, $01
00093C4A E1F9                       	smpsAlterNote       $F9
00093C4C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093C4F E107                       	smpsAlterNote       $07
00093C51 E701                       	dc.b	smpsNoAttack, $01
00093C53 E1FB                       	smpsAlterNote       $FB
00093C55 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C58 E106                       	smpsAlterNote       $06
00093C5A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C5E E107                       	smpsAlterNote       $07
00093C60 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093C68 E1EC                       	smpsAlterNote       $EC
00093C6A A101                       	dc.b	nAb2, $01
00093C6C E108                       	smpsAlterNote       $08
00093C6E E701                       	dc.b	smpsNoAttack, $01
00093C70 E1E7                       	smpsAlterNote       $E7
00093C72 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093C75 E1F5                       	smpsAlterNote       $F5
00093C77 E701                       	dc.b	smpsNoAttack, $01
00093C79 E10B                       	smpsAlterNote       $0B
00093C7B E702                       	dc.b	smpsNoAttack, $02
00093C7D E107                       	smpsAlterNote       $07
00093C7F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093C85 E106                       	smpsAlterNote       $06
00093C87 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093C8D E10C                       	smpsAlterNote       $0C
00093C8F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093C97 E109                       	smpsAlterNote       $09
00093C99 9E03                       	dc.b	nF2, $03
00093C9B E10C                       	smpsAlterNote       $0C
00093C9D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093CA1 E1EA                       	smpsAlterNote       $EA
00093CA3 A201                       	dc.b	nA2, $01
00093CA5 E106                       	smpsAlterNote       $06
00093CA7 E701                       	dc.b	smpsNoAttack, $01
00093CA9 E114                       	smpsAlterNote       $14
00093CAB E701                       	dc.b	smpsNoAttack, $01
00093CAD E1F0                       	smpsAlterNote       $F0
00093CAF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093CB2 E10C                       	smpsAlterNote       $0C
00093CB4 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093CC0 9703                       	dc.b	nBb1, $03
00093CC2 E116                       	smpsAlterNote       $16
00093CC4 9C01                       	dc.b	nEb2, $01
00093CC6 E105                       	smpsAlterNote       $05
00093CC8 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093CCB E113                       	smpsAlterNote       $13
00093CCD E701                       	dc.b	smpsNoAttack, $01
00093CCF E1FF                       	smpsAlterNote       $FF
00093CD1 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093CD4 E109                       	smpsAlterNote       $09
00093CD6 E703                       	dc.b	smpsNoAttack, $03
00093CD8 E10C                       	smpsAlterNote       $0C
00093CDA 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093CE6 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093CEE E109                       	smpsAlterNote       $09
00093CF0 9E03                       	dc.b	nF2, $03
00093CF2 E10C                       	smpsAlterNote       $0C
00093CF4 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093CF8 E1EA                       	smpsAlterNote       $EA
00093CFA A201                       	dc.b	nA2, $01
00093CFC E106                       	smpsAlterNote       $06
00093CFE E701                       	dc.b	smpsNoAttack, $01
00093D00 E1E2                       	smpsAlterNote       $E2
00093D02 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093D05 E1F0                       	smpsAlterNote       $F0
00093D07 E701                       	dc.b	smpsNoAttack, $01
00093D09 E10C                       	smpsAlterNote       $0C
00093D0B E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093D17 E116                       	smpsAlterNote       $16
00093D19 9C01                       	dc.b	nEb2, $01
00093D1B E105                       	smpsAlterNote       $05
00093D1D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093D20 E1F1                       	smpsAlterNote       $F1
00093D22 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093D25 E1FF                       	smpsAlterNote       $FF
00093D27 E701                       	dc.b	smpsNoAttack, $01
00093D29 E109                       	smpsAlterNote       $09
00093D2B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093D2F E10C                       	smpsAlterNote       $0C
00093D31 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093D3D E106                       	smpsAlterNote       $06
00093D3F 9903                       	dc.b	nC2, $03
00093D41 E107                       	smpsAlterNote       $07
00093D43 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D47 E109                       	smpsAlterNote       $09
00093D49 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093D4F E107                       	smpsAlterNote       $07
00093D51 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D55 E108                       	smpsAlterNote       $08
00093D57 9D03                       	dc.b	nE2, $03
00093D59 E10B                       	smpsAlterNote       $0B
00093D5B 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093D61 E109                       	smpsAlterNote       $09
00093D63 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093D69 E10C                       	smpsAlterNote       $0C
00093D6B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093D71 E106                       	smpsAlterNote       $06
00093D73 9903                       	dc.b	nC2, $03
00093D75 E11A                       	smpsAlterNote       $1A
00093D77 A301                       	dc.b	nBb2, $01
00093D79 E1F9                       	smpsAlterNote       $F9
00093D7B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D7E E1FF                       	smpsAlterNote       $FF
00093D80 E701                       	dc.b	smpsNoAttack, $01
00093D82 E111                       	smpsAlterNote       $11
00093D84 E701                       	dc.b	smpsNoAttack, $01
00093D86 E106                       	smpsAlterNote       $06
00093D88 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093D8F E109                       	smpsAlterNote       $09
00093D91 A003                       	dc.b	nG2, $03
00093D93 E106                       	smpsAlterNote       $06
00093D95 9907                       	dc.b	nC2, $07
00093D97 E107                       	smpsAlterNote       $07
00093D99 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093DA1 E10B                       	smpsAlterNote       $0B
00093DA3 A203                       	dc.b	nA2, $03
00093DA5 E107                       	smpsAlterNote       $07
00093DA7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093DAB E1F2                       	smpsAlterNote       $F2
00093DAD A401                       	dc.b	nB2, $01
00093DAF E1F9                       	smpsAlterNote       $F9
00093DB1 E701                       	dc.b	smpsNoAttack, $01
00093DB3 E107                       	smpsAlterNote       $07
00093DB5 E701                       	dc.b	smpsNoAttack, $01
00093DB7 E1FB                       	smpsAlterNote       $FB
00093DB9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093DBC E106                       	smpsAlterNote       $06
00093DBE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093DC2 E107                       	smpsAlterNote       $07
00093DC4 9B03                       	dc.b	nD2, $03
00093DC6 E108                       	smpsAlterNote       $08
00093DC8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093DCE E109                       	smpsAlterNote       $09
00093DD0 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093DD4 E1F2                       	smpsAlterNote       $F2
00093DD6 A401                       	dc.b	nB2, $01
00093DD8 E1F9                       	smpsAlterNote       $F9
00093DDA E701                       	dc.b	smpsNoAttack, $01
00093DDC E107                       	smpsAlterNote       $07
00093DDE E701                       	dc.b	smpsNoAttack, $01
00093DE0 E1FB                       	smpsAlterNote       $FB
00093DE2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093DE5 E106                       	smpsAlterNote       $06
00093DE7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093DEB E108                       	smpsAlterNote       $08
00093DED 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093DF1 E10C                       	smpsAlterNote       $0C
00093DF3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093DF7 E107                       	smpsAlterNote       $07
00093DF9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093DFF E10B                       	smpsAlterNote       $0B
00093E01 A203                       	dc.b	nA2, $03
00093E03 E107                       	smpsAlterNote       $07
00093E05 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E09 E1F2                       	smpsAlterNote       $F2
00093E0B A401                       	dc.b	nB2, $01
00093E0D E1FF                       	smpsAlterNote       $FF
00093E0F E701                       	dc.b	smpsNoAttack, $01
00093E11 E107                       	smpsAlterNote       $07
00093E13 E701                       	dc.b	smpsNoAttack, $01
00093E15 E1FB                       	smpsAlterNote       $FB
00093E17 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E1A E106                       	smpsAlterNote       $06
00093E1C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093E20 E107                       	smpsAlterNote       $07
00093E22 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093E26 E108                       	smpsAlterNote       $08
00093E28 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093E2E E109                       	smpsAlterNote       $09
00093E30 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093E34 E1F2                       	smpsAlterNote       $F2
00093E36 A401                       	dc.b	nB2, $01
00093E38 E1FF                       	smpsAlterNote       $FF
00093E3A E701                       	dc.b	smpsNoAttack, $01
00093E3C E111                       	smpsAlterNote       $11
00093E3E E701                       	dc.b	smpsNoAttack, $01
00093E40 E1FB                       	smpsAlterNote       $FB
00093E42 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E45 E106                       	smpsAlterNote       $06
00093E47 E702                       	dc.b	smpsNoAttack, $02
00093E49 E108                       	smpsAlterNote       $08
00093E4B 9C07                       	dc.b	nEb2, $07
00093E4D E10C                       	smpsAlterNote       $0C
00093E4F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093E53 E107                       	smpsAlterNote       $07
00093E55 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093E5B E10B                       	smpsAlterNote       $0B
00093E5D A202 8001                  	dc.b	nA2, $02, nRst, $01
00093E61 E107                       	smpsAlterNote       $07
00093E63 9B03                       	dc.b	nD2, $03
00093E65 E11A                       	smpsAlterNote       $1A
00093E67 A301                       	dc.b	nBb2, $01
00093E69 E1F2                       	smpsAlterNote       $F2
00093E6B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E6E E1FF                       	smpsAlterNote       $FF
00093E70 E701                       	dc.b	smpsNoAttack, $01
00093E72 E111                       	smpsAlterNote       $11
00093E74 E701                       	dc.b	smpsNoAttack, $01
00093E76 E106                       	smpsAlterNote       $06
00093E78 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093E7B E107                       	smpsAlterNote       $07
00093E7D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E81 E108                       	smpsAlterNote       $08
00093E83 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093E8B E109                       	smpsAlterNote       $09
00093E8D A003                       	dc.b	nG2, $03
00093E8F E11A                       	smpsAlterNote       $1A
00093E91 A301                       	dc.b	nBb2, $01
00093E93 E1F2                       	smpsAlterNote       $F2
00093E95 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E98 E1FF                       	smpsAlterNote       $FF
00093E9A E701                       	dc.b	smpsNoAttack, $01
00093E9C E111                       	smpsAlterNote       $11
00093E9E E701                       	dc.b	smpsNoAttack, $01
00093EA0 E106                       	smpsAlterNote       $06
00093EA2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093EA5 E108                       	smpsAlterNote       $08
00093EA7 9C07                       	dc.b	nEb2, $07
00093EA9 E10C                       	smpsAlterNote       $0C
00093EAB A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093EAF E107                       	smpsAlterNote       $07
00093EB1 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093EBD 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093EC7 E108                       	smpsAlterNote       $08
00093EC9 9C06                       	dc.b	nEb2, $06
00093ECB E10C                       	smpsAlterNote       $0C
00093ECD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093ED1 E108                       	smpsAlterNote       $08
00093ED3 9C03                       	dc.b	nEb2, $03
00093ED5 E109                       	smpsAlterNote       $09
00093ED7 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093EDB E10C                       	smpsAlterNote       $0C
00093EDD A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093EE5 E107                       	smpsAlterNote       $07
00093EE7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093EEB F6F4 F8                    	smpsJump            music84_Jump04
00093EEE                            
00093EEE                            ; FM2 Data
00093EEE                            music84_FM2:
00093EEE E0C0                       	smpsPan             panCenter, $00
00093EF2 E10B                       	smpsAlterNote       $0B
00093EF4 C603 8007                  	dc.b	nA5, $03, nRst, $07
00093EF8 E109                       	smpsAlterNote       $09
00093EFA C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093EFE E108                       	smpsAlterNote       $08
00093F00 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093F06 E080                       	smpsPan             panLeft, $00
00093F08 E10C                       	smpsAlterNote       $0C
00093F0A E6F9                       	smpsAlterVol        $F9
00093F0C C703                       	dc.b	nBb5, $03
00093F0E E10B                       	smpsAlterNote       $0B
00093F10 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093F14 E109                       	smpsAlterNote       $09
00093F16 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093F1C E108                       	smpsAlterNote       $08
00093F1E C103 8001                  	dc.b	nE5, $03, nRst, $01
00093F22 E106                       	smpsAlterNote       $06
00093F24 BD03                       	dc.b	nC5, $03
00093F26 E10B                       	smpsAlterNote       $0B
00093F28 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093F2E E0C0                       	smpsPan             panCenter, $00
00093F30 E107                       	smpsAlterNote       $07
00093F32 E606                       	smpsAlterVol        $06
00093F34 BF03                       	dc.b	nD5, $03
00093F36                            
00093F36                            music84_Jump03:
00093F36 E108                       	smpsAlterNote       $08
00093F38 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093F3C E109                       	smpsAlterNote       $09
00093F3E C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093F44 E10B                       	smpsAlterNote       $0B
00093F46 C607                       	dc.b	nA5, $07
00093F48 E107                       	smpsAlterNote       $07
00093F4A BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093F4E E106                       	smpsAlterNote       $06
00093F50 C90D                       	dc.b	nC6, $0D
00093F52 E100                       	smpsAlterNote       $00
00093F54 E701                       	dc.b	smpsNoAttack, $01
00093F56 E1FF                       	smpsAlterNote       $FF
00093F58 E701                       	dc.b	smpsNoAttack, $01
00093F5A E103                       	smpsAlterNote       $03
00093F5C E701                       	dc.b	smpsNoAttack, $01
00093F5E E109                       	smpsAlterNote       $09
00093F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F64 E106                       	smpsAlterNote       $06
00093F66 E701                       	dc.b	smpsNoAttack, $01
00093F68 E100                       	smpsAlterNote       $00
00093F6A E701                       	dc.b	smpsNoAttack, $01
00093F6C E10C                       	smpsAlterNote       $0C
00093F6E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093F72 E10B                       	smpsAlterNote       $0B
00093F74 C603                       	dc.b	nA5, $03
00093F76 E109                       	smpsAlterNote       $09
00093F78 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093F7C E10B                       	smpsAlterNote       $0B
00093F7E C60D                       	dc.b	nA5, $0D
00093F80 E105                       	smpsAlterNote       $05
00093F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F86 E10B                       	smpsAlterNote       $0B
00093F88 E701                       	dc.b	smpsNoAttack, $01
00093F8A E10E                       	smpsAlterNote       $0E
00093F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F90 E108                       	smpsAlterNote       $08
00093F92 E701                       	dc.b	smpsNoAttack, $01
00093F94 E104                       	smpsAlterNote       $04
00093F96 E701                       	dc.b	smpsNoAttack, $01
00093F98 E105                       	smpsAlterNote       $05
00093F9A E701                       	dc.b	smpsNoAttack, $01
00093F9C E10B                       	smpsAlterNote       $0B
00093F9E E701                       	dc.b	smpsNoAttack, $01
00093FA0 E10F                       	smpsAlterNote       $0F
00093FA2 E701                       	dc.b	smpsNoAttack, $01
00093FA4 E10B                       	smpsAlterNote       $0B
00093FA6 E701                       	dc.b	smpsNoAttack, $01
00093FA8 E108                       	smpsAlterNote       $08
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E104                       	smpsAlterNote       $04
00093FAE E701                       	dc.b	smpsNoAttack, $01
00093FB0 E108                       	smpsAlterNote       $08
00093FB2 E701                       	dc.b	smpsNoAttack, $01
00093FB4 E10E                       	smpsAlterNote       $0E
00093FB6 E701                       	dc.b	smpsNoAttack, $01
00093FB8 E10F                       	smpsAlterNote       $0F
00093FBA E701                       	dc.b	smpsNoAttack, $01
00093FBC E10B                       	smpsAlterNote       $0B
00093FBE E701                       	dc.b	smpsNoAttack, $01
00093FC0 E105                       	smpsAlterNote       $05
00093FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FC6 E108                       	smpsAlterNote       $08
00093FC8 E701                       	dc.b	smpsNoAttack, $01
00093FCA E10E                       	smpsAlterNote       $0E
00093FCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FD0 E108                       	smpsAlterNote       $08
00093FD2 E701                       	dc.b	smpsNoAttack, $01
00093FD4 E105                       	smpsAlterNote       $05
00093FD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FDA E10B                       	smpsAlterNote       $0B
00093FDC E701                       	dc.b	smpsNoAttack, $01
00093FDE E10F                       	smpsAlterNote       $0F
00093FE0 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093FE4 E107                       	smpsAlterNote       $07
00093FE6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093FEA E108                       	smpsAlterNote       $08
00093FEC C103                       	dc.b	nE5, $03
00093FEE E109                       	smpsAlterNote       $09
00093FF0 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093FF8 E10B                       	smpsAlterNote       $0B
00093FFA C606 8001                  	dc.b	nA5, $06, nRst, $01
00093FFE E107                       	smpsAlterNote       $07
00094000 BF03                       	dc.b	nD5, $03
00094002 E106                       	smpsAlterNote       $06
00094004 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00094008 E107                       	smpsAlterNote       $07
0009400A CB03                       	dc.b	nD6, $03
0009400C E10C                       	smpsAlterNote       $0C
0009400E C704 8001                  	dc.b	nBb5, $04, nRst, $01
00094012 E10B                       	smpsAlterNote       $0B
00094014 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094018 E109                       	smpsAlterNote       $09
0009401A C404                       	dc.b	nG5, $04
0009401C E10B                       	smpsAlterNote       $0B
0009401E C60D                       	dc.b	nA5, $0D
00094020 E108                       	smpsAlterNote       $08
00094022 E701                       	dc.b	smpsNoAttack, $01
00094024 E104                       	smpsAlterNote       $04
00094026 E701                       	dc.b	smpsNoAttack, $01
00094028 E108                       	smpsAlterNote       $08
0009402A E701                       	dc.b	smpsNoAttack, $01
0009402C E10B                       	smpsAlterNote       $0B
0009402E E701                       	dc.b	smpsNoAttack, $01
00094030 E10F                       	smpsAlterNote       $0F
00094032 E701                       	dc.b	smpsNoAttack, $01
00094034 E10B                       	smpsAlterNote       $0B
00094036 E701                       	dc.b	smpsNoAttack, $01
00094038 E105                       	smpsAlterNote       $05
0009403A E701                       	dc.b	smpsNoAttack, $01
0009403C E104                       	smpsAlterNote       $04
0009403E E701                       	dc.b	smpsNoAttack, $01
00094040 E108                       	smpsAlterNote       $08
00094042 E701                       	dc.b	smpsNoAttack, $01
00094044 E10E                       	smpsAlterNote       $0E
00094046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009404A E10B                       	smpsAlterNote       $0B
0009404C E701                       	dc.b	smpsNoAttack, $01
0009404E E105                       	smpsAlterNote       $05
00094050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094054 E10B                       	smpsAlterNote       $0B
00094056 E701                       	dc.b	smpsNoAttack, $01
00094058 E10E                       	smpsAlterNote       $0E
0009405A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009405E E108                       	smpsAlterNote       $08
00094060 E701                       	dc.b	smpsNoAttack, $01
00094062 E104                       	smpsAlterNote       $04
00094064 E701                       	dc.b	smpsNoAttack, $01
00094066 E105                       	smpsAlterNote       $05
00094068 E701                       	dc.b	smpsNoAttack, $01
0009406A E10B                       	smpsAlterNote       $0B
0009406C E701                       	dc.b	smpsNoAttack, $01
0009406E E10F                       	smpsAlterNote       $0F
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E10B                       	smpsAlterNote       $0B
00094074 E701                       	dc.b	smpsNoAttack, $01
00094076 E108                       	smpsAlterNote       $08
00094078 E701                       	dc.b	smpsNoAttack, $01
0009407A E105                       	smpsAlterNote       $05
0009407C 8001                       	dc.b	nRst, $01
0009407E E109                       	smpsAlterNote       $09
00094080 C401                       	dc.b	nG5, $01
00094082 E10B                       	smpsAlterNote       $0B
00094084 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0009408D E109                       	smpsAlterNote       $09
0009408F C404 8001                  	dc.b	nG5, $04, nRst, $01
00094093 E10B                       	smpsAlterNote       $0B
00094095 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094099 E107                       	smpsAlterNote       $07
0009409B BF0D                       	dc.b	nD5, $0D
0009409D E101                       	smpsAlterNote       $01
0009409F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940A3 E104                       	smpsAlterNote       $04
000940A5 E701                       	dc.b	smpsNoAttack, $01
000940A7 E10A                       	smpsAlterNote       $0A
000940A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940AD E104                       	smpsAlterNote       $04
000940AF E701                       	dc.b	smpsNoAttack, $01
000940B1 E101                       	smpsAlterNote       $01
000940B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940B7 E107                       	smpsAlterNote       $07
000940B9 E701                       	dc.b	smpsNoAttack, $01
000940BB E10B                       	smpsAlterNote       $0B
000940BD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000940C1 E108                       	smpsAlterNote       $08
000940C3 C101                       	dc.b	nE5, $01
000940C5 E109                       	smpsAlterNote       $09
000940C7 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000940CC E10B                       	smpsAlterNote       $0B
000940CE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000940D6 E108                       	smpsAlterNote       $08
000940D8 CD06                       	dc.b	nE6, $06
000940DA E109                       	smpsAlterNote       $09
000940DC CE07                       	dc.b	nF6, $07
000940DE E108                       	smpsAlterNote       $08
000940E0 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000940E4 E106                       	smpsAlterNote       $06
000940E6 C903                       	dc.b	nC6, $03
000940E8 E109                       	smpsAlterNote       $09
000940EA C403 8001                  	dc.b	nG5, $03, nRst, $01
000940EE E10C                       	smpsAlterNote       $0C
000940F0 C70D                       	dc.b	nBb5, $0D
000940F2 E106                       	smpsAlterNote       $06
000940F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940F8 E109                       	smpsAlterNote       $09
000940FA E701                       	dc.b	smpsNoAttack, $01
000940FC E10F                       	smpsAlterNote       $0F
000940FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094102 E109                       	smpsAlterNote       $09
00094104 E701                       	dc.b	smpsNoAttack, $01
00094106 E106                       	smpsAlterNote       $06
00094108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009410C E10C                       	smpsAlterNote       $0C
0009410E E701                       	dc.b	smpsNoAttack, $01
00094110 E110                       	smpsAlterNote       $10
00094112 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094116 E10B                       	smpsAlterNote       $0B
00094118 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0009411C E105                       	smpsAlterNote       $05
0009411E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094122 E10B                       	smpsAlterNote       $0B
00094124 E701                       	dc.b	smpsNoAttack, $01
00094126 E10E                       	smpsAlterNote       $0E
00094128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009412C E108                       	smpsAlterNote       $08
0009412E E701                       	dc.b	smpsNoAttack, $01
00094130 E104                       	smpsAlterNote       $04
00094132 E701                       	dc.b	smpsNoAttack, $01
00094134 E105                       	smpsAlterNote       $05
00094136 E701                       	dc.b	smpsNoAttack, $01
00094138 E10B                       	smpsAlterNote       $0B
0009413A E701                       	dc.b	smpsNoAttack, $01
0009413C E10F                       	smpsAlterNote       $0F
0009413E E701                       	dc.b	smpsNoAttack, $01
00094140 E10B                       	smpsAlterNote       $0B
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E108                       	smpsAlterNote       $08
00094146 E701                       	dc.b	smpsNoAttack, $01
00094148 E104                       	smpsAlterNote       $04
0009414A E701                       	dc.b	smpsNoAttack, $01
0009414C E108                       	smpsAlterNote       $08
0009414E E701                       	dc.b	smpsNoAttack, $01
00094150 E10E                       	smpsAlterNote       $0E
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E10F                       	smpsAlterNote       $0F
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E10B                       	smpsAlterNote       $0B
0009415A E701                       	dc.b	smpsNoAttack, $01
0009415C E105                       	smpsAlterNote       $05
0009415E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094162 E108                       	smpsAlterNote       $08
00094164 E701                       	dc.b	smpsNoAttack, $01
00094166 E10E                       	smpsAlterNote       $0E
00094168 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009416C E108                       	smpsAlterNote       $08
0009416E E701                       	dc.b	smpsNoAttack, $01
00094170 E105                       	smpsAlterNote       $05
00094172 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094176 E10B                       	smpsAlterNote       $0B
00094178 E701                       	dc.b	smpsNoAttack, $01
0009417A E10F                       	smpsAlterNote       $0F
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E10E                       	smpsAlterNote       $0E
00094180 E701                       	dc.b	smpsNoAttack, $01
00094182 E108                       	smpsAlterNote       $08
00094184 E701                       	dc.b	smpsNoAttack, $01
00094186 E104                       	smpsAlterNote       $04
00094188 E701                       	dc.b	smpsNoAttack, $01
0009418A E108                       	smpsAlterNote       $08
0009418C E701                       	dc.b	smpsNoAttack, $01
0009418E E10E                       	smpsAlterNote       $0E
00094190 E701                       	dc.b	smpsNoAttack, $01
00094192 E10F                       	smpsAlterNote       $0F
00094194 E701                       	dc.b	smpsNoAttack, $01
00094196 E10B                       	smpsAlterNote       $0B
00094198 E701                       	dc.b	smpsNoAttack, $01
0009419A E105                       	smpsAlterNote       $05
0009419C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941A0 E108                       	smpsAlterNote       $08
000941A2 E701                       	dc.b	smpsNoAttack, $01
000941A4 E10E                       	smpsAlterNote       $0E
000941A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941AA E108                       	smpsAlterNote       $08
000941AC E701                       	dc.b	smpsNoAttack, $01
000941AE E105                       	smpsAlterNote       $05
000941B0 E701                       	dc.b	smpsNoAttack, $01
000941B2 E10B                       	smpsAlterNote       $0B
000941B4 C60D                       	dc.b	nA5, $0D
000941B6 E108                       	smpsAlterNote       $08
000941B8 E701                       	dc.b	smpsNoAttack, $01
000941BA E104                       	smpsAlterNote       $04
000941BC E701                       	dc.b	smpsNoAttack, $01
000941BE E105                       	smpsAlterNote       $05
000941C0 E701                       	dc.b	smpsNoAttack, $01
000941C2 E10B                       	smpsAlterNote       $0B
000941C4 E701                       	dc.b	smpsNoAttack, $01
000941C6 E10F                       	smpsAlterNote       $0F
000941C8 E701                       	dc.b	smpsNoAttack, $01
000941CA E10B                       	smpsAlterNote       $0B
000941CC E701                       	dc.b	smpsNoAttack, $01
000941CE E108                       	smpsAlterNote       $08
000941D0 E701                       	dc.b	smpsNoAttack, $01
000941D2 E104                       	smpsAlterNote       $04
000941D4 E701                       	dc.b	smpsNoAttack, $01
000941D6 E108                       	smpsAlterNote       $08
000941D8 E701                       	dc.b	smpsNoAttack, $01
000941DA E10E                       	smpsAlterNote       $0E
000941DC E701                       	dc.b	smpsNoAttack, $01
000941DE E10F                       	smpsAlterNote       $0F
000941E0 E701                       	dc.b	smpsNoAttack, $01
000941E4 E109                       	smpsAlterNote       $09
000941E6 E6FF                       	smpsAlterVol        $FF
000941E8 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000941F2 E108                       	smpsAlterNote       $08
000941F4 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000941FA E107                       	smpsAlterNote       $07
000941FC E601                       	smpsAlterVol        $01
000941FE BF03                       	dc.b	nD5, $03
00094200 E108                       	smpsAlterNote       $08
00094202 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094206 E109                       	smpsAlterNote       $09
00094208 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0009420E E10B                       	smpsAlterNote       $0B
00094210 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094214 E107                       	smpsAlterNote       $07
00094216 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009421A E106                       	smpsAlterNote       $06
0009421C C90D                       	dc.b	nC6, $0D
0009421E E103                       	smpsAlterNote       $03
00094220 E701                       	dc.b	smpsNoAttack, $01
00094222 E1FF                       	smpsAlterNote       $FF
00094224 E701                       	dc.b	smpsNoAttack, $01
00094226 E103                       	smpsAlterNote       $03
00094228 E701                       	dc.b	smpsNoAttack, $01
0009422A E109                       	smpsAlterNote       $09
0009422C E701                       	dc.b	smpsNoAttack, $01
0009422E E10A                       	smpsAlterNote       $0A
00094230 E701                       	dc.b	smpsNoAttack, $01
00094232 E106                       	smpsAlterNote       $06
00094234 E701                       	dc.b	smpsNoAttack, $01
00094236 E100                       	smpsAlterNote       $00
00094238 E701                       	dc.b	smpsNoAttack, $01
0009423A E10C                       	smpsAlterNote       $0C
0009423C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094240 E10B                       	smpsAlterNote       $0B
00094242 C603                       	dc.b	nA5, $03
00094244 E109                       	smpsAlterNote       $09
00094246 C403 8001                  	dc.b	nG5, $03, nRst, $01
0009424A E10B                       	smpsAlterNote       $0B
0009424C C60D                       	dc.b	nA5, $0D
0009424E E105                       	smpsAlterNote       $05
00094250 E701                       	dc.b	smpsNoAttack, $01
00094252 E104                       	smpsAlterNote       $04
00094254 E701                       	dc.b	smpsNoAttack, $01
00094256 E108                       	smpsAlterNote       $08
00094258 E701                       	dc.b	smpsNoAttack, $01
0009425A E10E                       	smpsAlterNote       $0E
0009425C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094260 E10B                       	smpsAlterNote       $0B
00094262 E701                       	dc.b	smpsNoAttack, $01
00094264 E105                       	smpsAlterNote       $05
00094266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009426A E10B                       	smpsAlterNote       $0B
0009426C E701                       	dc.b	smpsNoAttack, $01
0009426E E10E                       	smpsAlterNote       $0E
00094270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094274 E108                       	smpsAlterNote       $08
00094276 E701                       	dc.b	smpsNoAttack, $01
00094278 E104                       	smpsAlterNote       $04
0009427A E701                       	dc.b	smpsNoAttack, $01
0009427C E105                       	smpsAlterNote       $05
0009427E E701                       	dc.b	smpsNoAttack, $01
00094280 E10B                       	smpsAlterNote       $0B
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E10F                       	smpsAlterNote       $0F
00094286 E701                       	dc.b	smpsNoAttack, $01
00094288 E10B                       	smpsAlterNote       $0B
0009428A E701                       	dc.b	smpsNoAttack, $01
0009428C E108                       	smpsAlterNote       $08
0009428E E701                       	dc.b	smpsNoAttack, $01
00094290 E104                       	smpsAlterNote       $04
00094292 E701                       	dc.b	smpsNoAttack, $01
00094294 E108                       	smpsAlterNote       $08
00094296 E701                       	dc.b	smpsNoAttack, $01
00094298 E10E                       	smpsAlterNote       $0E
0009429A E701                       	dc.b	smpsNoAttack, $01
0009429C E10F                       	smpsAlterNote       $0F
0009429E E701                       	dc.b	smpsNoAttack, $01
000942A0 E10B                       	smpsAlterNote       $0B
000942A2 E701                       	dc.b	smpsNoAttack, $01
000942A4 E105                       	smpsAlterNote       $05
000942A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942AA E108                       	smpsAlterNote       $08
000942AC E701                       	dc.b	smpsNoAttack, $01
000942AE E10E                       	smpsAlterNote       $0E
000942B0 E701                       	dc.b	smpsNoAttack, $01
000942B2 E10F                       	smpsAlterNote       $0F
000942B4 800F                       	dc.b	nRst, $0F
000942B6 E107                       	smpsAlterNote       $07
000942B8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000942BC E108                       	smpsAlterNote       $08
000942BE C103                       	dc.b	nE5, $03
000942C0 E109                       	smpsAlterNote       $09
000942C2 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000942C8 E10B                       	smpsAlterNote       $0B
000942CA C606 8001                  	dc.b	nA5, $06, nRst, $01
000942CE E107                       	smpsAlterNote       $07
000942D0 BF03                       	dc.b	nD5, $03
000942D2 E106                       	smpsAlterNote       $06
000942D4 C90E                       	dc.b	nC6, $0E
000942D6 E107                       	smpsAlterNote       $07
000942D8 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000942DC E10C                       	smpsAlterNote       $0C
000942DE C704                       	dc.b	nBb5, $04
000942E0 E10B                       	smpsAlterNote       $0B
000942E2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000942E6 E109                       	smpsAlterNote       $09
000942E8 C404                       	dc.b	nG5, $04
000942EA E10B                       	smpsAlterNote       $0B
000942EC C60D                       	dc.b	nA5, $0D
000942EE E108                       	smpsAlterNote       $08
000942F0 E701                       	dc.b	smpsNoAttack, $01
000942F2 E105                       	smpsAlterNote       $05
000942F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942F8 E10B                       	smpsAlterNote       $0B
000942FA E701                       	dc.b	smpsNoAttack, $01
000942FC E10F                       	smpsAlterNote       $0F
000942FE E701                       	dc.b	smpsNoAttack, $01
00094300 E10E                       	smpsAlterNote       $0E
00094302 E701                       	dc.b	smpsNoAttack, $01
00094304 E108                       	smpsAlterNote       $08
00094306 E701                       	dc.b	smpsNoAttack, $01
00094308 E104                       	smpsAlterNote       $04
0009430A E701                       	dc.b	smpsNoAttack, $01
0009430C E108                       	smpsAlterNote       $08
0009430E E701                       	dc.b	smpsNoAttack, $01
00094310 E10B                       	smpsAlterNote       $0B
00094312 E701                       	dc.b	smpsNoAttack, $01
00094314 E10F                       	smpsAlterNote       $0F
00094316 E701                       	dc.b	smpsNoAttack, $01
00094318 E10B                       	smpsAlterNote       $0B
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E105                       	smpsAlterNote       $05
0009431E E701                       	dc.b	smpsNoAttack, $01
00094320 E104                       	smpsAlterNote       $04
00094322 E701                       	dc.b	smpsNoAttack, $01
00094324 E108                       	smpsAlterNote       $08
00094326 E701                       	dc.b	smpsNoAttack, $01
00094328 E10E                       	smpsAlterNote       $0E
0009432A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009432E E10B                       	smpsAlterNote       $0B
00094330 E701                       	dc.b	smpsNoAttack, $01
00094332 E105                       	smpsAlterNote       $05
00094334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094338 E10B                       	smpsAlterNote       $0B
0009433A E701                       	dc.b	smpsNoAttack, $01
0009433C E10E                       	smpsAlterNote       $0E
0009433E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094342 E108                       	smpsAlterNote       $08
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E105                       	smpsAlterNote       $05
00094348 8001                       	dc.b	nRst, $01
0009434A E109                       	smpsAlterNote       $09
0009434C C402                       	dc.b	nG5, $02
0009434E E10B                       	smpsAlterNote       $0B
00094350 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094359 E109                       	smpsAlterNote       $09
0009435B C404                       	dc.b	nG5, $04
0009435D E10B                       	smpsAlterNote       $0B
0009435F C604 8001                  	dc.b	nA5, $04, nRst, $01
00094363 E107                       	smpsAlterNote       $07
00094365 BF0D                       	dc.b	nD5, $0D
00094367 E101                       	smpsAlterNote       $01
00094369 E701                       	dc.b	smpsNoAttack, $01
0009436B E100                       	smpsAlterNote       $00
0009436D E701                       	dc.b	smpsNoAttack, $01
0009436F E104                       	smpsAlterNote       $04
00094371 E701                       	dc.b	smpsNoAttack, $01
00094373 E10A                       	smpsAlterNote       $0A
00094375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094379 E107                       	smpsAlterNote       $07
0009437B E701                       	dc.b	smpsNoAttack, $01
0009437D E101                       	smpsAlterNote       $01
0009437F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094383 E107                       	smpsAlterNote       $07
00094385 E701                       	dc.b	smpsNoAttack, $01
00094387 E10A                       	smpsAlterNote       $0A
00094389 E701                       	dc.b	smpsNoAttack, $01
0009438B E10B                       	smpsAlterNote       $0B
0009438D 8001                       	dc.b	nRst, $01
0009438F E108                       	smpsAlterNote       $08
00094391 C101                       	dc.b	nE5, $01
00094393 E109                       	smpsAlterNote       $09
00094395 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009439A E10B                       	smpsAlterNote       $0B
0009439C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000943A4 E108                       	smpsAlterNote       $08
000943A6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000943AA E109                       	smpsAlterNote       $09
000943AC CE06 8001                  	dc.b	nF6, $06, nRst, $01
000943B0 E108                       	smpsAlterNote       $08
000943B2 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000943B6 E106                       	smpsAlterNote       $06
000943B8 C903                       	dc.b	nC6, $03
000943BA E109                       	smpsAlterNote       $09
000943BC C403 8001                  	dc.b	nG5, $03, nRst, $01
000943C0 E10C                       	smpsAlterNote       $0C
000943C2 C70D                       	dc.b	nBb5, $0D
000943C4 E109                       	smpsAlterNote       $09
000943C6 E701                       	dc.b	smpsNoAttack, $01
000943C8 E105                       	smpsAlterNote       $05
000943CA E701                       	dc.b	smpsNoAttack, $01
000943CC E109                       	smpsAlterNote       $09
000943CE E701                       	dc.b	smpsNoAttack, $01
000943D0 E10F                       	smpsAlterNote       $0F
000943D2 E701                       	dc.b	smpsNoAttack, $01
000943D4 E110                       	smpsAlterNote       $10
000943D6 E701                       	dc.b	smpsNoAttack, $01
000943D8 E10C                       	smpsAlterNote       $0C
000943DA E701                       	dc.b	smpsNoAttack, $01
000943DC E106                       	smpsAlterNote       $06
000943DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943E2 E109                       	smpsAlterNote       $09
000943E4 E701                       	dc.b	smpsNoAttack, $01
000943E6 E10F                       	smpsAlterNote       $0F
000943E8 E701                       	dc.b	smpsNoAttack, $01
000943EA E110                       	smpsAlterNote       $10
000943EC 8001                       	dc.b	nRst, $01
000943EE E10B                       	smpsAlterNote       $0B
000943F0 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000943F6 E105                       	smpsAlterNote       $05
000943F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943FC E108                       	smpsAlterNote       $08
000943FE E701                       	dc.b	smpsNoAttack, $01
00094400 E10E                       	smpsAlterNote       $0E
00094402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094406 E108                       	smpsAlterNote       $08
00094408 E701                       	dc.b	smpsNoAttack, $01
0009440A E105                       	smpsAlterNote       $05
0009440C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094410 E10B                       	smpsAlterNote       $0B
00094412 E701                       	dc.b	smpsNoAttack, $01
00094414 E10F                       	smpsAlterNote       $0F
00094416 E701                       	dc.b	smpsNoAttack, $01
00094418 E10E                       	smpsAlterNote       $0E
0009441A E701                       	dc.b	smpsNoAttack, $01
0009441C E108                       	smpsAlterNote       $08
0009441E E701                       	dc.b	smpsNoAttack, $01
00094420 E104                       	smpsAlterNote       $04
00094422 E701                       	dc.b	smpsNoAttack, $01
00094424 E108                       	smpsAlterNote       $08
00094426 E701                       	dc.b	smpsNoAttack, $01
00094428 E10B                       	smpsAlterNote       $0B
0009442A E701                       	dc.b	smpsNoAttack, $01
0009442C E10F                       	smpsAlterNote       $0F
0009442E E701                       	dc.b	smpsNoAttack, $01
00094430 E10B                       	smpsAlterNote       $0B
00094432 E701                       	dc.b	smpsNoAttack, $01
00094434 E105                       	smpsAlterNote       $05
00094436 E701                       	dc.b	smpsNoAttack, $01
00094438 E104                       	smpsAlterNote       $04
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E108                       	smpsAlterNote       $08
0009443E E701                       	dc.b	smpsNoAttack, $01
00094440 E10E                       	smpsAlterNote       $0E
00094442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094446 E10B                       	smpsAlterNote       $0B
00094448 E701                       	dc.b	smpsNoAttack, $01
0009444A E105                       	smpsAlterNote       $05
0009444C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094450 E10B                       	smpsAlterNote       $0B
00094452 E701                       	dc.b	smpsNoAttack, $01
00094454 E10E                       	smpsAlterNote       $0E
00094456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009445A E108                       	smpsAlterNote       $08
0009445C E701                       	dc.b	smpsNoAttack, $01
0009445E E104                       	smpsAlterNote       $04
00094460 E701                       	dc.b	smpsNoAttack, $01
00094462 E105                       	smpsAlterNote       $05
00094464 E701                       	dc.b	smpsNoAttack, $01
00094466 E10B                       	smpsAlterNote       $0B
00094468 E701                       	dc.b	smpsNoAttack, $01
0009446A E10F                       	smpsAlterNote       $0F
0009446C E701                       	dc.b	smpsNoAttack, $01
0009446E E10B                       	smpsAlterNote       $0B
00094470 E701                       	dc.b	smpsNoAttack, $01
00094472 E108                       	smpsAlterNote       $08
00094474 E701                       	dc.b	smpsNoAttack, $01
00094476 E104                       	smpsAlterNote       $04
00094478 E701                       	dc.b	smpsNoAttack, $01
0009447A E108                       	smpsAlterNote       $08
0009447C E701                       	dc.b	smpsNoAttack, $01
0009447E E10E                       	smpsAlterNote       $0E
00094480 E701                       	dc.b	smpsNoAttack, $01
00094482 E10F                       	smpsAlterNote       $0F
00094484 E701                       	dc.b	smpsNoAttack, $01
00094486 E10B                       	smpsAlterNote       $0B
00094488 E701                       	dc.b	smpsNoAttack, $01
0009448A E105                       	smpsAlterNote       $05
0009448C E701                       	dc.b	smpsNoAttack, $01
0009448E E10B                       	smpsAlterNote       $0B
00094490 C60E                       	dc.b	nA5, $0E
00094492 E105                       	smpsAlterNote       $05
00094494 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094498 E10B                       	smpsAlterNote       $0B
0009449A E701                       	dc.b	smpsNoAttack, $01
0009449C E10E                       	smpsAlterNote       $0E
0009449E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944A2 E108                       	smpsAlterNote       $08
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E104                       	smpsAlterNote       $04
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E105                       	smpsAlterNote       $05
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E10F                       	smpsAlterNote       $0F
000944B4 E701                       	dc.b	smpsNoAttack, $01
000944B6 E10B                       	smpsAlterNote       $0B
000944B8 E701                       	dc.b	smpsNoAttack, $01
000944BA E108                       	smpsAlterNote       $08
000944BC E701                       	dc.b	smpsNoAttack, $01
000944BE E104                       	smpsAlterNote       $04
000944C0 E701                       	dc.b	smpsNoAttack, $01
000944C2 E108                       	smpsAlterNote       $08
000944C4 E701                       	dc.b	smpsNoAttack, $01
000944C6 E10E                       	smpsAlterNote       $0E
000944C8 E701                       	dc.b	smpsNoAttack, $01
000944CA E10F                       	smpsAlterNote       $0F
000944CC E701                       	dc.b	smpsNoAttack, $01
000944CE E10B                       	smpsAlterNote       $0B
000944D0 E701                       	dc.b	smpsNoAttack, $01
000944D2 E105                       	smpsAlterNote       $05
000944D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944D8 E108                       	smpsAlterNote       $08
000944DA E701                       	dc.b	smpsNoAttack, $01
000944DC E10E                       	smpsAlterNote       $0E
000944DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944E2 E108                       	smpsAlterNote       $08
000944E4 E701                       	dc.b	smpsNoAttack, $01
000944E6 E105                       	smpsAlterNote       $05
000944E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944EC E10B                       	smpsAlterNote       $0B
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E10F                       	smpsAlterNote       $0F
000944F2 E701                       	dc.b	smpsNoAttack, $01
000944F4 E10E                       	smpsAlterNote       $0E
000944F6 E701                       	dc.b	smpsNoAttack, $01
000944F8 E108                       	smpsAlterNote       $08
000944FA E701                       	dc.b	smpsNoAttack, $01
000944FC E104                       	smpsAlterNote       $04
000944FE E701                       	dc.b	smpsNoAttack, $01
00094500 E108                       	smpsAlterNote       $08
00094502 E701                       	dc.b	smpsNoAttack, $01
00094504 E10E                       	smpsAlterNote       $0E
00094506 E701                       	dc.b	smpsNoAttack, $01
00094508 E10F                       	smpsAlterNote       $0F
0009450A E701                       	dc.b	smpsNoAttack, $01
0009450C E10B                       	smpsAlterNote       $0B
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E105                       	smpsAlterNote       $05
00094512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094516 E108                       	smpsAlterNote       $08
00094518 E701                       	dc.b	smpsNoAttack, $01
0009451A E10E                       	smpsAlterNote       $0E
0009451C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094520 E108                       	smpsAlterNote       $08
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E105                       	smpsAlterNote       $05
00094526 E701                       	dc.b	smpsNoAttack, $01
0009452A E10B                       	smpsAlterNote       $0B
0009452C E6FD                       	smpsAlterVol        $FD
0009452E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094532 E109                       	smpsAlterNote       $09
00094534 C404                       	dc.b	nG5, $04
00094536 E10B                       	smpsAlterNote       $0B
00094538 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009453C E107                       	smpsAlterNote       $07
0009453E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094544 E10B                       	smpsAlterNote       $0B
00094546 C604                       	dc.b	nA5, $04
00094548 E109                       	smpsAlterNote       $09
0009454A C404 8001                  	dc.b	nG5, $04, nRst, $01
0009454E E10B                       	smpsAlterNote       $0B
00094550 C604                       	dc.b	nA5, $04
00094552 E108                       	smpsAlterNote       $08
00094554 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0009455C E106                       	smpsAlterNote       $06
0009455E C904 8001                  	dc.b	nC6, $04, nRst, $01
00094562 E10C                       	smpsAlterNote       $0C
00094564 C704                       	dc.b	nBb5, $04
00094566 E10B                       	smpsAlterNote       $0B
00094568 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009456C E109                       	smpsAlterNote       $09
0009456E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094578 E10B                       	smpsAlterNote       $0B
0009457A C60D                       	dc.b	nA5, $0D
0009457C E108                       	smpsAlterNote       $08
0009457E E701                       	dc.b	smpsNoAttack, $01
00094580 E104                       	smpsAlterNote       $04
00094582 E701                       	dc.b	smpsNoAttack, $01
00094584 E108                       	smpsAlterNote       $08
00094586 E701                       	dc.b	smpsNoAttack, $01
00094588 E10E                       	smpsAlterNote       $0E
0009458A E701                       	dc.b	smpsNoAttack, $01
0009458C E10F                       	smpsAlterNote       $0F
0009458E E701                       	dc.b	smpsNoAttack, $01
00094590 E10B                       	smpsAlterNote       $0B
00094592 E701                       	dc.b	smpsNoAttack, $01
00094594 E105                       	smpsAlterNote       $05
00094596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009459A E108                       	smpsAlterNote       $08
0009459C E701                       	dc.b	smpsNoAttack, $01
0009459E E10E                       	smpsAlterNote       $0E
000945A0 E701                       	dc.b	smpsNoAttack, $01
000945A2 E10F                       	smpsAlterNote       $0F
000945A4 8001                       	dc.b	nRst, $01
000945A6 E109                       	smpsAlterNote       $09
000945A8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000945AE E108                       	smpsAlterNote       $08
000945B0 C10D                       	dc.b	nE5, $0D
000945B2 E102                       	smpsAlterNote       $02
000945B4 E701                       	dc.b	smpsNoAttack, $01
000945B6 E101                       	smpsAlterNote       $01
000945B8 E701                       	dc.b	smpsNoAttack, $01
000945BA E105                       	smpsAlterNote       $05
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E10B                       	smpsAlterNote       $0B
000945C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945C4 E108                       	smpsAlterNote       $08
000945C6 E701                       	dc.b	smpsNoAttack, $01
000945C8 E102                       	smpsAlterNote       $02
000945CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945CE E108                       	smpsAlterNote       $08
000945D0 E701                       	dc.b	smpsNoAttack, $01
000945D2 E10B                       	smpsAlterNote       $0B
000945D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945D8 E105                       	smpsAlterNote       $05
000945DA E701                       	dc.b	smpsNoAttack, $01
000945DC E101                       	smpsAlterNote       $01
000945DE E701                       	dc.b	smpsNoAttack, $01
000945E0 E102                       	smpsAlterNote       $02
000945E2 E701                       	dc.b	smpsNoAttack, $01
000945E4 E108                       	smpsAlterNote       $08
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E10C                       	smpsAlterNote       $0C
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E108                       	smpsAlterNote       $08
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E105                       	smpsAlterNote       $05
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E101                       	smpsAlterNote       $01
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E105                       	smpsAlterNote       $05
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E10B                       	smpsAlterNote       $0B
000945FE E701                       	dc.b	smpsNoAttack, $01
00094600 E10C                       	smpsAlterNote       $0C
00094602 E701                       	dc.b	smpsNoAttack, $01
00094604 E108                       	smpsAlterNote       $08
00094606 E701                       	dc.b	smpsNoAttack, $01
00094608 E102                       	smpsAlterNote       $02
0009460A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009460E E105                       	smpsAlterNote       $05
00094610 E701                       	dc.b	smpsNoAttack, $01
00094612 E10B                       	smpsAlterNote       $0B
00094614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094618 E105                       	smpsAlterNote       $05
0009461A E701                       	dc.b	smpsNoAttack, $01
0009461C E102                       	smpsAlterNote       $02
0009461E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094622 E108                       	smpsAlterNote       $08
00094624 E701                       	dc.b	smpsNoAttack, $01
00094626 E10C                       	smpsAlterNote       $0C
00094628 E701                       	dc.b	smpsNoAttack, $01
0009462A E10B                       	smpsAlterNote       $0B
0009462C E701                       	dc.b	smpsNoAttack, $01
0009462E E105                       	smpsAlterNote       $05
00094630 E701                       	dc.b	smpsNoAttack, $01
00094632 E101                       	smpsAlterNote       $01
00094634 E701                       	dc.b	smpsNoAttack, $01
00094636 E105                       	smpsAlterNote       $05
00094638 E701                       	dc.b	smpsNoAttack, $01
0009463A E108                       	smpsAlterNote       $08
0009463C E701                       	dc.b	smpsNoAttack, $01
0009463E E10C                       	smpsAlterNote       $0C
00094640 E701                       	dc.b	smpsNoAttack, $01
00094642 E108                       	smpsAlterNote       $08
00094644 E701                       	dc.b	smpsNoAttack, $01
00094646 E102                       	smpsAlterNote       $02
00094648 E701                       	dc.b	smpsNoAttack, $01
0009464A E101                       	smpsAlterNote       $01
0009464C E701                       	dc.b	smpsNoAttack, $01
0009464E E105                       	smpsAlterNote       $05
00094650 E701                       	dc.b	smpsNoAttack, $01
00094652 E10B                       	smpsAlterNote       $0B
00094654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094658 E108                       	smpsAlterNote       $08
0009465A E701                       	dc.b	smpsNoAttack, $01
0009465C E102                       	smpsAlterNote       $02
0009465E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094662 E108                       	smpsAlterNote       $08
00094664 E701                       	dc.b	smpsNoAttack, $01
00094666 E10B                       	smpsAlterNote       $0B
00094668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009466C E105                       	smpsAlterNote       $05
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E101                       	smpsAlterNote       $01
00094672 E701                       	dc.b	smpsNoAttack, $01
00094674 E102                       	smpsAlterNote       $02
00094676 E701                       	dc.b	smpsNoAttack, $01
00094678 E108                       	smpsAlterNote       $08
0009467A E701                       	dc.b	smpsNoAttack, $01
0009467C E10C                       	smpsAlterNote       $0C
0009467E E701                       	dc.b	smpsNoAttack, $01
00094680 E108                       	smpsAlterNote       $08
00094682 E701                       	dc.b	smpsNoAttack, $01
00094684 E105                       	smpsAlterNote       $05
00094686 E701                       	dc.b	smpsNoAttack, $01
00094688 E101                       	smpsAlterNote       $01
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E105                       	smpsAlterNote       $05
0009468E E701                       	dc.b	smpsNoAttack, $01
00094690 E10B                       	smpsAlterNote       $0B
00094692 E701                       	dc.b	smpsNoAttack, $01
00094694 E10C                       	smpsAlterNote       $0C
00094696 E701                       	dc.b	smpsNoAttack, $01
00094698 E108                       	smpsAlterNote       $08
0009469A E701                       	dc.b	smpsNoAttack, $01
0009469C E102                       	smpsAlterNote       $02
0009469E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946A2 E105                       	smpsAlterNote       $05
000946A4 E701                       	dc.b	smpsNoAttack, $01
000946A6 E10B                       	smpsAlterNote       $0B
000946A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946AC E105                       	smpsAlterNote       $05
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E101                       	smpsAlterNote       $01
000946B2 E701                       	dc.b	smpsNoAttack, $01
000946B4 E102                       	smpsAlterNote       $02
000946B6 E701                       	dc.b	smpsNoAttack, $01
000946B8 E108                       	smpsAlterNote       $08
000946BA E701                       	dc.b	smpsNoAttack, $01
000946BC E10C                       	smpsAlterNote       $0C
000946BE E701                       	dc.b	smpsNoAttack, $01
000946C0 E108                       	smpsAlterNote       $08
000946C2 E701                       	dc.b	smpsNoAttack, $01
000946C4 E105                       	smpsAlterNote       $05
000946C6 E701                       	dc.b	smpsNoAttack, $01
000946C8 E101                       	smpsAlterNote       $01
000946CA E701                       	dc.b	smpsNoAttack, $01
000946CC E105                       	smpsAlterNote       $05
000946CE E701                       	dc.b	smpsNoAttack, $01
000946D0 E10B                       	smpsAlterNote       $0B
000946D2 E701                       	dc.b	smpsNoAttack, $01
000946D4 E10C                       	smpsAlterNote       $0C
000946D6 E701                       	dc.b	smpsNoAttack, $01
000946D8 E108                       	smpsAlterNote       $08
000946DA E701                       	dc.b	smpsNoAttack, $01
000946DC E102                       	smpsAlterNote       $02
000946DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946E2 E105                       	smpsAlterNote       $05
000946E4 E701                       	dc.b	smpsNoAttack, $01
000946E6 E10B                       	smpsAlterNote       $0B
000946E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946EC E105                       	smpsAlterNote       $05
000946EE E701                       	dc.b	smpsNoAttack, $01
000946F0 E102                       	smpsAlterNote       $02
000946F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946F6 E108                       	smpsAlterNote       $08
000946F8 E701                       	dc.b	smpsNoAttack, $01
000946FA E10C                       	smpsAlterNote       $0C
000946FC E701                       	dc.b	smpsNoAttack, $01
000946FE E10B                       	smpsAlterNote       $0B
00094700 E701                       	dc.b	smpsNoAttack, $01
00094702 E105                       	smpsAlterNote       $05
00094704 E701                       	dc.b	smpsNoAttack, $01
00094706 E101                       	smpsAlterNote       $01
00094708 E701                       	dc.b	smpsNoAttack, $01
0009470A E105                       	smpsAlterNote       $05
0009470C E701                       	dc.b	smpsNoAttack, $01
0009470E E108                       	smpsAlterNote       $08
00094710 E701                       	dc.b	smpsNoAttack, $01
00094712 E10C                       	smpsAlterNote       $0C
00094714 E701                       	dc.b	smpsNoAttack, $01
00094718 E10B                       	smpsAlterNote       $0B
0009471A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009471E E109                       	smpsAlterNote       $09
00094720 C404                       	dc.b	nG5, $04
00094722 E10B                       	smpsAlterNote       $0B
00094724 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094728 E107                       	smpsAlterNote       $07
0009472A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094730 E10B                       	smpsAlterNote       $0B
00094732 C604                       	dc.b	nA5, $04
00094734 E109                       	smpsAlterNote       $09
00094736 C404 8001                  	dc.b	nG5, $04, nRst, $01
0009473A E10B                       	smpsAlterNote       $0B
0009473C C604                       	dc.b	nA5, $04
0009473E E108                       	smpsAlterNote       $08
00094740 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00094746 E106                       	smpsAlterNote       $06
00094748 C904 8001                  	dc.b	nC6, $04, nRst, $01
0009474C E10C                       	smpsAlterNote       $0C
0009474E C704                       	dc.b	nBb5, $04
00094750 E10B                       	smpsAlterNote       $0B
00094752 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094756 E109                       	smpsAlterNote       $09
00094758 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094762 E10B                       	smpsAlterNote       $0B
00094764 C60D                       	dc.b	nA5, $0D
00094766 E108                       	smpsAlterNote       $08
00094768 E701                       	dc.b	smpsNoAttack, $01
0009476A E104                       	smpsAlterNote       $04
0009476C E701                       	dc.b	smpsNoAttack, $01
0009476E E108                       	smpsAlterNote       $08
00094770 E701                       	dc.b	smpsNoAttack, $01
00094772 E10B                       	smpsAlterNote       $0B
00094774 E701                       	dc.b	smpsNoAttack, $01
00094776 E10F                       	smpsAlterNote       $0F
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E10B                       	smpsAlterNote       $0B
0009477C E701                       	dc.b	smpsNoAttack, $01
0009477E E105                       	smpsAlterNote       $05
00094780 E701                       	dc.b	smpsNoAttack, $01
00094782 E104                       	smpsAlterNote       $04
00094784 E701                       	dc.b	smpsNoAttack, $01
00094786 E108                       	smpsAlterNote       $08
00094788 E701                       	dc.b	smpsNoAttack, $01
0009478A E10E                       	smpsAlterNote       $0E
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E10F                       	smpsAlterNote       $0F
00094790 8001                       	dc.b	nRst, $01
00094792 E109                       	smpsAlterNote       $09
00094794 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009479A E108                       	smpsAlterNote       $08
0009479C C10D                       	dc.b	nE5, $0D
0009479E E105                       	smpsAlterNote       $05
000947A0 E701                       	dc.b	smpsNoAttack, $01
000947A2 E101                       	smpsAlterNote       $01
000947A4 E701                       	dc.b	smpsNoAttack, $01
000947A6 E105                       	smpsAlterNote       $05
000947A8 E701                       	dc.b	smpsNoAttack, $01
000947AA E10B                       	smpsAlterNote       $0B
000947AC E701                       	dc.b	smpsNoAttack, $01
000947AE E10C                       	smpsAlterNote       $0C
000947B0 E701                       	dc.b	smpsNoAttack, $01
000947B2 E108                       	smpsAlterNote       $08
000947B4 E701                       	dc.b	smpsNoAttack, $01
000947B6 E102                       	smpsAlterNote       $02
000947B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947BC E105                       	smpsAlterNote       $05
000947BE E701                       	dc.b	smpsNoAttack, $01
000947C0 E10B                       	smpsAlterNote       $0B
000947C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947C6 E105                       	smpsAlterNote       $05
000947C8 E701                       	dc.b	smpsNoAttack, $01
000947CA E102                       	smpsAlterNote       $02
000947CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947D0 E108                       	smpsAlterNote       $08
000947D2 E701                       	dc.b	smpsNoAttack, $01
000947D4 E10C                       	smpsAlterNote       $0C
000947D6 E701                       	dc.b	smpsNoAttack, $01
000947D8 E10B                       	smpsAlterNote       $0B
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E105                       	smpsAlterNote       $05
000947DE E701                       	dc.b	smpsNoAttack, $01
000947E0 E101                       	smpsAlterNote       $01
000947E2 E701                       	dc.b	smpsNoAttack, $01
000947E4 E105                       	smpsAlterNote       $05
000947E6 E701                       	dc.b	smpsNoAttack, $01
000947E8 E108                       	smpsAlterNote       $08
000947EA E701                       	dc.b	smpsNoAttack, $01
000947EC E10C                       	smpsAlterNote       $0C
000947EE E701                       	dc.b	smpsNoAttack, $01
000947F0 E108                       	smpsAlterNote       $08
000947F2 E701                       	dc.b	smpsNoAttack, $01
000947F4 E102                       	smpsAlterNote       $02
000947F6 E701                       	dc.b	smpsNoAttack, $01
000947F8 E101                       	smpsAlterNote       $01
000947FA E701                       	dc.b	smpsNoAttack, $01
000947FC E105                       	smpsAlterNote       $05
000947FE E701                       	dc.b	smpsNoAttack, $01
00094800 E10B                       	smpsAlterNote       $0B
00094802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094806 E108                       	smpsAlterNote       $08
00094808 E701                       	dc.b	smpsNoAttack, $01
0009480A E102                       	smpsAlterNote       $02
0009480C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094810 E108                       	smpsAlterNote       $08
00094812 E701                       	dc.b	smpsNoAttack, $01
00094814 E10B                       	smpsAlterNote       $0B
00094816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009481A E105                       	smpsAlterNote       $05
0009481C E701                       	dc.b	smpsNoAttack, $01
0009481E E101                       	smpsAlterNote       $01
00094820 E701                       	dc.b	smpsNoAttack, $01
00094822 E102                       	smpsAlterNote       $02
00094824 E701                       	dc.b	smpsNoAttack, $01
00094826 E108                       	smpsAlterNote       $08
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482A E10C                       	smpsAlterNote       $0C
0009482C E701                       	dc.b	smpsNoAttack, $01
0009482E E108                       	smpsAlterNote       $08
00094830 E701                       	dc.b	smpsNoAttack, $01
00094832 E105                       	smpsAlterNote       $05
00094834 E701                       	dc.b	smpsNoAttack, $01
00094836 E101                       	smpsAlterNote       $01
00094838 E701                       	dc.b	smpsNoAttack, $01
0009483A E105                       	smpsAlterNote       $05
0009483C E701                       	dc.b	smpsNoAttack, $01
0009483E E10B                       	smpsAlterNote       $0B
00094840 E701                       	dc.b	smpsNoAttack, $01
00094842 E10C                       	smpsAlterNote       $0C
00094844 E701                       	dc.b	smpsNoAttack, $01
00094846 E108                       	smpsAlterNote       $08
00094848 E701                       	dc.b	smpsNoAttack, $01
0009484A E102                       	smpsAlterNote       $02
0009484C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094850 E108                       	smpsAlterNote       $08
00094852 E701                       	dc.b	smpsNoAttack, $01
00094854 E10B                       	smpsAlterNote       $0B
00094856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009485A E105                       	smpsAlterNote       $05
0009485C E701                       	dc.b	smpsNoAttack, $01
0009485E E101                       	smpsAlterNote       $01
00094860 E701                       	dc.b	smpsNoAttack, $01
00094862 E102                       	smpsAlterNote       $02
00094864 E701                       	dc.b	smpsNoAttack, $01
00094866 E108                       	smpsAlterNote       $08
00094868 E701                       	dc.b	smpsNoAttack, $01
0009486A E10C                       	smpsAlterNote       $0C
0009486C E701                       	dc.b	smpsNoAttack, $01
0009486E E108                       	smpsAlterNote       $08
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E105                       	smpsAlterNote       $05
00094874 E701                       	dc.b	smpsNoAttack, $01
00094876 E101                       	smpsAlterNote       $01
00094878 E701                       	dc.b	smpsNoAttack, $01
0009487A E105                       	smpsAlterNote       $05
0009487C E701                       	dc.b	smpsNoAttack, $01
0009487E E10B                       	smpsAlterNote       $0B
00094880 E701                       	dc.b	smpsNoAttack, $01
00094882 E10C                       	smpsAlterNote       $0C
00094884 E701                       	dc.b	smpsNoAttack, $01
00094886 E108                       	smpsAlterNote       $08
00094888 E701                       	dc.b	smpsNoAttack, $01
0009488A E102                       	smpsAlterNote       $02
0009488C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094890 E105                       	smpsAlterNote       $05
00094892 E701                       	dc.b	smpsNoAttack, $01
00094894 E10B                       	smpsAlterNote       $0B
00094896 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009489A E105                       	smpsAlterNote       $05
0009489C E701                       	dc.b	smpsNoAttack, $01
0009489E E102                       	smpsAlterNote       $02
000948A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948A4 E108                       	smpsAlterNote       $08
000948A6 E701                       	dc.b	smpsNoAttack, $01
000948A8 E10C                       	smpsAlterNote       $0C
000948AA E701                       	dc.b	smpsNoAttack, $01
000948AC E10B                       	smpsAlterNote       $0B
000948AE E701                       	dc.b	smpsNoAttack, $01
000948B0 E105                       	smpsAlterNote       $05
000948B2 E701                       	dc.b	smpsNoAttack, $01
000948B4 E101                       	smpsAlterNote       $01
000948B6 E701                       	dc.b	smpsNoAttack, $01
000948B8 E105                       	smpsAlterNote       $05
000948BA E701                       	dc.b	smpsNoAttack, $01
000948BC E108                       	smpsAlterNote       $08
000948BE E701                       	dc.b	smpsNoAttack, $01
000948C0 E10C                       	smpsAlterNote       $0C
000948C2 E701                       	dc.b	smpsNoAttack, $01
000948C4 E108                       	smpsAlterNote       $08
000948C6 E701                       	dc.b	smpsNoAttack, $01
000948C8 E102                       	smpsAlterNote       $02
000948CA E701                       	dc.b	smpsNoAttack, $01
000948CC E101                       	smpsAlterNote       $01
000948CE E701                       	dc.b	smpsNoAttack, $01
000948D0 E105                       	smpsAlterNote       $05
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E10B                       	smpsAlterNote       $0B
000948D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948DA E108                       	smpsAlterNote       $08
000948DC E701                       	dc.b	smpsNoAttack, $01
000948DE E102                       	smpsAlterNote       $02
000948E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948E4 E108                       	smpsAlterNote       $08
000948E6 E701                       	dc.b	smpsNoAttack, $01
000948E8 E10B                       	smpsAlterNote       $0B
000948EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948EE E105                       	smpsAlterNote       $05
000948F0 E701                       	dc.b	smpsNoAttack, $01
000948F2 E102                       	smpsAlterNote       $02
000948F4 8001                       	dc.b	nRst, $01
000948F6 E107                       	smpsAlterNote       $07
000948F8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000948FC E108                       	smpsAlterNote       $08
000948FE C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094902 E102                       	smpsAlterNote       $02
00094904 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094908 E108                       	smpsAlterNote       $08
0009490A E701                       	dc.b	smpsNoAttack, $01
0009490C E10B                       	smpsAlterNote       $0B
0009490E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094912 E105                       	smpsAlterNote       $05
00094914 E701                       	dc.b	smpsNoAttack, $01
00094916 E101                       	smpsAlterNote       $01
00094918 E701                       	dc.b	smpsNoAttack, $01
0009491A E102                       	smpsAlterNote       $02
0009491C E701                       	dc.b	smpsNoAttack, $01
0009491E E108                       	smpsAlterNote       $08
00094920 E701                       	dc.b	smpsNoAttack, $01
00094922 E10C                       	smpsAlterNote       $0C
00094924 E701                       	dc.b	smpsNoAttack, $01
00094926 E108                       	smpsAlterNote       $08
00094928 E701                       	dc.b	smpsNoAttack, $01
0009492A E105                       	smpsAlterNote       $05
0009492C E701                       	dc.b	smpsNoAttack, $01
0009492E E101                       	smpsAlterNote       $01
00094930 E701                       	dc.b	smpsNoAttack, $01
00094932 E105                       	smpsAlterNote       $05
00094934 E701                       	dc.b	smpsNoAttack, $01
00094936 E10B                       	smpsAlterNote       $0B
00094938 E701                       	dc.b	smpsNoAttack, $01
0009493A E10C                       	smpsAlterNote       $0C
0009493C E701                       	dc.b	smpsNoAttack, $01
0009493E E108                       	smpsAlterNote       $08
00094940 E701                       	dc.b	smpsNoAttack, $01
00094942 E102                       	smpsAlterNote       $02
00094944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094948 E105                       	smpsAlterNote       $05
0009494A E701                       	dc.b	smpsNoAttack, $01
0009494C E10B                       	smpsAlterNote       $0B
0009494E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094952 E105                       	smpsAlterNote       $05
00094954 E701                       	dc.b	smpsNoAttack, $01
00094956 E102                       	smpsAlterNote       $02
00094958 E701                       	dc.b	smpsNoAttack, $01
0009495A E109                       	smpsAlterNote       $09
0009495C C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094960 E108                       	smpsAlterNote       $08
00094962 C10D                       	dc.b	nE5, $0D
00094964 E105                       	smpsAlterNote       $05
00094966 E701                       	dc.b	smpsNoAttack, $01
00094968 E101                       	smpsAlterNote       $01
0009496A E701                       	dc.b	smpsNoAttack, $01
0009496C E102                       	smpsAlterNote       $02
0009496E E701                       	dc.b	smpsNoAttack, $01
00094970 E108                       	smpsAlterNote       $08
00094972 E701                       	dc.b	smpsNoAttack, $01
00094974 E10C                       	smpsAlterNote       $0C
00094976 E701                       	dc.b	smpsNoAttack, $01
00094978 E108                       	smpsAlterNote       $08
0009497A E701                       	dc.b	smpsNoAttack, $01
0009497C E105                       	smpsAlterNote       $05
0009497E E701                       	dc.b	smpsNoAttack, $01
00094980 E101                       	smpsAlterNote       $01
00094982 E701                       	dc.b	smpsNoAttack, $01
00094984 E105                       	smpsAlterNote       $05
00094986 E701                       	dc.b	smpsNoAttack, $01
00094988 E10B                       	smpsAlterNote       $0B
0009498A E701                       	dc.b	smpsNoAttack, $01
0009498C E10C                       	smpsAlterNote       $0C
0009498E E701                       	dc.b	smpsNoAttack, $01
00094990 E108                       	smpsAlterNote       $08
00094992 E701                       	dc.b	smpsNoAttack, $01
00094994 E102                       	smpsAlterNote       $02
00094996 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0009499E E10B                       	smpsAlterNote       $0B
000949A0 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000949A4 E10C                       	smpsAlterNote       $0C
000949A6 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000949AA E10B                       	smpsAlterNote       $0B
000949AC BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000949B2 E107                       	smpsAlterNote       $07
000949B4 BF03                       	dc.b	nD5, $03
000949B6 E108                       	smpsAlterNote       $08
000949B8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000949BC E109                       	smpsAlterNote       $09
000949BE C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000949C4 E10B                       	smpsAlterNote       $0B
000949C6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000949CA E107                       	smpsAlterNote       $07
000949CC BF02 8001                  	dc.b	nD5, $02, nRst, $01
000949D0 E106                       	smpsAlterNote       $06
000949D2 C90D                       	dc.b	nC6, $0D
000949D4 E103                       	smpsAlterNote       $03
000949D6 E701                       	dc.b	smpsNoAttack, $01
000949D8 E1FF                       	smpsAlterNote       $FF
000949DA E701                       	dc.b	smpsNoAttack, $01
000949DC E103                       	smpsAlterNote       $03
000949DE E701                       	dc.b	smpsNoAttack, $01
000949E0 E109                       	smpsAlterNote       $09
000949E2 E701                       	dc.b	smpsNoAttack, $01
000949E4 E10A                       	smpsAlterNote       $0A
000949E6 E701                       	dc.b	smpsNoAttack, $01
000949E8 E106                       	smpsAlterNote       $06
000949EA E701                       	dc.b	smpsNoAttack, $01
000949EC E100                       	smpsAlterNote       $00
000949EE E701                       	dc.b	smpsNoAttack, $01
000949F0 E10C                       	smpsAlterNote       $0C
000949F2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000949F6 E10B                       	smpsAlterNote       $0B
000949F8 C603                       	dc.b	nA5, $03
000949FA E109                       	smpsAlterNote       $09
000949FC C403 8001                  	dc.b	nG5, $03, nRst, $01
00094A00 E10B                       	smpsAlterNote       $0B
00094A02 C60D                       	dc.b	nA5, $0D
00094A04 E105                       	smpsAlterNote       $05
00094A06 E701                       	dc.b	smpsNoAttack, $01
00094A08 E104                       	smpsAlterNote       $04
00094A0A E701                       	dc.b	smpsNoAttack, $01
00094A0C E108                       	smpsAlterNote       $08
00094A0E E701                       	dc.b	smpsNoAttack, $01
00094A10 E10E                       	smpsAlterNote       $0E
00094A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A16 E10B                       	smpsAlterNote       $0B
00094A18 E701                       	dc.b	smpsNoAttack, $01
00094A1A E105                       	smpsAlterNote       $05
00094A1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A20 E10B                       	smpsAlterNote       $0B
00094A22 E701                       	dc.b	smpsNoAttack, $01
00094A24 E10E                       	smpsAlterNote       $0E
00094A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A2A E108                       	smpsAlterNote       $08
00094A2C E701                       	dc.b	smpsNoAttack, $01
00094A2E E104                       	smpsAlterNote       $04
00094A30 E701                       	dc.b	smpsNoAttack, $01
00094A32 E105                       	smpsAlterNote       $05
00094A34 E701                       	dc.b	smpsNoAttack, $01
00094A36 E10B                       	smpsAlterNote       $0B
00094A38 E701                       	dc.b	smpsNoAttack, $01
00094A3A E10F                       	smpsAlterNote       $0F
00094A3C E701                       	dc.b	smpsNoAttack, $01
00094A3E E10B                       	smpsAlterNote       $0B
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E108                       	smpsAlterNote       $08
00094A44 E701                       	dc.b	smpsNoAttack, $01
00094A46 E104                       	smpsAlterNote       $04
00094A48 E701                       	dc.b	smpsNoAttack, $01
00094A4A E108                       	smpsAlterNote       $08
00094A4C E701                       	dc.b	smpsNoAttack, $01
00094A4E E10E                       	smpsAlterNote       $0E
00094A50 E701                       	dc.b	smpsNoAttack, $01
00094A52 E10F                       	smpsAlterNote       $0F
00094A54 E701                       	dc.b	smpsNoAttack, $01
00094A56 E10B                       	smpsAlterNote       $0B
00094A58 E701                       	dc.b	smpsNoAttack, $01
00094A5A E105                       	smpsAlterNote       $05
00094A5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A60 E108                       	smpsAlterNote       $08
00094A62 E701                       	dc.b	smpsNoAttack, $01
00094A64 E10E                       	smpsAlterNote       $0E
00094A66 E701                       	dc.b	smpsNoAttack, $01
00094A68 E10F                       	smpsAlterNote       $0F
00094A6A 800F                       	dc.b	nRst, $0F
00094A6C E107                       	smpsAlterNote       $07
00094A6E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094A72 E108                       	smpsAlterNote       $08
00094A74 C103                       	dc.b	nE5, $03
00094A76 E109                       	smpsAlterNote       $09
00094A78 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094A7E E10B                       	smpsAlterNote       $0B
00094A80 C607                       	dc.b	nA5, $07
00094A82 E107                       	smpsAlterNote       $07
00094A84 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094A88 E106                       	smpsAlterNote       $06
00094A8A C90D                       	dc.b	nC6, $0D
00094A8C E107                       	smpsAlterNote       $07
00094A8E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094A92 E10C                       	smpsAlterNote       $0C
00094A94 C704                       	dc.b	nBb5, $04
00094A96 E10B                       	smpsAlterNote       $0B
00094A98 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094A9C E109                       	smpsAlterNote       $09
00094A9E C404                       	dc.b	nG5, $04
00094AA0 E10B                       	smpsAlterNote       $0B
00094AA2 C60D                       	dc.b	nA5, $0D
00094AA4 E108                       	smpsAlterNote       $08
00094AA6 E701                       	dc.b	smpsNoAttack, $01
00094AA8 E105                       	smpsAlterNote       $05
00094AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AAE E10B                       	smpsAlterNote       $0B
00094AB0 E701                       	dc.b	smpsNoAttack, $01
00094AB2 E10F                       	smpsAlterNote       $0F
00094AB4 E701                       	dc.b	smpsNoAttack, $01
00094AB6 E10E                       	smpsAlterNote       $0E
00094AB8 E701                       	dc.b	smpsNoAttack, $01
00094ABA E108                       	smpsAlterNote       $08
00094ABC E701                       	dc.b	smpsNoAttack, $01
00094ABE E104                       	smpsAlterNote       $04
00094AC0 E701                       	dc.b	smpsNoAttack, $01
00094AC2 E108                       	smpsAlterNote       $08
00094AC4 E701                       	dc.b	smpsNoAttack, $01
00094AC6 E10B                       	smpsAlterNote       $0B
00094AC8 E701                       	dc.b	smpsNoAttack, $01
00094ACA E10F                       	smpsAlterNote       $0F
00094ACC E701                       	dc.b	smpsNoAttack, $01
00094ACE E10B                       	smpsAlterNote       $0B
00094AD0 E701                       	dc.b	smpsNoAttack, $01
00094AD2 E105                       	smpsAlterNote       $05
00094AD4 E701                       	dc.b	smpsNoAttack, $01
00094AD6 E104                       	smpsAlterNote       $04
00094AD8 E701                       	dc.b	smpsNoAttack, $01
00094ADA E108                       	smpsAlterNote       $08
00094ADC E701                       	dc.b	smpsNoAttack, $01
00094ADE E10E                       	smpsAlterNote       $0E
00094AE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AE4 E10B                       	smpsAlterNote       $0B
00094AE6 E701                       	dc.b	smpsNoAttack, $01
00094AE8 E105                       	smpsAlterNote       $05
00094AEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AEE E10B                       	smpsAlterNote       $0B
00094AF0 E701                       	dc.b	smpsNoAttack, $01
00094AF2 E10E                       	smpsAlterNote       $0E
00094AF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AF8 E108                       	smpsAlterNote       $08
00094AFA E701                       	dc.b	smpsNoAttack, $01
00094AFC E105                       	smpsAlterNote       $05
00094AFE 8001                       	dc.b	nRst, $01
00094B00 E109                       	smpsAlterNote       $09
00094B02 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094B06 E10B                       	smpsAlterNote       $0B
00094B08 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094B10 E109                       	smpsAlterNote       $09
00094B12 C404                       	dc.b	nG5, $04
00094B14 E10B                       	smpsAlterNote       $0B
00094B16 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094B1A E107                       	smpsAlterNote       $07
00094B1C BF0D                       	dc.b	nD5, $0D
00094B1E E101                       	smpsAlterNote       $01
00094B20 E701                       	dc.b	smpsNoAttack, $01
00094B22 E100                       	smpsAlterNote       $00
00094B24 E701                       	dc.b	smpsNoAttack, $01
00094B26 E104                       	smpsAlterNote       $04
00094B28 E701                       	dc.b	smpsNoAttack, $01
00094B2A E10A                       	smpsAlterNote       $0A
00094B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B30 E107                       	smpsAlterNote       $07
00094B32 E701                       	dc.b	smpsNoAttack, $01
00094B34 E101                       	smpsAlterNote       $01
00094B36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B3A E107                       	smpsAlterNote       $07
00094B3C E701                       	dc.b	smpsNoAttack, $01
00094B3E E10A                       	smpsAlterNote       $0A
00094B40 E701                       	dc.b	smpsNoAttack, $01
00094B42 E10B                       	smpsAlterNote       $0B
00094B44 8001                       	dc.b	nRst, $01
00094B46 E108                       	smpsAlterNote       $08
00094B48 8001                       	dc.b	nRst, $01
00094B4A E109                       	smpsAlterNote       $09
00094B4C 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094B50 E10B                       	smpsAlterNote       $0B
00094B52 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094B5A E108                       	smpsAlterNote       $08
00094B5C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094B60 E109                       	smpsAlterNote       $09
00094B62 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094B66 E108                       	smpsAlterNote       $08
00094B68 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094B6C E106                       	smpsAlterNote       $06
00094B6E C903                       	dc.b	nC6, $03
00094B70 E109                       	smpsAlterNote       $09
00094B72 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094B76 E10C                       	smpsAlterNote       $0C
00094B78 C70D                       	dc.b	nBb5, $0D
00094B7A E109                       	smpsAlterNote       $09
00094B7C E701                       	dc.b	smpsNoAttack, $01
00094B7E E105                       	smpsAlterNote       $05
00094B80 E701                       	dc.b	smpsNoAttack, $01
00094B82 E109                       	smpsAlterNote       $09
00094B84 E701                       	dc.b	smpsNoAttack, $01
00094B86 E10F                       	smpsAlterNote       $0F
00094B88 E701                       	dc.b	smpsNoAttack, $01
00094B8A E110                       	smpsAlterNote       $10
00094B8C E701                       	dc.b	smpsNoAttack, $01
00094B8E E10C                       	smpsAlterNote       $0C
00094B90 E701                       	dc.b	smpsNoAttack, $01
00094B92 E106                       	smpsAlterNote       $06
00094B94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B98 E109                       	smpsAlterNote       $09
00094B9A E701                       	dc.b	smpsNoAttack, $01
00094B9C E10F                       	smpsAlterNote       $0F
00094B9E E701                       	dc.b	smpsNoAttack, $01
00094BA0 E110                       	smpsAlterNote       $10
00094BA2 8001                       	dc.b	nRst, $01
00094BA4 E10B                       	smpsAlterNote       $0B
00094BA6 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094BAA E109                       	smpsAlterNote       $09
00094BAC C40D                       	dc.b	nG5, $0D
00094BAE E103                       	smpsAlterNote       $03
00094BB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BB4 E106                       	smpsAlterNote       $06
00094BB6 E701                       	dc.b	smpsNoAttack, $01
00094BB8 E10C                       	smpsAlterNote       $0C
00094BBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BBE E106                       	smpsAlterNote       $06
00094BC0 E701                       	dc.b	smpsNoAttack, $01
00094BC2 E103                       	smpsAlterNote       $03
00094BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC8 E109                       	smpsAlterNote       $09
00094BCA E701                       	dc.b	smpsNoAttack, $01
00094BCC E10D                       	smpsAlterNote       $0D
00094BCE E701                       	dc.b	smpsNoAttack, $01
00094BD0 E10C                       	smpsAlterNote       $0C
00094BD2 E701                       	dc.b	smpsNoAttack, $01
00094BD4 E106                       	smpsAlterNote       $06
00094BD6 E701                       	dc.b	smpsNoAttack, $01
00094BD8 E102                       	smpsAlterNote       $02
00094BDA E701                       	dc.b	smpsNoAttack, $01
00094BDC E103                       	smpsAlterNote       $03
00094BDE 8001                       	dc.b	nRst, $01
00094BE0 E10B                       	smpsAlterNote       $0B
00094BE2 C60D                       	dc.b	nA5, $0D
00094BE4 E108                       	smpsAlterNote       $08
00094BE6 E701                       	dc.b	smpsNoAttack, $01
00094BE8 E104                       	smpsAlterNote       $04
00094BEA E701                       	dc.b	smpsNoAttack, $01
00094BEC E108                       	smpsAlterNote       $08
00094BEE E701                       	dc.b	smpsNoAttack, $01
00094BF0 E10B                       	smpsAlterNote       $0B
00094BF2 E701                       	dc.b	smpsNoAttack, $01
00094BF4 E10F                       	smpsAlterNote       $0F
00094BF6 E701                       	dc.b	smpsNoAttack, $01
00094BF8 E10B                       	smpsAlterNote       $0B
00094BFA E701                       	dc.b	smpsNoAttack, $01
00094BFC E105                       	smpsAlterNote       $05
00094BFE E701                       	dc.b	smpsNoAttack, $01
00094C00 E104                       	smpsAlterNote       $04
00094C02 E701                       	dc.b	smpsNoAttack, $01
00094C04 E108                       	smpsAlterNote       $08
00094C06 E701                       	dc.b	smpsNoAttack, $01
00094C08 E10E                       	smpsAlterNote       $0E
00094C0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C0E E10B                       	smpsAlterNote       $0B
00094C10 E701                       	dc.b	smpsNoAttack, $01
00094C12 E105                       	smpsAlterNote       $05
00094C14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C18 E10C                       	smpsAlterNote       $0C
00094C1A C70E                       	dc.b	nBb5, $0E
00094C1C E106                       	smpsAlterNote       $06
00094C1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C22 E10C                       	smpsAlterNote       $0C
00094C24 E701                       	dc.b	smpsNoAttack, $01
00094C26 E10F                       	smpsAlterNote       $0F
00094C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C2C E109                       	smpsAlterNote       $09
00094C2E E701                       	dc.b	smpsNoAttack, $01
00094C30 E105                       	smpsAlterNote       $05
00094C32 E701                       	dc.b	smpsNoAttack, $01
00094C34 E106                       	smpsAlterNote       $06
00094C36 E701                       	dc.b	smpsNoAttack, $01
00094C38 E10C                       	smpsAlterNote       $0C
00094C3A E701                       	dc.b	smpsNoAttack, $01
00094C3C E110                       	smpsAlterNote       $10
00094C3E E701                       	dc.b	smpsNoAttack, $01
00094C40 E10C                       	smpsAlterNote       $0C
00094C42 E701                       	dc.b	smpsNoAttack, $01
00094C44 E109                       	smpsAlterNote       $09
00094C46 E701                       	dc.b	smpsNoAttack, $01
00094C48 E105                       	smpsAlterNote       $05
00094C4A E701                       	dc.b	smpsNoAttack, $01
00094C4C E106                       	smpsAlterNote       $06
00094C4E 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094C52 E107                       	smpsAlterNote       $07
00094C54 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094C59 E108                       	smpsAlterNote       $08
00094C5B CD0D                       	dc.b	nE6, $0D
00094C5D E107                       	smpsAlterNote       $07
00094C5F CB0D                       	dc.b	nD6, $0D
00094C61 E104                       	smpsAlterNote       $04
00094C63 E701                       	dc.b	smpsNoAttack, $01
00094C65 E100                       	smpsAlterNote       $00
00094C67 E701                       	dc.b	smpsNoAttack, $01
00094C69 E101                       	smpsAlterNote       $01
00094C6B E701                       	dc.b	smpsNoAttack, $01
00094C6D E107                       	smpsAlterNote       $07
00094C6F E701                       	dc.b	smpsNoAttack, $01
00094C71 E10B                       	smpsAlterNote       $0B
00094C73 E701                       	dc.b	smpsNoAttack, $01
00094C75 E107                       	smpsAlterNote       $07
00094C77 E701                       	dc.b	smpsNoAttack, $01
00094C79 E104                       	smpsAlterNote       $04
00094C7B E701                       	dc.b	smpsNoAttack, $01
00094C7D E100                       	smpsAlterNote       $00
00094C7F E701                       	dc.b	smpsNoAttack, $01
00094C81 E104                       	smpsAlterNote       $04
00094C83 E701                       	dc.b	smpsNoAttack, $01
00094C85 E10A                       	smpsAlterNote       $0A
00094C87 E701                       	dc.b	smpsNoAttack, $01
00094C89 E10B                       	smpsAlterNote       $0B
00094C8B E701                       	dc.b	smpsNoAttack, $01
00094C8D E108                       	smpsAlterNote       $08
00094C8F CC0D                       	dc.b	nEb6, $0D
00094C91 E105                       	smpsAlterNote       $05
00094C93 E701                       	dc.b	smpsNoAttack, $01
00094C95 E101                       	smpsAlterNote       $01
00094C97 E701                       	dc.b	smpsNoAttack, $01
00094C99 E102                       	smpsAlterNote       $02
00094C9B E701                       	dc.b	smpsNoAttack, $01
00094C9D E108                       	smpsAlterNote       $08
00094C9F E701                       	dc.b	smpsNoAttack, $01
00094CA1 E106                       	smpsAlterNote       $06
00094CA3 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094CAF 8001                       	dc.b	nRst, $01
00094CB1 E107                       	smpsAlterNote       $07
00094CB3 CB0D                       	dc.b	nD6, $0D
00094CB5 E104                       	smpsAlterNote       $04
00094CB7 E701                       	dc.b	smpsNoAttack, $01
00094CB9 E100                       	smpsAlterNote       $00
00094CBB E701                       	dc.b	smpsNoAttack, $01
00094CBD E104                       	smpsAlterNote       $04
00094CBF E701                       	dc.b	smpsNoAttack, $01
00094CC1 E107                       	smpsAlterNote       $07
00094CC3 E701                       	dc.b	smpsNoAttack, $01
00094CC5 E10B                       	smpsAlterNote       $0B
00094CC7 E701                       	dc.b	smpsNoAttack, $01
00094CC9 E107                       	smpsAlterNote       $07
00094CCB E701                       	dc.b	smpsNoAttack, $01
00094CCD E101                       	smpsAlterNote       $01
00094CCF E701                       	dc.b	smpsNoAttack, $01
00094CD1 E100                       	smpsAlterNote       $00
00094CD3 E701                       	dc.b	smpsNoAttack, $01
00094CD5 E104                       	smpsAlterNote       $04
00094CD7 E701                       	dc.b	smpsNoAttack, $01
00094CD9 E10A                       	smpsAlterNote       $0A
00094CDB E701                       	dc.b	smpsNoAttack, $01
00094CDD E10B                       	smpsAlterNote       $0B
00094CDF 8001                       	dc.b	nRst, $01
00094CE1 E109                       	smpsAlterNote       $09
00094CE3 CE0A                       	dc.b	nF6, $0A
00094CE5 E108                       	smpsAlterNote       $08
00094CE7 CC07                       	dc.b	nEb6, $07
00094CE9 E106                       	smpsAlterNote       $06
00094CEB C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094CF7 E107                       	smpsAlterNote       $07
00094CF9 CB0D                       	dc.b	nD6, $0D
00094CFB E101                       	smpsAlterNote       $01
00094CFD E701                       	dc.b	smpsNoAttack, $01
00094CFF E100                       	smpsAlterNote       $00
00094D01 E701                       	dc.b	smpsNoAttack, $01
00094D03 E104                       	smpsAlterNote       $04
00094D05 E701                       	dc.b	smpsNoAttack, $01
00094D07 E10A                       	smpsAlterNote       $0A
00094D09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0D E107                       	smpsAlterNote       $07
00094D0F E701                       	dc.b	smpsNoAttack, $01
00094D11 E101                       	smpsAlterNote       $01
00094D13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D17 E107                       	smpsAlterNote       $07
00094D19 E701                       	dc.b	smpsNoAttack, $01
00094D1B E10A                       	smpsAlterNote       $0A
00094D1D E701                       	dc.b	smpsNoAttack, $01
00094D1F E10B                       	smpsAlterNote       $0B
00094D21 8001                       	dc.b	nRst, $01
00094D23 E108                       	smpsAlterNote       $08
00094D25 CC0D                       	dc.b	nEb6, $0D
00094D27 E102                       	smpsAlterNote       $02
00094D29 E701                       	dc.b	smpsNoAttack, $01
00094D2B E101                       	smpsAlterNote       $01
00094D2D E701                       	dc.b	smpsNoAttack, $01
00094D2F E105                       	smpsAlterNote       $05
00094D31 E701                       	dc.b	smpsNoAttack, $01
00094D33 E108                       	smpsAlterNote       $08
00094D35 8001                       	dc.b	nRst, $01
00094D37 E106                       	smpsAlterNote       $06
00094D39 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094D45 8001                       	dc.b	nRst, $01
00094D47 E107                       	smpsAlterNote       $07
00094D49 CB0D                       	dc.b	nD6, $0D
00094D4B E101                       	smpsAlterNote       $01
00094D4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D51 E104                       	smpsAlterNote       $04
00094D53 E701                       	dc.b	smpsNoAttack, $01
00094D55 E10A                       	smpsAlterNote       $0A
00094D57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D5B E104                       	smpsAlterNote       $04
00094D5D E701                       	dc.b	smpsNoAttack, $01
00094D5F E101                       	smpsAlterNote       $01
00094D61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D65 E107                       	smpsAlterNote       $07
00094D67 E701                       	dc.b	smpsNoAttack, $01
00094D69 E10B                       	smpsAlterNote       $0B
00094D6B E701                       	dc.b	smpsNoAttack, $01
00094D6D E10A                       	smpsAlterNote       $0A
00094D6F E701                       	dc.b	smpsNoAttack, $01
00094D71 E104                       	smpsAlterNote       $04
00094D73 E701                       	dc.b	smpsNoAttack, $01
00094D75 E100                       	smpsAlterNote       $00
00094D77 E701                       	dc.b	smpsNoAttack, $01
00094D79 E101                       	smpsAlterNote       $01
00094D7B 801C                       	dc.b	nRst, $1C
00094D7F E107                       	smpsAlterNote       $07
00094D81 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094D85 E603                       	smpsAlterVol        $03
00094D87 F6F1 AD                    	smpsJump            music84_Jump03
00094D8A                            
00094D8A                            ; FM3 Data
00094D8A                            music84_FM3:
00094D8A E0C0                       	smpsPan             panCenter, $00
00094D8E E109                       	smpsAlterNote       $09
00094D90 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094D94 E108                       	smpsAlterNote       $08
00094D96 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094D9A E10B                       	smpsAlterNote       $0B
00094D9C BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094DA2 E040                       	smpsPan             panRight, $00
00094DA4 E110                       	smpsAlterNote       $10
00094DA6 E6F9                       	smpsAlterVol        $F9
00094DA8 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094DAC E10F                       	smpsAlterNote       $0F
00094DAE C603                       	dc.b	nA5, $03
00094DB0 E10D                       	smpsAlterNote       $0D
00094DB2 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094DB8 E10C                       	smpsAlterNote       $0C
00094DBA C103 8001                  	dc.b	nE5, $03, nRst, $01
00094DBE E10A                       	smpsAlterNote       $0A
00094DC0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094DC4 E10F                       	smpsAlterNote       $0F
00094DC6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094DCA E0C0                       	smpsPan             panCenter, $00
00094DCE E109                       	smpsAlterNote       $09
00094DD0 E609                       	smpsAlterVol        $09
00094DD2 B603                       	dc.b	nF4, $03
00094DD4                            
00094DD4                            music84_Jump02:
00094DD4 E70A                       	dc.b	smpsNoAttack, $0A
00094DD6 E103                       	smpsAlterNote       $03
00094DD8 E701                       	dc.b	smpsNoAttack, $01
00094DDA E102                       	smpsAlterNote       $02
00094DDC E701                       	dc.b	smpsNoAttack, $01
00094DDE E106                       	smpsAlterNote       $06
00094DE0 E701                       	dc.b	smpsNoAttack, $01
00094DE2 E10C                       	smpsAlterNote       $0C
00094DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DE8 E109                       	smpsAlterNote       $09
00094DEA E701                       	dc.b	smpsNoAttack, $01
00094DEC E103                       	smpsAlterNote       $03
00094DEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DF2 E109                       	smpsAlterNote       $09
00094DF4 E701                       	dc.b	smpsNoAttack, $01
00094DF6 E10C                       	smpsAlterNote       $0C
00094DF8 E701                       	dc.b	smpsNoAttack, $01
00094DFA E10D                       	smpsAlterNote       $0D
00094DFC 8001                       	dc.b	nRst, $01
00094DFE E109                       	smpsAlterNote       $09
00094E00 B80D                       	dc.b	nG4, $0D
00094E02 E103                       	smpsAlterNote       $03
00094E04 E701                       	dc.b	smpsNoAttack, $01
00094E06 E102                       	smpsAlterNote       $02
00094E08 E701                       	dc.b	smpsNoAttack, $01
00094E0A E106                       	smpsAlterNote       $06
00094E0C E701                       	dc.b	smpsNoAttack, $01
00094E0E E10C                       	smpsAlterNote       $0C
00094E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E14 E109                       	smpsAlterNote       $09
00094E16 E701                       	dc.b	smpsNoAttack, $01
00094E18 E103                       	smpsAlterNote       $03
00094E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E1E E109                       	smpsAlterNote       $09
00094E20 E701                       	dc.b	smpsNoAttack, $01
00094E22 E10C                       	smpsAlterNote       $0C
00094E24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E28 E106                       	smpsAlterNote       $06
00094E2A E701                       	dc.b	smpsNoAttack, $01
00094E2C E102                       	smpsAlterNote       $02
00094E2E E701                       	dc.b	smpsNoAttack, $01
00094E30 E103                       	smpsAlterNote       $03
00094E32 E701                       	dc.b	smpsNoAttack, $01
00094E34 E109                       	smpsAlterNote       $09
00094E36 E701                       	dc.b	smpsNoAttack, $01
00094E38 E10D                       	smpsAlterNote       $0D
00094E3A E701                       	dc.b	smpsNoAttack, $01
00094E3C E109                       	smpsAlterNote       $09
00094E3E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094E42 E10B                       	smpsAlterNote       $0B
00094E44 BA0D                       	dc.b	nA4, $0D
00094E46 E105                       	smpsAlterNote       $05
00094E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E4C E108                       	smpsAlterNote       $08
00094E4E E701                       	dc.b	smpsNoAttack, $01
00094E50 E10E                       	smpsAlterNote       $0E
00094E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E56 E108                       	smpsAlterNote       $08
00094E58 E701                       	dc.b	smpsNoAttack, $01
00094E5A E104                       	smpsAlterNote       $04
00094E5C E701                       	dc.b	smpsNoAttack, $01
00094E5E E105                       	smpsAlterNote       $05
00094E60 E701                       	dc.b	smpsNoAttack, $01
00094E62 E10B                       	smpsAlterNote       $0B
00094E64 E701                       	dc.b	smpsNoAttack, $01
00094E66 E10F                       	smpsAlterNote       $0F
00094E68 E701                       	dc.b	smpsNoAttack, $01
00094E6A E10B                       	smpsAlterNote       $0B
00094E6C E701                       	dc.b	smpsNoAttack, $01
00094E6E E108                       	smpsAlterNote       $08
00094E70 E701                       	dc.b	smpsNoAttack, $01
00094E72 E104                       	smpsAlterNote       $04
00094E74 E701                       	dc.b	smpsNoAttack, $01
00094E76 E108                       	smpsAlterNote       $08
00094E78 E701                       	dc.b	smpsNoAttack, $01
00094E7A E10E                       	smpsAlterNote       $0E
00094E7C E701                       	dc.b	smpsNoAttack, $01
00094E7E E10F                       	smpsAlterNote       $0F
00094E80 E701                       	dc.b	smpsNoAttack, $01
00094E82 E10B                       	smpsAlterNote       $0B
00094E84 E701                       	dc.b	smpsNoAttack, $01
00094E86 E105                       	smpsAlterNote       $05
00094E88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E8C E108                       	smpsAlterNote       $08
00094E8E E701                       	dc.b	smpsNoAttack, $01
00094E90 E10E                       	smpsAlterNote       $0E
00094E92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E96 E108                       	smpsAlterNote       $08
00094E98 E701                       	dc.b	smpsNoAttack, $01
00094E9A E105                       	smpsAlterNote       $05
00094E9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EA0 E10B                       	smpsAlterNote       $0B
00094EA2 E701                       	dc.b	smpsNoAttack, $01
00094EA4 E10F                       	smpsAlterNote       $0F
00094EA6 E701                       	dc.b	smpsNoAttack, $01
00094EA8 E10E                       	smpsAlterNote       $0E
00094EAA E701                       	dc.b	smpsNoAttack, $01
00094EAC E108                       	smpsAlterNote       $08
00094EAE E701                       	dc.b	smpsNoAttack, $01
00094EB0 E104                       	smpsAlterNote       $04
00094EB2 E701                       	dc.b	smpsNoAttack, $01
00094EB4 E105                       	smpsAlterNote       $05
00094EB6 8001                       	dc.b	nRst, $01
00094EB8 E108                       	smpsAlterNote       $08
00094EBA B50A                       	dc.b	nE4, $0A
00094EBC E109                       	smpsAlterNote       $09
00094EBE B60D                       	dc.b	nF4, $0D
00094EC0 E106                       	smpsAlterNote       $06
00094EC2 E701                       	dc.b	smpsNoAttack, $01
00094EC4 E103                       	smpsAlterNote       $03
00094EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ECA E109                       	smpsAlterNote       $09
00094ECC E701                       	dc.b	smpsNoAttack, $01
00094ECE E10D                       	smpsAlterNote       $0D
00094ED0 E701                       	dc.b	smpsNoAttack, $01
00094ED2 E10C                       	smpsAlterNote       $0C
00094ED4 E701                       	dc.b	smpsNoAttack, $01
00094ED6 E106                       	smpsAlterNote       $06
00094ED8 E701                       	dc.b	smpsNoAttack, $01
00094EDA E102                       	smpsAlterNote       $02
00094EDC E701                       	dc.b	smpsNoAttack, $01
00094EDE E106                       	smpsAlterNote       $06
00094EE0 E701                       	dc.b	smpsNoAttack, $01
00094EE2 E109                       	smpsAlterNote       $09
00094EE4 E701                       	dc.b	smpsNoAttack, $01
00094EE6 E10D                       	smpsAlterNote       $0D
00094EE8 E701                       	dc.b	smpsNoAttack, $01
00094EEA E109                       	smpsAlterNote       $09
00094EEC B80D                       	dc.b	nG4, $0D
00094EEE E106                       	smpsAlterNote       $06
00094EF0 E701                       	dc.b	smpsNoAttack, $01
00094EF2 E103                       	smpsAlterNote       $03
00094EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF8 E109                       	smpsAlterNote       $09
00094EFA E701                       	dc.b	smpsNoAttack, $01
00094EFC E10D                       	smpsAlterNote       $0D
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E10C                       	smpsAlterNote       $0C
00094F02 E701                       	dc.b	smpsNoAttack, $01
00094F04 E106                       	smpsAlterNote       $06
00094F06 E701                       	dc.b	smpsNoAttack, $01
00094F08 E102                       	smpsAlterNote       $02
00094F0A E701                       	dc.b	smpsNoAttack, $01
00094F0C E106                       	smpsAlterNote       $06
00094F0E E701                       	dc.b	smpsNoAttack, $01
00094F10 E109                       	smpsAlterNote       $09
00094F12 E701                       	dc.b	smpsNoAttack, $01
00094F14 E10D                       	smpsAlterNote       $0D
00094F16 E701                       	dc.b	smpsNoAttack, $01
00094F18 E109                       	smpsAlterNote       $09
00094F1A E701                       	dc.b	smpsNoAttack, $01
00094F1C E103                       	smpsAlterNote       $03
00094F1E E701                       	dc.b	smpsNoAttack, $01
00094F20 E102                       	smpsAlterNote       $02
00094F22 E701                       	dc.b	smpsNoAttack, $01
00094F24 E106                       	smpsAlterNote       $06
00094F26 E701                       	dc.b	smpsNoAttack, $01
00094F28 E10C                       	smpsAlterNote       $0C
00094F2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F2E E109                       	smpsAlterNote       $09
00094F30 E701                       	dc.b	smpsNoAttack, $01
00094F32 E10B                       	smpsAlterNote       $0B
00094F34 BA0D                       	dc.b	nA4, $0D
00094F36 E108                       	smpsAlterNote       $08
00094F38 E701                       	dc.b	smpsNoAttack, $01
00094F3A E104                       	smpsAlterNote       $04
00094F3C E701                       	dc.b	smpsNoAttack, $01
00094F3E E108                       	smpsAlterNote       $08
00094F40 E701                       	dc.b	smpsNoAttack, $01
00094F42 E10B                       	smpsAlterNote       $0B
00094F44 E701                       	dc.b	smpsNoAttack, $01
00094F46 E10F                       	smpsAlterNote       $0F
00094F48 E701                       	dc.b	smpsNoAttack, $01
00094F4A E10B                       	smpsAlterNote       $0B
00094F4C E701                       	dc.b	smpsNoAttack, $01
00094F4E E105                       	smpsAlterNote       $05
00094F50 E701                       	dc.b	smpsNoAttack, $01
00094F52 E104                       	smpsAlterNote       $04
00094F54 E701                       	dc.b	smpsNoAttack, $01
00094F56 E108                       	smpsAlterNote       $08
00094F58 E701                       	dc.b	smpsNoAttack, $01
00094F5A E10E                       	smpsAlterNote       $0E
00094F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F60 E10B                       	smpsAlterNote       $0B
00094F62 E701                       	dc.b	smpsNoAttack, $01
00094F64 E105                       	smpsAlterNote       $05
00094F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F6A E10B                       	smpsAlterNote       $0B
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E10E                       	smpsAlterNote       $0E
00094F70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F74 E108                       	smpsAlterNote       $08
00094F76 E701                       	dc.b	smpsNoAttack, $01
00094F78 E104                       	smpsAlterNote       $04
00094F7A E701                       	dc.b	smpsNoAttack, $01
00094F7C E105                       	smpsAlterNote       $05
00094F7E E701                       	dc.b	smpsNoAttack, $01
00094F80 E10B                       	smpsAlterNote       $0B
00094F82 E701                       	dc.b	smpsNoAttack, $01
00094F84 E10F                       	smpsAlterNote       $0F
00094F86 E701                       	dc.b	smpsNoAttack, $01
00094F88 E10B                       	smpsAlterNote       $0B
00094F8A E701                       	dc.b	smpsNoAttack, $01
00094F8C E108                       	smpsAlterNote       $08
00094F8E E701                       	dc.b	smpsNoAttack, $01
00094F90 E105                       	smpsAlterNote       $05
00094F92 8001                       	dc.b	nRst, $01
00094F94 E109                       	smpsAlterNote       $09
00094F96 B609 8001                  	dc.b	nF4, $09, nRst, $01
00094F9A E108                       	smpsAlterNote       $08
00094F9C B506 8001                  	dc.b	nE4, $06, nRst, $01
00094FA0 E107                       	smpsAlterNote       $07
00094FA2 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094FA6 E108                       	smpsAlterNote       $08
00094FA8 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094FAC E109                       	smpsAlterNote       $09
00094FAE B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094FB4 E10B                       	smpsAlterNote       $0B
00094FB6 BA0D                       	dc.b	nA4, $0D
00094FB8 E108                       	smpsAlterNote       $08
00094FBA E701                       	dc.b	smpsNoAttack, $01
00094FBC E104                       	smpsAlterNote       $04
00094FBE E701                       	dc.b	smpsNoAttack, $01
00094FC0 E108                       	smpsAlterNote       $08
00094FC2 E701                       	dc.b	smpsNoAttack, $01
00094FC4 E10E                       	smpsAlterNote       $0E
00094FC6 E701                       	dc.b	smpsNoAttack, $01
00094FC8 E10F                       	smpsAlterNote       $0F
00094FCA E701                       	dc.b	smpsNoAttack, $01
00094FCC E10B                       	smpsAlterNote       $0B
00094FCE E701                       	dc.b	smpsNoAttack, $01
00094FD0 E105                       	smpsAlterNote       $05
00094FD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FD6 E108                       	smpsAlterNote       $08
00094FD8 E701                       	dc.b	smpsNoAttack, $01
00094FDA E10E                       	smpsAlterNote       $0E
00094FDC E701                       	dc.b	smpsNoAttack, $01
00094FDE E10F                       	smpsAlterNote       $0F
00094FE0 8001                       	dc.b	nRst, $01
00094FE2 E109                       	smpsAlterNote       $09
00094FE4 C20D                       	dc.b	nF5, $0D
00094FE6 E103                       	smpsAlterNote       $03
00094FE8 E701                       	dc.b	smpsNoAttack, $01
00094FEA E102                       	smpsAlterNote       $02
00094FEC E701                       	dc.b	smpsNoAttack, $01
00094FEE E106                       	smpsAlterNote       $06
00094FF0 E701                       	dc.b	smpsNoAttack, $01
00094FF2 E10C                       	smpsAlterNote       $0C
00094FF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FF8 E109                       	smpsAlterNote       $09
00094FFA E701                       	dc.b	smpsNoAttack, $01
00094FFC E103                       	smpsAlterNote       $03
00094FFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095002 E109                       	smpsAlterNote       $09
00095004 E701                       	dc.b	smpsNoAttack, $01
00095006 E10C                       	smpsAlterNote       $0C
00095008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009500C E106                       	smpsAlterNote       $06
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E102                       	smpsAlterNote       $02
00095012 E701                       	dc.b	smpsNoAttack, $01
00095014 E103                       	smpsAlterNote       $03
00095016 E701                       	dc.b	smpsNoAttack, $01
00095018 E109                       	smpsAlterNote       $09
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E10D                       	smpsAlterNote       $0D
0009501E E701                       	dc.b	smpsNoAttack, $01
00095020 E109                       	smpsAlterNote       $09
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E106                       	smpsAlterNote       $06
00095026 E701                       	dc.b	smpsNoAttack, $01
00095028 E102                       	smpsAlterNote       $02
0009502A E701                       	dc.b	smpsNoAttack, $01
0009502C E106                       	smpsAlterNote       $06
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E10C                       	smpsAlterNote       $0C
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E10D                       	smpsAlterNote       $0D
00095036 E701                       	dc.b	smpsNoAttack, $01
00095038 E109                       	smpsAlterNote       $09
0009503A E701                       	dc.b	smpsNoAttack, $01
0009503C E103                       	smpsAlterNote       $03
0009503E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095042 E106                       	smpsAlterNote       $06
00095044 E701                       	dc.b	smpsNoAttack, $01
00095046 E10C                       	smpsAlterNote       $0C
00095048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009504C E106                       	smpsAlterNote       $06
0009504E E701                       	dc.b	smpsNoAttack, $01
00095050 E103                       	smpsAlterNote       $03
00095052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095056 E109                       	smpsAlterNote       $09
00095058 E701                       	dc.b	smpsNoAttack, $01
0009505A E10D                       	smpsAlterNote       $0D
0009505C E701                       	dc.b	smpsNoAttack, $01
0009505E E10C                       	smpsAlterNote       $0C
00095060 E701                       	dc.b	smpsNoAttack, $01
00095062 E106                       	smpsAlterNote       $06
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E102                       	smpsAlterNote       $02
00095068 E701                       	dc.b	smpsNoAttack, $01
0009506A E106                       	smpsAlterNote       $06
0009506C E701                       	dc.b	smpsNoAttack, $01
0009506E E109                       	smpsAlterNote       $09
00095070 E701                       	dc.b	smpsNoAttack, $01
00095072 E10D                       	smpsAlterNote       $0D
00095074 E701                       	dc.b	smpsNoAttack, $01
00095076 E109                       	smpsAlterNote       $09
00095078 E701                       	dc.b	smpsNoAttack, $01
0009507A E103                       	smpsAlterNote       $03
0009507C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095080 E109                       	smpsAlterNote       $09
00095082 C206                       	dc.b	nF5, $06
00095084 E108                       	smpsAlterNote       $08
00095086 C10E                       	dc.b	nE5, $0E
00095088 E102                       	smpsAlterNote       $02
0009508A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009508E E108                       	smpsAlterNote       $08
00095090 E701                       	dc.b	smpsNoAttack, $01
00095092 E10B                       	smpsAlterNote       $0B
00095094 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095098 E105                       	smpsAlterNote       $05
0009509A E701                       	dc.b	smpsNoAttack, $01
0009509C E101                       	smpsAlterNote       $01
0009509E E701                       	dc.b	smpsNoAttack, $01
000950A0 E102                       	smpsAlterNote       $02
000950A2 E701                       	dc.b	smpsNoAttack, $01
000950A4 E108                       	smpsAlterNote       $08
000950A6 E701                       	dc.b	smpsNoAttack, $01
000950A8 E10C                       	smpsAlterNote       $0C
000950AA E701                       	dc.b	smpsNoAttack, $01
000950AC E107                       	smpsAlterNote       $07
000950AE BF0E                       	dc.b	nD5, $0E
000950B0 E101                       	smpsAlterNote       $01
000950B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B6 E107                       	smpsAlterNote       $07
000950B8 E701                       	dc.b	smpsNoAttack, $01
000950BA E10A                       	smpsAlterNote       $0A
000950BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950C0 E104                       	smpsAlterNote       $04
000950C2 E701                       	dc.b	smpsNoAttack, $01
000950C4 E100                       	smpsAlterNote       $00
000950C6 E701                       	dc.b	smpsNoAttack, $01
000950C8 E104                       	smpsAlterNote       $04
000950CA E701                       	dc.b	smpsNoAttack, $01
000950CC E107                       	smpsAlterNote       $07
000950CE E701                       	dc.b	smpsNoAttack, $01
000950D0 E10B                       	smpsAlterNote       $0B
000950D2 E701                       	dc.b	smpsNoAttack, $01
000950D4 E107                       	smpsAlterNote       $07
000950D6 E701                       	dc.b	smpsNoAttack, $01
000950D8 E101                       	smpsAlterNote       $01
000950DA E701                       	dc.b	smpsNoAttack, $01
000950DC E100                       	smpsAlterNote       $00
000950DE E701                       	dc.b	smpsNoAttack, $01
000950E0 E104                       	smpsAlterNote       $04
000950E2 E701                       	dc.b	smpsNoAttack, $01
000950E4 E10A                       	smpsAlterNote       $0A
000950E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950EA E107                       	smpsAlterNote       $07
000950EC E701                       	dc.b	smpsNoAttack, $01
000950EE E101                       	smpsAlterNote       $01
000950F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950F4 E107                       	smpsAlterNote       $07
000950F6 E701                       	dc.b	smpsNoAttack, $01
000950F8 E10A                       	smpsAlterNote       $0A
000950FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950FE E104                       	smpsAlterNote       $04
00095100 E701                       	dc.b	smpsNoAttack, $01
00095102 E100                       	smpsAlterNote       $00
00095104 E701                       	dc.b	smpsNoAttack, $01
00095106 E101                       	smpsAlterNote       $01
00095108 E701                       	dc.b	smpsNoAttack, $01
0009510A E107                       	smpsAlterNote       $07
0009510C E701                       	dc.b	smpsNoAttack, $01
0009510E E10B                       	smpsAlterNote       $0B
00095110 E701                       	dc.b	smpsNoAttack, $01
00095112 E107                       	smpsAlterNote       $07
00095114 E701                       	dc.b	smpsNoAttack, $01
00095116 E104                       	smpsAlterNote       $04
00095118 E701                       	dc.b	smpsNoAttack, $01
0009511A E100                       	smpsAlterNote       $00
0009511C E701                       	dc.b	smpsNoAttack, $01
0009511E E104                       	smpsAlterNote       $04
00095120 E701                       	dc.b	smpsNoAttack, $01
00095122 E10A                       	smpsAlterNote       $0A
00095124 E701                       	dc.b	smpsNoAttack, $01
00095126 E10B                       	smpsAlterNote       $0B
00095128 E701                       	dc.b	smpsNoAttack, $01
0009512A E107                       	smpsAlterNote       $07
0009512C E701                       	dc.b	smpsNoAttack, $01
0009512E E101                       	smpsAlterNote       $01
00095130 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095134 E104                       	smpsAlterNote       $04
00095136 E701                       	dc.b	smpsNoAttack, $01
00095138 E10A                       	smpsAlterNote       $0A
0009513A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009513E E104                       	smpsAlterNote       $04
00095140 E701                       	dc.b	smpsNoAttack, $01
00095142 E101                       	smpsAlterNote       $01
00095144 E701                       	dc.b	smpsNoAttack, $01
00095148 E107                       	smpsAlterNote       $07
0009514A E6FF                       	smpsAlterVol        $FF
0009514C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00095158 8004                       	dc.b	nRst, $04
0009515C E109                       	smpsAlterNote       $09
0009515E E602                       	smpsAlterVol        $02
00095160 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00095166 E108                       	smpsAlterNote       $08
00095168 B502 8001                  	dc.b	nE4, $02, nRst, $01
0009516C E109                       	smpsAlterNote       $09
0009516E B60D                       	dc.b	nF4, $0D
00095170 E106                       	smpsAlterNote       $06
00095172 E701                       	dc.b	smpsNoAttack, $01
00095174 E102                       	smpsAlterNote       $02
00095176 E701                       	dc.b	smpsNoAttack, $01
00095178 E106                       	smpsAlterNote       $06
0009517A E701                       	dc.b	smpsNoAttack, $01
0009517C E109                       	smpsAlterNote       $09
0009517E E701                       	dc.b	smpsNoAttack, $01
00095180 E10D                       	smpsAlterNote       $0D
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E109                       	smpsAlterNote       $09
00095186 E701                       	dc.b	smpsNoAttack, $01
00095188 E103                       	smpsAlterNote       $03
0009518A E701                       	dc.b	smpsNoAttack, $01
0009518C E102                       	smpsAlterNote       $02
0009518E E701                       	dc.b	smpsNoAttack, $01
00095190 E106                       	smpsAlterNote       $06
00095192 E701                       	dc.b	smpsNoAttack, $01
00095194 E10C                       	smpsAlterNote       $0C
00095196 E701                       	dc.b	smpsNoAttack, $01
00095198 E10D                       	smpsAlterNote       $0D
0009519A 8001                       	dc.b	nRst, $01
0009519C E109                       	smpsAlterNote       $09
0009519E B80D                       	dc.b	nG4, $0D
000951A0 E106                       	smpsAlterNote       $06
000951A2 E701                       	dc.b	smpsNoAttack, $01
000951A4 E102                       	smpsAlterNote       $02
000951A6 E701                       	dc.b	smpsNoAttack, $01
000951A8 E106                       	smpsAlterNote       $06
000951AA E701                       	dc.b	smpsNoAttack, $01
000951AC E10C                       	smpsAlterNote       $0C
000951AE E701                       	dc.b	smpsNoAttack, $01
000951B0 E10D                       	smpsAlterNote       $0D
000951B2 E701                       	dc.b	smpsNoAttack, $01
000951B4 E109                       	smpsAlterNote       $09
000951B6 E701                       	dc.b	smpsNoAttack, $01
000951B8 E103                       	smpsAlterNote       $03
000951BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951BE E106                       	smpsAlterNote       $06
000951C0 E701                       	dc.b	smpsNoAttack, $01
000951C2 E10C                       	smpsAlterNote       $0C
000951C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951C8 E106                       	smpsAlterNote       $06
000951CA E701                       	dc.b	smpsNoAttack, $01
000951CC E103                       	smpsAlterNote       $03
000951CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951D2 E109                       	smpsAlterNote       $09
000951D4 E701                       	dc.b	smpsNoAttack, $01
000951D6 E10D                       	smpsAlterNote       $0D
000951D8 E701                       	dc.b	smpsNoAttack, $01
000951DA E10C                       	smpsAlterNote       $0C
000951DC E701                       	dc.b	smpsNoAttack, $01
000951DE E109                       	smpsAlterNote       $09
000951E0 8001                       	dc.b	nRst, $01
000951E2 E10B                       	smpsAlterNote       $0B
000951E4 BA03                       	dc.b	nA4, $03
000951E6 E10C                       	smpsAlterNote       $0C
000951E8 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000951EC E10B                       	smpsAlterNote       $0B
000951EE BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000951F4 E10C                       	smpsAlterNote       $0C
000951F6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000951FA E10B                       	smpsAlterNote       $0B
000951FC C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00095202 E10C                       	smpsAlterNote       $0C
00095204 D303                       	dc.b	nBb6, $03
00095206 E10B                       	smpsAlterNote       $0B
00095208 D20D                       	dc.b	nA6, $0D
0009520A E108                       	smpsAlterNote       $08
0009520C E701                       	dc.b	smpsNoAttack, $01
0009520E E104                       	smpsAlterNote       $04
00095210 E701                       	dc.b	smpsNoAttack, $01
00095212 E105                       	smpsAlterNote       $05
00095214 E701                       	dc.b	smpsNoAttack, $01
00095216 E10B                       	smpsAlterNote       $0B
00095218 E701                       	dc.b	smpsNoAttack, $01
0009521A E10F                       	smpsAlterNote       $0F
0009521C E701                       	dc.b	smpsNoAttack, $01
0009521E E10B                       	smpsAlterNote       $0B
00095220 E701                       	dc.b	smpsNoAttack, $01
00095222 E108                       	smpsAlterNote       $08
00095224 E701                       	dc.b	smpsNoAttack, $01
00095226 E104                       	smpsAlterNote       $04
00095228 E701                       	dc.b	smpsNoAttack, $01
0009522A E108                       	smpsAlterNote       $08
0009522C E701                       	dc.b	smpsNoAttack, $01
0009522E E10E                       	smpsAlterNote       $0E
00095230 E701                       	dc.b	smpsNoAttack, $01
00095232 E10F                       	smpsAlterNote       $0F
00095234 E701                       	dc.b	smpsNoAttack, $01
00095236 E10B                       	smpsAlterNote       $0B
00095238 E701                       	dc.b	smpsNoAttack, $01
0009523A E105                       	smpsAlterNote       $05
0009523C E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00095242 E109                       	smpsAlterNote       $09
00095244 CE07                       	dc.b	nF6, $07
00095246 E108                       	smpsAlterNote       $08
00095248 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009524C E109                       	smpsAlterNote       $09
0009524E CE03 8001                  	dc.b	nF6, $03, nRst, $01
00095252 E108                       	smpsAlterNote       $08
00095254 CC0D                       	dc.b	nEb6, $0D
00095256 E102                       	smpsAlterNote       $02
00095258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009525C E108                       	smpsAlterNote       $08
0009525E E701                       	dc.b	smpsNoAttack, $01
00095260 E10B                       	smpsAlterNote       $0B
00095262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095266 E105                       	smpsAlterNote       $05
00095268 E701                       	dc.b	smpsNoAttack, $01
0009526A E101                       	smpsAlterNote       $01
0009526C E701                       	dc.b	smpsNoAttack, $01
0009526E E102                       	smpsAlterNote       $02
00095270 E701                       	dc.b	smpsNoAttack, $01
00095272 E108                       	smpsAlterNote       $08
00095274 E701                       	dc.b	smpsNoAttack, $01
00095276 E10C                       	smpsAlterNote       $0C
00095278 E701                       	dc.b	smpsNoAttack, $01
0009527A E108                       	smpsAlterNote       $08
0009527C E701                       	dc.b	smpsNoAttack, $01
0009527E E105                       	smpsAlterNote       $05
00095280 E701                       	dc.b	smpsNoAttack, $01
00095282 E101                       	smpsAlterNote       $01
00095284 E701                       	dc.b	smpsNoAttack, $01
00095286 E105                       	smpsAlterNote       $05
00095288 E701                       	dc.b	smpsNoAttack, $01
0009528A E10B                       	smpsAlterNote       $0B
0009528C E701                       	dc.b	smpsNoAttack, $01
0009528E E10C                       	smpsAlterNote       $0C
00095290 E701                       	dc.b	smpsNoAttack, $01
00095292 E108                       	smpsAlterNote       $08
00095294 E701                       	dc.b	smpsNoAttack, $01
00095296 E107                       	smpsAlterNote       $07
00095298 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000952A2 E10B                       	smpsAlterNote       $0B
000952A4 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000952AE E109                       	smpsAlterNote       $09
000952B0 C203                       	dc.b	nF5, $03
000952B2 E108                       	smpsAlterNote       $08
000952B4 C103 8001                  	dc.b	nE5, $03, nRst, $01
000952B8 E109                       	smpsAlterNote       $09
000952BA C20D                       	dc.b	nF5, $0D
000952BC E108                       	smpsAlterNote       $08
000952BE C10E                       	dc.b	nE5, $0E
000952C0 E107                       	smpsAlterNote       $07
000952C2 BF0D                       	dc.b	nD5, $0D
000952C4 E104                       	smpsAlterNote       $04
000952C6 E701                       	dc.b	smpsNoAttack, $01
000952C8 E100                       	smpsAlterNote       $00
000952CA E701                       	dc.b	smpsNoAttack, $01
000952CC E104                       	smpsAlterNote       $04
000952CE E701                       	dc.b	smpsNoAttack, $01
000952D0 E107                       	smpsAlterNote       $07
000952D2 E701                       	dc.b	smpsNoAttack, $01
000952D4 E10B                       	smpsAlterNote       $0B
000952D6 E701                       	dc.b	smpsNoAttack, $01
000952D8 E107                       	smpsAlterNote       $07
000952DA E701                       	dc.b	smpsNoAttack, $01
000952DC E101                       	smpsAlterNote       $01
000952DE E701                       	dc.b	smpsNoAttack, $01
000952E0 E100                       	smpsAlterNote       $00
000952E2 E701                       	dc.b	smpsNoAttack, $01
000952E4 E104                       	smpsAlterNote       $04
000952E6 E701                       	dc.b	smpsNoAttack, $01
000952E8 E10A                       	smpsAlterNote       $0A
000952EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952EE E107                       	smpsAlterNote       $07
000952F0 E701                       	dc.b	smpsNoAttack, $01
000952F2 E101                       	smpsAlterNote       $01
000952F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952F8 E107                       	smpsAlterNote       $07
000952FA E701                       	dc.b	smpsNoAttack, $01
000952FC E10A                       	smpsAlterNote       $0A
000952FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095302 E104                       	smpsAlterNote       $04
00095304 E701                       	dc.b	smpsNoAttack, $01
00095306 E100                       	smpsAlterNote       $00
00095308 E701                       	dc.b	smpsNoAttack, $01
0009530A E101                       	smpsAlterNote       $01
0009530C E701                       	dc.b	smpsNoAttack, $01
0009530E E107                       	smpsAlterNote       $07
00095310 E701                       	dc.b	smpsNoAttack, $01
00095312 E10B                       	smpsAlterNote       $0B
00095314 E701                       	dc.b	smpsNoAttack, $01
00095316 E107                       	smpsAlterNote       $07
00095318 E701                       	dc.b	smpsNoAttack, $01
0009531A E104                       	smpsAlterNote       $04
0009531C E701                       	dc.b	smpsNoAttack, $01
0009531E E100                       	smpsAlterNote       $00
00095320 E701                       	dc.b	smpsNoAttack, $01
00095322 E104                       	smpsAlterNote       $04
00095324 E701                       	dc.b	smpsNoAttack, $01
00095326 E10A                       	smpsAlterNote       $0A
00095328 E701                       	dc.b	smpsNoAttack, $01
0009532A E10B                       	smpsAlterNote       $0B
0009532C E701                       	dc.b	smpsNoAttack, $01
0009532E E107                       	smpsAlterNote       $07
00095330 E701                       	dc.b	smpsNoAttack, $01
00095332 E101                       	smpsAlterNote       $01
00095334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095338 E104                       	smpsAlterNote       $04
0009533A E701                       	dc.b	smpsNoAttack, $01
0009533C E10A                       	smpsAlterNote       $0A
0009533E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095342 E104                       	smpsAlterNote       $04
00095344 E701                       	dc.b	smpsNoAttack, $01
00095346 E101                       	smpsAlterNote       $01
00095348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009534C E107                       	smpsAlterNote       $07
0009534E E701                       	dc.b	smpsNoAttack, $01
00095350 E10B                       	smpsAlterNote       $0B
00095352 E701                       	dc.b	smpsNoAttack, $01
00095354 E10A                       	smpsAlterNote       $0A
00095356 E701                       	dc.b	smpsNoAttack, $01
00095358 E104                       	smpsAlterNote       $04
0009535A E701                       	dc.b	smpsNoAttack, $01
0009535C E100                       	smpsAlterNote       $00
0009535E E701                       	dc.b	smpsNoAttack, $01
00095360 E104                       	smpsAlterNote       $04
00095362 E701                       	dc.b	smpsNoAttack, $01
00095364 E107                       	smpsAlterNote       $07
00095366 E701                       	dc.b	smpsNoAttack, $01
00095368 E10B                       	smpsAlterNote       $0B
0009536A E701                       	dc.b	smpsNoAttack, $01
0009536C E107                       	smpsAlterNote       $07
0009536E E701                       	dc.b	smpsNoAttack, $01
00095370 E101                       	smpsAlterNote       $01
00095372 E701                       	dc.b	smpsNoAttack, $01
00095374 E100                       	smpsAlterNote       $00
00095376 E701                       	dc.b	smpsNoAttack, $01
00095378 E104                       	smpsAlterNote       $04
0009537A E701                       	dc.b	smpsNoAttack, $01
0009537C E10A                       	smpsAlterNote       $0A
0009537E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095382 E107                       	smpsAlterNote       $07
00095384 E701                       	dc.b	smpsNoAttack, $01
00095386 E101                       	smpsAlterNote       $01
00095388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009538C E107                       	smpsAlterNote       $07
0009538E E701                       	dc.b	smpsNoAttack, $01
00095390 E10A                       	smpsAlterNote       $0A
00095392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095396 E104                       	smpsAlterNote       $04
00095398 E701                       	dc.b	smpsNoAttack, $01
0009539A E100                       	smpsAlterNote       $00
0009539C E701                       	dc.b	smpsNoAttack, $01
0009539E E101                       	smpsAlterNote       $01
000953A0 E701                       	dc.b	smpsNoAttack, $01
000953A2 E107                       	smpsAlterNote       $07
000953A4 E701                       	dc.b	smpsNoAttack, $01
000953A6 E10B                       	smpsAlterNote       $0B
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E107                       	smpsAlterNote       $07
000953AC E701                       	dc.b	smpsNoAttack, $01
000953AE E104                       	smpsAlterNote       $04
000953B0 E701                       	dc.b	smpsNoAttack, $01
000953B2 E100                       	smpsAlterNote       $00
000953B4 E701                       	dc.b	smpsNoAttack, $01
000953B6 E101                       	smpsAlterNote       $01
000953B8 8001                       	dc.b	nRst, $01
000953BA E109                       	smpsAlterNote       $09
000953BC C20D                       	dc.b	nF5, $0D
000953BE E106                       	smpsAlterNote       $06
000953C0 E701                       	dc.b	smpsNoAttack, $01
000953C2 E102                       	smpsAlterNote       $02
000953C4 E701                       	dc.b	smpsNoAttack, $01
000953C6 E106                       	smpsAlterNote       $06
000953C8 E701                       	dc.b	smpsNoAttack, $01
000953CA E10C                       	smpsAlterNote       $0C
000953CC E701                       	dc.b	smpsNoAttack, $01
000953CE E10D                       	smpsAlterNote       $0D
000953D0 E701                       	dc.b	smpsNoAttack, $01
000953D2 E109                       	smpsAlterNote       $09
000953D4 E701                       	dc.b	smpsNoAttack, $01
000953D6 E103                       	smpsAlterNote       $03
000953D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953DC E106                       	smpsAlterNote       $06
000953DE E701                       	dc.b	smpsNoAttack, $01
000953E0 E10C                       	smpsAlterNote       $0C
000953E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953E6 E106                       	smpsAlterNote       $06
000953E8 E701                       	dc.b	smpsNoAttack, $01
000953EA E103                       	smpsAlterNote       $03
000953EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953F0 E109                       	smpsAlterNote       $09
000953F2 E701                       	dc.b	smpsNoAttack, $01
000953F4 E10D                       	smpsAlterNote       $0D
000953F6 E701                       	dc.b	smpsNoAttack, $01
000953F8 E10C                       	smpsAlterNote       $0C
000953FA E701                       	dc.b	smpsNoAttack, $01
000953FC E109                       	smpsAlterNote       $09
000953FE 8001                       	dc.b	nRst, $01
00095400 E108                       	smpsAlterNote       $08
00095402 C10D                       	dc.b	nE5, $0D
00095404 E109                       	smpsAlterNote       $09
00095406 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009540A E108                       	smpsAlterNote       $08
0009540C C10D                       	dc.b	nE5, $0D
0009540E E102                       	smpsAlterNote       $02
00095410 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095414 E105                       	smpsAlterNote       $05
00095416 E701                       	dc.b	smpsNoAttack, $01
00095418 E108                       	smpsAlterNote       $08
0009541A 8001                       	dc.b	nRst, $01
0009541C E107                       	smpsAlterNote       $07
0009541E BF0D                       	dc.b	nD5, $0D
00095420 E108                       	smpsAlterNote       $08
00095422 C107                       	dc.b	nE5, $07
00095424 E109                       	smpsAlterNote       $09
00095426 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0009542C E10B                       	smpsAlterNote       $0B
0009542E C603                       	dc.b	nA5, $03
00095430 E10C                       	smpsAlterNote       $0C
00095432 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00095438 E10B                       	smpsAlterNote       $0B
0009543A C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095440 E109                       	smpsAlterNote       $09
00095442 D003                       	dc.b	nG6, $03
00095444 E108                       	smpsAlterNote       $08
00095446 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009544A E10B                       	smpsAlterNote       $0B
0009544C C601 8001                  	dc.b	nA5, $01, nRst, $01
00095450 E108                       	smpsAlterNote       $08
00095452 C102                       	dc.b	nE5, $02
00095456 E10C                       	smpsAlterNote       $0C
00095458 E6FB                       	smpsAlterVol        $FB
0009545A A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00095466 8001                       	dc.b	nRst, $01
00095468 E10B                       	smpsAlterNote       $0B
0009546A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095472 E107                       	smpsAlterNote       $07
00095474 A706 8001                  	dc.b	nD3, $06, nRst, $01
00095478 E10B                       	smpsAlterNote       $0B
0009547A A203                       	dc.b	nA2, $03
0009547C E109                       	smpsAlterNote       $09
0009547E AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095482 E108                       	smpsAlterNote       $08
00095484 A906                       	dc.b	nE3, $06
00095486 E107                       	smpsAlterNote       $07
00095488 A703 8001                  	dc.b	nD3, $03, nRst, $01
0009548C E106                       	smpsAlterNote       $06
0009548E A503                       	dc.b	nC3, $03
00095490 E10C                       	smpsAlterNote       $0C
00095492 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095496 E10B                       	smpsAlterNote       $0B
00095498 A203 8004                  	dc.b	nA2, $03, nRst, $04
0009549C E11B                       	smpsAlterNote       $1B
0009549E C401                       	dc.b	nG5, $01
000954A0 E1F4                       	smpsAlterNote       $F4
000954A2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000954A5 E106                       	smpsAlterNote       $06
000954A7 E701                       	dc.b	smpsNoAttack, $01
000954A9 E10F                       	smpsAlterNote       $0F
000954AB E701                       	dc.b	smpsNoAttack, $01
000954AD E1E4                       	smpsAlterNote       $E4
000954AF E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000954B2 E1F6                       	smpsAlterNote       $F6
000954B4 E701                       	dc.b	smpsNoAttack, $01
000954B6 E108                       	smpsAlterNote       $08
000954B8 E701                       	dc.b	smpsNoAttack, $01
000954BA E10B                       	smpsAlterNote       $0B
000954BC E706                       	dc.b	smpsNoAttack, $06
000954BE E105                       	smpsAlterNote       $05
000954C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C4 E108                       	smpsAlterNote       $08
000954C6 E701                       	dc.b	smpsNoAttack, $01
000954C8 E10E                       	smpsAlterNote       $0E
000954CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954CE E108                       	smpsAlterNote       $08
000954D0 E701                       	dc.b	smpsNoAttack, $01
000954D2 E105                       	smpsAlterNote       $05
000954D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954D8 E10B                       	smpsAlterNote       $0B
000954DA E701                       	dc.b	smpsNoAttack, $01
000954DC E10F                       	smpsAlterNote       $0F
000954DE E701                       	dc.b	smpsNoAttack, $01
000954E0 E10E                       	smpsAlterNote       $0E
000954E2 E701                       	dc.b	smpsNoAttack, $01
000954E4 E108                       	smpsAlterNote       $08
000954E6 E701                       	dc.b	smpsNoAttack, $01
000954E8 E104                       	smpsAlterNote       $04
000954EA E701                       	dc.b	smpsNoAttack, $01
000954EC E108                       	smpsAlterNote       $08
000954EE E701                       	dc.b	smpsNoAttack, $01
000954F0 E10B                       	smpsAlterNote       $0B
000954F2 E701                       	dc.b	smpsNoAttack, $01
000954F4 E10F                       	smpsAlterNote       $0F
000954F6 E701                       	dc.b	smpsNoAttack, $01
000954F8 E10B                       	smpsAlterNote       $0B
000954FA E701                       	dc.b	smpsNoAttack, $01
000954FC E105                       	smpsAlterNote       $05
000954FE E701                       	dc.b	smpsNoAttack, $01
00095500 E104                       	smpsAlterNote       $04
00095502 E701                       	dc.b	smpsNoAttack, $01
00095504 E108                       	smpsAlterNote       $08
00095506 E701                       	dc.b	smpsNoAttack, $01
00095508 E10E                       	smpsAlterNote       $0E
0009550A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009550E E10B                       	smpsAlterNote       $0B
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E105                       	smpsAlterNote       $05
00095514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095518 E10B                       	smpsAlterNote       $0B
0009551A E701                       	dc.b	smpsNoAttack, $01
0009551C E10E                       	smpsAlterNote       $0E
0009551E E701                       	dc.b	smpsNoAttack, $01
00095520 E10F                       	smpsAlterNote       $0F
00095522 8001                       	dc.b	nRst, $01
00095524 E109                       	smpsAlterNote       $09
00095526 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009552C E108                       	smpsAlterNote       $08
0009552E C101 8001                  	dc.b	nE5, $01, nRst, $01
00095532 E109                       	smpsAlterNote       $09
00095534 C202                       	dc.b	nF5, $02
00095536 E108                       	smpsAlterNote       $08
00095538 C102                       	dc.b	nE5, $02
0009553A E107                       	smpsAlterNote       $07
0009553C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095540 E108                       	smpsAlterNote       $08
00095542 C101 8001                  	dc.b	nE5, $01, nRst, $01
00095546 E107                       	smpsAlterNote       $07
00095548 BF02                       	dc.b	nD5, $02
0009554A E106                       	smpsAlterNote       $06
0009554C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095550 E107                       	smpsAlterNote       $07
00095552 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00095556 E106                       	smpsAlterNote       $06
00095558 BD02                       	dc.b	nC5, $02
0009555A E10C                       	smpsAlterNote       $0C
0009555C BB02                       	dc.b	nBb4, $02
0009555E E106                       	smpsAlterNote       $06
00095560 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095564 E10C                       	smpsAlterNote       $0C
00095566 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009556A E10B                       	smpsAlterNote       $0B
0009556C BA02                       	dc.b	nA4, $02
0009556E E10C                       	smpsAlterNote       $0C
00095570 BB02                       	dc.b	nBb4, $02
00095572 E10B                       	smpsAlterNote       $0B
00095574 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009557E E108                       	smpsAlterNote       $08
00095580 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00095588 E107                       	smpsAlterNote       $07
0009558A BE02                       	dc.b	nCs5, $02
0009558C E10B                       	smpsAlterNote       $0B
0009558E BA02                       	dc.b	nA4, $02
00095590 E109                       	smpsAlterNote       $09
00095592 B802 8001                  	dc.b	nG4, $02, nRst, $01
00095596 E108                       	smpsAlterNote       $08
00095598 B501 8001                  	dc.b	nE4, $01, nRst, $01
0009559C E10B                       	smpsAlterNote       $0B
0009559E AE02                       	dc.b	nA3, $02
000955A0 E10C                       	smpsAlterNote       $0C
000955A2 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000955AE E10B                       	smpsAlterNote       $0B
000955B0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000955B8 E107                       	smpsAlterNote       $07
000955BA A706 8001                  	dc.b	nD3, $06, nRst, $01
000955BE E10B                       	smpsAlterNote       $0B
000955C0 A203                       	dc.b	nA2, $03
000955C2 E109                       	smpsAlterNote       $09
000955C4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000955C8 E108                       	smpsAlterNote       $08
000955CA A906 8001                  	dc.b	nE3, $06, nRst, $01
000955CE E107                       	smpsAlterNote       $07
000955D0 A702 8001                  	dc.b	nD3, $02, nRst, $01
000955D4 E106                       	smpsAlterNote       $06
000955D6 A503                       	dc.b	nC3, $03
000955D8 E10C                       	smpsAlterNote       $0C
000955DA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000955E0 E107                       	smpsAlterNote       $07
000955E2 B20D                       	dc.b	nCs4, $0D
000955E4 E104                       	smpsAlterNote       $04
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E100                       	smpsAlterNote       $00
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E104                       	smpsAlterNote       $04
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E10A                       	smpsAlterNote       $0A
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E10B                       	smpsAlterNote       $0B
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E107                       	smpsAlterNote       $07
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E101                       	smpsAlterNote       $01
000955FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095602 E104                       	smpsAlterNote       $04
00095604 E701                       	dc.b	smpsNoAttack, $01
00095606 E10A                       	smpsAlterNote       $0A
00095608 E701                       	dc.b	smpsNoAttack, $01
0009560A E10B                       	smpsAlterNote       $0B
0009560C 8001                       	dc.b	nRst, $01
0009560E E107                       	smpsAlterNote       $07
00095610 B30D                       	dc.b	nD4, $0D
00095612 E104                       	smpsAlterNote       $04
00095614 E701                       	dc.b	smpsNoAttack, $01
00095616 E100                       	smpsAlterNote       $00
00095618 E701                       	dc.b	smpsNoAttack, $01
0009561A E104                       	smpsAlterNote       $04
0009561C E701                       	dc.b	smpsNoAttack, $01
0009561E E10A                       	smpsAlterNote       $0A
00095620 E701                       	dc.b	smpsNoAttack, $01
00095622 E10B                       	smpsAlterNote       $0B
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E107                       	smpsAlterNote       $07
00095628 E701                       	dc.b	smpsNoAttack, $01
0009562A E101                       	smpsAlterNote       $01
0009562C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095630 E104                       	smpsAlterNote       $04
00095632 E701                       	dc.b	smpsNoAttack, $01
00095634 E10A                       	smpsAlterNote       $0A
00095636 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009563A E104                       	smpsAlterNote       $04
0009563C E701                       	dc.b	smpsNoAttack, $01
0009563E E101                       	smpsAlterNote       $01
00095640 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095644 E107                       	smpsAlterNote       $07
00095646 E701                       	dc.b	smpsNoAttack, $01
00095648 E10B                       	smpsAlterNote       $0B
0009564A E701                       	dc.b	smpsNoAttack, $01
0009564C E10A                       	smpsAlterNote       $0A
0009564E E701                       	dc.b	smpsNoAttack, $01
00095650 E107                       	smpsAlterNote       $07
00095652 8001                       	dc.b	nRst, $01
00095654 E108                       	smpsAlterNote       $08
00095656 B50D                       	dc.b	nE4, $0D
00095658 E102                       	smpsAlterNote       $02
0009565A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009565E E105                       	smpsAlterNote       $05
00095660 E701                       	dc.b	smpsNoAttack, $01
00095662 E10B                       	smpsAlterNote       $0B
00095664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095668 E105                       	smpsAlterNote       $05
0009566A E701                       	dc.b	smpsNoAttack, $01
0009566C E102                       	smpsAlterNote       $02
0009566E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095672 E108                       	smpsAlterNote       $08
00095674 E701                       	dc.b	smpsNoAttack, $01
00095676 E10C                       	smpsAlterNote       $0C
00095678 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009567C E107                       	smpsAlterNote       $07
0009567E B30D                       	dc.b	nD4, $0D
00095680 E101                       	smpsAlterNote       $01
00095682 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095686 E104                       	smpsAlterNote       $04
00095688 E701                       	dc.b	smpsNoAttack, $01
0009568A E10A                       	smpsAlterNote       $0A
0009568C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095690 E104                       	smpsAlterNote       $04
00095692 E701                       	dc.b	smpsNoAttack, $01
00095694 E101                       	smpsAlterNote       $01
00095696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009569A E107                       	smpsAlterNote       $07
0009569C E701                       	dc.b	smpsNoAttack, $01
0009569E E10B                       	smpsAlterNote       $0B
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E10A                       	smpsAlterNote       $0A
000956A4 E701                       	dc.b	smpsNoAttack, $01
000956A6 E104                       	smpsAlterNote       $04
000956A8 E701                       	dc.b	smpsNoAttack, $01
000956AA E100                       	smpsAlterNote       $00
000956AC E701                       	dc.b	smpsNoAttack, $01
000956AE E104                       	smpsAlterNote       $04
000956B0 E701                       	dc.b	smpsNoAttack, $01
000956B2 E107                       	smpsAlterNote       $07
000956B4 E701                       	dc.b	smpsNoAttack, $01
000956B6 E10B                       	smpsAlterNote       $0B
000956B8 E701                       	dc.b	smpsNoAttack, $01
000956BA E107                       	smpsAlterNote       $07
000956BC E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000956C0 E101                       	smpsAlterNote       $01
000956C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956C6 E107                       	smpsAlterNote       $07
000956C8 E701                       	dc.b	smpsNoAttack, $01
000956CA E10A                       	smpsAlterNote       $0A
000956CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956D0 E104                       	smpsAlterNote       $04
000956D2 E701                       	dc.b	smpsNoAttack, $01
000956D4 E100                       	smpsAlterNote       $00
000956D6 E701                       	dc.b	smpsNoAttack, $01
000956D8 E101                       	smpsAlterNote       $01
000956DA E701                       	dc.b	smpsNoAttack, $01
000956DC E107                       	smpsAlterNote       $07
000956DE E701                       	dc.b	smpsNoAttack, $01
000956E0 E10B                       	smpsAlterNote       $0B
000956E2 E701                       	dc.b	smpsNoAttack, $01
000956E4 E107                       	smpsAlterNote       $07
000956E6 B30E                       	dc.b	nD4, $0E
000956E8 E101                       	smpsAlterNote       $01
000956EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EE E107                       	smpsAlterNote       $07
000956F0 E701                       	dc.b	smpsNoAttack, $01
000956F2 E10A                       	smpsAlterNote       $0A
000956F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F8 E104                       	smpsAlterNote       $04
000956FA E701                       	dc.b	smpsNoAttack, $01
000956FC E100                       	smpsAlterNote       $00
000956FE E701                       	dc.b	smpsNoAttack, $01
00095700 E101                       	smpsAlterNote       $01
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E107                       	smpsAlterNote       $07
00095706 E701                       	dc.b	smpsNoAttack, $01
00095708 E10B                       	smpsAlterNote       $0B
0009570A E701                       	dc.b	smpsNoAttack, $01
0009570C E107                       	smpsAlterNote       $07
0009570E E701                       	dc.b	smpsNoAttack, $01
00095710 E104                       	smpsAlterNote       $04
00095712 E701                       	dc.b	smpsNoAttack, $01
00095714 E100                       	smpsAlterNote       $00
00095716 E701                       	dc.b	smpsNoAttack, $01
00095718 E104                       	smpsAlterNote       $04
0009571A E701                       	dc.b	smpsNoAttack, $01
0009571C E10A                       	smpsAlterNote       $0A
0009571E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095722 E107                       	smpsAlterNote       $07
00095724 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00095728 E104                       	smpsAlterNote       $04
0009572A E701                       	dc.b	smpsNoAttack, $01
0009572C E100                       	smpsAlterNote       $00
0009572E E701                       	dc.b	smpsNoAttack, $01
00095730 E101                       	smpsAlterNote       $01
00095732 E701                       	dc.b	smpsNoAttack, $01
00095734 E107                       	smpsAlterNote       $07
00095736 E701                       	dc.b	smpsNoAttack, $01
00095738 E10B                       	smpsAlterNote       $0B
0009573A E701                       	dc.b	smpsNoAttack, $01
0009573C E107                       	smpsAlterNote       $07
0009573E E701                       	dc.b	smpsNoAttack, $01
00095740 E104                       	smpsAlterNote       $04
00095742 E701                       	dc.b	smpsNoAttack, $01
00095744 E100                       	smpsAlterNote       $00
00095746 E701                       	dc.b	smpsNoAttack, $01
00095748 E104                       	smpsAlterNote       $04
0009574A E701                       	dc.b	smpsNoAttack, $01
0009574C E10A                       	smpsAlterNote       $0A
0009574E E701                       	dc.b	smpsNoAttack, $01
00095750 E10B                       	smpsAlterNote       $0B
00095752 E701                       	dc.b	smpsNoAttack, $01
00095756 E6FF                       	smpsAlterVol        $FF
00095758 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00095764 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0009576C E109                       	smpsAlterNote       $09
0009576E E601                       	smpsAlterVol        $01
00095770 B60D                       	dc.b	nF4, $0D
00095772 E106                       	smpsAlterNote       $06
00095774 E701                       	dc.b	smpsNoAttack, $01
00095776 E102                       	smpsAlterNote       $02
00095778 E701                       	dc.b	smpsNoAttack, $01
0009577A E106                       	smpsAlterNote       $06
0009577C E701                       	dc.b	smpsNoAttack, $01
0009577E E109                       	smpsAlterNote       $09
00095780 E701                       	dc.b	smpsNoAttack, $01
00095782 E10D                       	smpsAlterNote       $0D
00095784 E701                       	dc.b	smpsNoAttack, $01
00095786 E109                       	smpsAlterNote       $09
00095788 E701                       	dc.b	smpsNoAttack, $01
0009578A E103                       	smpsAlterNote       $03
0009578C E701                       	dc.b	smpsNoAttack, $01
0009578E E102                       	smpsAlterNote       $02
00095790 E701                       	dc.b	smpsNoAttack, $01
00095792 E106                       	smpsAlterNote       $06
00095794 E701                       	dc.b	smpsNoAttack, $01
00095796 E10C                       	smpsAlterNote       $0C
00095798 E701                       	dc.b	smpsNoAttack, $01
0009579A E10D                       	smpsAlterNote       $0D
0009579C 8001                       	dc.b	nRst, $01
0009579E E109                       	smpsAlterNote       $09
000957A0 B80D                       	dc.b	nG4, $0D
000957A2 E106                       	smpsAlterNote       $06
000957A4 E701                       	dc.b	smpsNoAttack, $01
000957A6 E102                       	smpsAlterNote       $02
000957A8 E701                       	dc.b	smpsNoAttack, $01
000957AA E106                       	smpsAlterNote       $06
000957AC E701                       	dc.b	smpsNoAttack, $01
000957AE E109                       	smpsAlterNote       $09
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E10D                       	smpsAlterNote       $0D
000957B4 E701                       	dc.b	smpsNoAttack, $01
000957B6 E109                       	smpsAlterNote       $09
000957B8 E701                       	dc.b	smpsNoAttack, $01
000957BA E103                       	smpsAlterNote       $03
000957BC E701                       	dc.b	smpsNoAttack, $01
000957BE E102                       	smpsAlterNote       $02
000957C0 E701                       	dc.b	smpsNoAttack, $01
000957C2 E106                       	smpsAlterNote       $06
000957C4 E701                       	dc.b	smpsNoAttack, $01
000957C6 E10C                       	smpsAlterNote       $0C
000957C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957CC E106                       	smpsAlterNote       $06
000957CE E701                       	dc.b	smpsNoAttack, $01
000957D0 E103                       	smpsAlterNote       $03
000957D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957D6 E109                       	smpsAlterNote       $09
000957D8 E701                       	dc.b	smpsNoAttack, $01
000957DA E10D                       	smpsAlterNote       $0D
000957DC E701                       	dc.b	smpsNoAttack, $01
000957DE E10C                       	smpsAlterNote       $0C
000957E0 E701                       	dc.b	smpsNoAttack, $01
000957E2 E109                       	smpsAlterNote       $09
000957E4 8001                       	dc.b	nRst, $01
000957E6 E10B                       	smpsAlterNote       $0B
000957E8 BA0D                       	dc.b	nA4, $0D
000957EA E105                       	smpsAlterNote       $05
000957EC E701                       	dc.b	smpsNoAttack, $01
000957EE E104                       	smpsAlterNote       $04
000957F0 E701                       	dc.b	smpsNoAttack, $01
000957F2 E108                       	smpsAlterNote       $08
000957F4 E701                       	dc.b	smpsNoAttack, $01
000957F6 E10E                       	smpsAlterNote       $0E
000957F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957FC E10B                       	smpsAlterNote       $0B
000957FE E701                       	dc.b	smpsNoAttack, $01
00095800 E105                       	smpsAlterNote       $05
00095802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095806 E10B                       	smpsAlterNote       $0B
00095808 E701                       	dc.b	smpsNoAttack, $01
0009580A E10E                       	smpsAlterNote       $0E
0009580C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095810 E108                       	smpsAlterNote       $08
00095812 E701                       	dc.b	smpsNoAttack, $01
00095814 E104                       	smpsAlterNote       $04
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E105                       	smpsAlterNote       $05
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E10B                       	smpsAlterNote       $0B
0009581E E701                       	dc.b	smpsNoAttack, $01
00095820 E10F                       	smpsAlterNote       $0F
00095822 E701                       	dc.b	smpsNoAttack, $01
00095824 E10B                       	smpsAlterNote       $0B
00095826 E701                       	dc.b	smpsNoAttack, $01
00095828 E108                       	smpsAlterNote       $08
0009582A E701                       	dc.b	smpsNoAttack, $01
0009582C E104                       	smpsAlterNote       $04
0009582E E701                       	dc.b	smpsNoAttack, $01
00095830 E108                       	smpsAlterNote       $08
00095832 E701                       	dc.b	smpsNoAttack, $01
00095834 E10E                       	smpsAlterNote       $0E
00095836 E701                       	dc.b	smpsNoAttack, $01
00095838 E10F                       	smpsAlterNote       $0F
0009583A E701                       	dc.b	smpsNoAttack, $01
0009583C E10B                       	smpsAlterNote       $0B
0009583E E701                       	dc.b	smpsNoAttack, $01
00095840 E105                       	smpsAlterNote       $05
00095842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095846 E108                       	smpsAlterNote       $08
00095848 E701                       	dc.b	smpsNoAttack, $01
0009584A E10E                       	smpsAlterNote       $0E
0009584C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095850 E108                       	smpsAlterNote       $08
00095852 E701                       	dc.b	smpsNoAttack, $01
00095854 E105                       	smpsAlterNote       $05
00095856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009585A E108                       	smpsAlterNote       $08
0009585C B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095860 E109                       	smpsAlterNote       $09
00095862 B60D                       	dc.b	nF4, $0D
00095864 E103                       	smpsAlterNote       $03
00095866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009586A E106                       	smpsAlterNote       $06
0009586C E701                       	dc.b	smpsNoAttack, $01
0009586E E10C                       	smpsAlterNote       $0C
00095870 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095874 E106                       	smpsAlterNote       $06
00095876 E701                       	dc.b	smpsNoAttack, $01
00095878 E103                       	smpsAlterNote       $03
0009587A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009587E E109                       	smpsAlterNote       $09
00095880 E701                       	dc.b	smpsNoAttack, $01
00095882 E10D                       	smpsAlterNote       $0D
00095884 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095888 E109                       	smpsAlterNote       $09
0009588A B80D                       	dc.b	nG4, $0D
0009588C E103                       	smpsAlterNote       $03
0009588E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095892 E109                       	smpsAlterNote       $09
00095894 E701                       	dc.b	smpsNoAttack, $01
00095896 E10C                       	smpsAlterNote       $0C
00095898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009589C E106                       	smpsAlterNote       $06
0009589E E701                       	dc.b	smpsNoAttack, $01
000958A0 E102                       	smpsAlterNote       $02
000958A2 E701                       	dc.b	smpsNoAttack, $01
000958A4 E103                       	smpsAlterNote       $03
000958A6 E701                       	dc.b	smpsNoAttack, $01
000958A8 E109                       	smpsAlterNote       $09
000958AA E701                       	dc.b	smpsNoAttack, $01
000958AC E10D                       	smpsAlterNote       $0D
000958AE E701                       	dc.b	smpsNoAttack, $01
000958B0 E109                       	smpsAlterNote       $09
000958B2 E701                       	dc.b	smpsNoAttack, $01
000958B4 E106                       	smpsAlterNote       $06
000958B6 E701                       	dc.b	smpsNoAttack, $01
000958B8 E102                       	smpsAlterNote       $02
000958BA E701                       	dc.b	smpsNoAttack, $01
000958BC E106                       	smpsAlterNote       $06
000958BE E701                       	dc.b	smpsNoAttack, $01
000958C0 E10C                       	smpsAlterNote       $0C
000958C2 E701                       	dc.b	smpsNoAttack, $01
000958C4 E10D                       	smpsAlterNote       $0D
000958C6 E701                       	dc.b	smpsNoAttack, $01
000958C8 E109                       	smpsAlterNote       $09
000958CA E701                       	dc.b	smpsNoAttack, $01
000958CC E10B                       	smpsAlterNote       $0B
000958CE BA0D                       	dc.b	nA4, $0D
000958D0 E108                       	smpsAlterNote       $08
000958D2 E701                       	dc.b	smpsNoAttack, $01
000958D4 E105                       	smpsAlterNote       $05
000958D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958DA E10B                       	smpsAlterNote       $0B
000958DC E701                       	dc.b	smpsNoAttack, $01
000958DE E10F                       	smpsAlterNote       $0F
000958E0 E701                       	dc.b	smpsNoAttack, $01
000958E2 E10E                       	smpsAlterNote       $0E
000958E4 E701                       	dc.b	smpsNoAttack, $01
000958E6 E108                       	smpsAlterNote       $08
000958E8 E701                       	dc.b	smpsNoAttack, $01
000958EA E104                       	smpsAlterNote       $04
000958EC E701                       	dc.b	smpsNoAttack, $01
000958EE E108                       	smpsAlterNote       $08
000958F0 E701                       	dc.b	smpsNoAttack, $01
000958F2 E10B                       	smpsAlterNote       $0B
000958F4 E701                       	dc.b	smpsNoAttack, $01
000958F6 E10F                       	smpsAlterNote       $0F
000958F8 E701                       	dc.b	smpsNoAttack, $01
000958FA E10B                       	smpsAlterNote       $0B
000958FC E701                       	dc.b	smpsNoAttack, $01
000958FE E105                       	smpsAlterNote       $05
00095900 E701                       	dc.b	smpsNoAttack, $01
00095902 E104                       	smpsAlterNote       $04
00095904 E701                       	dc.b	smpsNoAttack, $01
00095906 E108                       	smpsAlterNote       $08
00095908 E701                       	dc.b	smpsNoAttack, $01
0009590A E10E                       	smpsAlterNote       $0E
0009590C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095910 E10B                       	smpsAlterNote       $0B
00095912 E701                       	dc.b	smpsNoAttack, $01
00095914 E105                       	smpsAlterNote       $05
00095916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009591A E10B                       	smpsAlterNote       $0B
0009591C E701                       	dc.b	smpsNoAttack, $01
0009591E E10E                       	smpsAlterNote       $0E
00095920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095924 E108                       	smpsAlterNote       $08
00095926 E701                       	dc.b	smpsNoAttack, $01
00095928 E105                       	smpsAlterNote       $05
0009592A 8001                       	dc.b	nRst, $01
0009592C E109                       	smpsAlterNote       $09
0009592E B60A                       	dc.b	nF4, $0A
00095930 E108                       	smpsAlterNote       $08
00095932 B507                       	dc.b	nE4, $07
00095934 E107                       	smpsAlterNote       $07
00095936 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009593A E108                       	smpsAlterNote       $08
0009593C B503                       	dc.b	nE4, $03
0009593E E109                       	smpsAlterNote       $09
00095940 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00095948 E10B                       	smpsAlterNote       $0B
0009594A BA0D                       	dc.b	nA4, $0D
0009594C E108                       	smpsAlterNote       $08
0009594E E701                       	dc.b	smpsNoAttack, $01
00095950 E104                       	smpsAlterNote       $04
00095952 E701                       	dc.b	smpsNoAttack, $01
00095954 E108                       	smpsAlterNote       $08
00095956 E701                       	dc.b	smpsNoAttack, $01
00095958 E10B                       	smpsAlterNote       $0B
0009595A E701                       	dc.b	smpsNoAttack, $01
0009595C E10F                       	smpsAlterNote       $0F
0009595E E701                       	dc.b	smpsNoAttack, $01
00095960 E10B                       	smpsAlterNote       $0B
00095962 E701                       	dc.b	smpsNoAttack, $01
00095964 E105                       	smpsAlterNote       $05
00095966 E701                       	dc.b	smpsNoAttack, $01
00095968 E104                       	smpsAlterNote       $04
0009596A E701                       	dc.b	smpsNoAttack, $01
0009596C E108                       	smpsAlterNote       $08
0009596E E701                       	dc.b	smpsNoAttack, $01
00095970 E10E                       	smpsAlterNote       $0E
00095972 E701                       	dc.b	smpsNoAttack, $01
00095974 E10F                       	smpsAlterNote       $0F
00095976 8001                       	dc.b	nRst, $01
00095978 E109                       	smpsAlterNote       $09
0009597A C20D                       	dc.b	nF5, $0D
0009597C E106                       	smpsAlterNote       $06
0009597E E701                       	dc.b	smpsNoAttack, $01
00095980 E102                       	smpsAlterNote       $02
00095982 E701                       	dc.b	smpsNoAttack, $01
00095984 E106                       	smpsAlterNote       $06
00095986 E701                       	dc.b	smpsNoAttack, $01
00095988 E109                       	smpsAlterNote       $09
0009598A E701                       	dc.b	smpsNoAttack, $01
0009598C E10D                       	smpsAlterNote       $0D
0009598E E701                       	dc.b	smpsNoAttack, $01
00095990 E109                       	smpsAlterNote       $09
00095992 E701                       	dc.b	smpsNoAttack, $01
00095994 E103                       	smpsAlterNote       $03
00095996 E701                       	dc.b	smpsNoAttack, $01
00095998 E102                       	smpsAlterNote       $02
0009599A E701                       	dc.b	smpsNoAttack, $01
0009599C E106                       	smpsAlterNote       $06
0009599E E701                       	dc.b	smpsNoAttack, $01
000959A0 E10C                       	smpsAlterNote       $0C
000959A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959A6 E109                       	smpsAlterNote       $09
000959A8 E701                       	dc.b	smpsNoAttack, $01
000959AA E103                       	smpsAlterNote       $03
000959AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959B0 E109                       	smpsAlterNote       $09
000959B2 E701                       	dc.b	smpsNoAttack, $01
000959B4 E10C                       	smpsAlterNote       $0C
000959B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959BA E106                       	smpsAlterNote       $06
000959BC E701                       	dc.b	smpsNoAttack, $01
000959BE E102                       	smpsAlterNote       $02
000959C0 E701                       	dc.b	smpsNoAttack, $01
000959C2 E103                       	smpsAlterNote       $03
000959C4 E701                       	dc.b	smpsNoAttack, $01
000959C6 E109                       	smpsAlterNote       $09
000959C8 E701                       	dc.b	smpsNoAttack, $01
000959CA E10D                       	smpsAlterNote       $0D
000959CC E701                       	dc.b	smpsNoAttack, $01
000959CE E109                       	smpsAlterNote       $09
000959D0 E701                       	dc.b	smpsNoAttack, $01
000959D2 E106                       	smpsAlterNote       $06
000959D4 E701                       	dc.b	smpsNoAttack, $01
000959D6 E102                       	smpsAlterNote       $02
000959D8 E701                       	dc.b	smpsNoAttack, $01
000959DA E106                       	smpsAlterNote       $06
000959DC E701                       	dc.b	smpsNoAttack, $01
000959DE E10C                       	smpsAlterNote       $0C
000959E0 E701                       	dc.b	smpsNoAttack, $01
000959E2 E10D                       	smpsAlterNote       $0D
000959E4 E701                       	dc.b	smpsNoAttack, $01
000959E6 E109                       	smpsAlterNote       $09
000959E8 E701                       	dc.b	smpsNoAttack, $01
000959EA E103                       	smpsAlterNote       $03
000959EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959F0 E106                       	smpsAlterNote       $06
000959F2 E701                       	dc.b	smpsNoAttack, $01
000959F4 E10C                       	smpsAlterNote       $0C
000959F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959FA E106                       	smpsAlterNote       $06
000959FC E701                       	dc.b	smpsNoAttack, $01
000959FE E103                       	smpsAlterNote       $03
00095A00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A04 E109                       	smpsAlterNote       $09
00095A06 E701                       	dc.b	smpsNoAttack, $01
00095A08 E10D                       	smpsAlterNote       $0D
00095A0A E701                       	dc.b	smpsNoAttack, $01
00095A0C E10C                       	smpsAlterNote       $0C
00095A0E E701                       	dc.b	smpsNoAttack, $01
00095A10 E106                       	smpsAlterNote       $06
00095A12 E701                       	dc.b	smpsNoAttack, $01
00095A14 E103                       	smpsAlterNote       $03
00095A16 8001                       	dc.b	nRst, $01
00095A18 E109                       	smpsAlterNote       $09
00095A1A C206 8001                  	dc.b	nF5, $06, nRst, $01
00095A20 E10C                       	smpsAlterNote       $0C
00095A22 E601                       	smpsAlterVol        $01
00095A24 BB0D                       	dc.b	nBb4, $0D
00095A26 E106                       	smpsAlterNote       $06
00095A28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A2C E109                       	smpsAlterNote       $09
00095A2E E701                       	dc.b	smpsNoAttack, $01
00095A30 E10F                       	smpsAlterNote       $0F
00095A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A36 E109                       	smpsAlterNote       $09
00095A38 E701                       	dc.b	smpsNoAttack, $01
00095A3A E106                       	smpsAlterNote       $06
00095A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A40 E10C                       	smpsAlterNote       $0C
00095A42 E701                       	dc.b	smpsNoAttack, $01
00095A44 E110                       	smpsAlterNote       $10
00095A46 E701                       	dc.b	smpsNoAttack, $01
00095A48 E10F                       	smpsAlterNote       $0F
00095A4A E701                       	dc.b	smpsNoAttack, $01
00095A4C E109                       	smpsAlterNote       $09
00095A4E E701                       	dc.b	smpsNoAttack, $01
00095A50 E105                       	smpsAlterNote       $05
00095A52 E701                       	dc.b	smpsNoAttack, $01
00095A54 E106                       	smpsAlterNote       $06
00095A56 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00095A5A E103                       	smpsAlterNote       $03
00095A5C E701                       	dc.b	smpsNoAttack, $01
00095A5E E1FF                       	smpsAlterNote       $FF
00095A60 E701                       	dc.b	smpsNoAttack, $01
00095A62 E103                       	smpsAlterNote       $03
00095A64 E701                       	dc.b	smpsNoAttack, $01
00095A66 E106                       	smpsAlterNote       $06
00095A68 E701                       	dc.b	smpsNoAttack, $01
00095A6A E10A                       	smpsAlterNote       $0A
00095A6C E701                       	dc.b	smpsNoAttack, $01
00095A6E E106                       	smpsAlterNote       $06
00095A70 E701                       	dc.b	smpsNoAttack, $01
00095A72 E100                       	smpsAlterNote       $00
00095A74 E701                       	dc.b	smpsNoAttack, $01
00095A76 E1FF                       	smpsAlterNote       $FF
00095A78 E701                       	dc.b	smpsNoAttack, $01
00095A7A E103                       	smpsAlterNote       $03
00095A7C E701                       	dc.b	smpsNoAttack, $01
00095A7E E109                       	smpsAlterNote       $09
00095A80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A84 E106                       	smpsAlterNote       $06
00095A86 E701                       	dc.b	smpsNoAttack, $01
00095A88 E100                       	smpsAlterNote       $00
00095A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A8E E107                       	smpsAlterNote       $07
00095A90 BF0E                       	dc.b	nD5, $0E
00095A92 E101                       	smpsAlterNote       $01
00095A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A98 E107                       	smpsAlterNote       $07
00095A9A E701                       	dc.b	smpsNoAttack, $01
00095A9C E10A                       	smpsAlterNote       $0A
00095A9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AA2 E104                       	smpsAlterNote       $04
00095AA4 E701                       	dc.b	smpsNoAttack, $01
00095AA6 E100                       	smpsAlterNote       $00
00095AA8 E701                       	dc.b	smpsNoAttack, $01
00095AAA E101                       	smpsAlterNote       $01
00095AAC E701                       	dc.b	smpsNoAttack, $01
00095AAE E107                       	smpsAlterNote       $07
00095AB0 E701                       	dc.b	smpsNoAttack, $01
00095AB2 E10B                       	smpsAlterNote       $0B
00095AB4 E701                       	dc.b	smpsNoAttack, $01
00095AB6 E107                       	smpsAlterNote       $07
00095AB8 E701                       	dc.b	smpsNoAttack, $01
00095ABA E104                       	smpsAlterNote       $04
00095ABC E701                       	dc.b	smpsNoAttack, $01
00095ABE E100                       	smpsAlterNote       $00
00095AC0 E701                       	dc.b	smpsNoAttack, $01
00095AC2 E101                       	smpsAlterNote       $01
00095AC4 8001                       	dc.b	nRst, $01
00095AC6 E108                       	smpsAlterNote       $08
00095AC8 C10C                       	dc.b	nE5, $0C
00095ACA E109                       	smpsAlterNote       $09
00095ACC C201 8001                  	dc.b	nF5, $01, nRst, $01
00095AD0 E10A                       	smpsAlterNote       $0A
00095AD2 8001                       	dc.b	nRst, $01
00095AD4 E109                       	smpsAlterNote       $09
00095AD6 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095ADA E106                       	smpsAlterNote       $06
00095ADC E701                       	dc.b	smpsNoAttack, $01
00095ADE E102                       	smpsAlterNote       $02
00095AE0 E701                       	dc.b	smpsNoAttack, $01
00095AE2 E103                       	smpsAlterNote       $03
00095AE4 E701                       	dc.b	smpsNoAttack, $01
00095AE6 E109                       	smpsAlterNote       $09
00095AE8 E701                       	dc.b	smpsNoAttack, $01
00095AEA E10D                       	smpsAlterNote       $0D
00095AEC E701                       	dc.b	smpsNoAttack, $01
00095AEE E109                       	smpsAlterNote       $09
00095AF0 E701                       	dc.b	smpsNoAttack, $01
00095AF2 E106                       	smpsAlterNote       $06
00095AF4 E701                       	dc.b	smpsNoAttack, $01
00095AF6 E102                       	smpsAlterNote       $02
00095AF8 E701                       	dc.b	smpsNoAttack, $01
00095AFA E106                       	smpsAlterNote       $06
00095AFC E701                       	dc.b	smpsNoAttack, $01
00095AFE E10C                       	smpsAlterNote       $0C
00095B00 E701                       	dc.b	smpsNoAttack, $01
00095B02 E10D                       	smpsAlterNote       $0D
00095B04 E701                       	dc.b	smpsNoAttack, $01
00095B06 E109                       	smpsAlterNote       $09
00095B08 C40D                       	dc.b	nG5, $0D
00095B0A E106                       	smpsAlterNote       $06
00095B0C E701                       	dc.b	smpsNoAttack, $01
00095B0E E102                       	smpsAlterNote       $02
00095B10 E701                       	dc.b	smpsNoAttack, $01
00095B12 E103                       	smpsAlterNote       $03
00095B14 E701                       	dc.b	smpsNoAttack, $01
00095B16 E109                       	smpsAlterNote       $09
00095B18 E701                       	dc.b	smpsNoAttack, $01
00095B1A E108                       	smpsAlterNote       $08
00095B1C C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095B28 E109                       	smpsAlterNote       $09
00095B2A C20D                       	dc.b	nF5, $0D
00095B2C E106                       	smpsAlterNote       $06
00095B2E E701                       	dc.b	smpsNoAttack, $01
00095B30 E102                       	smpsAlterNote       $02
00095B32 E701                       	dc.b	smpsNoAttack, $01
00095B34 E106                       	smpsAlterNote       $06
00095B36 E701                       	dc.b	smpsNoAttack, $01
00095B38 E109                       	smpsAlterNote       $09
00095B3A E701                       	dc.b	smpsNoAttack, $01
00095B3C E10D                       	smpsAlterNote       $0D
00095B3E E701                       	dc.b	smpsNoAttack, $01
00095B40 E109                       	smpsAlterNote       $09
00095B42 E701                       	dc.b	smpsNoAttack, $01
00095B44 E103                       	smpsAlterNote       $03
00095B46 E701                       	dc.b	smpsNoAttack, $01
00095B48 E102                       	smpsAlterNote       $02
00095B4A E701                       	dc.b	smpsNoAttack, $01
00095B4C E106                       	smpsAlterNote       $06
00095B4E E701                       	dc.b	smpsNoAttack, $01
00095B50 E10C                       	smpsAlterNote       $0C
00095B52 E701                       	dc.b	smpsNoAttack, $01
00095B54 E10D                       	smpsAlterNote       $0D
00095B56 8001                       	dc.b	nRst, $01
00095B58 E112                       	smpsAlterNote       $12
00095B5A C401                       	dc.b	nG5, $01
00095B5C E1EB                       	smpsAlterNote       $EB
00095B5E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095B61 E1FD                       	smpsAlterNote       $FD
00095B63 E701                       	dc.b	smpsNoAttack, $01
00095B65 E10F                       	smpsAlterNote       $0F
00095B67 E701                       	dc.b	smpsNoAttack, $01
00095B69 E118                       	smpsAlterNote       $18
00095B6B E701                       	dc.b	smpsNoAttack, $01
00095B6D E1ED                       	smpsAlterNote       $ED
00095B6F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095B72 E1FF                       	smpsAlterNote       $FF
00095B74 E701                       	dc.b	smpsNoAttack, $01
00095B76 E10B                       	smpsAlterNote       $0B
00095B78 E703                       	dc.b	smpsNoAttack, $03
00095B7A E109                       	smpsAlterNote       $09
00095B7C C407                       	dc.b	nG5, $07
00095B7E E108                       	smpsAlterNote       $08
00095B80 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095B8C E109                       	smpsAlterNote       $09
00095B8E C20D                       	dc.b	nF5, $0D
00095B90 E103                       	smpsAlterNote       $03
00095B92 E701                       	dc.b	smpsNoAttack, $01
00095B94 E102                       	smpsAlterNote       $02
00095B96 E701                       	dc.b	smpsNoAttack, $01
00095B98 E106                       	smpsAlterNote       $06
00095B9A E701                       	dc.b	smpsNoAttack, $01
00095B9C E10C                       	smpsAlterNote       $0C
00095B9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BA2 E109                       	smpsAlterNote       $09
00095BA4 E701                       	dc.b	smpsNoAttack, $01
00095BA6 E103                       	smpsAlterNote       $03
00095BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BAC E109                       	smpsAlterNote       $09
00095BAE E701                       	dc.b	smpsNoAttack, $01
00095BB0 E10C                       	smpsAlterNote       $0C
00095BB2 E701                       	dc.b	smpsNoAttack, $01
00095BB4 E10D                       	smpsAlterNote       $0D
00095BB6 8001                       	dc.b	nRst, $01
00095BB8 E10B                       	smpsAlterNote       $0B
00095BBA C609 8001                  	dc.b	nA5, $09, nRst, $01
00095BBE E109                       	smpsAlterNote       $09
00095BC0 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095BC4 E108                       	smpsAlterNote       $08
00095BC6 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095BD2 8001                       	dc.b	nRst, $01
00095BD4 E109                       	smpsAlterNote       $09
00095BD6 C20D                       	dc.b	nF5, $0D
00095BD8 E103                       	smpsAlterNote       $03
00095BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BDE E106                       	smpsAlterNote       $06
00095BE0 E701                       	dc.b	smpsNoAttack, $01
00095BE2 E10C                       	smpsAlterNote       $0C
00095BE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BE8 E106                       	smpsAlterNote       $06
00095BEA E701                       	dc.b	smpsNoAttack, $01
00095BEC E103                       	smpsAlterNote       $03
00095BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BF2 E109                       	smpsAlterNote       $09
00095BF4 E701                       	dc.b	smpsNoAttack, $01
00095BF6 E10D                       	smpsAlterNote       $0D
00095BF8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095BFE E108                       	smpsAlterNote       $08
00095C00 E6FF                       	smpsAlterVol        $FF
00095C02 A806                       	dc.b	nEb3, $06
00095C04 E10C                       	smpsAlterNote       $0C
00095C06 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095C0A E108                       	smpsAlterNote       $08
00095C0C A803                       	dc.b	nEb3, $03
00095C0E E109                       	smpsAlterNote       $09
00095C10 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095C14 E10C                       	smpsAlterNote       $0C
00095C16 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095C20 E109                       	smpsAlterNote       $09
00095C22 E602                       	smpsAlterVol        $02
00095C24 B604                       	dc.b	nF4, $04
00095C26 E602                       	smpsAlterVol        $02
00095C28 F6F1 AA                    	smpsJump            music84_Jump02
00095C2B                            
00095C2B                            ; FM4 Data
00095C2B                            music84_FM4:
00095C2D E040                       	smpsPan             panRight, $00
00095C2F 8003                       	dc.b	nRst, $03
00095C31 E10F                       	smpsAlterNote       $0F
00095C33 C603 8008                  	dc.b	nA5, $03, nRst, $08
00095C37 E10D                       	smpsAlterNote       $0D
00095C39 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095C3D E10C                       	smpsAlterNote       $0C
00095C3F C103 8004                  	dc.b	nE5, $03, nRst, $04
00095C45 E6FE                       	smpsAlterVol        $FE
00095C47 E110                       	smpsAlterNote       $10
00095C49 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095C4D E10F                       	smpsAlterNote       $0F
00095C4F C602 8001                  	dc.b	nA5, $02, nRst, $01
00095C53 E10D                       	smpsAlterNote       $0D
00095C55 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095C5E E10C                       	smpsAlterNote       $0C
00095C60 C103                       	dc.b	nE5, $03
00095C62 E10A                       	smpsAlterNote       $0A
00095C64 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095C6A 03                         	dc.b	$03
00095C6B                            
00095C6B                            music84_Jump01:
00095C6B E10B                       	smpsAlterNote       $0B
00095C6D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095C71 E10C                       	smpsAlterNote       $0C
00095C73 C102 8001                  	dc.b	nE5, $02, nRst, $01
00095C77 E10D                       	smpsAlterNote       $0D
00095C79 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095C83 E10B                       	smpsAlterNote       $0B
00095C85 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095C89 E107                       	smpsAlterNote       $07
00095C8B E701                       	dc.b	smpsNoAttack, $01
00095C8D E103                       	smpsAlterNote       $03
00095C8F E701                       	dc.b	smpsNoAttack, $01
00095C91 E104                       	smpsAlterNote       $04
00095C93 E701                       	dc.b	smpsNoAttack, $01
00095C95 E10A                       	smpsAlterNote       $0A
00095C97 E701                       	dc.b	smpsNoAttack, $01
00095C99 E10E                       	smpsAlterNote       $0E
00095C9B E701                       	dc.b	smpsNoAttack, $01
00095C9D E10A                       	smpsAlterNote       $0A
00095C9F E701                       	dc.b	smpsNoAttack, $01
00095CA1 E107                       	smpsAlterNote       $07
00095CA3 E701                       	dc.b	smpsNoAttack, $01
00095CA5 E104                       	smpsAlterNote       $04
00095CA7 8001                       	dc.b	nRst, $01
00095CA9 E110                       	smpsAlterNote       $10
00095CAB C703                       	dc.b	nBb5, $03
00095CAD E10F                       	smpsAlterNote       $0F
00095CAF C603 8001                  	dc.b	nA5, $03, nRst, $01
00095CB3 E10D                       	smpsAlterNote       $0D
00095CB5 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095CBB E10C                       	smpsAlterNote       $0C
00095CBD E701                       	dc.b	smpsNoAttack, $01
00095CBF E108                       	smpsAlterNote       $08
00095CC1 E701                       	dc.b	smpsNoAttack, $01
00095CC3 E10C                       	smpsAlterNote       $0C
00095CC5 E701                       	dc.b	smpsNoAttack, $01
00095CC7 E10F                       	smpsAlterNote       $0F
00095CC9 E701                       	dc.b	smpsNoAttack, $01
00095CCB E113                       	smpsAlterNote       $13
00095CCD E701                       	dc.b	smpsNoAttack, $01
00095CCF E10F                       	smpsAlterNote       $0F
00095CD1 E701                       	dc.b	smpsNoAttack, $01
00095CD3 E109                       	smpsAlterNote       $09
00095CD5 E701                       	dc.b	smpsNoAttack, $01
00095CD7 E108                       	smpsAlterNote       $08
00095CD9 E701                       	dc.b	smpsNoAttack, $01
00095CDB E10C                       	smpsAlterNote       $0C
00095CDD E701                       	dc.b	smpsNoAttack, $01
00095CDF E112                       	smpsAlterNote       $12
00095CE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CE5 E10C                       	smpsAlterNote       $0C
00095CE7 E701                       	dc.b	smpsNoAttack, $01
00095CE9 E109                       	smpsAlterNote       $09
00095CEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CEF E10F                       	smpsAlterNote       $0F
00095CF1 E701                       	dc.b	smpsNoAttack, $01
00095CF3 E113                       	smpsAlterNote       $13
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E112                       	smpsAlterNote       $12
00095CF9 E701                       	dc.b	smpsNoAttack, $01
00095CFB E10C                       	smpsAlterNote       $0C
00095CFD E701                       	dc.b	smpsNoAttack, $01
00095CFF E108                       	smpsAlterNote       $08
00095D01 E701                       	dc.b	smpsNoAttack, $01
00095D03 E10C                       	smpsAlterNote       $0C
00095D05 E701                       	dc.b	smpsNoAttack, $01
00095D07 E10F                       	smpsAlterNote       $0F
00095D09 E701                       	dc.b	smpsNoAttack, $01
00095D0B E113                       	smpsAlterNote       $13
00095D0D E701                       	dc.b	smpsNoAttack, $01
00095D0F E10F                       	smpsAlterNote       $0F
00095D11 E701                       	dc.b	smpsNoAttack, $01
00095D13 E109                       	smpsAlterNote       $09
00095D15 E701                       	dc.b	smpsNoAttack, $01
00095D17 E108                       	smpsAlterNote       $08
00095D19 E701                       	dc.b	smpsNoAttack, $01
00095D1B E10C                       	smpsAlterNote       $0C
00095D1D E701                       	dc.b	smpsNoAttack, $01
00095D1F E112                       	smpsAlterNote       $12
00095D21 E701                       	dc.b	smpsNoAttack, $01
00095D23 E113                       	smpsAlterNote       $13
00095D25 800F                       	dc.b	nRst, $0F
00095D27 E10B                       	smpsAlterNote       $0B
00095D29 BF03                       	dc.b	nD5, $03
00095D2B E10C                       	smpsAlterNote       $0C
00095D2D C103 8001                  	dc.b	nE5, $03, nRst, $01
00095D31 E10D                       	smpsAlterNote       $0D
00095D33 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095D3B E10B                       	smpsAlterNote       $0B
00095D3D BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095D47 E110                       	smpsAlterNote       $10
00095D49 C704                       	dc.b	nBb5, $04
00095D4B E10F                       	smpsAlterNote       $0F
00095D4D C604 8001                  	dc.b	nA5, $04, nRst, $01
00095D51 E10D                       	smpsAlterNote       $0D
00095D53 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095D59 E109                       	smpsAlterNote       $09
00095D5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D5F E10F                       	smpsAlterNote       $0F
00095D61 E701                       	dc.b	smpsNoAttack, $01
00095D63 E112                       	smpsAlterNote       $12
00095D65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D69 E10C                       	smpsAlterNote       $0C
00095D6B E701                       	dc.b	smpsNoAttack, $01
00095D6D E108                       	smpsAlterNote       $08
00095D6F E701                       	dc.b	smpsNoAttack, $01
00095D71 E109                       	smpsAlterNote       $09
00095D73 E701                       	dc.b	smpsNoAttack, $01
00095D75 E10F                       	smpsAlterNote       $0F
00095D77 E701                       	dc.b	smpsNoAttack, $01
00095D79 E113                       	smpsAlterNote       $13
00095D7B E701                       	dc.b	smpsNoAttack, $01
00095D7D E10F                       	smpsAlterNote       $0F
00095D7F E701                       	dc.b	smpsNoAttack, $01
00095D81 E10C                       	smpsAlterNote       $0C
00095D83 E701                       	dc.b	smpsNoAttack, $01
00095D85 E108                       	smpsAlterNote       $08
00095D87 E701                       	dc.b	smpsNoAttack, $01
00095D89 E10C                       	smpsAlterNote       $0C
00095D8B E701                       	dc.b	smpsNoAttack, $01
00095D8D E112                       	smpsAlterNote       $12
00095D8F E701                       	dc.b	smpsNoAttack, $01
00095D91 E113                       	smpsAlterNote       $13
00095D93 E701                       	dc.b	smpsNoAttack, $01
00095D95 E10F                       	smpsAlterNote       $0F
00095D97 E701                       	dc.b	smpsNoAttack, $01
00095D99 E109                       	smpsAlterNote       $09
00095D9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D9F E10C                       	smpsAlterNote       $0C
00095DA1 E701                       	dc.b	smpsNoAttack, $01
00095DA3 E112                       	smpsAlterNote       $12
00095DA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DA9 E10C                       	smpsAlterNote       $0C
00095DAB E701                       	dc.b	smpsNoAttack, $01
00095DAD E109                       	smpsAlterNote       $09
00095DAF E701                       	dc.b	smpsNoAttack, $01
00095DB1 E10D                       	smpsAlterNote       $0D
00095DB3 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095DB7 E10F                       	smpsAlterNote       $0F
00095DB9 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095DC3 E10D                       	smpsAlterNote       $0D
00095DC5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095DCB E10B                       	smpsAlterNote       $0B
00095DCD BF0D                       	dc.b	nD5, $0D
00095DCF E108                       	smpsAlterNote       $08
00095DD1 E701                       	dc.b	smpsNoAttack, $01
00095DD3 E104                       	smpsAlterNote       $04
00095DD5 E701                       	dc.b	smpsNoAttack, $01
00095DD7 E108                       	smpsAlterNote       $08
00095DD9 E701                       	dc.b	smpsNoAttack, $01
00095DDB E10B                       	smpsAlterNote       $0B
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E10F                       	smpsAlterNote       $0F
00095DE1 E701                       	dc.b	smpsNoAttack, $01
00095DE3 E10B                       	smpsAlterNote       $0B
00095DE5 E701                       	dc.b	smpsNoAttack, $01
00095DE7 E105                       	smpsAlterNote       $05
00095DE9 E701                       	dc.b	smpsNoAttack, $01
00095DEB E104                       	smpsAlterNote       $04
00095DED E701                       	dc.b	smpsNoAttack, $01
00095DEF E108                       	smpsAlterNote       $08
00095DF1 E701                       	dc.b	smpsNoAttack, $01
00095DF3 E10E                       	smpsAlterNote       $0E
00095DF5 E701                       	dc.b	smpsNoAttack, $01
00095DF7 E10F                       	smpsAlterNote       $0F
00095DF9 8001                       	dc.b	nRst, $01
00095DFB E10C                       	smpsAlterNote       $0C
00095DFD C101                       	dc.b	nE5, $01
00095DFF E10D                       	smpsAlterNote       $0D
00095E01 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095E07 E10F                       	smpsAlterNote       $0F
00095E09 C606 8001                  	dc.b	nA5, $06, nRst, $01
00095E0D E10C                       	smpsAlterNote       $0C
00095E0F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095E13 E10D                       	smpsAlterNote       $0D
00095E15 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095E19 E10C                       	smpsAlterNote       $0C
00095E1B CD03                       	dc.b	nE6, $03
00095E1D E10A                       	smpsAlterNote       $0A
00095E1F C903 8001                  	dc.b	nC6, $03, nRst, $01
00095E23 E10D                       	smpsAlterNote       $0D
00095E25 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095E2D E109                       	smpsAlterNote       $09
00095E2F E701                       	dc.b	smpsNoAttack, $01
00095E31 E10D                       	smpsAlterNote       $0D
00095E33 E701                       	dc.b	smpsNoAttack, $01
00095E35 E110                       	smpsAlterNote       $10
00095E37 E701                       	dc.b	smpsNoAttack, $01
00095E39 E114                       	smpsAlterNote       $14
00095E3B E701                       	dc.b	smpsNoAttack, $01
00095E3D E110                       	smpsAlterNote       $10
00095E3F E701                       	dc.b	smpsNoAttack, $01
00095E41 E10A                       	smpsAlterNote       $0A
00095E43 E701                       	dc.b	smpsNoAttack, $01
00095E45 E109                       	smpsAlterNote       $09
00095E47 E701                       	dc.b	smpsNoAttack, $01
00095E49 E10D                       	smpsAlterNote       $0D
00095E4B E701                       	dc.b	smpsNoAttack, $01
00095E4D E113                       	smpsAlterNote       $13
00095E4F E701                       	dc.b	smpsNoAttack, $01
00095E51 E114                       	smpsAlterNote       $14
00095E53 8001                       	dc.b	nRst, $01
00095E55 E10F                       	smpsAlterNote       $0F
00095E57 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095E5D E10C                       	smpsAlterNote       $0C
00095E5F E701                       	dc.b	smpsNoAttack, $01
00095E61 E108                       	smpsAlterNote       $08
00095E63 E701                       	dc.b	smpsNoAttack, $01
00095E65 E10C                       	smpsAlterNote       $0C
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E112                       	smpsAlterNote       $12
00095E6B E701                       	dc.b	smpsNoAttack, $01
00095E6D E113                       	smpsAlterNote       $13
00095E6F E701                       	dc.b	smpsNoAttack, $01
00095E71 E10F                       	smpsAlterNote       $0F
00095E73 E701                       	dc.b	smpsNoAttack, $01
00095E75 E109                       	smpsAlterNote       $09
00095E77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E7B E10C                       	smpsAlterNote       $0C
00095E7D E701                       	dc.b	smpsNoAttack, $01
00095E7F E112                       	smpsAlterNote       $12
00095E81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E85 E10C                       	smpsAlterNote       $0C
00095E87 E701                       	dc.b	smpsNoAttack, $01
00095E89 E109                       	smpsAlterNote       $09
00095E8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E8F E10F                       	smpsAlterNote       $0F
00095E91 E701                       	dc.b	smpsNoAttack, $01
00095E93 E113                       	smpsAlterNote       $13
00095E95 E701                       	dc.b	smpsNoAttack, $01
00095E97 E112                       	smpsAlterNote       $12
00095E99 E701                       	dc.b	smpsNoAttack, $01
00095E9B E10C                       	smpsAlterNote       $0C
00095E9D E701                       	dc.b	smpsNoAttack, $01
00095E9F E108                       	smpsAlterNote       $08
00095EA1 E701                       	dc.b	smpsNoAttack, $01
00095EA3 E10C                       	smpsAlterNote       $0C
00095EA5 E701                       	dc.b	smpsNoAttack, $01
00095EA7 E10F                       	smpsAlterNote       $0F
00095EA9 E701                       	dc.b	smpsNoAttack, $01
00095EAB E113                       	smpsAlterNote       $13
00095EAD E701                       	dc.b	smpsNoAttack, $01
00095EAF E10F                       	smpsAlterNote       $0F
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E109                       	smpsAlterNote       $09
00095EB5 E701                       	dc.b	smpsNoAttack, $01
00095EB7 E108                       	smpsAlterNote       $08
00095EB9 E701                       	dc.b	smpsNoAttack, $01
00095EBB E10C                       	smpsAlterNote       $0C
00095EBD E701                       	dc.b	smpsNoAttack, $01
00095EBF E112                       	smpsAlterNote       $12
00095EC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EC5 E10F                       	smpsAlterNote       $0F
00095EC7 E701                       	dc.b	smpsNoAttack, $01
00095EC9 E109                       	smpsAlterNote       $09
00095ECB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ECF E10F                       	smpsAlterNote       $0F
00095ED1 E701                       	dc.b	smpsNoAttack, $01
00095ED3 E113                       	smpsAlterNote       $13
00095ED5 E701                       	dc.b	smpsNoAttack, $01
00095ED7 E112                       	smpsAlterNote       $12
00095ED9 E701                       	dc.b	smpsNoAttack, $01
00095EDB E10C                       	smpsAlterNote       $0C
00095EDD E701                       	dc.b	smpsNoAttack, $01
00095EDF E108                       	smpsAlterNote       $08
00095EE1 E701                       	dc.b	smpsNoAttack, $01
00095EE3 E10C                       	smpsAlterNote       $0C
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E10F                       	smpsAlterNote       $0F
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E113                       	smpsAlterNote       $13
00095EED E701                       	dc.b	smpsNoAttack, $01
00095EEF E10F                       	smpsAlterNote       $0F
00095EF1 E701                       	dc.b	smpsNoAttack, $01
00095EF3 E109                       	smpsAlterNote       $09
00095EF5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095EF9 E10F                       	smpsAlterNote       $0F
00095EFB C60D                       	dc.b	nA5, $0D
00095EFD E109                       	smpsAlterNote       $09
00095EFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F03 E10C                       	smpsAlterNote       $0C
00095F05 E701                       	dc.b	smpsNoAttack, $01
00095F07 E112                       	smpsAlterNote       $12
00095F09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F0D E10C                       	smpsAlterNote       $0C
00095F0F E701                       	dc.b	smpsNoAttack, $01
00095F11 E109                       	smpsAlterNote       $09
00095F13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F17 E10F                       	smpsAlterNote       $0F
00095F19 E701                       	dc.b	smpsNoAttack, $01
00095F1B E113                       	smpsAlterNote       $13
00095F1D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095F23 E10D                       	smpsAlterNote       $0D
00095F25 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095F2D E10C                       	smpsAlterNote       $0C
00095F2F C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095F35 E6FF                       	smpsAlterVol        $FF
00095F37 E10B                       	smpsAlterNote       $0B
00095F39 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095F3D E10C                       	smpsAlterNote       $0C
00095F3F C103                       	dc.b	nE5, $03
00095F41 E10D                       	smpsAlterNote       $0D
00095F43 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095F4D E10B                       	smpsAlterNote       $0B
00095F4F BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095F53 E107                       	smpsAlterNote       $07
00095F55 E701                       	dc.b	smpsNoAttack, $01
00095F57 E104                       	smpsAlterNote       $04
00095F59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F5D E10A                       	smpsAlterNote       $0A
00095F5F E701                       	dc.b	smpsNoAttack, $01
00095F61 E10D                       	smpsAlterNote       $0D
00095F63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F67 E107                       	smpsAlterNote       $07
00095F69 E701                       	dc.b	smpsNoAttack, $01
00095F6B E104                       	smpsAlterNote       $04
00095F6D 8001                       	dc.b	nRst, $01
00095F6F E110                       	smpsAlterNote       $10
00095F71 C703                       	dc.b	nBb5, $03
00095F73 E10F                       	smpsAlterNote       $0F
00095F75 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095F79 E10D                       	smpsAlterNote       $0D
00095F7B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095F7F E10C                       	smpsAlterNote       $0C
00095F81 E701                       	dc.b	smpsNoAttack, $01
00095F83 E108                       	smpsAlterNote       $08
00095F85 E701                       	dc.b	smpsNoAttack, $01
00095F87 E109                       	smpsAlterNote       $09
00095F89 E701                       	dc.b	smpsNoAttack, $01
00095F8B E10F                       	smpsAlterNote       $0F
00095F8D E701                       	dc.b	smpsNoAttack, $01
00095F8F E113                       	smpsAlterNote       $13
00095F91 E701                       	dc.b	smpsNoAttack, $01
00095F93 E10F                       	smpsAlterNote       $0F
00095F95 E701                       	dc.b	smpsNoAttack, $01
00095F97 E10C                       	smpsAlterNote       $0C
00095F99 E701                       	dc.b	smpsNoAttack, $01
00095F9B E108                       	smpsAlterNote       $08
00095F9D E701                       	dc.b	smpsNoAttack, $01
00095F9F E10C                       	smpsAlterNote       $0C
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E112                       	smpsAlterNote       $12
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E113                       	smpsAlterNote       $13
00095FA9 E701                       	dc.b	smpsNoAttack, $01
00095FAB E10F                       	smpsAlterNote       $0F
00095FAD E701                       	dc.b	smpsNoAttack, $01
00095FAF E109                       	smpsAlterNote       $09
00095FB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FB5 E10C                       	smpsAlterNote       $0C
00095FB7 E701                       	dc.b	smpsNoAttack, $01
00095FB9 E112                       	smpsAlterNote       $12
00095FBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FBF E10C                       	smpsAlterNote       $0C
00095FC1 E701                       	dc.b	smpsNoAttack, $01
00095FC3 E109                       	smpsAlterNote       $09
00095FC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC9 E10F                       	smpsAlterNote       $0F
00095FCB E701                       	dc.b	smpsNoAttack, $01
00095FCD E113                       	smpsAlterNote       $13
00095FCF E701                       	dc.b	smpsNoAttack, $01
00095FD1 E112                       	smpsAlterNote       $12
00095FD3 E701                       	dc.b	smpsNoAttack, $01
00095FD5 E10C                       	smpsAlterNote       $0C
00095FD7 E701                       	dc.b	smpsNoAttack, $01
00095FD9 E108                       	smpsAlterNote       $08
00095FDB E701                       	dc.b	smpsNoAttack, $01
00095FDD E10C                       	smpsAlterNote       $0C
00095FDF E701                       	dc.b	smpsNoAttack, $01
00095FE1 E10F                       	smpsAlterNote       $0F
00095FE3 E701                       	dc.b	smpsNoAttack, $01
00095FE5 E113                       	smpsAlterNote       $13
00095FE7 E701                       	dc.b	smpsNoAttack, $01
00095FE9 E10F                       	smpsAlterNote       $0F
00095FEB BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095FEF E110                       	smpsAlterNote       $10
00095FF1 BB03                       	dc.b	nBb4, $03
00095FF3 E10F                       	smpsAlterNote       $0F
00095FF5 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095FF9 E10B                       	smpsAlterNote       $0B
00095FFB BF03                       	dc.b	nD5, $03
00095FFD E10C                       	smpsAlterNote       $0C
00095FFF C103 8001                  	dc.b	nE5, $03, nRst, $01
00096003 E10D                       	smpsAlterNote       $0D
00096005 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0009600F E10B                       	smpsAlterNote       $0B
00096011 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0009601D E110                       	smpsAlterNote       $10
0009601F C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096023 E10F                       	smpsAlterNote       $0F
00096025 C604                       	dc.b	nA5, $04
00096027 E10D                       	smpsAlterNote       $0D
00096029 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009602F E109                       	smpsAlterNote       $09
00096031 E701                       	dc.b	smpsNoAttack, $01
00096033 E108                       	smpsAlterNote       $08
00096035 E701                       	dc.b	smpsNoAttack, $01
00096037 E10C                       	smpsAlterNote       $0C
00096039 E701                       	dc.b	smpsNoAttack, $01
0009603B E112                       	smpsAlterNote       $12
0009603D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096041 E10F                       	smpsAlterNote       $0F
00096043 E701                       	dc.b	smpsNoAttack, $01
00096045 E109                       	smpsAlterNote       $09
00096047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009604B E10F                       	smpsAlterNote       $0F
0009604D E701                       	dc.b	smpsNoAttack, $01
0009604F E112                       	smpsAlterNote       $12
00096051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096055 E10C                       	smpsAlterNote       $0C
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E108                       	smpsAlterNote       $08
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E109                       	smpsAlterNote       $09
0009605F E701                       	dc.b	smpsNoAttack, $01
00096061 E10F                       	smpsAlterNote       $0F
00096063 E701                       	dc.b	smpsNoAttack, $01
00096065 E113                       	smpsAlterNote       $13
00096067 E701                       	dc.b	smpsNoAttack, $01
00096069 E10F                       	smpsAlterNote       $0F
0009606B E701                       	dc.b	smpsNoAttack, $01
0009606D E10C                       	smpsAlterNote       $0C
0009606F E701                       	dc.b	smpsNoAttack, $01
00096071 E108                       	smpsAlterNote       $08
00096073 E701                       	dc.b	smpsNoAttack, $01
00096075 E10C                       	smpsAlterNote       $0C
00096077 E701                       	dc.b	smpsNoAttack, $01
00096079 E112                       	smpsAlterNote       $12
0009607B E701                       	dc.b	smpsNoAttack, $01
0009607D E113                       	smpsAlterNote       $13
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E10F                       	smpsAlterNote       $0F
00096083 E701                       	dc.b	smpsNoAttack, $01
00096085 E109                       	smpsAlterNote       $09
00096087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009608B E10C                       	smpsAlterNote       $0C
0009608D E701                       	dc.b	smpsNoAttack, $01
0009608F E112                       	smpsAlterNote       $12
00096091 E701                       	dc.b	smpsNoAttack, $01
00096093 E113                       	smpsAlterNote       $13
00096095 8001                       	dc.b	nRst, $01
00096097 E10F                       	smpsAlterNote       $0F
00096099 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000960A5 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000960AD E10D                       	smpsAlterNote       $0D
000960AF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000960B5 E10B                       	smpsAlterNote       $0B
000960B7 BF0D                       	dc.b	nD5, $0D
000960B9 E108                       	smpsAlterNote       $08
000960BB E701                       	dc.b	smpsNoAttack, $01
000960BD E104                       	smpsAlterNote       $04
000960BF E701                       	dc.b	smpsNoAttack, $01
000960C1 E105                       	smpsAlterNote       $05
000960C3 E701                       	dc.b	smpsNoAttack, $01
000960C5 E10B                       	smpsAlterNote       $0B
000960C7 E701                       	dc.b	smpsNoAttack, $01
000960C9 E10F                       	smpsAlterNote       $0F
000960CB E701                       	dc.b	smpsNoAttack, $01
000960CD E10B                       	smpsAlterNote       $0B
000960CF E701                       	dc.b	smpsNoAttack, $01
000960D1 E108                       	smpsAlterNote       $08
000960D3 E701                       	dc.b	smpsNoAttack, $01
000960D5 E104                       	smpsAlterNote       $04
000960D7 E701                       	dc.b	smpsNoAttack, $01
000960D9 E108                       	smpsAlterNote       $08
000960DB E701                       	dc.b	smpsNoAttack, $01
000960DD E10E                       	smpsAlterNote       $0E
000960DF E701                       	dc.b	smpsNoAttack, $01
000960E1 E10F                       	smpsAlterNote       $0F
000960E3 E701                       	dc.b	smpsNoAttack, $01
000960E5 E10C                       	smpsAlterNote       $0C
000960E7 C101                       	dc.b	nE5, $01
000960E9 E10D                       	smpsAlterNote       $0D
000960EB C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000960F3 E10F                       	smpsAlterNote       $0F
000960F5 C607                       	dc.b	nA5, $07
000960F7 E10C                       	smpsAlterNote       $0C
000960F9 CD07                       	dc.b	nE6, $07
000960FB E10D                       	smpsAlterNote       $0D
000960FD CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096101 E10C                       	smpsAlterNote       $0C
00096103 CD03                       	dc.b	nE6, $03
00096105 E10A                       	smpsAlterNote       $0A
00096107 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009610B E10D                       	smpsAlterNote       $0D
0009610D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096113 E10A                       	smpsAlterNote       $0A
00096115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096119 E110                       	smpsAlterNote       $10
0009611B E701                       	dc.b	smpsNoAttack, $01
0009611D E114                       	smpsAlterNote       $14
0009611F E701                       	dc.b	smpsNoAttack, $01
00096121 E113                       	smpsAlterNote       $13
00096123 E701                       	dc.b	smpsNoAttack, $01
00096125 E10D                       	smpsAlterNote       $0D
00096127 E701                       	dc.b	smpsNoAttack, $01
00096129 E109                       	smpsAlterNote       $09
0009612B E701                       	dc.b	smpsNoAttack, $01
0009612D E10D                       	smpsAlterNote       $0D
0009612F E701                       	dc.b	smpsNoAttack, $01
00096131 E110                       	smpsAlterNote       $10
00096133 E701                       	dc.b	smpsNoAttack, $01
00096135 E114                       	smpsAlterNote       $14
00096137 E701                       	dc.b	smpsNoAttack, $01
00096139 E10F                       	smpsAlterNote       $0F
0009613B C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0009613F E10C                       	smpsAlterNote       $0C
00096141 E701                       	dc.b	smpsNoAttack, $01
00096143 E108                       	smpsAlterNote       $08
00096145 E701                       	dc.b	smpsNoAttack, $01
00096147 E10C                       	smpsAlterNote       $0C
00096149 E701                       	dc.b	smpsNoAttack, $01
0009614B E10F                       	smpsAlterNote       $0F
0009614D E701                       	dc.b	smpsNoAttack, $01
0009614F E113                       	smpsAlterNote       $13
00096151 E701                       	dc.b	smpsNoAttack, $01
00096153 E10F                       	smpsAlterNote       $0F
00096155 E701                       	dc.b	smpsNoAttack, $01
00096157 E109                       	smpsAlterNote       $09
00096159 E701                       	dc.b	smpsNoAttack, $01
0009615B E108                       	smpsAlterNote       $08
0009615D E701                       	dc.b	smpsNoAttack, $01
0009615F E10C                       	smpsAlterNote       $0C
00096161 E701                       	dc.b	smpsNoAttack, $01
00096163 E112                       	smpsAlterNote       $12
00096165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096169 E10F                       	smpsAlterNote       $0F
0009616B E701                       	dc.b	smpsNoAttack, $01
0009616D E109                       	smpsAlterNote       $09
0009616F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096173 E10F                       	smpsAlterNote       $0F
00096175 E701                       	dc.b	smpsNoAttack, $01
00096177 E112                       	smpsAlterNote       $12
00096179 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617D E10C                       	smpsAlterNote       $0C
0009617F E701                       	dc.b	smpsNoAttack, $01
00096181 E108                       	smpsAlterNote       $08
00096183 E701                       	dc.b	smpsNoAttack, $01
00096185 E109                       	smpsAlterNote       $09
00096187 E701                       	dc.b	smpsNoAttack, $01
00096189 E10F                       	smpsAlterNote       $0F
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E113                       	smpsAlterNote       $13
0009618F E701                       	dc.b	smpsNoAttack, $01
00096191 E10F                       	smpsAlterNote       $0F
00096193 E701                       	dc.b	smpsNoAttack, $01
00096195 E10C                       	smpsAlterNote       $0C
00096197 E701                       	dc.b	smpsNoAttack, $01
00096199 E108                       	smpsAlterNote       $08
0009619B E701                       	dc.b	smpsNoAttack, $01
0009619D E10C                       	smpsAlterNote       $0C
0009619F E701                       	dc.b	smpsNoAttack, $01
000961A1 E112                       	smpsAlterNote       $12
000961A3 E701                       	dc.b	smpsNoAttack, $01
000961A5 E113                       	smpsAlterNote       $13
000961A7 E701                       	dc.b	smpsNoAttack, $01
000961A9 E10F                       	smpsAlterNote       $0F
000961AB E701                       	dc.b	smpsNoAttack, $01
000961AD E109                       	smpsAlterNote       $09
000961AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961B3 E10C                       	smpsAlterNote       $0C
000961B5 E701                       	dc.b	smpsNoAttack, $01
000961B7 E112                       	smpsAlterNote       $12
000961B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961BD E10C                       	smpsAlterNote       $0C
000961BF E701                       	dc.b	smpsNoAttack, $01
000961C1 E109                       	smpsAlterNote       $09
000961C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961C7 E10F                       	smpsAlterNote       $0F
000961C9 E701                       	dc.b	smpsNoAttack, $01
000961CB E113                       	smpsAlterNote       $13
000961CD E701                       	dc.b	smpsNoAttack, $01
000961CF E112                       	smpsAlterNote       $12
000961D1 E701                       	dc.b	smpsNoAttack, $01
000961D3 E10C                       	smpsAlterNote       $0C
000961D5 E701                       	dc.b	smpsNoAttack, $01
000961D7 E109                       	smpsAlterNote       $09
000961D9 8001                       	dc.b	nRst, $01
000961DB E10F                       	smpsAlterNote       $0F
000961DD C60D                       	dc.b	nA5, $0D
000961DF E10C                       	smpsAlterNote       $0C
000961E1 E701                       	dc.b	smpsNoAttack, $01
000961E3 E108                       	smpsAlterNote       $08
000961E5 E701                       	dc.b	smpsNoAttack, $01
000961E7 E10C                       	smpsAlterNote       $0C
000961E9 E701                       	dc.b	smpsNoAttack, $01
000961EB E112                       	smpsAlterNote       $12
000961ED E701                       	dc.b	smpsNoAttack, $01
000961EF E113                       	smpsAlterNote       $13
000961F1 E701                       	dc.b	smpsNoAttack, $01
000961F3 E10F                       	smpsAlterNote       $0F
000961F5 E701                       	dc.b	smpsNoAttack, $01
000961F7 E109                       	smpsAlterNote       $09
000961F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961FD E10C                       	smpsAlterNote       $0C
000961FF E701                       	dc.b	smpsNoAttack, $01
00096201 E112                       	smpsAlterNote       $12
00096203 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096207 E10C                       	smpsAlterNote       $0C
00096209 E701                       	dc.b	smpsNoAttack, $01
0009620B E109                       	smpsAlterNote       $09
0009620D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096211 E10F                       	smpsAlterNote       $0F
00096213 E701                       	dc.b	smpsNoAttack, $01
00096215 E113                       	smpsAlterNote       $13
00096217 E701                       	dc.b	smpsNoAttack, $01
00096219 E112                       	smpsAlterNote       $12
0009621B E701                       	dc.b	smpsNoAttack, $01
0009621D E10C                       	smpsAlterNote       $0C
0009621F E701                       	dc.b	smpsNoAttack, $01
00096221 E108                       	smpsAlterNote       $08
00096223 E701                       	dc.b	smpsNoAttack, $01
00096225 E10C                       	smpsAlterNote       $0C
00096227 E701                       	dc.b	smpsNoAttack, $01
00096229 E10F                       	smpsAlterNote       $0F
0009622B E701                       	dc.b	smpsNoAttack, $01
0009622D E113                       	smpsAlterNote       $13
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E10F                       	smpsAlterNote       $0F
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E109                       	smpsAlterNote       $09
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E108                       	smpsAlterNote       $08
0009623B E701                       	dc.b	smpsNoAttack, $01
0009623D E10C                       	smpsAlterNote       $0C
0009623F E701                       	dc.b	smpsNoAttack, $01
00096241 E112                       	smpsAlterNote       $12
00096243 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096247 E10F                       	smpsAlterNote       $0F
00096249 E701                       	dc.b	smpsNoAttack, $01
0009624B E109                       	smpsAlterNote       $09
0009624D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096251 E10F                       	smpsAlterNote       $0F
00096253 E701                       	dc.b	smpsNoAttack, $01
00096255 E112                       	smpsAlterNote       $12
00096257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009625B E10C                       	smpsAlterNote       $0C
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E108                       	smpsAlterNote       $08
00096261 E701                       	dc.b	smpsNoAttack, $01
00096263 E10C                       	smpsAlterNote       $0C
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E10F                       	smpsAlterNote       $0F
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E113                       	smpsAlterNote       $13
0009626D E701                       	dc.b	smpsNoAttack, $01
0009626F E10F                       	smpsAlterNote       $0F
00096271 E701                       	dc.b	smpsNoAttack, $01
00096273 E109                       	smpsAlterNote       $09
00096275 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009627B E601                       	smpsAlterVol        $01
0009627D E10F                       	smpsAlterNote       $0F
0009627F C604                       	dc.b	nA5, $04
00096281 E10D                       	smpsAlterNote       $0D
00096283 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096289 E10B                       	smpsAlterNote       $0B
0009628B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00096293 E10F                       	smpsAlterNote       $0F
00096295 C604 8001                  	dc.b	nA5, $04, nRst, $01
00096299 E10D                       	smpsAlterNote       $0D
0009629B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000962A1 E10C                       	smpsAlterNote       $0C
000962A3 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000962A9 E10A                       	smpsAlterNote       $0A
000962AB C904 8001                  	dc.b	nC6, $04, nRst, $01
000962AF E110                       	smpsAlterNote       $10
000962B1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000962B5 E10F                       	smpsAlterNote       $0F
000962B7 C604                       	dc.b	nA5, $04
000962B9 E10D                       	smpsAlterNote       $0D
000962BB C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000962C7 E109                       	smpsAlterNote       $09
000962C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962CD E10F                       	smpsAlterNote       $0F
000962CF E701                       	dc.b	smpsNoAttack, $01
000962D1 E112                       	smpsAlterNote       $12
000962D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962D7 E10C                       	smpsAlterNote       $0C
000962D9 E701                       	dc.b	smpsNoAttack, $01
000962DB E108                       	smpsAlterNote       $08
000962DD E701                       	dc.b	smpsNoAttack, $01
000962DF E10C                       	smpsAlterNote       $0C
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E10F                       	smpsAlterNote       $0F
000962E5 E701                       	dc.b	smpsNoAttack, $01
000962E7 E113                       	smpsAlterNote       $13
000962E9 E701                       	dc.b	smpsNoAttack, $01
000962EB E10D                       	smpsAlterNote       $0D
000962ED C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000962F3 E10C                       	smpsAlterNote       $0C
000962F5 C10D                       	dc.b	nE5, $0D
000962F7 E109                       	smpsAlterNote       $09
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E105                       	smpsAlterNote       $05
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E106                       	smpsAlterNote       $06
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E10C                       	smpsAlterNote       $0C
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E110                       	smpsAlterNote       $10
00096309 E701                       	dc.b	smpsNoAttack, $01
0009630B E10C                       	smpsAlterNote       $0C
0009630D E701                       	dc.b	smpsNoAttack, $01
0009630F E109                       	smpsAlterNote       $09
00096311 E701                       	dc.b	smpsNoAttack, $01
00096313 E105                       	smpsAlterNote       $05
00096315 E701                       	dc.b	smpsNoAttack, $01
00096317 E109                       	smpsAlterNote       $09
00096319 E701                       	dc.b	smpsNoAttack, $01
0009631B E10F                       	smpsAlterNote       $0F
0009631D E701                       	dc.b	smpsNoAttack, $01
0009631F E110                       	smpsAlterNote       $10
00096321 E701                       	dc.b	smpsNoAttack, $01
00096323 E10C                       	smpsAlterNote       $0C
00096325 E701                       	dc.b	smpsNoAttack, $01
00096327 E106                       	smpsAlterNote       $06
00096329 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009632D E109                       	smpsAlterNote       $09
0009632F E701                       	dc.b	smpsNoAttack, $01
00096331 E10F                       	smpsAlterNote       $0F
00096333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096337 E109                       	smpsAlterNote       $09
00096339 E701                       	dc.b	smpsNoAttack, $01
0009633B E106                       	smpsAlterNote       $06
0009633D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096341 E10C                       	smpsAlterNote       $0C
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E110                       	smpsAlterNote       $10
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E10F                       	smpsAlterNote       $0F
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E109                       	smpsAlterNote       $09
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E105                       	smpsAlterNote       $05
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E109                       	smpsAlterNote       $09
00096357 E701                       	dc.b	smpsNoAttack, $01
00096359 E10C                       	smpsAlterNote       $0C
0009635B E701                       	dc.b	smpsNoAttack, $01
0009635D E110                       	smpsAlterNote       $10
0009635F E701                       	dc.b	smpsNoAttack, $01
00096361 E10C                       	smpsAlterNote       $0C
00096363 E701                       	dc.b	smpsNoAttack, $01
00096365 E106                       	smpsAlterNote       $06
00096367 E701                       	dc.b	smpsNoAttack, $01
00096369 E105                       	smpsAlterNote       $05
0009636B E701                       	dc.b	smpsNoAttack, $01
0009636D E109                       	smpsAlterNote       $09
0009636F E701                       	dc.b	smpsNoAttack, $01
00096371 E10F                       	smpsAlterNote       $0F
00096373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096377 E10C                       	smpsAlterNote       $0C
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E106                       	smpsAlterNote       $06
0009637D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096381 E10C                       	smpsAlterNote       $0C
00096383 E701                       	dc.b	smpsNoAttack, $01
00096385 E10F                       	smpsAlterNote       $0F
00096387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009638B E109                       	smpsAlterNote       $09
0009638D E701                       	dc.b	smpsNoAttack, $01
0009638F E105                       	smpsAlterNote       $05
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E106                       	smpsAlterNote       $06
00096395 E701                       	dc.b	smpsNoAttack, $01
00096397 E10C                       	smpsAlterNote       $0C
00096399 E701                       	dc.b	smpsNoAttack, $01
0009639B E110                       	smpsAlterNote       $10
0009639D E701                       	dc.b	smpsNoAttack, $01
0009639F E10C                       	smpsAlterNote       $0C
000963A1 E701                       	dc.b	smpsNoAttack, $01
000963A3 E109                       	smpsAlterNote       $09
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E105                       	smpsAlterNote       $05
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E109                       	smpsAlterNote       $09
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E10F                       	smpsAlterNote       $0F
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E110                       	smpsAlterNote       $10
000963B5 E701                       	dc.b	smpsNoAttack, $01
000963B7 E10C                       	smpsAlterNote       $0C
000963B9 E701                       	dc.b	smpsNoAttack, $01
000963BB E106                       	smpsAlterNote       $06
000963BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963C1 E109                       	smpsAlterNote       $09
000963C3 E701                       	dc.b	smpsNoAttack, $01
000963C5 E10F                       	smpsAlterNote       $0F
000963C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963CB E109                       	smpsAlterNote       $09
000963CD E701                       	dc.b	smpsNoAttack, $01
000963CF E106                       	smpsAlterNote       $06
000963D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D5 E10C                       	smpsAlterNote       $0C
000963D7 E701                       	dc.b	smpsNoAttack, $01
000963D9 E110                       	smpsAlterNote       $10
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E10F                       	smpsAlterNote       $0F
000963DF E701                       	dc.b	smpsNoAttack, $01
000963E1 E109                       	smpsAlterNote       $09
000963E3 E701                       	dc.b	smpsNoAttack, $01
000963E5 E105                       	smpsAlterNote       $05
000963E7 E701                       	dc.b	smpsNoAttack, $01
000963E9 E109                       	smpsAlterNote       $09
000963EB E701                       	dc.b	smpsNoAttack, $01
000963ED E10C                       	smpsAlterNote       $0C
000963EF E701                       	dc.b	smpsNoAttack, $01
000963F1 E110                       	smpsAlterNote       $10
000963F3 E701                       	dc.b	smpsNoAttack, $01
000963F5 E10C                       	smpsAlterNote       $0C
000963F7 E701                       	dc.b	smpsNoAttack, $01
000963F9 E106                       	smpsAlterNote       $06
000963FB E701                       	dc.b	smpsNoAttack, $01
000963FD E105                       	smpsAlterNote       $05
000963FF E701                       	dc.b	smpsNoAttack, $01
00096401 E109                       	smpsAlterNote       $09
00096403 E701                       	dc.b	smpsNoAttack, $01
00096405 E10F                       	smpsAlterNote       $0F
00096407 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009640B E109                       	smpsAlterNote       $09
0009640D E701                       	dc.b	smpsNoAttack, $01
0009640F E106                       	smpsAlterNote       $06
00096411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096415 E10C                       	smpsAlterNote       $0C
00096417 E701                       	dc.b	smpsNoAttack, $01
00096419 E110                       	smpsAlterNote       $10
0009641B E701                       	dc.b	smpsNoAttack, $01
0009641D E10F                       	smpsAlterNote       $0F
0009641F E701                       	dc.b	smpsNoAttack, $01
00096421 E109                       	smpsAlterNote       $09
00096423 E701                       	dc.b	smpsNoAttack, $01
00096425 E105                       	smpsAlterNote       $05
00096427 E701                       	dc.b	smpsNoAttack, $01
00096429 E109                       	smpsAlterNote       $09
0009642B E701                       	dc.b	smpsNoAttack, $01
0009642D E10C                       	smpsAlterNote       $0C
0009642F E701                       	dc.b	smpsNoAttack, $01
00096431 E110                       	smpsAlterNote       $10
00096433 E701                       	dc.b	smpsNoAttack, $01
00096435 E10C                       	smpsAlterNote       $0C
00096437 E701                       	dc.b	smpsNoAttack, $01
00096439 E106                       	smpsAlterNote       $06
0009643B E701                       	dc.b	smpsNoAttack, $01
0009643D E105                       	smpsAlterNote       $05
0009643F E701                       	dc.b	smpsNoAttack, $01
00096441 E109                       	smpsAlterNote       $09
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E10F                       	smpsAlterNote       $0F
00096447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644B E10C                       	smpsAlterNote       $0C
0009644D E701                       	dc.b	smpsNoAttack, $01
0009644F E106                       	smpsAlterNote       $06
00096451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096455 E10C                       	smpsAlterNote       $0C
00096457 E701                       	dc.b	smpsNoAttack, $01
00096459 E10F                       	smpsAlterNote       $0F
0009645B E701                       	dc.b	smpsNoAttack, $01
0009645D E110                       	smpsAlterNote       $10
0009645F 8001                       	dc.b	nRst, $01
00096461 E10F                       	smpsAlterNote       $0F
00096463 C604                       	dc.b	nA5, $04
00096465 E10D                       	smpsAlterNote       $0D
00096467 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009646D E10B                       	smpsAlterNote       $0B
0009646F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00096475 E10F                       	smpsAlterNote       $0F
00096477 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009647B E10D                       	smpsAlterNote       $0D
0009647D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00096483 E10C                       	smpsAlterNote       $0C
00096485 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0009648B E10A                       	smpsAlterNote       $0A
0009648D C904                       	dc.b	nC6, $04
0009648F E110                       	smpsAlterNote       $10
00096491 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096495 E10F                       	smpsAlterNote       $0F
00096497 C604                       	dc.b	nA5, $04
00096499 E10D                       	smpsAlterNote       $0D
0009649B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000964A7 E109                       	smpsAlterNote       $09
000964A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964AD E10F                       	smpsAlterNote       $0F
000964AF E701                       	dc.b	smpsNoAttack, $01
000964B1 E112                       	smpsAlterNote       $12
000964B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964B7 E10C                       	smpsAlterNote       $0C
000964B9 E701                       	dc.b	smpsNoAttack, $01
000964BB E108                       	smpsAlterNote       $08
000964BD E701                       	dc.b	smpsNoAttack, $01
000964BF E109                       	smpsAlterNote       $09
000964C1 E701                       	dc.b	smpsNoAttack, $01
000964C3 E10F                       	smpsAlterNote       $0F
000964C5 E701                       	dc.b	smpsNoAttack, $01
000964C7 E113                       	smpsAlterNote       $13
000964C9 E701                       	dc.b	smpsNoAttack, $01
000964CB E10D                       	smpsAlterNote       $0D
000964CD C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000964D3 E10C                       	smpsAlterNote       $0C
000964D5 C10D                       	dc.b	nE5, $0D
000964D7 E109                       	smpsAlterNote       $09
000964D9 E701                       	dc.b	smpsNoAttack, $01
000964DB E106                       	smpsAlterNote       $06
000964DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964E1 E10C                       	smpsAlterNote       $0C
000964E3 E701                       	dc.b	smpsNoAttack, $01
000964E5 E110                       	smpsAlterNote       $10
000964E7 E701                       	dc.b	smpsNoAttack, $01
000964E9 E10F                       	smpsAlterNote       $0F
000964EB E701                       	dc.b	smpsNoAttack, $01
000964ED E109                       	smpsAlterNote       $09
000964EF E701                       	dc.b	smpsNoAttack, $01
000964F1 E105                       	smpsAlterNote       $05
000964F3 E701                       	dc.b	smpsNoAttack, $01
000964F5 E109                       	smpsAlterNote       $09
000964F7 E701                       	dc.b	smpsNoAttack, $01
000964F9 E10C                       	smpsAlterNote       $0C
000964FB E701                       	dc.b	smpsNoAttack, $01
000964FD E110                       	smpsAlterNote       $10
000964FF E701                       	dc.b	smpsNoAttack, $01
00096501 E10C                       	smpsAlterNote       $0C
00096503 E701                       	dc.b	smpsNoAttack, $01
00096505 E106                       	smpsAlterNote       $06
00096507 E701                       	dc.b	smpsNoAttack, $01
00096509 E105                       	smpsAlterNote       $05
0009650B E701                       	dc.b	smpsNoAttack, $01
0009650D E109                       	smpsAlterNote       $09
0009650F E701                       	dc.b	smpsNoAttack, $01
00096511 E10F                       	smpsAlterNote       $0F
00096513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096517 E10C                       	smpsAlterNote       $0C
00096519 E701                       	dc.b	smpsNoAttack, $01
0009651B E106                       	smpsAlterNote       $06
0009651D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096521 E10C                       	smpsAlterNote       $0C
00096523 E701                       	dc.b	smpsNoAttack, $01
00096525 E10F                       	smpsAlterNote       $0F
00096527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009652B E109                       	smpsAlterNote       $09
0009652D E701                       	dc.b	smpsNoAttack, $01
0009652F E105                       	smpsAlterNote       $05
00096531 E701                       	dc.b	smpsNoAttack, $01
00096533 E106                       	smpsAlterNote       $06
00096535 E701                       	dc.b	smpsNoAttack, $01
00096537 E10C                       	smpsAlterNote       $0C
00096539 E701                       	dc.b	smpsNoAttack, $01
0009653B E110                       	smpsAlterNote       $10
0009653D E701                       	dc.b	smpsNoAttack, $01
0009653F E10C                       	smpsAlterNote       $0C
00096541 E701                       	dc.b	smpsNoAttack, $01
00096543 E109                       	smpsAlterNote       $09
00096545 E701                       	dc.b	smpsNoAttack, $01
00096547 E105                       	smpsAlterNote       $05
00096549 E701                       	dc.b	smpsNoAttack, $01
0009654B E109                       	smpsAlterNote       $09
0009654D E701                       	dc.b	smpsNoAttack, $01
0009654F E10F                       	smpsAlterNote       $0F
00096551 E701                       	dc.b	smpsNoAttack, $01
00096553 E110                       	smpsAlterNote       $10
00096555 E701                       	dc.b	smpsNoAttack, $01
00096557 E10C                       	smpsAlterNote       $0C
00096559 E701                       	dc.b	smpsNoAttack, $01
0009655B E106                       	smpsAlterNote       $06
0009655D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096561 E109                       	smpsAlterNote       $09
00096563 E701                       	dc.b	smpsNoAttack, $01
00096565 E10F                       	smpsAlterNote       $0F
00096567 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009656B E109                       	smpsAlterNote       $09
0009656D E701                       	dc.b	smpsNoAttack, $01
0009656F E106                       	smpsAlterNote       $06
00096571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096575 E10C                       	smpsAlterNote       $0C
00096577 E701                       	dc.b	smpsNoAttack, $01
00096579 E110                       	smpsAlterNote       $10
0009657B E701                       	dc.b	smpsNoAttack, $01
0009657D E10F                       	smpsAlterNote       $0F
0009657F E701                       	dc.b	smpsNoAttack, $01
00096581 E109                       	smpsAlterNote       $09
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E105                       	smpsAlterNote       $05
00096587 E701                       	dc.b	smpsNoAttack, $01
00096589 E109                       	smpsAlterNote       $09
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E10F                       	smpsAlterNote       $0F
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E110                       	smpsAlterNote       $10
00096593 E701                       	dc.b	smpsNoAttack, $01
00096595 E10C                       	smpsAlterNote       $0C
00096597 E701                       	dc.b	smpsNoAttack, $01
00096599 E106                       	smpsAlterNote       $06
0009659B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009659F E109                       	smpsAlterNote       $09
000965A1 E701                       	dc.b	smpsNoAttack, $01
000965A3 E10F                       	smpsAlterNote       $0F
000965A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965A9 E109                       	smpsAlterNote       $09
000965AB E701                       	dc.b	smpsNoAttack, $01
000965AD E106                       	smpsAlterNote       $06
000965AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965B3 E10C                       	smpsAlterNote       $0C
000965B5 E701                       	dc.b	smpsNoAttack, $01
000965B7 E110                       	smpsAlterNote       $10
000965B9 E701                       	dc.b	smpsNoAttack, $01
000965BB E10F                       	smpsAlterNote       $0F
000965BD E701                       	dc.b	smpsNoAttack, $01
000965BF E109                       	smpsAlterNote       $09
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E105                       	smpsAlterNote       $05
000965C5 E701                       	dc.b	smpsNoAttack, $01
000965C7 E109                       	smpsAlterNote       $09
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E10C                       	smpsAlterNote       $0C
000965CD E701                       	dc.b	smpsNoAttack, $01
000965CF E110                       	smpsAlterNote       $10
000965D1 E701                       	dc.b	smpsNoAttack, $01
000965D3 E10C                       	smpsAlterNote       $0C
000965D5 E701                       	dc.b	smpsNoAttack, $01
000965D7 E106                       	smpsAlterNote       $06
000965D9 E701                       	dc.b	smpsNoAttack, $01
000965DB E105                       	smpsAlterNote       $05
000965DD E701                       	dc.b	smpsNoAttack, $01
000965DF E109                       	smpsAlterNote       $09
000965E1 E701                       	dc.b	smpsNoAttack, $01
000965E3 E10F                       	smpsAlterNote       $0F
000965E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965E9 E10C                       	smpsAlterNote       $0C
000965EB E701                       	dc.b	smpsNoAttack, $01
000965ED E106                       	smpsAlterNote       $06
000965EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F3 E10C                       	smpsAlterNote       $0C
000965F5 E701                       	dc.b	smpsNoAttack, $01
000965F7 E10F                       	smpsAlterNote       $0F
000965F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965FD E109                       	smpsAlterNote       $09
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E105                       	smpsAlterNote       $05
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E106                       	smpsAlterNote       $06
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E10C                       	smpsAlterNote       $0C
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E110                       	smpsAlterNote       $10
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E10C                       	smpsAlterNote       $0C
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E109                       	smpsAlterNote       $09
00096617 E701                       	dc.b	smpsNoAttack, $01
00096619 E105                       	smpsAlterNote       $05
0009661B E701                       	dc.b	smpsNoAttack, $01
0009661D E109                       	smpsAlterNote       $09
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E10F                       	smpsAlterNote       $0F
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E110                       	smpsAlterNote       $10
00096627 E701                       	dc.b	smpsNoAttack, $01
00096629 E10C                       	smpsAlterNote       $0C
0009662B E701                       	dc.b	smpsNoAttack, $01
0009662D E106                       	smpsAlterNote       $06
0009662F E701                       	dc.b	smpsNoAttack, $01
00096631 E10B                       	smpsAlterNote       $0B
00096633 BF02                       	dc.b	nD5, $02
00096635 E10C                       	smpsAlterNote       $0C
00096637 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0009663D E109                       	smpsAlterNote       $09
0009663F E701                       	dc.b	smpsNoAttack, $01
00096641 E105                       	smpsAlterNote       $05
00096643 E701                       	dc.b	smpsNoAttack, $01
00096645 E109                       	smpsAlterNote       $09
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E10F                       	smpsAlterNote       $0F
0009664B E701                       	dc.b	smpsNoAttack, $01
0009664D E110                       	smpsAlterNote       $10
0009664F E701                       	dc.b	smpsNoAttack, $01
00096651 E10C                       	smpsAlterNote       $0C
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E106                       	smpsAlterNote       $06
00096657 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009665B E109                       	smpsAlterNote       $09
0009665D E701                       	dc.b	smpsNoAttack, $01
0009665F E10F                       	smpsAlterNote       $0F
00096661 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096665 E109                       	smpsAlterNote       $09
00096667 E701                       	dc.b	smpsNoAttack, $01
00096669 E106                       	smpsAlterNote       $06
0009666B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009666F E10C                       	smpsAlterNote       $0C
00096671 E701                       	dc.b	smpsNoAttack, $01
00096673 E110                       	smpsAlterNote       $10
00096675 E701                       	dc.b	smpsNoAttack, $01
00096677 E10F                       	smpsAlterNote       $0F
00096679 E701                       	dc.b	smpsNoAttack, $01
0009667B E109                       	smpsAlterNote       $09
0009667D E701                       	dc.b	smpsNoAttack, $01
0009667F E105                       	smpsAlterNote       $05
00096681 E701                       	dc.b	smpsNoAttack, $01
00096683 E109                       	smpsAlterNote       $09
00096685 E701                       	dc.b	smpsNoAttack, $01
00096687 E10C                       	smpsAlterNote       $0C
00096689 E701                       	dc.b	smpsNoAttack, $01
0009668B E110                       	smpsAlterNote       $10
0009668D E701                       	dc.b	smpsNoAttack, $01
0009668F E10C                       	smpsAlterNote       $0C
00096691 E701                       	dc.b	smpsNoAttack, $01
00096693 E106                       	smpsAlterNote       $06
00096695 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096699 E10D                       	smpsAlterNote       $0D
0009669B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000966A3 E10C                       	smpsAlterNote       $0C
000966A5 C10D                       	dc.b	nE5, $0D
000966A7 E106                       	smpsAlterNote       $06
000966A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966AD E109                       	smpsAlterNote       $09
000966AF E701                       	dc.b	smpsNoAttack, $01
000966B1 E10F                       	smpsAlterNote       $0F
000966B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966B7 E109                       	smpsAlterNote       $09
000966B9 E701                       	dc.b	smpsNoAttack, $01
000966BB E106                       	smpsAlterNote       $06
000966BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966C1 E10C                       	smpsAlterNote       $0C
000966C3 E701                       	dc.b	smpsNoAttack, $01
000966C5 E110                       	smpsAlterNote       $10
000966C7 E701                       	dc.b	smpsNoAttack, $01
000966C9 E10F                       	smpsAlterNote       $0F
000966CB E701                       	dc.b	smpsNoAttack, $01
000966CD E109                       	smpsAlterNote       $09
000966CF E701                       	dc.b	smpsNoAttack, $01
000966D1 E105                       	smpsAlterNote       $05
000966D3 E701                       	dc.b	smpsNoAttack, $01
000966D5 E106                       	smpsAlterNote       $06
000966D7 800F                       	dc.b	nRst, $0F
000966DB E6FF                       	smpsAlterVol        $FF
000966DD E10F                       	smpsAlterNote       $0F
000966DF BA01                       	dc.b	nA4, $01
000966E1 E110                       	smpsAlterNote       $10
000966E3 BB02                       	dc.b	nBb4, $02
000966E5 E10F                       	smpsAlterNote       $0F
000966E7 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000966ED E10B                       	smpsAlterNote       $0B
000966EF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000966F3 E10C                       	smpsAlterNote       $0C
000966F5 C103                       	dc.b	nE5, $03
000966F7 E10D                       	smpsAlterNote       $0D
000966F9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096703 E10B                       	smpsAlterNote       $0B
00096705 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00096709 E104                       	smpsAlterNote       $04
0009670B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009670F E10A                       	smpsAlterNote       $0A
00096711 E701                       	dc.b	smpsNoAttack, $01
00096713 E10D                       	smpsAlterNote       $0D
00096715 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096719 E107                       	smpsAlterNote       $07
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E104                       	smpsAlterNote       $04
0009671F 8001                       	dc.b	nRst, $01
00096721 E110                       	smpsAlterNote       $10
00096723 C703                       	dc.b	nBb5, $03
00096725 E10F                       	smpsAlterNote       $0F
00096727 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009672B E10D                       	smpsAlterNote       $0D
0009672D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096731 E10C                       	smpsAlterNote       $0C
00096733 E701                       	dc.b	smpsNoAttack, $01
00096735 E108                       	smpsAlterNote       $08
00096737 E701                       	dc.b	smpsNoAttack, $01
00096739 E109                       	smpsAlterNote       $09
0009673B E701                       	dc.b	smpsNoAttack, $01
0009673D E10F                       	smpsAlterNote       $0F
0009673F E701                       	dc.b	smpsNoAttack, $01
00096741 E113                       	smpsAlterNote       $13
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E10F                       	smpsAlterNote       $0F
00096747 E701                       	dc.b	smpsNoAttack, $01
00096749 E10C                       	smpsAlterNote       $0C
0009674B E701                       	dc.b	smpsNoAttack, $01
0009674D E108                       	smpsAlterNote       $08
0009674F E701                       	dc.b	smpsNoAttack, $01
00096751 E10C                       	smpsAlterNote       $0C
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E112                       	smpsAlterNote       $12
00096757 E701                       	dc.b	smpsNoAttack, $01
00096759 E113                       	smpsAlterNote       $13
0009675B E701                       	dc.b	smpsNoAttack, $01
0009675D E10F                       	smpsAlterNote       $0F
0009675F E701                       	dc.b	smpsNoAttack, $01
00096761 E109                       	smpsAlterNote       $09
00096763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096767 E10C                       	smpsAlterNote       $0C
00096769 E701                       	dc.b	smpsNoAttack, $01
0009676B E112                       	smpsAlterNote       $12
0009676D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096771 E10C                       	smpsAlterNote       $0C
00096773 E701                       	dc.b	smpsNoAttack, $01
00096775 E109                       	smpsAlterNote       $09
00096777 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009677B E10F                       	smpsAlterNote       $0F
0009677D E701                       	dc.b	smpsNoAttack, $01
0009677F E113                       	smpsAlterNote       $13
00096781 E701                       	dc.b	smpsNoAttack, $01
00096783 E112                       	smpsAlterNote       $12
00096785 E701                       	dc.b	smpsNoAttack, $01
00096787 E10C                       	smpsAlterNote       $0C
00096789 E701                       	dc.b	smpsNoAttack, $01
0009678B E108                       	smpsAlterNote       $08
0009678D E701                       	dc.b	smpsNoAttack, $01
0009678F E10C                       	smpsAlterNote       $0C
00096791 E701                       	dc.b	smpsNoAttack, $01
00096793 E10F                       	smpsAlterNote       $0F
00096795 E701                       	dc.b	smpsNoAttack, $01
00096797 E113                       	smpsAlterNote       $13
00096799 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0009679D E10B                       	smpsAlterNote       $0B
0009679F BF03                       	dc.b	nD5, $03
000967A1 E10C                       	smpsAlterNote       $0C
000967A3 C103 8001                  	dc.b	nE5, $03, nRst, $01
000967A7 E10D                       	smpsAlterNote       $0D
000967A9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000967B3 E10B                       	smpsAlterNote       $0B
000967B5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000967C1 E110                       	smpsAlterNote       $10
000967C3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000967C7 E10F                       	smpsAlterNote       $0F
000967C9 C604                       	dc.b	nA5, $04
000967CB E10D                       	smpsAlterNote       $0D
000967CD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000967D3 E109                       	smpsAlterNote       $09
000967D5 E701                       	dc.b	smpsNoAttack, $01
000967D7 E108                       	smpsAlterNote       $08
000967D9 E701                       	dc.b	smpsNoAttack, $01
000967DB E10C                       	smpsAlterNote       $0C
000967DD E701                       	dc.b	smpsNoAttack, $01
000967DF E112                       	smpsAlterNote       $12
000967E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967E5 E10F                       	smpsAlterNote       $0F
000967E7 E701                       	dc.b	smpsNoAttack, $01
000967E9 E109                       	smpsAlterNote       $09
000967EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967EF E10F                       	smpsAlterNote       $0F
000967F1 E701                       	dc.b	smpsNoAttack, $01
000967F3 E112                       	smpsAlterNote       $12
000967F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967F9 E10C                       	smpsAlterNote       $0C
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD E108                       	smpsAlterNote       $08
000967FF E701                       	dc.b	smpsNoAttack, $01
00096801 E109                       	smpsAlterNote       $09
00096803 E701                       	dc.b	smpsNoAttack, $01
00096805 E10F                       	smpsAlterNote       $0F
00096807 E701                       	dc.b	smpsNoAttack, $01
00096809 E113                       	smpsAlterNote       $13
0009680B E701                       	dc.b	smpsNoAttack, $01
0009680D E10F                       	smpsAlterNote       $0F
0009680F E701                       	dc.b	smpsNoAttack, $01
00096811 E10C                       	smpsAlterNote       $0C
00096813 E701                       	dc.b	smpsNoAttack, $01
00096815 E108                       	smpsAlterNote       $08
00096817 E701                       	dc.b	smpsNoAttack, $01
00096819 E10C                       	smpsAlterNote       $0C
0009681B E701                       	dc.b	smpsNoAttack, $01
0009681D E112                       	smpsAlterNote       $12
0009681F E701                       	dc.b	smpsNoAttack, $01
00096821 E113                       	smpsAlterNote       $13
00096823 E701                       	dc.b	smpsNoAttack, $01
00096825 E10F                       	smpsAlterNote       $0F
00096827 E701                       	dc.b	smpsNoAttack, $01
00096829 E109                       	smpsAlterNote       $09
0009682B E701                       	dc.b	smpsNoAttack, $01
0009682D E10D                       	smpsAlterNote       $0D
0009682F C402                       	dc.b	nG5, $02
00096831 E10F                       	smpsAlterNote       $0F
00096833 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0009683D E10D                       	smpsAlterNote       $0D
0009683F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096845 E10B                       	smpsAlterNote       $0B
00096847 BF0D                       	dc.b	nD5, $0D
00096849 E108                       	smpsAlterNote       $08
0009684B E701                       	dc.b	smpsNoAttack, $01
0009684D E104                       	smpsAlterNote       $04
0009684F E701                       	dc.b	smpsNoAttack, $01
00096851 E105                       	smpsAlterNote       $05
00096853 E701                       	dc.b	smpsNoAttack, $01
00096855 E10B                       	smpsAlterNote       $0B
00096857 E701                       	dc.b	smpsNoAttack, $01
00096859 E10F                       	smpsAlterNote       $0F
0009685B E701                       	dc.b	smpsNoAttack, $01
0009685D E10B                       	smpsAlterNote       $0B
0009685F E701                       	dc.b	smpsNoAttack, $01
00096861 E108                       	smpsAlterNote       $08
00096863 E701                       	dc.b	smpsNoAttack, $01
00096865 E104                       	smpsAlterNote       $04
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E108                       	smpsAlterNote       $08
0009686B E701                       	dc.b	smpsNoAttack, $01
0009686D E10E                       	smpsAlterNote       $0E
0009686F E701                       	dc.b	smpsNoAttack, $01
00096871 E10F                       	smpsAlterNote       $0F
00096873 E701                       	dc.b	smpsNoAttack, $01
00096875 E10C                       	smpsAlterNote       $0C
00096877 C101                       	dc.b	nE5, $01
00096879 E10D                       	smpsAlterNote       $0D
0009687B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096883 E10F                       	smpsAlterNote       $0F
00096885 C607                       	dc.b	nA5, $07
00096887 E10C                       	smpsAlterNote       $0C
00096889 CD07                       	dc.b	nE6, $07
0009688B E10D                       	smpsAlterNote       $0D
0009688D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096891 E10C                       	smpsAlterNote       $0C
00096893 CD03                       	dc.b	nE6, $03
00096895 E10A                       	smpsAlterNote       $0A
00096897 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009689B E10D                       	smpsAlterNote       $0D
0009689D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000968A3 E10A                       	smpsAlterNote       $0A
000968A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968A9 E110                       	smpsAlterNote       $10
000968AB E701                       	dc.b	smpsNoAttack, $01
000968AD E114                       	smpsAlterNote       $14
000968AF E701                       	dc.b	smpsNoAttack, $01
000968B1 E113                       	smpsAlterNote       $13
000968B3 E701                       	dc.b	smpsNoAttack, $01
000968B5 E10D                       	smpsAlterNote       $0D
000968B7 E701                       	dc.b	smpsNoAttack, $01
000968B9 E109                       	smpsAlterNote       $09
000968BB E701                       	dc.b	smpsNoAttack, $01
000968BD E10D                       	smpsAlterNote       $0D
000968BF E701                       	dc.b	smpsNoAttack, $01
000968C1 E110                       	smpsAlterNote       $10
000968C3 E701                       	dc.b	smpsNoAttack, $01
000968C5 E114                       	smpsAlterNote       $14
000968C7 E701                       	dc.b	smpsNoAttack, $01
000968C9 E10F                       	smpsAlterNote       $0F
000968CB C607                       	dc.b	nA5, $07
000968CD E10D                       	smpsAlterNote       $0D
000968CF C40D                       	dc.b	nG5, $0D
000968D1 E10A                       	smpsAlterNote       $0A
000968D3 E701                       	dc.b	smpsNoAttack, $01
000968D5 E106                       	smpsAlterNote       $06
000968D7 E701                       	dc.b	smpsNoAttack, $01
000968D9 E10A                       	smpsAlterNote       $0A
000968DB E701                       	dc.b	smpsNoAttack, $01
000968DD E10D                       	smpsAlterNote       $0D
000968DF E701                       	dc.b	smpsNoAttack, $01
000968E1 E111                       	smpsAlterNote       $11
000968E3 E701                       	dc.b	smpsNoAttack, $01
000968E5 E10D                       	smpsAlterNote       $0D
000968E7 E701                       	dc.b	smpsNoAttack, $01
000968E9 E107                       	smpsAlterNote       $07
000968EB E701                       	dc.b	smpsNoAttack, $01
000968ED E106                       	smpsAlterNote       $06
000968EF E701                       	dc.b	smpsNoAttack, $01
000968F1 E10A                       	smpsAlterNote       $0A
000968F3 E701                       	dc.b	smpsNoAttack, $01
000968F5 E110                       	smpsAlterNote       $10
000968F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968FB E10D                       	smpsAlterNote       $0D
000968FD E701                       	dc.b	smpsNoAttack, $01
000968FF E107                       	smpsAlterNote       $07
00096901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096905 E10F                       	smpsAlterNote       $0F
00096907 C60E                       	dc.b	nA5, $0E
00096909 E109                       	smpsAlterNote       $09
0009690B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009690F E10F                       	smpsAlterNote       $0F
00096911 E701                       	dc.b	smpsNoAttack, $01
00096913 E112                       	smpsAlterNote       $12
00096915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096919 E10C                       	smpsAlterNote       $0C
0009691B E701                       	dc.b	smpsNoAttack, $01
0009691D E108                       	smpsAlterNote       $08
0009691F E701                       	dc.b	smpsNoAttack, $01
00096921 E109                       	smpsAlterNote       $09
00096923 E701                       	dc.b	smpsNoAttack, $01
00096925 E10F                       	smpsAlterNote       $0F
00096927 E701                       	dc.b	smpsNoAttack, $01
00096929 E113                       	smpsAlterNote       $13
0009692B E701                       	dc.b	smpsNoAttack, $01
0009692D E10F                       	smpsAlterNote       $0F
0009692F E701                       	dc.b	smpsNoAttack, $01
00096931 E10C                       	smpsAlterNote       $0C
00096933 E701                       	dc.b	smpsNoAttack, $01
00096935 E108                       	smpsAlterNote       $08
00096937 E701                       	dc.b	smpsNoAttack, $01
00096939 E109                       	smpsAlterNote       $09
0009693B 8001                       	dc.b	nRst, $01
0009693D E110                       	smpsAlterNote       $10
0009693F C70D                       	dc.b	nBb5, $0D
00096941 E10D                       	smpsAlterNote       $0D
00096943 E701                       	dc.b	smpsNoAttack, $01
00096945 E109                       	smpsAlterNote       $09
00096947 E701                       	dc.b	smpsNoAttack, $01
00096949 E10D                       	smpsAlterNote       $0D
0009694B E701                       	dc.b	smpsNoAttack, $01
0009694D E113                       	smpsAlterNote       $13
0009694F E701                       	dc.b	smpsNoAttack, $01
00096951 E114                       	smpsAlterNote       $14
00096953 E701                       	dc.b	smpsNoAttack, $01
00096955 E110                       	smpsAlterNote       $10
00096957 E701                       	dc.b	smpsNoAttack, $01
00096959 E10A                       	smpsAlterNote       $0A
0009695B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009695F E10D                       	smpsAlterNote       $0D
00096961 E701                       	dc.b	smpsNoAttack, $01
00096963 E113                       	smpsAlterNote       $13
00096965 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096969 E10D                       	smpsAlterNote       $0D
0009696B E701                       	dc.b	smpsNoAttack, $01
0009696D E10A                       	smpsAlterNote       $0A
0009696F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096979 E10B                       	smpsAlterNote       $0B
0009697B 8001                       	dc.b	nRst, $01
0009697D E10C                       	smpsAlterNote       $0C
0009697F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00096983 E10B                       	smpsAlterNote       $0B
00096985 CB0D                       	dc.b	nD6, $0D
00096987 E105                       	smpsAlterNote       $05
00096989 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009698D E108                       	smpsAlterNote       $08
0009698F E701                       	dc.b	smpsNoAttack, $01
00096991 E10E                       	smpsAlterNote       $0E
00096993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096997 E108                       	smpsAlterNote       $08
00096999 E701                       	dc.b	smpsNoAttack, $01
0009699B E105                       	smpsAlterNote       $05
0009699D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A1 E10B                       	smpsAlterNote       $0B
000969A3 E701                       	dc.b	smpsNoAttack, $01
000969A5 E10F                       	smpsAlterNote       $0F
000969A7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000969AB E10C                       	smpsAlterNote       $0C
000969AD CC0D                       	dc.b	nEb6, $0D
000969AF E106                       	smpsAlterNote       $06
000969B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969B5 E109                       	smpsAlterNote       $09
000969B7 E701                       	dc.b	smpsNoAttack, $01
000969B9 E10C                       	smpsAlterNote       $0C
000969BB 8001                       	dc.b	nRst, $01
000969BD E10A                       	smpsAlterNote       $0A
000969BF C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000969CB CB0E                       	dc.b	nD6, $0E
000969CD E105                       	smpsAlterNote       $05
000969CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969D3 E10B                       	smpsAlterNote       $0B
000969D5 E701                       	dc.b	smpsNoAttack, $01
000969D7 E10E                       	smpsAlterNote       $0E
000969D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969DD E108                       	smpsAlterNote       $08
000969DF E701                       	dc.b	smpsNoAttack, $01
000969E1 E104                       	smpsAlterNote       $04
000969E3 E701                       	dc.b	smpsNoAttack, $01
000969E5 E105                       	smpsAlterNote       $05
000969E7 E701                       	dc.b	smpsNoAttack, $01
000969E9 E10B                       	smpsAlterNote       $0B
000969EB E701                       	dc.b	smpsNoAttack, $01
000969ED E10F                       	smpsAlterNote       $0F
000969EF E701                       	dc.b	smpsNoAttack, $01
000969F1 E10D                       	smpsAlterNote       $0D
000969F3 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000969F7 E10C                       	smpsAlterNote       $0C
000969F9 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000969FD E10A                       	smpsAlterNote       $0A
000969FF C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096A0B CB0D                       	dc.b	nD6, $0D
00096A0D E108                       	smpsAlterNote       $08
00096A0F E701                       	dc.b	smpsNoAttack, $01
00096A11 E104                       	smpsAlterNote       $04
00096A13 E701                       	dc.b	smpsNoAttack, $01
00096A15 E105                       	smpsAlterNote       $05
00096A17 E701                       	dc.b	smpsNoAttack, $01
00096A19 E10B                       	smpsAlterNote       $0B
00096A1B E701                       	dc.b	smpsNoAttack, $01
00096A1D E10F                       	smpsAlterNote       $0F
00096A1F E701                       	dc.b	smpsNoAttack, $01
00096A21 E10B                       	smpsAlterNote       $0B
00096A23 E701                       	dc.b	smpsNoAttack, $01
00096A25 E108                       	smpsAlterNote       $08
00096A27 E701                       	dc.b	smpsNoAttack, $01
00096A29 E104                       	smpsAlterNote       $04
00096A2B E701                       	dc.b	smpsNoAttack, $01
00096A2D E108                       	smpsAlterNote       $08
00096A2F E701                       	dc.b	smpsNoAttack, $01
00096A31 E10E                       	smpsAlterNote       $0E
00096A33 E701                       	dc.b	smpsNoAttack, $01
00096A35 E10F                       	smpsAlterNote       $0F
00096A37 E701                       	dc.b	smpsNoAttack, $01
00096A39 E10C                       	smpsAlterNote       $0C
00096A3B CC0D                       	dc.b	nEb6, $0D
00096A3D E109                       	smpsAlterNote       $09
00096A3F E701                       	dc.b	smpsNoAttack, $01
00096A41 E105                       	smpsAlterNote       $05
00096A43 E701                       	dc.b	smpsNoAttack, $01
00096A45 E106                       	smpsAlterNote       $06
00096A47 E701                       	dc.b	smpsNoAttack, $01
00096A49 E10C                       	smpsAlterNote       $0C
00096A4B E701                       	dc.b	smpsNoAttack, $01
00096A4D E10A                       	smpsAlterNote       $0A
00096A4F C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00096A5B CB0D                       	dc.b	nD6, $0D
00096A5D E108                       	smpsAlterNote       $08
00096A5F E701                       	dc.b	smpsNoAttack, $01
00096A61 E104                       	smpsAlterNote       $04
00096A63 E701                       	dc.b	smpsNoAttack, $01
00096A65 E108                       	smpsAlterNote       $08
00096A67 E701                       	dc.b	smpsNoAttack, $01
00096A69 E10B                       	smpsAlterNote       $0B
00096A6B E701                       	dc.b	smpsNoAttack, $01
00096A6D E10F                       	smpsAlterNote       $0F
00096A6F E701                       	dc.b	smpsNoAttack, $01
00096A71 E10B                       	smpsAlterNote       $0B
00096A73 E701                       	dc.b	smpsNoAttack, $01
00096A75 E105                       	smpsAlterNote       $05
00096A77 E701                       	dc.b	smpsNoAttack, $01
00096A79 E104                       	smpsAlterNote       $04
00096A7B E701                       	dc.b	smpsNoAttack, $01
00096A7D E108                       	smpsAlterNote       $08
00096A7F E701                       	dc.b	smpsNoAttack, $01
00096A81 E10E                       	smpsAlterNote       $0E
00096A83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A87 E10B                       	smpsAlterNote       $0B
00096A89 E701                       	dc.b	smpsNoAttack, $01
00096A8B E105                       	smpsAlterNote       $05
00096A8D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096A95 03                         	dc.b	$03
00096A96 E601                       	smpsAlterVol        $01
00096A98 F6F1 D1                    	smpsJump            music84_Jump01
00096A9B                            
00096A9B                            ; FM5 Data
00096A9B                            music84_FM5:
00096A9D E080                       	smpsPan             panLeft, $00
00096A9F 8003                       	dc.b	nRst, $03
00096AA1 E10D                       	smpsAlterNote       $0D
00096AA3 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096AA7 E10C                       	smpsAlterNote       $0C
00096AA9 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096AAD E10F                       	smpsAlterNote       $0F
00096AAF BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096AB5 E6FE                       	smpsAlterVol        $FE
00096AB7 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096ABD E10D                       	smpsAlterNote       $0D
00096ABF C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096AC5 E10C                       	smpsAlterNote       $0C
00096AC7 C102 8001                  	dc.b	nE5, $02, nRst, $01
00096ACB E10A                       	smpsAlterNote       $0A
00096ACD BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096AD3 03                         	dc.b	$03
00096AD4                            
00096AD4                            music84_Jump00:
00096AD4 8004                       	dc.b	nRst, $04
00096AD6 E602                       	smpsAlterVol        $02
00096AD8 E10D                       	smpsAlterNote       $0D
00096ADA B60D                       	dc.b	nF4, $0D
00096ADC E107                       	smpsAlterNote       $07
00096ADE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AE2 E10A                       	smpsAlterNote       $0A
00096AE4 E701                       	dc.b	smpsNoAttack, $01
00096AE6 E110                       	smpsAlterNote       $10
00096AE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AEC E10A                       	smpsAlterNote       $0A
00096AEE E701                       	dc.b	smpsNoAttack, $01
00096AF0 E107                       	smpsAlterNote       $07
00096AF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AF6 E10D                       	smpsAlterNote       $0D
00096AF8 E701                       	dc.b	smpsNoAttack, $01
00096AFA E111                       	smpsAlterNote       $11
00096AFC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096B00 E10D                       	smpsAlterNote       $0D
00096B02 B80D                       	dc.b	nG4, $0D
00096B04 E107                       	smpsAlterNote       $07
00096B06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B0A E10A                       	smpsAlterNote       $0A
00096B0C E701                       	dc.b	smpsNoAttack, $01
00096B0E E110                       	smpsAlterNote       $10
00096B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B14 E10A                       	smpsAlterNote       $0A
00096B16 E701                       	dc.b	smpsNoAttack, $01
00096B18 E107                       	smpsAlterNote       $07
00096B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B1E E10D                       	smpsAlterNote       $0D
00096B20 E701                       	dc.b	smpsNoAttack, $01
00096B22 E111                       	smpsAlterNote       $11
00096B24 E701                       	dc.b	smpsNoAttack, $01
00096B26 E110                       	smpsAlterNote       $10
00096B28 E701                       	dc.b	smpsNoAttack, $01
00096B2A E10A                       	smpsAlterNote       $0A
00096B2C E701                       	dc.b	smpsNoAttack, $01
00096B2E E106                       	smpsAlterNote       $06
00096B30 E701                       	dc.b	smpsNoAttack, $01
00096B32 E10A                       	smpsAlterNote       $0A
00096B34 E701                       	dc.b	smpsNoAttack, $01
00096B36 E10D                       	smpsAlterNote       $0D
00096B38 E701                       	dc.b	smpsNoAttack, $01
00096B3A E111                       	smpsAlterNote       $11
00096B3C E701                       	dc.b	smpsNoAttack, $01
00096B3E E10D                       	smpsAlterNote       $0D
00096B40 E701                       	dc.b	smpsNoAttack, $01
00096B42 E10F                       	smpsAlterNote       $0F
00096B44 BA0E                       	dc.b	nA4, $0E
00096B46 E109                       	smpsAlterNote       $09
00096B48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B4C E10F                       	smpsAlterNote       $0F
00096B4E E701                       	dc.b	smpsNoAttack, $01
00096B50 E112                       	smpsAlterNote       $12
00096B52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B56 E10C                       	smpsAlterNote       $0C
00096B58 E701                       	dc.b	smpsNoAttack, $01
00096B5A E108                       	smpsAlterNote       $08
00096B5C E701                       	dc.b	smpsNoAttack, $01
00096B5E E109                       	smpsAlterNote       $09
00096B60 E701                       	dc.b	smpsNoAttack, $01
00096B62 E10F                       	smpsAlterNote       $0F
00096B64 E701                       	dc.b	smpsNoAttack, $01
00096B66 E113                       	smpsAlterNote       $13
00096B68 E701                       	dc.b	smpsNoAttack, $01
00096B6A E10F                       	smpsAlterNote       $0F
00096B6C E701                       	dc.b	smpsNoAttack, $01
00096B6E E109                       	smpsAlterNote       $09
00096B70 E701                       	dc.b	smpsNoAttack, $01
00096B72 E108                       	smpsAlterNote       $08
00096B74 E701                       	dc.b	smpsNoAttack, $01
00096B76 E10C                       	smpsAlterNote       $0C
00096B78 E701                       	dc.b	smpsNoAttack, $01
00096B7A E112                       	smpsAlterNote       $12
00096B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B80 E10F                       	smpsAlterNote       $0F
00096B82 E701                       	dc.b	smpsNoAttack, $01
00096B84 E109                       	smpsAlterNote       $09
00096B86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B8A E10F                       	smpsAlterNote       $0F
00096B8C E701                       	dc.b	smpsNoAttack, $01
00096B8E E112                       	smpsAlterNote       $12
00096B90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B94 E10C                       	smpsAlterNote       $0C
00096B96 E701                       	dc.b	smpsNoAttack, $01
00096B98 E108                       	smpsAlterNote       $08
00096B9A E701                       	dc.b	smpsNoAttack, $01
00096B9C E109                       	smpsAlterNote       $09
00096B9E E701                       	dc.b	smpsNoAttack, $01
00096BA0 E10F                       	smpsAlterNote       $0F
00096BA2 E701                       	dc.b	smpsNoAttack, $01
00096BA4 E113                       	smpsAlterNote       $13
00096BA6 E701                       	dc.b	smpsNoAttack, $01
00096BA8 E10F                       	smpsAlterNote       $0F
00096BAA E701                       	dc.b	smpsNoAttack, $01
00096BAC E10C                       	smpsAlterNote       $0C
00096BAE E701                       	dc.b	smpsNoAttack, $01
00096BB0 E108                       	smpsAlterNote       $08
00096BB2 E701                       	dc.b	smpsNoAttack, $01
00096BB4 E109                       	smpsAlterNote       $09
00096BB6 8001                       	dc.b	nRst, $01
00096BB8 E10C                       	smpsAlterNote       $0C
00096BBA B50A                       	dc.b	nE4, $0A
00096BBC E10D                       	smpsAlterNote       $0D
00096BBE B60D                       	dc.b	nF4, $0D
00096BC0 E10A                       	smpsAlterNote       $0A
00096BC2 E701                       	dc.b	smpsNoAttack, $01
00096BC4 E106                       	smpsAlterNote       $06
00096BC6 E701                       	dc.b	smpsNoAttack, $01
00096BC8 E107                       	smpsAlterNote       $07
00096BCA E701                       	dc.b	smpsNoAttack, $01
00096BCC E10D                       	smpsAlterNote       $0D
00096BCE E701                       	dc.b	smpsNoAttack, $01
00096BD0 E111                       	smpsAlterNote       $11
00096BD2 E701                       	dc.b	smpsNoAttack, $01
00096BD4 E10D                       	smpsAlterNote       $0D
00096BD6 E701                       	dc.b	smpsNoAttack, $01
00096BD8 E10A                       	smpsAlterNote       $0A
00096BDA E701                       	dc.b	smpsNoAttack, $01
00096BDC E106                       	smpsAlterNote       $06
00096BDE E701                       	dc.b	smpsNoAttack, $01
00096BE0 E10A                       	smpsAlterNote       $0A
00096BE2 E701                       	dc.b	smpsNoAttack, $01
00096BE4 E110                       	smpsAlterNote       $10
00096BE6 E701                       	dc.b	smpsNoAttack, $01
00096BE8 E111                       	smpsAlterNote       $11
00096BEA E701                       	dc.b	smpsNoAttack, $01
00096BEC E10D                       	smpsAlterNote       $0D
00096BEE B80D                       	dc.b	nG4, $0D
00096BF0 E10A                       	smpsAlterNote       $0A
00096BF2 E701                       	dc.b	smpsNoAttack, $01
00096BF4 E106                       	smpsAlterNote       $06
00096BF6 E701                       	dc.b	smpsNoAttack, $01
00096BF8 E107                       	smpsAlterNote       $07
00096BFA E701                       	dc.b	smpsNoAttack, $01
00096BFC E10D                       	smpsAlterNote       $0D
00096BFE E701                       	dc.b	smpsNoAttack, $01
00096C00 E111                       	smpsAlterNote       $11
00096C02 E701                       	dc.b	smpsNoAttack, $01
00096C04 E10D                       	smpsAlterNote       $0D
00096C06 E701                       	dc.b	smpsNoAttack, $01
00096C08 E10A                       	smpsAlterNote       $0A
00096C0A E701                       	dc.b	smpsNoAttack, $01
00096C0C E106                       	smpsAlterNote       $06
00096C0E E701                       	dc.b	smpsNoAttack, $01
00096C10 E10A                       	smpsAlterNote       $0A
00096C12 E701                       	dc.b	smpsNoAttack, $01
00096C14 E110                       	smpsAlterNote       $10
00096C16 E701                       	dc.b	smpsNoAttack, $01
00096C18 E111                       	smpsAlterNote       $11
00096C1A E701                       	dc.b	smpsNoAttack, $01
00096C1C E10D                       	smpsAlterNote       $0D
00096C1E E701                       	dc.b	smpsNoAttack, $01
00096C20 E107                       	smpsAlterNote       $07
00096C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C26 E10A                       	smpsAlterNote       $0A
00096C28 E701                       	dc.b	smpsNoAttack, $01
00096C2A E110                       	smpsAlterNote       $10
00096C2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C30 E10D                       	smpsAlterNote       $0D
00096C32 8001                       	dc.b	nRst, $01
00096C34 E10F                       	smpsAlterNote       $0F
00096C36 BA0D                       	dc.b	nA4, $0D
00096C38 E10C                       	smpsAlterNote       $0C
00096C3A E701                       	dc.b	smpsNoAttack, $01
00096C3C E108                       	smpsAlterNote       $08
00096C3E E701                       	dc.b	smpsNoAttack, $01
00096C40 E10C                       	smpsAlterNote       $0C
00096C42 E701                       	dc.b	smpsNoAttack, $01
00096C44 E112                       	smpsAlterNote       $12
00096C46 E701                       	dc.b	smpsNoAttack, $01
00096C48 E113                       	smpsAlterNote       $13
00096C4A E701                       	dc.b	smpsNoAttack, $01
00096C4C E10F                       	smpsAlterNote       $0F
00096C4E E701                       	dc.b	smpsNoAttack, $01
00096C50 E109                       	smpsAlterNote       $09
00096C52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C56 E10C                       	smpsAlterNote       $0C
00096C58 E701                       	dc.b	smpsNoAttack, $01
00096C5A E112                       	smpsAlterNote       $12
00096C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C60 E10C                       	smpsAlterNote       $0C
00096C62 E701                       	dc.b	smpsNoAttack, $01
00096C64 E109                       	smpsAlterNote       $09
00096C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C6A E10F                       	smpsAlterNote       $0F
00096C6C E701                       	dc.b	smpsNoAttack, $01
00096C6E E113                       	smpsAlterNote       $13
00096C70 E701                       	dc.b	smpsNoAttack, $01
00096C72 E112                       	smpsAlterNote       $12
00096C74 E701                       	dc.b	smpsNoAttack, $01
00096C76 E10C                       	smpsAlterNote       $0C
00096C78 E701                       	dc.b	smpsNoAttack, $01
00096C7A E108                       	smpsAlterNote       $08
00096C7C E701                       	dc.b	smpsNoAttack, $01
00096C7E E10C                       	smpsAlterNote       $0C
00096C80 E701                       	dc.b	smpsNoAttack, $01
00096C82 E10F                       	smpsAlterNote       $0F
00096C84 E701                       	dc.b	smpsNoAttack, $01
00096C86 E113                       	smpsAlterNote       $13
00096C88 E701                       	dc.b	smpsNoAttack, $01
00096C8A E10F                       	smpsAlterNote       $0F
00096C8C E701                       	dc.b	smpsNoAttack, $01
00096C8E E109                       	smpsAlterNote       $09
00096C90 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096C94 E10D                       	smpsAlterNote       $0D
00096C96 B609 8001                  	dc.b	nF4, $09, nRst, $01
00096C9A E10C                       	smpsAlterNote       $0C
00096C9C B506 8001                  	dc.b	nE4, $06, nRst, $01
00096CA0 E10B                       	smpsAlterNote       $0B
00096CA2 B30D                       	dc.b	nD4, $0D
00096CA4 E10C                       	smpsAlterNote       $0C
00096CA6 B503 8001                  	dc.b	nE4, $03, nRst, $01
00096CAA E10D                       	smpsAlterNote       $0D
00096CAC B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096CB4 E109                       	smpsAlterNote       $09
00096CB6 E701                       	dc.b	smpsNoAttack, $01
00096CB8 E108                       	smpsAlterNote       $08
00096CBA E701                       	dc.b	smpsNoAttack, $01
00096CBC E10C                       	smpsAlterNote       $0C
00096CBE E701                       	dc.b	smpsNoAttack, $01
00096CC0 E112                       	smpsAlterNote       $12
00096CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CC6 E10F                       	smpsAlterNote       $0F
00096CC8 E701                       	dc.b	smpsNoAttack, $01
00096CCA E109                       	smpsAlterNote       $09
00096CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CD0 E10F                       	smpsAlterNote       $0F
00096CD2 E701                       	dc.b	smpsNoAttack, $01
00096CD4 E112                       	smpsAlterNote       $12
00096CD6 E701                       	dc.b	smpsNoAttack, $01
00096CD8 E113                       	smpsAlterNote       $13
00096CDA 8001                       	dc.b	nRst, $01
00096CDC E10D                       	smpsAlterNote       $0D
00096CDE C20D                       	dc.b	nF5, $0D
00096CE0 E107                       	smpsAlterNote       $07
00096CE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CE6 E10A                       	smpsAlterNote       $0A
00096CE8 E701                       	dc.b	smpsNoAttack, $01
00096CEA E110                       	smpsAlterNote       $10
00096CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CF0 E10A                       	smpsAlterNote       $0A
00096CF2 E701                       	dc.b	smpsNoAttack, $01
00096CF4 E107                       	smpsAlterNote       $07
00096CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CFA E10D                       	smpsAlterNote       $0D
00096CFC E701                       	dc.b	smpsNoAttack, $01
00096CFE E111                       	smpsAlterNote       $11
00096D00 E701                       	dc.b	smpsNoAttack, $01
00096D02 E110                       	smpsAlterNote       $10
00096D04 E701                       	dc.b	smpsNoAttack, $01
00096D06 E10A                       	smpsAlterNote       $0A
00096D08 E701                       	dc.b	smpsNoAttack, $01
00096D0A E106                       	smpsAlterNote       $06
00096D0C E701                       	dc.b	smpsNoAttack, $01
00096D0E E10A                       	smpsAlterNote       $0A
00096D10 E701                       	dc.b	smpsNoAttack, $01
00096D12 E10D                       	smpsAlterNote       $0D
00096D14 E701                       	dc.b	smpsNoAttack, $01
00096D16 E111                       	smpsAlterNote       $11
00096D18 E701                       	dc.b	smpsNoAttack, $01
00096D1A E10D                       	smpsAlterNote       $0D
00096D1C E701                       	dc.b	smpsNoAttack, $01
00096D1E E107                       	smpsAlterNote       $07
00096D20 E701                       	dc.b	smpsNoAttack, $01
00096D22 E106                       	smpsAlterNote       $06
00096D24 E701                       	dc.b	smpsNoAttack, $01
00096D26 E10A                       	smpsAlterNote       $0A
00096D28 E701                       	dc.b	smpsNoAttack, $01
00096D2A E110                       	smpsAlterNote       $10
00096D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D30 E10D                       	smpsAlterNote       $0D
00096D32 E701                       	dc.b	smpsNoAttack, $01
00096D34 E107                       	smpsAlterNote       $07
00096D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3A E10D                       	smpsAlterNote       $0D
00096D3C E701                       	dc.b	smpsNoAttack, $01
00096D3E E110                       	smpsAlterNote       $10
00096D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D44 E10A                       	smpsAlterNote       $0A
00096D46 E701                       	dc.b	smpsNoAttack, $01
00096D48 E106                       	smpsAlterNote       $06
00096D4A E701                       	dc.b	smpsNoAttack, $01
00096D4C E107                       	smpsAlterNote       $07
00096D4E E701                       	dc.b	smpsNoAttack, $01
00096D50 E10D                       	smpsAlterNote       $0D
00096D52 E701                       	dc.b	smpsNoAttack, $01
00096D54 E111                       	smpsAlterNote       $11
00096D56 E701                       	dc.b	smpsNoAttack, $01
00096D58 E10D                       	smpsAlterNote       $0D
00096D5A E701                       	dc.b	smpsNoAttack, $01
00096D5C E10A                       	smpsAlterNote       $0A
00096D5E E701                       	dc.b	smpsNoAttack, $01
00096D60 E106                       	smpsAlterNote       $06
00096D62 E701                       	dc.b	smpsNoAttack, $01
00096D64 E10A                       	smpsAlterNote       $0A
00096D66 E701                       	dc.b	smpsNoAttack, $01
00096D68 E110                       	smpsAlterNote       $10
00096D6A E701                       	dc.b	smpsNoAttack, $01
00096D6C E111                       	smpsAlterNote       $11
00096D6E E701                       	dc.b	smpsNoAttack, $01
00096D70 E10D                       	smpsAlterNote       $0D
00096D72 E701                       	dc.b	smpsNoAttack, $01
00096D74 E107                       	smpsAlterNote       $07
00096D76 E701                       	dc.b	smpsNoAttack, $01
00096D78 E10D                       	smpsAlterNote       $0D
00096D7A C207                       	dc.b	nF5, $07
00096D7C E10C                       	smpsAlterNote       $0C
00096D7E C10D                       	dc.b	nE5, $0D
00096D80 E109                       	smpsAlterNote       $09
00096D82 E701                       	dc.b	smpsNoAttack, $01
00096D84 E106                       	smpsAlterNote       $06
00096D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D8A E10C                       	smpsAlterNote       $0C
00096D8C E701                       	dc.b	smpsNoAttack, $01
00096D8E E110                       	smpsAlterNote       $10
00096D90 E701                       	dc.b	smpsNoAttack, $01
00096D92 E10F                       	smpsAlterNote       $0F
00096D94 E701                       	dc.b	smpsNoAttack, $01
00096D96 E109                       	smpsAlterNote       $09
00096D98 E701                       	dc.b	smpsNoAttack, $01
00096D9A E105                       	smpsAlterNote       $05
00096D9C E701                       	dc.b	smpsNoAttack, $01
00096D9E E109                       	smpsAlterNote       $09
00096DA0 E701                       	dc.b	smpsNoAttack, $01
00096DA2 E10C                       	smpsAlterNote       $0C
00096DA4 E701                       	dc.b	smpsNoAttack, $01
00096DA6 E110                       	smpsAlterNote       $10
00096DA8 E701                       	dc.b	smpsNoAttack, $01
00096DAA E10B                       	smpsAlterNote       $0B
00096DAC BF0D                       	dc.b	nD5, $0D
00096DAE E108                       	smpsAlterNote       $08
00096DB0 E701                       	dc.b	smpsNoAttack, $01
00096DB2 E105                       	smpsAlterNote       $05
00096DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB8 E10B                       	smpsAlterNote       $0B
00096DBA E701                       	dc.b	smpsNoAttack, $01
00096DBC E10F                       	smpsAlterNote       $0F
00096DBE E701                       	dc.b	smpsNoAttack, $01
00096DC0 E10E                       	smpsAlterNote       $0E
00096DC2 E701                       	dc.b	smpsNoAttack, $01
00096DC4 E108                       	smpsAlterNote       $08
00096DC6 E701                       	dc.b	smpsNoAttack, $01
00096DC8 E104                       	smpsAlterNote       $04
00096DCA E701                       	dc.b	smpsNoAttack, $01
00096DCC E108                       	smpsAlterNote       $08
00096DCE E701                       	dc.b	smpsNoAttack, $01
00096DD0 E10E                       	smpsAlterNote       $0E
00096DD2 E701                       	dc.b	smpsNoAttack, $01
00096DD4 E10F                       	smpsAlterNote       $0F
00096DD6 E701                       	dc.b	smpsNoAttack, $01
00096DD8 E10B                       	smpsAlterNote       $0B
00096DDA E701                       	dc.b	smpsNoAttack, $01
00096DDC E105                       	smpsAlterNote       $05
00096DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DE2 E108                       	smpsAlterNote       $08
00096DE4 E701                       	dc.b	smpsNoAttack, $01
00096DE6 E10E                       	smpsAlterNote       $0E
00096DE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DEC E108                       	smpsAlterNote       $08
00096DEE E701                       	dc.b	smpsNoAttack, $01
00096DF0 E105                       	smpsAlterNote       $05
00096DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DF6 E10B                       	smpsAlterNote       $0B
00096DF8 E701                       	dc.b	smpsNoAttack, $01
00096DFA E10F                       	smpsAlterNote       $0F
00096DFC E701                       	dc.b	smpsNoAttack, $01
00096DFE E10E                       	smpsAlterNote       $0E
00096E00 E701                       	dc.b	smpsNoAttack, $01
00096E02 E108                       	smpsAlterNote       $08
00096E04 E701                       	dc.b	smpsNoAttack, $01
00096E06 E104                       	smpsAlterNote       $04
00096E08 E701                       	dc.b	smpsNoAttack, $01
00096E0A E108                       	smpsAlterNote       $08
00096E0C E701                       	dc.b	smpsNoAttack, $01
00096E0E E10B                       	smpsAlterNote       $0B
00096E10 E701                       	dc.b	smpsNoAttack, $01
00096E12 E10F                       	smpsAlterNote       $0F
00096E14 E701                       	dc.b	smpsNoAttack, $01
00096E16 E10B                       	smpsAlterNote       $0B
00096E18 E701                       	dc.b	smpsNoAttack, $01
00096E1A E105                       	smpsAlterNote       $05
00096E1C E701                       	dc.b	smpsNoAttack, $01
00096E1E E104                       	smpsAlterNote       $04
00096E20 E701                       	dc.b	smpsNoAttack, $01
00096E22 E108                       	smpsAlterNote       $08
00096E24 E701                       	dc.b	smpsNoAttack, $01
00096E26 E10E                       	smpsAlterNote       $0E
00096E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E2C E10B                       	smpsAlterNote       $0B
00096E2E E701                       	dc.b	smpsNoAttack, $01
00096E30 E105                       	smpsAlterNote       $05
00096E32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E36 E10B                       	smpsAlterNote       $0B
00096E38 E701                       	dc.b	smpsNoAttack, $01
00096E3A E10E                       	smpsAlterNote       $0E
00096E3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E40 E108                       	smpsAlterNote       $08
00096E42 E701                       	dc.b	smpsNoAttack, $01
00096E44 E105                       	smpsAlterNote       $05
00096E46 8001                       	dc.b	nRst, $01
00096E4A E601                       	smpsAlterVol        $01
00096E4C E10B                       	smpsAlterNote       $0B
00096E4E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096E5A 8004                       	dc.b	nRst, $04
00096E5E E6FF                       	smpsAlterVol        $FF
00096E60 E10D                       	smpsAlterNote       $0D
00096E62 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096E6A E10C                       	smpsAlterNote       $0C
00096E6C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096E71 E10D                       	smpsAlterNote       $0D
00096E73 B60D                       	dc.b	nF4, $0D
00096E75 E10A                       	smpsAlterNote       $0A
00096E77 E701                       	dc.b	smpsNoAttack, $01
00096E79 E106                       	smpsAlterNote       $06
00096E7B E701                       	dc.b	smpsNoAttack, $01
00096E7D E10A                       	smpsAlterNote       $0A
00096E7F E701                       	dc.b	smpsNoAttack, $01
00096E81 E110                       	smpsAlterNote       $10
00096E83 E701                       	dc.b	smpsNoAttack, $01
00096E85 E111                       	smpsAlterNote       $11
00096E87 E701                       	dc.b	smpsNoAttack, $01
00096E89 E10D                       	smpsAlterNote       $0D
00096E8B E701                       	dc.b	smpsNoAttack, $01
00096E8D E107                       	smpsAlterNote       $07
00096E8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E93 E10A                       	smpsAlterNote       $0A
00096E95 E701                       	dc.b	smpsNoAttack, $01
00096E97 E110                       	smpsAlterNote       $10
00096E99 E701                       	dc.b	smpsNoAttack, $01
00096E9B E111                       	smpsAlterNote       $11
00096E9D 8001                       	dc.b	nRst, $01
00096E9F E10D                       	smpsAlterNote       $0D
00096EA1 B80D                       	dc.b	nG4, $0D
00096EA3 E10A                       	smpsAlterNote       $0A
00096EA5 E701                       	dc.b	smpsNoAttack, $01
00096EA7 E106                       	smpsAlterNote       $06
00096EA9 E701                       	dc.b	smpsNoAttack, $01
00096EAB E10A                       	smpsAlterNote       $0A
00096EAD E701                       	dc.b	smpsNoAttack, $01
00096EAF E110                       	smpsAlterNote       $10
00096EB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EB5 E10D                       	smpsAlterNote       $0D
00096EB7 E701                       	dc.b	smpsNoAttack, $01
00096EB9 E107                       	smpsAlterNote       $07
00096EBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EBF E10D                       	smpsAlterNote       $0D
00096EC1 E701                       	dc.b	smpsNoAttack, $01
00096EC3 E110                       	smpsAlterNote       $10
00096EC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EC9 E10A                       	smpsAlterNote       $0A
00096ECB E701                       	dc.b	smpsNoAttack, $01
00096ECD E106                       	smpsAlterNote       $06
00096ECF E701                       	dc.b	smpsNoAttack, $01
00096ED1 E107                       	smpsAlterNote       $07
00096ED3 E701                       	dc.b	smpsNoAttack, $01
00096ED5 E10D                       	smpsAlterNote       $0D
00096ED7 E701                       	dc.b	smpsNoAttack, $01
00096ED9 E111                       	smpsAlterNote       $11
00096EDB E701                       	dc.b	smpsNoAttack, $01
00096EDD E10D                       	smpsAlterNote       $0D
00096EDF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096EE3 E10F                       	smpsAlterNote       $0F
00096EE5 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096EE9 E110                       	smpsAlterNote       $10
00096EEB BB03                       	dc.b	nBb4, $03
00096EED E10F                       	smpsAlterNote       $0F
00096EEF BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096EF5 E110                       	smpsAlterNote       $10
00096EF7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096EFB E10F                       	smpsAlterNote       $0F
00096EFD C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096F03 E110                       	smpsAlterNote       $10
00096F05 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096F09 E10F                       	smpsAlterNote       $0F
00096F0B D20D                       	dc.b	nA6, $0D
00096F0D E10C                       	smpsAlterNote       $0C
00096F0F E701                       	dc.b	smpsNoAttack, $01
00096F11 E108                       	smpsAlterNote       $08
00096F13 E701                       	dc.b	smpsNoAttack, $01
00096F15 E10C                       	smpsAlterNote       $0C
00096F17 E701                       	dc.b	smpsNoAttack, $01
00096F19 E10F                       	smpsAlterNote       $0F
00096F1B E701                       	dc.b	smpsNoAttack, $01
00096F1D E113                       	smpsAlterNote       $13
00096F1F E701                       	dc.b	smpsNoAttack, $01
00096F21 E10F                       	smpsAlterNote       $0F
00096F23 E701                       	dc.b	smpsNoAttack, $01
00096F25 E109                       	smpsAlterNote       $09
00096F27 E701                       	dc.b	smpsNoAttack, $01
00096F29 E108                       	smpsAlterNote       $08
00096F2B E701                       	dc.b	smpsNoAttack, $01
00096F2D E10C                       	smpsAlterNote       $0C
00096F2F E701                       	dc.b	smpsNoAttack, $01
00096F31 E112                       	smpsAlterNote       $12
00096F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F37 E10F                       	smpsAlterNote       $0F
00096F39 E701                       	dc.b	smpsNoAttack, $01
00096F3B E109                       	smpsAlterNote       $09
00096F3D E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096F43 E10D                       	smpsAlterNote       $0D
00096F45 CE07                       	dc.b	nF6, $07
00096F47 E10C                       	smpsAlterNote       $0C
00096F49 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096F4D E10D                       	smpsAlterNote       $0D
00096F4F CE03                       	dc.b	nF6, $03
00096F51 E10C                       	smpsAlterNote       $0C
00096F53 CC0D                       	dc.b	nEb6, $0D
00096F55 E109                       	smpsAlterNote       $09
00096F57 E701                       	dc.b	smpsNoAttack, $01
00096F59 E106                       	smpsAlterNote       $06
00096F5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F5F E10C                       	smpsAlterNote       $0C
00096F61 E701                       	dc.b	smpsNoAttack, $01
00096F63 E110                       	smpsAlterNote       $10
00096F65 E701                       	dc.b	smpsNoAttack, $01
00096F67 E10F                       	smpsAlterNote       $0F
00096F69 E701                       	dc.b	smpsNoAttack, $01
00096F6B E109                       	smpsAlterNote       $09
00096F6D E701                       	dc.b	smpsNoAttack, $01
00096F6F E105                       	smpsAlterNote       $05
00096F71 E701                       	dc.b	smpsNoAttack, $01
00096F73 E109                       	smpsAlterNote       $09
00096F75 E701                       	dc.b	smpsNoAttack, $01
00096F77 E10C                       	smpsAlterNote       $0C
00096F79 E701                       	dc.b	smpsNoAttack, $01
00096F7B E110                       	smpsAlterNote       $10
00096F7D E701                       	dc.b	smpsNoAttack, $01
00096F7F E10C                       	smpsAlterNote       $0C
00096F81 E701                       	dc.b	smpsNoAttack, $01
00096F83 E106                       	smpsAlterNote       $06
00096F85 E701                       	dc.b	smpsNoAttack, $01
00096F87 E105                       	smpsAlterNote       $05
00096F89 E701                       	dc.b	smpsNoAttack, $01
00096F8B E109                       	smpsAlterNote       $09
00096F8D E701                       	dc.b	smpsNoAttack, $01
00096F8F E10F                       	smpsAlterNote       $0F
00096F91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F95 E10C                       	smpsAlterNote       $0C
00096F97 E701                       	dc.b	smpsNoAttack, $01
00096F99 E10B                       	smpsAlterNote       $0B
00096F9B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096FA5 E10F                       	smpsAlterNote       $0F
00096FA7 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096FB1 E10D                       	smpsAlterNote       $0D
00096FB3 C203                       	dc.b	nF5, $03
00096FB5 E10C                       	smpsAlterNote       $0C
00096FB7 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096FBB E10D                       	smpsAlterNote       $0D
00096FBD C20D                       	dc.b	nF5, $0D
00096FBF E10C                       	smpsAlterNote       $0C
00096FC1 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096FC5 E10B                       	smpsAlterNote       $0B
00096FC7 BF0D                       	dc.b	nD5, $0D
00096FC9 E108                       	smpsAlterNote       $08
00096FCB E701                       	dc.b	smpsNoAttack, $01
00096FCD E104                       	smpsAlterNote       $04
00096FCF E701                       	dc.b	smpsNoAttack, $01
00096FD1 E108                       	smpsAlterNote       $08
00096FD3 E701                       	dc.b	smpsNoAttack, $01
00096FD5 E10E                       	smpsAlterNote       $0E
00096FD7 E701                       	dc.b	smpsNoAttack, $01
00096FD9 E10F                       	smpsAlterNote       $0F
00096FDB E701                       	dc.b	smpsNoAttack, $01
00096FDD E10B                       	smpsAlterNote       $0B
00096FDF E701                       	dc.b	smpsNoAttack, $01
00096FE1 E105                       	smpsAlterNote       $05
00096FE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FE7 E108                       	smpsAlterNote       $08
00096FE9 E701                       	dc.b	smpsNoAttack, $01
00096FEB E10E                       	smpsAlterNote       $0E
00096FED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FF1 E108                       	smpsAlterNote       $08
00096FF3 E701                       	dc.b	smpsNoAttack, $01
00096FF5 E105                       	smpsAlterNote       $05
00096FF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FFB E10B                       	smpsAlterNote       $0B
00096FFD E701                       	dc.b	smpsNoAttack, $01
00096FFF E10F                       	smpsAlterNote       $0F
00097001 E701                       	dc.b	smpsNoAttack, $01
00097003 E10E                       	smpsAlterNote       $0E
00097005 E701                       	dc.b	smpsNoAttack, $01
00097007 E108                       	smpsAlterNote       $08
00097009 E701                       	dc.b	smpsNoAttack, $01
0009700B E104                       	smpsAlterNote       $04
0009700D E701                       	dc.b	smpsNoAttack, $01
0009700F E108                       	smpsAlterNote       $08
00097011 E701                       	dc.b	smpsNoAttack, $01
00097013 E10B                       	smpsAlterNote       $0B
00097015 E701                       	dc.b	smpsNoAttack, $01
00097017 E10F                       	smpsAlterNote       $0F
00097019 E701                       	dc.b	smpsNoAttack, $01
0009701B E10B                       	smpsAlterNote       $0B
0009701D E701                       	dc.b	smpsNoAttack, $01
0009701F E105                       	smpsAlterNote       $05
00097021 E701                       	dc.b	smpsNoAttack, $01
00097023 E104                       	smpsAlterNote       $04
00097025 E701                       	dc.b	smpsNoAttack, $01
00097027 E108                       	smpsAlterNote       $08
00097029 E701                       	dc.b	smpsNoAttack, $01
0009702B E10E                       	smpsAlterNote       $0E
0009702D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097031 E10B                       	smpsAlterNote       $0B
00097033 E701                       	dc.b	smpsNoAttack, $01
00097035 E105                       	smpsAlterNote       $05
00097037 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009703B E10B                       	smpsAlterNote       $0B
0009703D E701                       	dc.b	smpsNoAttack, $01
0009703F E10E                       	smpsAlterNote       $0E
00097041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097045 E108                       	smpsAlterNote       $08
00097047 E701                       	dc.b	smpsNoAttack, $01
00097049 E104                       	smpsAlterNote       $04
0009704B E701                       	dc.b	smpsNoAttack, $01
0009704D E105                       	smpsAlterNote       $05
0009704F E701                       	dc.b	smpsNoAttack, $01
00097051 E10B                       	smpsAlterNote       $0B
00097053 E701                       	dc.b	smpsNoAttack, $01
00097055 E10F                       	smpsAlterNote       $0F
00097057 E701                       	dc.b	smpsNoAttack, $01
00097059 E10B                       	smpsAlterNote       $0B
0009705B E701                       	dc.b	smpsNoAttack, $01
0009705D E108                       	smpsAlterNote       $08
0009705F E701                       	dc.b	smpsNoAttack, $01
00097061 E104                       	smpsAlterNote       $04
00097063 E701                       	dc.b	smpsNoAttack, $01
00097065 E108                       	smpsAlterNote       $08
00097067 E701                       	dc.b	smpsNoAttack, $01
00097069 E10E                       	smpsAlterNote       $0E
0009706B E701                       	dc.b	smpsNoAttack, $01
0009706D E10F                       	smpsAlterNote       $0F
0009706F E701                       	dc.b	smpsNoAttack, $01
00097071 E10B                       	smpsAlterNote       $0B
00097073 E701                       	dc.b	smpsNoAttack, $01
00097075 E105                       	smpsAlterNote       $05
00097077 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009707B E108                       	smpsAlterNote       $08
0009707D E701                       	dc.b	smpsNoAttack, $01
0009707F E10E                       	smpsAlterNote       $0E
00097081 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097085 E108                       	smpsAlterNote       $08
00097087 E701                       	dc.b	smpsNoAttack, $01
00097089 E105                       	smpsAlterNote       $05
0009708B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009708F E10B                       	smpsAlterNote       $0B
00097091 E701                       	dc.b	smpsNoAttack, $01
00097093 E10F                       	smpsAlterNote       $0F
00097095 E701                       	dc.b	smpsNoAttack, $01
00097097 E10E                       	smpsAlterNote       $0E
00097099 E701                       	dc.b	smpsNoAttack, $01
0009709B E108                       	smpsAlterNote       $08
0009709D E701                       	dc.b	smpsNoAttack, $01
0009709F E104                       	smpsAlterNote       $04
000970A1 E701                       	dc.b	smpsNoAttack, $01
000970A3 E108                       	smpsAlterNote       $08
000970A5 E701                       	dc.b	smpsNoAttack, $01
000970A7 E10B                       	smpsAlterNote       $0B
000970A9 E701                       	dc.b	smpsNoAttack, $01
000970AB E10F                       	smpsAlterNote       $0F
000970AD E701                       	dc.b	smpsNoAttack, $01
000970AF E10B                       	smpsAlterNote       $0B
000970B1 E701                       	dc.b	smpsNoAttack, $01
000970B3 E105                       	smpsAlterNote       $05
000970B5 E701                       	dc.b	smpsNoAttack, $01
000970B7 E104                       	smpsAlterNote       $04
000970B9 E701                       	dc.b	smpsNoAttack, $01
000970BB E105                       	smpsAlterNote       $05
000970BD 8001                       	dc.b	nRst, $01
000970BF E10D                       	smpsAlterNote       $0D
000970C1 C20D                       	dc.b	nF5, $0D
000970C3 E107                       	smpsAlterNote       $07
000970C5 E701                       	dc.b	smpsNoAttack, $01
000970C7 E106                       	smpsAlterNote       $06
000970C9 E701                       	dc.b	smpsNoAttack, $01
000970CB E10A                       	smpsAlterNote       $0A
000970CD E701                       	dc.b	smpsNoAttack, $01
000970CF E110                       	smpsAlterNote       $10
000970D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970D5 E10D                       	smpsAlterNote       $0D
000970D7 E701                       	dc.b	smpsNoAttack, $01
000970D9 E107                       	smpsAlterNote       $07
000970DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970DF E10D                       	smpsAlterNote       $0D
000970E1 E701                       	dc.b	smpsNoAttack, $01
000970E3 E110                       	smpsAlterNote       $10
000970E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970E9 E10A                       	smpsAlterNote       $0A
000970EB E701                       	dc.b	smpsNoAttack, $01
000970ED E106                       	smpsAlterNote       $06
000970EF E701                       	dc.b	smpsNoAttack, $01
000970F1 E107                       	smpsAlterNote       $07
000970F3 E701                       	dc.b	smpsNoAttack, $01
000970F5 E10D                       	smpsAlterNote       $0D
000970F7 E701                       	dc.b	smpsNoAttack, $01
000970F9 E111                       	smpsAlterNote       $11
000970FB E701                       	dc.b	smpsNoAttack, $01
000970FD E10D                       	smpsAlterNote       $0D
000970FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097103 E10C                       	smpsAlterNote       $0C
00097105 C10D                       	dc.b	nE5, $0D
00097107 E10D                       	smpsAlterNote       $0D
00097109 C20A                       	dc.b	nF5, $0A
0009710B E10C                       	smpsAlterNote       $0C
0009710D C10E                       	dc.b	nE5, $0E
0009710F E106                       	smpsAlterNote       $06
00097111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097115 E10C                       	smpsAlterNote       $0C
00097117 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009711B E10B                       	smpsAlterNote       $0B
0009711D BF0D                       	dc.b	nD5, $0D
0009711F E10C                       	smpsAlterNote       $0C
00097121 C107                       	dc.b	nE5, $07
00097123 E10D                       	smpsAlterNote       $0D
00097125 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009712F E110                       	smpsAlterNote       $10
00097131 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00097137 E10F                       	smpsAlterNote       $0F
00097139 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00097141 E10D                       	smpsAlterNote       $0D
00097143 D003                       	dc.b	nG6, $03
00097147 E0C0                       	smpsPan             panCenter, $00
00097149 E6FF                       	smpsAlterVol        $FF
0009714B AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00097157 8001                       	dc.b	nRst, $01
00097159 E10C                       	smpsAlterNote       $0C
0009715B A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00097165 E604                       	smpsAlterVol        $04
00097167 E10B                       	smpsAlterNote       $0B
00097169 B306 8001                  	dc.b	nD4, $06, nRst, $01
0009716D E10F                       	smpsAlterNote       $0F
0009716F AE03                       	dc.b	nA3, $03
00097171 E10D                       	smpsAlterNote       $0D
00097173 B603 8001                  	dc.b	nF4, $03, nRst, $01
00097177 E10C                       	smpsAlterNote       $0C
00097179 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009717D E10B                       	smpsAlterNote       $0B
0009717F B302 8001                  	dc.b	nD4, $02, nRst, $01
00097183 E10A                       	smpsAlterNote       $0A
00097185 B103                       	dc.b	nC4, $03
00097187 E110                       	smpsAlterNote       $10
00097189 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009718D E10F                       	smpsAlterNote       $0F
0009718F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00097193 E080                       	smpsPan             panLeft, $00
00097195 01                         	dc.b	$01
00097198 E6FB                       	smpsAlterVol        $FB
0009719A E1E4                       	smpsAlterNote       $E4
0009719C C501                       	dc.b	nAb5, $01
0009719E E1F4                       	smpsAlterNote       $F4
000971A0 E701                       	dc.b	smpsNoAttack, $01
000971A2 E104                       	smpsAlterNote       $04
000971A4 E701                       	dc.b	smpsNoAttack, $01
000971A6 E114                       	smpsAlterNote       $14
000971A8 E701                       	dc.b	smpsNoAttack, $01
000971AA E11C                       	smpsAlterNote       $1C
000971AC E701                       	dc.b	smpsNoAttack, $01
000971AE E1EF                       	smpsAlterNote       $EF
000971B0 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000971B3 E1FF                       	smpsAlterNote       $FF
000971B5 E701                       	dc.b	smpsNoAttack, $01
000971B7 E10F                       	smpsAlterNote       $0F
000971B9 C606                       	dc.b	nA5, $06
000971BB E109                       	smpsAlterNote       $09
000971BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971C1 E10F                       	smpsAlterNote       $0F
000971C3 E701                       	dc.b	smpsNoAttack, $01
000971C5 E112                       	smpsAlterNote       $12
000971C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971CB E10C                       	smpsAlterNote       $0C
000971CD E701                       	dc.b	smpsNoAttack, $01
000971CF E108                       	smpsAlterNote       $08
000971D1 E701                       	dc.b	smpsNoAttack, $01
000971D3 E109                       	smpsAlterNote       $09
000971D5 E701                       	dc.b	smpsNoAttack, $01
000971D7 E10F                       	smpsAlterNote       $0F
000971D9 E701                       	dc.b	smpsNoAttack, $01
000971DB E113                       	smpsAlterNote       $13
000971DD E701                       	dc.b	smpsNoAttack, $01
000971DF E10F                       	smpsAlterNote       $0F
000971E1 E701                       	dc.b	smpsNoAttack, $01
000971E3 E10C                       	smpsAlterNote       $0C
000971E5 E701                       	dc.b	smpsNoAttack, $01
000971E7 E108                       	smpsAlterNote       $08
000971E9 E701                       	dc.b	smpsNoAttack, $01
000971EB E10C                       	smpsAlterNote       $0C
000971ED E701                       	dc.b	smpsNoAttack, $01
000971EF E112                       	smpsAlterNote       $12
000971F1 E701                       	dc.b	smpsNoAttack, $01
000971F3 E113                       	smpsAlterNote       $13
000971F5 E701                       	dc.b	smpsNoAttack, $01
000971F7 E10F                       	smpsAlterNote       $0F
000971F9 E701                       	dc.b	smpsNoAttack, $01
000971FB E109                       	smpsAlterNote       $09
000971FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097201 E10C                       	smpsAlterNote       $0C
00097203 E701                       	dc.b	smpsNoAttack, $01
00097205 E112                       	smpsAlterNote       $12
00097207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009720B E10C                       	smpsAlterNote       $0C
0009720D E701                       	dc.b	smpsNoAttack, $01
0009720F E109                       	smpsAlterNote       $09
00097211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097215 E10F                       	smpsAlterNote       $0F
00097217 E701                       	dc.b	smpsNoAttack, $01
00097219 E113                       	smpsAlterNote       $13
0009721B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009721F E10D                       	smpsAlterNote       $0D
00097221 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00097227 E10C                       	smpsAlterNote       $0C
00097229 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009722D E10D                       	smpsAlterNote       $0D
0009722F C201 8001                  	dc.b	nF5, $01, nRst, $01
00097233 E10C                       	smpsAlterNote       $0C
00097235 C102                       	dc.b	nE5, $02
00097237 E10B                       	smpsAlterNote       $0B
00097239 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009723D E10C                       	smpsAlterNote       $0C
0009723F C101 8001                  	dc.b	nE5, $01, nRst, $01
00097243 E10B                       	smpsAlterNote       $0B
00097245 BF02                       	dc.b	nD5, $02
00097247 E10A                       	smpsAlterNote       $0A
00097249 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00097253 E110                       	smpsAlterNote       $10
00097255 BB02                       	dc.b	nBb4, $02
00097257 E10A                       	smpsAlterNote       $0A
00097259 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009725D E110                       	smpsAlterNote       $10
0009725F BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097263 E10F                       	smpsAlterNote       $0F
00097265 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097269 E110                       	smpsAlterNote       $10
0009726B BB02                       	dc.b	nBb4, $02
0009726D E10F                       	smpsAlterNote       $0F
0009726F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00097279 E10C                       	smpsAlterNote       $0C
0009727B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00097283 E10B                       	smpsAlterNote       $0B
00097285 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00097289 E10F                       	smpsAlterNote       $0F
0009728B BA02                       	dc.b	nA4, $02
0009728F E0C0                       	smpsPan             panCenter, $00
00097291 E601                       	smpsAlterVol        $01
00097293 E109                       	smpsAlterNote       $09
00097295 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000972A1 E108                       	smpsAlterNote       $08
000972A3 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000972A9 E107                       	smpsAlterNote       $07
000972AB B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000972B1 E109                       	smpsAlterNote       $09
000972B3 B603 8001                  	dc.b	nF4, $03, nRst, $01
000972B7 E108                       	smpsAlterNote       $08
000972B9 B506 8001                  	dc.b	nE4, $06, nRst, $01
000972BD E107                       	smpsAlterNote       $07
000972BF B302 8001                  	dc.b	nD4, $02, nRst, $01
000972C3 E106                       	smpsAlterNote       $06
000972C5 B103                       	dc.b	nC4, $03
000972C7 E10C                       	smpsAlterNote       $0C
000972C9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000972CF E080                       	smpsPan             panLeft, $00
000972D1 07                         	dc.b	$07
000972D2 E6FE                       	smpsAlterVol        $FE
000972D4 E10B                       	smpsAlterNote       $0B
000972D6 B20D                       	dc.b	nCs4, $0D
000972D8 E105                       	smpsAlterNote       $05
000972DA E701                       	dc.b	smpsNoAttack, $01
000972DC E104                       	smpsAlterNote       $04
000972DE E701                       	dc.b	smpsNoAttack, $01
000972E0 E108                       	smpsAlterNote       $08
000972E2 E701                       	dc.b	smpsNoAttack, $01
000972E4 E10E                       	smpsAlterNote       $0E
000972E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972EA E10B                       	smpsAlterNote       $0B
000972EC E701                       	dc.b	smpsNoAttack, $01
000972EE E105                       	smpsAlterNote       $05
000972F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972F4 E10B                       	smpsAlterNote       $0B
000972F6 E701                       	dc.b	smpsNoAttack, $01
000972F8 E10E                       	smpsAlterNote       $0E
000972FA E701                       	dc.b	smpsNoAttack, $01
000972FC E10F                       	smpsAlterNote       $0F
000972FE 8001                       	dc.b	nRst, $01
00097300 E10B                       	smpsAlterNote       $0B
00097302 B30D                       	dc.b	nD4, $0D
00097304 E105                       	smpsAlterNote       $05
00097306 E701                       	dc.b	smpsNoAttack, $01
00097308 E104                       	smpsAlterNote       $04
0009730A E701                       	dc.b	smpsNoAttack, $01
0009730C E108                       	smpsAlterNote       $08
0009730E E701                       	dc.b	smpsNoAttack, $01
00097310 E10E                       	smpsAlterNote       $0E
00097312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097316 E10B                       	smpsAlterNote       $0B
00097318 E701                       	dc.b	smpsNoAttack, $01
0009731A E105                       	smpsAlterNote       $05
0009731C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097320 E10B                       	smpsAlterNote       $0B
00097322 E701                       	dc.b	smpsNoAttack, $01
00097324 E10E                       	smpsAlterNote       $0E
00097326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009732A E108                       	smpsAlterNote       $08
0009732C E701                       	dc.b	smpsNoAttack, $01
0009732E E104                       	smpsAlterNote       $04
00097330 E701                       	dc.b	smpsNoAttack, $01
00097332 E105                       	smpsAlterNote       $05
00097334 E701                       	dc.b	smpsNoAttack, $01
00097336 E10B                       	smpsAlterNote       $0B
00097338 E701                       	dc.b	smpsNoAttack, $01
0009733A E10F                       	smpsAlterNote       $0F
0009733C E701                       	dc.b	smpsNoAttack, $01
0009733E E10B                       	smpsAlterNote       $0B
00097340 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097344 E10C                       	smpsAlterNote       $0C
00097346 B50D                       	dc.b	nE4, $0D
00097348 E106                       	smpsAlterNote       $06
0009734A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009734E E10C                       	smpsAlterNote       $0C
00097350 E701                       	dc.b	smpsNoAttack, $01
00097352 E10F                       	smpsAlterNote       $0F
00097354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097358 E109                       	smpsAlterNote       $09
0009735A E701                       	dc.b	smpsNoAttack, $01
0009735C E105                       	smpsAlterNote       $05
0009735E E701                       	dc.b	smpsNoAttack, $01
00097360 E106                       	smpsAlterNote       $06
00097362 E701                       	dc.b	smpsNoAttack, $01
00097364 E10C                       	smpsAlterNote       $0C
00097366 E701                       	dc.b	smpsNoAttack, $01
00097368 E110                       	smpsAlterNote       $10
0009736A E701                       	dc.b	smpsNoAttack, $01
0009736C E10B                       	smpsAlterNote       $0B
0009736E B30E                       	dc.b	nD4, $0E
00097370 E105                       	smpsAlterNote       $05
00097372 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097376 E10B                       	smpsAlterNote       $0B
00097378 E701                       	dc.b	smpsNoAttack, $01
0009737A E10E                       	smpsAlterNote       $0E
0009737C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097380 E108                       	smpsAlterNote       $08
00097382 E701                       	dc.b	smpsNoAttack, $01
00097384 E104                       	smpsAlterNote       $04
00097386 E701                       	dc.b	smpsNoAttack, $01
00097388 E105                       	smpsAlterNote       $05
0009738A E701                       	dc.b	smpsNoAttack, $01
0009738C E10B                       	smpsAlterNote       $0B
0009738E E701                       	dc.b	smpsNoAttack, $01
00097390 E10F                       	smpsAlterNote       $0F
00097392 E701                       	dc.b	smpsNoAttack, $01
00097394 E10B                       	smpsAlterNote       $0B
00097396 E701                       	dc.b	smpsNoAttack, $01
00097398 E108                       	smpsAlterNote       $08
0009739A E701                       	dc.b	smpsNoAttack, $01
0009739C E104                       	smpsAlterNote       $04
0009739E E701                       	dc.b	smpsNoAttack, $01
000973A0 E108                       	smpsAlterNote       $08
000973A2 E701                       	dc.b	smpsNoAttack, $01
000973A4 E10E                       	smpsAlterNote       $0E
000973A6 E701                       	dc.b	smpsNoAttack, $01
000973A8 E10F                       	smpsAlterNote       $0F
000973AA E701                       	dc.b	smpsNoAttack, $01
000973AC E10B                       	smpsAlterNote       $0B
000973AE E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000973B2 E108                       	smpsAlterNote       $08
000973B4 E701                       	dc.b	smpsNoAttack, $01
000973B6 E105                       	smpsAlterNote       $05
000973B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973BC E10B                       	smpsAlterNote       $0B
000973BE E701                       	dc.b	smpsNoAttack, $01
000973C0 E10F                       	smpsAlterNote       $0F
000973C2 E701                       	dc.b	smpsNoAttack, $01
000973C4 E10E                       	smpsAlterNote       $0E
000973C6 E701                       	dc.b	smpsNoAttack, $01
000973C8 E108                       	smpsAlterNote       $08
000973CA E701                       	dc.b	smpsNoAttack, $01
000973CC E104                       	smpsAlterNote       $04
000973CE E701                       	dc.b	smpsNoAttack, $01
000973D0 E108                       	smpsAlterNote       $08
000973D2 E701                       	dc.b	smpsNoAttack, $01
000973D4 E10B                       	smpsAlterNote       $0B
000973D6 E701                       	dc.b	smpsNoAttack, $01
000973D8 E10F                       	smpsAlterNote       $0F
000973DA E701                       	dc.b	smpsNoAttack, $01
000973DC E10B                       	smpsAlterNote       $0B
000973DE B30D                       	dc.b	nD4, $0D
000973E0 E108                       	smpsAlterNote       $08
000973E2 E701                       	dc.b	smpsNoAttack, $01
000973E4 E105                       	smpsAlterNote       $05
000973E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973EA E10B                       	smpsAlterNote       $0B
000973EC E701                       	dc.b	smpsNoAttack, $01
000973EE E10F                       	smpsAlterNote       $0F
000973F0 E701                       	dc.b	smpsNoAttack, $01
000973F2 E10E                       	smpsAlterNote       $0E
000973F4 E701                       	dc.b	smpsNoAttack, $01
000973F6 E108                       	smpsAlterNote       $08
000973F8 E701                       	dc.b	smpsNoAttack, $01
000973FA E104                       	smpsAlterNote       $04
000973FC E701                       	dc.b	smpsNoAttack, $01
000973FE E108                       	smpsAlterNote       $08
00097400 E701                       	dc.b	smpsNoAttack, $01
00097402 E10B                       	smpsAlterNote       $0B
00097404 E701                       	dc.b	smpsNoAttack, $01
00097406 E10F                       	smpsAlterNote       $0F
00097408 E701                       	dc.b	smpsNoAttack, $01
0009740A E10B                       	smpsAlterNote       $0B
0009740C E701                       	dc.b	smpsNoAttack, $01
0009740E E105                       	smpsAlterNote       $05
00097410 E701                       	dc.b	smpsNoAttack, $01
00097412 E104                       	smpsAlterNote       $04
00097414 E701                       	dc.b	smpsNoAttack, $01
00097416 E108                       	smpsAlterNote       $08
00097418 E701                       	dc.b	smpsNoAttack, $01
0009741A E10E                       	smpsAlterNote       $0E
0009741C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097420 E10B                       	smpsAlterNote       $0B
00097422 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00097426 E108                       	smpsAlterNote       $08
00097428 E701                       	dc.b	smpsNoAttack, $01
0009742A E104                       	smpsAlterNote       $04
0009742C E701                       	dc.b	smpsNoAttack, $01
0009742E E108                       	smpsAlterNote       $08
00097430 E701                       	dc.b	smpsNoAttack, $01
00097432 E10B                       	smpsAlterNote       $0B
00097434 E701                       	dc.b	smpsNoAttack, $01
00097438 E0C0                       	smpsPan             panCenter, $00
0009743A E601                       	smpsAlterVol        $01
0009743C E108                       	smpsAlterNote       $08
0009743E A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009744A 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097452 E080                       	smpsPan             panLeft, $00
00097454 07                         	dc.b	$07
00097455 E6FF                       	smpsAlterVol        $FF
00097457 E10D                       	smpsAlterNote       $0D
00097459 B60D                       	dc.b	nF4, $0D
0009745B E10A                       	smpsAlterNote       $0A
0009745D E701                       	dc.b	smpsNoAttack, $01
0009745F E106                       	smpsAlterNote       $06
00097461 E701                       	dc.b	smpsNoAttack, $01
00097463 E10A                       	smpsAlterNote       $0A
00097465 E701                       	dc.b	smpsNoAttack, $01
00097467 E110                       	smpsAlterNote       $10
00097469 E701                       	dc.b	smpsNoAttack, $01
0009746B E111                       	smpsAlterNote       $11
0009746D E701                       	dc.b	smpsNoAttack, $01
0009746F E10D                       	smpsAlterNote       $0D
00097471 E701                       	dc.b	smpsNoAttack, $01
00097473 E107                       	smpsAlterNote       $07
00097475 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097479 E10A                       	smpsAlterNote       $0A
0009747B E701                       	dc.b	smpsNoAttack, $01
0009747D E110                       	smpsAlterNote       $10
0009747F E701                       	dc.b	smpsNoAttack, $01
00097481 E111                       	smpsAlterNote       $11
00097483 8001                       	dc.b	nRst, $01
00097485 E10D                       	smpsAlterNote       $0D
00097487 B80D                       	dc.b	nG4, $0D
00097489 E10A                       	smpsAlterNote       $0A
0009748B E701                       	dc.b	smpsNoAttack, $01
0009748D E106                       	smpsAlterNote       $06
0009748F E701                       	dc.b	smpsNoAttack, $01
00097491 E10A                       	smpsAlterNote       $0A
00097493 E701                       	dc.b	smpsNoAttack, $01
00097495 E110                       	smpsAlterNote       $10
00097497 E701                       	dc.b	smpsNoAttack, $01
00097499 E111                       	smpsAlterNote       $11
0009749B E701                       	dc.b	smpsNoAttack, $01
0009749D E10D                       	smpsAlterNote       $0D
0009749F E701                       	dc.b	smpsNoAttack, $01
000974A1 E107                       	smpsAlterNote       $07
000974A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A7 E10D                       	smpsAlterNote       $0D
000974A9 E701                       	dc.b	smpsNoAttack, $01
000974AB E110                       	smpsAlterNote       $10
000974AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974B1 E10A                       	smpsAlterNote       $0A
000974B3 E701                       	dc.b	smpsNoAttack, $01
000974B5 E106                       	smpsAlterNote       $06
000974B7 E701                       	dc.b	smpsNoAttack, $01
000974B9 E107                       	smpsAlterNote       $07
000974BB E701                       	dc.b	smpsNoAttack, $01
000974BD E10D                       	smpsAlterNote       $0D
000974BF E701                       	dc.b	smpsNoAttack, $01
000974C1 E111                       	smpsAlterNote       $11
000974C3 E701                       	dc.b	smpsNoAttack, $01
000974C5 E10D                       	smpsAlterNote       $0D
000974C7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000974CB E10F                       	smpsAlterNote       $0F
000974CD BA0D                       	dc.b	nA4, $0D
000974CF E109                       	smpsAlterNote       $09
000974D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D5 E10C                       	smpsAlterNote       $0C
000974D7 E701                       	dc.b	smpsNoAttack, $01
000974D9 E112                       	smpsAlterNote       $12
000974DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974DF E10C                       	smpsAlterNote       $0C
000974E1 E701                       	dc.b	smpsNoAttack, $01
000974E3 E109                       	smpsAlterNote       $09
000974E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E9 E10F                       	smpsAlterNote       $0F
000974EB E701                       	dc.b	smpsNoAttack, $01
000974ED E113                       	smpsAlterNote       $13
000974EF E701                       	dc.b	smpsNoAttack, $01
000974F1 E112                       	smpsAlterNote       $12
000974F3 E701                       	dc.b	smpsNoAttack, $01
000974F5 E10C                       	smpsAlterNote       $0C
000974F7 E701                       	dc.b	smpsNoAttack, $01
000974F9 E108                       	smpsAlterNote       $08
000974FB E701                       	dc.b	smpsNoAttack, $01
000974FD E10C                       	smpsAlterNote       $0C
000974FF E701                       	dc.b	smpsNoAttack, $01
00097501 E10F                       	smpsAlterNote       $0F
00097503 E701                       	dc.b	smpsNoAttack, $01
00097505 E113                       	smpsAlterNote       $13
00097507 E701                       	dc.b	smpsNoAttack, $01
00097509 E10F                       	smpsAlterNote       $0F
0009750B E701                       	dc.b	smpsNoAttack, $01
0009750D E109                       	smpsAlterNote       $09
0009750F E701                       	dc.b	smpsNoAttack, $01
00097511 E108                       	smpsAlterNote       $08
00097513 E701                       	dc.b	smpsNoAttack, $01
00097515 E10C                       	smpsAlterNote       $0C
00097517 E701                       	dc.b	smpsNoAttack, $01
00097519 E112                       	smpsAlterNote       $12
0009751B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009751F E10F                       	smpsAlterNote       $0F
00097521 E701                       	dc.b	smpsNoAttack, $01
00097523 E109                       	smpsAlterNote       $09
00097525 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097529 E10F                       	smpsAlterNote       $0F
0009752B E701                       	dc.b	smpsNoAttack, $01
0009752D E112                       	smpsAlterNote       $12
0009752F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097533 E10C                       	smpsAlterNote       $0C
00097535 E701                       	dc.b	smpsNoAttack, $01
00097537 E108                       	smpsAlterNote       $08
00097539 E701                       	dc.b	smpsNoAttack, $01
0009753B E109                       	smpsAlterNote       $09
0009753D E701                       	dc.b	smpsNoAttack, $01
0009753F E10C                       	smpsAlterNote       $0C
00097541 B50A                       	dc.b	nE4, $0A
00097543 E10D                       	smpsAlterNote       $0D
00097545 B60E                       	dc.b	nF4, $0E
00097547 E107                       	smpsAlterNote       $07
00097549 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009754D E10D                       	smpsAlterNote       $0D
0009754F E701                       	dc.b	smpsNoAttack, $01
00097551 E110                       	smpsAlterNote       $10
00097553 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097557 E10A                       	smpsAlterNote       $0A
00097559 E701                       	dc.b	smpsNoAttack, $01
0009755B E106                       	smpsAlterNote       $06
0009755D E701                       	dc.b	smpsNoAttack, $01
0009755F E107                       	smpsAlterNote       $07
00097561 E701                       	dc.b	smpsNoAttack, $01
00097563 E10D                       	smpsAlterNote       $0D
00097565 E701                       	dc.b	smpsNoAttack, $01
00097567 E111                       	smpsAlterNote       $11
00097569 E701                       	dc.b	smpsNoAttack, $01
0009756B E10D                       	smpsAlterNote       $0D
0009756D B80D                       	dc.b	nG4, $0D
0009756F E10A                       	smpsAlterNote       $0A
00097571 E701                       	dc.b	smpsNoAttack, $01
00097573 E107                       	smpsAlterNote       $07
00097575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097579 E10D                       	smpsAlterNote       $0D
0009757B E701                       	dc.b	smpsNoAttack, $01
0009757D E111                       	smpsAlterNote       $11
0009757F E701                       	dc.b	smpsNoAttack, $01
00097581 E110                       	smpsAlterNote       $10
00097583 E701                       	dc.b	smpsNoAttack, $01
00097585 E10A                       	smpsAlterNote       $0A
00097587 E701                       	dc.b	smpsNoAttack, $01
00097589 E106                       	smpsAlterNote       $06
0009758B E701                       	dc.b	smpsNoAttack, $01
0009758D E10A                       	smpsAlterNote       $0A
0009758F E701                       	dc.b	smpsNoAttack, $01
00097591 E10D                       	smpsAlterNote       $0D
00097593 E701                       	dc.b	smpsNoAttack, $01
00097595 E111                       	smpsAlterNote       $11
00097597 E701                       	dc.b	smpsNoAttack, $01
00097599 E10D                       	smpsAlterNote       $0D
0009759B E701                       	dc.b	smpsNoAttack, $01
0009759D E107                       	smpsAlterNote       $07
0009759F E701                       	dc.b	smpsNoAttack, $01
000975A1 E106                       	smpsAlterNote       $06
000975A3 E701                       	dc.b	smpsNoAttack, $01
000975A5 E10A                       	smpsAlterNote       $0A
000975A7 E701                       	dc.b	smpsNoAttack, $01
000975A9 E110                       	smpsAlterNote       $10
000975AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975AF E10D                       	smpsAlterNote       $0D
000975B1 E701                       	dc.b	smpsNoAttack, $01
000975B3 E10F                       	smpsAlterNote       $0F
000975B5 BA0D                       	dc.b	nA4, $0D
000975B7 E10C                       	smpsAlterNote       $0C
000975B9 E701                       	dc.b	smpsNoAttack, $01
000975BB E108                       	smpsAlterNote       $08
000975BD E701                       	dc.b	smpsNoAttack, $01
000975BF E109                       	smpsAlterNote       $09
000975C1 E701                       	dc.b	smpsNoAttack, $01
000975C3 E10F                       	smpsAlterNote       $0F
000975C5 E701                       	dc.b	smpsNoAttack, $01
000975C7 E113                       	smpsAlterNote       $13
000975C9 E701                       	dc.b	smpsNoAttack, $01
000975CB E10F                       	smpsAlterNote       $0F
000975CD E701                       	dc.b	smpsNoAttack, $01
000975CF E10C                       	smpsAlterNote       $0C
000975D1 E701                       	dc.b	smpsNoAttack, $01
000975D3 E108                       	smpsAlterNote       $08
000975D5 E701                       	dc.b	smpsNoAttack, $01
000975D7 E10C                       	smpsAlterNote       $0C
000975D9 E701                       	dc.b	smpsNoAttack, $01
000975DB E112                       	smpsAlterNote       $12
000975DD E701                       	dc.b	smpsNoAttack, $01
000975DF E113                       	smpsAlterNote       $13
000975E1 E701                       	dc.b	smpsNoAttack, $01
000975E3 E10F                       	smpsAlterNote       $0F
000975E5 E701                       	dc.b	smpsNoAttack, $01
000975E7 E109                       	smpsAlterNote       $09
000975E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975ED E10C                       	smpsAlterNote       $0C
000975EF E701                       	dc.b	smpsNoAttack, $01
000975F1 E112                       	smpsAlterNote       $12
000975F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975F7 E10C                       	smpsAlterNote       $0C
000975F9 E701                       	dc.b	smpsNoAttack, $01
000975FB E109                       	smpsAlterNote       $09
000975FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097601 E10F                       	smpsAlterNote       $0F
00097603 E701                       	dc.b	smpsNoAttack, $01
00097605 E113                       	smpsAlterNote       $13
00097607 E701                       	dc.b	smpsNoAttack, $01
00097609 E112                       	smpsAlterNote       $12
0009760B E701                       	dc.b	smpsNoAttack, $01
0009760D E10C                       	smpsAlterNote       $0C
0009760F E701                       	dc.b	smpsNoAttack, $01
00097611 E109                       	smpsAlterNote       $09
00097613 8001                       	dc.b	nRst, $01
00097615 E10D                       	smpsAlterNote       $0D
00097617 B60A                       	dc.b	nF4, $0A
00097619 E10C                       	smpsAlterNote       $0C
0009761B B506 8001                  	dc.b	nE4, $06, nRst, $01
0009761F E10B                       	smpsAlterNote       $0B
00097621 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00097625 E10C                       	smpsAlterNote       $0C
00097627 B503                       	dc.b	nE4, $03
00097629 E10D                       	smpsAlterNote       $0D
0009762B B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00097635 E10C                       	smpsAlterNote       $0C
00097637 E701                       	dc.b	smpsNoAttack, $01
00097639 E108                       	smpsAlterNote       $08
0009763B E701                       	dc.b	smpsNoAttack, $01
0009763D E10C                       	smpsAlterNote       $0C
0009763F E701                       	dc.b	smpsNoAttack, $01
00097641 E112                       	smpsAlterNote       $12
00097643 E701                       	dc.b	smpsNoAttack, $01
00097645 E113                       	smpsAlterNote       $13
00097647 E701                       	dc.b	smpsNoAttack, $01
00097649 E10F                       	smpsAlterNote       $0F
0009764B E701                       	dc.b	smpsNoAttack, $01
0009764D E109                       	smpsAlterNote       $09
0009764F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097653 E10C                       	smpsAlterNote       $0C
00097655 E701                       	dc.b	smpsNoAttack, $01
00097657 E112                       	smpsAlterNote       $12
00097659 E701                       	dc.b	smpsNoAttack, $01
0009765B E113                       	smpsAlterNote       $13
0009765D 8001                       	dc.b	nRst, $01
0009765F E10D                       	smpsAlterNote       $0D
00097661 C20D                       	dc.b	nF5, $0D
00097663 E10A                       	smpsAlterNote       $0A
00097665 E701                       	dc.b	smpsNoAttack, $01
00097667 E106                       	smpsAlterNote       $06
00097669 E701                       	dc.b	smpsNoAttack, $01
0009766B E10A                       	smpsAlterNote       $0A
0009766D E701                       	dc.b	smpsNoAttack, $01
0009766F E110                       	smpsAlterNote       $10
00097671 E701                       	dc.b	smpsNoAttack, $01
00097673 E111                       	smpsAlterNote       $11
00097675 E701                       	dc.b	smpsNoAttack, $01
00097677 E10D                       	smpsAlterNote       $0D
00097679 E701                       	dc.b	smpsNoAttack, $01
0009767B E107                       	smpsAlterNote       $07
0009767D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097681 E10A                       	smpsAlterNote       $0A
00097683 E701                       	dc.b	smpsNoAttack, $01
00097685 E110                       	smpsAlterNote       $10
00097687 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009768B E10A                       	smpsAlterNote       $0A
0009768D E701                       	dc.b	smpsNoAttack, $01
0009768F E107                       	smpsAlterNote       $07
00097691 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097695 E10D                       	smpsAlterNote       $0D
00097697 E701                       	dc.b	smpsNoAttack, $01
00097699 E111                       	smpsAlterNote       $11
0009769B E701                       	dc.b	smpsNoAttack, $01
0009769D E110                       	smpsAlterNote       $10
0009769F E701                       	dc.b	smpsNoAttack, $01
000976A1 E10A                       	smpsAlterNote       $0A
000976A3 E701                       	dc.b	smpsNoAttack, $01
000976A5 E106                       	smpsAlterNote       $06
000976A7 E701                       	dc.b	smpsNoAttack, $01
000976A9 E10A                       	smpsAlterNote       $0A
000976AB E701                       	dc.b	smpsNoAttack, $01
000976AD E10D                       	smpsAlterNote       $0D
000976AF E701                       	dc.b	smpsNoAttack, $01
000976B1 E111                       	smpsAlterNote       $11
000976B3 E701                       	dc.b	smpsNoAttack, $01
000976B5 E10D                       	smpsAlterNote       $0D
000976B7 E701                       	dc.b	smpsNoAttack, $01
000976B9 E107                       	smpsAlterNote       $07
000976BB E701                       	dc.b	smpsNoAttack, $01
000976BD E106                       	smpsAlterNote       $06
000976BF E701                       	dc.b	smpsNoAttack, $01
000976C1 E10A                       	smpsAlterNote       $0A
000976C3 E701                       	dc.b	smpsNoAttack, $01
000976C5 E110                       	smpsAlterNote       $10
000976C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976CB E10D                       	smpsAlterNote       $0D
000976CD E701                       	dc.b	smpsNoAttack, $01
000976CF E107                       	smpsAlterNote       $07
000976D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976D5 E10D                       	smpsAlterNote       $0D
000976D7 E701                       	dc.b	smpsNoAttack, $01
000976D9 E110                       	smpsAlterNote       $10
000976DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976DF E10A                       	smpsAlterNote       $0A
000976E1 E701                       	dc.b	smpsNoAttack, $01
000976E3 E106                       	smpsAlterNote       $06
000976E5 E701                       	dc.b	smpsNoAttack, $01
000976E7 E107                       	smpsAlterNote       $07
000976E9 E701                       	dc.b	smpsNoAttack, $01
000976EB E10D                       	smpsAlterNote       $0D
000976ED E701                       	dc.b	smpsNoAttack, $01
000976EF E111                       	smpsAlterNote       $11
000976F1 E701                       	dc.b	smpsNoAttack, $01
000976F3 E10D                       	smpsAlterNote       $0D
000976F5 E701                       	dc.b	smpsNoAttack, $01
000976F7 E10A                       	smpsAlterNote       $0A
000976F9 E701                       	dc.b	smpsNoAttack, $01
000976FB E107                       	smpsAlterNote       $07
000976FD 8001                       	dc.b	nRst, $01
000976FF E10D                       	smpsAlterNote       $0D
00097701 C206 8001                  	dc.b	nF5, $06, nRst, $01
00097707 E601                       	smpsAlterVol        $01
00097709 E110                       	smpsAlterNote       $10
0009770B BB0D                       	dc.b	nBb4, $0D
0009770D E10A                       	smpsAlterNote       $0A
0009770F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097713 E110                       	smpsAlterNote       $10
00097715 E701                       	dc.b	smpsNoAttack, $01
00097717 E113                       	smpsAlterNote       $13
00097719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009771D E10D                       	smpsAlterNote       $0D
0009771F E701                       	dc.b	smpsNoAttack, $01
00097721 E109                       	smpsAlterNote       $09
00097723 E701                       	dc.b	smpsNoAttack, $01
00097725 E10A                       	smpsAlterNote       $0A
00097727 E701                       	dc.b	smpsNoAttack, $01
00097729 E110                       	smpsAlterNote       $10
0009772B E701                       	dc.b	smpsNoAttack, $01
0009772D E114                       	smpsAlterNote       $14
0009772F E701                       	dc.b	smpsNoAttack, $01
00097731 E110                       	smpsAlterNote       $10
00097733 E701                       	dc.b	smpsNoAttack, $01
00097735 E10D                       	smpsAlterNote       $0D
00097737 E701                       	dc.b	smpsNoAttack, $01
00097739 E109                       	smpsAlterNote       $09
0009773B E701                       	dc.b	smpsNoAttack, $01
0009773D E10A                       	smpsAlterNote       $0A
0009773F 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00097743 E107                       	smpsAlterNote       $07
00097745 E701                       	dc.b	smpsNoAttack, $01
00097747 E103                       	smpsAlterNote       $03
00097749 E701                       	dc.b	smpsNoAttack, $01
0009774B E107                       	smpsAlterNote       $07
0009774D E701                       	dc.b	smpsNoAttack, $01
0009774F E10D                       	smpsAlterNote       $0D
00097751 E701                       	dc.b	smpsNoAttack, $01
00097753 E10E                       	smpsAlterNote       $0E
00097755 E701                       	dc.b	smpsNoAttack, $01
00097757 E10A                       	smpsAlterNote       $0A
00097759 E701                       	dc.b	smpsNoAttack, $01
0009775B E104                       	smpsAlterNote       $04
0009775D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097761 E107                       	smpsAlterNote       $07
00097763 E701                       	dc.b	smpsNoAttack, $01
00097765 E10D                       	smpsAlterNote       $0D
00097767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009776B E107                       	smpsAlterNote       $07
0009776D E701                       	dc.b	smpsNoAttack, $01
0009776F E104                       	smpsAlterNote       $04
00097771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097775 E10B                       	smpsAlterNote       $0B
00097777 BF0D                       	dc.b	nD5, $0D
00097779 E108                       	smpsAlterNote       $08
0009777B E701                       	dc.b	smpsNoAttack, $01
0009777D E105                       	smpsAlterNote       $05
0009777F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097783 E10B                       	smpsAlterNote       $0B
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 E10F                       	smpsAlterNote       $0F
00097789 E701                       	dc.b	smpsNoAttack, $01
0009778B E10E                       	smpsAlterNote       $0E
0009778D E701                       	dc.b	smpsNoAttack, $01
0009778F E108                       	smpsAlterNote       $08
00097791 E701                       	dc.b	smpsNoAttack, $01
00097793 E104                       	smpsAlterNote       $04
00097795 E701                       	dc.b	smpsNoAttack, $01
00097797 E108                       	smpsAlterNote       $08
00097799 E701                       	dc.b	smpsNoAttack, $01
0009779B E10B                       	smpsAlterNote       $0B
0009779D E701                       	dc.b	smpsNoAttack, $01
0009779F E10F                       	smpsAlterNote       $0F
000977A1 E701                       	dc.b	smpsNoAttack, $01
000977A3 E10B                       	smpsAlterNote       $0B
000977A5 E701                       	dc.b	smpsNoAttack, $01
000977A7 E105                       	smpsAlterNote       $05
000977A9 E701                       	dc.b	smpsNoAttack, $01
000977AB E104                       	smpsAlterNote       $04
000977AD E701                       	dc.b	smpsNoAttack, $01
000977AF E105                       	smpsAlterNote       $05
000977B1 8001                       	dc.b	nRst, $01
000977B3 E10C                       	smpsAlterNote       $0C
000977B5 C10C                       	dc.b	nE5, $0C
000977B7 E10D                       	smpsAlterNote       $0D
000977B9 C201                       	dc.b	nF5, $01
000977BB E10E                       	smpsAlterNote       $0E
000977BD C301 8001                  	dc.b	nFs5, $01, nRst, $01
000977C1 E10D                       	smpsAlterNote       $0D
000977C3 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000977C7 E10A                       	smpsAlterNote       $0A
000977C9 E701                       	dc.b	smpsNoAttack, $01
000977CB E106                       	smpsAlterNote       $06
000977CD E701                       	dc.b	smpsNoAttack, $01
000977CF E10A                       	smpsAlterNote       $0A
000977D1 E701                       	dc.b	smpsNoAttack, $01
000977D3 E10D                       	smpsAlterNote       $0D
000977D5 E701                       	dc.b	smpsNoAttack, $01
000977D7 E111                       	smpsAlterNote       $11
000977D9 E701                       	dc.b	smpsNoAttack, $01
000977DB E10D                       	smpsAlterNote       $0D
000977DD E701                       	dc.b	smpsNoAttack, $01
000977DF E107                       	smpsAlterNote       $07
000977E1 E701                       	dc.b	smpsNoAttack, $01
000977E3 E106                       	smpsAlterNote       $06
000977E5 E701                       	dc.b	smpsNoAttack, $01
000977E7 E10A                       	smpsAlterNote       $0A
000977E9 E701                       	dc.b	smpsNoAttack, $01
000977EB E110                       	smpsAlterNote       $10
000977ED E701                       	dc.b	smpsNoAttack, $01
000977EF E111                       	smpsAlterNote       $11
000977F1 8001                       	dc.b	nRst, $01
000977F3 E10D                       	smpsAlterNote       $0D
000977F5 C40D                       	dc.b	nG5, $0D
000977F7 E10A                       	smpsAlterNote       $0A
000977F9 E701                       	dc.b	smpsNoAttack, $01
000977FB E106                       	smpsAlterNote       $06
000977FD E701                       	dc.b	smpsNoAttack, $01
000977FF E10A                       	smpsAlterNote       $0A
00097801 E701                       	dc.b	smpsNoAttack, $01
00097803 E10D                       	smpsAlterNote       $0D
00097805 E701                       	dc.b	smpsNoAttack, $01
00097807 E10C                       	smpsAlterNote       $0C
00097809 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097815 8001                       	dc.b	nRst, $01
00097817 E10D                       	smpsAlterNote       $0D
00097819 C20D                       	dc.b	nF5, $0D
0009781B E10A                       	smpsAlterNote       $0A
0009781D E701                       	dc.b	smpsNoAttack, $01
0009781F E106                       	smpsAlterNote       $06
00097821 E701                       	dc.b	smpsNoAttack, $01
00097823 E10A                       	smpsAlterNote       $0A
00097825 E701                       	dc.b	smpsNoAttack, $01
00097827 E110                       	smpsAlterNote       $10
00097829 E701                       	dc.b	smpsNoAttack, $01
0009782B E111                       	smpsAlterNote       $11
0009782D E701                       	dc.b	smpsNoAttack, $01
0009782F E10D                       	smpsAlterNote       $0D
00097831 E701                       	dc.b	smpsNoAttack, $01
00097833 E107                       	smpsAlterNote       $07
00097835 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097839 E10A                       	smpsAlterNote       $0A
0009783B E701                       	dc.b	smpsNoAttack, $01
0009783D E110                       	smpsAlterNote       $10
0009783F E701                       	dc.b	smpsNoAttack, $01
00097841 E111                       	smpsAlterNote       $11
00097843 8001                       	dc.b	nRst, $01
00097845 E10F                       	smpsAlterNote       $0F
00097847 C60A                       	dc.b	nA5, $0A
00097849 E10D                       	smpsAlterNote       $0D
0009784B C406 8001                  	dc.b	nG5, $06, nRst, $01
0009784F E10C                       	smpsAlterNote       $0C
00097851 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009785D 8001                       	dc.b	nRst, $01
0009785F E10D                       	smpsAlterNote       $0D
00097861 C20D                       	dc.b	nF5, $0D
00097863 E107                       	smpsAlterNote       $07
00097865 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097869 E10A                       	smpsAlterNote       $0A
0009786B E701                       	dc.b	smpsNoAttack, $01
0009786D E110                       	smpsAlterNote       $10
0009786F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097873 E10A                       	smpsAlterNote       $0A
00097875 E701                       	dc.b	smpsNoAttack, $01
00097877 E107                       	smpsAlterNote       $07
00097879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009787D E10D                       	smpsAlterNote       $0D
0009787F E701                       	dc.b	smpsNoAttack, $01
00097881 E111                       	smpsAlterNote       $11
00097883 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097887 E10D                       	smpsAlterNote       $0D
00097889 C40D                       	dc.b	nG5, $0D
0009788B E107                       	smpsAlterNote       $07
0009788D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097891 E10A                       	smpsAlterNote       $0A
00097893 E701                       	dc.b	smpsNoAttack, $01
00097895 E10D                       	smpsAlterNote       $0D
00097897 8001                       	dc.b	nRst, $01
00097899 E10C                       	smpsAlterNote       $0C
0009789B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000978A7 E10D                       	smpsAlterNote       $0D
000978A9 C20E                       	dc.b	nF5, $0E
000978AB E107                       	smpsAlterNote       $07
000978AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978B1 E10D                       	smpsAlterNote       $0D
000978B3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000978B9 E0C0                       	smpsPan             panCenter, $00
000978BB E603                       	smpsAlterVol        $03
000978BD E108                       	smpsAlterNote       $08
000978BF B406                       	dc.b	nEb4, $06
000978C1 E10C                       	smpsAlterNote       $0C
000978C3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000978C7 E108                       	smpsAlterNote       $08
000978C9 B403                       	dc.b	nEb4, $03
000978CB E109                       	smpsAlterNote       $09
000978CD B803 8001                  	dc.b	nG4, $03, nRst, $01
000978D1 E10C                       	smpsAlterNote       $0C
000978D3 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000978DB 03                         	dc.b	$03
000978DC E6FD                       	smpsAlterVol        $FD
000978DE F6F1 F4                    	smpsJump            music84_Jump00
000978E1                            
000978E1                            ; PSG1 Data
000978E1                            music84_PSG1:
000978E1 E1FD                       	smpsAlterNote       $FD
000978E3 EC04                       	smpsPSGAlterVol     $04
000978E5 9203                       	dc.b	nF1, $03
000978E7 E1FE                       	smpsAlterNote       $FE
000978E9 9603                       	dc.b	nA1, $03
000978EB EC04                       	smpsPSGAlterVol     $04
000978ED E701                       	dc.b	smpsNoAttack, $01
000978EF E1FF                       	smpsAlterNote       $FF
000978F1 ECFC                       	smpsPSGAlterVol     $FC
000978F3 9B03                       	dc.b	nD2, $03
000978F5 E1FD                       	smpsAlterNote       $FD
000978F7 9403                       	dc.b	nG1, $03
000978F9 EC04                       	smpsPSGAlterVol     $04
000978FB E701                       	dc.b	smpsNoAttack, $01
000978FD E1FE                       	smpsAlterNote       $FE
000978FF ECFC                       	smpsPSGAlterVol     $FC
00097901 9703                       	dc.b	nBb1, $03
00097903 E1FF                       	smpsAlterNote       $FF
00097905 9B03                       	dc.b	nD2, $03
00097907 EC04                       	smpsPSGAlterVol     $04
00097909 E701                       	dc.b	smpsNoAttack, $01
0009790B E1FE                       	smpsAlterNote       $FE
0009790D ECFC                       	smpsPSGAlterVol     $FC
0009790F A002                       	dc.b	nG2, $02
00097911 EC04                       	smpsPSGAlterVol     $04
00097913 E701                       	dc.b	smpsNoAttack, $01
00097915 E1FF                       	smpsAlterNote       $FF
00097917 ECFC                       	smpsPSGAlterVol     $FC
00097919 A203                       	dc.b	nA2, $03
0009791B EC0B                       	smpsPSGAlterVol     $0B
0009791D 800A                       	dc.b	nRst, $0A
0009791F E105                       	smpsAlterNote       $05
00097921 01                         	dc.b	$01
00097922 E1FC                       	smpsAlterNote       $FC
00097924 01                         	dc.b	$01
00097925 E105                       	smpsAlterNote       $05
00097927 01                         	dc.b	$01
00097928 E1FD                       	smpsAlterNote       $FD
0009792A 01                         	dc.b	$01
0009792B E105                       	smpsAlterNote       $05
0009792D 01                         	dc.b	$01
0009792E E1FD                       	smpsAlterNote       $FD
00097930 01                         	dc.b	$01
00097931 E1FA                       	smpsAlterNote       $FA
00097933 01                         	dc.b	$01
00097934 E1FC                       	smpsAlterNote       $FC
00097936 01                         	dc.b	$01
00097937 E105                       	smpsAlterNote       $05
00097939 01                         	dc.b	$01
0009793A E108                       	smpsAlterNote       $08
0009793C 0101                       	dc.b	$01, $01
0009793E E105                       	smpsAlterNote       $05
00097940 01                         	dc.b	$01
00097941 E1FA                       	smpsAlterNote       $FA
00097943 0101                       	dc.b	$01, $01
00097945 E1FD                       	smpsAlterNote       $FD
00097947 01                         	dc.b	$01
00097948 E105                       	smpsAlterNote       $05
0009794A 01                         	dc.b	$01
0009794B E108                       	smpsAlterNote       $08
0009794D 01                         	dc.b	$01
0009794E E105                       	smpsAlterNote       $05
00097950 01                         	dc.b	$01
00097951 E1FC                       	smpsAlterNote       $FC
00097953 01                         	dc.b	$01
00097954 E105                       	smpsAlterNote       $05
00097956 01                         	dc.b	$01
00097957 E1FD                       	smpsAlterNote       $FD
00097959 01                         	dc.b	$01
0009795A                            
0009795A                            music84_Jump07:
0009795A E105                       	smpsAlterNote       $05
0009795C 8001                       	dc.b	nRst, $01
0009795E E1FD                       	smpsAlterNote       $FD
00097960 01                         	dc.b	$01
00097961 E1FA                       	smpsAlterNote       $FA
00097963 01                         	dc.b	$01
00097964 E1FC                       	smpsAlterNote       $FC
00097966 01                         	dc.b	$01
00097967 E1FD                       	smpsAlterNote       $FD
00097969 ECF5                       	smpsPSGAlterVol     $F5
0009796B 9206                       	dc.b	nF1, $06
0009796D EC04                       	smpsPSGAlterVol     $04
0009796F E701                       	dc.b	smpsNoAttack, $01
00097971 EC07                       	smpsPSGAlterVol     $07
00097973 8003                       	dc.b	nRst, $03
00097975 ECF5                       	smpsPSGAlterVol     $F5
00097977 9206                       	dc.b	nF1, $06
00097979 EC04                       	smpsPSGAlterVol     $04
0009797B E701                       	dc.b	smpsNoAttack, $01
0009797D EC07                       	smpsPSGAlterVol     $07
0009797F 8006                       	dc.b	nRst, $06
00097981 E100                       	smpsAlterNote       $00
00097983 01                         	dc.b	$01
00097984 E104                       	smpsAlterNote       $04
00097986 01                         	dc.b	$01
00097987 E100                       	smpsAlterNote       $00
00097989 01                         	dc.b	$01
0009798A E1FB                       	smpsAlterNote       $FB
0009798C 01                         	dc.b	$01
0009798D E1FD                       	smpsAlterNote       $FD
0009798F ECF5                       	smpsPSGAlterVol     $F5
00097991 9406                       	dc.b	nG1, $06
00097993 EC04                       	smpsPSGAlterVol     $04
00097995 E701                       	dc.b	smpsNoAttack, $01
00097997 EC07                       	smpsPSGAlterVol     $07
00097999 8003                       	dc.b	nRst, $03
0009799B ECF5                       	smpsPSGAlterVol     $F5
0009799D 9407                       	dc.b	nG1, $07
0009799F EC0B                       	smpsPSGAlterVol     $0B
000979A1 8006                       	dc.b	nRst, $06
000979A3 E100                       	smpsAlterNote       $00
000979A5 01                         	dc.b	$01
000979A6 E103                       	smpsAlterNote       $03
000979A8 0101                       	dc.b	$01, $01
000979AA E1FD                       	smpsAlterNote       $FD
000979AC 01                         	dc.b	$01
000979AD ECF5                       	smpsPSGAlterVol     $F5
000979AF 9207                       	dc.b	nF1, $07
000979B1 EC0B                       	smpsPSGAlterVol     $0B
000979B3 8004                       	dc.b	nRst, $04
000979B5 ECF5                       	smpsPSGAlterVol     $F5
000979B7 9206                       	dc.b	nF1, $06
000979B9 EC04                       	smpsPSGAlterVol     $04
000979BB E701                       	dc.b	smpsNoAttack, $01
000979BD EC07                       	smpsPSGAlterVol     $07
000979BF 8006                       	dc.b	nRst, $06
000979C1 E103                       	smpsAlterNote       $03
000979C3 01                         	dc.b	$01
000979C4 E104                       	smpsAlterNote       $04
000979C6 01                         	dc.b	$01
000979C7 E100                       	smpsAlterNote       $00
000979C9 01                         	dc.b	$01
000979CA E1FA                       	smpsAlterNote       $FA
000979CC 01                         	dc.b	$01
000979CD E1FD                       	smpsAlterNote       $FD
000979CF ECF5                       	smpsPSGAlterVol     $F5
000979D1 9206                       	dc.b	nF1, $06
000979D3 EC04                       	smpsPSGAlterVol     $04
000979D5 E701                       	dc.b	smpsNoAttack, $01
000979D7 EC07                       	smpsPSGAlterVol     $07
000979D9 8003                       	dc.b	nRst, $03
000979DB ECF5                       	smpsPSGAlterVol     $F5
000979DD 9106                       	dc.b	nE1, $06
000979DF EC04                       	smpsPSGAlterVol     $04
000979E1 E701                       	dc.b	smpsNoAttack, $01
000979E3 EC07                       	smpsPSGAlterVol     $07
000979E5 8006                       	dc.b	nRst, $06
000979E7 E100                       	smpsAlterNote       $00
000979E9 01                         	dc.b	$01
000979EA E104                       	smpsAlterNote       $04
000979EC 01                         	dc.b	$01
000979ED E100                       	smpsAlterNote       $00
000979EF 01                         	dc.b	$01
000979F0 E1FD                       	smpsAlterNote       $FD
000979F2 01                         	dc.b	$01
000979F3 ECF5                       	smpsPSGAlterVol     $F5
000979F5 9206                       	dc.b	nF1, $06
000979F7 EC04                       	smpsPSGAlterVol     $04
000979F9 E701                       	dc.b	smpsNoAttack, $01
000979FB EC07                       	smpsPSGAlterVol     $07
000979FD 8003                       	dc.b	nRst, $03
000979FF ECF5                       	smpsPSGAlterVol     $F5
00097A01 9207                       	dc.b	nF1, $07
00097A03 EC0B                       	smpsPSGAlterVol     $0B
00097A05 8007                       	dc.b	nRst, $07
00097A07 E103                       	smpsAlterNote       $03
00097A09 0101                       	dc.b	$01, $01
00097A0B E1FD                       	smpsAlterNote       $FD
00097A0D 01                         	dc.b	$01
00097A0E E1FB                       	smpsAlterNote       $FB
00097A10 01                         	dc.b	$01
00097A11 E1FD                       	smpsAlterNote       $FD
00097A13 ECF5                       	smpsPSGAlterVol     $F5
00097A15 9406                       	dc.b	nG1, $06
00097A17 EC0B                       	smpsPSGAlterVol     $0B
00097A19 8004                       	dc.b	nRst, $04
00097A1B ECF5                       	smpsPSGAlterVol     $F5
00097A1D 9406                       	dc.b	nG1, $06
00097A1F EC04                       	smpsPSGAlterVol     $04
00097A21 E701                       	dc.b	smpsNoAttack, $01
00097A23 EC07                       	smpsPSGAlterVol     $07
00097A25 8006                       	dc.b	nRst, $06
00097A27 E100                       	smpsAlterNote       $00
00097A29 01                         	dc.b	$01
00097A2A E104                       	smpsAlterNote       $04
00097A2C 01                         	dc.b	$01
00097A2D E100                       	smpsAlterNote       $00
00097A2F 01                         	dc.b	$01
00097A30 E1F9                       	smpsAlterNote       $F9
00097A32 01                         	dc.b	$01
00097A33 E1FD                       	smpsAlterNote       $FD
00097A35 ECF5                       	smpsPSGAlterVol     $F5
00097A37 9206                       	dc.b	nF1, $06
00097A39 EC04                       	smpsPSGAlterVol     $04
00097A3B E701                       	dc.b	smpsNoAttack, $01
00097A3D EC07                       	smpsPSGAlterVol     $07
00097A3F 8003                       	dc.b	nRst, $03
00097A41 ECF5                       	smpsPSGAlterVol     $F5
00097A43 9207                       	dc.b	nF1, $07
00097A45 EC0B                       	smpsPSGAlterVol     $0B
00097A47 8006                       	dc.b	nRst, $06
00097A49 E100                       	smpsAlterNote       $00
00097A4B 01                         	dc.b	$01
00097A4C E104                       	smpsAlterNote       $04
00097A4E 01                         	dc.b	$01
00097A4F E103                       	smpsAlterNote       $03
00097A51 01                         	dc.b	$01
00097A52 E1FD                       	smpsAlterNote       $FD
00097A54 01                         	dc.b	$01
00097A55 ECF5                       	smpsPSGAlterVol     $F5
00097A57 9207                       	dc.b	nF1, $07
00097A59 EC0B                       	smpsPSGAlterVol     $0B
00097A5B 8004                       	dc.b	nRst, $04
00097A5D ECF5                       	smpsPSGAlterVol     $F5
00097A5F 9206                       	dc.b	nF1, $06
00097A61 EC0B                       	smpsPSGAlterVol     $0B
00097A63 8007                       	dc.b	nRst, $07
00097A65 E103                       	smpsAlterNote       $03
00097A67 0101                       	dc.b	$01, $01
00097A69 E100                       	smpsAlterNote       $00
00097A6B 01                         	dc.b	$01
00097A6C E1FA                       	smpsAlterNote       $FA
00097A6E 01                         	dc.b	$01
00097A6F E1FD                       	smpsAlterNote       $FD
00097A71 ECF5                       	smpsPSGAlterVol     $F5
00097A73 9206                       	dc.b	nF1, $06
00097A75 EC04                       	smpsPSGAlterVol     $04
00097A77 E701                       	dc.b	smpsNoAttack, $01
00097A79 EC07                       	smpsPSGAlterVol     $07
00097A7B 8003                       	dc.b	nRst, $03
00097A7D ECF5                       	smpsPSGAlterVol     $F5
00097A7F 9206                       	dc.b	nF1, $06
00097A81 EC04                       	smpsPSGAlterVol     $04
00097A83 E701                       	dc.b	smpsNoAttack, $01
00097A85 EC07                       	smpsPSGAlterVol     $07
00097A87 8006                       	dc.b	nRst, $06
00097A89 E100                       	smpsAlterNote       $00
00097A8B 01                         	dc.b	$01
00097A8C E104                       	smpsAlterNote       $04
00097A8E 01                         	dc.b	$01
00097A8F E100                       	smpsAlterNote       $00
00097A91 01                         	dc.b	$01
00097A92 E1FD                       	smpsAlterNote       $FD
00097A94 01                         	dc.b	$01
00097A95 ECF5                       	smpsPSGAlterVol     $F5
00097A97 9206                       	dc.b	nF1, $06
00097A99 EC04                       	smpsPSGAlterVol     $04
00097A9B E701                       	dc.b	smpsNoAttack, $01
00097A9D EC07                       	smpsPSGAlterVol     $07
00097A9F 8003                       	dc.b	nRst, $03
00097AA1 ECF5                       	smpsPSGAlterVol     $F5
00097AA3 9207                       	dc.b	nF1, $07
00097AA5 EC0B                       	smpsPSGAlterVol     $0B
00097AA7 8007                       	dc.b	nRst, $07
00097AA9 E103                       	smpsAlterNote       $03
00097AAB 0101                       	dc.b	$01, $01
00097AAD E1FD                       	smpsAlterNote       $FD
00097AAF 01                         	dc.b	$01
00097AB0 E1FA                       	smpsAlterNote       $FA
00097AB2 01                         	dc.b	$01
00097AB3 E1FD                       	smpsAlterNote       $FD
00097AB5 ECF5                       	smpsPSGAlterVol     $F5
00097AB7 9206                       	dc.b	nF1, $06
00097AB9 EC0B                       	smpsPSGAlterVol     $0B
00097ABB 8004                       	dc.b	nRst, $04
00097ABD ECF5                       	smpsPSGAlterVol     $F5
00097ABF 9206                       	dc.b	nF1, $06
00097AC1 EC04                       	smpsPSGAlterVol     $04
00097AC3 E701                       	dc.b	smpsNoAttack, $01
00097AC5 EC07                       	smpsPSGAlterVol     $07
00097AC7 8006                       	dc.b	nRst, $06
00097AC9 E103                       	smpsAlterNote       $03
00097ACB 01                         	dc.b	$01
00097ACC E104                       	smpsAlterNote       $04
00097ACE 01                         	dc.b	$01
00097ACF E100                       	smpsAlterNote       $00
00097AD1 01                         	dc.b	$01
00097AD2 E1FA                       	smpsAlterNote       $FA
00097AD4 01                         	dc.b	$01
00097AD5 E1FD                       	smpsAlterNote       $FD
00097AD7 ECF5                       	smpsPSGAlterVol     $F5
00097AD9 9206                       	dc.b	nF1, $06
00097ADB EC04                       	smpsPSGAlterVol     $04
00097ADD E701                       	dc.b	smpsNoAttack, $01
00097ADF EC07                       	smpsPSGAlterVol     $07
00097AE1 8003                       	dc.b	nRst, $03
00097AE3 ECF5                       	smpsPSGAlterVol     $F5
00097AE5 9206                       	dc.b	nF1, $06
00097AE7 EC04                       	smpsPSGAlterVol     $04
00097AE9 E701                       	dc.b	smpsNoAttack, $01
00097AEB EC07                       	smpsPSGAlterVol     $07
00097AED 8006                       	dc.b	nRst, $06
00097AEF E100                       	smpsAlterNote       $00
00097AF1 01                         	dc.b	$01
00097AF2 E104                       	smpsAlterNote       $04
00097AF4 01                         	dc.b	$01
00097AF5 E103                       	smpsAlterNote       $03
00097AF7 01                         	dc.b	$01
00097AF8 E1FD                       	smpsAlterNote       $FD
00097AFA 01                         	dc.b	$01
00097AFB ECF5                       	smpsPSGAlterVol     $F5
00097AFD 9107                       	dc.b	nE1, $07
00097AFF EC0B                       	smpsPSGAlterVol     $0B
00097B01 8004                       	dc.b	nRst, $04
00097B03 ECF5                       	smpsPSGAlterVol     $F5
00097B05 9106                       	dc.b	nE1, $06
00097B07 EC0B                       	smpsPSGAlterVol     $0B
00097B09 8007                       	dc.b	nRst, $07
00097B0B E103                       	smpsAlterNote       $03
00097B0D 0101                       	dc.b	$01, $01
00097B0F E100                       	smpsAlterNote       $00
00097B11 01                         	dc.b	$01
00097B12 E1FA                       	smpsAlterNote       $FA
00097B14 01                         	dc.b	$01
00097B15 E1FD                       	smpsAlterNote       $FD
00097B17 ECF5                       	smpsPSGAlterVol     $F5
00097B19 9106                       	dc.b	nE1, $06
00097B1B EC04                       	smpsPSGAlterVol     $04
00097B1D E701                       	dc.b	smpsNoAttack, $01
00097B1F EC07                       	smpsPSGAlterVol     $07
00097B21 8003                       	dc.b	nRst, $03
00097B23 ECF5                       	smpsPSGAlterVol     $F5
00097B25 9106                       	dc.b	nE1, $06
00097B27 EC04                       	smpsPSGAlterVol     $04
00097B29 E701                       	dc.b	smpsNoAttack, $01
00097B2B EC07                       	smpsPSGAlterVol     $07
00097B2D 8006                       	dc.b	nRst, $06
00097B2F E100                       	smpsAlterNote       $00
00097B31 01                         	dc.b	$01
00097B32 E104                       	smpsAlterNote       $04
00097B34 01                         	dc.b	$01
00097B35 E100                       	smpsAlterNote       $00
00097B37 01                         	dc.b	$01
00097B38 E1FA                       	smpsAlterNote       $FA
00097B3A 01                         	dc.b	$01
00097B3B E1FD                       	smpsAlterNote       $FD
00097B3D ECF5                       	smpsPSGAlterVol     $F5
00097B3F 9106                       	dc.b	nE1, $06
00097B41 EC04                       	smpsPSGAlterVol     $04
00097B43 E701                       	dc.b	smpsNoAttack, $01
00097B45 EC07                       	smpsPSGAlterVol     $07
00097B47 8003                       	dc.b	nRst, $03
00097B49 ECF5                       	smpsPSGAlterVol     $F5
00097B4B 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097B4F EC04                       	smpsPSGAlterVol     $04
00097B51 E701                       	dc.b	smpsNoAttack, $01
00097B53 ECFC                       	smpsPSGAlterVol     $FC
00097B55 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097B59 EC04                       	smpsPSGAlterVol     $04
00097B5B E701                       	dc.b	smpsNoAttack, $01
00097B5D ECFC                       	smpsPSGAlterVol     $FC
00097B5F 9106                       	dc.b	nE1, $06
00097B61 EC04                       	smpsPSGAlterVol     $04
00097B63 E701                       	dc.b	smpsNoAttack, $01
00097B65 EC07                       	smpsPSGAlterVol     $07
00097B67 8006                       	dc.b	nRst, $06
00097B69 E100                       	smpsAlterNote       $00
00097B6B 01                         	dc.b	$01
00097B6C E104                       	smpsAlterNote       $04
00097B6E 01                         	dc.b	$01
00097B6F E100                       	smpsAlterNote       $00
00097B71 01                         	dc.b	$01
00097B72 E1FA                       	smpsAlterNote       $FA
00097B74 01                         	dc.b	$01
00097B75 E1F9                       	smpsAlterNote       $F9
00097B77 01                         	dc.b	$01
00097B78 E1FD                       	smpsAlterNote       $FD
00097B7A 01                         	dc.b	$01
00097B7B E103                       	smpsAlterNote       $03
00097B7D 01                         	dc.b	$01
00097B7E E104                       	smpsAlterNote       $04
00097B80 01                         	dc.b	$01
00097B81 E100                       	smpsAlterNote       $00
00097B83 01                         	dc.b	$01
00097B84 E1FA                       	smpsAlterNote       $FA
00097B86 0101                       	dc.b	$01, $01
00097B88 E1FD                       	smpsAlterNote       $FD
00097B8A ECF5                       	smpsPSGAlterVol     $F5
00097B8C 9206                       	dc.b	nF1, $06
00097B8E EC04                       	smpsPSGAlterVol     $04
00097B90 E701                       	dc.b	smpsNoAttack, $01
00097B92 EC07                       	smpsPSGAlterVol     $07
00097B94 8003                       	dc.b	nRst, $03
00097B96 ECF5                       	smpsPSGAlterVol     $F5
00097B98 9206                       	dc.b	nF1, $06
00097B9A EC04                       	smpsPSGAlterVol     $04
00097B9C E701                       	dc.b	smpsNoAttack, $01
00097B9E EC07                       	smpsPSGAlterVol     $07
00097BA0 8006                       	dc.b	nRst, $06
00097BA2 E100                       	smpsAlterNote       $00
00097BA4 01                         	dc.b	$01
00097BA5 E104                       	smpsAlterNote       $04
00097BA7 01                         	dc.b	$01
00097BA8 E103                       	smpsAlterNote       $03
00097BAA 01                         	dc.b	$01
00097BAB E1FD                       	smpsAlterNote       $FD
00097BAD 01                         	dc.b	$01
00097BAE ECF5                       	smpsPSGAlterVol     $F5
00097BB0 9407                       	dc.b	nG1, $07
00097BB2 EC0B                       	smpsPSGAlterVol     $0B
00097BB4 8004                       	dc.b	nRst, $04
00097BB6 ECF5                       	smpsPSGAlterVol     $F5
00097BB8 9406                       	dc.b	nG1, $06
00097BBA EC0B                       	smpsPSGAlterVol     $0B
00097BBC 8007                       	dc.b	nRst, $07
00097BBE E103                       	smpsAlterNote       $03
00097BC0 0101                       	dc.b	$01, $01
00097BC2 E1FD                       	smpsAlterNote       $FD
00097BC4 01                         	dc.b	$01
00097BC5 E1F9                       	smpsAlterNote       $F9
00097BC7 01                         	dc.b	$01
00097BC8 E1FD                       	smpsAlterNote       $FD
00097BCA ECF5                       	smpsPSGAlterVol     $F5
00097BCC 9206                       	dc.b	nF1, $06
00097BCE EC04                       	smpsPSGAlterVol     $04
00097BD0 E701                       	dc.b	smpsNoAttack, $01
00097BD2 EC07                       	smpsPSGAlterVol     $07
00097BD4 8003                       	dc.b	nRst, $03
00097BD6 ECF5                       	smpsPSGAlterVol     $F5
00097BD8 9206                       	dc.b	nF1, $06
00097BDA EC04                       	smpsPSGAlterVol     $04
00097BDC E701                       	dc.b	smpsNoAttack, $01
00097BDE EC07                       	smpsPSGAlterVol     $07
00097BE0 8006                       	dc.b	nRst, $06
00097BE2 E100                       	smpsAlterNote       $00
00097BE4 01                         	dc.b	$01
00097BE5 E104                       	smpsAlterNote       $04
00097BE7 01                         	dc.b	$01
00097BE8 E100                       	smpsAlterNote       $00
00097BEA 01                         	dc.b	$01
00097BEB E1FA                       	smpsAlterNote       $FA
00097BED 01                         	dc.b	$01
00097BEE E1FD                       	smpsAlterNote       $FD
00097BF0 ECF5                       	smpsPSGAlterVol     $F5
00097BF2 9206                       	dc.b	nF1, $06
00097BF4 EC04                       	smpsPSGAlterVol     $04
00097BF6 E701                       	dc.b	smpsNoAttack, $01
00097BF8 EC07                       	smpsPSGAlterVol     $07
00097BFA 8003                       	dc.b	nRst, $03
00097BFC ECF5                       	smpsPSGAlterVol     $F5
00097BFE 9107                       	dc.b	nE1, $07
00097C00 EC0B                       	smpsPSGAlterVol     $0B
00097C02 8006                       	dc.b	nRst, $06
00097C04 E100                       	smpsAlterNote       $00
00097C06 01                         	dc.b	$01
00097C07 E103                       	smpsAlterNote       $03
00097C09 0101                       	dc.b	$01, $01
00097C0B E1FD                       	smpsAlterNote       $FD
00097C0D 01                         	dc.b	$01
00097C0E ECF5                       	smpsPSGAlterVol     $F5
00097C10 9207                       	dc.b	nF1, $07
00097C12 EC0B                       	smpsPSGAlterVol     $0B
00097C14 8004                       	dc.b	nRst, $04
00097C16 ECF5                       	smpsPSGAlterVol     $F5
00097C18 9206                       	dc.b	nF1, $06
00097C1A EC04                       	smpsPSGAlterVol     $04
00097C1C E701                       	dc.b	smpsNoAttack, $01
00097C1E EC07                       	smpsPSGAlterVol     $07
00097C20 8006                       	dc.b	nRst, $06
00097C22 E103                       	smpsAlterNote       $03
00097C24 01                         	dc.b	$01
00097C25 E104                       	smpsAlterNote       $04
00097C27 01                         	dc.b	$01
00097C28 E100                       	smpsAlterNote       $00
00097C2A 01                         	dc.b	$01
00097C2B E1FB                       	smpsAlterNote       $FB
00097C2D 01                         	dc.b	$01
00097C2E E1FD                       	smpsAlterNote       $FD
00097C30 ECF5                       	smpsPSGAlterVol     $F5
00097C32 9406                       	dc.b	nG1, $06
00097C34 EC04                       	smpsPSGAlterVol     $04
00097C36 E701                       	dc.b	smpsNoAttack, $01
00097C38 EC07                       	smpsPSGAlterVol     $07
00097C3A 8003                       	dc.b	nRst, $03
00097C3C ECF5                       	smpsPSGAlterVol     $F5
00097C3E 9406                       	dc.b	nG1, $06
00097C40 EC04                       	smpsPSGAlterVol     $04
00097C42 E701                       	dc.b	smpsNoAttack, $01
00097C44 EC07                       	smpsPSGAlterVol     $07
00097C46 8006                       	dc.b	nRst, $06
00097C48 E100                       	smpsAlterNote       $00
00097C4A 01                         	dc.b	$01
00097C4B E104                       	smpsAlterNote       $04
00097C4D 01                         	dc.b	$01
00097C4E E100                       	smpsAlterNote       $00
00097C50 01                         	dc.b	$01
00097C51 E1FD                       	smpsAlterNote       $FD
00097C53 01                         	dc.b	$01
00097C54 ECF5                       	smpsPSGAlterVol     $F5
00097C56 9206                       	dc.b	nF1, $06
00097C58 EC04                       	smpsPSGAlterVol     $04
00097C5A E701                       	dc.b	smpsNoAttack, $01
00097C5C EC07                       	smpsPSGAlterVol     $07
00097C5E 8003                       	dc.b	nRst, $03
00097C60 ECF5                       	smpsPSGAlterVol     $F5
00097C62 9207                       	dc.b	nF1, $07
00097C64 EC0B                       	smpsPSGAlterVol     $0B
00097C66 8007                       	dc.b	nRst, $07
00097C68 E103                       	smpsAlterNote       $03
00097C6A 0101                       	dc.b	$01, $01
00097C6C E1FD                       	smpsAlterNote       $FD
00097C6E 01                         	dc.b	$01
00097C6F E1FA                       	smpsAlterNote       $FA
00097C71 01                         	dc.b	$01
00097C72 E1FD                       	smpsAlterNote       $FD
00097C74 ECF5                       	smpsPSGAlterVol     $F5
00097C76 9206                       	dc.b	nF1, $06
00097C78 EC0B                       	smpsPSGAlterVol     $0B
00097C7A 8004                       	dc.b	nRst, $04
00097C7C ECF5                       	smpsPSGAlterVol     $F5
00097C7E 9206                       	dc.b	nF1, $06
00097C80 EC04                       	smpsPSGAlterVol     $04
00097C82 E701                       	dc.b	smpsNoAttack, $01
00097C84 EC07                       	smpsPSGAlterVol     $07
00097C86 8006                       	dc.b	nRst, $06
00097C88 E100                       	smpsAlterNote       $00
00097C8A 01                         	dc.b	$01
00097C8B E104                       	smpsAlterNote       $04
00097C8D 01                         	dc.b	$01
00097C8E E100                       	smpsAlterNote       $00
00097C90 01                         	dc.b	$01
00097C91 E1FA                       	smpsAlterNote       $FA
00097C93 01                         	dc.b	$01
00097C94 E1FD                       	smpsAlterNote       $FD
00097C96 ECF5                       	smpsPSGAlterVol     $F5
00097C98 9206                       	dc.b	nF1, $06
00097C9A EC04                       	smpsPSGAlterVol     $04
00097C9C E704                       	dc.b	smpsNoAttack, $04
00097C9E ECFC                       	smpsPSGAlterVol     $FC
00097CA0 9207                       	dc.b	nF1, $07
00097CA2 EC0B                       	smpsPSGAlterVol     $0B
00097CA4 8006                       	dc.b	nRst, $06
00097CA6 E100                       	smpsAlterNote       $00
00097CA8 01                         	dc.b	$01
00097CA9 E104                       	smpsAlterNote       $04
00097CAB 01                         	dc.b	$01
00097CAC E103                       	smpsAlterNote       $03
00097CAE 01                         	dc.b	$01
00097CAF E1FD                       	smpsAlterNote       $FD
00097CB1 01                         	dc.b	$01
00097CB2 ECF5                       	smpsPSGAlterVol     $F5
00097CB4 9207                       	dc.b	nF1, $07
00097CB6 EC0B                       	smpsPSGAlterVol     $0B
00097CB8 8004                       	dc.b	nRst, $04
00097CBA ECF5                       	smpsPSGAlterVol     $F5
00097CBC 9206                       	dc.b	nF1, $06
00097CBE EC0B                       	smpsPSGAlterVol     $0B
00097CC0 8007                       	dc.b	nRst, $07
00097CC2 E103                       	smpsAlterNote       $03
00097CC4 0101                       	dc.b	$01, $01
00097CC6 E100                       	smpsAlterNote       $00
00097CC8 01                         	dc.b	$01
00097CC9 E1FA                       	smpsAlterNote       $FA
00097CCB 01                         	dc.b	$01
00097CCC E1FD                       	smpsAlterNote       $FD
00097CCE ECF5                       	smpsPSGAlterVol     $F5
00097CD0 9206                       	dc.b	nF1, $06
00097CD2 EC04                       	smpsPSGAlterVol     $04
00097CD4 E704                       	dc.b	smpsNoAttack, $04
00097CD6 ECFC                       	smpsPSGAlterVol     $FC
00097CD8 9206                       	dc.b	nF1, $06
00097CDA EC04                       	smpsPSGAlterVol     $04
00097CDC E701                       	dc.b	smpsNoAttack, $01
00097CDE EC07                       	smpsPSGAlterVol     $07
00097CE0 8006                       	dc.b	nRst, $06
00097CE2 E100                       	smpsAlterNote       $00
00097CE4 01                         	dc.b	$01
00097CE5 E104                       	smpsAlterNote       $04
00097CE7 01                         	dc.b	$01
00097CE8 E100                       	smpsAlterNote       $00
00097CEA 01                         	dc.b	$01
00097CEB E1FD                       	smpsAlterNote       $FD
00097CED 01                         	dc.b	$01
00097CEE ECF5                       	smpsPSGAlterVol     $F5
00097CF0 9206                       	dc.b	nF1, $06
00097CF2 EC04                       	smpsPSGAlterVol     $04
00097CF4 E701                       	dc.b	smpsNoAttack, $01
00097CF6 EC07                       	smpsPSGAlterVol     $07
00097CF8 8003                       	dc.b	nRst, $03
00097CFA ECF5                       	smpsPSGAlterVol     $F5
00097CFC 9207                       	dc.b	nF1, $07
00097CFE EC0B                       	smpsPSGAlterVol     $0B
00097D00 8007                       	dc.b	nRst, $07
00097D02 E103                       	smpsAlterNote       $03
00097D04 0101                       	dc.b	$01, $01
00097D06 E1FD                       	smpsAlterNote       $FD
00097D08 01                         	dc.b	$01
00097D09 E1FA                       	smpsAlterNote       $FA
00097D0B 01                         	dc.b	$01
00097D0C E1FD                       	smpsAlterNote       $FD
00097D0E ECF5                       	smpsPSGAlterVol     $F5
00097D10 9106                       	dc.b	nE1, $06
00097D12 EC0B                       	smpsPSGAlterVol     $0B
00097D14 8004                       	dc.b	nRst, $04
00097D16 ECF5                       	smpsPSGAlterVol     $F5
00097D18 9106                       	dc.b	nE1, $06
00097D1A EC04                       	smpsPSGAlterVol     $04
00097D1C E701                       	dc.b	smpsNoAttack, $01
00097D1E EC07                       	smpsPSGAlterVol     $07
00097D20 8006                       	dc.b	nRst, $06
00097D22 E100                       	smpsAlterNote       $00
00097D24 01                         	dc.b	$01
00097D25 E104                       	smpsAlterNote       $04
00097D27 01                         	dc.b	$01
00097D28 E100                       	smpsAlterNote       $00
00097D2A 01                         	dc.b	$01
00097D2B E1FA                       	smpsAlterNote       $FA
00097D2D 01                         	dc.b	$01
00097D2E E1FD                       	smpsAlterNote       $FD
00097D30 ECF5                       	smpsPSGAlterVol     $F5
00097D32 9106                       	dc.b	nE1, $06
00097D34 EC04                       	smpsPSGAlterVol     $04
00097D36 E701                       	dc.b	smpsNoAttack, $01
00097D38 EC07                       	smpsPSGAlterVol     $07
00097D3A 8003                       	dc.b	nRst, $03
00097D3C ECF5                       	smpsPSGAlterVol     $F5
00097D3E 9106                       	dc.b	nE1, $06
00097D40 EC04                       	smpsPSGAlterVol     $04
00097D42 E701                       	dc.b	smpsNoAttack, $01
00097D44 EC07                       	smpsPSGAlterVol     $07
00097D46 8006                       	dc.b	nRst, $06
00097D48 E100                       	smpsAlterNote       $00
00097D4A 01                         	dc.b	$01
00097D4B E104                       	smpsAlterNote       $04
00097D4D 01                         	dc.b	$01
00097D4E E103                       	smpsAlterNote       $03
00097D50 01                         	dc.b	$01
00097D51 E1FD                       	smpsAlterNote       $FD
00097D53 01                         	dc.b	$01
00097D54 ECF5                       	smpsPSGAlterVol     $F5
00097D56 9107                       	dc.b	nE1, $07
00097D58 EC0B                       	smpsPSGAlterVol     $0B
00097D5A 8004                       	dc.b	nRst, $04
00097D5C ECF5                       	smpsPSGAlterVol     $F5
00097D5E 9106                       	dc.b	nE1, $06
00097D60 EC0B                       	smpsPSGAlterVol     $0B
00097D62 8007                       	dc.b	nRst, $07
00097D64 E103                       	smpsAlterNote       $03
00097D66 0101                       	dc.b	$01, $01
00097D68 E100                       	smpsAlterNote       $00
00097D6A 01                         	dc.b	$01
00097D6B E1FA                       	smpsAlterNote       $FA
00097D6D 01                         	dc.b	$01
00097D6E E1FD                       	smpsAlterNote       $FD
00097D70 ECF5                       	smpsPSGAlterVol     $F5
00097D72 9106                       	dc.b	nE1, $06
00097D74 EC04                       	smpsPSGAlterVol     $04
00097D76 E701                       	dc.b	smpsNoAttack, $01
00097D78 EC07                       	smpsPSGAlterVol     $07
00097D7A 8003                       	dc.b	nRst, $03
00097D7C ECF5                       	smpsPSGAlterVol     $F5
00097D7E 9106                       	dc.b	nE1, $06
00097D80 EC04                       	smpsPSGAlterVol     $04
00097D82 E701                       	dc.b	smpsNoAttack, $01
00097D84 EC07                       	smpsPSGAlterVol     $07
00097D86 8003                       	dc.b	nRst, $03
00097D88 ECF5                       	smpsPSGAlterVol     $F5
00097D8A 9207                       	dc.b	nF1, $07
00097D8C EC0B                       	smpsPSGAlterVol     $0B
00097D8E 8006                       	dc.b	nRst, $06
00097D90 E100                       	smpsAlterNote       $00
00097D92 01                         	dc.b	$01
00097D93 E104                       	smpsAlterNote       $04
00097D95 01                         	dc.b	$01
00097D96 E103                       	smpsAlterNote       $03
00097D98 01                         	dc.b	$01
00097D99 E1FD                       	smpsAlterNote       $FD
00097D9B 01                         	dc.b	$01
00097D9C E1F9                       	smpsAlterNote       $F9
00097D9E 01                         	dc.b	$01
00097D9F E1FD                       	smpsAlterNote       $FD
00097DA1 01                         	dc.b	$01
00097DA2 E100                       	smpsAlterNote       $00
00097DA4 01                         	dc.b	$01
00097DA5 E104                       	smpsAlterNote       $04
00097DA7 01                         	dc.b	$01
00097DA8 E1FD                       	smpsAlterNote       $FD
00097DAA ECF5                       	smpsPSGAlterVol     $F5
00097DAC 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097DB0 EC04                       	smpsPSGAlterVol     $04
00097DB2 E701                       	dc.b	smpsNoAttack, $01
00097DB4 EC07                       	smpsPSGAlterVol     $07
00097DB6 8009                       	dc.b	nRst, $09
00097DB8 E100                       	smpsAlterNote       $00
00097DBA 01                         	dc.b	$01
00097DBB E104                       	smpsAlterNote       $04
00097DBD 01                         	dc.b	$01
00097DBE E103                       	smpsAlterNote       $03
00097DC0 01                         	dc.b	$01
00097DC1 E1FD                       	smpsAlterNote       $FD
00097DC3 01                         	dc.b	$01
00097DC4 E1F9                       	smpsAlterNote       $F9
00097DC6 01                         	dc.b	$01
00097DC7 E1FD                       	smpsAlterNote       $FD
00097DC9 01                         	dc.b	$01
00097DCA E100                       	smpsAlterNote       $00
00097DCC 01                         	dc.b	$01
00097DCD E104                       	smpsAlterNote       $04
00097DCF 01                         	dc.b	$01
00097DD0 E100                       	smpsAlterNote       $00
00097DD2 01                         	dc.b	$01
00097DD3 E1FA                       	smpsAlterNote       $FA
00097DD5 01                         	dc.b	$01
00097DD6 E1F9                       	smpsAlterNote       $F9
00097DD8 01                         	dc.b	$01
00097DD9 E1FD                       	smpsAlterNote       $FD
00097DDB 01                         	dc.b	$01
00097DDC E103                       	smpsAlterNote       $03
00097DDE 0101                       	dc.b	$01, $01
00097DE0 E100                       	smpsAlterNote       $00
00097DE2 01                         	dc.b	$01
00097DE3 E1FD                       	smpsAlterNote       $FD
00097DE5 ECF5                       	smpsPSGAlterVol     $F5
00097DE7 9202                       	dc.b	nF1, $02
00097DE9 EC04                       	smpsPSGAlterVol     $04
00097DEB E701                       	dc.b	smpsNoAttack, $01
00097DED ECFC                       	smpsPSGAlterVol     $FC
00097DEF 9106                       	dc.b	nE1, $06
00097DF1 EC04                       	smpsPSGAlterVol     $04
00097DF3 E701                       	dc.b	smpsNoAttack, $01
00097DF5 EC07                       	smpsPSGAlterVol     $07
00097DF7 8006                       	dc.b	nRst, $06
00097DF9 E100                       	smpsAlterNote       $00
00097DFB 01                         	dc.b	$01
00097DFC E104                       	smpsAlterNote       $04
00097DFE 01                         	dc.b	$01
00097DFF E100                       	smpsAlterNote       $00
00097E01 01                         	dc.b	$01
00097E02 E1FD                       	smpsAlterNote       $FD
00097E04 01                         	dc.b	$01
00097E05 E1F9                       	smpsAlterNote       $F9
00097E07 01                         	dc.b	$01
00097E08 E1FD                       	smpsAlterNote       $FD
00097E0A 01                         	dc.b	$01
00097E0B E103                       	smpsAlterNote       $03
00097E0D 01                         	dc.b	$01
00097E0E E104                       	smpsAlterNote       $04
00097E10 01                         	dc.b	$01
00097E11 E1FD                       	smpsAlterNote       $FD
00097E13 ECF5                       	smpsPSGAlterVol     $F5
00097E15 9102                       	dc.b	nE1, $02
00097E17 EC04                       	smpsPSGAlterVol     $04
00097E19 E701                       	dc.b	smpsNoAttack, $01
00097E1B ECFC                       	smpsPSGAlterVol     $FC
00097E1D 920D                       	dc.b	nF1, $0D
00097E1F E100                       	smpsAlterNote       $00
00097E21 E701                       	dc.b	smpsNoAttack, $01
00097E23 E104                       	smpsAlterNote       $04
00097E25 E701                       	dc.b	smpsNoAttack, $01
00097E27 E100                       	smpsAlterNote       $00
00097E29 E701                       	dc.b	smpsNoAttack, $01
00097E2B E1FD                       	smpsAlterNote       $FD
00097E2D E701                       	dc.b	smpsNoAttack, $01
00097E2F E1F9                       	smpsAlterNote       $F9
00097E31 E701                       	dc.b	smpsNoAttack, $01
00097E33 E1FD                       	smpsAlterNote       $FD
00097E35 E701                       	dc.b	smpsNoAttack, $01
00097E37 E103                       	smpsAlterNote       $03
00097E39 E701                       	dc.b	smpsNoAttack, $01
00097E3B E104                       	smpsAlterNote       $04
00097E3D E701                       	dc.b	smpsNoAttack, $01
00097E3F E100                       	smpsAlterNote       $00
00097E41 E701                       	dc.b	smpsNoAttack, $01
00097E43 E1FA                       	smpsAlterNote       $FA
00097E45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E49 E1FD                       	smpsAlterNote       $FD
00097E4B E701                       	dc.b	smpsNoAttack, $01
00097E4D E103                       	smpsAlterNote       $03
00097E4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E53 E1FD                       	smpsAlterNote       $FD
00097E55 E701                       	dc.b	smpsNoAttack, $01
00097E57 E1F9                       	smpsAlterNote       $F9
00097E59 E701                       	dc.b	smpsNoAttack, $01
00097E5B E1FA                       	smpsAlterNote       $FA
00097E5D E701                       	dc.b	smpsNoAttack, $01
00097E5F E100                       	smpsAlterNote       $00
00097E61 EC04                       	smpsPSGAlterVol     $04
00097E63 E701                       	dc.b	smpsNoAttack, $01
00097E65 EC07                       	smpsPSGAlterVol     $07
00097E67 E104                       	smpsAlterNote       $04
00097E69 8001                       	dc.b	nRst, $01
00097E6B E100                       	smpsAlterNote       $00
00097E6D 01                         	dc.b	$01
00097E6E E1FD                       	smpsAlterNote       $FD
00097E70 01                         	dc.b	$01
00097E71 E1F9                       	smpsAlterNote       $F9
00097E73 01                         	dc.b	$01
00097E74 E1FD                       	smpsAlterNote       $FD
00097E76 01                         	dc.b	$01
00097E77 E103                       	smpsAlterNote       $03
00097E79 01                         	dc.b	$01
00097E7A E104                       	smpsAlterNote       $04
00097E7C 01                         	dc.b	$01
00097E7D E1FD                       	smpsAlterNote       $FD
00097E7F ECF5                       	smpsPSGAlterVol     $F5
00097E81 9106                       	dc.b	nE1, $06
00097E83 EC04                       	smpsPSGAlterVol     $04
00097E85 E701                       	dc.b	smpsNoAttack, $01
00097E87 EC07                       	smpsPSGAlterVol     $07
00097E89 8003                       	dc.b	nRst, $03
00097E8B ECF5                       	smpsPSGAlterVol     $F5
00097E8D 9106                       	dc.b	nE1, $06
00097E8F EC04                       	smpsPSGAlterVol     $04
00097E91 E701                       	dc.b	smpsNoAttack, $01
00097E93 EC07                       	smpsPSGAlterVol     $07
00097E95 8006                       	dc.b	nRst, $06
00097E97 E100                       	smpsAlterNote       $00
00097E99 01                         	dc.b	$01
00097E9A E104                       	smpsAlterNote       $04
00097E9C 01                         	dc.b	$01
00097E9D E100                       	smpsAlterNote       $00
00097E9F 01                         	dc.b	$01
00097EA0 E1FA                       	smpsAlterNote       $FA
00097EA2 01                         	dc.b	$01
00097EA3 E1FD                       	smpsAlterNote       $FD
00097EA5 ECF5                       	smpsPSGAlterVol     $F5
00097EA7 9206                       	dc.b	nF1, $06
00097EA9 EC04                       	smpsPSGAlterVol     $04
00097EAB E701                       	dc.b	smpsNoAttack, $01
00097EAD EC07                       	smpsPSGAlterVol     $07
00097EAF 8003                       	dc.b	nRst, $03
00097EB1 ECF5                       	smpsPSGAlterVol     $F5
00097EB3 9207                       	dc.b	nF1, $07
00097EB5 EC0B                       	smpsPSGAlterVol     $0B
00097EB7 8006                       	dc.b	nRst, $06
00097EB9 E100                       	smpsAlterNote       $00
00097EBB 01                         	dc.b	$01
00097EBC E103                       	smpsAlterNote       $03
00097EBE 0101                       	dc.b	$01, $01
00097EC0 E1FD                       	smpsAlterNote       $FD
00097EC2 01                         	dc.b	$01
00097EC3 ECF5                       	smpsPSGAlterVol     $F5
00097EC5 9107                       	dc.b	nE1, $07
00097EC7 EC0B                       	smpsPSGAlterVol     $0B
00097EC9 8004                       	dc.b	nRst, $04
00097ECB ECF5                       	smpsPSGAlterVol     $F5
00097ECD 9106                       	dc.b	nE1, $06
00097ECF EC04                       	smpsPSGAlterVol     $04
00097ED1 E701                       	dc.b	smpsNoAttack, $01
00097ED3 EC07                       	smpsPSGAlterVol     $07
00097ED5 8006                       	dc.b	nRst, $06
00097ED7 E103                       	smpsAlterNote       $03
00097ED9 01                         	dc.b	$01
00097EDA E104                       	smpsAlterNote       $04
00097EDC 01                         	dc.b	$01
00097EDD E100                       	smpsAlterNote       $00
00097EDF 01                         	dc.b	$01
00097EE0 E1FA                       	smpsAlterNote       $FA
00097EE2 01                         	dc.b	$01
00097EE3 E1FD                       	smpsAlterNote       $FD
00097EE5 ECF5                       	smpsPSGAlterVol     $F5
00097EE7 9106                       	dc.b	nE1, $06
00097EE9 EC04                       	smpsPSGAlterVol     $04
00097EEB E701                       	dc.b	smpsNoAttack, $01
00097EED EC07                       	smpsPSGAlterVol     $07
00097EEF 8003                       	dc.b	nRst, $03
00097EF1 ECF5                       	smpsPSGAlterVol     $F5
00097EF3 9106                       	dc.b	nE1, $06
00097EF5 EC04                       	smpsPSGAlterVol     $04
00097EF7 E701                       	dc.b	smpsNoAttack, $01
00097EF9 EC07                       	smpsPSGAlterVol     $07
00097EFB 8003                       	dc.b	nRst, $03
00097EFD ECF5                       	smpsPSGAlterVol     $F5
00097EFF 9207                       	dc.b	nF1, $07
00097F01 EC0B                       	smpsPSGAlterVol     $0B
00097F03 8006                       	dc.b	nRst, $06
00097F05 E100                       	smpsAlterNote       $00
00097F07 01                         	dc.b	$01
00097F08 E103                       	smpsAlterNote       $03
00097F0A 0101                       	dc.b	$01, $01
00097F0C E1FD                       	smpsAlterNote       $FD
00097F0E 01                         	dc.b	$01
00097F0F E1F9                       	smpsAlterNote       $F9
00097F11 01                         	dc.b	$01
00097F12 E1FA                       	smpsAlterNote       $FA
00097F14 01                         	dc.b	$01
00097F15 E100                       	smpsAlterNote       $00
00097F17 01                         	dc.b	$01
00097F18 E104                       	smpsAlterNote       $04
00097F1A 01                         	dc.b	$01
00097F1B E1FD                       	smpsAlterNote       $FD
00097F1D ECF5                       	smpsPSGAlterVol     $F5
00097F1F 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097F23 EC04                       	smpsPSGAlterVol     $04
00097F25 E701                       	dc.b	smpsNoAttack, $01
00097F27 EC07                       	smpsPSGAlterVol     $07
00097F29 8009                       	dc.b	nRst, $09
00097F2B E100                       	smpsAlterNote       $00
00097F2D 01                         	dc.b	$01
00097F2E E103                       	smpsAlterNote       $03
00097F30 0101                       	dc.b	$01, $01
00097F32 E1FD                       	smpsAlterNote       $FD
00097F34 01                         	dc.b	$01
00097F35 E1F9                       	smpsAlterNote       $F9
00097F37 01                         	dc.b	$01
00097F38 E1FA                       	smpsAlterNote       $FA
00097F3A 01                         	dc.b	$01
00097F3B E100                       	smpsAlterNote       $00
00097F3D 01                         	dc.b	$01
00097F3E E104                       	smpsAlterNote       $04
00097F40 01                         	dc.b	$01
00097F41 E100                       	smpsAlterNote       $00
00097F43 01                         	dc.b	$01
00097F44 E1FD                       	smpsAlterNote       $FD
00097F46 01                         	dc.b	$01
00097F47 E1F9                       	smpsAlterNote       $F9
00097F49 01                         	dc.b	$01
00097F4A E1FD                       	smpsAlterNote       $FD
00097F4C 01                         	dc.b	$01
00097F4D E103                       	smpsAlterNote       $03
00097F4F 01                         	dc.b	$01
00097F50 E104                       	smpsAlterNote       $04
00097F52 01                         	dc.b	$01
00097F53 E100                       	smpsAlterNote       $00
00097F55 01                         	dc.b	$01
00097F56 E1FD                       	smpsAlterNote       $FD
00097F58 ECF5                       	smpsPSGAlterVol     $F5
00097F5A 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097F5E EC04                       	smpsPSGAlterVol     $04
00097F60 E701                       	dc.b	smpsNoAttack, $01
00097F62 EC07                       	smpsPSGAlterVol     $07
00097F64 8006                       	dc.b	nRst, $06
00097F66 E100                       	smpsAlterNote       $00
00097F68 01                         	dc.b	$01
00097F69 E104                       	smpsAlterNote       $04
00097F6B 01                         	dc.b	$01
00097F6C E103                       	smpsAlterNote       $03
00097F6E 01                         	dc.b	$01
00097F6F E1FD                       	smpsAlterNote       $FD
00097F71 01                         	dc.b	$01
00097F72 E1F9                       	smpsAlterNote       $F9
00097F74 01                         	dc.b	$01
00097F75 E1FD                       	smpsAlterNote       $FD
00097F77 01                         	dc.b	$01
00097F78 E100                       	smpsAlterNote       $00
00097F7A 01                         	dc.b	$01
00097F7B E104                       	smpsAlterNote       $04
00097F7D 01                         	dc.b	$01
00097F7E E1FD                       	smpsAlterNote       $FD
00097F80 ECF5                       	smpsPSGAlterVol     $F5
00097F82 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097F86 E100                       	smpsAlterNote       $00
00097F88 E701                       	dc.b	smpsNoAttack, $01
00097F8A E104                       	smpsAlterNote       $04
00097F8C E701                       	dc.b	smpsNoAttack, $01
00097F8E E100                       	smpsAlterNote       $00
00097F90 E701                       	dc.b	smpsNoAttack, $01
00097F92 E1FD                       	smpsAlterNote       $FD
00097F94 E701                       	dc.b	smpsNoAttack, $01
00097F96 E1F9                       	smpsAlterNote       $F9
00097F98 E701                       	dc.b	smpsNoAttack, $01
00097F9A E1FD                       	smpsAlterNote       $FD
00097F9C E701                       	dc.b	smpsNoAttack, $01
00097F9E E103                       	smpsAlterNote       $03
00097FA0 E701                       	dc.b	smpsNoAttack, $01
00097FA2 E104                       	smpsAlterNote       $04
00097FA4 E701                       	dc.b	smpsNoAttack, $01
00097FA6 E100                       	smpsAlterNote       $00
00097FA8 E701                       	dc.b	smpsNoAttack, $01
00097FAA E1FA                       	smpsAlterNote       $FA
00097FAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FB0 E1FD                       	smpsAlterNote       $FD
00097FB2 E701                       	dc.b	smpsNoAttack, $01
00097FB4 E103                       	smpsAlterNote       $03
00097FB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FBA E100                       	smpsAlterNote       $00
00097FBC E701                       	dc.b	smpsNoAttack, $01
00097FBE E1FA                       	smpsAlterNote       $FA
00097FC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FC4 E100                       	smpsAlterNote       $00
00097FC6 EC04                       	smpsPSGAlterVol     $04
00097FC8 E701                       	dc.b	smpsNoAttack, $01
00097FCA EC07                       	smpsPSGAlterVol     $07
00097FCC E104                       	smpsAlterNote       $04
00097FCE 8001                       	dc.b	nRst, $01
00097FD0 E103                       	smpsAlterNote       $03
00097FD2 01                         	dc.b	$01
00097FD3 E1FD                       	smpsAlterNote       $FD
00097FD5 01                         	dc.b	$01
00097FD6 E1F9                       	smpsAlterNote       $F9
00097FD8 01                         	dc.b	$01
00097FD9 E1FD                       	smpsAlterNote       $FD
00097FDB 01                         	dc.b	$01
00097FDC E100                       	smpsAlterNote       $00
00097FDE 01                         	dc.b	$01
00097FDF E104                       	smpsAlterNote       $04
00097FE1 01                         	dc.b	$01
00097FE2 E1FD                       	smpsAlterNote       $FD
00097FE4 ECF5                       	smpsPSGAlterVol     $F5
00097FE6 9106                       	dc.b	nE1, $06
00097FE8 EC04                       	smpsPSGAlterVol     $04
00097FEA E701                       	dc.b	smpsNoAttack, $01
00097FEC EC07                       	smpsPSGAlterVol     $07
00097FEE 8003                       	dc.b	nRst, $03
00097FF0 ECF5                       	smpsPSGAlterVol     $F5
00097FF2 9106                       	dc.b	nE1, $06
00097FF4 EC04                       	smpsPSGAlterVol     $04
00097FF6 E701                       	dc.b	smpsNoAttack, $01
00097FF8 EC07                       	smpsPSGAlterVol     $07
00097FFA 8006                       	dc.b	nRst, $06
00097FFC E100                       	smpsAlterNote       $00
00097FFE 01                         	dc.b	$01
00097FFF E104                       	smpsAlterNote       $04
00098001 01                         	dc.b	$01
00098002 E100                       	smpsAlterNote       $00
00098004 01                         	dc.b	$01
00098005 E1FD                       	smpsAlterNote       $FD
00098007 01                         	dc.b	$01
00098008 ECF5                       	smpsPSGAlterVol     $F5
0009800A 9206                       	dc.b	nF1, $06
0009800C EC04                       	smpsPSGAlterVol     $04
0009800E E701                       	dc.b	smpsNoAttack, $01
00098010 EC07                       	smpsPSGAlterVol     $07
00098012 8003                       	dc.b	nRst, $03
00098014 ECF5                       	smpsPSGAlterVol     $F5
00098016 9207                       	dc.b	nF1, $07
00098018 EC0B                       	smpsPSGAlterVol     $0B
0009801A 8007                       	dc.b	nRst, $07
0009801C E103                       	smpsAlterNote       $03
0009801E 0101                       	dc.b	$01, $01
00098020 E1FD                       	smpsAlterNote       $FD
00098022 01                         	dc.b	$01
00098023 E1FA                       	smpsAlterNote       $FA
00098025 01                         	dc.b	$01
00098026 E1FD                       	smpsAlterNote       $FD
00098028 ECF5                       	smpsPSGAlterVol     $F5
0009802A 9106                       	dc.b	nE1, $06
0009802C EC0B                       	smpsPSGAlterVol     $0B
0009802E 8004                       	dc.b	nRst, $04
00098030 ECF5                       	smpsPSGAlterVol     $F5
00098032 9106                       	dc.b	nE1, $06
00098034 EC04                       	smpsPSGAlterVol     $04
00098036 E701                       	dc.b	smpsNoAttack, $01
00098038 EC07                       	smpsPSGAlterVol     $07
0009803A 8006                       	dc.b	nRst, $06
0009803C E100                       	smpsAlterNote       $00
0009803E 01                         	dc.b	$01
0009803F E104                       	smpsAlterNote       $04
00098041 01                         	dc.b	$01
00098042 E100                       	smpsAlterNote       $00
00098044 01                         	dc.b	$01
00098045 E1FA                       	smpsAlterNote       $FA
00098047 01                         	dc.b	$01
00098048 E1FD                       	smpsAlterNote       $FD
0009804A ECF5                       	smpsPSGAlterVol     $F5
0009804C 9206                       	dc.b	nF1, $06
0009804E EC04                       	smpsPSGAlterVol     $04
00098050 E701                       	dc.b	smpsNoAttack, $01
00098052 EC07                       	smpsPSGAlterVol     $07
00098054 8003                       	dc.b	nRst, $03
00098056 ECF5                       	smpsPSGAlterVol     $F5
00098058 9206                       	dc.b	nF1, $06
0009805A EC04                       	smpsPSGAlterVol     $04
0009805C E701                       	dc.b	smpsNoAttack, $01
0009805E EC07                       	smpsPSGAlterVol     $07
00098060 8006                       	dc.b	nRst, $06
00098062 E100                       	smpsAlterNote       $00
00098064 01                         	dc.b	$01
00098065 E104                       	smpsAlterNote       $04
00098067 01                         	dc.b	$01
00098068 E103                       	smpsAlterNote       $03
0009806A 01                         	dc.b	$01
0009806B E1FD                       	smpsAlterNote       $FD
0009806D 01                         	dc.b	$01
0009806E ECF5                       	smpsPSGAlterVol     $F5
00098070 9107                       	dc.b	nE1, $07
00098072 EC0B                       	smpsPSGAlterVol     $0B
00098074 8004                       	dc.b	nRst, $04
00098076 ECF5                       	smpsPSGAlterVol     $F5
00098078 9106                       	dc.b	nE1, $06
0009807A EC0B                       	smpsPSGAlterVol     $0B
0009807C 8007                       	dc.b	nRst, $07
0009807E E103                       	smpsAlterNote       $03
00098080 0101                       	dc.b	$01, $01
00098082 E100                       	smpsAlterNote       $00
00098084 01                         	dc.b	$01
00098085 E1FA                       	smpsAlterNote       $FA
00098087 01                         	dc.b	$01
00098088 E1FD                       	smpsAlterNote       $FD
0009808A ECF5                       	smpsPSGAlterVol     $F5
0009808C 9206                       	dc.b	nF1, $06
0009808E EC04                       	smpsPSGAlterVol     $04
00098090 E701                       	dc.b	smpsNoAttack, $01
00098092 EC07                       	smpsPSGAlterVol     $07
00098094 8003                       	dc.b	nRst, $03
00098096 ECF5                       	smpsPSGAlterVol     $F5
00098098 9206                       	dc.b	nF1, $06
0009809A EC04                       	smpsPSGAlterVol     $04
0009809C E701                       	dc.b	smpsNoAttack, $01
0009809E EC07                       	smpsPSGAlterVol     $07
000980A0 8006                       	dc.b	nRst, $06
000980A2 E100                       	smpsAlterNote       $00
000980A4 01                         	dc.b	$01
000980A5 E104                       	smpsAlterNote       $04
000980A7 01                         	dc.b	$01
000980A8 E100                       	smpsAlterNote       $00
000980AA 01                         	dc.b	$01
000980AB E1FD                       	smpsAlterNote       $FD
000980AD 01                         	dc.b	$01
000980AE ECF5                       	smpsPSGAlterVol     $F5
000980B0 9106                       	dc.b	nE1, $06
000980B2 EC04                       	smpsPSGAlterVol     $04
000980B4 E701                       	dc.b	smpsNoAttack, $01
000980B6 EC07                       	smpsPSGAlterVol     $07
000980B8 8003                       	dc.b	nRst, $03
000980BA ECF5                       	smpsPSGAlterVol     $F5
000980BC 9107 9106                  	dc.b	nE1, $07, nE1, $06
000980C0 EC04                       	smpsPSGAlterVol     $04
000980C2 E701                       	dc.b	smpsNoAttack, $01
000980C4 ECFC                       	smpsPSGAlterVol     $FC
000980C6 9103                       	dc.b	nE1, $03
000980C8 EC04                       	smpsPSGAlterVol     $04
000980CA E701                       	dc.b	smpsNoAttack, $01
000980CC ECFC                       	smpsPSGAlterVol     $FC
000980CE 9102                       	dc.b	nE1, $02
000980D0 EC04                       	smpsPSGAlterVol     $04
000980D2 E701                       	dc.b	smpsNoAttack, $01
000980D4 ECFC                       	smpsPSGAlterVol     $FC
000980D6 9103                       	dc.b	nE1, $03
000980D8 EC0B                       	smpsPSGAlterVol     $0B
000980DA 800A                       	dc.b	nRst, $0A
000980DC E100                       	smpsAlterNote       $00
000980DE 01                         	dc.b	$01
000980DF E104                       	smpsAlterNote       $04
000980E1 01                         	dc.b	$01
000980E2 E100                       	smpsAlterNote       $00
000980E4 01                         	dc.b	$01
000980E5 E1FA                       	smpsAlterNote       $FA
000980E7 01                         	dc.b	$01
000980E8 E1F9                       	smpsAlterNote       $F9
000980EA 01                         	dc.b	$01
000980EB E1FD                       	smpsAlterNote       $FD
000980ED 01                         	dc.b	$01
000980EE E103                       	smpsAlterNote       $03
000980F0 0101                       	dc.b	$01, $01
000980F2 E100                       	smpsAlterNote       $00
000980F4 01                         	dc.b	$01
000980F5 E1FA                       	smpsAlterNote       $FA
000980F7 0101                       	dc.b	$01, $01
000980F9 E1FD                       	smpsAlterNote       $FD
000980FB ECF5                       	smpsPSGAlterVol     $F5
000980FD 9206                       	dc.b	nF1, $06
000980FF EC04                       	smpsPSGAlterVol     $04
00098101 E704                       	dc.b	smpsNoAttack, $04
00098103 ECFC                       	smpsPSGAlterVol     $FC
00098105 9206                       	dc.b	nF1, $06
00098107 EC04                       	smpsPSGAlterVol     $04
00098109 E701                       	dc.b	smpsNoAttack, $01
0009810B EC07                       	smpsPSGAlterVol     $07
0009810D 8006                       	dc.b	nRst, $06
0009810F E100                       	smpsAlterNote       $00
00098111 01                         	dc.b	$01
00098112 E104                       	smpsAlterNote       $04
00098114 01                         	dc.b	$01
00098115 E103                       	smpsAlterNote       $03
00098117 01                         	dc.b	$01
00098118 E1FD                       	smpsAlterNote       $FD
0009811A 01                         	dc.b	$01
0009811B ECF5                       	smpsPSGAlterVol     $F5
0009811D 9407                       	dc.b	nG1, $07
0009811F EC0B                       	smpsPSGAlterVol     $0B
00098121 8004                       	dc.b	nRst, $04
00098123 ECF5                       	smpsPSGAlterVol     $F5
00098125 9406                       	dc.b	nG1, $06
00098127 EC0B                       	smpsPSGAlterVol     $0B
00098129 8007                       	dc.b	nRst, $07
0009812B E103                       	smpsAlterNote       $03
0009812D 0101                       	dc.b	$01, $01
0009812F E1FD                       	smpsAlterNote       $FD
00098131 01                         	dc.b	$01
00098132 E1F9                       	smpsAlterNote       $F9
00098134 01                         	dc.b	$01
00098135 E1FD                       	smpsAlterNote       $FD
00098137 ECF5                       	smpsPSGAlterVol     $F5
00098139 9206                       	dc.b	nF1, $06
0009813B EC04                       	smpsPSGAlterVol     $04
0009813D E701                       	dc.b	smpsNoAttack, $01
0009813F EC07                       	smpsPSGAlterVol     $07
00098141 8003                       	dc.b	nRst, $03
00098143 ECF5                       	smpsPSGAlterVol     $F5
00098145 9206                       	dc.b	nF1, $06
00098147 EC04                       	smpsPSGAlterVol     $04
00098149 E701                       	dc.b	smpsNoAttack, $01
0009814B EC07                       	smpsPSGAlterVol     $07
0009814D 8006                       	dc.b	nRst, $06
0009814F E100                       	smpsAlterNote       $00
00098151 01                         	dc.b	$01
00098152 E104                       	smpsAlterNote       $04
00098154 01                         	dc.b	$01
00098155 E100                       	smpsAlterNote       $00
00098157 01                         	dc.b	$01
00098158 E1FA                       	smpsAlterNote       $FA
0009815A 01                         	dc.b	$01
0009815B E1FD                       	smpsAlterNote       $FD
0009815D ECF5                       	smpsPSGAlterVol     $F5
0009815F 9206                       	dc.b	nF1, $06
00098161 EC04                       	smpsPSGAlterVol     $04
00098163 E701                       	dc.b	smpsNoAttack, $01
00098165 EC07                       	smpsPSGAlterVol     $07
00098167 8003                       	dc.b	nRst, $03
00098169 ECF5                       	smpsPSGAlterVol     $F5
0009816B 9107                       	dc.b	nE1, $07
0009816D EC0B                       	smpsPSGAlterVol     $0B
0009816F 8006                       	dc.b	nRst, $06
00098171 E100                       	smpsAlterNote       $00
00098173 01                         	dc.b	$01
00098174 E103                       	smpsAlterNote       $03
00098176 0101                       	dc.b	$01, $01
00098178 E1FD                       	smpsAlterNote       $FD
0009817A 01                         	dc.b	$01
0009817B ECF5                       	smpsPSGAlterVol     $F5
0009817D 9207                       	dc.b	nF1, $07
0009817F EC0B                       	smpsPSGAlterVol     $0B
00098181 8004                       	dc.b	nRst, $04
00098183 ECF5                       	smpsPSGAlterVol     $F5
00098185 9206                       	dc.b	nF1, $06
00098187 EC04                       	smpsPSGAlterVol     $04
00098189 E701                       	dc.b	smpsNoAttack, $01
0009818B EC07                       	smpsPSGAlterVol     $07
0009818D 8006                       	dc.b	nRst, $06
0009818F E103                       	smpsAlterNote       $03
00098191 01                         	dc.b	$01
00098192 E104                       	smpsAlterNote       $04
00098194 01                         	dc.b	$01
00098195 E100                       	smpsAlterNote       $00
00098197 01                         	dc.b	$01
00098198 E1FB                       	smpsAlterNote       $FB
0009819A 01                         	dc.b	$01
0009819B E1FD                       	smpsAlterNote       $FD
0009819D ECF5                       	smpsPSGAlterVol     $F5
0009819F 9406                       	dc.b	nG1, $06
000981A1 EC04                       	smpsPSGAlterVol     $04
000981A3 E701                       	dc.b	smpsNoAttack, $01
000981A5 EC07                       	smpsPSGAlterVol     $07
000981A7 8003                       	dc.b	nRst, $03
000981A9 ECF5                       	smpsPSGAlterVol     $F5
000981AB 9406                       	dc.b	nG1, $06
000981AD EC04                       	smpsPSGAlterVol     $04
000981AF E701                       	dc.b	smpsNoAttack, $01
000981B1 EC07                       	smpsPSGAlterVol     $07
000981B3 8006                       	dc.b	nRst, $06
000981B5 E100                       	smpsAlterNote       $00
000981B7 01                         	dc.b	$01
000981B8 E104                       	smpsAlterNote       $04
000981BA 01                         	dc.b	$01
000981BB E100                       	smpsAlterNote       $00
000981BD 01                         	dc.b	$01
000981BE E1FD                       	smpsAlterNote       $FD
000981C0 01                         	dc.b	$01
000981C1 ECF5                       	smpsPSGAlterVol     $F5
000981C3 9206                       	dc.b	nF1, $06
000981C5 EC04                       	smpsPSGAlterVol     $04
000981C7 E701                       	dc.b	smpsNoAttack, $01
000981C9 EC07                       	smpsPSGAlterVol     $07
000981CB 8003                       	dc.b	nRst, $03
000981CD ECF5                       	smpsPSGAlterVol     $F5
000981CF 9207                       	dc.b	nF1, $07
000981D1 EC0B                       	smpsPSGAlterVol     $0B
000981D3 8007                       	dc.b	nRst, $07
000981D5 E103                       	smpsAlterNote       $03
000981D7 0101                       	dc.b	$01, $01
000981D9 E1FD                       	smpsAlterNote       $FD
000981DB 01                         	dc.b	$01
000981DC E1FA                       	smpsAlterNote       $FA
000981DE 01                         	dc.b	$01
000981DF E1FD                       	smpsAlterNote       $FD
000981E1 ECF5                       	smpsPSGAlterVol     $F5
000981E3 9206                       	dc.b	nF1, $06
000981E5 EC0B                       	smpsPSGAlterVol     $0B
000981E7 8004                       	dc.b	nRst, $04
000981E9 ECF5                       	smpsPSGAlterVol     $F5
000981EB 9206                       	dc.b	nF1, $06
000981ED EC04                       	smpsPSGAlterVol     $04
000981EF E701                       	dc.b	smpsNoAttack, $01
000981F1 EC07                       	smpsPSGAlterVol     $07
000981F3 8006                       	dc.b	nRst, $06
000981F5 E100                       	smpsAlterNote       $00
000981F7 01                         	dc.b	$01
000981F8 E104                       	smpsAlterNote       $04
000981FA 01                         	dc.b	$01
000981FB E100                       	smpsAlterNote       $00
000981FD 01                         	dc.b	$01
000981FE E1FA                       	smpsAlterNote       $FA
00098200 01                         	dc.b	$01
00098201 E1FD                       	smpsAlterNote       $FD
00098203 ECF5                       	smpsPSGAlterVol     $F5
00098205 9206                       	dc.b	nF1, $06
00098207 EC04                       	smpsPSGAlterVol     $04
00098209 E701                       	dc.b	smpsNoAttack, $01
0009820B EC07                       	smpsPSGAlterVol     $07
0009820D 8003                       	dc.b	nRst, $03
0009820F ECF5                       	smpsPSGAlterVol     $F5
00098211 9207                       	dc.b	nF1, $07
00098213 EC0B                       	smpsPSGAlterVol     $0B
00098215 8006                       	dc.b	nRst, $06
00098217 E100                       	smpsAlterNote       $00
00098219 01                         	dc.b	$01
0009821A E103                       	smpsAlterNote       $03
0009821C 0101                       	dc.b	$01, $01
0009821E E1FD                       	smpsAlterNote       $FD
00098220 01                         	dc.b	$01
00098221 ECF5                       	smpsPSGAlterVol     $F5
00098223 9207                       	dc.b	nF1, $07
00098225 EC0B                       	smpsPSGAlterVol     $0B
00098227 8004                       	dc.b	nRst, $04
00098229 ECF5                       	smpsPSGAlterVol     $F5
0009822B 9206                       	dc.b	nF1, $06
0009822D EC0B                       	smpsPSGAlterVol     $0B
0009822F 8007                       	dc.b	nRst, $07
00098231 E103                       	smpsAlterNote       $03
00098233 0101                       	dc.b	$01, $01
00098235 E100                       	smpsAlterNote       $00
00098237 01                         	dc.b	$01
00098238 E1FA                       	smpsAlterNote       $FA
0009823A 01                         	dc.b	$01
0009823B E1FD                       	smpsAlterNote       $FD
0009823D ECF5                       	smpsPSGAlterVol     $F5
0009823F 9206                       	dc.b	nF1, $06
00098241 EC04                       	smpsPSGAlterVol     $04
00098243 E701                       	dc.b	smpsNoAttack, $01
00098245 EC07                       	smpsPSGAlterVol     $07
00098247 8003                       	dc.b	nRst, $03
00098249 ECF5                       	smpsPSGAlterVol     $F5
0009824B 9206                       	dc.b	nF1, $06
0009824D EC04                       	smpsPSGAlterVol     $04
0009824F E701                       	dc.b	smpsNoAttack, $01
00098251 EC07                       	smpsPSGAlterVol     $07
00098253 8006                       	dc.b	nRst, $06
00098255 E100                       	smpsAlterNote       $00
00098257 01                         	dc.b	$01
00098258 E104                       	smpsAlterNote       $04
0009825A 01                         	dc.b	$01
0009825B E100                       	smpsAlterNote       $00
0009825D 01                         	dc.b	$01
0009825E E1FD                       	smpsAlterNote       $FD
00098260 01                         	dc.b	$01
00098261 ECF5                       	smpsPSGAlterVol     $F5
00098263 9206                       	dc.b	nF1, $06
00098265 EC04                       	smpsPSGAlterVol     $04
00098267 E701                       	dc.b	smpsNoAttack, $01
00098269 EC07                       	smpsPSGAlterVol     $07
0009826B 8003                       	dc.b	nRst, $03
0009826D ECF5                       	smpsPSGAlterVol     $F5
0009826F 9207                       	dc.b	nF1, $07
00098271 EC0B                       	smpsPSGAlterVol     $0B
00098273 8007                       	dc.b	nRst, $07
00098275 E104                       	smpsAlterNote       $04
00098277 0101                       	dc.b	$01, $01
00098279 E1FB                       	smpsAlterNote       $FB
0009827B 01                         	dc.b	$01
0009827C E1F6                       	smpsAlterNote       $F6
0009827E 0101                       	dc.b	$01, $01
00098280 E1FF                       	smpsAlterNote       $FF
00098282 01                         	dc.b	$01
00098283 E105                       	smpsAlterNote       $05
00098285 01                         	dc.b	$01
00098286 E104                       	smpsAlterNote       $04
00098288 01                         	dc.b	$01
00098289 E1FB                       	smpsAlterNote       $FB
0009828B 01                         	dc.b	$01
0009828C E1F5                       	smpsAlterNote       $F5
0009828E 01                         	dc.b	$01
0009828F E1FC                       	smpsAlterNote       $FC
00098291 ECF5                       	smpsPSGAlterVol     $F5
00098293 8B0E                       	dc.b	nBb0, $0E
00098295 E102                       	smpsAlterNote       $02
00098297 EC0B                       	smpsPSGAlterVol     $0B
00098299 8001                       	dc.b	nRst, $01
0009829B E101                       	smpsAlterNote       $01
0009829D 01                         	dc.b	$01
0009829E E1FC                       	smpsAlterNote       $FC
000982A0 01                         	dc.b	$01
000982A1 E1F9                       	smpsAlterNote       $F9
000982A3 0101                       	dc.b	$01, $01
000982A5 E1FF                       	smpsAlterNote       $FF
000982A7 01                         	dc.b	$01
000982A8 E102                       	smpsAlterNote       $02
000982AA 01                         	dc.b	$01
000982AB E1FF                       	smpsAlterNote       $FF
000982AD 01                         	dc.b	$01
000982AE E1FC                       	smpsAlterNote       $FC
000982B0 01                         	dc.b	$01
000982B1 E1F8                       	smpsAlterNote       $F8
000982B3 01                         	dc.b	$01
000982B4 E1FC                       	smpsAlterNote       $FC
000982B6 01                         	dc.b	$01
000982B7 E101                       	smpsAlterNote       $01
000982B9 01                         	dc.b	$01
000982BA E102                       	smpsAlterNote       $02
000982BC 01                         	dc.b	$01
000982BD E1FF                       	smpsAlterNote       $FF
000982BF 01                         	dc.b	$01
000982C0 E1FB                       	smpsAlterNote       $FB
000982C2 ECF5                       	smpsPSGAlterVol     $F5
000982C4 8D0D                       	dc.b	nC1, $0D
000982C6 E101                       	smpsAlterNote       $01
000982C8 EC0B                       	smpsPSGAlterVol     $0B
000982CA 8001                       	dc.b	nRst, $01
000982CC E102                       	smpsAlterNote       $02
000982CE 01                         	dc.b	$01
000982CF E1FF                       	smpsAlterNote       $FF
000982D1 01                         	dc.b	$01
000982D2 E1F9                       	smpsAlterNote       $F9
000982D4 0101                       	dc.b	$01, $01
000982D6 E1FC                       	smpsAlterNote       $FC
000982D8 01                         	dc.b	$01
000982D9 E101                       	smpsAlterNote       $01
000982DB 0101                       	dc.b	$01, $01
000982DD E1FC                       	smpsAlterNote       $FC
000982DF 01                         	dc.b	$01
000982E0 E1F9                       	smpsAlterNote       $F9
000982E2 0101                       	dc.b	$01, $01
000982E4 E1FF                       	smpsAlterNote       $FF
000982E6 01                         	dc.b	$01
000982E7 E102                       	smpsAlterNote       $02
000982E9 01                         	dc.b	$01
000982EA E101                       	smpsAlterNote       $01
000982EC 01                         	dc.b	$01
000982ED E1FC                       	smpsAlterNote       $FC
000982EF ECF5                       	smpsPSGAlterVol     $F5
000982F1 8F0D                       	dc.b	nD1, $0D
000982F3 E1FF                       	smpsAlterNote       $FF
000982F5 EC04                       	smpsPSGAlterVol     $04
000982F7 E701                       	dc.b	smpsNoAttack, $01
000982F9 EC07                       	smpsPSGAlterVol     $07
000982FB E103                       	smpsAlterNote       $03
000982FD 8001                       	dc.b	nRst, $01
000982FF E102                       	smpsAlterNote       $02
00098301 01                         	dc.b	$01
00098302 E1FD                       	smpsAlterNote       $FD
00098304 01                         	dc.b	$01
00098305 E1F9                       	smpsAlterNote       $F9
00098307 01                         	dc.b	$01
00098308 E1FD                       	smpsAlterNote       $FD
0009830A 01                         	dc.b	$01
0009830B E100                       	smpsAlterNote       $00
0009830D 01                         	dc.b	$01
0009830E E103                       	smpsAlterNote       $03
00098310 01                         	dc.b	$01
00098311 E100                       	smpsAlterNote       $00
00098313 01                         	dc.b	$01
00098314 E1FA                       	smpsAlterNote       $FA
00098316 01                         	dc.b	$01
00098317 E1F9                       	smpsAlterNote       $F9
00098319 01                         	dc.b	$01
0009831A E1FD                       	smpsAlterNote       $FD
0009831C 01                         	dc.b	$01
0009831D E102                       	smpsAlterNote       $02
0009831F 0101                       	dc.b	$01, $01
00098321 E100                       	smpsAlterNote       $00
00098323 01                         	dc.b	$01
00098324 E1FD                       	smpsAlterNote       $FD
00098326 ECF5                       	smpsPSGAlterVol     $F5
00098328 910D                       	dc.b	nE1, $0D
0009832A E103                       	smpsAlterNote       $03
0009832C EC0B                       	smpsPSGAlterVol     $0B
0009832E 8001 01                    	dc.b	nRst, $01, $01
00098331 E100                       	smpsAlterNote       $00
00098333 01                         	dc.b	$01
00098334 E1FA                       	smpsAlterNote       $FA
00098336 0101                       	dc.b	$01, $01
00098338 E100                       	smpsAlterNote       $00
0009833A 01                         	dc.b	$01
0009833B E103                       	smpsAlterNote       $03
0009833D 01                         	dc.b	$01
0009833E E1FD                       	smpsAlterNote       $FD
00098340 ECF5                       	smpsPSGAlterVol     $F5
00098342 9206                       	dc.b	nF1, $06
00098344 EC04                       	smpsPSGAlterVol     $04
00098346 E701                       	dc.b	smpsNoAttack, $01
00098348 EC07                       	smpsPSGAlterVol     $07
0009834A 8003                       	dc.b	nRst, $03
0009834C ECF5                       	smpsPSGAlterVol     $F5
0009834E 9207                       	dc.b	nF1, $07
00098350 EC0B                       	smpsPSGAlterVol     $0B
00098352 8006                       	dc.b	nRst, $06
00098354 E100                       	smpsAlterNote       $00
00098356 01                         	dc.b	$01
00098357 E103                       	smpsAlterNote       $03
00098359 0101                       	dc.b	$01, $01
0009835B E1FD                       	smpsAlterNote       $FD
0009835D 01                         	dc.b	$01
0009835E ECF5                       	smpsPSGAlterVol     $F5
00098360 9407                       	dc.b	nG1, $07
00098362 EC0B                       	smpsPSGAlterVol     $0B
00098364 8004                       	dc.b	nRst, $04
00098366 ECF5                       	smpsPSGAlterVol     $F5
00098368 9406                       	dc.b	nG1, $06
0009836A EC04                       	smpsPSGAlterVol     $04
0009836C E701                       	dc.b	smpsNoAttack, $01
0009836E EC07                       	smpsPSGAlterVol     $07
00098370 8006                       	dc.b	nRst, $06
00098372 E103                       	smpsAlterNote       $03
00098374 01                         	dc.b	$01
00098375 E104                       	smpsAlterNote       $04
00098377 01                         	dc.b	$01
00098378 E100                       	smpsAlterNote       $00
0009837A 01                         	dc.b	$01
0009837B E1F9                       	smpsAlterNote       $F9
0009837D 01                         	dc.b	$01
0009837E E1FD                       	smpsAlterNote       $FD
00098380 ECF5                       	smpsPSGAlterVol     $F5
00098382 9206                       	dc.b	nF1, $06
00098384 EC04                       	smpsPSGAlterVol     $04
00098386 E701                       	dc.b	smpsNoAttack, $01
00098388 EC07                       	smpsPSGAlterVol     $07
0009838A 8003                       	dc.b	nRst, $03
0009838C ECF5                       	smpsPSGAlterVol     $F5
0009838E 9206                       	dc.b	nF1, $06
00098390 EC04                       	smpsPSGAlterVol     $04
00098392 E701                       	dc.b	smpsNoAttack, $01
00098394 EC07                       	smpsPSGAlterVol     $07
00098396 8006                       	dc.b	nRst, $06
00098398 E100                       	smpsAlterNote       $00
0009839A 01                         	dc.b	$01
0009839B E104                       	smpsAlterNote       $04
0009839D 01                         	dc.b	$01
0009839E E103                       	smpsAlterNote       $03
000983A0 01                         	dc.b	$01
000983A1 E1FD                       	smpsAlterNote       $FD
000983A3 01                         	dc.b	$01
000983A4 ECF5                       	smpsPSGAlterVol     $F5
000983A6 9407                       	dc.b	nG1, $07
000983A8 EC0B                       	smpsPSGAlterVol     $0B
000983AA 8004                       	dc.b	nRst, $04
000983AC ECF5                       	smpsPSGAlterVol     $F5
000983AE 9406                       	dc.b	nG1, $06
000983B0 EC0B                       	smpsPSGAlterVol     $0B
000983B2 8007                       	dc.b	nRst, $07
000983B4 E103                       	smpsAlterNote       $03
000983B6 0101                       	dc.b	$01, $01
000983B8 E100                       	smpsAlterNote       $00
000983BA 01                         	dc.b	$01
000983BB E1F9                       	smpsAlterNote       $F9
000983BD 01                         	dc.b	$01
000983BE E1FD                       	smpsAlterNote       $FD
000983C0 ECF5                       	smpsPSGAlterVol     $F5
000983C2 9206                       	dc.b	nF1, $06
000983C4 EC04                       	smpsPSGAlterVol     $04
000983C6 E701                       	dc.b	smpsNoAttack, $01
000983C8 EC07                       	smpsPSGAlterVol     $07
000983CA 8003                       	dc.b	nRst, $03
000983CC ECF5                       	smpsPSGAlterVol     $F5
000983CE 9206                       	dc.b	nF1, $06
000983D0 EC04                       	smpsPSGAlterVol     $04
000983D2 E701                       	dc.b	smpsNoAttack, $01
000983D4 EC07                       	smpsPSGAlterVol     $07
000983D6 8006                       	dc.b	nRst, $06
000983D8 E100                       	smpsAlterNote       $00
000983DA 01                         	dc.b	$01
000983DB E104                       	smpsAlterNote       $04
000983DD 01                         	dc.b	$01
000983DE E100                       	smpsAlterNote       $00
000983E0 01                         	dc.b	$01
000983E1 E1FB                       	smpsAlterNote       $FB
000983E3 01                         	dc.b	$01
000983E4 E1FD                       	smpsAlterNote       $FD
000983E6 ECF5                       	smpsPSGAlterVol     $F5
000983E8 9406                       	dc.b	nG1, $06
000983EA EC04                       	smpsPSGAlterVol     $04
000983EC E701                       	dc.b	smpsNoAttack, $01
000983EE EC07                       	smpsPSGAlterVol     $07
000983F0 8003                       	dc.b	nRst, $03
000983F2 ECF5                       	smpsPSGAlterVol     $F5
000983F4 9407                       	dc.b	nG1, $07
000983F6 EC0B                       	smpsPSGAlterVol     $0B
000983F8 8006                       	dc.b	nRst, $06
000983FA E100                       	smpsAlterNote       $00
000983FC 01                         	dc.b	$01
000983FD E103                       	smpsAlterNote       $03
000983FF 0101                       	dc.b	$01, $01
00098401 E1FD                       	smpsAlterNote       $FD
00098403 01                         	dc.b	$01
00098404 ECF5                       	smpsPSGAlterVol     $F5
00098406 9207                       	dc.b	nF1, $07
00098408 EC0B                       	smpsPSGAlterVol     $0B
0009840A 8004                       	dc.b	nRst, $04
0009840C ECF5                       	smpsPSGAlterVol     $F5
0009840E 9206                       	dc.b	nF1, $06
00098410 EC04                       	smpsPSGAlterVol     $04
00098412 E701                       	dc.b	smpsNoAttack, $01
00098414 ECFC                       	smpsPSGAlterVol     $FC
00098416 E1FC                       	smpsAlterNote       $FC
00098418 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009841C EC04                       	smpsPSGAlterVol     $04
0009841E E701                       	dc.b	smpsNoAttack, $01
00098420 ECFC                       	smpsPSGAlterVol     $FC
00098422 9003                       	dc.b	nEb1, $03
00098424 E1FD                       	smpsAlterNote       $FD
00098426 9403                       	dc.b	nG1, $03
00098428 EC04                       	smpsPSGAlterVol     $04
0009842A E701                       	dc.b	smpsNoAttack, $01
0009842C E1FE                       	smpsAlterNote       $FE
0009842E ECFC                       	smpsPSGAlterVol     $FC
00098430 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098434 EC04                       	smpsPSGAlterVol     $04
00098436 E701                       	dc.b	smpsNoAttack, $01
00098438 EC07                       	smpsPSGAlterVol     $07
0009843A 8009                       	dc.b	nRst, $09
0009843C E100                       	smpsAlterNote       $00
0009843E 01                         	dc.b	$01
0009843F F6F5 19                    	smpsJump            music84_Jump07
00098442                            
00098442                            ; PSG2 Data
00098442                            music84_PSG2:
00098442 E1FC                       	smpsAlterNote       $FC
00098444 EC04                       	smpsPSGAlterVol     $04
00098446 8F03                       	dc.b	nD1, $03
00098448 E1FD                       	smpsAlterNote       $FD
0009844A 9203                       	dc.b	nF1, $03
0009844C EC04                       	smpsPSGAlterVol     $04
0009844E E701                       	dc.b	smpsNoAttack, $01
00098450 E1FE                       	smpsAlterNote       $FE
00098452 ECFC                       	smpsPSGAlterVol     $FC
00098454 9603                       	dc.b	nA1, $03
00098456 E1FD                       	smpsAlterNote       $FD
00098458 9103                       	dc.b	nE1, $03
0009845A EC04                       	smpsPSGAlterVol     $04
0009845C E701                       	dc.b	smpsNoAttack, $01
0009845E ECFC                       	smpsPSGAlterVol     $FC
00098460 9403                       	dc.b	nG1, $03
00098462 E1FE                       	smpsAlterNote       $FE
00098464 9703                       	dc.b	nBb1, $03
00098466 EC04                       	smpsPSGAlterVol     $04
00098468 E701                       	dc.b	smpsNoAttack, $01
0009846A E1FF                       	smpsAlterNote       $FF
0009846C ECFC                       	smpsPSGAlterVol     $FC
0009846E 9B02                       	dc.b	nD2, $02
00098470 EC04                       	smpsPSGAlterVol     $04
00098472 E701                       	dc.b	smpsNoAttack, $01
00098474 ECFC                       	smpsPSGAlterVol     $FC
00098476 E1FE                       	smpsAlterNote       $FE
00098478 9A03                       	dc.b	nCs2, $03
0009847A EC0B                       	smpsPSGAlterVol     $0B
0009847C 800A                       	dc.b	nRst, $0A
0009847E E102                       	smpsAlterNote       $02
00098480 01                         	dc.b	$01
00098481 E10A                       	smpsAlterNote       $0A
00098483 01                         	dc.b	$01
00098484 E102                       	smpsAlterNote       $02
00098486 01                         	dc.b	$01
00098487 E1FC                       	smpsAlterNote       $FC
00098489 01                         	dc.b	$01
0009848A E10A                       	smpsAlterNote       $0A
0009848C 01                         	dc.b	$01
0009848D E1FC                       	smpsAlterNote       $FC
0009848F 01                         	dc.b	$01
00098490 E108                       	smpsAlterNote       $08
00098492 01                         	dc.b	$01
00098493 E10A                       	smpsAlterNote       $0A
00098495 01                         	dc.b	$01
00098496 E102                       	smpsAlterNote       $02
00098498 01                         	dc.b	$01
00098499 E1F7                       	smpsAlterNote       $F7
0009849B 0101                       	dc.b	$01, $01
0009849D E102                       	smpsAlterNote       $02
0009849F 01                         	dc.b	$01
000984A0 E108                       	smpsAlterNote       $08
000984A2 0101                       	dc.b	$01, $01
000984A4 E1FC                       	smpsAlterNote       $FC
000984A6 01                         	dc.b	$01
000984A7 E10A                       	smpsAlterNote       $0A
000984A9 01                         	dc.b	$01
000984AA E1F7                       	smpsAlterNote       $F7
000984AC 01                         	dc.b	$01
000984AD E102                       	smpsAlterNote       $02
000984AF 01                         	dc.b	$01
000984B0 E10A                       	smpsAlterNote       $0A
000984B2 01                         	dc.b	$01
000984B3 E102                       	smpsAlterNote       $02
000984B5 01                         	dc.b	$01
000984B6 E1FC                       	smpsAlterNote       $FC
000984B8 01                         	dc.b	$01
000984B9                            
000984B9                            music84_Jump06:
000984B9 E10A                       	smpsAlterNote       $0A
000984BB 8001                       	dc.b	nRst, $01
000984BD E1FC                       	smpsAlterNote       $FC
000984BF 01                         	dc.b	$01
000984C0 E108                       	smpsAlterNote       $08
000984C2 01                         	dc.b	$01
000984C3 E10A                       	smpsAlterNote       $0A
000984C5 01                         	dc.b	$01
000984C6 E1FC                       	smpsAlterNote       $FC
000984C8 ECF5                       	smpsPSGAlterVol     $F5
000984CA 8F06                       	dc.b	nD1, $06
000984CC EC04                       	smpsPSGAlterVol     $04
000984CE E701                       	dc.b	smpsNoAttack, $01
000984D0 EC07                       	smpsPSGAlterVol     $07
000984D2 8003                       	dc.b	nRst, $03
000984D4 ECF5                       	smpsPSGAlterVol     $F5
000984D6 8F06                       	dc.b	nD1, $06
000984D8 EC04                       	smpsPSGAlterVol     $04
000984DA E701                       	dc.b	smpsNoAttack, $01
000984DC EC07                       	smpsPSGAlterVol     $07
000984DE 8006                       	dc.b	nRst, $06
000984E0 E1FF                       	smpsAlterNote       $FF
000984E2 01                         	dc.b	$01
000984E3 E102                       	smpsAlterNote       $02
000984E5 01                         	dc.b	$01
000984E6 E1FF                       	smpsAlterNote       $FF
000984E8 01                         	dc.b	$01
000984E9 E1F9                       	smpsAlterNote       $F9
000984EB 01                         	dc.b	$01
000984EC E1FC                       	smpsAlterNote       $FC
000984EE ECF5                       	smpsPSGAlterVol     $F5
000984F0 9006                       	dc.b	nEb1, $06
000984F2 EC04                       	smpsPSGAlterVol     $04
000984F4 E701                       	dc.b	smpsNoAttack, $01
000984F6 EC07                       	smpsPSGAlterVol     $07
000984F8 8003                       	dc.b	nRst, $03
000984FA ECF5                       	smpsPSGAlterVol     $F5
000984FC 9007                       	dc.b	nEb1, $07
000984FE EC0B                       	smpsPSGAlterVol     $0B
00098500 8006                       	dc.b	nRst, $06
00098502 E1FF                       	smpsAlterNote       $FF
00098504 01                         	dc.b	$01
00098505 E103                       	smpsAlterNote       $03
00098507 0101                       	dc.b	$01, $01
00098509 E1FC                       	smpsAlterNote       $FC
0009850B 01                         	dc.b	$01
0009850C ECF5                       	smpsPSGAlterVol     $F5
0009850E 8F07                       	dc.b	nD1, $07
00098510 EC0B                       	smpsPSGAlterVol     $0B
00098512 8004                       	dc.b	nRst, $04
00098514 ECF5                       	smpsPSGAlterVol     $F5
00098516 8F06                       	dc.b	nD1, $06
00098518 EC04                       	smpsPSGAlterVol     $04
0009851A E701                       	dc.b	smpsNoAttack, $01
0009851C EC07                       	smpsPSGAlterVol     $07
0009851E 8006                       	dc.b	nRst, $06
00098520 E102                       	smpsAlterNote       $02
00098522 01                         	dc.b	$01
00098523 E103                       	smpsAlterNote       $03
00098525 01                         	dc.b	$01
00098526 E1FF                       	smpsAlterNote       $FF
00098528 01                         	dc.b	$01
00098529 E1F9                       	smpsAlterNote       $F9
0009852B 01                         	dc.b	$01
0009852C E1FC                       	smpsAlterNote       $FC
0009852E ECF5                       	smpsPSGAlterVol     $F5
00098530 8F06                       	dc.b	nD1, $06
00098532 EC04                       	smpsPSGAlterVol     $04
00098534 E701                       	dc.b	smpsNoAttack, $01
00098536 EC07                       	smpsPSGAlterVol     $07
00098538 8003                       	dc.b	nRst, $03
0009853A ECF5                       	smpsPSGAlterVol     $F5
0009853C 8F06                       	dc.b	nD1, $06
0009853E EC04                       	smpsPSGAlterVol     $04
00098540 E701                       	dc.b	smpsNoAttack, $01
00098542 EC07                       	smpsPSGAlterVol     $07
00098544 8006                       	dc.b	nRst, $06
00098546 E1FF                       	smpsAlterNote       $FF
00098548 01                         	dc.b	$01
00098549 E103                       	smpsAlterNote       $03
0009854B 01                         	dc.b	$01
0009854C E1FF                       	smpsAlterNote       $FF
0009854E 01                         	dc.b	$01
0009854F E1FC                       	smpsAlterNote       $FC
00098551 01                         	dc.b	$01
00098552 ECF5                       	smpsPSGAlterVol     $F5
00098554 8F06                       	dc.b	nD1, $06
00098556 EC04                       	smpsPSGAlterVol     $04
00098558 E701                       	dc.b	smpsNoAttack, $01
0009855A EC07                       	smpsPSGAlterVol     $07
0009855C 8003                       	dc.b	nRst, $03
0009855E ECF5                       	smpsPSGAlterVol     $F5
00098560 8F07                       	dc.b	nD1, $07
00098562 EC0B                       	smpsPSGAlterVol     $0B
00098564 8007                       	dc.b	nRst, $07
00098566 E101                       	smpsAlterNote       $01
00098568 0101                       	dc.b	$01, $01
0009856A E1FC                       	smpsAlterNote       $FC
0009856C 01                         	dc.b	$01
0009856D E1F9                       	smpsAlterNote       $F9
0009856F 01                         	dc.b	$01
00098570 E1FC                       	smpsAlterNote       $FC
00098572 ECF5                       	smpsPSGAlterVol     $F5
00098574 9006                       	dc.b	nEb1, $06
00098576 EC0B                       	smpsPSGAlterVol     $0B
00098578 8004                       	dc.b	nRst, $04
0009857A ECF5                       	smpsPSGAlterVol     $F5
0009857C 9006                       	dc.b	nEb1, $06
0009857E EC04                       	smpsPSGAlterVol     $04
00098580 E701                       	dc.b	smpsNoAttack, $01
00098582 EC07                       	smpsPSGAlterVol     $07
00098584 8006                       	dc.b	nRst, $06
00098586 E100                       	smpsAlterNote       $00
00098588 01                         	dc.b	$01
00098589 E102                       	smpsAlterNote       $02
0009858B 01                         	dc.b	$01
0009858C E100                       	smpsAlterNote       $00
0009858E 01                         	dc.b	$01
0009858F E1FD                       	smpsAlterNote       $FD
00098591 01                         	dc.b	$01
00098592 E1FF                       	smpsAlterNote       $FF
00098594 ECF5                       	smpsPSGAlterVol     $F5
00098596 9B06                       	dc.b	nD2, $06
00098598 EC04                       	smpsPSGAlterVol     $04
0009859A E701                       	dc.b	smpsNoAttack, $01
0009859C EC07                       	smpsPSGAlterVol     $07
0009859E 8003                       	dc.b	nRst, $03
000985A0 ECF5                       	smpsPSGAlterVol     $F5
000985A2 9B07                       	dc.b	nD2, $07
000985A4 EC0B                       	smpsPSGAlterVol     $0B
000985A6 8006                       	dc.b	nRst, $06
000985A8 E102                       	smpsAlterNote       $02
000985AA 01                         	dc.b	$01
000985AB E106                       	smpsAlterNote       $06
000985AD 01                         	dc.b	$01
000985AE E105                       	smpsAlterNote       $05
000985B0 01                         	dc.b	$01
000985B1 E1FF                       	smpsAlterNote       $FF
000985B3 01                         	dc.b	$01
000985B4 ECF5                       	smpsPSGAlterVol     $F5
000985B6 9B07                       	dc.b	nD2, $07
000985B8 EC0B                       	smpsPSGAlterVol     $0B
000985BA 8004                       	dc.b	nRst, $04
000985BC ECF5                       	smpsPSGAlterVol     $F5
000985BE 9B06                       	dc.b	nD2, $06
000985C0 EC0B                       	smpsPSGAlterVol     $0B
000985C2 8007                       	dc.b	nRst, $07
000985C4 E105                       	smpsAlterNote       $05
000985C6 0101                       	dc.b	$01, $01
000985C8 E102                       	smpsAlterNote       $02
000985CA 01                         	dc.b	$01
000985CB E1FC                       	smpsAlterNote       $FC
000985CD 01                         	dc.b	$01
000985CE E1FF                       	smpsAlterNote       $FF
000985D0 ECF5                       	smpsPSGAlterVol     $F5
000985D2 9B06                       	dc.b	nD2, $06
000985D4 EC04                       	smpsPSGAlterVol     $04
000985D6 E701                       	dc.b	smpsNoAttack, $01
000985D8 EC07                       	smpsPSGAlterVol     $07
000985DA 8003                       	dc.b	nRst, $03
000985DC ECF5                       	smpsPSGAlterVol     $F5
000985DE 9B06                       	dc.b	nD2, $06
000985E0 EC04                       	smpsPSGAlterVol     $04
000985E2 E701                       	dc.b	smpsNoAttack, $01
000985E4 EC07                       	smpsPSGAlterVol     $07
000985E6 8006                       	dc.b	nRst, $06
000985E8 E102                       	smpsAlterNote       $02
000985EA 01                         	dc.b	$01
000985EB E106                       	smpsAlterNote       $06
000985ED 01                         	dc.b	$01
000985EE E102                       	smpsAlterNote       $02
000985F0 01                         	dc.b	$01
000985F1 E1FF                       	smpsAlterNote       $FF
000985F3 01                         	dc.b	$01
000985F4 ECF5                       	smpsPSGAlterVol     $F5
000985F6 9B06                       	dc.b	nD2, $06
000985F8 EC04                       	smpsPSGAlterVol     $04
000985FA E701                       	dc.b	smpsNoAttack, $01
000985FC EC07                       	smpsPSGAlterVol     $07
000985FE 8003                       	dc.b	nRst, $03
00098600 ECF5                       	smpsPSGAlterVol     $F5
00098602 9B07                       	dc.b	nD2, $07
00098604 EC0B                       	smpsPSGAlterVol     $0B
00098606 8007                       	dc.b	nRst, $07
00098608 E105                       	smpsAlterNote       $05
0009860A 0101                       	dc.b	$01, $01
0009860C E1FF                       	smpsAlterNote       $FF
0009860E 01                         	dc.b	$01
0009860F E1FC                       	smpsAlterNote       $FC
00098611 01                         	dc.b	$01
00098612 E1FF                       	smpsAlterNote       $FF
00098614 ECF5                       	smpsPSGAlterVol     $F5
00098616 9B06                       	dc.b	nD2, $06
00098618 EC0B                       	smpsPSGAlterVol     $0B
0009861A 8004                       	dc.b	nRst, $04
0009861C ECF5                       	smpsPSGAlterVol     $F5
0009861E 9B06                       	dc.b	nD2, $06
00098620 EC04                       	smpsPSGAlterVol     $04
00098622 E701                       	dc.b	smpsNoAttack, $01
00098624 EC07                       	smpsPSGAlterVol     $07
00098626 8006                       	dc.b	nRst, $06
00098628 E105                       	smpsAlterNote       $05
0009862A 01                         	dc.b	$01
0009862B E106                       	smpsAlterNote       $06
0009862D 01                         	dc.b	$01
0009862E E102                       	smpsAlterNote       $02
00098630 01                         	dc.b	$01
00098631 E1FC                       	smpsAlterNote       $FC
00098633 01                         	dc.b	$01
00098634 E1FF                       	smpsAlterNote       $FF
00098636 ECF5                       	smpsPSGAlterVol     $F5
00098638 9B06                       	dc.b	nD2, $06
0009863A EC04                       	smpsPSGAlterVol     $04
0009863C E701                       	dc.b	smpsNoAttack, $01
0009863E EC07                       	smpsPSGAlterVol     $07
00098640 8003                       	dc.b	nRst, $03
00098642 ECF5                       	smpsPSGAlterVol     $F5
00098644 9B06                       	dc.b	nD2, $06
00098646 EC04                       	smpsPSGAlterVol     $04
00098648 E701                       	dc.b	smpsNoAttack, $01
0009864A EC07                       	smpsPSGAlterVol     $07
0009864C 8006                       	dc.b	nRst, $06
0009864E E102                       	smpsAlterNote       $02
00098650 01                         	dc.b	$01
00098651 E106                       	smpsAlterNote       $06
00098653 01                         	dc.b	$01
00098654 E105                       	smpsAlterNote       $05
00098656 01                         	dc.b	$01
00098657 E1FF                       	smpsAlterNote       $FF
00098659 01                         	dc.b	$01
0009865A ECF5                       	smpsPSGAlterVol     $F5
0009865C 9B07                       	dc.b	nD2, $07
0009865E EC0B                       	smpsPSGAlterVol     $0B
00098660 8004                       	dc.b	nRst, $04
00098662 ECF5                       	smpsPSGAlterVol     $F5
00098664 9B06                       	dc.b	nD2, $06
00098666 EC0B                       	smpsPSGAlterVol     $0B
00098668 8007                       	dc.b	nRst, $07
0009866A E105                       	smpsAlterNote       $05
0009866C 0101                       	dc.b	$01, $01
0009866E E102                       	smpsAlterNote       $02
00098670 01                         	dc.b	$01
00098671 E1FC                       	smpsAlterNote       $FC
00098673 01                         	dc.b	$01
00098674 E1FF                       	smpsAlterNote       $FF
00098676 ECF5                       	smpsPSGAlterVol     $F5
00098678 9B06                       	dc.b	nD2, $06
0009867A EC04                       	smpsPSGAlterVol     $04
0009867C E701                       	dc.b	smpsNoAttack, $01
0009867E EC07                       	smpsPSGAlterVol     $07
00098680 8003                       	dc.b	nRst, $03
00098682 ECF5                       	smpsPSGAlterVol     $F5
00098684 9B06                       	dc.b	nD2, $06
00098686 EC04                       	smpsPSGAlterVol     $04
00098688 E701                       	dc.b	smpsNoAttack, $01
0009868A EC07                       	smpsPSGAlterVol     $07
0009868C 8006                       	dc.b	nRst, $06
0009868E E102                       	smpsAlterNote       $02
00098690 01                         	dc.b	$01
00098691 E106                       	smpsAlterNote       $06
00098693 01                         	dc.b	$01
00098694 E102                       	smpsAlterNote       $02
00098696 01                         	dc.b	$01
00098697 E1FF                       	smpsAlterNote       $FF
00098699 01                         	dc.b	$01
0009869A ECF5                       	smpsPSGAlterVol     $F5
0009869C 9B06                       	dc.b	nD2, $06
0009869E EC04                       	smpsPSGAlterVol     $04
000986A0 E701                       	dc.b	smpsNoAttack, $01
000986A2 EC07                       	smpsPSGAlterVol     $07
000986A4 8003                       	dc.b	nRst, $03
000986A6 ECF5                       	smpsPSGAlterVol     $F5
000986A8 9B07                       	dc.b	nD2, $07
000986AA E1FE                       	smpsAlterNote       $FE
000986AC 9706                       	dc.b	nBb1, $06
000986AE EC04                       	smpsPSGAlterVol     $04
000986B0 E701                       	dc.b	smpsNoAttack, $01
000986B2 ECFC                       	smpsPSGAlterVol     $FC
000986B4 9703                       	dc.b	nBb1, $03
000986B6 EC04                       	smpsPSGAlterVol     $04
000986B8 E701                       	dc.b	smpsNoAttack, $01
000986BA ECFC                       	smpsPSGAlterVol     $FC
000986BC 9702                       	dc.b	nBb1, $02
000986BE EC04                       	smpsPSGAlterVol     $04
000986C0 E701                       	dc.b	smpsNoAttack, $01
000986C2 ECFC                       	smpsPSGAlterVol     $FC
000986C4 9606                       	dc.b	nA1, $06
000986C6 EC04                       	smpsPSGAlterVol     $04
000986C8 E701                       	dc.b	smpsNoAttack, $01
000986CA EC07                       	smpsPSGAlterVol     $07
000986CC 8006                       	dc.b	nRst, $06
000986CE E101                       	smpsAlterNote       $01
000986D0 01                         	dc.b	$01
000986D1 E107                       	smpsAlterNote       $07
000986D3 01                         	dc.b	$01
000986D4 E101                       	smpsAlterNote       $01
000986D6 01                         	dc.b	$01
000986D7 E1F8                       	smpsAlterNote       $F8
000986D9 01                         	dc.b	$01
000986DA E1F7                       	smpsAlterNote       $F7
000986DC 01                         	dc.b	$01
000986DD E1FC                       	smpsAlterNote       $FC
000986DF 01                         	dc.b	$01
000986E0 E106                       	smpsAlterNote       $06
000986E2 01                         	dc.b	$01
000986E3 E107                       	smpsAlterNote       $07
000986E5 01                         	dc.b	$01
000986E6 E101                       	smpsAlterNote       $01
000986E8 01                         	dc.b	$01
000986E9 E1F8                       	smpsAlterNote       $F8
000986EB 0101                       	dc.b	$01, $01
000986ED E1FC                       	smpsAlterNote       $FC
000986EF ECF5                       	smpsPSGAlterVol     $F5
000986F1 8F06                       	dc.b	nD1, $06
000986F3 EC04                       	smpsPSGAlterVol     $04
000986F5 E701                       	dc.b	smpsNoAttack, $01
000986F7 EC07                       	smpsPSGAlterVol     $07
000986F9 8003                       	dc.b	nRst, $03
000986FB ECF5                       	smpsPSGAlterVol     $F5
000986FD 8F06                       	dc.b	nD1, $06
000986FF EC04                       	smpsPSGAlterVol     $04
00098701 E701                       	dc.b	smpsNoAttack, $01
00098703 EC07                       	smpsPSGAlterVol     $07
00098705 8006                       	dc.b	nRst, $06
00098707 E1FF                       	smpsAlterNote       $FF
00098709 01                         	dc.b	$01
0009870A E102                       	smpsAlterNote       $02
0009870C 01                         	dc.b	$01
0009870D E101                       	smpsAlterNote       $01
0009870F 01                         	dc.b	$01
00098710 E1FC                       	smpsAlterNote       $FC
00098712 01                         	dc.b	$01
00098713 ECF5                       	smpsPSGAlterVol     $F5
00098715 9007                       	dc.b	nEb1, $07
00098717 EC0B                       	smpsPSGAlterVol     $0B
00098719 8004                       	dc.b	nRst, $04
0009871B ECF5                       	smpsPSGAlterVol     $F5
0009871D 9006                       	dc.b	nEb1, $06
0009871F EC0B                       	smpsPSGAlterVol     $0B
00098721 8007                       	dc.b	nRst, $07
00098723 E103                       	smpsAlterNote       $03
00098725 0101                       	dc.b	$01, $01
00098727 E1FC                       	smpsAlterNote       $FC
00098729 01                         	dc.b	$01
0009872A E1F9                       	smpsAlterNote       $F9
0009872C 01                         	dc.b	$01
0009872D E1FC                       	smpsAlterNote       $FC
0009872F ECF5                       	smpsPSGAlterVol     $F5
00098731 8F06                       	dc.b	nD1, $06
00098733 EC04                       	smpsPSGAlterVol     $04
00098735 E701                       	dc.b	smpsNoAttack, $01
00098737 EC07                       	smpsPSGAlterVol     $07
00098739 8003                       	dc.b	nRst, $03
0009873B ECF5                       	smpsPSGAlterVol     $F5
0009873D 8F06                       	dc.b	nD1, $06
0009873F EC04                       	smpsPSGAlterVol     $04
00098741 E701                       	dc.b	smpsNoAttack, $01
00098743 EC07                       	smpsPSGAlterVol     $07
00098745 8006                       	dc.b	nRst, $06
00098747 E1FF                       	smpsAlterNote       $FF
00098749 01                         	dc.b	$01
0009874A E103                       	smpsAlterNote       $03
0009874C 01                         	dc.b	$01
0009874D E1FF                       	smpsAlterNote       $FF
0009874F 01                         	dc.b	$01
00098750 E1F9                       	smpsAlterNote       $F9
00098752 01                         	dc.b	$01
00098753 E1FC                       	smpsAlterNote       $FC
00098755 ECF5                       	smpsPSGAlterVol     $F5
00098757 8F06                       	dc.b	nD1, $06
00098759 EC04                       	smpsPSGAlterVol     $04
0009875B E701                       	dc.b	smpsNoAttack, $01
0009875D EC07                       	smpsPSGAlterVol     $07
0009875F 8003                       	dc.b	nRst, $03
00098761 ECF5                       	smpsPSGAlterVol     $F5
00098763 8F07                       	dc.b	nD1, $07
00098765 EC0B                       	smpsPSGAlterVol     $0B
00098767 8006                       	dc.b	nRst, $06
00098769 E1FF                       	smpsAlterNote       $FF
0009876B 01                         	dc.b	$01
0009876C E102                       	smpsAlterNote       $02
0009876E 0101                       	dc.b	$01, $01
00098770 E1FC                       	smpsAlterNote       $FC
00098772 01                         	dc.b	$01
00098773 ECF5                       	smpsPSGAlterVol     $F5
00098775 8F07                       	dc.b	nD1, $07
00098777 EC0B                       	smpsPSGAlterVol     $0B
00098779 8004                       	dc.b	nRst, $04
0009877B ECF5                       	smpsPSGAlterVol     $F5
0009877D 8F06                       	dc.b	nD1, $06
0009877F EC04                       	smpsPSGAlterVol     $04
00098781 E701                       	dc.b	smpsNoAttack, $01
00098783 EC07                       	smpsPSGAlterVol     $07
00098785 8006                       	dc.b	nRst, $06
00098787 E101                       	smpsAlterNote       $01
00098789 01                         	dc.b	$01
0009878A E102                       	smpsAlterNote       $02
0009878C 01                         	dc.b	$01
0009878D E1FF                       	smpsAlterNote       $FF
0009878F 01                         	dc.b	$01
00098790 E1F9                       	smpsAlterNote       $F9
00098792 01                         	dc.b	$01
00098793 E1FC                       	smpsAlterNote       $FC
00098795 ECF5                       	smpsPSGAlterVol     $F5
00098797 9006                       	dc.b	nEb1, $06
00098799 EC04                       	smpsPSGAlterVol     $04
0009879B E701                       	dc.b	smpsNoAttack, $01
0009879D EC07                       	smpsPSGAlterVol     $07
0009879F 8003                       	dc.b	nRst, $03
000987A1 ECF5                       	smpsPSGAlterVol     $F5
000987A3 9006                       	dc.b	nEb1, $06
000987A5 EC04                       	smpsPSGAlterVol     $04
000987A7 E701                       	dc.b	smpsNoAttack, $01
000987A9 EC07                       	smpsPSGAlterVol     $07
000987AB 8006                       	dc.b	nRst, $06
000987AD E100                       	smpsAlterNote       $00
000987AF 01                         	dc.b	$01
000987B0 E102                       	smpsAlterNote       $02
000987B2 01                         	dc.b	$01
000987B3 E100                       	smpsAlterNote       $00
000987B5 01                         	dc.b	$01
000987B6 E1FF                       	smpsAlterNote       $FF
000987B8 01                         	dc.b	$01
000987B9 ECF5                       	smpsPSGAlterVol     $F5
000987BB 9B06                       	dc.b	nD2, $06
000987BD EC04                       	smpsPSGAlterVol     $04
000987BF E701                       	dc.b	smpsNoAttack, $01
000987C1 EC07                       	smpsPSGAlterVol     $07
000987C3 8003                       	dc.b	nRst, $03
000987C5 ECF5                       	smpsPSGAlterVol     $F5
000987C7 9B07                       	dc.b	nD2, $07
000987C9 EC0B                       	smpsPSGAlterVol     $0B
000987CB 8007                       	dc.b	nRst, $07
000987CD E105                       	smpsAlterNote       $05
000987CF 0101                       	dc.b	$01, $01
000987D1 E1FF                       	smpsAlterNote       $FF
000987D3 01                         	dc.b	$01
000987D4 E1FC                       	smpsAlterNote       $FC
000987D6 01                         	dc.b	$01
000987D7 E1FF                       	smpsAlterNote       $FF
000987D9 ECF5                       	smpsPSGAlterVol     $F5
000987DB 9B06                       	dc.b	nD2, $06
000987DD EC0B                       	smpsPSGAlterVol     $0B
000987DF 8004                       	dc.b	nRst, $04
000987E1 ECF5                       	smpsPSGAlterVol     $F5
000987E3 9B06                       	dc.b	nD2, $06
000987E5 EC04                       	smpsPSGAlterVol     $04
000987E7 E701                       	dc.b	smpsNoAttack, $01
000987E9 EC07                       	smpsPSGAlterVol     $07
000987EB 8006                       	dc.b	nRst, $06
000987ED E102                       	smpsAlterNote       $02
000987EF 01                         	dc.b	$01
000987F0 E106                       	smpsAlterNote       $06
000987F2 01                         	dc.b	$01
000987F3 E102                       	smpsAlterNote       $02
000987F5 01                         	dc.b	$01
000987F6 E1FC                       	smpsAlterNote       $FC
000987F8 01                         	dc.b	$01
000987F9 E1FF                       	smpsAlterNote       $FF
000987FB ECF5                       	smpsPSGAlterVol     $F5
000987FD 9B06                       	dc.b	nD2, $06
000987FF EC04                       	smpsPSGAlterVol     $04
00098801 E701                       	dc.b	smpsNoAttack, $01
00098803 EC07                       	smpsPSGAlterVol     $07
00098805 8003                       	dc.b	nRst, $03
00098807 ECF5                       	smpsPSGAlterVol     $F5
00098809 9B07                       	dc.b	nD2, $07
0009880B EC0B                       	smpsPSGAlterVol     $0B
0009880D 8006                       	dc.b	nRst, $06
0009880F E102                       	smpsAlterNote       $02
00098811 01                         	dc.b	$01
00098812 E105                       	smpsAlterNote       $05
00098814 0101                       	dc.b	$01, $01
00098816 E1FF                       	smpsAlterNote       $FF
00098818 01                         	dc.b	$01
00098819 ECF5                       	smpsPSGAlterVol     $F5
0009881B 9B07                       	dc.b	nD2, $07
0009881D EC0B                       	smpsPSGAlterVol     $0B
0009881F 8004                       	dc.b	nRst, $04
00098821 ECF5                       	smpsPSGAlterVol     $F5
00098823 9B06                       	dc.b	nD2, $06
00098825 EC0B                       	smpsPSGAlterVol     $0B
00098827 8007                       	dc.b	nRst, $07
00098829 E105                       	smpsAlterNote       $05
0009882B 0101                       	dc.b	$01, $01
0009882D E102                       	smpsAlterNote       $02
0009882F 01                         	dc.b	$01
00098830 E1FC                       	smpsAlterNote       $FC
00098832 01                         	dc.b	$01
00098833 E1FF                       	smpsAlterNote       $FF
00098835 ECF5                       	smpsPSGAlterVol     $F5
00098837 9B06                       	dc.b	nD2, $06
00098839 EC04                       	smpsPSGAlterVol     $04
0009883B E701                       	dc.b	smpsNoAttack, $01
0009883D EC07                       	smpsPSGAlterVol     $07
0009883F 8003                       	dc.b	nRst, $03
00098841 ECF5                       	smpsPSGAlterVol     $F5
00098843 9B06                       	dc.b	nD2, $06
00098845 EC04                       	smpsPSGAlterVol     $04
00098847 E701                       	dc.b	smpsNoAttack, $01
00098849 EC07                       	smpsPSGAlterVol     $07
0009884B 8006                       	dc.b	nRst, $06
0009884D E102                       	smpsAlterNote       $02
0009884F 01                         	dc.b	$01
00098850 E106                       	smpsAlterNote       $06
00098852 01                         	dc.b	$01
00098853 E102                       	smpsAlterNote       $02
00098855 01                         	dc.b	$01
00098856 E1FF                       	smpsAlterNote       $FF
00098858 01                         	dc.b	$01
00098859 ECF5                       	smpsPSGAlterVol     $F5
0009885B 9B06                       	dc.b	nD2, $06
0009885D EC04                       	smpsPSGAlterVol     $04
0009885F E701                       	dc.b	smpsNoAttack, $01
00098861 EC07                       	smpsPSGAlterVol     $07
00098863 8003                       	dc.b	nRst, $03
00098865 ECF5                       	smpsPSGAlterVol     $F5
00098867 9B07                       	dc.b	nD2, $07
00098869 EC0B                       	smpsPSGAlterVol     $0B
0009886B 8007                       	dc.b	nRst, $07
0009886D E105                       	smpsAlterNote       $05
0009886F 0101                       	dc.b	$01, $01
00098871 E1FF                       	smpsAlterNote       $FF
00098873 01                         	dc.b	$01
00098874 E1FC                       	smpsAlterNote       $FC
00098876 01                         	dc.b	$01
00098877 E1FF                       	smpsAlterNote       $FF
00098879 ECF5                       	smpsPSGAlterVol     $F5
0009887B 9B06                       	dc.b	nD2, $06
0009887D EC0B                       	smpsPSGAlterVol     $0B
0009887F 8004                       	dc.b	nRst, $04
00098881 ECF5                       	smpsPSGAlterVol     $F5
00098883 9B06                       	dc.b	nD2, $06
00098885 EC04                       	smpsPSGAlterVol     $04
00098887 E701                       	dc.b	smpsNoAttack, $01
00098889 EC07                       	smpsPSGAlterVol     $07
0009888B 8006                       	dc.b	nRst, $06
0009888D E102                       	smpsAlterNote       $02
0009888F 01                         	dc.b	$01
00098890 E106                       	smpsAlterNote       $06
00098892 01                         	dc.b	$01
00098893 E102                       	smpsAlterNote       $02
00098895 01                         	dc.b	$01
00098896 E1FC                       	smpsAlterNote       $FC
00098898 01                         	dc.b	$01
00098899 E1FF                       	smpsAlterNote       $FF
0009889B ECF5                       	smpsPSGAlterVol     $F5
0009889D 9B06                       	dc.b	nD2, $06
0009889F EC04                       	smpsPSGAlterVol     $04
000988A1 E701                       	dc.b	smpsNoAttack, $01
000988A3 EC07                       	smpsPSGAlterVol     $07
000988A5 8003                       	dc.b	nRst, $03
000988A7 ECF5                       	smpsPSGAlterVol     $F5
000988A9 9B06                       	dc.b	nD2, $06
000988AB EC04                       	smpsPSGAlterVol     $04
000988AD E701                       	dc.b	smpsNoAttack, $01
000988AF EC07                       	smpsPSGAlterVol     $07
000988B1 8006                       	dc.b	nRst, $06
000988B3 E102                       	smpsAlterNote       $02
000988B5 01                         	dc.b	$01
000988B6 E106                       	smpsAlterNote       $06
000988B8 01                         	dc.b	$01
000988B9 E105                       	smpsAlterNote       $05
000988BB 01                         	dc.b	$01
000988BC E1FF                       	smpsAlterNote       $FF
000988BE 01                         	dc.b	$01
000988BF ECF5                       	smpsPSGAlterVol     $F5
000988C1 9B07                       	dc.b	nD2, $07
000988C3 EC0B                       	smpsPSGAlterVol     $0B
000988C5 8004                       	dc.b	nRst, $04
000988C7 ECF5                       	smpsPSGAlterVol     $F5
000988C9 9B06                       	dc.b	nD2, $06
000988CB EC0B                       	smpsPSGAlterVol     $0B
000988CD 8007                       	dc.b	nRst, $07
000988CF E105                       	smpsAlterNote       $05
000988D1 0101                       	dc.b	$01, $01
000988D3 E101                       	smpsAlterNote       $01
000988D5 01                         	dc.b	$01
000988D6 E1FB                       	smpsAlterNote       $FB
000988D8 01                         	dc.b	$01
000988D9 E1FE                       	smpsAlterNote       $FE
000988DB ECF5                       	smpsPSGAlterVol     $F5
000988DD 9A06                       	dc.b	nCs2, $06
000988DF EC04                       	smpsPSGAlterVol     $04
000988E1 E701                       	dc.b	smpsNoAttack, $01
000988E3 EC07                       	smpsPSGAlterVol     $07
000988E5 8003                       	dc.b	nRst, $03
000988E7 ECF5                       	smpsPSGAlterVol     $F5
000988E9 9A06                       	dc.b	nCs2, $06
000988EB EC04                       	smpsPSGAlterVol     $04
000988ED E701                       	dc.b	smpsNoAttack, $01
000988EF EC07                       	smpsPSGAlterVol     $07
000988F1 8003                       	dc.b	nRst, $03
000988F3 E1FC                       	smpsAlterNote       $FC
000988F5 ECF5                       	smpsPSGAlterVol     $F5
000988F7 8F07                       	dc.b	nD1, $07
000988F9 EC0B                       	smpsPSGAlterVol     $0B
000988FB 8006                       	dc.b	nRst, $06
000988FD E1FF                       	smpsAlterNote       $FF
000988FF 01                         	dc.b	$01
00098900 E103                       	smpsAlterNote       $03
00098902 01                         	dc.b	$01
00098903 E102                       	smpsAlterNote       $02
00098905 01                         	dc.b	$01
00098906 E1FC                       	smpsAlterNote       $FC
00098908 01                         	dc.b	$01
00098909 E1F8                       	smpsAlterNote       $F8
0009890B 01                         	dc.b	$01
0009890C E1FC                       	smpsAlterNote       $FC
0009890E 01                         	dc.b	$01
0009890F E1FF                       	smpsAlterNote       $FF
00098911 01                         	dc.b	$01
00098912 E103                       	smpsAlterNote       $03
00098914 01                         	dc.b	$01
00098915 E1FC                       	smpsAlterNote       $FC
00098917 ECF5                       	smpsPSGAlterVol     $F5
00098919 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009891D EC04                       	smpsPSGAlterVol     $04
0009891F E701                       	dc.b	smpsNoAttack, $01
00098921 EC07                       	smpsPSGAlterVol     $07
00098923 8009                       	dc.b	nRst, $09
00098925 E1FF                       	smpsAlterNote       $FF
00098927 01                         	dc.b	$01
00098928 E103                       	smpsAlterNote       $03
0009892A 01                         	dc.b	$01
0009892B E102                       	smpsAlterNote       $02
0009892D 01                         	dc.b	$01
0009892E E1FC                       	smpsAlterNote       $FC
00098930 01                         	dc.b	$01
00098931 E1F8                       	smpsAlterNote       $F8
00098933 01                         	dc.b	$01
00098934 E1FC                       	smpsAlterNote       $FC
00098936 01                         	dc.b	$01
00098937 E1FF                       	smpsAlterNote       $FF
00098939 01                         	dc.b	$01
0009893A E103                       	smpsAlterNote       $03
0009893C 01                         	dc.b	$01
0009893D E1FF                       	smpsAlterNote       $FF
0009893F 01                         	dc.b	$01
00098940 E1F9                       	smpsAlterNote       $F9
00098942 01                         	dc.b	$01
00098943 E1F8                       	smpsAlterNote       $F8
00098945 01                         	dc.b	$01
00098946 E1FC                       	smpsAlterNote       $FC
00098948 01                         	dc.b	$01
00098949 E102                       	smpsAlterNote       $02
0009894B 0101                       	dc.b	$01, $01
0009894D E1FF                       	smpsAlterNote       $FF
0009894F 01                         	dc.b	$01
00098950 E1FC                       	smpsAlterNote       $FC
00098952 ECF5                       	smpsPSGAlterVol     $F5
00098954 8F02                       	dc.b	nD1, $02
00098956 EC04                       	smpsPSGAlterVol     $04
00098958 E701                       	dc.b	smpsNoAttack, $01
0009895A ECFC                       	smpsPSGAlterVol     $FC
0009895C E1FB                       	smpsAlterNote       $FB
0009895E 8D06                       	dc.b	nC1, $06
00098960 EC04                       	smpsPSGAlterVol     $04
00098962 E701                       	dc.b	smpsNoAttack, $01
00098964 EC07                       	smpsPSGAlterVol     $07
00098966 8006                       	dc.b	nRst, $06
00098968 E1FE                       	smpsAlterNote       $FE
0009896A 01                         	dc.b	$01
0009896B E102                       	smpsAlterNote       $02
0009896D 01                         	dc.b	$01
0009896E E1FE                       	smpsAlterNote       $FE
00098970 01                         	dc.b	$01
00098971 E1FB                       	smpsAlterNote       $FB
00098973 01                         	dc.b	$01
00098974 E1F7                       	smpsAlterNote       $F7
00098976 01                         	dc.b	$01
00098977 E1FB                       	smpsAlterNote       $FB
00098979 01                         	dc.b	$01
0009897A E101                       	smpsAlterNote       $01
0009897C 01                         	dc.b	$01
0009897D E102                       	smpsAlterNote       $02
0009897F 01                         	dc.b	$01
00098980 E1FB                       	smpsAlterNote       $FB
00098982 ECF5                       	smpsPSGAlterVol     $F5
00098984 8D02                       	dc.b	nC1, $02
00098986 EC04                       	smpsPSGAlterVol     $04
00098988 E701                       	dc.b	smpsNoAttack, $01
0009898A E1FC                       	smpsAlterNote       $FC
0009898C ECFC                       	smpsPSGAlterVol     $FC
0009898E 8F0D                       	dc.b	nD1, $0D
00098990 E1FF                       	smpsAlterNote       $FF
00098992 E701                       	dc.b	smpsNoAttack, $01
00098994 E103                       	smpsAlterNote       $03
00098996 E701                       	dc.b	smpsNoAttack, $01
00098998 E1FF                       	smpsAlterNote       $FF
0009899A E701                       	dc.b	smpsNoAttack, $01
0009899C E1FC                       	smpsAlterNote       $FC
0009899E E701                       	dc.b	smpsNoAttack, $01
000989A0 E1F8                       	smpsAlterNote       $F8
000989A2 E701                       	dc.b	smpsNoAttack, $01
000989A4 E1FC                       	smpsAlterNote       $FC
000989A6 E701                       	dc.b	smpsNoAttack, $01
000989A8 E102                       	smpsAlterNote       $02
000989AA E701                       	dc.b	smpsNoAttack, $01
000989AC E103                       	smpsAlterNote       $03
000989AE E701                       	dc.b	smpsNoAttack, $01
000989B0 E1FF                       	smpsAlterNote       $FF
000989B2 E701                       	dc.b	smpsNoAttack, $01
000989B4 E1F9                       	smpsAlterNote       $F9
000989B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989BA E1FC                       	smpsAlterNote       $FC
000989BC E701                       	dc.b	smpsNoAttack, $01
000989BE E102                       	smpsAlterNote       $02
000989C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989C4 E1FC                       	smpsAlterNote       $FC
000989C6 E701                       	dc.b	smpsNoAttack, $01
000989C8 E1F9                       	smpsAlterNote       $F9
000989CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989CE E1FF                       	smpsAlterNote       $FF
000989D0 EC04                       	smpsPSGAlterVol     $04
000989D2 E701                       	dc.b	smpsNoAttack, $01
000989D4 EC07                       	smpsPSGAlterVol     $07
000989D6 E103                       	smpsAlterNote       $03
000989D8 8001                       	dc.b	nRst, $01
000989DA E102                       	smpsAlterNote       $02
000989DC 01                         	dc.b	$01
000989DD E1FB                       	smpsAlterNote       $FB
000989DF 01                         	dc.b	$01
000989E0 E1F7                       	smpsAlterNote       $F7
000989E2 01                         	dc.b	$01
000989E3 E1FB                       	smpsAlterNote       $FB
000989E5 01                         	dc.b	$01
000989E6 E102                       	smpsAlterNote       $02
000989E8 01                         	dc.b	$01
000989E9 E103                       	smpsAlterNote       $03
000989EB 01                         	dc.b	$01
000989EC E1FB                       	smpsAlterNote       $FB
000989EE ECF5                       	smpsPSGAlterVol     $F5
000989F0 8E06                       	dc.b	nCs1, $06
000989F2 EC04                       	smpsPSGAlterVol     $04
000989F4 E701                       	dc.b	smpsNoAttack, $01
000989F6 EC07                       	smpsPSGAlterVol     $07
000989F8 8003                       	dc.b	nRst, $03
000989FA ECF5                       	smpsPSGAlterVol     $F5
000989FC 8E06                       	dc.b	nCs1, $06
000989FE EC04                       	smpsPSGAlterVol     $04
00098A00 E701                       	dc.b	smpsNoAttack, $01
00098A02 EC07                       	smpsPSGAlterVol     $07
00098A04 8006                       	dc.b	nRst, $06
00098A06 E1FE                       	smpsAlterNote       $FE
00098A08 01                         	dc.b	$01
00098A09 E102                       	smpsAlterNote       $02
00098A0B 01                         	dc.b	$01
00098A0C E1FE                       	smpsAlterNote       $FE
00098A0E 01                         	dc.b	$01
00098A0F E1F9                       	smpsAlterNote       $F9
00098A11 01                         	dc.b	$01
00098A12 E1FC                       	smpsAlterNote       $FC
00098A14 ECF5                       	smpsPSGAlterVol     $F5
00098A16 8F06                       	dc.b	nD1, $06
00098A18 EC04                       	smpsPSGAlterVol     $04
00098A1A E701                       	dc.b	smpsNoAttack, $01
00098A1C EC07                       	smpsPSGAlterVol     $07
00098A1E 8003                       	dc.b	nRst, $03
00098A20 ECF5                       	smpsPSGAlterVol     $F5
00098A22 8F07                       	dc.b	nD1, $07
00098A24 EC0B                       	smpsPSGAlterVol     $0B
00098A26 8006                       	dc.b	nRst, $06
00098A28 E1FF                       	smpsAlterNote       $FF
00098A2A 01                         	dc.b	$01
00098A2B E102                       	smpsAlterNote       $02
00098A2D 0101                       	dc.b	$01, $01
00098A2F E1FB                       	smpsAlterNote       $FB
00098A31 01                         	dc.b	$01
00098A32 ECF5                       	smpsPSGAlterVol     $F5
00098A34 8E07                       	dc.b	nCs1, $07
00098A36 EC0B                       	smpsPSGAlterVol     $0B
00098A38 8004                       	dc.b	nRst, $04
00098A3A ECF5                       	smpsPSGAlterVol     $F5
00098A3C 8E06                       	dc.b	nCs1, $06
00098A3E EC04                       	smpsPSGAlterVol     $04
00098A40 E701                       	dc.b	smpsNoAttack, $01
00098A42 EC07                       	smpsPSGAlterVol     $07
00098A44 8006                       	dc.b	nRst, $06
00098A46 E101                       	smpsAlterNote       $01
00098A48 01                         	dc.b	$01
00098A49 E102                       	smpsAlterNote       $02
00098A4B 01                         	dc.b	$01
00098A4C E1FE                       	smpsAlterNote       $FE
00098A4E 01                         	dc.b	$01
00098A4F E1F8                       	smpsAlterNote       $F8
00098A51 01                         	dc.b	$01
00098A52 E1FB                       	smpsAlterNote       $FB
00098A54 ECF5                       	smpsPSGAlterVol     $F5
00098A56 8E06                       	dc.b	nCs1, $06
00098A58 EC04                       	smpsPSGAlterVol     $04
00098A5A E701                       	dc.b	smpsNoAttack, $01
00098A5C EC07                       	smpsPSGAlterVol     $07
00098A5E 8003                       	dc.b	nRst, $03
00098A60 ECF5                       	smpsPSGAlterVol     $F5
00098A62 8E06                       	dc.b	nCs1, $06
00098A64 EC04                       	smpsPSGAlterVol     $04
00098A66 E701                       	dc.b	smpsNoAttack, $01
00098A68 EC07                       	smpsPSGAlterVol     $07
00098A6A 8004                       	dc.b	nRst, $04
00098A6C E1FC                       	smpsAlterNote       $FC
00098A6E ECF5                       	smpsPSGAlterVol     $F5
00098A70 8F06                       	dc.b	nD1, $06
00098A72 EC0B                       	smpsPSGAlterVol     $0B
00098A74 8006                       	dc.b	nRst, $06
00098A76 E1FF                       	smpsAlterNote       $FF
00098A78 01                         	dc.b	$01
00098A79 E102                       	smpsAlterNote       $02
00098A7B 0101                       	dc.b	$01, $01
00098A7D E1FC                       	smpsAlterNote       $FC
00098A7F 01                         	dc.b	$01
00098A80 E1F8                       	smpsAlterNote       $F8
00098A82 01                         	dc.b	$01
00098A83 E1F9                       	smpsAlterNote       $F9
00098A85 01                         	dc.b	$01
00098A86 E1FF                       	smpsAlterNote       $FF
00098A88 01                         	dc.b	$01
00098A89 E103                       	smpsAlterNote       $03
00098A8B 01                         	dc.b	$01
00098A8C E1FC                       	smpsAlterNote       $FC
00098A8E ECF5                       	smpsPSGAlterVol     $F5
00098A90 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098A94 EC04                       	smpsPSGAlterVol     $04
00098A96 E701                       	dc.b	smpsNoAttack, $01
00098A98 EC07                       	smpsPSGAlterVol     $07
00098A9A 8009                       	dc.b	nRst, $09
00098A9C E1FF                       	smpsAlterNote       $FF
00098A9E 01                         	dc.b	$01
00098A9F E102                       	smpsAlterNote       $02
00098AA1 0101                       	dc.b	$01, $01
00098AA3 E1FC                       	smpsAlterNote       $FC
00098AA5 01                         	dc.b	$01
00098AA6 E1F8                       	smpsAlterNote       $F8
00098AA8 01                         	dc.b	$01
00098AA9 E1F9                       	smpsAlterNote       $F9
00098AAB 01                         	dc.b	$01
00098AAC E1FF                       	smpsAlterNote       $FF
00098AAE 01                         	dc.b	$01
00098AAF E103                       	smpsAlterNote       $03
00098AB1 01                         	dc.b	$01
00098AB2 E1FF                       	smpsAlterNote       $FF
00098AB4 01                         	dc.b	$01
00098AB5 E1FC                       	smpsAlterNote       $FC
00098AB7 01                         	dc.b	$01
00098AB8 E1F8                       	smpsAlterNote       $F8
00098ABA 01                         	dc.b	$01
00098ABB E1FC                       	smpsAlterNote       $FC
00098ABD 01                         	dc.b	$01
00098ABE E102                       	smpsAlterNote       $02
00098AC0 01                         	dc.b	$01
00098AC1 E103                       	smpsAlterNote       $03
00098AC3 01                         	dc.b	$01
00098AC4 E1FF                       	smpsAlterNote       $FF
00098AC6 01                         	dc.b	$01
00098AC7 E1FC                       	smpsAlterNote       $FC
00098AC9 ECF5                       	smpsPSGAlterVol     $F5
00098ACB 8F03                       	dc.b	nD1, $03
00098ACD E1FB                       	smpsAlterNote       $FB
00098ACF 8D06                       	dc.b	nC1, $06
00098AD1 EC04                       	smpsPSGAlterVol     $04
00098AD3 E701                       	dc.b	smpsNoAttack, $01
00098AD5 EC07                       	smpsPSGAlterVol     $07
00098AD7 8006                       	dc.b	nRst, $06
00098AD9 E1FE                       	smpsAlterNote       $FE
00098ADB 01                         	dc.b	$01
00098ADC E102                       	smpsAlterNote       $02
00098ADE 01                         	dc.b	$01
00098ADF E101                       	smpsAlterNote       $01
00098AE1 01                         	dc.b	$01
00098AE2 E1FB                       	smpsAlterNote       $FB
00098AE4 01                         	dc.b	$01
00098AE5 E1F7                       	smpsAlterNote       $F7
00098AE7 01                         	dc.b	$01
00098AE8 E1FB                       	smpsAlterNote       $FB
00098AEA 01                         	dc.b	$01
00098AEB E1FE                       	smpsAlterNote       $FE
00098AED 01                         	dc.b	$01
00098AEE E102                       	smpsAlterNote       $02
00098AF0 01                         	dc.b	$01
00098AF1 E1FB                       	smpsAlterNote       $FB
00098AF3 ECF5                       	smpsPSGAlterVol     $F5
00098AF5 8D03                       	dc.b	nC1, $03
00098AF7 E1FC                       	smpsAlterNote       $FC
00098AF9 8F0D                       	dc.b	nD1, $0D
00098AFB E1FF                       	smpsAlterNote       $FF
00098AFD E701                       	dc.b	smpsNoAttack, $01
00098AFF E103                       	smpsAlterNote       $03
00098B01 E701                       	dc.b	smpsNoAttack, $01
00098B03 E1FF                       	smpsAlterNote       $FF
00098B05 E701                       	dc.b	smpsNoAttack, $01
00098B07 E1FC                       	smpsAlterNote       $FC
00098B09 E701                       	dc.b	smpsNoAttack, $01
00098B0B E1F8                       	smpsAlterNote       $F8
00098B0D E701                       	dc.b	smpsNoAttack, $01
00098B0F E1FC                       	smpsAlterNote       $FC
00098B11 E701                       	dc.b	smpsNoAttack, $01
00098B13 E102                       	smpsAlterNote       $02
00098B15 E701                       	dc.b	smpsNoAttack, $01
00098B17 E103                       	smpsAlterNote       $03
00098B19 E701                       	dc.b	smpsNoAttack, $01
00098B1B E1FF                       	smpsAlterNote       $FF
00098B1D E701                       	dc.b	smpsNoAttack, $01
00098B1F E1F9                       	smpsAlterNote       $F9
00098B21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B25 E1FC                       	smpsAlterNote       $FC
00098B27 E701                       	dc.b	smpsNoAttack, $01
00098B29 E102                       	smpsAlterNote       $02
00098B2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B2F E1FF                       	smpsAlterNote       $FF
00098B31 E701                       	dc.b	smpsNoAttack, $01
00098B33 E1F9                       	smpsAlterNote       $F9
00098B35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B39 E1FF                       	smpsAlterNote       $FF
00098B3B EC04                       	smpsPSGAlterVol     $04
00098B3D E701                       	dc.b	smpsNoAttack, $01
00098B3F EC07                       	smpsPSGAlterVol     $07
00098B41 E103                       	smpsAlterNote       $03
00098B43 8001                       	dc.b	nRst, $01
00098B45 E102                       	smpsAlterNote       $02
00098B47 01                         	dc.b	$01
00098B48 E1FB                       	smpsAlterNote       $FB
00098B4A 01                         	dc.b	$01
00098B4B E1F7                       	smpsAlterNote       $F7
00098B4D 01                         	dc.b	$01
00098B4E E1FB                       	smpsAlterNote       $FB
00098B50 01                         	dc.b	$01
00098B51 E1FF                       	smpsAlterNote       $FF
00098B53 01                         	dc.b	$01
00098B54 E103                       	smpsAlterNote       $03
00098B56 01                         	dc.b	$01
00098B57 E1FB                       	smpsAlterNote       $FB
00098B59 ECF5                       	smpsPSGAlterVol     $F5
00098B5B 8E06                       	dc.b	nCs1, $06
00098B5D EC04                       	smpsPSGAlterVol     $04
00098B5F E701                       	dc.b	smpsNoAttack, $01
00098B61 EC07                       	smpsPSGAlterVol     $07
00098B63 8003                       	dc.b	nRst, $03
00098B65 ECF5                       	smpsPSGAlterVol     $F5
00098B67 8E06                       	dc.b	nCs1, $06
00098B69 EC04                       	smpsPSGAlterVol     $04
00098B6B E701                       	dc.b	smpsNoAttack, $01
00098B6D EC07                       	smpsPSGAlterVol     $07
00098B6F 8006                       	dc.b	nRst, $06
00098B71 E1FE                       	smpsAlterNote       $FE
00098B73 01                         	dc.b	$01
00098B74 E102                       	smpsAlterNote       $02
00098B76 01                         	dc.b	$01
00098B77 E1FE                       	smpsAlterNote       $FE
00098B79 01                         	dc.b	$01
00098B7A E1FC                       	smpsAlterNote       $FC
00098B7C 01                         	dc.b	$01
00098B7D ECF5                       	smpsPSGAlterVol     $F5
00098B7F 8F06                       	dc.b	nD1, $06
00098B81 EC04                       	smpsPSGAlterVol     $04
00098B83 E701                       	dc.b	smpsNoAttack, $01
00098B85 EC07                       	smpsPSGAlterVol     $07
00098B87 8003                       	dc.b	nRst, $03
00098B89 ECF5                       	smpsPSGAlterVol     $F5
00098B8B 8F07                       	dc.b	nD1, $07
00098B8D EC0B                       	smpsPSGAlterVol     $0B
00098B8F 8007                       	dc.b	nRst, $07
00098B91 E102                       	smpsAlterNote       $02
00098B93 0101                       	dc.b	$01, $01
00098B95 E1FB                       	smpsAlterNote       $FB
00098B97 01                         	dc.b	$01
00098B98 E1F8                       	smpsAlterNote       $F8
00098B9A 01                         	dc.b	$01
00098B9B E1FB                       	smpsAlterNote       $FB
00098B9D ECF5                       	smpsPSGAlterVol     $F5
00098B9F 8E06                       	dc.b	nCs1, $06
00098BA1 EC0B                       	smpsPSGAlterVol     $0B
00098BA3 8004                       	dc.b	nRst, $04
00098BA5 ECF5                       	smpsPSGAlterVol     $F5
00098BA7 8E06                       	dc.b	nCs1, $06
00098BA9 EC04                       	smpsPSGAlterVol     $04
00098BAB E701                       	dc.b	smpsNoAttack, $01
00098BAD EC07                       	smpsPSGAlterVol     $07
00098BAF 8006                       	dc.b	nRst, $06
00098BB1 E1FE                       	smpsAlterNote       $FE
00098BB3 01                         	dc.b	$01
00098BB4 E102                       	smpsAlterNote       $02
00098BB6 01                         	dc.b	$01
00098BB7 E1FE                       	smpsAlterNote       $FE
00098BB9 01                         	dc.b	$01
00098BBA E1F9                       	smpsAlterNote       $F9
00098BBC 01                         	dc.b	$01
00098BBD E1FC                       	smpsAlterNote       $FC
00098BBF ECF5                       	smpsPSGAlterVol     $F5
00098BC1 8F06                       	dc.b	nD1, $06
00098BC3 EC04                       	smpsPSGAlterVol     $04
00098BC5 E701                       	dc.b	smpsNoAttack, $01
00098BC7 EC07                       	smpsPSGAlterVol     $07
00098BC9 8003                       	dc.b	nRst, $03
00098BCB ECF5                       	smpsPSGAlterVol     $F5
00098BCD 8F06                       	dc.b	nD1, $06
00098BCF EC04                       	smpsPSGAlterVol     $04
00098BD1 E701                       	dc.b	smpsNoAttack, $01
00098BD3 EC07                       	smpsPSGAlterVol     $07
00098BD5 8006                       	dc.b	nRst, $06
00098BD7 E1FF                       	smpsAlterNote       $FF
00098BD9 01                         	dc.b	$01
00098BDA E103                       	smpsAlterNote       $03
00098BDC 01                         	dc.b	$01
00098BDD E102                       	smpsAlterNote       $02
00098BDF 01                         	dc.b	$01
00098BE0 E1FB                       	smpsAlterNote       $FB
00098BE2 01                         	dc.b	$01
00098BE3 ECF5                       	smpsPSGAlterVol     $F5
00098BE5 8E07                       	dc.b	nCs1, $07
00098BE7 EC0B                       	smpsPSGAlterVol     $0B
00098BE9 8004                       	dc.b	nRst, $04
00098BEB ECF5                       	smpsPSGAlterVol     $F5
00098BED 8E06                       	dc.b	nCs1, $06
00098BEF EC0B                       	smpsPSGAlterVol     $0B
00098BF1 8007                       	dc.b	nRst, $07
00098BF3 E101                       	smpsAlterNote       $01
00098BF5 0101                       	dc.b	$01, $01
00098BF7 E1FE                       	smpsAlterNote       $FE
00098BF9 01                         	dc.b	$01
00098BFA E1F9                       	smpsAlterNote       $F9
00098BFC 01                         	dc.b	$01
00098BFD E1FC                       	smpsAlterNote       $FC
00098BFF ECF5                       	smpsPSGAlterVol     $F5
00098C01 8F06                       	dc.b	nD1, $06
00098C03 EC04                       	smpsPSGAlterVol     $04
00098C05 E701                       	dc.b	smpsNoAttack, $01
00098C07 EC07                       	smpsPSGAlterVol     $07
00098C09 8003                       	dc.b	nRst, $03
00098C0B ECF5                       	smpsPSGAlterVol     $F5
00098C0D 8F06                       	dc.b	nD1, $06
00098C0F EC04                       	smpsPSGAlterVol     $04
00098C11 E701                       	dc.b	smpsNoAttack, $01
00098C13 EC07                       	smpsPSGAlterVol     $07
00098C15 8006                       	dc.b	nRst, $06
00098C17 E1FF                       	smpsAlterNote       $FF
00098C19 01                         	dc.b	$01
00098C1A E103                       	smpsAlterNote       $03
00098C1C 01                         	dc.b	$01
00098C1D E1FF                       	smpsAlterNote       $FF
00098C1F 01                         	dc.b	$01
00098C20 E1FB                       	smpsAlterNote       $FB
00098C22 01                         	dc.b	$01
00098C23 ECF5                       	smpsPSGAlterVol     $F5
00098C25 8E06                       	dc.b	nCs1, $06
00098C27 EC04                       	smpsPSGAlterVol     $04
00098C29 E701                       	dc.b	smpsNoAttack, $01
00098C2B EC07                       	smpsPSGAlterVol     $07
00098C2D 8003                       	dc.b	nRst, $03
00098C2F ECF5                       	smpsPSGAlterVol     $F5
00098C31 8E07                       	dc.b	nCs1, $07
00098C33 E1FF                       	smpsAlterNote       $FF
00098C35 9B06                       	dc.b	nD2, $06
00098C37 EC04                       	smpsPSGAlterVol     $04
00098C39 E701                       	dc.b	smpsNoAttack, $01
00098C3B ECFC                       	smpsPSGAlterVol     $FC
00098C3D 9B03                       	dc.b	nD2, $03
00098C3F EC04                       	smpsPSGAlterVol     $04
00098C41 E701                       	dc.b	smpsNoAttack, $01
00098C43 ECFC                       	smpsPSGAlterVol     $FC
00098C45 9B02                       	dc.b	nD2, $02
00098C47 EC04                       	smpsPSGAlterVol     $04
00098C49 E701                       	dc.b	smpsNoAttack, $01
00098C4B ECFC                       	smpsPSGAlterVol     $FC
00098C4D E1FE                       	smpsAlterNote       $FE
00098C4F 9A03                       	dc.b	nCs2, $03
00098C51 EC0B                       	smpsPSGAlterVol     $0B
00098C53 800A                       	dc.b	nRst, $0A
00098C55 E102                       	smpsAlterNote       $02
00098C57 01                         	dc.b	$01
00098C58 E10A                       	smpsAlterNote       $0A
00098C5A 01                         	dc.b	$01
00098C5B E102                       	smpsAlterNote       $02
00098C5D 01                         	dc.b	$01
00098C5E E1F7                       	smpsAlterNote       $F7
00098C60 01                         	dc.b	$01
00098C61 E10A                       	smpsAlterNote       $0A
00098C63 01                         	dc.b	$01
00098C64 E1FC                       	smpsAlterNote       $FC
00098C66 01                         	dc.b	$01
00098C67 E108                       	smpsAlterNote       $08
00098C69 0101                       	dc.b	$01, $01
00098C6B E102                       	smpsAlterNote       $02
00098C6D 01                         	dc.b	$01
00098C6E E1F7                       	smpsAlterNote       $F7
00098C70 0101                       	dc.b	$01, $01
00098C72 E1FC                       	smpsAlterNote       $FC
00098C74 ECF5                       	smpsPSGAlterVol     $F5
00098C76 8F06                       	dc.b	nD1, $06
00098C78 EC04                       	smpsPSGAlterVol     $04
00098C7A E701                       	dc.b	smpsNoAttack, $01
00098C7C EC07                       	smpsPSGAlterVol     $07
00098C7E 8003                       	dc.b	nRst, $03
00098C80 ECF5                       	smpsPSGAlterVol     $F5
00098C82 8F06                       	dc.b	nD1, $06
00098C84 EC04                       	smpsPSGAlterVol     $04
00098C86 E701                       	dc.b	smpsNoAttack, $01
00098C88 EC07                       	smpsPSGAlterVol     $07
00098C8A 8006                       	dc.b	nRst, $06
00098C8C E1FF                       	smpsAlterNote       $FF
00098C8E 01                         	dc.b	$01
00098C8F E102                       	smpsAlterNote       $02
00098C91 01                         	dc.b	$01
00098C92 E101                       	smpsAlterNote       $01
00098C94 01                         	dc.b	$01
00098C95 E1FC                       	smpsAlterNote       $FC
00098C97 01                         	dc.b	$01
00098C98 ECF5                       	smpsPSGAlterVol     $F5
00098C9A 9007                       	dc.b	nEb1, $07
00098C9C EC0B                       	smpsPSGAlterVol     $0B
00098C9E 8004                       	dc.b	nRst, $04
00098CA0 ECF5                       	smpsPSGAlterVol     $F5
00098CA2 9006                       	dc.b	nEb1, $06
00098CA4 EC0B                       	smpsPSGAlterVol     $0B
00098CA6 8007                       	dc.b	nRst, $07
00098CA8 E103                       	smpsAlterNote       $03
00098CAA 0101                       	dc.b	$01, $01
00098CAC E1FF                       	smpsAlterNote       $FF
00098CAE 01                         	dc.b	$01
00098CAF E1F9                       	smpsAlterNote       $F9
00098CB1 01                         	dc.b	$01
00098CB2 E1FC                       	smpsAlterNote       $FC
00098CB4 ECF5                       	smpsPSGAlterVol     $F5
00098CB6 8F06                       	dc.b	nD1, $06
00098CB8 EC04                       	smpsPSGAlterVol     $04
00098CBA E701                       	dc.b	smpsNoAttack, $01
00098CBC EC07                       	smpsPSGAlterVol     $07
00098CBE 8003                       	dc.b	nRst, $03
00098CC0 ECF5                       	smpsPSGAlterVol     $F5
00098CC2 8F06                       	dc.b	nD1, $06
00098CC4 EC04                       	smpsPSGAlterVol     $04
00098CC6 E701                       	dc.b	smpsNoAttack, $01
00098CC8 EC07                       	smpsPSGAlterVol     $07
00098CCA 8006                       	dc.b	nRst, $06
00098CCC E1FF                       	smpsAlterNote       $FF
00098CCE 01                         	dc.b	$01
00098CCF E103                       	smpsAlterNote       $03
00098CD1 01                         	dc.b	$01
00098CD2 E1FF                       	smpsAlterNote       $FF
00098CD4 01                         	dc.b	$01
00098CD5 E1F9                       	smpsAlterNote       $F9
00098CD7 01                         	dc.b	$01
00098CD8 E1FC                       	smpsAlterNote       $FC
00098CDA ECF5                       	smpsPSGAlterVol     $F5
00098CDC 8F06                       	dc.b	nD1, $06
00098CDE EC04                       	smpsPSGAlterVol     $04
00098CE0 E701                       	dc.b	smpsNoAttack, $01
00098CE2 EC07                       	smpsPSGAlterVol     $07
00098CE4 8003                       	dc.b	nRst, $03
00098CE6 ECF5                       	smpsPSGAlterVol     $F5
00098CE8 8F07                       	dc.b	nD1, $07
00098CEA EC0B                       	smpsPSGAlterVol     $0B
00098CEC 8006                       	dc.b	nRst, $06
00098CEE E1FF                       	smpsAlterNote       $FF
00098CF0 01                         	dc.b	$01
00098CF1 E102                       	smpsAlterNote       $02
00098CF3 0101                       	dc.b	$01, $01
00098CF5 E1FC                       	smpsAlterNote       $FC
00098CF7 01                         	dc.b	$01
00098CF8 ECF5                       	smpsPSGAlterVol     $F5
00098CFA 8F07                       	dc.b	nD1, $07
00098CFC EC0B                       	smpsPSGAlterVol     $0B
00098CFE 8004                       	dc.b	nRst, $04
00098D00 ECF5                       	smpsPSGAlterVol     $F5
00098D02 8F06                       	dc.b	nD1, $06
00098D04 EC04                       	smpsPSGAlterVol     $04
00098D06 E701                       	dc.b	smpsNoAttack, $01
00098D08 EC07                       	smpsPSGAlterVol     $07
00098D0A 8006                       	dc.b	nRst, $06
00098D0C E101                       	smpsAlterNote       $01
00098D0E 01                         	dc.b	$01
00098D0F E102                       	smpsAlterNote       $02
00098D11 01                         	dc.b	$01
00098D12 E1FF                       	smpsAlterNote       $FF
00098D14 01                         	dc.b	$01
00098D15 E1F9                       	smpsAlterNote       $F9
00098D17 01                         	dc.b	$01
00098D18 E1FC                       	smpsAlterNote       $FC
00098D1A ECF5                       	smpsPSGAlterVol     $F5
00098D1C 9006                       	dc.b	nEb1, $06
00098D1E EC04                       	smpsPSGAlterVol     $04
00098D20 E701                       	dc.b	smpsNoAttack, $01
00098D22 EC07                       	smpsPSGAlterVol     $07
00098D24 8003                       	dc.b	nRst, $03
00098D26 ECF5                       	smpsPSGAlterVol     $F5
00098D28 9006                       	dc.b	nEb1, $06
00098D2A EC04                       	smpsPSGAlterVol     $04
00098D2C E701                       	dc.b	smpsNoAttack, $01
00098D2E EC07                       	smpsPSGAlterVol     $07
00098D30 8006                       	dc.b	nRst, $06
00098D32 E100                       	smpsAlterNote       $00
00098D34 01                         	dc.b	$01
00098D35 E102                       	smpsAlterNote       $02
00098D37 01                         	dc.b	$01
00098D38 E100                       	smpsAlterNote       $00
00098D3A 01                         	dc.b	$01
00098D3B E1FF                       	smpsAlterNote       $FF
00098D3D 01                         	dc.b	$01
00098D3E ECF5                       	smpsPSGAlterVol     $F5
00098D40 9B06                       	dc.b	nD2, $06
00098D42 EC04                       	smpsPSGAlterVol     $04
00098D44 E701                       	dc.b	smpsNoAttack, $01
00098D46 EC07                       	smpsPSGAlterVol     $07
00098D48 8003                       	dc.b	nRst, $03
00098D4A ECF5                       	smpsPSGAlterVol     $F5
00098D4C 9B07                       	dc.b	nD2, $07
00098D4E EC0B                       	smpsPSGAlterVol     $0B
00098D50 8007                       	dc.b	nRst, $07
00098D52 E105                       	smpsAlterNote       $05
00098D54 0101                       	dc.b	$01, $01
00098D56 E1FF                       	smpsAlterNote       $FF
00098D58 01                         	dc.b	$01
00098D59 E1FC                       	smpsAlterNote       $FC
00098D5B 01                         	dc.b	$01
00098D5C E1FF                       	smpsAlterNote       $FF
00098D5E ECF5                       	smpsPSGAlterVol     $F5
00098D60 9B06                       	dc.b	nD2, $06
00098D62 EC0B                       	smpsPSGAlterVol     $0B
00098D64 8004                       	dc.b	nRst, $04
00098D66 ECF5                       	smpsPSGAlterVol     $F5
00098D68 9B06                       	dc.b	nD2, $06
00098D6A EC04                       	smpsPSGAlterVol     $04
00098D6C E701                       	dc.b	smpsNoAttack, $01
00098D6E EC07                       	smpsPSGAlterVol     $07
00098D70 8006                       	dc.b	nRst, $06
00098D72 E102                       	smpsAlterNote       $02
00098D74 01                         	dc.b	$01
00098D75 E106                       	smpsAlterNote       $06
00098D77 01                         	dc.b	$01
00098D78 E102                       	smpsAlterNote       $02
00098D7A 01                         	dc.b	$01
00098D7B E1FC                       	smpsAlterNote       $FC
00098D7D 01                         	dc.b	$01
00098D7E E1FF                       	smpsAlterNote       $FF
00098D80 ECF5                       	smpsPSGAlterVol     $F5
00098D82 9B06                       	dc.b	nD2, $06
00098D84 EC04                       	smpsPSGAlterVol     $04
00098D86 E701                       	dc.b	smpsNoAttack, $01
00098D88 EC07                       	smpsPSGAlterVol     $07
00098D8A 8003                       	dc.b	nRst, $03
00098D8C ECF5                       	smpsPSGAlterVol     $F5
00098D8E 9B07                       	dc.b	nD2, $07
00098D90 EC0B                       	smpsPSGAlterVol     $0B
00098D92 8006                       	dc.b	nRst, $06
00098D94 E102                       	smpsAlterNote       $02
00098D96 01                         	dc.b	$01
00098D97 E105                       	smpsAlterNote       $05
00098D99 0101                       	dc.b	$01, $01
00098D9B E1FF                       	smpsAlterNote       $FF
00098D9D 01                         	dc.b	$01
00098D9E ECF5                       	smpsPSGAlterVol     $F5
00098DA0 9B07                       	dc.b	nD2, $07
00098DA2 EC0B                       	smpsPSGAlterVol     $0B
00098DA4 8004                       	dc.b	nRst, $04
00098DA6 ECF5                       	smpsPSGAlterVol     $F5
00098DA8 9B06                       	dc.b	nD2, $06
00098DAA EC04                       	smpsPSGAlterVol     $04
00098DAC E701                       	dc.b	smpsNoAttack, $01
00098DAE EC07                       	smpsPSGAlterVol     $07
00098DB0 8006                       	dc.b	nRst, $06
00098DB2 E105                       	smpsAlterNote       $05
00098DB4 0101                       	dc.b	$01, $01
00098DB6 E102                       	smpsAlterNote       $02
00098DB8 01                         	dc.b	$01
00098DB9 E1FC                       	smpsAlterNote       $FC
00098DBB 01                         	dc.b	$01
00098DBC E1FF                       	smpsAlterNote       $FF
00098DBE ECF5                       	smpsPSGAlterVol     $F5
00098DC0 9B06                       	dc.b	nD2, $06
00098DC2 EC04                       	smpsPSGAlterVol     $04
00098DC4 E701                       	dc.b	smpsNoAttack, $01
00098DC6 EC07                       	smpsPSGAlterVol     $07
00098DC8 8003                       	dc.b	nRst, $03
00098DCA ECF5                       	smpsPSGAlterVol     $F5
00098DCC 9B06                       	dc.b	nD2, $06
00098DCE EC04                       	smpsPSGAlterVol     $04
00098DD0 E701                       	dc.b	smpsNoAttack, $01
00098DD2 EC07                       	smpsPSGAlterVol     $07
00098DD4 8006                       	dc.b	nRst, $06
00098DD6 E102                       	smpsAlterNote       $02
00098DD8 01                         	dc.b	$01
00098DD9 E106                       	smpsAlterNote       $06
00098DDB 01                         	dc.b	$01
00098DDC E102                       	smpsAlterNote       $02
00098DDE 01                         	dc.b	$01
00098DDF E1FF                       	smpsAlterNote       $FF
00098DE1 01                         	dc.b	$01
00098DE2 ECF5                       	smpsPSGAlterVol     $F5
00098DE4 9B06                       	dc.b	nD2, $06
00098DE6 EC04                       	smpsPSGAlterVol     $04
00098DE8 E701                       	dc.b	smpsNoAttack, $01
00098DEA EC07                       	smpsPSGAlterVol     $07
00098DEC 8003                       	dc.b	nRst, $03
00098DEE ECF5                       	smpsPSGAlterVol     $F5
00098DF0 9B07                       	dc.b	nD2, $07
00098DF2 EC0B                       	smpsPSGAlterVol     $0B
00098DF4 8007                       	dc.b	nRst, $07
00098DF6 E107                       	smpsAlterNote       $07
00098DF8 0101                       	dc.b	$01, $01
00098DFA E1FE                       	smpsAlterNote       $FE
00098DFC 01                         	dc.b	$01
00098DFD E1FA                       	smpsAlterNote       $FA
00098DFF 0101                       	dc.b	$01, $01
00098E01 E103                       	smpsAlterNote       $03
00098E03 01                         	dc.b	$01
00098E04 E109                       	smpsAlterNote       $09
00098E06 01                         	dc.b	$01
00098E07 E107                       	smpsAlterNote       $07
00098E09 01                         	dc.b	$01
00098E0A E1FE                       	smpsAlterNote       $FE
00098E0C 01                         	dc.b	$01
00098E0D E108                       	smpsAlterNote       $08
00098E0F 01                         	dc.b	$01
00098E10 E1FD                       	smpsAlterNote       $FD
00098E12 ECF5                       	smpsPSGAlterVol     $F5
00098E14 940E                       	dc.b	nG1, $0E
00098E16 E103                       	smpsAlterNote       $03
00098E18 EC0B                       	smpsPSGAlterVol     $0B
00098E1A 8001 01                    	dc.b	nRst, $01, $01
00098E1D E1FD                       	smpsAlterNote       $FD
00098E1F 01                         	dc.b	$01
00098E20 E1FB                       	smpsAlterNote       $FB
00098E22 0101                       	dc.b	$01, $01
00098E24 E100                       	smpsAlterNote       $00
00098E26 01                         	dc.b	$01
00098E27 E103                       	smpsAlterNote       $03
00098E29 01                         	dc.b	$01
00098E2A E100                       	smpsAlterNote       $00
00098E2C 01                         	dc.b	$01
00098E2D E1FD                       	smpsAlterNote       $FD
00098E2F 01                         	dc.b	$01
00098E30 E1FA                       	smpsAlterNote       $FA
00098E32 01                         	dc.b	$01
00098E33 E1FD                       	smpsAlterNote       $FD
00098E35 01                         	dc.b	$01
00098E36 E103                       	smpsAlterNote       $03
00098E38 0101                       	dc.b	$01, $01
00098E3A E100                       	smpsAlterNote       $00
00098E3C 01                         	dc.b	$01
00098E3D E1FE                       	smpsAlterNote       $FE
00098E3F ECF5                       	smpsPSGAlterVol     $F5
00098E41 960D                       	dc.b	nA1, $0D
00098E43 E104                       	smpsAlterNote       $04
00098E45 EC0B                       	smpsPSGAlterVol     $0B
00098E47 8001 01                    	dc.b	nRst, $01, $01
00098E4A E101                       	smpsAlterNote       $01
00098E4C 01                         	dc.b	$01
00098E4D E1FB                       	smpsAlterNote       $FB
00098E4F 0101                       	dc.b	$01, $01
00098E51 E1FE                       	smpsAlterNote       $FE
00098E53 01                         	dc.b	$01
00098E54 E104                       	smpsAlterNote       $04
00098E56 0101                       	dc.b	$01, $01
00098E58 E1FE                       	smpsAlterNote       $FE
00098E5A 01                         	dc.b	$01
00098E5B E1FB                       	smpsAlterNote       $FB
00098E5D 0101                       	dc.b	$01, $01
00098E5F E101                       	smpsAlterNote       $01
00098E61 01                         	dc.b	$01
00098E62 E104                       	smpsAlterNote       $04
00098E64 0101                       	dc.b	$01, $01
00098E66 E1FE                       	smpsAlterNote       $FE
00098E68 ECF5                       	smpsPSGAlterVol     $F5
00098E6A 970D                       	dc.b	nBb1, $0D
00098E6C E101                       	smpsAlterNote       $01
00098E6E EC04                       	smpsPSGAlterVol     $04
00098E70 E701                       	dc.b	smpsNoAttack, $01
00098E72 EC07                       	smpsPSGAlterVol     $07
00098E74 E104                       	smpsAlterNote       $04
00098E76 8001                       	dc.b	nRst, $01
00098E78 E103                       	smpsAlterNote       $03
00098E7A 01                         	dc.b	$01
00098E7B E1FE                       	smpsAlterNote       $FE
00098E7D 01                         	dc.b	$01
00098E7E E1FA                       	smpsAlterNote       $FA
00098E80 01                         	dc.b	$01
00098E81 E1FE                       	smpsAlterNote       $FE
00098E83 01                         	dc.b	$01
00098E84 E101                       	smpsAlterNote       $01
00098E86 01                         	dc.b	$01
00098E87 E104                       	smpsAlterNote       $04
00098E89 01                         	dc.b	$01
00098E8A E101                       	smpsAlterNote       $01
00098E8C 01                         	dc.b	$01
00098E8D E1FB                       	smpsAlterNote       $FB
00098E8F 01                         	dc.b	$01
00098E90 E1FA                       	smpsAlterNote       $FA
00098E92 01                         	dc.b	$01
00098E93 E1FE                       	smpsAlterNote       $FE
00098E95 01                         	dc.b	$01
00098E96 E103                       	smpsAlterNote       $03
00098E98 0101                       	dc.b	$01, $01
00098E9A E101                       	smpsAlterNote       $01
00098E9C 01                         	dc.b	$01
00098E9D E1FE                       	smpsAlterNote       $FE
00098E9F ECF5                       	smpsPSGAlterVol     $F5
00098EA1 990D                       	dc.b	nC2, $0D
00098EA3 E104                       	smpsAlterNote       $04
00098EA5 EC0B                       	smpsPSGAlterVol     $0B
00098EA7 8001 01                    	dc.b	nRst, $01, $01
00098EAA E102                       	smpsAlterNote       $02
00098EAC 01                         	dc.b	$01
00098EAD E1FC                       	smpsAlterNote       $FC
00098EAF 0101                       	dc.b	$01, $01
00098EB1 E102                       	smpsAlterNote       $02
00098EB3 01                         	dc.b	$01
00098EB4 E104                       	smpsAlterNote       $04
00098EB6 01                         	dc.b	$01
00098EB7 E1FF                       	smpsAlterNote       $FF
00098EB9 ECF5                       	smpsPSGAlterVol     $F5
00098EBB 9B06                       	dc.b	nD2, $06
00098EBD EC04                       	smpsPSGAlterVol     $04
00098EBF E701                       	dc.b	smpsNoAttack, $01
00098EC1 EC07                       	smpsPSGAlterVol     $07
00098EC3 8003                       	dc.b	nRst, $03
00098EC5 ECF5                       	smpsPSGAlterVol     $F5
00098EC7 9B07                       	dc.b	nD2, $07
00098EC9 EC0B                       	smpsPSGAlterVol     $0B
00098ECB 8006                       	dc.b	nRst, $06
00098ECD E101                       	smpsAlterNote       $01
00098ECF 01                         	dc.b	$01
00098ED0 E104                       	smpsAlterNote       $04
00098ED2 0101                       	dc.b	$01, $01
00098ED4 E1FE                       	smpsAlterNote       $FE
00098ED6 01                         	dc.b	$01
00098ED7 E1FC                       	smpsAlterNote       $FC
00098ED9 01                         	dc.b	$01
00098EDA E1FE                       	smpsAlterNote       $FE
00098EDC ECF5                       	smpsPSGAlterVol     $F5
00098EDE 9C06                       	dc.b	nEb2, $06
00098EE0 EC0B                       	smpsPSGAlterVol     $0B
00098EE2 8004                       	dc.b	nRst, $04
00098EE4 ECF5                       	smpsPSGAlterVol     $F5
00098EE6 9C06                       	dc.b	nEb2, $06
00098EE8 EC04                       	smpsPSGAlterVol     $04
00098EEA E701                       	dc.b	smpsNoAttack, $01
00098EEC EC07                       	smpsPSGAlterVol     $07
00098EEE 8006                       	dc.b	nRst, $06
00098EF0 E105                       	smpsAlterNote       $05
00098EF2 01                         	dc.b	$01
00098EF3 E106                       	smpsAlterNote       $06
00098EF5 01                         	dc.b	$01
00098EF6 E102                       	smpsAlterNote       $02
00098EF8 01                         	dc.b	$01
00098EF9 E1FB                       	smpsAlterNote       $FB
00098EFB 01                         	dc.b	$01
00098EFC E1FF                       	smpsAlterNote       $FF
00098EFE ECF5                       	smpsPSGAlterVol     $F5
00098F00 9B06                       	dc.b	nD2, $06
00098F02 EC04                       	smpsPSGAlterVol     $04
00098F04 E701                       	dc.b	smpsNoAttack, $01
00098F06 EC07                       	smpsPSGAlterVol     $07
00098F08 8003                       	dc.b	nRst, $03
00098F0A ECF5                       	smpsPSGAlterVol     $F5
00098F0C 9B06                       	dc.b	nD2, $06
00098F0E EC04                       	smpsPSGAlterVol     $04
00098F10 E701                       	dc.b	smpsNoAttack, $01
00098F12 EC07                       	smpsPSGAlterVol     $07
00098F14 8006                       	dc.b	nRst, $06
00098F16 E101                       	smpsAlterNote       $01
00098F18 01                         	dc.b	$01
00098F19 E105                       	smpsAlterNote       $05
00098F1B 01                         	dc.b	$01
00098F1C E104                       	smpsAlterNote       $04
00098F1E 01                         	dc.b	$01
00098F1F E1FE                       	smpsAlterNote       $FE
00098F21 01                         	dc.b	$01
00098F22 ECF5                       	smpsPSGAlterVol     $F5
00098F24 9C07                       	dc.b	nEb2, $07
00098F26 EC0B                       	smpsPSGAlterVol     $0B
00098F28 8004                       	dc.b	nRst, $04
00098F2A ECF5                       	smpsPSGAlterVol     $F5
00098F2C 9C06                       	dc.b	nEb2, $06
00098F2E EC0B                       	smpsPSGAlterVol     $0B
00098F30 8007                       	dc.b	nRst, $07
00098F32 E105                       	smpsAlterNote       $05
00098F34 0101                       	dc.b	$01, $01
00098F36 E102                       	smpsAlterNote       $02
00098F38 01                         	dc.b	$01
00098F39 E1FB                       	smpsAlterNote       $FB
00098F3B 01                         	dc.b	$01
00098F3C E1FF                       	smpsAlterNote       $FF
00098F3E ECF5                       	smpsPSGAlterVol     $F5
00098F40 9B06                       	dc.b	nD2, $06
00098F42 EC04                       	smpsPSGAlterVol     $04
00098F44 E701                       	dc.b	smpsNoAttack, $01
00098F46 EC07                       	smpsPSGAlterVol     $07
00098F48 8003                       	dc.b	nRst, $03
00098F4A ECF5                       	smpsPSGAlterVol     $F5
00098F4C 9B06                       	dc.b	nD2, $06
00098F4E EC04                       	smpsPSGAlterVol     $04
00098F50 E701                       	dc.b	smpsNoAttack, $01
00098F52 EC07                       	smpsPSGAlterVol     $07
00098F54 8006                       	dc.b	nRst, $06
00098F56 E101                       	smpsAlterNote       $01
00098F58 01                         	dc.b	$01
00098F59 E105                       	smpsAlterNote       $05
00098F5B 01                         	dc.b	$01
00098F5C E101                       	smpsAlterNote       $01
00098F5E 01                         	dc.b	$01
00098F5F E1FC                       	smpsAlterNote       $FC
00098F61 01                         	dc.b	$01
00098F62 E1FE                       	smpsAlterNote       $FE
00098F64 ECF5                       	smpsPSGAlterVol     $F5
00098F66 9C06                       	dc.b	nEb2, $06
00098F68 EC04                       	smpsPSGAlterVol     $04
00098F6A E701                       	dc.b	smpsNoAttack, $01
00098F6C EC07                       	smpsPSGAlterVol     $07
00098F6E 8003                       	dc.b	nRst, $03
00098F70 ECF5                       	smpsPSGAlterVol     $F5
00098F72 9C07                       	dc.b	nEb2, $07
00098F74 EC0B                       	smpsPSGAlterVol     $0B
00098F76 8006                       	dc.b	nRst, $06
00098F78 E102                       	smpsAlterNote       $02
00098F7A 01                         	dc.b	$01
00098F7B E105                       	smpsAlterNote       $05
00098F7D 0101                       	dc.b	$01, $01
00098F7F E1FF                       	smpsAlterNote       $FF
00098F81 01                         	dc.b	$01
00098F82 ECF5                       	smpsPSGAlterVol     $F5
00098F84 9B07                       	dc.b	nD2, $07
00098F86 EC0B                       	smpsPSGAlterVol     $0B
00098F88 8004                       	dc.b	nRst, $04
00098F8A ECF5                       	smpsPSGAlterVol     $F5
00098F8C 9B06                       	dc.b	nD2, $06
00098F8E EC04                       	smpsPSGAlterVol     $04
00098F90 E701                       	dc.b	smpsNoAttack, $01
00098F92 EC07                       	smpsPSGAlterVol     $07
00098F94 8002                       	dc.b	nRst, $02
00098F96 E1FC                       	smpsAlterNote       $FC
00098F98 ECF5                       	smpsPSGAlterVol     $F5
00098F9A 9006                       	dc.b	nEb1, $06
00098F9C EC04                       	smpsPSGAlterVol     $04
00098F9E E701                       	dc.b	smpsNoAttack, $01
00098FA0 ECFC                       	smpsPSGAlterVol     $FC
00098FA2 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098FA6 EC04                       	smpsPSGAlterVol     $04
00098FA8 E701                       	dc.b	smpsNoAttack, $01
00098FAA E1FD                       	smpsAlterNote       $FD
00098FAC ECFC                       	smpsPSGAlterVol     $FC
00098FAE 9402                       	dc.b	nG1, $02
00098FB0 EC04                       	smpsPSGAlterVol     $04
00098FB2 E701                       	dc.b	smpsNoAttack, $01
00098FB4 E1FE                       	smpsAlterNote       $FE
00098FB6 ECFC                       	smpsPSGAlterVol     $FC
00098FB8 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098FBC EC04                       	smpsPSGAlterVol     $04
00098FBE E701                       	dc.b	smpsNoAttack, $01
00098FC0 EC07                       	smpsPSGAlterVol     $07
00098FC2 8008                       	dc.b	nRst, $08
00098FC4 F6F4 F3                    	smpsJump            music84_Jump06
00098FC7                            
00098FC7                            ; PSG3 Data
00098FC7                            music84_PSG3:
00098FC7 F500                       	smpsPSGvoice        $00
00098FC9 E1FF                       	smpsAlterNote       $FF
00098FCB EC0F                       	smpsPSGAlterVol     $0F
00098FCD 803A                       	dc.b	nRst, $3A
00098FCF                            
00098FCF                            music84_Jump05:
00098FCF 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098FDB 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098FE5 F6FF E8                    	smpsJump            music84_Jump05
00098FE8                            
00098FE8                            ; DAC Data
00098FE8                            music84_DAC:
00098FE8 E0C0                       	smpsPan             panCenter, $00
00098FEA 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098FF6 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00099002 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0009900E 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009901A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00099026 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00099032 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009903E 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009904A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099056 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00099062 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009906E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009907A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00099086 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00099092 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0009909E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000990AA 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000990B6 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000990C2 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000990CE 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000990DA 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000990E6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000990F2 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000990FE 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009910A 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00099116 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00099122 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009912E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009913A 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00099146 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099152 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009915E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009916A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00099176 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00099182 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0009918E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009919A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000991A6 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000991B2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000991BE 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000991CA 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000991D6 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000991E2 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000991EE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000991FA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099206 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099212 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009921E 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009922A 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00099236 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00099242 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0009924E 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009925A 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00099266 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00099272 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009927E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009928A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00099296 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000992A2 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000992AE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000992BA 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000992C6 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000992D2 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000992DE 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000992EA 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000992F6 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00099302 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009930E 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009931A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00099326 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099332 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009933E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009934A 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00099356 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099362 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009936E E0C0                       	smpsPan             panCenter, $00
00099370 F2                         	smpsStop
00099371                            
00099371                            music84_Voices:
00099371                            ;	Voice $00
00099371                            ;	$3D
00099371                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099371                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099371                            	smpsVcAlgorithm     $05
00099371                            	smpsVcFeedback      $07
00099371                            	smpsVcUnusedBits    $00
00099371                            	smpsVcDetune        $05, $04, $03, $04
00099371                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099371                            	smpsVcRateScale     $00, $00, $00, $00
00099371                            	smpsVcAttackRate    $11, $11, $11, $11
00099371                            	smpsVcAmpMod        $00, $00, $00, $00
00099371                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099371                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099371                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099371                            	smpsVcReleaseRate   $08, $08, $08, $07
00099371 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009938A                            
0009938A                            ;	Voice $01
0009938A                            ;	$04
0009938A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009938A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009938A                            	smpsVcAlgorithm     $04
0009938A                            	smpsVcFeedback      $00
0009938A                            	smpsVcUnusedBits    $00
0009938A                            	smpsVcDetune        $04, $03, $04, $05
0009938A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009938A                            	smpsVcRateScale     $00, $01, $00, $01
0009938A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009938A                            	smpsVcAmpMod        $00, $00, $00, $00
0009938A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009938A                            	smpsVcDecayRate2    $05, $00, $05, $00
0009938A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009938A                            	smpsVcReleaseRate   $06, $06, $06, $06
0009938A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000993A3                            
000993A3                            ;	Voice $02
000993A3                            ;	$30
000993A3                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000993A3                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000993A3                            	smpsVcAlgorithm     $00
000993A3                            	smpsVcFeedback      $06
000993A3                            	smpsVcUnusedBits    $00
000993A3                            	smpsVcDetune        $04, $02, $00, $06
000993A3                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000993A3                            	smpsVcRateScale     $00, $00, $00, $00
000993A3                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000993A3                            	smpsVcAmpMod        $00, $00, $00, $00
000993A3                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000993A3                            	smpsVcDecayRate2    $01, $01, $01, $01
000993A3                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000993A3                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000993A3 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000993BC                            
000993BC                            ;	Voice $03
000993BC                            ;	$3A
000993BC                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000993BC                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000993BC                            	smpsVcAlgorithm     $02
000993BC                            	smpsVcFeedback      $07
000993BC                            	smpsVcUnusedBits    $00
000993BC                            	smpsVcDetune        $04, $06, $02, $00
000993BC                            	smpsVcCoarseFreq    $01, $01, $01, $01
000993BC                            	smpsVcRateScale     $00, $00, $00, $00
000993BC                            	smpsVcAttackRate    $18, $19, $14, $14
000993BC                            	smpsVcAmpMod        $00, $00, $00, $00
000993BC                            	smpsVcDecayRate1    $09, $0D, $09, $09
000993BC                            	smpsVcDecayRate2    $00, $00, $00, $00
000993BC                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000993BC                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000993BC 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000993D5                            
000993D5                            ;	Voice $04
000993D5                            ;	$3C
000993D5                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000993D5                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000993D5                            	smpsVcAlgorithm     $04
000993D5                            	smpsVcFeedback      $07
000993D5                            	smpsVcUnusedBits    $00
000993D5                            	smpsVcDetune        $07, $00, $00, $03
000993D5                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000993D5                            	smpsVcRateScale     $00, $00, $00, $00
000993D5                            	smpsVcAttackRate    $10, $1F, $10, $1F
000993D5                            	smpsVcAmpMod        $00, $00, $00, $00
000993D5                            	smpsVcDecayRate1    $00, $00, $00, $00
000993D5                            	smpsVcDecayRate2    $00, $00, $00, $00
000993D5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000993D5                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000993D5 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000993EE                            
000993EE                            ;	Voice $05
000993EE                            ;	$38
000993EE                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000993EE                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000993EE                            	smpsVcAlgorithm     $00
000993EE                            	smpsVcFeedback      $07
000993EE                            	smpsVcUnusedBits    $00
000993EE                            	smpsVcDetune        $04, $06, $02, $00
000993EE                            	smpsVcCoarseFreq    $01, $01, $01, $00
000993EE                            	smpsVcRateScale     $00, $00, $00, $00
000993EE                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000993EE                            	smpsVcAmpMod        $00, $00, $00, $00
000993EE                            	smpsVcDecayRate1    $00, $03, $00, $17
000993EE                            	smpsVcDecayRate2    $00, $08, $08, $0B
000993EE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000993EE                            	smpsVcReleaseRate   $08, $05, $05, $05
000993EE 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00099407                            
00099407                            
00099408 00                         		even
00099408                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D618                            		even
0009D618                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1170 00                         		even
000A1170                            Music87:	include	sound\music87.asm; Invincibility
000A1170                            triple_Header:
000A1170 =00000001                  smpsHeaderStartSong = 1
000A1170 0000                       	smpsHeaderVoice     triple_Voices
000A1172 0501                       	smpsHeaderChan      $05, $01
000A1174 0200                       	smpsHeaderTempo     $02, $00
000A1176                            
000A117A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A117E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A1182 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A1186 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A118A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A1190                            
000A1190                            ; DAC Data
000A1190                            triple_DAC:
000A1190 E0C0                       	smpsPan             panCenter, $00
000A1192 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A1198                            
000A1198                            triple_Loop01:
000A1198 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A119B                            
000A119B                            triple_Loop00:
000A119B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A11A7 06                         	dc.b	$06
000A11A8 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A11AD 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A11B9 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A11C0 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A11C5 0303 1B                    	dc.b	$03, $03, $1B
000A11C8 E0C0                       	smpsPan             panCenter, $00
000A11CA F6FF C4                    	smpsJump triple_DAC
000A11CD                            
000A11CD                            ; FM1 Data
000A11CD                            triple_FM1:
000A11CD E0C0                       	smpsPan             panCenter, $00
000A11D1 8018                       	dc.b	nRst, $18
000A11D3                            
000A11D3                            triple_Loop0B:
000A11D3 AC06 B8                    	dc.b	nG3, $06, nG4
000A11D6 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A11DB                            
000A11DB                            triple_Loop0C:
000A11DB A7B3                       	dc.b	nD3, nD4
000A11DD F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A11E2                            
000A11E2                            triple_Loop0D:
000A11E2 A9B5                       	dc.b	nE3, nE4
000A11E4 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A11E9 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A11F1 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A11F6 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A1202 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A120E AD                         	dc.b	nAb3
000A120F F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A1214 8018                       	dc.b	nRst, $18
000A1216 E0C0                       	smpsPan             panCenter, $00
000A121A F6FF B1                    	smpsJump triple_FM1
000A121D                            
000A121D                            ; FM2 Data
000A121D                            triple_FM2:
000A121D E0C0                       	smpsPan             panCenter, $00
000A1221 8018                       	dc.b	nRst, $18
000A1223                            
000A1223                            triple_Loop07:
000A1223 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A122F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A123B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1240 8003                       	dc.b	nRst, $03
000A1242                            
000A1242                            triple_Loop08:
000A1242 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1248 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A124D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1253                            
000A1253                            triple_Loop09:
000A1253 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A125F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A126B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1270 8003                       	dc.b	nRst, $03
000A1272                            
000A1272                            triple_Loop0A:
000A1272 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1278 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A127D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1283 E0C0                       	smpsPan             panCenter, $00
000A1287 F6FF 94                    	smpsJump triple_FM2
000A128A                            
000A128A                            ; FM3 Data
000A128A                            triple_FM3:
000A128A E0C0                       	smpsPan             panCenter, $00
000A128E 8018                       	dc.b	nRst, $18
000A1290                            
000A1290                            triple_Loop06:
000A1290 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A1297 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A129C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A12A8 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A12B4 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A12B7 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A12BC 8018                       	dc.b	nRst, $18
000A12BE E0C0                       	smpsPan             panCenter, $00
000A12C2 F6FF C6                    	smpsJump triple_FM3
000A12C5                            
000A12C5                            ; FM4 Data
000A12C5                            triple_FM4:
000A12C5 E103                       	smpsAlterNote       $03
000A12C9 E0C0                       	smpsPan             panCenter, $00
000A12CB 8018                       	dc.b	nRst, $18
000A12CD                            
000A12CD                            triple_Loop02:
000A12CD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A12D9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A12E5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A12EA 8003                       	dc.b	nRst, $03
000A12EC                            
000A12EC                            triple_Loop03:
000A12EC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A12F2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A12F7 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A12FD                            
000A12FD                            triple_Loop04:
000A12FD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1309 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1315 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A131A 8003                       	dc.b	nRst, $03
000A131C                            
000A131C                            triple_Loop05:
000A131C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1322 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A1327 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A132D E0C0                       	smpsPan             panCenter, $00
000A132F F6FF 94                    	smpsJump triple_FM4
000A1332                            
000A1332                            ; PSG1 Data
000A1332                            triple_PSG1:
000A1332 8018                       	dc.b	nRst, $18
000A1334                            
000A1334                            triple_Loop0E:
000A1334 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1340 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A134C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1358 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A135C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1361 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A136D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1379 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1385 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1389                            
000A1389                            triple_Loop0F:
000A1389 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A138F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A1394 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A139A                            
000A139A                            triple_Loop10:
000A139A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A13A6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A13B2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A13BE 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A13C2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A13C7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A13D3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A13DF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A13EB 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A13EF                            
000A13EF                            triple_Loop11:
000A13EF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A13F5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A13FA 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1400 F500                       	smpsPSGvoice        $00
000A1402 F6FF 2E                    	smpsJump triple_PSG1
000A1405                            
000A1405                            triple_Voices:
000A1405                            ;	Voice $00
000A1405                            ;	$3A
000A1405                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A1405                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A1405                            	smpsVcAlgorithm     $02
000A1405                            	smpsVcFeedback      $07
000A1405                            	smpsVcUnusedBits    $00
000A1405                            	smpsVcDetune        $00, $00, $00, $00
000A1405                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A1405                            	smpsVcRateScale     $01, $02, $02, $02
000A1405                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A1405                            	smpsVcAmpMod        $00, $00, $00, $00
000A1405                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A1405                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1405                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A1405                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1405 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A141E                            
000A141E                            ;	Voice $01
000A141E                            ;	$20
000A141E                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A141E                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A141E                            	smpsVcAlgorithm     $00
000A141E                            	smpsVcFeedback      $04
000A141E                            	smpsVcUnusedBits    $00
000A141E                            	smpsVcDetune        $00, $00, $03, $07
000A141E                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A141E                            	smpsVcRateScale     $03, $03, $03, $02
000A141E                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A141E                            	smpsVcAmpMod        $00, $00, $00, $00
000A141E                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A141E                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A141E                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A141E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A141E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A141E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1438 00                         		even
000A1438                            Music88:	incbin	sound\music88.bin; Extra Life
000A1526                            		even
000A1526                            Music89:	incbin	sound\music89.bin; Special Stage
000A53EE 00                         		even
000A53EE                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A55B8                            		even
000A55B8                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5852                            		even
000A5852                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5AF0                            		even
000A5AF0                            Music8D:	incbin	sound\music8D.bin; Final Zone
000ABD68 00                         		even
000ABD68                            Music8E:	include	sound\merry.asm ; Act Clear
000ABD68 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000ABD68 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000ABD68 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000ABD68 =0000008A                  dMerryClap = dLowTimpani
000ABD68                            
000ABD68                            MerrysLittleLamb_Header:
000ABD68 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000ABD6A 0603                       	smpsHeaderChan      $06, $03
000ABD6C 0100                       	smpsHeaderTempo     $01, $00
000ABD6E                            
000ABD72 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000ABD76 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000ABD7A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000ABD7E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000ABD82 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000ABD86 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000ABD8C 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000ABD92 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000ABD98                            
000ABD98                            MerrysLittleLamb_FM1:
000ABD98 E0C0                       	smpsPan             panCenter, $00
000ABD9A 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000ABDA1 E60F                       	smpsAlterVol        $0F
000ABDA3 A704                       	dc.b	nD3, $04
000ABDA5 E606                       	smpsAlterVol        $06
000ABDA7 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABDAC E6FA                       	smpsAlterVol        $FA
000ABDAE A705                       	dc.b	nD3, $05
000ABDB0 E606                       	smpsAlterVol        $06
000ABDB2 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABDB7 E6FA                       	smpsAlterVol        $FA
000ABDB9 A704                       	dc.b	nD3, $04
000ABDBB E606                       	smpsAlterVol        $06
000ABDBD A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABDC3 E6FA                       	smpsAlterVol        $FA
000ABDC5 A7                         	dc.b	nD3
000ABDC6 E606                       	smpsAlterVol        $06
000ABDC8 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABDCD E6FA                       	smpsAlterVol        $FA
000ABDCF A704                       	dc.b	nD3, $04
000ABDD1 E606                       	smpsAlterVol        $06
000ABDD3 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABDD9 E6FA                       	smpsAlterVol        $FA
000ABDDB A7                         	dc.b	nD3
000ABDDC E606                       	smpsAlterVol        $06
000ABDDE A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABDE4 E6FA                       	smpsAlterVol        $FA
000ABDE6 A705                       	dc.b	nD3, $05
000ABDE8 E606                       	smpsAlterVol        $06
000ABDEA A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABDEF E6FA                       	smpsAlterVol        $FA
000ABDF1 A7                         	dc.b	nD3
000ABDF2 E606                       	smpsAlterVol        $06
000ABDF4 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABDFA E6FA                       	smpsAlterVol        $FA
000ABDFC A705                       	dc.b	nD3, $05
000ABDFE E606                       	smpsAlterVol        $06
000ABE00 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE05 E6FA                       	smpsAlterVol        $FA
000ABE07 A704                       	dc.b	nD3, $04
000ABE09 E606                       	smpsAlterVol        $06
000ABE0B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE10 E6FA                       	smpsAlterVol        $FA
000ABE12 A705                       	dc.b	nD3, $05
000ABE14 E606                       	smpsAlterVol        $06
000ABE16 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE1B E6FA                       	smpsAlterVol        $FA
000ABE1D A704                       	dc.b	nD3, $04
000ABE1F E606                       	smpsAlterVol        $06
000ABE21 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE26 E6FA                       	smpsAlterVol        $FA
000ABE28 A705                       	dc.b	nD3, $05
000ABE2A E606                       	smpsAlterVol        $06
000ABE2C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE31 E6FA                       	smpsAlterVol        $FA
000ABE33 A704                       	dc.b	nD3, $04
000ABE35 E606                       	smpsAlterVol        $06
000ABE37 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABE3D E6FA                       	smpsAlterVol        $FA
000ABE3F A7                         	dc.b	nD3
000ABE40 E606                       	smpsAlterVol        $06
000ABE42 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABE48 E6FA                       	smpsAlterVol        $FA
000ABE4A A705                       	dc.b	nD3, $05
000ABE4C E606                       	smpsAlterVol        $06
000ABE4E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE53 E6FA                       	smpsAlterVol        $FA
000ABE55 A7                         	dc.b	nD3
000ABE56 E606                       	smpsAlterVol        $06
000ABE58 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABE5E E6FA                       	smpsAlterVol        $FA
000ABE60 A705                       	dc.b	nD3, $05
000ABE62 E606                       	smpsAlterVol        $06
000ABE64 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE69 E6FA                       	smpsAlterVol        $FA
000ABE6B A704                       	dc.b	nD3, $04
000ABE6D E606                       	smpsAlterVol        $06
000ABE6F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE74 E6FA                       	smpsAlterVol        $FA
000ABE76 A705                       	dc.b	nD3, $05
000ABE78 E606                       	smpsAlterVol        $06
000ABE7A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE7F E6FA                       	smpsAlterVol        $FA
000ABE81 A704                       	dc.b	nD3, $04
000ABE83 E606                       	smpsAlterVol        $06
000ABE85 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE8A E6FA                       	smpsAlterVol        $FA
000ABE8C A705                       	dc.b	nD3, $05
000ABE8E E606                       	smpsAlterVol        $06
000ABE90 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE95 E6FA                       	smpsAlterVol        $FA
000ABE97 A704                       	dc.b	nD3, $04
000ABE99 E606                       	smpsAlterVol        $06
000ABE9B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABEA1 E6FA                       	smpsAlterVol        $FA
000ABEA3 A7                         	dc.b	nD3
000ABEA4 E606                       	smpsAlterVol        $06
000ABEA6 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABEAB E6FA                       	smpsAlterVol        $FA
000ABEAD A704                       	dc.b	nD3, $04
000ABEAF E606                       	smpsAlterVol        $06
000ABEB1 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABEB7 E6FA                       	smpsAlterVol        $FA
000ABEB9 A7                         	dc.b	nD3
000ABEBA E606                       	smpsAlterVol        $06
000ABEBC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABEC2 E6FA                       	smpsAlterVol        $FA
000ABEC4 A705                       	dc.b	nD3, $05
000ABEC6 E606                       	smpsAlterVol        $06
000ABEC8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABECD E6FA                       	smpsAlterVol        $FA
000ABECF A704                       	dc.b	nD3, $04
000ABED1 E606                       	smpsAlterVol        $06
000ABED3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABED8 E6FA                       	smpsAlterVol        $FA
000ABEDA A705                       	dc.b	nD3, $05
000ABEDC E606                       	smpsAlterVol        $06
000ABEDE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABEE3 E6FA                       	smpsAlterVol        $FA
000ABEE5 A704                       	dc.b	nD3, $04
000ABEE7 E606                       	smpsAlterVol        $06
000ABEE9 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABEEE E6FA                       	smpsAlterVol        $FA
000ABEF0 A705                       	dc.b	nD3, $05
000ABEF2 E606                       	smpsAlterVol        $06
000ABEF4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABEF9 E6FA                       	smpsAlterVol        $FA
000ABEFB A704                       	dc.b	nD3, $04
000ABEFD E606                       	smpsAlterVol        $06
000ABEFF A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000ABF06 F2                         	smpsStop
000ABF07                            
000ABF07                            MerrysLittleLamb_FM2:
000ABF07 E0C0                       	smpsPan             panCenter, $00
000ABF09 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000ABF11 E610                       	smpsAlterVol        $10
000ABF13 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000ABF1C                            
000ABF1C                            MerrysLittleLamb_FM3:
000ABF1C                            MerrysLittleLamb_FM4:
000ABF1C                            MerrysLittleLamb_FM5:
000ABF1C F2                         	smpsStop
000ABF1D                            
000ABF1D                            MerrysLittleLamb_PSG1:
000ABF1D 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000ABF25 EC02                       	smpsPSGAlterVol     $02
000ABF27 B7                         	dc.b	nFs4
000ABF28 EC03                       	smpsPSGAlterVol     $03
000ABF2A B7                         	dc.b	nFs4
000ABF2B EC03                       	smpsPSGAlterVol     $03
000ABF2D B7                         	dc.b	nFs4
000ABF2E EC03                       	smpsPSGAlterVol     $03
000ABF30 B7                         	dc.b	nFs4
000ABF31 ECF5                       	smpsPSGAlterVol     $F5
000ABF33 B7                         	dc.b	nFs4
000ABF34 EC02                       	smpsPSGAlterVol     $02
000ABF36 B7                         	dc.b	nFs4
000ABF37 EC03                       	smpsPSGAlterVol     $03
000ABF39 B7                         	dc.b	nFs4
000ABF3A EC03                       	smpsPSGAlterVol     $03
000ABF3C B7                         	dc.b	nFs4
000ABF3D ECF8                       	smpsPSGAlterVol     $F8
000ABF3F B7                         	dc.b	nFs4
000ABF40 EC02                       	smpsPSGAlterVol     $02
000ABF42 B7                         	dc.b	nFs4
000ABF43 EC03                       	smpsPSGAlterVol     $03
000ABF45 B7                         	dc.b	nFs4
000ABF46 EC03                       	smpsPSGAlterVol     $03
000ABF48 B7                         	dc.b	nFs4
000ABF49 EC03                       	smpsPSGAlterVol     $03
000ABF4B B7                         	dc.b	nFs4
000ABF4C ECF5                       	smpsPSGAlterVol     $F5
000ABF4E B7                         	dc.b	nFs4
000ABF4F EC02                       	smpsPSGAlterVol     $02
000ABF51 B7                         	dc.b	nFs4
000ABF52 EC03                       	smpsPSGAlterVol     $03
000ABF54 B7                         	dc.b	nFs4
000ABF55 EC03                       	smpsPSGAlterVol     $03
000ABF57 B7                         	dc.b	nFs4
000ABF58 EC03                       	smpsPSGAlterVol     $03
000ABF5A B7                         	dc.b	nFs4
000ABF5B ECF5                       	smpsPSGAlterVol     $F5
000ABF5D B7                         	dc.b	nFs4
000ABF5E EC02                       	smpsPSGAlterVol     $02
000ABF60 B7                         	dc.b	nFs4
000ABF61 EC06                       	smpsPSGAlterVol     $06
000ABF63 B7                         	dc.b	nFs4
000ABF64 EC03                       	smpsPSGAlterVol     $03
000ABF66 B7                         	dc.b	nFs4
000ABF67 ECF5                       	smpsPSGAlterVol     $F5
000ABF69 B7                         	dc.b	nFs4
000ABF6A EC02                       	smpsPSGAlterVol     $02
000ABF6C B7                         	dc.b	nFs4
000ABF6D EC03                       	smpsPSGAlterVol     $03
000ABF6F B7                         	dc.b	nFs4
000ABF70 EC03                       	smpsPSGAlterVol     $03
000ABF72 B7                         	dc.b	nFs4
000ABF73 EC03                       	smpsPSGAlterVol     $03
000ABF75 B7                         	dc.b	nFs4
000ABF76 ECF5                       	smpsPSGAlterVol     $F5
000ABF78 B7                         	dc.b	nFs4
000ABF79 EC02                       	smpsPSGAlterVol     $02
000ABF7B B7                         	dc.b	nFs4
000ABF7C EC03                       	smpsPSGAlterVol     $03
000ABF7E B7                         	dc.b	nFs4
000ABF7F EC03                       	smpsPSGAlterVol     $03
000ABF81 B7                         	dc.b	nFs4
000ABF82 EC03                       	smpsPSGAlterVol     $03
000ABF84 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000ABF88 ECF7                       	smpsPSGAlterVol     $F7
000ABF8A A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000ABF96 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000ABFA2 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000ABFAE A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000ABFBA 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000ABFC6 F2                         	smpsStop
000ABFC7                            
000ABFC7                            MerrysLittleLamb_PSG2:
000ABFC7 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000ABFCE EC02                       	smpsPSGAlterVol     $02
000ABFD0 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000ABFDC E101                       	smpsAlterNote       $01
000ABFDE AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000ABFE2 E101                       	smpsAlterNote       $01
000ABFE4 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFE8 E101                       	smpsAlterNote       $01
000ABFEA AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFEE E101                       	smpsAlterNote       $01
000ABFF0 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFF4 E101                       	smpsAlterNote       $01
000ABFF6 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000ABFFA E101                       	smpsAlterNote       $01
000ABFFC AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AC000 E101                       	smpsAlterNote       $01
000AC002 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000AC006 E101                       	smpsAlterNote       $01
000AC008 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AC00C E101                       	smpsAlterNote       $01
000AC00E AB04 80                    	dc.b	nFs3, $04, nRst
000AC011 E101                       	smpsAlterNote       $01
000AC013 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AC017 E101                       	smpsAlterNote       $01
000AC019 AB04 80                    	dc.b	nFs3, $04, nRst
000AC01C E101                       	smpsAlterNote       $01
000AC01E AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000AC024 F2                         	smpsStop
000AC025                            
000AC025                            MerrysLittleLamb_PSG3:
000AC025 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000AC02B F3E7                       	smpsPSGform         $E7
000AC02D E108                       	smpsAlterNote       $08
000AC02F 0002                       	dc.b	nMaxPSG, $02
000AC031 EC01                       	smpsPSGAlterVol     $01
000AC033 E108                       	smpsAlterNote       $08
000AC035 0005                       	dc.b	nMaxPSG, $05
000AC037 EC01                       	smpsPSGAlterVol     $01
000AC039 E108                       	smpsAlterNote       $08
000AC03B 0008                       	dc.b	nMaxPSG, $08
000AC03D EC01                       	smpsPSGAlterVol     $01
000AC03F E108                       	smpsAlterNote       $08
000AC041 00                         	dc.b	nMaxPSG
000AC042 EC01                       	smpsPSGAlterVol     $01
000AC044 E108                       	smpsAlterNote       $08
000AC046 00                         	dc.b	nMaxPSG
000AC047 EC01                       	smpsPSGAlterVol     $01
000AC049 E108                       	smpsAlterNote       $08
000AC04B 0007                       	dc.b	nMaxPSG, $07
000AC04D EC01                       	smpsPSGAlterVol     $01
000AC04F E108                       	smpsAlterNote       $08
000AC051 0005                       	dc.b	nMaxPSG, $05
000AC053 EC01                       	smpsPSGAlterVol     $01
000AC055 E108                       	smpsAlterNote       $08
000AC057 0007                       	dc.b	nMaxPSG, $07
000AC059 EC01                       	smpsPSGAlterVol     $01
000AC05B E108                       	smpsAlterNote       $08
000AC05D 0004                       	dc.b	nMaxPSG, $04
000AC05F EC01                       	smpsPSGAlterVol     $01
000AC061 E108                       	smpsAlterNote       $08
000AC063 0007                       	dc.b	nMaxPSG, $07
000AC065 EC01                       	smpsPSGAlterVol     $01
000AC067 E108                       	smpsAlterNote       $08
000AC069 0006                       	dc.b	nMaxPSG, $06
000AC06B EC01                       	smpsPSGAlterVol     $01
000AC06D E108                       	smpsAlterNote       $08
000AC06F 0009                       	dc.b	nMaxPSG, $09
000AC071 EC01                       	smpsPSGAlterVol     $01
000AC073 E108                       	smpsAlterNote       $08
000AC075 0007                       	dc.b	nMaxPSG, $07
000AC077 EC01                       	smpsPSGAlterVol     $01
000AC079 E108                       	smpsAlterNote       $08
000AC07B 0001                       	dc.b	nMaxPSG, $01
000AC07D ECFF                       	smpsPSGAlterVol     $FF
000AC07F E108                       	smpsAlterNote       $08
000AC081 00                         	dc.b	nMaxPSG
000AC082 EC01                       	smpsPSGAlterVol     $01
000AC084 E108                       	smpsAlterNote       $08
000AC086 0009                       	dc.b	nMaxPSG, $09
000AC088 EC01                       	smpsPSGAlterVol     $01
000AC08A E108                       	smpsAlterNote       $08
000AC08C 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000AC093 F2                         	smpsStop
000AC094                            
000AC094                            MerrysLittleLamb_DAC:
000AC094 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000AC0A0 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000AC0AC 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000AC0B8 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000AC0C4 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000AC0D0 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000AC0DC 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000AC0E8 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000AC0F4 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000AC100 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000AC10C 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000AC118 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000AC124 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000AC130 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000AC13C 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000AC148 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000AC154 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000AC160 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000AC16C 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000AC178 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000AC184 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000AC190 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000AC19C F2                         	smpsStop
000AC19D                            
000AC19D                            MerrysLittleLamb_Voices:
000AC19D                            ;	Voice $00
000AC19D                            ;	$00
000AC19D                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000AC19D                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000AC19D                            	smpsVcAlgorithm     $00
000AC19D                            	smpsVcFeedback      $00
000AC19D                            	smpsVcUnusedBits    $00
000AC19D                            	smpsVcDetune        $07, $07, $07, $07
000AC19D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AC19D                            	smpsVcRateScale     $00, $00, $00, $00
000AC19D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AC19D                            	smpsVcAmpMod        $00, $00, $00, $00
000AC19D                            	smpsVcDecayRate1    $1F, $00, $00, $00
000AC19D                            	smpsVcDecayRate2    $12, $00, $00, $00
000AC19D                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000AC19D                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AC19D 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AC1B6                            
000AC1B6                            ;	Voice $01
000AC1B6                            ;	$25
000AC1B6                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000AC1B6                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000AC1B6                            	smpsVcAlgorithm     $05
000AC1B6                            	smpsVcFeedback      $04
000AC1B6                            	smpsVcUnusedBits    $00
000AC1B6                            	smpsVcDetune        $07, $00, $00, $00
000AC1B6                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AC1B6                            	smpsVcRateScale     $00, $00, $00, $00
000AC1B6                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000AC1B6                            	smpsVcAmpMod        $00, $00, $00, $00
000AC1B6                            	smpsVcDecayRate1    $03, $0B, $06, $08
000AC1B6                            	smpsVcDecayRate2    $00, $00, $00, $00
000AC1B6                            	smpsVcDecayLevel    $00, $0A, $04, $04
000AC1B6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AC1B6 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000AC1CF                            
000AC1CF                            
000AC1D0 00                         		even
000AC1D0                            Music8F:	incbin	sound\music8F.bin ; Game Over
000AC810 00                         		even
000AC810                            Music90:	incbin	sound\music90.bin ; Continue
000ACBAA 00                         		even
000ACBAA                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000ACBAA                            Mus91_Credits_Header:
000ACBAA =00000001                  smpsHeaderStartSong = 1
000ACBAA 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000ACBAC 0603                       	smpsHeaderChan      $06, $03
000ACBAE 0133                       	smpsHeaderTempo     $01, $33
000ACBB0                            
000ACBB4 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000ACBB8 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000ACBBC 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000ACBC0 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000ACBC4 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000ACBC8 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000ACBCE 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000ACBD4 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000ACBDA                            ;	this is just a rip of the track
000ACBDA                            ;	ripper, 	part,		joke
000ACBDA                            ;	undecided, 	intro,		undecided
000ACBDA                            ;	coninight, 	ghz,		luka luka night fever
000ACBDA                            ;	coninight, 	lz,		the cleveland show (callback)
000ACBDA                            ;	undecided, 	mz,		undecided
000ACBDA                            ;	carlos, 	slz,		meltdown
000ACBDA                            ;	undecided, 	sbz,		undecided
000ACBDA                            ;	undecided, 	ccz,		undecided
000ACBDA                            ;	undecided, 	ending,		undecided
000ACBDA                            
000ACBDA                            ; FM1 Data
000ACBDA                            Mus91_Credits_FM1:
000ACBDA E201                       	smpsNop             $01
000ACBDC 8060                       	dc.b	nRst, $60
000ACBE0 E6F8                       	smpsAlterVol        $F8
000ACBE2 E806                       	smpsNoteFill        $06
000ACBE4 F800 00                    	smpsCall            Mus91_Credits_Call11
000ACBE7 E0C0                       	smpsPan             panCenter, $00
000ACBE9 E800                       	smpsNoteFill        $00
000ACBED F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000ACBF2 8030                       	dc.b	nRst, $30
000ACBF4 F800 00                    	smpsCall            Mus91_Credits_Call12
000ACBF7 CDCB 18C9 0CC8 18C9 0CC8+  	dc.b	nE6, nD6, $18, nC6, $0C, nB5, $18, nC6, $0C, nB5, $18, nG5
000ACC03 54                         	dc.b	$54
000ACC04 F800 00                    	smpsCall            Mus91_Credits_Call12
000ACC07 0CC2 18C6 0CC4 18C6 0CC4+  	dc.b	$0C, nF5, $18, nA5, $0C, nG5, $18, nA5, $0C, nG5, $18, nC5
000ACC13 2480 6080 8080             	dc.b	$24, nRst, $60, nRst, nRst, nRst
000ACC19 F4                         	smpsModOff
000ACC1A E201                       	smpsNop             $01
000ACC1C EA0F                       	smpsSetTempoMod     $0F
000ACC20 E602                       	smpsAlterVol        $02
000ACC22 8006 C1C4 C1C4 09C6 C80C+  	dc.b	nRst, $06, nE5, nG5, nE5, nG5, $09, nA5, nB5, $0C, nC6, $06
000ACC2E C8C6 C409 C606 C403 C106+  	dc.b	nB5, nA5, nG5, $09, nA5, $06, nG5, $03, nE5, $06, nRst, $06
000ACC3A C6C9 C6C9 09CB CD0C CE06+  	dc.b	nA5, nC6, nA5, nC6, $09, nD6, nE6, $0C, nF6, $06, nE6, nD6
000ACC46 C90C C60C CB04 C9CB C924   	dc.b	nC6, $0C, nA5, $0C, nD6, $04, nC6, nD6, nC6, $24
000ACC50 E9F4                       	smpsAlterPitch      $F4
000ACC52 E609                       	smpsAlterVol        $09
000ACC56 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000ACC5D F800 00                    	smpsCall            Mus91_Credits_Call0C
000ACC62 E6EB                       	smpsAlterVol        $EB
000ACC64 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000ACC69 F800 00                    	smpsCall            Mus91_Credits_Call0D
000ACC6C CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000ACC74 E201                       	smpsNop             $01
000ACC76 EA0A                       	smpsSetTempoMod     $0A
000ACC7A E90C                       	smpsAlterPitch      $0C
000ACC7C E60B                       	smpsAlterVol        $0B
000ACC7E F800 00                    	smpsCall            Mus91_Credits_Call0E
000ACC81 E201                       	smpsNop             $01
000ACC83 EA07                       	smpsSetTempoMod     $07
000ACC85 8060                       	dc.b	nRst, $60
000ACC87 E201                       	smpsNop             $01
000ACC89 EA03                       	smpsSetTempoMod     $03
000ACC8B 8030                       	dc.b	nRst, $30
000ACC8F E60E                       	smpsAlterVol        $0E
000ACC91 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000ACC9D 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000ACCA9 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000ACCB5 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000ACCC1 E201                       	smpsNop             $01
000ACCC3 EA04                       	smpsSetTempoMod     $04
000ACCC5 E6F5                       	smpsAlterVol        $F5
000ACCC9 8060                       	dc.b	nRst, $60
000ACCCB F800 00                    	smpsCall            Mus91_Credits_Call07
000ACCCE E609                       	smpsAlterVol        $09
000ACCD0 E103                       	smpsAlterNote       $03
000ACCD4 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000ACCD9 F800 00                    	smpsCall            Mus91_Credits_Call0B
000ACCDC E6EF                       	smpsAlterVol        $EF
000ACCE0 E102                       	smpsAlterNote       $02
000ACCE2 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000ACCE6 E201                       	smpsNop             $01
000ACCE8 F2                         	smpsStop
000ACCE9                            
000ACCE9                            Mus91_Credits_Call12:
000ACCE9 C90C C618 C90C C818 C90C+  	dc.b	nC6, $0C, nA5, $18, nC6, $0C, nB5, $18, nC6, $0C, nB5, $18
000ACCF5 C448 C60C                  	dc.b	nG5, $48, nA5, $0C
000ACCF9 E3                         	smpsReturn
000ACCFA                            
000ACCFA                            Mus91_Credits_Call07:
000ACCFA 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000ACD06 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000ACD12 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000ACD1C F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000ACD21 E3                         	smpsReturn
000ACD22                            
000ACD22                            ; FM2 Data
000ACD22                            Mus91_Credits_FM2:
000ACD22 8060                       	dc.b	nRst, $60
000ACD26                            
000ACD26                            Mus91_Credits_Loop0F:
000ACD26 A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000ACD32 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000ACD3E ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000ACD47 F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000ACD4E                            
000ACD4E                            Mus91_Credits_Loop10:
000ACD4E E805                       	smpsNoteFill        $05
000ACD50 AA0C                       	dc.b	nF3, $0C
000ACD52 F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD55 E805                       	smpsNoteFill        $05
000ACD57 A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000ACD5D E800                       	smpsNoteFill        $00
000ACD5F A5A7 A9                    	dc.b	nC3, nD3, nE3
000ACD62 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000ACD67 E805                       	smpsNoteFill        $05
000ACD69 AA                         	dc.b	nF3
000ACD6A F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD6D E805                       	smpsNoteFill        $05
000ACD6F A9                         	dc.b	nE3
000ACD70 F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD73 E805                       	smpsNoteFill        $05
000ACD75 A7                         	dc.b	nD3
000ACD76 F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD79 E805                       	smpsNoteFill        $05
000ACD7B A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000ACD81 E800                       	smpsNoteFill        $00
000ACD83 A0A2 A4                    	dc.b	nG2, nA2, nB2
000ACD86 E805                       	smpsNoteFill        $05
000ACD88                            
000ACD88                            Mus91_Credits_Loop11:
000ACD88 A5                         	dc.b	nC3
000ACD89 F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000ACD8E E800                       	smpsNoteFill        $00
000ACD90 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000ACD9C 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000ACDA6 E9E8                       	smpsAlterPitch      $E8
000ACDA8 E602                       	smpsAlterVol        $02
000ACDAA                            
000ACDAA                            Mus91_Credits_Loop12:
000ACDAA B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000ACDB6 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000ACDC2 B509 8003                  	dc.b	nE4, $09, nRst, $03
000ACDC6 E905                       	smpsAlterPitch      $05
000ACDC8 F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000ACDCD E9F6                       	smpsAlterPitch      $F6
000ACDCF B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000ACDDB 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000ACDE3 E601                       	smpsAlterVol        $01
000ACDE7                            
000ACDE7                            Mus91_Credits_Loop13:
000ACDE7 AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000ACDF3 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000ACDFB F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000ACE00                            
000ACE00                            Mus91_Credits_Loop14:
000ACE00 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000ACE0C 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000ACE14 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000ACE19 B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000ACE25 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000ACE31 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000ACE3D 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000ACE49 B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000ACE55 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000ACE5B E6F8                       	smpsAlterVol        $F8
000ACE5D B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000ACE69 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000ACE75 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000ACE81 0280 01                    	dc.b	$02, nRst, $01
000ACE84                            
000ACE84                            Mus91_Credits_Loop15:
000ACE84 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000ACE90 B302 8001                  	dc.b	nD4, $02, nRst, $01
000ACE94 E9FF                       	smpsAlterPitch      $FF
000ACE96 F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000ACE9B E904                       	smpsAlterPitch      $04
000ACE9D AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000ACEA9 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000ACEB5 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000ACEC1 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000ACECD 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000ACED9 AC24                       	dc.b	nG3, $24
000ACEDD E90C                       	smpsAlterPitch      $0C
000ACEDF E607                       	smpsAlterVol        $07
000ACEE1 E806                       	smpsNoteFill        $06
000ACEE3                            
000ACEE3                            Mus91_Credits_Loop16:
000ACEE3 F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEE6 E906                       	smpsAlterPitch      $06
000ACEE8 F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEEB E9FF                       	smpsAlterPitch      $FF
000ACEED F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEF0 E902                       	smpsAlterPitch      $02
000ACEF2 F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEF5 E9F9                       	smpsAlterPitch      $F9
000ACEF7 F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000ACEFC E800                       	smpsNoteFill        $00
000ACEFE E9F4                       	smpsAlterPitch      $F4
000ACF00 E6FC                       	smpsAlterVol        $FC
000ACF04 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000ACF10 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000ACF1B E602                       	smpsAlterVol        $02
000ACF1D 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000ACF29 BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000ACF35 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000ACF41 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000ACF4D 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000ACF53 E90C                       	smpsAlterPitch      $0C
000ACF55 E6FE                       	smpsAlterVol        $FE
000ACF59 8060                       	dc.b	nRst, $60
000ACF5B                            
000ACF5B                            Mus91_Credits_Loop17:
000ACF5B AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000ACF67 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000ACF73 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000ACF7D F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000ACF82 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000ACF8E 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000ACF9A 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000ACFA6 B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000ACFB2 AE06 80                    	dc.b	nA3, $06, nRst
000ACFB5 E6FD                       	smpsAlterVol        $FD
000ACFB7 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000ACFBB F2                         	smpsStop
000ACFBC                            
000ACFBC                            	; Unused data
000ACFBC                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000ACFBC 0001                       	dc.b	$00, $01
000ACFBE                            
000ACFBE                            Mus91_Credits_Call0F:
000ACFBE 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000ACFC4 E800                       	smpsNoteFill        $00
000ACFC6 0C                         	dc.b	$0C
000ACFC7 E3                         	smpsReturn
000ACFC8                            
000ACFC8                            Mus91_Credits_Call10:
000ACFC8 B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000ACFD1 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000ACFD6 E3                         	smpsReturn
000ACFD7                            
000ACFD7                            ; FM3 Data
000ACFD7                            Mus91_Credits_FM3:
000ACFD7 8060                       	dc.b	nRst, $60
000ACFD9 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000ACFE0 E601                       	smpsAlterVol        $01
000ACFE2 E040                       	smpsPan             panRight, $00
000ACFE4 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000ACFF0 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000ACFF5                            
000ACFF5                            Mus91_Credits_Loop0C:
000ACFF5 E080                       	smpsPan             panLeft, $00
000ACFF7 D9                         	dc.b	nE7
000ACFF8 E040                       	smpsPan             panRight, $00
000ACFFA D5                         	dc.b	nC7
000ACFFB E602                       	smpsAlterVol        $02
000ACFFD F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000AD002 E0C0                       	smpsPan             panCenter, $00
000AD006 E6E5                       	smpsAlterVol        $E5
000AD008 E9E8                       	smpsAlterPitch      $E8
000AD00A D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000AD016 D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000AD022 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000AD02E D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000AD032 F4                         	smpsModOff
000AD035 E6FE                       	smpsAlterVol        $FE
000AD037                            
000AD037                            Mus91_Credits_Loop0D:
000AD037 C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000AD043 8008                       	dc.b	nRst, $08
000AD045 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000AD04A C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000AD056 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000AD062 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD06A E918                       	smpsAlterPitch      $18
000AD06C 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000AD071 E9E8                       	smpsAlterPitch      $E8
000AD075 E90C                       	smpsAlterPitch      $0C
000AD077 E603                       	smpsAlterVol        $03
000AD079 E102                       	smpsAlterNote       $02
000AD07B 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000AD082 F800 00                    	smpsCall            Mus91_Credits_Call0C
000AD087 E90C                       	smpsAlterPitch      $0C
000AD089 E60B                       	smpsAlterVol        $0B
000AD08B 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000AD090 F800 00                    	smpsCall            Mus91_Credits_Call0D
000AD095 E6EC                       	smpsAlterVol        $EC
000AD097 8006                       	dc.b	nRst, $06
000AD099 E114                       	smpsAlterNote       $14
000AD09B C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000AD09E E100                       	smpsAlterNote       $00
000AD0A0 02C6 03                    	dc.b	$02, nA5, $03
000AD0A3 E805                       	smpsNoteFill        $05
000AD0A5 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000AD0AC E800                       	smpsNoteFill        $00
000AD0AE C9                         	dc.b	nC6
000AD0AF E6FC                       	smpsAlterVol        $FC
000AD0B1 E933                       	smpsAlterPitch      $33
000AD0B5 B403                       	dc.b	nEb4, $03
000AD0B7 E607                       	smpsAlterVol        $07
000AD0B9 B4                         	dc.b	nEb4
000AD0BA E607                       	smpsAlterVol        $07
000AD0BC B4                         	dc.b	nEb4
000AD0BD E607                       	smpsAlterVol        $07
000AD0BF B4                         	dc.b	nEb4
000AD0C2 E6EF                       	smpsAlterVol        $EF
000AD0C4 E9CD                       	smpsAlterPitch      $CD
000AD0C6 CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000AD0CC E1EC                       	smpsAlterNote       $EC
000AD0CE D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000AD0D1 E100                       	smpsAlterNote       $00
000AD0D3 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000AD0D8 D523                       	dc.b	nC7, $23
000AD0DA F4                         	smpsModOff
000AD0DD E6FF                       	smpsAlterVol        $FF
000AD0DF E103                       	smpsAlterNote       $03
000AD0E1 F800 00                    	smpsCall            Mus91_Credits_Call0E
000AD0E4 E100                       	smpsAlterNote       $00
000AD0E8 E609                       	smpsAlterVol        $09
000AD0EA 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000AD0F6 C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000AD102 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000AD10E 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000AD11A 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000AD125 E6F9                       	smpsAlterVol        $F9
000AD127 8060                       	dc.b	nRst, $60
000AD129                            
000AD129                            Mus91_Credits_Loop0E:
000AD129 CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000AD135 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000AD141 D01E                       	dc.b	nG6, $1E
000AD143 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000AD148 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000AD154 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000AD160 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000AD166 E6F8                       	smpsAlterVol        $F8
000AD168 E103                       	smpsAlterNote       $03
000AD16A A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000AD16E F2                         	smpsStop
000AD16F                            
000AD16F                            Mus91_Credits_Call14:
000AD16F CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000AD17B D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000AD180 E3                         	smpsReturn
000AD181                            
000AD181                            ; FM4 Data
000AD181                            Mus91_Credits_FM4:
000AD183 8060                       	dc.b	nRst, $60
000AD185 E608                       	smpsAlterVol        $08
000AD187 F800 00                    	smpsCall            Mus91_Credits_Call08
000AD18A C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000AD193 F800 00                    	smpsCall            Mus91_Credits_Call08
000AD196 C624 2418                  	dc.b	nA5, $24, $24, $18
000AD19A E080                       	smpsPan             panLeft, $00
000AD19C F800 00                    	smpsCall            Mus91_Credits_Call03
000AD19F E6F2                       	smpsAlterVol        $F2
000AD1A1                            
000AD1A1                            Mus91_Credits_Loop09:
000AD1A1 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000AD1AD 8008                       	dc.b	nRst, $08
000AD1AF F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000AD1B4 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000AD1C0 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000AD1CC C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD1D4 E918                       	smpsAlterPitch      $18
000AD1D6 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000AD1DB E0C0                       	smpsPan             panCenter, $00
000AD1DF E9F4                       	smpsAlterPitch      $F4
000AD1E1 E605                       	smpsAlterVol        $05
000AD1E3                            
000AD1E3                            Mus91_Credits_Loop0A:
000AD1E3 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000AD1EF 06                         	dc.b	$06
000AD1F0 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000AD1F5 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000AD201 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000AD20D D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000AD219 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000AD225 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000AD230 E9F4                       	smpsAlterPitch      $F4
000AD232 E603                       	smpsAlterVol        $03
000AD236 E080                       	smpsPan             panLeft, $00
000AD238 F800 00                    	smpsCall            Mus91_Credits_Call09
000AD23D E6F6                       	smpsAlterVol        $F6
000AD23F E918                       	smpsAlterPitch      $18
000AD241 F800 00                    	smpsCall            Mus91_Credits_Call0A
000AD244 800C                       	dc.b	nRst, $0C
000AD246 E1EC                       	smpsAlterNote       $EC
000AD248 C602                       	dc.b	nA5, $02
000AD24A E100                       	smpsAlterNote       $00
000AD24C E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000AD256 F800 00                    	smpsCall            Mus91_Credits_Call0A
000AD259 E1EC                       	smpsAlterNote       $EC
000AD25B C602                       	dc.b	nA5, $02
000AD25D E100                       	smpsAlterNote       $00
000AD25F 0A80 06                    	dc.b	$0A, nRst, $06
000AD262 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000AD267 E1E2                       	smpsAlterNote       $E2
000AD269 C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000AD26C E100                       	smpsAlterNote       $00
000AD26E 1C                         	dc.b	$1C
000AD26F E100                       	smpsAlterNote       $00
000AD271 E103                       	smpsAlterNote       $03
000AD273 F800 00                    	smpsCall            Mus91_Credits_Call06
000AD276 E100                       	smpsAlterNote       $00
000AD278 E0C0                       	smpsPan             panCenter, $00
000AD27C E6F5                       	smpsAlterVol        $F5
000AD27E 8060                       	dc.b	nRst, $60
000AD280                            
000AD280                            Mus91_Credits_Loop0B:
000AD280 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000AD28C 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000AD298 CB1E                       	dc.b	nD6, $1E
000AD29A F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000AD2A1 E103                       	smpsAlterNote       $03
000AD2A3 E608                       	smpsAlterVol        $08
000AD2A5 F800 00                    	smpsCall            Mus91_Credits_Call0B
000AD2AA E6F0                       	smpsAlterVol        $F0
000AD2AC F000 0106 04               	smpsModSet          $00, $01, $06, $04
000AD2B1 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000AD2B5 F2                         	smpsStop
000AD2B6                            
000AD2B6                            Mus91_Credits_Call08:
000AD2B6 C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000AD2C2 E3                         	smpsReturn
000AD2C3                            
000AD2C3                            Mus91_Credits_Call03:
000AD2C5 E9E8                       	smpsAlterPitch      $E8
000AD2C7 E60D                       	smpsAlterVol        $0D
000AD2C9                            
000AD2C9                            Mus91_Credits_Loop2D:
000AD2C9 F800 00                    	smpsCall            Mus91_Credits_Call1B
000AD2CC BFBF                       	dc.b	nD5, nD5
000AD2CE F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000AD2D3 F800 00                    	smpsCall            Mus91_Credits_Call1B
000AD2D6 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000AD2E2 E603                       	smpsAlterVol        $03
000AD2E4 E90C                       	smpsAlterPitch      $0C
000AD2E8 D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000AD2EC E9F4                       	smpsAlterPitch      $F4
000AD2F0 E3                         	smpsReturn
000AD2F1                            
000AD2F1                            Mus91_Credits_Call1B:
000AD2F1 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000AD2FD BCB8 B8                    	dc.b	nB4, nG4, nG4
000AD300 E3                         	smpsReturn
000AD301                            
000AD301                            Mus91_Credits_Call0A:
000AD301 800C                       	dc.b	nRst, $0C
000AD303 E1EC                       	smpsAlterNote       $EC
000AD305 C402                       	dc.b	nG5, $02
000AD307 E100                       	smpsAlterNote       $00
000AD309 E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000AD313 E1EC                       	smpsAlterNote       $EC
000AD315 CA02                       	dc.b	nCs6, $02
000AD317 E100                       	smpsAlterNote       $00
000AD319 E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000AD323 E1EC                       	smpsAlterNote       $EC
000AD325 C902                       	dc.b	nC6, $02
000AD327 E100                       	smpsAlterNote       $00
000AD329 E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000AD331 E3                         	smpsReturn
000AD332                            
000AD332                            Mus91_Credits_Call06:
000AD332 E608                       	smpsAlterVol        $08
000AD336 8030 8030                  	dc.b	nRst, $30, nRst, $30
000AD33A E501                       	smpsChanTempoDiv    $01
000AD33C F800 00                    	smpsCall            Mus91_Credits_Call17
000AD33F E502                       	smpsChanTempoDiv    $02
000AD343 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000AD348 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000AD354 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000AD360 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000AD36C 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000AD372 E3                         	smpsReturn
000AD373                            
000AD373                            Mus91_Credits_Call17:
000AD373 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000AD37F 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000AD38B B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000AD397 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000AD3A3 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000AD3AB E3                         	smpsReturn
000AD3AC                            
000AD3AC                            Mus91_Credits_Call0B:
000AD3AC 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000AD3B8 DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000AD3C4 DE0C                       	dc.b	nA7, $0C
000AD3C6 E3                         	smpsReturn
000AD3C7                            
000AD3C7                            ; FM5 Data
000AD3C7                            Mus91_Credits_FM5:
000AD3C9 8060                       	dc.b	nRst, $60
000AD3CB E6F0                       	smpsAlterVol        $F0
000AD3CD F800 00                    	smpsCall            Mus91_Credits_Call02
000AD3D0 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000AD3DA F800 00                    	smpsCall            Mus91_Credits_Call02
000AD3DD C324 2418                  	dc.b	nFs5, $24, $24, $18
000AD3E1 E040                       	smpsPan             panRight, $00
000AD3E3 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000AD3E6 E6F2                       	smpsAlterVol        $F2
000AD3E8                            
000AD3E8                            Mus91_Credits_Loop07:
000AD3E8 C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000AD3F4 8008                       	dc.b	nRst, $08
000AD3F6 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000AD3FB C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000AD407 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000AD413 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD41B E918                       	smpsAlterPitch      $18
000AD41D E0C0                       	smpsPan             panCenter, $00
000AD41F E603                       	smpsAlterVol        $03
000AD421 E90C                       	smpsAlterPitch      $0C
000AD425 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000AD431 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000AD439 E9E8                       	smpsAlterPitch      $E8
000AD43B E602                       	smpsAlterVol        $02
000AD43D                            
000AD43D                            Mus91_Credits_Loop08:
000AD43D D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000AD449 06                         	dc.b	$06
000AD44A F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000AD44F 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000AD45B 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000AD467 CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000AD473 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000AD47F D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000AD489 E040                       	smpsPan             panRight, $00
000AD48B E9F4                       	smpsAlterPitch      $F4
000AD48D E603                       	smpsAlterVol        $03
000AD48F F800 00                    	smpsCall            Mus91_Credits_Call04
000AD494 E924                       	smpsAlterPitch      $24
000AD496 E6F4                       	smpsAlterVol        $F4
000AD498 F800 00                    	smpsCall            Mus91_Credits_Call05
000AD49B CDCE D0                    	dc.b	nE6, nF6, nG6
000AD49E F800 00                    	smpsCall            Mus91_Credits_Call05
000AD4A1 D0CE CD                    	dc.b	nG6, nF6, nE6
000AD4A4 E9F4                       	smpsAlterPitch      $F4
000AD4A6 F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000AD4A9 E0C0                       	smpsPan             panCenter, $00
000AD4AD E103                       	smpsAlterNote       $03
000AD4AF E6F8                       	smpsAlterVol        $F8
000AD4B1 8060                       	dc.b	nRst, $60
000AD4B3 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000AD4B6 E600                       	smpsAlterVol        $00
000AD4BA 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000AD4C6 CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000AD4CE E605                       	smpsAlterVol        $05
000AD4D0 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000AD4D5 F2                         	smpsStop
000AD4D6                            
000AD4D6                            Mus91_Credits_Call02:
000AD4D6 C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000AD4E2 E3                         	smpsReturn
000AD4E3                            
000AD4E3                            ; PSG1 Data
000AD4E3                            Mus91_Credits_PSG1:
000AD4E3 8060                       	dc.b	nRst, $60
000AD4E5 F508                       	smpsPSGvoice        fTone_08
000AD4E7 EC03                       	smpsPSGAlterVol     $03
000AD4E9 E806                       	smpsNoteFill        $06
000AD4EB F800 00                    	smpsCall            Mus91_Credits_Call11
000AD4EE F501                       	smpsPSGvoice        fTone_01
000AD4F0 E800                       	smpsNoteFill        $00
000AD4F2 ECFD                       	smpsPSGAlterVol     $FD
000AD4F4                            
000AD4F4                            Mus91_Credits_Loop2A:
000AD4F4 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000AD500 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000AD508 F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000AD50D 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000AD519 C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000AD521 F505                       	smpsPSGvoice        fTone_05
000AD523 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000AD528 E810                       	smpsNoteFill        $10
000AD52A C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000AD536 E800                       	smpsNoteFill        $00
000AD538 C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000AD53C F4                         	smpsModOff
000AD53D F509                       	smpsPSGvoice        fTone_09
000AD53F EC01                       	smpsPSGAlterVol     $01
000AD541                            
000AD541                            Mus91_Credits_Loop2B:
000AD541 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000AD54D CD03 0906                  	dc.b	nE6, $03, $09, $06
000AD551 E905                       	smpsAlterPitch      $05
000AD553 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000AD558 E9F6                       	smpsAlterPitch      $F6
000AD55A 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000AD564 F508                       	smpsPSGvoice        fTone_08
000AD566 EC01                       	smpsPSGAlterVol     $01
000AD568 F800 00                    	smpsCall            Mus91_Credits_Call15
000AD56B 8002 8030                  	dc.b	nRst, $02, nRst, $30
000AD56F EC03                       	smpsPSGAlterVol     $03
000AD571 E9F4                       	smpsAlterPitch      $F4
000AD573 F505                       	smpsPSGvoice        fTone_05
000AD575 F800 00                    	smpsCall            Mus91_Credits_Call09
000AD578 E90C                       	smpsAlterPitch      $0C
000AD57A ECFC                       	smpsPSGAlterVol     $FC
000AD57C F500                       	smpsPSGvoice        $00
000AD57E F800 00                    	smpsCall            Mus91_Credits_Call16
000AD581 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000AD58C F800 00                    	smpsCall            Mus91_Credits_Call16
000AD58F C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000AD595 F506                       	smpsPSGvoice        fTone_06
000AD597 EC04                       	smpsPSGAlterVol     $04
000AD599 8030 8030                  	dc.b	nRst, $30, nRst, $30
000AD59D E501                       	smpsChanTempoDiv    $01
000AD59F F8FD D2                    	smpsCall            Mus91_Credits_Call17
000AD5A2 E502                       	smpsChanTempoDiv    $02
000AD5A4 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000AD5B0 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000AD5BC C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000AD5C8 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000AD5D4 ECFF                       	smpsPSGAlterVol     $FF
000AD5D6 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000AD5E2 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000AD5EE C9CA 06                    	dc.b	nC6, nCs6, $06
000AD5F1 F2                         	smpsStop
000AD5F2                            
000AD5F2                            Mus91_Credits_Call16:
000AD5F2 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000AD5FE C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000AD60A 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000AD610 E3                         	smpsReturn
000AD611                            
000AD611                            ; PSG2 Data
000AD611                            Mus91_Credits_PSG2:
000AD611 8060                       	dc.b	nRst, $60
000AD613 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000AD618 8002                       	dc.b	nRst, $02
000AD61A F8FB 53                    	smpsCall            Mus91_Credits_Call14
000AD61D ECFE                       	smpsPSGAlterVol     $FE
000AD61F F501                       	smpsPSGvoice        fTone_01
000AD621 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000AD62D CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000AD635                            
000AD635                            Mus91_Credits_Loop24:
000AD635 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000AD641 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000AD649 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000AD64E 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000AD65A C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000AD662 E806                       	smpsNoteFill        $06
000AD664 F506                       	smpsPSGvoice        fTone_06
000AD666                            
000AD666                            Mus91_Credits_Loop25:
000AD666 D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000AD66B F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000AD670 E800                       	smpsNoteFill        $00
000AD672 F509                       	smpsPSGvoice        fTone_09
000AD674 EC01                       	smpsPSGAlterVol     $01
000AD676                            
000AD676                            Mus91_Credits_Loop26:
000AD676 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000AD682 D003 0906                  	dc.b	nG6, $03, $09, $06
000AD686 E905                       	smpsAlterPitch      $05
000AD688 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000AD68D E9F6                       	smpsAlterPitch      $F6
000AD68F 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000AD69B E101                       	smpsAlterNote       $01
000AD69D EC03                       	smpsPSGAlterVol     $03
000AD69F F800 00                    	smpsCall            Mus91_Credits_Call15
000AD6A2 E100                       	smpsAlterNote       $00
000AD6A4 8030                       	dc.b	nRst, $30
000AD6A6 EC01                       	smpsPSGAlterVol     $01
000AD6A8 E9F4                       	smpsAlterPitch      $F4
000AD6AA F505                       	smpsPSGvoice        fTone_05
000AD6AC F800 00                    	smpsCall            Mus91_Credits_Call04
000AD6AF E90C                       	smpsAlterPitch      $0C
000AD6B1 ECFD                       	smpsPSGAlterVol     $FD
000AD6B3 E803                       	smpsNoteFill        $03
000AD6B5                            
000AD6B5                            Mus91_Credits_Loop27:
000AD6B5 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000AD6BE F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000AD6C3                            
000AD6C3                            Mus91_Credits_Loop28:
000AD6C3 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000AD6CB F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000AD6D0                            
000AD6D0                            Mus91_Credits_Loop29:
000AD6D0 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000AD6D8 F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000AD6DD F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000AD6E2 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000AD6E9                            	; These rests are unnecessary, and cause the following notes to play way too late.
000AD6E9                            	; Delete these three notes to fix this.
000AD6E9 8080 80                    	dc.b	nRst, nRst, nRst
000AD6EC                            	; This erroneous FM-only command causes the following notes to be inaudible.
000AD6EC E60C                       	smpsAlterVol        $0C
000AD6EE E102                       	smpsAlterNote       $02
000AD6F0 EC02                       	smpsPSGAlterVol     $02
000AD6F2 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000AD6FE 80D4 CD                    	dc.b	nRst, nB6, nE6
000AD701 F2                         	smpsStop
000AD702                            
000AD702                            ; PSG3 Data
000AD702                            Mus91_Credits_PSG3:
000AD702 F3E7                       	smpsPSGform         $E7
000AD704 E804                       	smpsNoteFill        $04
000AD706                            
000AD706                            Mus91_Credits_Loop18:
000AD706 000C                       	dc.b	nMaxPSG, $0C
000AD708 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000AD70D E806                       	smpsNoteFill        $06
000AD70F                            
000AD70F                            Mus91_Credits_Loop19:
000AD70F 0C                         	dc.b	$0C
000AD710 F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000AD715 ECFF                       	smpsPSGAlterVol     $FF
000AD717 F800 00                    	smpsCall            Mus91_Credits_Call13
000AD71A E80E                       	smpsNoteFill        $0E
000AD71C 0C                         	dc.b	$0C
000AD71D E803                       	smpsNoteFill        $03
000AD71F 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000AD727                            
000AD727                            Mus91_Credits_Loop1A:
000AD727 F800 00                    	smpsCall            Mus91_Credits_Call13
000AD72A F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000AD72F F509                       	smpsPSGvoice        fTone_09
000AD731 EC01                       	smpsPSGAlterVol     $01
000AD733 E90B                       	smpsAlterPitch      $0B
000AD735                            
000AD735                            Mus91_Credits_Loop1B:
000AD735 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000AD73E F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000AD743                            
000AD743                            Mus91_Credits_Loop1C:
000AD743 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000AD74B F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000AD750 B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000AD75C B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000AD768 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000AD76C E802                       	smpsNoteFill        $02
000AD76E E9F5                       	smpsAlterPitch      $F5
000AD770                            
000AD770                            Mus91_Credits_Loop1D:
000AD770 F504                       	smpsPSGvoice        fTone_04
000AD772 0003 03                    	dc.b	nMaxPSG, $03, $03
000AD775 EC02                       	smpsPSGAlterVol     $02
000AD777 F508                       	smpsPSGvoice        fTone_08
000AD779 E808                       	smpsNoteFill        $08
000AD77B 06                         	dc.b	$06
000AD77C E803                       	smpsNoteFill        $03
000AD77E ECFE                       	smpsPSGAlterVol     $FE
000AD780 F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000AD785 8024                       	dc.b	nRst, $24
000AD787                            
000AD787                            Mus91_Credits_Loop1E:
000AD787 F504                       	smpsPSGvoice        fTone_04
000AD789 0303                       	dc.b	$03, $03
000AD78B EC02                       	smpsPSGAlterVol     $02
000AD78D F508                       	smpsPSGvoice        fTone_08
000AD78F E808                       	smpsNoteFill        $08
000AD791 06                         	dc.b	$06
000AD792 E803                       	smpsNoteFill        $03
000AD794 ECFE                       	smpsPSGAlterVol     $FE
000AD796 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000AD79B 8030                       	dc.b	nRst, $30
000AD79D E801                       	smpsNoteFill        $01
000AD79F F504                       	smpsPSGvoice        fTone_04
000AD7A1 EC03                       	smpsPSGAlterVol     $03
000AD7A3                            
000AD7A3                            Mus91_Credits_Loop1F:
000AD7A3 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000AD7A7 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000AD7AC                            
000AD7AC                            Mus91_Credits_Loop20:
000AD7AC 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000AD7B0 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000AD7B5 ECFF                       	smpsPSGAlterVol     $FF
000AD7B7                            
000AD7B7                            Mus91_Credits_Loop21:
000AD7B7 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000AD7BB F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000AD7C0 ECFE                       	smpsPSGAlterVol     $FE
000AD7C2                            
000AD7C2                            Mus91_Credits_Loop22:
000AD7C2 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000AD7C6 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000AD7CB                            
000AD7CB                            Mus91_Credits_Loop23:
000AD7CB E803                       	smpsNoteFill        $03
000AD7CD 0C                         	dc.b	$0C
000AD7CE E80C                       	smpsNoteFill        $0C
000AD7D0 0C                         	dc.b	$0C
000AD7D1 E803                       	smpsNoteFill        $03
000AD7D3 0C                         	dc.b	$0C
000AD7D4 E80C                       	smpsNoteFill        $0C
000AD7D6 0C                         	dc.b	$0C
000AD7D7 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000AD7DC E803                       	smpsNoteFill        $03
000AD7DE 06                         	dc.b	$06
000AD7DF E80E                       	smpsNoteFill        $0E
000AD7E1 12                         	dc.b	$12
000AD7E2 E803                       	smpsNoteFill        $03
000AD7E4 0C                         	dc.b	$0C
000AD7E5 E80F                       	smpsNoteFill        $0F
000AD7E7 0C                         	dc.b	$0C
000AD7E8 F2                         	smpsStop
000AD7E9                            
000AD7E9                            ; DAC Data
000AD7E9                            Mus91_Credits_DAC:
000AD7E9 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000AD7F5 0C                         	dc.b	$0C
000AD7F6 F800 00                    	smpsCall            Mus91_Credits_Call00
000AD7F9 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000AD803 F800 00                    	smpsCall            Mus91_Credits_Call00
000AD806 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000AD80F                            
000AD80F                            Mus91_Credits_Loop00:
000AD80F 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000AD818 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000AD81D 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000AD827                            
000AD827                            Mus91_Credits_Loop01:
000AD827 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000AD830 F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000AD835 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000AD83F EB02                       	smpsSetTempoDiv     $02
000AD841                            
000AD841                            Mus91_Credits_Loop02:
000AD841 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000AD848 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000AD84D 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000AD856                            
000AD856                            Mus91_Credits_Loop03:
000AD856 810C                       	dc.b	dKick, $0C
000AD858 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000AD85D 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000AD869 8024                       	dc.b	nRst, $24
000AD86B                            
000AD86B                            Mus91_Credits_Loop04:
000AD86B 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000AD870 F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000AD875 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000AD881 F800 00                    	smpsCall            Mus91_Credits_Call01
000AD884 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000AD890 F800 00                    	smpsCall            Mus91_Credits_Call01
000AD893 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000AD89F 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000AD8AB 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000AD8B7 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000AD8C3 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000AD8CD                            
000AD8CD                            Mus91_Credits_Loop05:
000AD8CD 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000AD8D9 02                         	dc.b	$02
000AD8DA F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000AD8DF EB01                       	smpsSetTempoDiv     $01
000AD8E1 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000AD8ED 8104                       	dc.b	dKick, $04
000AD8EF                            
000AD8EF                            Mus91_Credits_Loop06:
000AD8EF 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000AD8F4 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000AD8F9 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000AD905 03                         	dc.b	$03
000AD906 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000AD90B 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000AD917 F2                         	smpsStop
000AD918                            
000AD918                            Mus91_Credits_Call00:
000AD918 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000AD922 F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000AD927 E3                         	smpsReturn
000AD928                            
000AD928                            Mus91_Credits_Call01:
000AD928 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000AD934 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000AD940 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000AD94C 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000AD958 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000AD963 E3                         	smpsReturn
000AD964                            
000AD964                            Mus91_Credits_Call11:
000AD964 F800 00                    	smpsCall            Mus91_Credits_Call1A
000AD967 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000AD96C F800 00                    	smpsCall            Mus91_Credits_Call1A
000AD96F C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000AD974 E3                         	smpsReturn
000AD975                            
000AD975                            Mus91_Credits_Call1A:
000AD975 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000AD981 C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000AD98D C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000AD991 E3                         	smpsReturn
000AD992                            
000AD992                            ; Unused alternate version of Mus91_Credits_Call0B
000AD992                            ; Mus91_Credits_CallUnk:
000AD992 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000AD99E 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000AD9AA 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000AD9B6 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000AD9C2 DE06 8012                  	dc.b	nA7, $06, nRst, $12
000AD9C6 E3                         	smpsReturn
000AD9C7                            
000AD9C7                            Mus91_Credits_Call13:
000AD9C7 E80E                       	smpsNoteFill        $0E
000AD9C9 0C                         	dc.b	$0C
000AD9CA E803                       	smpsNoteFill        $03
000AD9CC 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000AD9D2 E3                         	smpsReturn
000AD9D3                            
000AD9D3                            Mus91_Credits_Call0C:
000AD9D3 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000AD9DA F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000AD9DF D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000AD9EB 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000AD9F7 12D2 1E                    	dc.b	$12, nA6, $1E
000AD9FA E3                         	smpsReturn
000AD9FB                            
000AD9FB                            Mus91_Credits_Call15:
000AD9FB 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000ADA07 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000ADA13 E3                         	smpsReturn
000ADA14                            
000ADA14                            Mus91_Credits_Call0D:
000ADA14 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000ADA20 D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000ADA2C 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000ADA38 E3                         	smpsReturn
000ADA39                            
000ADA39                            Mus91_Credits_Call04:
000ADA39 F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA3C CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000ADA47                            
000ADA47                            Mus91_Credits_Loop2C:
000ADA47 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000ADA51 F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000ADA56 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000ADA62 E9FE                       	smpsAlterPitch      $FE
000ADA64 F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA67 E903                       	smpsAlterPitch      $03
000ADA69 F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA6C E9FF                       	smpsAlterPitch      $FF
000ADA6E 8006                       	dc.b	nRst, $06
000ADA70 E808                       	smpsNoteFill        $08
000ADA72 D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000ADA77 E805                       	smpsNoteFill        $05
000ADA79 0303                       	dc.b	$03, $03
000ADA7B E800                       	smpsNoteFill        $00
000ADA7D 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000ADA81 E3                         	smpsReturn
000ADA82                            
000ADA82                            Mus91_Credits_Call19:
000ADA82 CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000ADA8D E3                         	smpsReturn
000ADA8E                            
000ADA8E                            Mus91_Credits_Call09:
000ADA8E D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000ADA9A 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000ADAA6 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000ADAB2 D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000ADABE 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000ADACA 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000ADAD6 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000ADADC E808                       	smpsNoteFill        $08
000ADADE D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000ADAE3 E805                       	smpsNoteFill        $05
000ADAE5 0303                       	dc.b	$03, $03
000ADAE7 E800                       	smpsNoteFill        $00
000ADAE9 800C D224                  	dc.b	nRst, $0C, nA6, $24
000ADAED E3                         	smpsReturn
000ADAEE                            
000ADAEE                            Mus91_Credits_Call0E:
000ADAEE F800 00                    	smpsCall            Mus91_Credits_Call18
000ADAF1 D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000ADAF9 F800 00                    	smpsCall            Mus91_Credits_Call18
000ADAFC D030 8006                  	dc.b	nG6, $30, nRst, $06
000ADB00 E3                         	smpsReturn
000ADB01                            
000ADB01                            Mus91_Credits_Call18:
000ADB01 D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000ADB0D D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000ADB15 E3                         	smpsReturn
000ADB16                            
000ADB16                            Mus91_Credits_Call05:
000ADB16 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000ADB22 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000ADB2E 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000ADB3A 0FCB 0C                    	dc.b	$0F, nD6, $0C
000ADB3D E3                         	smpsReturn
000ADB3E                            
000ADB3E                            Mus91_Credits_Voices:
000ADB3E                            ;	Voice $00
000ADB3E                            ;	$20
000ADB3E                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000ADB3E                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000ADB3E                            	smpsVcAlgorithm     $00
000ADB3E                            	smpsVcFeedback      $04
000ADB3E                            	smpsVcUnusedBits    $00
000ADB3E                            	smpsVcDetune        $03, $03, $03, $03
000ADB3E                            	smpsVcCoarseFreq    $01, $00, $05, $06
000ADB3E                            	smpsVcRateScale     $02, $02, $03, $03
000ADB3E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADB3E                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB3E                            	smpsVcDecayRate1    $06, $09, $06, $07
000ADB3E                            	smpsVcDecayRate2    $08, $06, $06, $07
000ADB3E                            	smpsVcDecayLevel    $0F, $01, $01, $02
000ADB3E                            	smpsVcReleaseRate   $08, $00, $00, $00
000ADB3E 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000ADB57                            
000ADB57                            ;	Voice $01
000ADB57                            ;	$2C
000ADB57                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000ADB57                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000ADB57                            	smpsVcAlgorithm     $04
000ADB57                            	smpsVcFeedback      $05
000ADB57                            	smpsVcUnusedBits    $00
000ADB57                            	smpsVcDetune        $03, $03, $07, $07
000ADB57                            	smpsVcCoarseFreq    $04, $04, $08, $02
000ADB57                            	smpsVcRateScale     $00, $00, $00, $00
000ADB57                            	smpsVcAttackRate    $12, $1F, $12, $1F
000ADB57                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB57                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000ADB57                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADB57                            	smpsVcDecayLevel    $01, $00, $01, $00
000ADB57                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB57 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADB70                            
000ADB70                            ;	Voice $02
000ADB70                            ;	$2C
000ADB70                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000ADB70                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000ADB70                            	smpsVcAlgorithm     $04
000ADB70                            	smpsVcFeedback      $05
000ADB70                            	smpsVcUnusedBits    $00
000ADB70                            	smpsVcDetune        $03, $03, $07, $07
000ADB70                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADB70                            	smpsVcRateScale     $00, $00, $00, $00
000ADB70                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000ADB70                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB70                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADB70                            	smpsVcDecayRate2    $01, $00, $01, $00
000ADB70                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADB70                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB70 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADB89                            
000ADB89                            ;	Voice $03
000ADB89                            ;	$04
000ADB89                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000ADB89                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000ADB89                            	smpsVcAlgorithm     $04
000ADB89                            	smpsVcFeedback      $00
000ADB89                            	smpsVcUnusedBits    $00
000ADB89                            	smpsVcDetune        $03, $03, $04, $07
000ADB89                            	smpsVcCoarseFreq    $02, $02, $02, $02
000ADB89                            	smpsVcRateScale     $00, $00, $00, $00
000ADB89                            	smpsVcAttackRate    $12, $12, $12, $12
000ADB89                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB89                            	smpsVcDecayRate1    $08, $00, $08, $00
000ADB89                            	smpsVcDecayRate2    $08, $00, $08, $00
000ADB89                            	smpsVcDecayLevel    $01, $00, $01, $00
000ADB89                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB89 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADBA2                            
000ADBA2                            ;	Voice $04
000ADBA2                            ;	$2C
000ADBA2                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000ADBA2                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000ADBA2                            	smpsVcAlgorithm     $04
000ADBA2                            	smpsVcFeedback      $05
000ADBA2                            	smpsVcUnusedBits    $00
000ADBA2                            	smpsVcDetune        $03, $03, $07, $07
000ADBA2                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADBA2                            	smpsVcRateScale     $00, $00, $00, $00
000ADBA2                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000ADBA2                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBA2                            	smpsVcDecayRate1    $07, $00, $07, $00
000ADBA2                            	smpsVcDecayRate2    $07, $00, $07, $00
000ADBA2                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADBA2                            	smpsVcReleaseRate   $08, $00, $08, $00
000ADBA2 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADBBB                            
000ADBBB                            ;	Voice $05
000ADBBB                            ;	$31
000ADBBB                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000ADBBB                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000ADBBB                            	smpsVcAlgorithm     $01
000ADBBB                            	smpsVcFeedback      $06
000ADBBB                            	smpsVcUnusedBits    $00
000ADBBB                            	smpsVcDetune        $03, $03, $03, $03
000ADBBB                            	smpsVcCoarseFreq    $01, $00, $05, $04
000ADBBB                            	smpsVcRateScale     $02, $02, $03, $03
000ADBBB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADBBB                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBBB                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000ADBBB                            	smpsVcDecayRate2    $08, $07, $07, $07
000ADBBB                            	smpsVcDecayLevel    $02, $01, $01, $02
000ADBBB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBBB 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000ADBD4                            
000ADBD4                            ;	Voice $06
000ADBD4                            ;	$18
000ADBD4                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000ADBD4                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000ADBD4                            	smpsVcAlgorithm     $00
000ADBD4                            	smpsVcFeedback      $03
000ADBD4                            	smpsVcUnusedBits    $00
000ADBD4                            	smpsVcDetune        $03, $03, $03, $03
000ADBD4                            	smpsVcCoarseFreq    $01, $00, $00, $07
000ADBD4                            	smpsVcRateScale     $02, $00, $03, $02
000ADBD4                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000ADBD4                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBD4                            	smpsVcDecayRate1    $01, $04, $06, $0D
000ADBD4                            	smpsVcDecayRate2    $05, $03, $0A, $08
000ADBD4                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000ADBD4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBD4 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000ADBED                            
000ADBED                            ;	Voice $07
000ADBED                            ;	$3C
000ADBED                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000ADBED                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000ADBED                            	smpsVcAlgorithm     $04
000ADBED                            	smpsVcFeedback      $07
000ADBED                            	smpsVcUnusedBits    $00
000ADBED                            	smpsVcDetune        $03, $05, $05, $03
000ADBED                            	smpsVcCoarseFreq    $00, $00, $02, $01
000ADBED                            	smpsVcRateScale     $01, $01, $01, $01
000ADBED                            	smpsVcAttackRate    $13, $12, $13, $12
000ADBED                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBED                            	smpsVcDecayRate1    $00, $08, $00, $08
000ADBED                            	smpsVcDecayRate2    $00, $04, $00, $04
000ADBED                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADBED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBED 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000ADC06                            
000ADC06                            ;	Voice $08
000ADC06                            ;	$22
000ADC06                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000ADC06                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000ADC06                            	smpsVcAlgorithm     $02
000ADC06                            	smpsVcFeedback      $04
000ADC06                            	smpsVcUnusedBits    $00
000ADC06                            	smpsVcDetune        $01, $00, $01, $00
000ADC06                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000ADC06                            	smpsVcRateScale     $00, $00, $00, $00
000ADC06                            	smpsVcAttackRate    $11, $12, $12, $03
000ADC06                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC06                            	smpsVcDecayRate1    $00, $13, $13, $00
000ADC06                            	smpsVcDecayRate2    $01, $02, $02, $03
000ADC06                            	smpsVcDecayLevel    $00, $00, $01, $01
000ADC06                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC06 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000ADC1F                            
000ADC1F                            ;	Voice $09
000ADC1F                            ;	$3A
000ADC1F                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000ADC1F                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000ADC1F                            	smpsVcAlgorithm     $02
000ADC1F                            	smpsVcFeedback      $07
000ADC1F                            	smpsVcUnusedBits    $00
000ADC1F                            	smpsVcDetune        $03, $01, $03, $06
000ADC1F                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000ADC1F                            	smpsVcRateScale     $03, $02, $03, $02
000ADC1F                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000ADC1F                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC1F                            	smpsVcDecayRate1    $03, $04, $09, $04
000ADC1F                            	smpsVcDecayRate2    $00, $03, $01, $03
000ADC1F                            	smpsVcDecayLevel    $0A, $00, $00, $01
000ADC1F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC1F 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000ADC38                            
000ADC38                            ;	Voice $0A
000ADC38                            ;	$3A
000ADC38                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADC38                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADC38                            	smpsVcAlgorithm     $02
000ADC38                            	smpsVcFeedback      $07
000ADC38                            	smpsVcUnusedBits    $00
000ADC38                            	smpsVcDetune        $00, $00, $00, $00
000ADC38                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADC38                            	smpsVcRateScale     $01, $02, $02, $02
000ADC38                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADC38                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC38                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADC38                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC38                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADC38                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC38 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADC51                            
000ADC51                            ;	Voice $0B
000ADC51                            ;	$34
000ADC51                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000ADC51                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000ADC51                            	smpsVcAlgorithm     $04
000ADC51                            	smpsVcFeedback      $06
000ADC51                            	smpsVcUnusedBits    $00
000ADC51                            	smpsVcDetune        $07, $07, $04, $03
000ADC51                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000ADC51                            	smpsVcRateScale     $00, $01, $02, $01
000ADC51                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000ADC51                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC51                            	smpsVcDecayRate1    $08, $07, $07, $04
000ADC51                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC51                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000ADC51                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC51 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000ADC6A                            
000ADC6A                            ;	Voice $0C
000ADC6A                            ;	$04
000ADC6A                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000ADC6A                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000ADC6A                            	smpsVcAlgorithm     $04
000ADC6A                            	smpsVcFeedback      $00
000ADC6A                            	smpsVcUnusedBits    $00
000ADC6A                            	smpsVcDetune        $03, $03, $04, $07
000ADC6A                            	smpsVcCoarseFreq    $02, $02, $02, $02
000ADC6A                            	smpsVcRateScale     $00, $00, $00, $00
000ADC6A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC6A                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC6A                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADC6A                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC6A                            	smpsVcDecayLevel    $00, $00, $00, $00
000ADC6A                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADC6A 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADC83                            
000ADC83                            ;	Voice $0D
000ADC83                            ;	$3C
000ADC83                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000ADC83                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000ADC83                            	smpsVcAlgorithm     $04
000ADC83                            	smpsVcFeedback      $07
000ADC83                            	smpsVcUnusedBits    $00
000ADC83                            	smpsVcDetune        $03, $07, $07, $03
000ADC83                            	smpsVcCoarseFreq    $03, $06, $04, $08
000ADC83                            	smpsVcRateScale     $00, $00, $00, $00
000ADC83                            	smpsVcAttackRate    $10, $10, $10, $10
000ADC83                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC83                            	smpsVcDecayRate1    $07, $04, $07, $02
000ADC83                            	smpsVcDecayRate2    $09, $03, $09, $03
000ADC83                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADC83                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC83 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000ADC9C                            
000ADC9C                            ;	Voice $0E
000ADC9C                            ;	$F4
000ADC9C                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000ADC9C                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000ADC9C                            	smpsVcAlgorithm     $04
000ADC9C                            	smpsVcFeedback      $06
000ADC9C                            	smpsVcUnusedBits    $03
000ADC9C                            	smpsVcDetune        $00, $00, $00, $00
000ADC9C                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000ADC9C                            	smpsVcRateScale     $00, $00, $00, $00
000ADC9C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC9C                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC9C                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000ADC9C                            	smpsVcDecayRate2    $08, $05, $00, $00
000ADC9C                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000ADC9C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC9C F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000ADCB5                            
000ADCB5                            ;	Voice $0F
000ADCB5                            ;	$29
000ADCB5                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000ADCB5                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000ADCB5                            	smpsVcAlgorithm     $01
000ADCB5                            	smpsVcFeedback      $05
000ADCB5                            	smpsVcUnusedBits    $00
000ADCB5                            	smpsVcDetune        $03, $07, $07, $03
000ADCB5                            	smpsVcCoarseFreq    $01, $01, $04, $06
000ADCB5                            	smpsVcRateScale     $00, $00, $00, $00
000ADCB5                            	smpsVcAttackRate    $1D, $05, $04, $04
000ADCB5                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCB5                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000ADCB5                            	smpsVcDecayRate2    $01, $03, $06, $04
000ADCB5                            	smpsVcDecayLevel    $00, $00, $06, $05
000ADCB5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCB5 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000ADCCE                            
000ADCCE                            ;	Voice $10
000ADCCE                            ;	$08
000ADCCE                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000ADCCE                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000ADCCE                            	smpsVcAlgorithm     $00
000ADCCE                            	smpsVcFeedback      $01
000ADCCE                            	smpsVcUnusedBits    $00
000ADCCE                            	smpsVcDetune        $00, $03, $07, $00
000ADCCE                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000ADCCE                            	smpsVcRateScale     $01, $01, $00, $00
000ADCCE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADCCE                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCCE                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000ADCCE                            	smpsVcDecayRate2    $03, $04, $04, $00
000ADCCE                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADCCE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCCE 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000ADCE7                            
000ADCE7                            ;	Voice $11
000ADCE7                            ;	$3D
000ADCE7                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000ADCE7                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000ADCE7                            	smpsVcAlgorithm     $05
000ADCE7                            	smpsVcFeedback      $07
000ADCE7                            	smpsVcUnusedBits    $00
000ADCE7                            	smpsVcDetune        $00, $00, $00, $00
000ADCE7                            	smpsVcCoarseFreq    $01, $01, $01, $01
000ADCE7                            	smpsVcRateScale     $01, $00, $01, $02
000ADCE7                            	smpsVcAttackRate    $0C, $14, $12, $0E
000ADCE7                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCE7                            	smpsVcDecayRate1    $03, $0E, $08, $08
000ADCE7                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADCE7                            	smpsVcDecayLevel    $01, $01, $01, $01
000ADCE7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCE7 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000ADD00                            
000ADD00                            ;	Voice $12
000ADD00                            ;	$3D
000ADD00                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000ADD00                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000ADD00                            	smpsVcAlgorithm     $05
000ADD00                            	smpsVcFeedback      $07
000ADD00                            	smpsVcUnusedBits    $00
000ADD00                            	smpsVcDetune        $00, $00, $00, $00
000ADD00                            	smpsVcCoarseFreq    $01, $00, $02, $01
000ADD00                            	smpsVcRateScale     $00, $00, $00, $00
000ADD00                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000ADD00                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD00                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000ADD00                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADD00                            	smpsVcDecayLevel    $00, $00, $00, $01
000ADD00                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD00 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000ADD19                            
000ADD19                            ;	Voice $13
000ADD19                            ;	$3C
000ADD19                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000ADD19                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000ADD19                            	smpsVcAlgorithm     $04
000ADD19                            	smpsVcFeedback      $07
000ADD19                            	smpsVcUnusedBits    $00
000ADD19                            	smpsVcDetune        $03, $05, $05, $03
000ADD19                            	smpsVcCoarseFreq    $00, $00, $02, $01
000ADD19                            	smpsVcRateScale     $01, $01, $01, $01
000ADD19                            	smpsVcAttackRate    $13, $12, $13, $12
000ADD19                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD19                            	smpsVcDecayRate1    $00, $08, $00, $08
000ADD19                            	smpsVcDecayRate2    $00, $04, $00, $04
000ADD19                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADD19                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADD19 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000ADD32                            
000ADD32                            ;	Voice $14
000ADD32                            ;	$18
000ADD32                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000ADD32                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000ADD32                            	smpsVcAlgorithm     $00
000ADD32                            	smpsVcFeedback      $03
000ADD32                            	smpsVcUnusedBits    $00
000ADD32                            	smpsVcDetune        $03, $03, $03, $03
000ADD32                            	smpsVcCoarseFreq    $01, $00, $00, $07
000ADD32                            	smpsVcRateScale     $02, $00, $03, $02
000ADD32                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000ADD32                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD32                            	smpsVcDecayRate1    $01, $04, $06, $0D
000ADD32                            	smpsVcDecayRate2    $05, $03, $0A, $08
000ADD32                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000ADD32                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD32 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000ADD4B                            
000ADD4B                            ;	Voice $15
000ADD4B                            ;	$3A
000ADD4B                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000ADD4B                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000ADD4B                            	smpsVcAlgorithm     $02
000ADD4B                            	smpsVcFeedback      $07
000ADD4B                            	smpsVcUnusedBits    $00
000ADD4B                            	smpsVcDetune        $00, $00, $00, $00
000ADD4B                            	smpsVcCoarseFreq    $02, $01, $01, $01
000ADD4B                            	smpsVcRateScale     $01, $00, $00, $02
000ADD4B                            	smpsVcAttackRate    $12, $07, $07, $0D
000ADD4B                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD4B                            	smpsVcDecayRate1    $03, $00, $00, $09
000ADD4B                            	smpsVcDecayRate2    $00, $02, $02, $01
000ADD4B                            	smpsVcDecayLevel    $02, $00, $00, $05
000ADD4B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD4B 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000ADD64                            
000ADD64                            ;	Voice $16
000ADD64                            ;	$2C
000ADD64                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000ADD64                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000ADD64                            	smpsVcAlgorithm     $04
000ADD64                            	smpsVcFeedback      $05
000ADD64                            	smpsVcUnusedBits    $00
000ADD64                            	smpsVcDetune        $03, $03, $07, $07
000ADD64                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADD64                            	smpsVcRateScale     $00, $00, $00, $00
000ADD64                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADD64                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD64                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADD64                            	smpsVcDecayRate2    $01, $00, $01, $00
000ADD64                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADD64                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD64 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADD7D                            
000ADD7D                            ;	Voice $17
000ADD7D                            ;	$04
000ADD7D                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000ADD7D                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000ADD7D                            	smpsVcAlgorithm     $04
000ADD7D                            	smpsVcFeedback      $00
000ADD7D                            	smpsVcUnusedBits    $00
000ADD7D                            	smpsVcDetune        $04, $07, $07, $03
000ADD7D                            	smpsVcCoarseFreq    $09, $07, $02, $07
000ADD7D                            	smpsVcRateScale     $00, $00, $00, $00
000ADD7D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADD7D                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD7D                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000ADD7D                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADD7D                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADD7D                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADD7D 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADD96                            
000ADD96                            ;	Voice $18
000ADD96                            ;	$3D
000ADD96                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000ADD96                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000ADD96                            	smpsVcAlgorithm     $05
000ADD96                            	smpsVcFeedback      $07
000ADD96                            	smpsVcUnusedBits    $00
000ADD96                            	smpsVcDetune        $00, $00, $00, $00
000ADD96                            	smpsVcCoarseFreq    $02, $02, $02, $01
000ADD96                            	smpsVcRateScale     $00, $02, $00, $00
000ADD96                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000ADD96                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD96                            	smpsVcDecayRate1    $05, $02, $05, $08
000ADD96                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADD96                            	smpsVcDecayLevel    $01, $01, $01, $01
000ADD96                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD96 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000ADDAF                            
000ADDAF                            ;	Voice $19
000ADDAF                            ;	$20
000ADDAF                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000ADDAF                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000ADDAF                            	smpsVcAlgorithm     $00
000ADDAF                            	smpsVcFeedback      $04
000ADDAF                            	smpsVcUnusedBits    $00
000ADDAF                            	smpsVcDetune        $03, $03, $03, $03
000ADDAF                            	smpsVcCoarseFreq    $01, $00, $05, $06
000ADDAF                            	smpsVcRateScale     $02, $02, $03, $03
000ADDAF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADDAF                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDAF                            	smpsVcDecayRate1    $06, $09, $06, $07
000ADDAF                            	smpsVcDecayRate2    $08, $06, $06, $07
000ADDAF                            	smpsVcDecayLevel    $0F, $01, $01, $02
000ADDAF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDAF 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000ADDC8                            
000ADDC8                            ;	Voice $1A
000ADDC8                            ;	$3A
000ADDC8                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000ADDC8                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000ADDC8                            	smpsVcAlgorithm     $02
000ADDC8                            	smpsVcFeedback      $07
000ADDC8                            	smpsVcUnusedBits    $00
000ADDC8                            	smpsVcDetune        $00, $05, $00, $05
000ADDC8                            	smpsVcCoarseFreq    $02, $01, $08, $01
000ADDC8                            	smpsVcRateScale     $00, $00, $00, $00
000ADDC8                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000ADDC8                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDC8                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000ADDC8                            	smpsVcDecayRate2    $02, $00, $00, $00
000ADDC8                            	smpsVcDecayLevel    $01, $00, $00, $00
000ADDC8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDC8 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000ADDE1                            
000ADDE1                            ;	Voice $1B
000ADDE1                            ;	$3A
000ADDE1                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000ADDE1                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000ADDE1                            	smpsVcAlgorithm     $02
000ADDE1                            	smpsVcFeedback      $07
000ADDE1                            	smpsVcUnusedBits    $00
000ADDE1                            	smpsVcDetune        $04, $03, $05, $03
000ADDE1                            	smpsVcCoarseFreq    $02, $02, $06, $02
000ADDE1                            	smpsVcRateScale     $01, $00, $01, $02
000ADDE1                            	smpsVcAttackRate    $12, $15, $0F, $0D
000ADDE1                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDE1                            	smpsVcDecayRate1    $04, $07, $08, $06
000ADDE1                            	smpsVcDecayRate2    $00, $00, $00, $02
000ADDE1                            	smpsVcDecayLevel    $02, $02, $01, $01
000ADDE1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDE1 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000ADDFA                            
000ADDFA                            ;	Voice $1C
000ADDFA                            ;	$3A
000ADDFA                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADDFA                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADDFA                            	smpsVcAlgorithm     $02
000ADDFA                            	smpsVcFeedback      $07
000ADDFA                            	smpsVcUnusedBits    $00
000ADDFA                            	smpsVcDetune        $00, $00, $00, $00
000ADDFA                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADDFA                            	smpsVcRateScale     $01, $02, $02, $02
000ADDFA                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADDFA                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDFA                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADDFA                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADDFA                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADDFA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDFA 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADE13                            
000ADE13                            ;	Voice $1D
000ADE13                            ;	$08
000ADE13                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000ADE13                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000ADE13                            	smpsVcAlgorithm     $00
000ADE13                            	smpsVcFeedback      $01
000ADE13                            	smpsVcUnusedBits    $00
000ADE13                            	smpsVcDetune        $00, $03, $07, $00
000ADE13                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000ADE13                            	smpsVcRateScale     $01, $01, $00, $00
000ADE13                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE13                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE13                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000ADE13                            	smpsVcDecayRate2    $03, $04, $04, $00
000ADE13                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADE13                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE13 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000ADE2C                            
000ADE2C                            ;	Voice $1E
000ADE2C                            ;	$3A
000ADE2C                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADE2C                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADE2C                            	smpsVcAlgorithm     $02
000ADE2C                            	smpsVcFeedback      $07
000ADE2C                            	smpsVcUnusedBits    $00
000ADE2C                            	smpsVcDetune        $00, $00, $00, $00
000ADE2C                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADE2C                            	smpsVcRateScale     $01, $02, $02, $02
000ADE2C                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADE2C                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE2C                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADE2C                            	smpsVcDecayRate2    $07, $00, $00, $00
000ADE2C                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADE2C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE2C 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADE45                            
000ADE45                            ;	Voice $1F
000ADE45                            ;	$36
000ADE45                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000ADE45                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000ADE45                            	smpsVcAlgorithm     $06
000ADE45                            	smpsVcFeedback      $06
000ADE45                            	smpsVcUnusedBits    $00
000ADE45                            	smpsVcDetune        $00, $00, $00, $00
000ADE45                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000ADE45                            	smpsVcRateScale     $00, $00, $00, $00
000ADE45                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE45                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE45                            	smpsVcDecayRate1    $00, $0E, $11, $12
000ADE45                            	smpsVcDecayRate2    $09, $07, $0A, $00
000ADE45                            	smpsVcDecayLevel    $00, $01, $00, $0F
000ADE45                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE45 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000ADE5E                            
000ADE5E                            ;	Voice $20
000ADE5E                            ;	$3A
000ADE5E                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000ADE5E                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000ADE5E                            	smpsVcAlgorithm     $02
000ADE5E                            	smpsVcFeedback      $07
000ADE5E                            	smpsVcUnusedBits    $00
000ADE5E                            	smpsVcDetune        $05, $00, $01, $00
000ADE5E                            	smpsVcCoarseFreq    $03, $01, $09, $03
000ADE5E                            	smpsVcRateScale     $02, $00, $03, $00
000ADE5E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE5E                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE5E                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000ADE5E                            	smpsVcDecayRate2    $07, $04, $04, $04
000ADE5E                            	smpsVcDecayLevel    $02, $00, $0F, $01
000ADE5E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE5E 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000ADE77                            
000ADE77                            
000ADE78 00                         		even
000ADE78                            Music92:	incbin	sound\music92.bin ; Drowning
000AE1BA 00                         		even
000AE1BA                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000AE28A                            		even
000AE28A                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000AEF60 00                         		even
000AEF60                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000AF0B0 00                         		even
000AF0B0                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000AF0EA 00                         		even
000AF0EA                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000AF452                            		even
000AF452                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000AF48C 00                         		even
000AF48C                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000AF4C6 00                         		even
000AF4C6                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000AF500 00                         		even
000AF500                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000AF53A 00                         		even
000AF53A                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000AF574 00                         		even
000AF574                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000AF5AE 00                         		even
000AF5AE                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000AFA9E                            		even
000AFA9E                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000AFA9E                            GentleBreeze_Header:
000AFA9E =00000001                  smpsHeaderStartSong = 1
000AFA9E 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000AFAA0 0603                       	smpsHeaderChan      $06, $03
000AFAA2 0100                       	smpsHeaderTempo     $01, $00
000AFAA4                            
000AFAA8 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000AFAAC 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000AFAB0 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000AFAB4 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000AFAB8 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000AFABC 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000AFAC2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000AFAC8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000AFACE                            
000AFACE                            ; PSG3 Data
000AFACE                            GentleBreeze_PSG3:
000AFACE F2                         	smpsStop
000AFACF                            
000AFACF                            ; FM1 Data
000AFACF                            GentleBreeze_FM1:
000AFAD1 E0C0                       	smpsPan             panCenter, $00
000AFAD3 E1FF                       	smpsAlterNote       $FF
000AFAD5 C410                       	dc.b	nG5, $10
000AFAD7 E60F                       	smpsAlterVol        $0F
000AFAD9 C4                         	dc.b	nG5
000AFADA E6F1                       	smpsAlterVol        $F1
000AFADC E100                       	smpsAlterNote       $00
000AFADE C2                         	dc.b	nF5
000AFADF E60F                       	smpsAlterVol        $0F
000AFAE1 08                         	dc.b	$08
000AFAE2 E6F1                       	smpsAlterVol        $F1
000AFAE4 C010                       	dc.b	nEb5, $10
000AFAE6 E60F                       	smpsAlterVol        $0F
000AFAE8 C0                         	dc.b	nEb5
000AFAE9 E6F1                       	smpsAlterVol        $F1
000AFAEB BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFAF1 E60F                       	smpsAlterVol        $0F
000AFAF3 C9                         	dc.b	nC6
000AFAF4 E6F1                       	smpsAlterVol        $F1
000AFAF6 C5                         	dc.b	nAb5
000AFAF7 E60F                       	smpsAlterVol        $0F
000AFAF9 08                         	dc.b	$08
000AFAFA E6F1                       	smpsAlterVol        $F1
000AFAFC C010                       	dc.b	nEb5, $10
000AFAFE E60F                       	smpsAlterVol        $0F
000AFB00 C0                         	dc.b	nEb5
000AFB01 E6F1                       	smpsAlterVol        $F1
000AFB03 C208                       	dc.b	nF5, $08
000AFB05 E1FF                       	smpsAlterNote       $FF
000AFB07 C410                       	dc.b	nG5, $10
000AFB09 E100                       	smpsAlterNote       $00
000AFB0B C5C7                       	dc.b	nAb5, nBb5
000AFB0D E60F                       	smpsAlterVol        $0F
000AFB0F C7                         	dc.b	nBb5
000AFB10 E6F1                       	smpsAlterVol        $F1
000AFB12 C5                         	dc.b	nAb5
000AFB13 E60F                       	smpsAlterVol        $0F
000AFB15 08                         	dc.b	$08
000AFB16 E6F1                       	smpsAlterVol        $F1
000AFB18 E1FF                       	smpsAlterNote       $FF
000AFB1A C410                       	dc.b	nG5, $10
000AFB1C E60F                       	smpsAlterVol        $0F
000AFB1E C4                         	dc.b	nG5
000AFB1F E6F1                       	smpsAlterVol        $F1
000AFB21 C4                         	dc.b	nG5
000AFB22 E100                       	smpsAlterNote       $00
000AFB24 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFB29 E60F                       	smpsAlterVol        $0F
000AFB2B C2                         	dc.b	nF5
000AFB2C E6F1                       	smpsAlterVol        $F1
000AFB2E E1FF                       	smpsAlterNote       $FF
000AFB30 C4                         	dc.b	nG5
000AFB31 E60F                       	smpsAlterVol        $0F
000AFB33 08                         	dc.b	$08
000AFB34 E6F1                       	smpsAlterVol        $F1
000AFB36 10                         	dc.b	$10
000AFB37 E60F                       	smpsAlterVol        $0F
000AFB39 38                         	dc.b	$38
000AFB3A E6F1                       	smpsAlterVol        $F1
000AFB3C 10                         	dc.b	$10
000AFB3D E60F                       	smpsAlterVol        $0F
000AFB3F C4                         	dc.b	nG5
000AFB40 E6F1                       	smpsAlterVol        $F1
000AFB42 E100                       	smpsAlterNote       $00
000AFB44 C2                         	dc.b	nF5
000AFB45 E60F                       	smpsAlterVol        $0F
000AFB47 08                         	dc.b	$08
000AFB48 E6F1                       	smpsAlterVol        $F1
000AFB4A C010                       	dc.b	nEb5, $10
000AFB4C E60F                       	smpsAlterVol        $0F
000AFB4E C0                         	dc.b	nEb5
000AFB4F E6F1                       	smpsAlterVol        $F1
000AFB51 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFB57 E60F                       	smpsAlterVol        $0F
000AFB59 C9                         	dc.b	nC6
000AFB5A E6F1                       	smpsAlterVol        $F1
000AFB5C C5                         	dc.b	nAb5
000AFB5D E60F                       	smpsAlterVol        $0F
000AFB5F 08                         	dc.b	$08
000AFB60 E6F1                       	smpsAlterVol        $F1
000AFB62 C010                       	dc.b	nEb5, $10
000AFB64 E60F                       	smpsAlterVol        $0F
000AFB66 C0                         	dc.b	nEb5
000AFB67 E6F1                       	smpsAlterVol        $F1
000AFB69 C208                       	dc.b	nF5, $08
000AFB6B E1FF                       	smpsAlterNote       $FF
000AFB6D C410                       	dc.b	nG5, $10
000AFB6F E100                       	smpsAlterNote       $00
000AFB71 C5C7                       	dc.b	nAb5, nBb5
000AFB73 E60F                       	smpsAlterVol        $0F
000AFB75 C7                         	dc.b	nBb5
000AFB76 E6F1                       	smpsAlterVol        $F1
000AFB78 C5                         	dc.b	nAb5
000AFB79 E60F                       	smpsAlterVol        $0F
000AFB7B 08                         	dc.b	$08
000AFB7C E6F1                       	smpsAlterVol        $F1
000AFB7E E1FF                       	smpsAlterNote       $FF
000AFB80 C410                       	dc.b	nG5, $10
000AFB82 E60F                       	smpsAlterVol        $0F
000AFB84 C4                         	dc.b	nG5
000AFB85 E6F1                       	smpsAlterVol        $F1
000AFB87 C4                         	dc.b	nG5
000AFB88 E100                       	smpsAlterNote       $00
000AFB8A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFB8F E60F                       	smpsAlterVol        $0F
000AFB91 28                         	dc.b	$28
000AFB92 E6F1                       	smpsAlterVol        $F1
000AFB94 C008 10                    	dc.b	nEb5, $08, $10
000AFB97 E60F                       	smpsAlterVol        $0F
000AFB99 21                         	dc.b	$21
000AFB9A                            
000AFB9A                            GentleBreeze_Loop12:
000AFB9A E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000AFB9D F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000AFBA2 E717                       	dc.b	smpsNoAttack, $17
000AFBA4 E6F1                       	smpsAlterVol        $F1
000AFBA6 E1FF                       	smpsAlterNote       $FF
000AFBA8 C410                       	dc.b	nG5, $10
000AFBAA E60F                       	smpsAlterVol        $0F
000AFBAC C4                         	dc.b	nG5
000AFBAD E6F1                       	smpsAlterVol        $F1
000AFBAF E100                       	smpsAlterNote       $00
000AFBB1 C2                         	dc.b	nF5
000AFBB2 E60F                       	smpsAlterVol        $0F
000AFBB4 08                         	dc.b	$08
000AFBB5 E6F1                       	smpsAlterVol        $F1
000AFBB7 C010                       	dc.b	nEb5, $10
000AFBB9 E60F                       	smpsAlterVol        $0F
000AFBBB C0                         	dc.b	nEb5
000AFBBC E6F1                       	smpsAlterVol        $F1
000AFBBE BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFBC4 E60F                       	smpsAlterVol        $0F
000AFBC6 C9                         	dc.b	nC6
000AFBC7 E6F1                       	smpsAlterVol        $F1
000AFBC9 C5                         	dc.b	nAb5
000AFBCA E60F                       	smpsAlterVol        $0F
000AFBCC 08                         	dc.b	$08
000AFBCD E6F1                       	smpsAlterVol        $F1
000AFBCF C010                       	dc.b	nEb5, $10
000AFBD1 E60F                       	smpsAlterVol        $0F
000AFBD3 C0                         	dc.b	nEb5
000AFBD4 E6F1                       	smpsAlterVol        $F1
000AFBD6 C208                       	dc.b	nF5, $08
000AFBD8 E1FF                       	smpsAlterNote       $FF
000AFBDA C410                       	dc.b	nG5, $10
000AFBDC E100                       	smpsAlterNote       $00
000AFBDE C5C7                       	dc.b	nAb5, nBb5
000AFBE0 E60F                       	smpsAlterVol        $0F
000AFBE2 C7                         	dc.b	nBb5
000AFBE3 E6F1                       	smpsAlterVol        $F1
000AFBE5 C5                         	dc.b	nAb5
000AFBE6 E60F                       	smpsAlterVol        $0F
000AFBE8 08                         	dc.b	$08
000AFBE9 E6F1                       	smpsAlterVol        $F1
000AFBEB E1FF                       	smpsAlterNote       $FF
000AFBED C410                       	dc.b	nG5, $10
000AFBEF E60F                       	smpsAlterVol        $0F
000AFBF1 C4                         	dc.b	nG5
000AFBF2 E6F1                       	smpsAlterVol        $F1
000AFBF4 C4                         	dc.b	nG5
000AFBF5 E100                       	smpsAlterNote       $00
000AFBF7 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFBFC E60F                       	smpsAlterVol        $0F
000AFBFE C2                         	dc.b	nF5
000AFBFF E6F1                       	smpsAlterVol        $F1
000AFC01 E1FF                       	smpsAlterNote       $FF
000AFC03 C4                         	dc.b	nG5
000AFC04 E60F                       	smpsAlterVol        $0F
000AFC06 08                         	dc.b	$08
000AFC07 E6F1                       	smpsAlterVol        $F1
000AFC09 10                         	dc.b	$10
000AFC0A E60F                       	smpsAlterVol        $0F
000AFC0C 38                         	dc.b	$38
000AFC0D E6F1                       	smpsAlterVol        $F1
000AFC0F 10                         	dc.b	$10
000AFC10 E60F                       	smpsAlterVol        $0F
000AFC12 C4                         	dc.b	nG5
000AFC13 E6F1                       	smpsAlterVol        $F1
000AFC15 E100                       	smpsAlterNote       $00
000AFC17 C2                         	dc.b	nF5
000AFC18 E60F                       	smpsAlterVol        $0F
000AFC1A 08                         	dc.b	$08
000AFC1B E6F1                       	smpsAlterVol        $F1
000AFC1D C010                       	dc.b	nEb5, $10
000AFC1F E60F                       	smpsAlterVol        $0F
000AFC21 C0                         	dc.b	nEb5
000AFC22 E6F1                       	smpsAlterVol        $F1
000AFC24 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFC2A E60F                       	smpsAlterVol        $0F
000AFC2C C9                         	dc.b	nC6
000AFC2D E6F1                       	smpsAlterVol        $F1
000AFC2F C5                         	dc.b	nAb5
000AFC30 E60F                       	smpsAlterVol        $0F
000AFC32 08                         	dc.b	$08
000AFC33 E6F1                       	smpsAlterVol        $F1
000AFC35 C010                       	dc.b	nEb5, $10
000AFC37 E60F                       	smpsAlterVol        $0F
000AFC39 C0                         	dc.b	nEb5
000AFC3A E6F1                       	smpsAlterVol        $F1
000AFC3C C208                       	dc.b	nF5, $08
000AFC3E E1FF                       	smpsAlterNote       $FF
000AFC40 C410                       	dc.b	nG5, $10
000AFC42 E100                       	smpsAlterNote       $00
000AFC44 C5C7                       	dc.b	nAb5, nBb5
000AFC46 E60F                       	smpsAlterVol        $0F
000AFC48 C7                         	dc.b	nBb5
000AFC49 E6F1                       	smpsAlterVol        $F1
000AFC4B C5                         	dc.b	nAb5
000AFC4C E60F                       	smpsAlterVol        $0F
000AFC4E 08                         	dc.b	$08
000AFC4F E6F1                       	smpsAlterVol        $F1
000AFC51 E1FF                       	smpsAlterNote       $FF
000AFC53 C410                       	dc.b	nG5, $10
000AFC55 E60F                       	smpsAlterVol        $0F
000AFC57 C4                         	dc.b	nG5
000AFC58 E6F1                       	smpsAlterVol        $F1
000AFC5A C4                         	dc.b	nG5
000AFC5B E100                       	smpsAlterNote       $00
000AFC5D C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFC62 E60F                       	smpsAlterVol        $0F
000AFC64 28                         	dc.b	$28
000AFC65 E6F1                       	smpsAlterVol        $F1
000AFC67 C008 10                    	dc.b	nEb5, $08, $10
000AFC6A E60F                       	smpsAlterVol        $0F
000AFC6C 21                         	dc.b	$21
000AFC6D E0C0                       	smpsPan             panCenter, $00
000AFC6F F6FF 29                    	smpsJump            GentleBreeze_Loop12
000AFC72                            
000AFC72                            ; FM2 Data
000AFC72                            GentleBreeze_FM2:
000AFC74 E60C                       	smpsAlterVol        $0C
000AFC76 E0C0                       	smpsPan             panCenter, $00
000AFC78 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000AFC84 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000AFC90 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000AFC9C 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000AFCA8 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000AFCB4 A039                       	dc.b	nG2, $39
000AFCB6                            
000AFCB6                            GentleBreeze_Jump04:
000AFCB6 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000AFCB9                            
000AFCB9                            GentleBreeze_Loop11:
000AFCB9 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000AFCC5 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000AFCD1 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000AFCDD 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000AFCE9 A3                         	dc.b	nBb2
000AFCEA F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000AFCEF 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000AFCFB A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000AFD07 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000AFD13 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000AFD1F 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000AFD2B A039                       	dc.b	nG2, $39
000AFD2D E0C0                       	smpsPan             panCenter, $00
000AFD2F F6FF 85                    	smpsJump            GentleBreeze_Jump04
000AFD32                            
000AFD32                            ; FM3 Data
000AFD32                            GentleBreeze_FM3:
000AFD34 E0C0                       	smpsPan             panCenter, $00
000AFD36 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000AFD3E E616                       	smpsAlterVol        $16
000AFD40 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000AFD45                            
000AFD45                            GentleBreeze_Loop0F:
000AFD45 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000AFD49 E1FF                       	smpsAlterNote       $FF
000AFD4B C4                         	dc.b	nG5
000AFD4C E100                       	smpsAlterNote       $00
000AFD4E C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFD53 E608                       	smpsAlterVol        $08
000AFD55 C080 08                    	dc.b	nEb5, nRst, $08
000AFD58 E6F8                       	smpsAlterVol        $F8
000AFD5A C7                         	dc.b	nBb5
000AFD5B E1FF                       	smpsAlterNote       $FF
000AFD5D C4                         	dc.b	nG5
000AFD5E E100                       	smpsAlterNote       $00
000AFD60 C0BB                       	dc.b	nEb5, nBb4
000AFD62 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000AFD67 C0BD C9                    	dc.b	nEb5, nC5, nC6
000AFD6A E1FF                       	smpsAlterNote       $FF
000AFD6C C4                         	dc.b	nG5
000AFD6D E100                       	smpsAlterNote       $00
000AFD6F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFD74 E608                       	smpsAlterVol        $08
000AFD76 C080 08                    	dc.b	nEb5, nRst, $08
000AFD79 E6F8                       	smpsAlterVol        $F8
000AFD7B E1FF                       	smpsAlterNote       $FF
000AFD7D C4                         	dc.b	nG5
000AFD7E E100                       	smpsAlterNote       $00
000AFD80 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AFD87 E1FF                       	smpsAlterNote       $FF
000AFD89 C4                         	dc.b	nG5
000AFD8A E100                       	smpsAlterNote       $00
000AFD8C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AFD91 E1FF                       	smpsAlterNote       $FF
000AFD93 C4                         	dc.b	nG5
000AFD94 E100                       	smpsAlterNote       $00
000AFD96 C7                         	dc.b	nBb5
000AFD97 E1FF                       	smpsAlterNote       $FF
000AFD99 C4                         	dc.b	nG5
000AFD9A E100                       	smpsAlterNote       $00
000AFD9C C2C0 01                    	dc.b	nF5, nEb5, $01
000AFD9F                            
000AFD9F                            GentleBreeze_Jump03:
000AFD9F E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000AFDA6 E6FA                       	smpsAlterVol        $FA
000AFDA8 F4                         	smpsModOff
000AFDA9 E1FF                       	smpsAlterNote       $FF
000AFDAB B850                       	dc.b	nG4, $50
000AFDAD E100                       	smpsAlterNote       $00
000AFDAF B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000AFDBB E1FF                       	smpsAlterNote       $FF
000AFDBD B810                       	dc.b	nG4, $10
000AFDBF E100                       	smpsAlterNote       $00
000AFDC1 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000AFDC6 E1FF                       	smpsAlterNote       $FF
000AFDC8 B8                         	dc.b	nG4
000AFDC9 E100                       	smpsAlterNote       $00
000AFDCB B610                       	dc.b	nF4, $10
000AFDCD E1FF                       	smpsAlterNote       $FF
000AFDCF B850                       	dc.b	nG4, $50
000AFDD1 E100                       	smpsAlterNote       $00
000AFDD3 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000AFDDB E1FF                       	smpsAlterNote       $FF
000AFDDD AC08                       	dc.b	nG3, $08
000AFDDF E100                       	smpsAlterNote       $00
000AFDE1 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000AFDE6 E1FF                       	smpsAlterNote       $FF
000AFDE8 B850                       	dc.b	nG4, $50
000AFDEA E100                       	smpsAlterNote       $00
000AFDEC BB08                       	dc.b	nBb4, $08
000AFDEE E1FF                       	smpsAlterNote       $FF
000AFDF0 B8                         	dc.b	nG4
000AFDF1 E100                       	smpsAlterNote       $00
000AFDF3 BDBB B6                    	dc.b	nC5, nBb4, nF4
000AFDF6 E1FF                       	smpsAlterNote       $FF
000AFDF8 B810 08                    	dc.b	nG4, $10, $08
000AFDFB E100                       	smpsAlterNote       $00
000AFDFD B6                         	dc.b	nF4
000AFDFE E1FF                       	smpsAlterNote       $FF
000AFE00 B880                       	dc.b	nG4, nRst
000AFE02 E100                       	smpsAlterNote       $00
000AFE04 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000AFE07 E1FF                       	smpsAlterNote       $FF
000AFE09 B810                       	dc.b	nG4, $10
000AFE0B E100                       	smpsAlterNote       $00
000AFE0D B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000AFE14 E1FF                       	smpsAlterNote       $FF
000AFE16 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000AFE24 E606                       	smpsAlterVol        $06
000AFE26 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000AFE2B E100                       	smpsAlterNote       $00
000AFE2D                            
000AFE2D                            GentleBreeze_Loop10:
000AFE2D C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000AFE31 E1FF                       	smpsAlterNote       $FF
000AFE33 C4                         	dc.b	nG5
000AFE34 E100                       	smpsAlterNote       $00
000AFE36 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFE3B E608                       	smpsAlterVol        $08
000AFE3D C080 08                    	dc.b	nEb5, nRst, $08
000AFE40 E6F8                       	smpsAlterVol        $F8
000AFE42 C7                         	dc.b	nBb5
000AFE43 E1FF                       	smpsAlterNote       $FF
000AFE45 C4                         	dc.b	nG5
000AFE46 E100                       	smpsAlterNote       $00
000AFE48 C0BB                       	dc.b	nEb5, nBb4
000AFE4A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000AFE4F C0BD C9                    	dc.b	nEb5, nC5, nC6
000AFE52 E1FF                       	smpsAlterNote       $FF
000AFE54 C4                         	dc.b	nG5
000AFE55 E100                       	smpsAlterNote       $00
000AFE57 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFE5C E608                       	smpsAlterVol        $08
000AFE5E C080 08                    	dc.b	nEb5, nRst, $08
000AFE61 E6F8                       	smpsAlterVol        $F8
000AFE63 E1FF                       	smpsAlterNote       $FF
000AFE65 C4                         	dc.b	nG5
000AFE66 E100                       	smpsAlterNote       $00
000AFE68 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AFE6F E1FF                       	smpsAlterNote       $FF
000AFE71 C4                         	dc.b	nG5
000AFE72 E100                       	smpsAlterNote       $00
000AFE74 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AFE79 E1FF                       	smpsAlterNote       $FF
000AFE7B C4                         	dc.b	nG5
000AFE7C E100                       	smpsAlterNote       $00
000AFE7E C7                         	dc.b	nBb5
000AFE7F E1FF                       	smpsAlterNote       $FF
000AFE81 C4                         	dc.b	nG5
000AFE82 E100                       	smpsAlterNote       $00
000AFE84 C2C0 01                    	dc.b	nF5, nEb5, $01
000AFE87 E0C0                       	smpsPan             panCenter, $00
000AFE89 F1                         	smpsModOn
000AFE8A F6FF 13                    	smpsJump            GentleBreeze_Jump03
000AFE8D                            
000AFE8D                            ; FM4 Data
000AFE8D                            GentleBreeze_FM4:
000AFE8F E0C0                       	smpsPan             panCenter, $00
000AFE91 80                         	dc.b	nRst
000AFE92                            
000AFE92                            GentleBreeze_Loop0D:
000AFE92 7F                         	dc.b	$7F
000AFE93 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000AFE98 77                         	dc.b	$77
000AFE9B E609                       	smpsAlterVol        $09
000AFE9D C001                       	dc.b	nEb5, $01
000AFE9F                            
000AFE9F                            GentleBreeze_Jump02:
000AFE9F E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000AFEA4 E607                       	smpsAlterVol        $07
000AFEA6 E1FF                       	smpsAlterNote       $FF
000AFEA8 C450                       	dc.b	nG5, $50
000AFEAA E100                       	smpsAlterNote       $00
000AFEAC C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000AFEB8 E1FF                       	smpsAlterNote       $FF
000AFEBA C410                       	dc.b	nG5, $10
000AFEBC E100                       	smpsAlterNote       $00
000AFEBE C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000AFEC3 E1FF                       	smpsAlterNote       $FF
000AFEC5 C4                         	dc.b	nG5
000AFEC6 E100                       	smpsAlterNote       $00
000AFEC8 C210                       	dc.b	nF5, $10
000AFECA E1FF                       	smpsAlterNote       $FF
000AFECC C450                       	dc.b	nG5, $50
000AFECE E100                       	smpsAlterNote       $00
000AFED0 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000AFED8 E1FF                       	smpsAlterNote       $FF
000AFEDA B808                       	dc.b	nG4, $08
000AFEDC E100                       	smpsAlterNote       $00
000AFEDE BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000AFEE3 E1FF                       	smpsAlterNote       $FF
000AFEE5 C450                       	dc.b	nG5, $50
000AFEE7 E100                       	smpsAlterNote       $00
000AFEE9 C708                       	dc.b	nBb5, $08
000AFEEB E1FF                       	smpsAlterNote       $FF
000AFEED C4                         	dc.b	nG5
000AFEEE E100                       	smpsAlterNote       $00
000AFEF0 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000AFEF3 E1FF                       	smpsAlterNote       $FF
000AFEF5 C410 08                    	dc.b	nG5, $10, $08
000AFEF8 E100                       	smpsAlterNote       $00
000AFEFA C2                         	dc.b	nF5
000AFEFB E1FF                       	smpsAlterNote       $FF
000AFEFD C480                       	dc.b	nG5, nRst
000AFEFF E100                       	smpsAlterNote       $00
000AFF01 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000AFF04 E1FF                       	smpsAlterNote       $FF
000AFF06 C410                       	dc.b	nG5, $10
000AFF08 E100                       	smpsAlterNote       $00
000AFF0A BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000AFF11 E1FF                       	smpsAlterNote       $FF
000AFF13 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000AFF1B                            
000AFF1B                            GentleBreeze_Loop0E:
000AFF1B 7F                         	dc.b	$7F
000AFF1C F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000AFF21 77                         	dc.b	$77
000AFF22 E100                       	smpsAlterNote       $00
000AFF24 C001                       	dc.b	nEb5, $01
000AFF26 E6F9                       	smpsAlterVol        $F9
000AFF28 E0C0                       	smpsPan             panCenter, $00
000AFF2A E100                       	smpsAlterNote       $00
000AFF2C F6FF 71                    	smpsJump            GentleBreeze_Jump02
000AFF2F                            
000AFF2F                            ; FM5 Data
000AFF2F                            GentleBreeze_FM5:
000AFF31 E0C0                       	smpsPan             panCenter, $00
000AFF33 A5                         	dc.b	nC3
000AFF34                            
000AFF34                            GentleBreeze_Loop06:
000AFF34 10                         	dc.b	$10
000AFF35 E607                       	smpsAlterVol        $07
000AFF37 A5                         	dc.b	nC3
000AFF38 E6F9                       	smpsAlterVol        $F9
000AFF3A 08                         	dc.b	$08
000AFF3B E607                       	smpsAlterVol        $07
000AFF3D A5                         	dc.b	nC3
000AFF3E E608                       	smpsAlterVol        $08
000AFF40 A5                         	dc.b	nC3
000AFF41 E6F1                       	smpsAlterVol        $F1
000AFF43 18                         	dc.b	$18
000AFF44 E607                       	smpsAlterVol        $07
000AFF46 10                         	dc.b	$10
000AFF47 E608                       	smpsAlterVol        $08
000AFF49 A5                         	dc.b	nC3
000AFF4A E6F1                       	smpsAlterVol        $F1
000AFF4C A5                         	dc.b	nC3
000AFF4D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000AFF52 A5                         	dc.b	nC3
000AFF53                            
000AFF53                            GentleBreeze_Loop07:
000AFF53 E607                       	smpsAlterVol        $07
000AFF55 A5                         	dc.b	nC3
000AFF56 E6F9                       	smpsAlterVol        $F9
000AFF58 08                         	dc.b	$08
000AFF59 E607                       	smpsAlterVol        $07
000AFF5B A5                         	dc.b	nC3
000AFF5C E608                       	smpsAlterVol        $08
000AFF5E A5                         	dc.b	nC3
000AFF5F E6F1                       	smpsAlterVol        $F1
000AFF61 10                         	dc.b	$10
000AFF62 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000AFF67                            
000AFF67                            GentleBreeze_Loop08:
000AFF67 A5                         	dc.b	nC3
000AFF68 E607                       	smpsAlterVol        $07
000AFF6A A5                         	dc.b	nC3
000AFF6B E6F9                       	smpsAlterVol        $F9
000AFF6D 08                         	dc.b	$08
000AFF6E E607                       	smpsAlterVol        $07
000AFF70 A5                         	dc.b	nC3
000AFF71 E608                       	smpsAlterVol        $08
000AFF73 A5                         	dc.b	nC3
000AFF74 E6F1                       	smpsAlterVol        $F1
000AFF76 18                         	dc.b	$18
000AFF77 E607                       	smpsAlterVol        $07
000AFF79 10                         	dc.b	$10
000AFF7A E608                       	smpsAlterVol        $08
000AFF7C A5                         	dc.b	nC3
000AFF7D E6F1                       	smpsAlterVol        $F1
000AFF7F A5                         	dc.b	nC3
000AFF80 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000AFF85 A5                         	dc.b	nC3
000AFF86 E607                       	smpsAlterVol        $07
000AFF88 A5                         	dc.b	nC3
000AFF89 E6F9                       	smpsAlterVol        $F9
000AFF8B 08                         	dc.b	$08
000AFF8C E607                       	smpsAlterVol        $07
000AFF8E A5                         	dc.b	nC3
000AFF8F E608                       	smpsAlterVol        $08
000AFF91 A5                         	dc.b	nC3
000AFF92 E6F1                       	smpsAlterVol        $F1
000AFF94 10                         	dc.b	$10
000AFF95 E607                       	smpsAlterVol        $07
000AFF97 A5                         	dc.b	nC3
000AFF98 E6F9                       	smpsAlterVol        $F9
000AFF9A 08                         	dc.b	$08
000AFF9B E607                       	smpsAlterVol        $07
000AFF9D A5                         	dc.b	nC3
000AFF9E E608                       	smpsAlterVol        $08
000AFFA0 A5                         	dc.b	nC3
000AFFA1 E6F1                       	smpsAlterVol        $F1
000AFFA3 01                         	dc.b	$01
000AFFA4                            
000AFFA4                            GentleBreeze_Jump01:
000AFFA4 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000AFFA7 E607                       	smpsAlterVol        $07
000AFFA9                            
000AFFA9                            GentleBreeze_Loop09:
000AFFA9 10                         	dc.b	$10
000AFFAA E608                       	smpsAlterVol        $08
000AFFAC A5                         	dc.b	nC3
000AFFAD E6F1                       	smpsAlterVol        $F1
000AFFAF 08                         	dc.b	$08
000AFFB0 E60F                       	smpsAlterVol        $0F
000AFFB2 18                         	dc.b	$18
000AFFB3 E6F8                       	smpsAlterVol        $F8
000AFFB5 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000AFFBA 10                         	dc.b	$10
000AFFBB E608                       	smpsAlterVol        $08
000AFFBD A5                         	dc.b	nC3
000AFFBE E6F1                       	smpsAlterVol        $F1
000AFFC0 08                         	dc.b	$08
000AFFC1 E60F                       	smpsAlterVol        $0F
000AFFC3 18                         	dc.b	$18
000AFFC4 E6F1                       	smpsAlterVol        $F1
000AFFC6                            
000AFFC6                            GentleBreeze_Loop0A:
000AFFC6 10                         	dc.b	$10
000AFFC7 E607                       	smpsAlterVol        $07
000AFFC9 A5                         	dc.b	nC3
000AFFCA E6F9                       	smpsAlterVol        $F9
000AFFCC 08                         	dc.b	$08
000AFFCD E607                       	smpsAlterVol        $07
000AFFCF A5                         	dc.b	nC3
000AFFD0 E608                       	smpsAlterVol        $08
000AFFD2 A5                         	dc.b	nC3
000AFFD3 E6F1                       	smpsAlterVol        $F1
000AFFD5 18                         	dc.b	$18
000AFFD6 E607                       	smpsAlterVol        $07
000AFFD8 10                         	dc.b	$10
000AFFD9 E608                       	smpsAlterVol        $08
000AFFDB A5                         	dc.b	nC3
000AFFDC E6F1                       	smpsAlterVol        $F1
000AFFDE A5                         	dc.b	nC3
000AFFDF F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000AFFE4 A5                         	dc.b	nC3
000AFFE5                            
000AFFE5                            GentleBreeze_Loop0B:
000AFFE5 E607                       	smpsAlterVol        $07
000AFFE7 A5                         	dc.b	nC3
000AFFE8 E6F9                       	smpsAlterVol        $F9
000AFFEA 08                         	dc.b	$08
000AFFEB E607                       	smpsAlterVol        $07
000AFFED A5                         	dc.b	nC3
000AFFEE E608                       	smpsAlterVol        $08
000AFFF0 A5                         	dc.b	nC3
000AFFF1 E6F1                       	smpsAlterVol        $F1
000AFFF3 10                         	dc.b	$10
000AFFF4 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000AFFF9                            
000AFFF9                            GentleBreeze_Loop0C:
000AFFF9 A5                         	dc.b	nC3
000AFFFA E607                       	smpsAlterVol        $07
000AFFFC A5                         	dc.b	nC3
000AFFFD E6F9                       	smpsAlterVol        $F9
000AFFFF 08                         	dc.b	$08
000B0000 E607                       	smpsAlterVol        $07
000B0002 A5                         	dc.b	nC3
000B0003 E608                       	smpsAlterVol        $08
000B0005 A5                         	dc.b	nC3
000B0006 E6F1                       	smpsAlterVol        $F1
000B0008 18                         	dc.b	$18
000B0009 E607                       	smpsAlterVol        $07
000B000B 10                         	dc.b	$10
000B000C E608                       	smpsAlterVol        $08
000B000E A5                         	dc.b	nC3
000B000F E6F1                       	smpsAlterVol        $F1
000B0011 A5                         	dc.b	nC3
000B0012 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000B0017 A5                         	dc.b	nC3
000B0018 E607                       	smpsAlterVol        $07
000B001A A5                         	dc.b	nC3
000B001B E6F9                       	smpsAlterVol        $F9
000B001D 08                         	dc.b	$08
000B001E E607                       	smpsAlterVol        $07
000B0020 A5                         	dc.b	nC3
000B0021 E608                       	smpsAlterVol        $08
000B0023 A5                         	dc.b	nC3
000B0024 E6F1                       	smpsAlterVol        $F1
000B0026 10                         	dc.b	$10
000B0027 E607                       	smpsAlterVol        $07
000B0029 A5                         	dc.b	nC3
000B002A E6F9                       	smpsAlterVol        $F9
000B002C 08                         	dc.b	$08
000B002D E607                       	smpsAlterVol        $07
000B002F A5                         	dc.b	nC3
000B0030 E608                       	smpsAlterVol        $08
000B0032 A5                         	dc.b	nC3
000B0033 E6F1                       	smpsAlterVol        $F1
000B0035 01                         	dc.b	$01
000B0036 E0C0                       	smpsPan             panCenter, $00
000B0038 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000B003B                            
000B003B                            ; DAC Data
000B003B                            GentleBreeze_DAC:
000B003B 81                         	dc.b	dKick
000B003C                            
000B003C                            GentleBreeze_Loop00:
000B003C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B0042 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000B0047 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B0052                            
000B0052                            GentleBreeze_Loop01:
000B0052 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B0058 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000B005D 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B0067                            
000B0067                            GentleBreeze_Jump00:
000B0067 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000B006B                            
000B006B                            GentleBreeze_Loop02:
000B006B 81                         	dc.b	dKick
000B006C                            
000B006C                            GentleBreeze_Loop03:
000B006C 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000B0078 088A                       	dc.b	$08, dLowTimpani
000B007A F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000B007F 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000B008B 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000B0090 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000B0095                            
000B0095                            GentleBreeze_Loop04:
000B0095 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B009B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000B00A0 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B00AB                            
000B00AB                            GentleBreeze_Loop05:
000B00AB 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B00B1 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000B00B6 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B00C0 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000B00C3                            
000B00C3                            ; PSG 1 Data
000B00C3                            GentleBreeze_PSG1:
000B00C3 80                         	dc.b	nRst
000B00C4                            
000B00C4                            GentleBreeze_LoopPSG02:
000B00C4 7F                         	dc.b	$7F
000B00C5 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000B00CA 08                         	dc.b	$08
000B00CB EC04                       	smpsPSGAlterVol     $04
000B00CD                            
000B00CD                            GentleBreeze_JumpPSG01:
000B00CD A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000B00D9 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000B00E1                            
000B00E1                            GentleBreeze_LoopPSG03:
000B00E1 7F                         	dc.b	$7F
000B00E2 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000B00E7 08A3 01                    	dc.b	$08, nBb2, $01
000B00EA F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000B00ED                            
000B00ED                            ; PSG2 Data
000B00ED                            GentleBreeze_PSG2:
000B00ED 80                         	dc.b	nRst
000B00EE                            
000B00EE                            GentleBreeze_LoopPSG00:
000B00EE 7F                         	dc.b	$7F
000B00EF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000B00F4 08                         	dc.b	$08
000B00F5 EC04                       	smpsPSGAlterVol     $04
000B00F7                            
000B00F7                            GentleBreeze_JumpPSG00:
000B00F7 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000B0103 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000B010B                            
000B010B                            GentleBreeze_LoopPSG01:
000B010B 7F                         	dc.b	$7F
000B010C F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000B0111 08A8 01                    	dc.b	$08, nEb3, $01
000B0114 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000B0117                            
000B0117                            GentleBreeze_Voices:
000B0117                            ;	Voice $00
000B0117                            ;	$0C
000B0117                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000B0117                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000B0117                            	smpsVcAlgorithm     $04
000B0117                            	smpsVcFeedback      $01
000B0117                            	smpsVcUnusedBits    $00
000B0117                            	smpsVcDetune        $07, $02, $07, $02
000B0117                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000B0117                            	smpsVcRateScale     $00, $00, $00, $00
000B0117                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0117                            	smpsVcAmpMod        $00, $00, $00, $00
000B0117                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000B0117                            	smpsVcDecayRate2    $01, $00, $00, $00
000B0117                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000B0117                            	smpsVcReleaseRate   $09, $01, $04, $03
000B0117 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000B0130                            
000B0130                            ;	Voice $01
000B0130                            ;	$38
000B0130                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000B0130                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000B0130                            	smpsVcAlgorithm     $00
000B0130                            	smpsVcFeedback      $07
000B0130                            	smpsVcUnusedBits    $00
000B0130                            	smpsVcDetune        $03, $07, $01, $05
000B0130                            	smpsVcCoarseFreq    $00, $00, $07, $04
000B0130                            	smpsVcRateScale     $00, $02, $00, $02
000B0130                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0130                            	smpsVcAmpMod        $00, $00, $00, $00
000B0130                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000B0130                            	smpsVcDecayRate2    $00, $00, $10, $00
000B0130                            	smpsVcDecayLevel    $00, $00, $00, $00
000B0130                            	smpsVcReleaseRate   $08, $05, $05, $05
000B0130 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000B0149                            
000B0149                            ;	Voice $02
000B0149                            ;	$00
000B0149                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B0149                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B0149                            	smpsVcAlgorithm     $00
000B0149                            	smpsVcFeedback      $00
000B0149                            	smpsVcUnusedBits    $00
000B0149                            	smpsVcDetune        $00, $00, $00, $00
000B0149                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B0149                            	smpsVcRateScale     $00, $00, $00, $00
000B0149                            	smpsVcAttackRate    $00, $00, $00, $00
000B0149                            	smpsVcAmpMod        $00, $00, $00, $00
000B0149                            	smpsVcDecayRate1    $00, $00, $00, $00
000B0149                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0149                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0149                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0149 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B0162                            
000B0162                            ;	Voice $03
000B0162                            ;	$36
000B0162                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000B0162                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000B0162                            	smpsVcAlgorithm     $06
000B0162                            	smpsVcFeedback      $06
000B0162                            	smpsVcUnusedBits    $00
000B0162                            	smpsVcDetune        $00, $00, $00, $00
000B0162                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000B0162                            	smpsVcRateScale     $00, $00, $00, $00
000B0162                            	smpsVcAttackRate    $1F, $00, $18, $16
000B0162                            	smpsVcAmpMod        $00, $00, $00, $00
000B0162                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000B0162                            	smpsVcDecayRate2    $00, $00, $12, $00
000B0162                            	smpsVcDecayLevel    $04, $04, $02, $00
000B0162                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000B0162 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000B017B                            
000B017B                            ;	Voice $04
000B017B                            ;	$07
000B017B                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000B017B                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000B017B                            	smpsVcAlgorithm     $07
000B017B                            	smpsVcFeedback      $00
000B017B                            	smpsVcUnusedBits    $00
000B017B                            	smpsVcDetune        $07, $06, $05, $00
000B017B                            	smpsVcCoarseFreq    $05, $04, $03, $05
000B017B                            	smpsVcRateScale     $00, $01, $01, $01
000B017B                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000B017B                            	smpsVcAmpMod        $00, $00, $00, $00
000B017B                            	smpsVcDecayRate1    $17, $17, $17, $17
000B017B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B017B                            	smpsVcDecayLevel    $02, $02, $02, $02
000B017B                            	smpsVcReleaseRate   $06, $06, $06, $06
000B017B 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000B0194                            
000B0194                            ;	Voice $05
000B0194                            ;	$3C
000B0194                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000B0194                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000B0194                            	smpsVcAlgorithm     $04
000B0194                            	smpsVcFeedback      $07
000B0194                            	smpsVcUnusedBits    $00
000B0194                            	smpsVcDetune        $06, $06, $02, $02
000B0194                            	smpsVcCoarseFreq    $01, $03, $01, $01
000B0194                            	smpsVcRateScale     $00, $00, $00, $00
000B0194                            	smpsVcAttackRate    $0E, $14, $10, $13
000B0194                            	smpsVcAmpMod        $00, $00, $00, $00
000B0194                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000B0194                            	smpsVcDecayRate2    $04, $04, $04, $04
000B0194                            	smpsVcDecayLevel    $02, $01, $01, $01
000B0194                            	smpsVcReleaseRate   $07, $07, $07, $07
000B0194 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000B01AD                            
000B01AD                            
000B01AE 00                         		even
000B01AE                            ; ---------------------------------------------------------------------------
000B01AE                            ; Sound	effect pointers
000B01AE                            ; ---------------------------------------------------------------------------
000B01AE 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000B01BA 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B01C6 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B01D2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B01DE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B01EA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B01F6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B0202 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B020E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B021A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B0226 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B0232 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B023E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B024A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B0256 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B0262 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B026E 0000 0000                  SoundD0Index:	dc.l SoundD0
000B0272 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000B027A                            SoundA0:	include	sound\jump.asm
000B027A                            jump_Header:
000B027A =00000001                  smpsHeaderStartSong = 1
000B027A 0000                       	smpsHeaderVoice     jump_Voices
000B027C 01                         	smpsHeaderTempoSFX  $01
000B027D 01                         	smpsHeaderChanSFX   $01
000B027E                            
000B028A                            
000B028A                            ; FM4 Data
000B028A                            jump_FM4:
000B028C E000                       	smpsPan             panNone, $00
000B028E E607                       	smpsAlterVol        $07
000B0290 E0C0                       	smpsPan             panCenter, $00
000B0292 9903 B1                    	dc.b	nC2, $03, nC4
000B0295 E607                       	smpsAlterVol        $07
000B0297 E040                       	smpsPan             panRight, $00
000B0299 99B1                       	dc.b	nC2, nC4
000B029B E60A                       	smpsAlterVol        $0A
000B029D E080                       	smpsPan             panLeft, $00
000B029F 99B1                       	dc.b	nC2, nC4
000B02A1 E603                       	smpsAlterVol        $03
000B02A3 E0C0                       	smpsPan             panCenter, $00
000B02A5 99B1                       	dc.b	nC2, nC4
000B02A7 E000                       	smpsPan             panNone, $00
000B02A9 803D                       	dc.b	nRst, $3D
000B02AB F2                         	smpsStop
000B02AC                            
000B02AC                            ; PSG3 Data
000B02AC                            jump_PSG3:
000B02AC F3E7                       	smpsPSGform         $E7
000B02AE 8056                       	dc.b	nRst, $56
000B02B0 F2                         	smpsStop
000B02B1                            
000B02B1                            jump_Voices:
000B02B1                            ;	Voice $00
000B02B1                            ;	$3C
000B02B1                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000B02B1                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000B02B1                            	smpsVcAlgorithm     $04
000B02B1                            	smpsVcFeedback      $07
000B02B1                            	smpsVcUnusedBits    $00
000B02B1                            	smpsVcDetune        $00, $00, $00, $00
000B02B1                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000B02B1                            	smpsVcRateScale     $00, $00, $00, $00
000B02B1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02B1                            	smpsVcAmpMod        $00, $00, $00, $00
000B02B1                            	smpsVcDecayRate1    $0E, $14, $12, $00
000B02B1                            	smpsVcDecayRate2    $11, $00, $11, $00
000B02B1                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000B02B1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B02B1 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000B02CA                            
000B02CA                            
000B02CA                            		even
000B02CA                            SoundA1:	incbin	sound\soundA1.bin
000B02F4                            		even
000B02F4                            SoundA2:	incbin	sound\soundA2.bin
000B0314                            		even
000B0314                            SoundA3:	incbin	sound\soundA3.bin
000B0346                            		even
000B0346                            SoundA4:	incbin	sound\soundA4.bin
000B037C                            		even
000B037C                            SoundA5:	include	sound\fart.asm
000B037C                            Fart_Header:
000B037C =00000001                  smpsHeaderStartSong = 1
000B037C 0000                       	smpsHeaderVoice     Fart_Voices
000B037E 01                         	smpsHeaderTempoSFX  $01
000B037F 04                         	smpsHeaderChanSFX   $04
000B0380                            
000B0398                            
000B0398                            Fart_FM3:
000B039A E607                       	smpsAlterVol        $07
000B039C E0C0                       	smpsPan             panCenter, $00
000B039E F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B03A3 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000B03A6 E1FE                       	smpsAlterNote       $FE
000B03A8 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000B03AB E100                       	smpsAlterNote       $00
000B03AD A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000B03B2 F2                         	smpsStop
000B03B3                            
000B03B3                            ; FM4 Data
000B03B3                            Fart_FM4:
000B03B5 E0C0                       	smpsPan             panCenter, $00
000B03B7 8006                       	dc.b	nRst, $06
000B03BB E616                       	smpsAlterVol        $16
000B03BD E080                       	smpsPan             panLeft, $00
000B03BF F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B03C4 A212                       	dc.b	nA2, $12
000B03C6 E60A                       	smpsAlterVol        $0A
000B03C8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B03CB E603                       	smpsAlterVol        $03
000B03CD E7A2                       	dc.b	smpsNoAttack, nA2
000B03CF E603                       	smpsAlterVol        $03
000B03D1 E7A2                       	dc.b	smpsNoAttack, nA2
000B03D3 E604                       	smpsAlterVol        $04
000B03D5 E7A2                       	dc.b	smpsNoAttack, nA2
000B03D7 E606                       	smpsAlterVol        $06
000B03D9 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000B03DC E610                       	smpsAlterVol        $10
000B03DE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B03E1 E610                       	smpsAlterVol        $10
000B03E3 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000B03E8 F2                         	smpsStop
000B03E9                            
000B03E9                            ; FM5 Data
000B03E9                            Fart_FM5:
000B03EB E0C0                       	smpsPan             panCenter, $00
000B03ED 8009                       	dc.b	nRst, $09
000B03F1 E616                       	smpsAlterVol        $16
000B03F3 E040                       	smpsPan             panRight, $00
000B03F5 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B03FA A215                       	dc.b	nA2, $15
000B03FC E60A                       	smpsAlterVol        $0A
000B03FE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B0401 E603                       	smpsAlterVol        $03
000B0403 E7A2                       	dc.b	smpsNoAttack, nA2
000B0405 E603                       	smpsAlterVol        $03
000B0407 E7A2                       	dc.b	smpsNoAttack, nA2
000B0409 E604                       	smpsAlterVol        $04
000B040B E7A2                       	dc.b	smpsNoAttack, nA2
000B040D E606                       	smpsAlterVol        $06
000B040F E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000B0412 E610                       	smpsAlterVol        $10
000B0414 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B0417 E610                       	smpsAlterVol        $10
000B0419 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000B041E F2                         	smpsStop
000B041F                            
000B041F                            ; PSG3 Data
000B041F                            Fart_PSG3:
000B041F F2                         	smpsStop
000B0420                            
000B0420                            ; FM Voices
000B0420                            Fart_Voices:
000B0420                            ;	Voice $00
000B0420                            ;	$39
000B0420                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000B0420                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000B0420                            	smpsVcAlgorithm     $01
000B0420                            	smpsVcFeedback      $07
000B0420                            	smpsVcUnusedBits    $00
000B0420                            	smpsVcDetune        $00, $07, $03, $07
000B0420                            	smpsVcCoarseFreq    $01, $01, $02, $00
000B0420                            	smpsVcRateScale     $00, $03, $03, $03
000B0420                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0420                            	smpsVcAmpMod        $00, $00, $00, $00
000B0420                            	smpsVcDecayRate1    $00, $00, $00, $04
000B0420                            	smpsVcDecayRate2    $00, $00, $16, $1F
000B0420                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000B0420                            	smpsVcReleaseRate   $0A, $09, $00, $00
000B0420 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000B0439                            
000B0439                            ;	Voice $01
000B0439                            ;	$00
000B0439                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B0439                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B0439                            	smpsVcAlgorithm     $00
000B0439                            	smpsVcFeedback      $00
000B0439                            	smpsVcUnusedBits    $00
000B0439                            	smpsVcDetune        $00, $00, $00, $00
000B0439                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B0439                            	smpsVcRateScale     $00, $00, $00, $00
000B0439                            	smpsVcAttackRate    $00, $00, $00, $00
000B0439                            	smpsVcAmpMod        $00, $00, $00, $00
000B0439                            	smpsVcDecayRate1    $00, $00, $00, $00
000B0439                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0439                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0439                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0439 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B0439 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B0452                            		even
000B0452                            SoundA6:	incbin	sound\soundA6.bin
000B0482                            		even
000B0482                            SoundA7:	incbin	sound\soundA7.bin
000B04B2                            		even
000B04B2                            SoundA8:	incbin	sound\soundA8.bin
000B04E6                            		even
000B04E6                            SoundA9:	incbin	sound\soundA9.bin
000B04F8                            		even
000B04F8                            SoundAA:	incbin	sound\soundAA.bin
000B053A                            		even
000B053A                            SoundAB:	incbin	sound\soundAB.bin
000B055A                            		even
000B055A                            SoundAC:	incbin	sound\soundAC.bin
000B058E                            		even
000B058E                            SoundAD:	incbin	sound\soundAD.bin
000B05C4                            		even
000B05C4                            SoundAE:	incbin	sound\soundAE.bin
000B060E                            		even
000B060E                            SoundAF:	incbin	sound\soundAF.bin
000B063C                            		even
000B063C                            SoundB0:	incbin	sound\soundB0.bin
000B066E                            		even
000B066E                            SoundB1:	incbin	sound\soundB1.bin
000B069A                            		even
000B069A                            SoundB2:	incbin	sound\soundB2.bin
000B06EA                            		even
000B06EA                            SoundB3:	incbin	sound\soundB3.bin
000B0734                            		even
000B0734                            SoundB4:	include	sound\soundB4.asm
000B0734                            SndB4_Bumper_Header:
000B0734 =00000001                  smpsHeaderStartSong = 1
000B0734 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000B0736 01                         	smpsHeaderTempoSFX  $01
000B0737 03                         	smpsHeaderChanSFX   $03
000B0738                            
000B074A                            
000B074A                            ; FM5 Data
000B074A                            SndB4_Bumper_FM5:
000B074C F600 00                    	smpsJump            SndB4_Bumper_Jump00
000B074F                            
000B074F                            ; FM4 Data
000B074F                            SndB4_Bumper_FM4:
000B074F F2                         	smpsStop
000B0750                            
000B0750                            SndB4_Bumper_Jump00:
000B0750 A020                       	dc.b	nG2, $20
000B0752 F2                         	smpsStop
000B0753                            
000B0753                            ; FM3 Data
000B0753                            SndB4_Bumper_FM3:
000B0753 F2                         	smpsStop
000B0754                            
000B0754                            SndB4_Bumper_Voices:
000B0754                            ;	Voice $00
000B0754                            ;	$32
000B0754                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000B0754                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000B0754                            	smpsVcAlgorithm     $02
000B0754                            	smpsVcFeedback      $06
000B0754                            	smpsVcUnusedBits    $00
000B0754                            	smpsVcDetune        $07, $07, $02, $00
000B0754                            	smpsVcCoarseFreq    $00, $00, $00, $04
000B0754                            	smpsVcRateScale     $00, $00, $00, $00
000B0754                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0754                            	smpsVcAmpMod        $00, $00, $00, $00
000B0754                            	smpsVcDecayRate1    $08, $00, $00, $09
000B0754                            	smpsVcDecayRate2    $0B, $00, $00, $09
000B0754                            	smpsVcDecayLevel    $00, $00, $00, $00
000B0754                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B0754 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B0754 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B076E 00                         		even
000B076E                            SoundB5:	incbin	sound\soundB5.bin
000B078C 00                         		even
000B078C                            SoundB6:	incbin	sound\soundB6.bin
000B07AA                            		even
000B07AA                            SoundB7:	incbin	sound\soundB7.bin
000B07E6                            		even
000B07E6                            SoundB8:	incbin	sound\soundB8.bin
000B0804                            		even
000B0804                            SoundB9:	incbin	sound\soundB9.bin
000B0868                            		even
000B0868                            SoundBA:	incbin	sound\soundBA.bin
000B08CC                            		even
000B08CC                            SoundBB:	incbin	sound\soundBB.bin
000B08F8                            		even
000B08F8                            SoundBC:	incbin	sound\soundBC.bin
000B093A                            		even
000B093A                            SoundBD:	incbin	sound\soundBD.bin
000B098E                            		even
000B098E                            SoundBE:	incbin	sound\soundBE.bin
000B09C8                            		even
000B09C8                            SoundBF:	incbin	sound\soundBF.bin
000B0A3A                            		even
000B0A3A                            SoundC0:	incbin	sound\soundC0.bin
000B0A68                            		even
000B0A68                            SoundC1:	incbin	sound\soundC1.bin
000B0AC2                            		even
000B0AC2                            SoundC2:	incbin	sound\soundC2.bin
000B0AEC                            		even
000B0AEC                            SoundC3:	incbin	sound\soundC3.bin
000B0B66                            		even
000B0B66                            SoundC4:	incbin	sound\soundC4.bin
000B0C64                            		even
000B0C64                            SoundC5:	incbin	sound\soundC5.bin
000B0CCC                            		even
000B0CCC                            SoundC6:	incbin	sound\soundC6.bin
000B0D0E                            		even
000B0D0E                            SoundC7:	incbin	sound\soundC7.bin
000B0D3C                            		even
000B0D3C                            SoundC8:	incbin	sound\soundC8.bin
000B0D4E                            		even
000B0D4E                            SoundC9:	incbin	sound\soundC9.bin
000B0D7C                            		even
000B0D7C                            SoundCA:	incbin	sound\soundCA.bin
000B0DAA                            		even
000B0DAA                            SoundCB:	incbin	sound\soundCB.bin
000B0DF6                            		even
000B0DF6                            SoundCC:	incbin	sound\C9.ssf
000B0E24                            		even
000B0E24                            SoundCD:	incbin	sound\soundCD.bin
000B0E50                            		even
000B0E50                            SoundCE:	incbin	sound\soundCE.bin
000B0E6E 00                         		even
000B0E6E                            SoundCF:	incbin	sound\soundCF.bin
000B0EA6                            		even
000B0EA6                            SoundD0:	incbin	sound\soundD0.bin
000B0EE0                            		even
000B0EE0                            SoundD1:	incbin	sound\MenuBIT.bin
000B0EEE                            		even
000B0EEE                            SoundD2:	incbin	sound\MenuAffirm.bin
000B0F56 00                         		even
000B0F56                            SegaPCM:	incbin	sound\segapcm.bin
000CB0AC                            SegaPCM_end:
000CB0AC                            	even
000CB0AC                            
000CB0AC                            IdiotPCM:	incbin	sound\youare.bin
000D517D                            IdiotPCM_end:
000D517E 00                         	even
000D517E                            
000D517E                            Minecraft:	include	minecraft\code\main.asm
000D517E                            ; Minecraft: Very Legacy Console Edition
000D517E                            ; Main file
000D517E                            
000D517E                            ;	align	$20000
000D517E                            	opt	l.
000D517E                            	include	"minecraft\code\variables.asm"
000D517E                            ; Minecraft: Very Legacy Console Edition
000D517E                            ; Variable Definitions
000D517E                            
000D517E =00000040                  MAP_HEIGHT	equ	64
000D517E =00000100                  MAP_WIDTH	equ	256
000D517E                            
000D517E                            		rsset	$FF0000
000D517E =00FF0000                  mcRAM		rs.b	0
000D517E =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000D517E =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000D517E                            
000D517E                            		rsset	$FFFF8000
000D517E =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000D517E =FFFF8E80                  planeBuffer_End	rs.b	0
000D517E =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000D517E                            
000D517E =FFFF8E80                  scrollBuffer	rs.l	256
000D517E                            
000D517E =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
000D517E =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
000D517E =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
000D517E =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
000D517E                            
000D517E =FFFF9288                  vblankWait	rs.w	1
000D517E =FFFF928A                  cloudFrameCnt	rs.w	1
000D517E =FFFF928C                  cloudSkew	rs.l	36
000D517E                            
000D517E                            
000D517E                            		rsset	__rs&$FFFFFF
000D517E =00FF931C                  mcRAM_End	rs.b	0
000D517E                            
000D517E                            ; VRAM Definitions
000D517E =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000D517E                            
000D517E                            		rsreset
000D517E =00000000                  vramEmptyTile	rs.b	TILE
000D517E =00000020                  vramTerrain	rs.b	255*TILE
000D517E =00002000                  vramBackground	rs.b	408*TILE
000D517E                            
000D517E =0000C000                  VRAM_PLANE_A	equ	$C000
000D517E =0000D000                  VRAM_PLANE_W	equ	$D000
000D517E =0000E000                  VRAM_PLANE_B	equ	$E000
000D517E                            
000D517E =0000F800                  VRAM_SPR_LIST	equ	$F800
000D517E =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D517E =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D517E                            	include	"minecraft\code\macros.asm"
000D517E                            ; =========================================================================================================================================================
000D517E                            ; MegaDrive macros
000D517E                            ; =========================================================================================================================================================
000D517E                            clrRAM		macro	starta, enda
000D517E                            		local	endaddr
000D517E                            		if narg<2
000D517E                            endaddr			EQUS	"\starta\_End"
000D517E                            		else
000D517E                            endaddr			EQUS	"\enda"
000D517E                            		endif
000D517E                            
000D517E                            		moveq	#0,d0
000D517E                            
000D517E                            		if ((\starta)&$8000)=0
000D517E                            			lea	\starta,a1
000D517E                            		else
000D517E                            			lea	(\starta).w,a1
000D517E                            		endif
000D517E                            		if (\starta)&1
000D517E                            			move.b	d0,(a1)+
000D517E                            		endif
000D517E                            
000D517E                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000D517E                            .Clear\@:	move.l	d0,(a1)+
000D517E                            		dbf	d1,.Clear\@
000D517E                            
000D517E                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000D517E                            			move.w	d0,(a1)+
000D517E                            		endif
000D517E                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000D517E                            			move.b	d0,(a1)+
000D517E                            		endif
000D517E                            		endm
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; Disable interrupts
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; ARGUMENTS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; RETURNS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            intsOff		macros
000D517E                            		ori	#$700,sr
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; Enable interrupts
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; ARGUMENTS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; RETURNS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            intsOn		macros
000D517E                            		andi	#$F8FF,sr
000D517E                            
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; VDP command instruction
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; ARGUMENTS:
000D517E                            ;	addr	- Address in VDP memory
000D517E                            ;	type	- Type of VDP memory
000D517E                            ;	rwd	- VDP command
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; RETURNS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E =00000021                  VRAM		EQU	%100001		; VRAM
000D517E =0000002B                  CRAM		EQU	%101011		; CRAM
000D517E =00000025                  VSRAM		EQU	%100101		; VSRAM
000D517E =0000000C                  READ		EQU	%001100		; VDP read
000D517E =00000007                  WRITE		EQU	%000111		; VDP write
000D517E =00000027                  DMA		EQU	%100111		; VDP DMA
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000D517E                            		if narg=5
000D517E                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000D517E                            		elseif narg>=6
000D517E                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000D517E                            		else
000D517E                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000D517E                            		endif
000D517E                            		endm
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; VDP DMA from 68000 memory to VDP memory
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; ARGUMENTS:
000D517E                            ;	src	- Source address in 68000 memory
000D517E                            ;	dest	- Destination address in VDP memory
000D517E                            ;	len	- Length of data in bytes
000D517E                            ;	type	- Type of VDP memory
000D517E                            ;	a6.l	- VDP control port
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; RETURNS:
000D517E                            ;	Nothing
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            dma68k		macro	src, dest, len, type
000D517E                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000D517E                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000D517E                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000D517E                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000D517E                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000D517E                            		move.w	(sp)+,(a6)
000D517E                            		endm
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D517E                            
000D517E                            MC_Init:
000D517E 007C 0700                  		intsOff						; disable CPU interrupts
000D5182 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000D518A                            
000D518A 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000D5190 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000D5194                            
000D5194 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000D5198 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000D519C 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000D51A0 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000D51A4                            		
000D51A4 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
000D51A8 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000D51AC 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D51B0 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000D51B4                            
000D51C6 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000D51CA                            
000D51CA                            .waitVBlank:	
000D51CA 44D6                       		move.w	(a6),ccr				; is v-blank active?
000D51CC 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000D51CE                            
000D5202 6100 0000                  		bsr.w	MC_LoadBackground
000D5206 6100 0000                  		bsr.w	MC_LoadWorld
000D520A                            
000D520A 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000D520E 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000D5212 027C F8FF                  		intsOn						; enable CPU interrupts
000D5216                            
000D5216 4278 928A                  		clr.w	(cloudFrameCnt).w		
000D521A                            
000D521A                            .gameLoop:
000D521A 50F8 9288                  		st.b	(vblankWait).w
000D521E 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
000D5222 6100                       		bsr.s	MC_RenderBlocks
000D5224                            
000D5224                            .spin:
000D5224 4A38 9288                  		tst.b	(vblankWait).w
000D5228 67F0                       		beq.s	.gameLoop
000D522A 60F8                       		bra.s	.spin
000D522C                            ; ---------------------------------------------------------------------------
000D522C                            
000D522C                            ; ===========================================================================
000D522C                            ; ---------------------------------------------------------------------------
000D522C                            ; Render the Visible Portion of the World to the Screen
000D522C                            ; ---------------------------------------------------------------------------
000D522C                            MC_RenderBlocks:
000D522C 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000D5230 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000D5232 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000D5236                            
000D5236 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000D523A EB49                       		lsl.w	#5,d1			; Make into row offset
000D523C 0241 3F00                  		andi.w	#$3F00,d1		; ^
000D5240                            
000D5240 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000D5246 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000D524C 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000D5250 7600                       		moveq	#0,d3			; Clear d3
000D5252 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000D5254                            
000D5254                            .renderScreen:
000D5254 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000D5256 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000D5258 1400                       		move.b	d0,d2			; ^
000D525A                            
000D525A                            .renderRow:
000D525A 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000D525E 6700                       		beq.s	.renderWall
000D5260                            
000D5260 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000D5264 D643                       		add.w	d3,d3				; Turn tile ID into index
000D5266 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
000D526A 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000D526C                            		
000D526C 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D526E 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D5272 6000                       		bra.s	.endRenderRow		; Branch
000D5274                            
000D5274                            .renderWall:
000D5274 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
000D5278 D643                       		add.w	d3,d3					; Turn tile ID into index
000D527A 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000D527E                            
000D527E 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D5280 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D5284                            
000D5284                            .endRenderRow:
000D5284 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000D5288 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000D528C 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000D5290 6200                       		bhi.s	.inBounds		; If so, branch
000D5292 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000D5296                            
000D5296                            .inBounds:	
000D5296 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000D529A 4E75                       		rts
000D529C                            
000D529C                            ; ---------------------------------------------------------------------------
000D529C                            block_entry	macro	tileID, palLine, priority
000D529C                            	if (narg<3)
000D529C                            		dc.w	(palLine<<13)|tileID
000D529C                            	else
000D529C                            		dc.w	$8000|(palLine<<13)|tileID
000D529C                            	endif
000D529C                            		endm
000D529C                            
000D529C                            .renderProperties:
000D52DC                            
000D52FA                            ; ---------------------------------------------------------------------------
000D52FA                            
000D52FA                            ; ===========================================================================
000D52FA                            ; ---------------------------------------------------------------------------
000D52FA                            ; Update Foreground and Background Scrolling
000D52FA                            ; ---------------------------------------------------------------------------
000D52FA =00000500                  CLOUD_SCROLL_RATE	equ	1280
000D52FA                            
000D52FA                            MC_UpdateScrollBuffer:
000D52FA 41F8 8E80                  		lea	(scrollBuffer).w,a0
000D52FE 7E13                       		moveq	#20-1,d7
000D5300 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
000D5304 0240 0007                  		andi.w	#7,d0					; ^
000D5308 4440                       		neg.w	d0					; ^
000D530A 4840                       		swap	d0					; ^
000D530C 4240                       		clr.w	d0
000D530E                            
000D530E                            .blankBGSegment:
000D530E 20C0                       		move.l	d0,(a0)+
000D5310 51CF FFFC                  		dbf	d7,.blankBGSegment
000D5314                            
000D5314 43F8 928C                  		lea	(cloudSkew).w,a1
000D5318 7200                       		moveq	#0,d1
000D531A 7E23                       		moveq	#36-1,d7
000D531C                            
000D531C 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
000D5320 6A00                       		bpl.s	.cloudBGSegment
000D5322                            	
000D5322 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
000D5328                            
000D5328                            .resetClouds:
000D5328 20C0                       		move.l	d0,(a0)+
000D532A 4299                       		clr.l	(a1)+
000D532C 51CF FFFA                  		dbf	d7,.resetClouds
000D5330 6000                       		bra.s	.return
000D5332                            
000D5332                            .cloudBGSegment:
000D5332 2411                       		move.l	(a1),d2
000D5334 D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
000D5338 22C2                       		move.l	d2,(a1)+
000D533A                            
000D533A 4842                       		swap	d2
000D533C 3002                       		move.w	d2,d0
000D533E 4440                       		neg.w	d0
000D5340 20C0                       		move.l	d0,(a0)+
000D5342                            		
000D5342 5841                       		addq.w	#4,d1
000D5344 51CF FFEC                  		dbf	d7,.cloudBGSegment
000D5348                            
000D5348                            .return:
000D5348 4E75                       		rts
000D534A                            ; ---------------------------------------------------------------------------
000D534A                            .cloudSkewFactor:
000D534A =00000080                  	.i: = 128
000D534A                            
000D534A                            	rept	36
000D534A                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
000D534A                            	.i: = .i-2
000D534A 0000 1999 0000 1933 0000+  	endr
000D53DA                            
000D53DA                            ; ===========================================================================
000D53DA                            ; ---------------------------------------------------------------------------
000D53DA                            ; Clear The Screen
000D53DA                            ; ---------------------------------------------------------------------------
000D53DA                            MC_ClearScreen:
000D53DA 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000D53DE                            
000D53DE 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000D53E4 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D53E8 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000D53EE 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D53F4                            
000D53F4 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D53F6 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000D53F8                            
000D53F8 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000D53FE 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D5402 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000D5408 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D540E                            
000D540E 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D5410 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000D5412                            
000D5412 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000D5418 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D541C 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000D5422 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D5428                            
000D5428 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D542A 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000D542C                            
000D542C 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D5430 4E75                       		rts						; return
000D5432                            ; ---------------------------------------------------------------------------
000D5432                            
000D5432                            ; ===========================================================================
000D5432                            ; ---------------------------------------------------------------------------
000D5432                            ; Load the Background
000D5432                            ; ---------------------------------------------------------------------------
000D5432                            MC_LoadBackground:
000D544C                            
000D5452 41F9 0000 0000             		lea	MC_BGMap,a0
000D5458 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000D545C                            
000D545C                            .loop:
000D545C 3018                       		move.w	(a0)+,d0
000D545E 6700                       		beq.s	.empty
000D5460 0640 0100                  		add.w	#(vramBackground>>5),d0
000D5464 0040 6000                  		ori.w	#(3<<13),d0
000D5468                            
000D5468                            .empty:
000D5468 3D40 FFFC                  		move.w	d0,-4(a6)
000D546C 51CF FFEE                  		dbf	d7,.loop
000D5470 4E75                       		rts						; return
000D5472                            ; ---------------------------------------------------------------------------
000D5472                            
000D5472                            ; ===========================================================================
000D5472                            ; ---------------------------------------------------------------------------
000D5472                            ; Load the World
000D5472                            ; ---------------------------------------------------------------------------
000D5472                            MC_LoadWorld:
000D5472 41F9 0000 0000             		lea	MC_TestMap,a0
000D5478 43F9 00FF 4000             		lea	mapWallBlocks,a1
000D547E 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D5482                            
000D5482                            .loadWalls:
000D5482 22D8                       		move.l	(a0)+,(a1)+
000D5484 51CF FFFC                  		dbf	d7,.loadWalls
000D5488                            
000D5488 41F9 0000 0000             		lea	MC_TestMap,a0
000D548E 43F9 00FF 0000             		lea	mapCollBlocks,a1
000D5494 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D5498                            
000D5498                            .loadBlocks:
000D5498 22D8                       		move.l	(a0)+,(a1)+
000D549A 51CF FFFC                  		dbf	d7,.loadBlocks
000D549E 4E75                       		rts						; return
000D54A0                            ; ---------------------------------------------------------------------------
000D54A0                            
000D54A0                            ; ===========================================================================
000D54A0                            ; ---------------------------------------------------------------------------
000D54A0                            ; VBlank Interrupt
000D54A0                            ; ---------------------------------------------------------------------------
000D54A0                            MC_VInt:
000D54D4                            
000D54D4                            ;		move.w	(camXPosFG).w,d0			; update scrolling
000D54D4                            ;		andi.w	#7,d0					; ^
000D54D4                            ;		neg.w	d0					; ^
000D54D4                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
000D54D4                            ;		move.w	d0,-4(a6)				; ^
000D54D4                            
000D54D4                            ;		addq.w	#1,(camXPosFG).w			
000D54D4 51F8 9288                  		sf.b	(vblankWait).w
000D54D8 4E73                       		rte						; return
000D54DA                            ; ---------------------------------------------------------------------------
000D54DA                            
000D54DA                            ; ---------------------------------------------------------------------------
000D54DA                            MC_Palette:
000D54DA 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000D54FA 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000D551A 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000D553A 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000D555A                            ; ---------------------------------------------------------------------------
000D555A                            MC_Terrain:
000D555A                            	incbin	"minecraft\assets\bin\terrain.bin"
000D59DA                            MC_Terrain_End:
000D59DA                            	even
000D59DA                            ; ---------------------------------------------------------------------------
000D59DA                            MC_BGArt:
000D59DA                            	incbin	"minecraft\assets\bin\bgArt.bin"
000D8CDA                            MC_BGArt_End:
000D8CDA                            	even
000D8CDA                            ; ---------------------------------------------------------------------------
000D8CDA                            MC_BGMap:
000D8CDA                            	incbin	"minecraft\assets\bin\bgMap.bin"
000D9CDA                            MC_BGMap_End:
000D9CDA                            	even
000D9CDA                            ; ---------------------------------------------------------------------------
000D9CDA                            MC_TestMap:
000D9CDA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000D9DDA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000D9EDA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000D9FDA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000DA0DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000DA1DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000DA2DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000DA3DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000DA4DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000DA5DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000DA6DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000DA7DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000DA8DA 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000DA9DA                            	
000DA9DA                            ;	dcb.b	32,$01	; Row 0F
000DA9DA                            ;	dcb.b	32,$02	; Row 0F
000DA9DA                            ;	dcb.b	32,$03	; Row 0F
000DA9DA                            ;	dcb.b	32,$04	; Row 0F
000DA9DA                            ;	dcb.b	32,$05	; Row 0F
000DA9DA                            ;	dcb.b	32,$06	; Row 0F
000DA9DA                            ;	dcb.b	32,$07	; Row 0F
000DA9DA                            ;	dcb.b	32,$08	; Row 0F
000DA9DA                            
000DA9DA                            ;	dcb.b	256,$03	; Row 10
000DA9DA                            ;	dcb.b	256,$02	; Row 11
000DA9DA                            ;	dcb.b	256,$02	; Row 12
000DA9DA                            ;	dcb.b	256,$02	; Row 13
000DA9DA                            ;	dcb.b	256,$01	; Row 14
000DA9DA                            ;	dcb.b	256,$01	; Row 15
000DA9DA                            ;	dcb.b	256,$01	; Row 16
000DA9DA                            ;	dcb.b	256,$01	; Row 17
000DA9DA                            ;	dcb.b	256,$01	; Row 19
000DA9DA                            ;	dcb.b	256,$01	; Row 1A
000DA9DA                            ;	dcb.b	256,$01	; Row 1B
000DA9DA                            ;	dcb.b	256,$01	; Row 1C
000DA9DA                            ;	dcb.b	256,$01	; Row 1E
000DA9DA                            ;	dcb.b	256,$01	; Row 1F
000DA9DA                            MC_TestMap_End:
000DA9DA                            MC_TestMap_End:
000DA9DA                            ; end of 'ROM'
000DA9DA                            EndOfRom:
000DA9DA                            
000DA9DA                            
