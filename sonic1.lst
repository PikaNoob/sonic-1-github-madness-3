00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 EE90                  		bsr.w	Pal_FadeFrom
000031AE 6100 E652                  		bsr.w	ClearPLC
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4                            ; gomer
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003204 6100 E45E                  		bsr.w	NemDec
00003208 7003                       		moveq	#3,d0		; load Sonic's pallet
0000320A 6100 F0DA                  		bsr.w	PalLoad1
0000320E                            
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000321A 303C 0000                  		move.w	#0,d0
0000321E 6100 E722                  		bsr.w	EniDec
00003222                            ; help how the fuck can i do this IT SHOWS NOTHING
00003222 43F9 00FF 0000             		lea	($FF0000).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232 6100 E410                  		bsr.w	ShowVDPGraphics
00003236                            
00003236                            
00003236 43F9 00FF 0000             		lea	($FF0000).l,a1
0000323C 203C 6000 0003             		move.l	#$60000003,d0
00003242 7227                       		moveq	#$27,d1
00003244 741B                       		moveq	#$1B,d2
00003246                            
00003246 6100 ED4E                  		bsr.w	Pal_FadeTo
0000324A 303C 0005                  		move.w  #$5, d0  ; Example delay value (adjust as needed)
0000324E 6100 0000                  		bsr.w   Delay         ; Call the delay subroutine
00003252 6100 EDE8                  		bsr.w	Pal_FadeFrom
00003256                            
00003256                            
00003256 6100 E290                  		bsr.w	ClearScreen
0000325A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000326A 6100 E3F8                  		bsr.w	NemDec
0000326E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003278 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000327E 6100 E3E4                  		bsr.w	NemDec
00003282 43F9 00FF 0000             		lea	($FF0000).l,a1
00003288 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000328E 303C 0000                  		move.w	#0,d0
00003292 6100 E6AE                  		bsr.w	EniDec
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 203C 4000 0003             		move.l	#$40000003,d0
000032A2 7227                       		moveq	#$27,d1
000032A4 741B                       		moveq	#$1B,d2
000032A6 6100 E39C                  		bsr.w	ShowVDPGraphics
000032AA 6100 ED90                  		bsr.w	Pal_FadeFrom
000032AE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000032B2 7000                       		moveq	#0,d0
000032B4 323C 001F                  		move.w	#$1F,d1
000032B8                            
000032B8                            Delay:
000032B8 3200                       		    move.w d0, d1
000032BA                            DelayLoop:
000032BA 5341                       		    subq.w #1, d1
000032BC 6600 FFFC                  		    bne.w DelayLoop
000032C0                            		    ;rts
000032C0                            
000032C0                            Title_ClrPallet:
000032C0 22C0                       		move.l	d0,(a1)+
000032C2 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000032C6                            
000032C6 7003                       		moveq	#3,d0		; load Sonic's pallet
000032C8 6100 F01C                  		bsr.w	PalLoad1
000032CC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000032D2 4EB9 0000 0000             		jsr	ObjectsLoad
000032D8 4EB9 0000 0000             		jsr	BuildSprites
000032DE 6100 ECB6                  		bsr.w	Pal_FadeTo
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000032F0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000032F6 6100 E36C                  		bsr.w	NemDec
000032FA 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003304 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000330A 6100 E358                  		bsr.w	NemDec
0000330E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003318 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000331E 6100 E344                  		bsr.w	NemDec
00003322 4DF9 00C0 0000             		lea	($C00000).l,a6
00003328 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003330 4BF9 0000 05F4             		lea	(Art_Text).l,a5
00003336 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000333A                            
0000333A                            Title_LoadText:
0000333A 2C9D                       		move.l	(a5)+,(a6)
0000333C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003340                            
00003340 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003346 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000334C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003352 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003358 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000335E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003364 6100 0000                  		bsr.w	LevelSizeLoad
00003368 6100 0000                  		bsr.w	DeformBgLayer
0000336C                            
0000336C 43F8 B000                  		lea	($FFFFB000).w,a1
00003370 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003376 303C 0000                  		move.w	#0,d0
0000337A 6100 E5C6                  		bsr.w	EniDec
0000337E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003384 43F9 00FF 0000             		lea	($FF0000).l,a1
0000338A 6100 E734                  		bsr.w	KosDec
0000338E 6100 0000                  		bsr.w	LevelLayoutLoad
00003392                            
00003392 46FC 2700                  		move	#$2700,sr
00003396 6100 E150                  		bsr.w	ClearScreen
0000339A 4BF9 00C0 0004             		lea	($C00004).l,a5
000033A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000033A6 47F8 F708                  		lea	($FFFFF708).w,a3
000033AA 49F8 A440                  		lea	($FFFFA440).w,a4
000033AE 343C 6000                  		move.w	#$6000,d2
000033B2 6100 0000                  		bsr.w	LoadTilesFromStart2
000033B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000033BC 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000033C2 303C 0000                  		move.w	#0,d0
000033C6 6100 E57A                  		bsr.w	EniDec
000033CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000033D0 203C 4206 0003             		move.l	#$42060003,d0
000033D6 7221                       		moveq	#$21,d1
000033D8 7415                       		moveq	#$15,d2
000033DA 6100 E268                  		bsr.w	ShowVDPGraphics
000033DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000033E8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000033EE 6100 E274                  		bsr.w	NemDec
000033F2 7001                       		moveq	#1,d0		; load title screen pallet
000033F4 6100 EEF0                  		bsr.w	PalLoad1
000033F8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000033FC 6100 E1C2                  		bsr.w	PlaySound_Special
00003400 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003406 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000340C 43F8 D080                  		lea	($FFFFD080).w,a1
00003410 7000                       		moveq	#0,d0
00003412 323C 000F                  		move.w	#$F,d1
00003416                            
00003416                            Title_ClrObjRam2:
00003416 22C0                       		move.l	d0,(a1)+
00003418 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000341C                            
0000341C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003422 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003428 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000342E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003434 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000343A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003440 4EB9 0000 0000             		jsr	ObjectsLoad
00003446 6100 0000                  		bsr.w	DeformBgLayer
0000344A 4EB9 0000 0000             		jsr	BuildSprites
00003450 7000                       		moveq	#0,d0
00003452 6100 E382                  		bsr.w	LoadPLC2
00003456 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000345C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003462 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003466 0000 0040                  		ori.b	#$40,d0
0000346A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003470 6100 EB24                  		bsr.w	Pal_FadeTo
00003474                            
00003474                            loc_317C:
00003474 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000347A 6100 F7B6                  		bsr.w	DelayProgram
0000347E 4EB9 0000 0000             		jsr	ObjectsLoad
00003484 6100 0000                  		bsr.w	DeformBgLayer
00003488 4EB9 0000 0000             		jsr	BuildSprites
0000348E 6100 E6F0                  		bsr.w	PalCycle_Title
00003492 6100 E37C                  		bsr.w	RunPLC_RAM
00003496 3038 D008                  		move.w	($FFFFD008).w,d0
0000349A 5440                       		addq.w	#2,d0
0000349C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000034A0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000034A4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000034A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000034AC 4E75                       		rts	
000034AE                            ; ===========================================================================
000034AE                            
000034AE                            Title_ChkRegion:
000034AE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000034B2 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000034B4 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000034BA 6000                       		bra.s	Title_EnterCheat
000034BC                            ; ===========================================================================
000034BC                            
000034BC                            Title_RegionJ:				; XREF: Title_ChkRegion
000034BC 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000034C2                            
000034C2                            Title_EnterCheat:			; XREF: Title_ChkRegion
000034C2 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000034C6 D0C0                       		adda.w	d0,a0
000034C8 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000034CC 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000034D0 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000034D2 6600                       		bne.s	loc_3210	; if not, branch
000034D4 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000034D8 4A00                       		tst.b	d0
000034DA 6600                       		bne.s	Title_CountC
000034DC 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000034E0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000034E4 E249                       		lsr.w	#1,d1
000034E6 0241 0003                  		andi.w	#3,d1
000034EA 6700                       		beq.s	Title_PlayRing
000034EC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000034F0 6A00                       		bpl.s	Title_PlayRing
000034F2 7201                       		moveq	#1,d1
000034F4 1181 1001                  		move.b	d1,1(a0,d1.w)
000034F8                            
000034F8                            Title_PlayRing:
000034F8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000034FE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003502 6100 E0BC                  		bsr.w	PlaySound_Special
00003506 6000                       		bra.s	Title_CountC
00003508                            ; ===========================================================================
00003508                            
00003508                            loc_3210:				; XREF: Title_EnterCheat
00003508 4A00                       		tst.b	d0
0000350A 6700                       		beq.s	Title_CountC
0000350C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003512 6700                       		beq.s	Title_CountC
00003514 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000351A                            
0000351A                            Title_CountC:
0000351A 1038 F605                  		move.b	($FFFFF605).w,d0
0000351E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003522 6700                       		beq.s	loc_3230	; if not, branch
00003524 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003528                            
00003528                            loc_3230:
00003528 4A78 F614                  		tst.w	($FFFFF614).w
0000352C 6700 0000                  		beq.w	Demo
00003530                            		; (temporary until we have an actual options screen)
00003530 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003536 6700                       		beq.s	@notc
00003538                            
00003538 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
0000353E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003542 6100 E07C                  		bsr.w	PlaySound_Special
00003546                            	@notc:
00003546 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000354C 6700 FF26                  		beq.w	loc_317C	; if not, branch
00003550                            
00003550                            Title_ChkLevSel:
00003550 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003554 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003558 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000355E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003562                            		
00003562                            		
00003562 7002                       		moveq	#2,d0
00003564 6100 ED9C                  		bsr.w	PalLoad2	; load level select pallet
00003568 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000356C 7000                       		moveq	#0,d0
0000356E 323C 00DF                  		move.w	#$DF,d1
00003572                            
00003572                            Title_ClrScroll:
00003572 22C0                       		move.l	d0,(a1)+
00003574 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003578                            
00003578 21C0 F616                  		move.l	d0,($FFFFF616).w
0000357C 46FC 2700                  		move	#$2700,sr
00003580 4DF9 00C0 0000             		lea	($C00000).l,a6
00003586 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003590 323C 03FF                  		move.w	#$3FF,d1
00003594                            
00003594                            Title_ClrVram:
00003594 2C80                       		move.l	d0,(a6)
00003596 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000359A                            
0000359A 6100 0000                  		bsr.w	LevSelTextLoad
0000359E                            		
0000359E                            		; sound test fix
0000359E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000035A2 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000035A8                            		
000035A8 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000035AC 0C46 0014                  		cmpi.w	#$14,d6
000035B0 6700                       		beq.s	@issndtst
000035B2 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000035B6                            	@issndtst:
000035B6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000035BA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000035BE                            		
000035BE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000035C2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000035CA                            		
000035CA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035D0 6700                       		beq.s	@issndtst2
000035D2                            		
000035D2 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000035D8 6100 0000                  		bsr.w	CStringSlop
000035DC 6000                       		bra.s	LevelSelect
000035DE                            	@issndtst2:
000035DE 43F9 0000 0000             		lea	(Controls_SND).l,a1
000035E4 6100 0000                  		bsr.w	CStringSlop
000035E8                            ; ---------------------------------------------------------------------------
000035E8                            ; Level	Select
000035E8                            ; ---------------------------------------------------------------------------
000035E8                            LevelSelect:
000035E8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035EE 6100 F642                  		bsr.w	DelayProgram
000035F2 6100 0000                  		bsr.w	LevSelControls
000035F6 6100 E218                  		bsr.w	RunPLC_RAM
000035FA 4AB8 F680                  		tst.l	($FFFFF680).w
000035FE 66E8                       		bne.s	LevelSelect
00003600 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003606 67E0                       		beq.s	LevelSelect	; if not, branch
00003608 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000360C 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003610 6600                       		bne.s	@dont	; if not, dont blow this place up
00003612                            			
00003612 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003618 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000361E 6100 F612                  		bsr.w	DelayProgram
00003622                            	@dont:
00003622 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003626 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003628                            		
00003628 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000362E 67B8                       		beq.s	LevelSelect	; if not, branch
00003630                            		
00003630 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003636 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003638                            		
00003638 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000363C 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003640                            		
00003640 4EB9 0000 0000             		jsr		ShowNow_Playing
00003646 60A0                       		bra.s	LevelSelect
00003648                            ; ===========================================================================
00003648                            
00003648                            LevSel_SEGA:				; XREF: LevelSelect
00003648 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000364E 4E75                       		rts	
00003650                            ; ===========================================================================
00003650                            
00003650                            LevSel_Ending:				; XREF: LevelSelect
00003650 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003656 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000365C 4E75                       		rts	
0000365E                            ; ===========================================================================
0000365E                            
0000365E                            LevSel_Credits:				; XREF: LevelSelect
0000365E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003664 103C 0091                  		move.b	#$91,d0
00003668 6100 DF56                  		bsr.w	PlaySound_Special ; play credits music
0000366C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003672 4E75                       		rts	
00003674                            ; ===========================================================================
00003674                            
00003674                            LevSel_Level_SS:			; XREF: LevelSelect
00003674 D040                       		add.w	d0,d0
00003676 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000367A 6B00 FF6C                  		bmi.w	LevelSelect
0000367E 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003682 6600                       		bne.s	LevSel_Level	; if not, branch
00003684 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000368A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000368E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003694 7000                       		moveq	#0,d0
00003696 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000369A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000369E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036A2 4E75                       		rts	
000036A4                            ; ===========================================================================
000036A4                            
000036A4                            LevSel_Level:				; XREF: LevSel_Level_SS
000036A4 0240 3FFF                  		andi.w	#$3FFF,d0
000036A8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000036AC                            
000036AC                            PlayLevel:				; XREF: ROM:00003246j ...
000036AC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000036B2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036B8 7000                       		moveq	#0,d0
000036BA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036BE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036C2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036C6 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000036CA 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000036CE 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000036D2 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000036D6 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000036DA 103C 00E0                  		move.b	#$E0,d0
000036DE 6100 DEE0                  		bsr.w	PlaySound_Special ; fade out music
000036E2 4E75                       		rts	
000036E4                            ; ===========================================================================
000036E4                            ; ---------------------------------------------------------------------------
000036E4                            ; Level	select - level pointers
000036E4                            ; ---------------------------------------------------------------------------
000036E4                            LSelectPointers:
000036E4                            		incbin	misc\ls_point.bin
0000370E                            		even
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Level	select codes
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            LevelSelectCode_J:
0000370E                            		incbin	misc\ls_jcode.bin
00003714                            		even
00003714                            
00003714                            LevelSelectCode_US:
00003714                            		incbin	misc\ls_ucode.bin
0000371A                            		even
0000371A                            ; ===========================================================================
0000371A                            
0000371A                            ; ---------------------------------------------------------------------------
0000371A                            ; Demo mode
0000371A                            ; ---------------------------------------------------------------------------
0000371A                            
0000371A                            Demo:					; XREF: TitleScreen
0000371A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003720                            
00003720                            loc_33B6:				; XREF: loc_33E4
00003720 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003726 6100 F50A                  		bsr.w	DelayProgram
0000372A 6100 0000                  		bsr.w	DeformBgLayer
0000372E 6100 E430                  		bsr.w	PalCycle_Load
00003732 6100 E0DC                  		bsr.w	RunPLC_RAM
00003736 3038 D008                  		move.w	($FFFFD008).w,d0
0000373A 5440                       		addq.w	#2,d0
0000373C 31C0 D008                  		move.w	d0,($FFFFD008).w
00003740 0C40 1C00                  		cmpi.w	#$1C00,d0
00003744 6500                       		bcs.s	loc_33E4
00003746 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000374C 4E75                       		rts	
0000374E                            ; ===========================================================================
0000374E                            
0000374E                            loc_33E4:				; XREF: Demo
0000374E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003754 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
00003758 4A78 F614                  		tst.w	($FFFFF614).w
0000375C 6600 FFC2                  		bne.w	loc_33B6
00003760 103C 00E0                  		move.b	#$E0,d0
00003764 6100 DE5A                  		bsr.w	PlaySound_Special ; fade out music
00003768 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000376C 0240 0007                  		andi.w	#7,d0
00003770 D040                       		add.w	d0,d0
00003772 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003776 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000377A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000377E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003784 6500                       		bcs.s	loc_3422	; if yes, branch
00003786 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000378C                            
0000378C                            loc_3422:
0000378C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003792 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003798 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000379C 6600                       		bne.s	Demo_Level	; if not, branch
0000379E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037A4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000037A8 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000037AC                            
000037AC                            Demo_Level:
000037AC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037B2 7000                       		moveq	#0,d0
000037B4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037B8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037BC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037C0 4E75                       		rts	
000037C2                            ; ===========================================================================
000037C2                            ; ---------------------------------------------------------------------------
000037C2                            ; Levels used in demos
000037C2                            ; ---------------------------------------------------------------------------
000037C2                            Demo_Levels:	incbin	misc\dm_ord1.bin
000037CA                            		even
000037CA                            
000037CA                            ; ---------------------------------------------------------------------------
000037CA                            ; Subroutine to	change what you're selecting in the level select
000037CA                            ; ---------------------------------------------------------------------------
000037CA                            
000037CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CA                            
000037CA                            
000037CA                            LevSelControls:				; XREF: LevelSelect
000037CA 1238 F605                  		move.b	($FFFFF605).w,d1
000037CE 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000037D2 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000037D4 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000037D8 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000037DC                            
000037DC                            LevSel_UpDown:
000037DC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000037E2 1238 F604                  		move.b	($FFFFF604).w,d1
000037E6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000037EA 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000037EE 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000037F2 0801 0000                  		btst	#0,d1		; is up	pressed?
000037F6 6700                       		beq.s	LevSel_Down	; if not, branch
000037F8 5346                       		subq.w	#1,d6		; move up 1 selection
000037FA 6400                       		bcc.s	LevSel_Down
000037FC 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037FE                            
000037FE                            LevSel_Down:
000037FE 0801 0001                  		btst	#1,d1		; is down pressed?
00003802 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003804 5246                       		addq.w	#1,d6		; move down 1 selection
00003806 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000380A 6500                       		bcs.s	LevSel_Refresh
0000380C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
0000380E 6000                       		bra.s	LevSel_Refresh
00003810                            		
00003810                            LevSel_LR:
00003810 0801 0002                  		btst	#2,d1		; is left pressed?
00003814 6700                       		beq.s	LevSel_Right	; if not, branch
00003816 0446 0000                  		sub.w	#lsrow2size,d6
0000381A 64E2                       		bcc.s	LevSel_Down
0000381C 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003820                            LevSel_Right:
00003820 0801 0003                  		btst	#3,d1		; is right pressed?
00003824 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003826 0646 0000                  		add.w	#lsrow1size,d6
0000382A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000382E 6500                       		bcs.s	LevSel_Refresh
00003830 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003834                            ; ===========================================================================
00003834                            LevSel_Refresh:
00003834                            		
00003834 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003838 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000383C                            		
0000383C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003842 6600                       		bne.s	@exitsndtest
00003844                            		
00003844 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003848 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000384E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003856 6100 0000                  		bsr.w	CStringSlop
0000385A                            	@exitsndtest:
0000385A                            	
0000385A 363C C65F                  		move.w	#$C680-$21,d3
0000385E 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003862 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003866                            		
00003866 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000386C 6600                       		bne.s	@entersndtest
0000386E                            		
0000386E 363C C65F                  		move.w	#$C680-$21,d3
00003872 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003878 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003880 6100 0000                  		bsr.w	CStringSlop
00003884                            	@entersndtest:
00003884 4E75                       		rts	
00003886                            		
00003886                            LevSel_SndTest:				; XREF: LevSelControls
00003886 1238 F605                  		move.b	($FFFFF605).w,d1
0000388A 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000388E 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003890 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003896 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000389A                            		
0000389A 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000389E 0801 0002                  		btst	#2,d1		; is left pressed?
000038A2 6700                       		beq.s	SndTest_Right	; if not, branch
000038A4 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000038A6                            		; no need the fact it's a byte does the trick
000038A6                            
000038A6                            SndTest_Right:
000038A6 0801 0003                  		btst	#3,d1		; is right pressed?
000038AA 6700                       		beq.s	SndTest_A	; if not, branch
000038AC 5200                       		addq.b	#1,d0		; add 1	to sound test
000038AE                            		; same here
000038AE                            		
000038AE                            SndTest_A:
000038AE 0801 0006                  		btst	#6,d1		; is A pressed?
000038B2 6700                       		beq.s	SndTest_B	; if not, branch
000038B4 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000038B6 5100                       		subq.b	#8,d0
000038B8                            		
000038B8                            SndTest_B:
000038B8 0801 0004                  		btst	#4,d1		; is B pressed?
000038BC 6700                       		beq.s	SndTest_Refresh	; if not, branch
000038BE 5000                       		addq.b	#8,d0		; add $10 to sound test
000038C0 5000                       		addq.b	#8,d0
000038C2                            
000038C2                            SndTest_Refresh:
000038C2 363C C65F                  		move.w	#$C680-$21,d3
000038C6 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000038CA 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000038CE                            
000038CE                            LevSel_NoMove:
000038CE 4E75                       		rts	
000038D0                            ; End of function LevSelControls
000038D0                            
000038D0                            ; ---------------------------------------------------------------------------
000038D0                            ; Subroutine to load level select text
000038D0                            ; ---------------------------------------------------------------------------
000038D0                            
000038D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038D0                            
000038D0                            LevSelTextLoad_loop:
000038D0 2D44 0004                  		move.l	d4,4(a6)
000038D4 6100 0000                  		bsr.w	LevSel_ChgLine
000038D8 0684 0080 0000             		addi.l	#$800000,d4
000038DE 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000038E2 4E75                       		rts
000038E4                            LevSelTextLoad:				; XREF: TitleScreen
000038E4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000038EA 4DF9 00C0 0000             		lea	($C00000).l,a6
000038F0 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038F4 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000038FA                            		
000038FA 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000038FE 61D0                       		bsr.s	LevSelTextLoad_loop
00003900                            		
00003900                            		
00003900 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003906 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000390A 61C4                       		bsr.s	LevSelTextLoad_loop
0000390C 363C C65F                  		move.w	#$C680-$21,d3
00003910                            		
00003910                            LevSelHighlightCode:
00003910 4DF9 00C0 0000             		lea	($C00000).l,a6
00003916 7000                       		moveq	#0,d0
00003918 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000391C 3200                       		move.w	d0,d1
0000391E 283C 6086 0003             		move.l	#lsscrpos,d4
00003924                            		
00003924 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003928 6D00                       		blt.s	@notsecond
0000392A                            		
0000392A 0440 0000                  		sub.w	#lsrow1size,d0
0000392E 0684 0024 0000             		addi.l	#lsoff,d4
00003934                            	@notsecond:
00003934 EF48                       		lsl.w	#7,d0
00003936 4840                       		swap	d0
00003938 D880                       		add.l	d0,d4
0000393A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003940 E749                       		lsl.w	#3,d1
00003942 D241                       		add.w	d1,d1
00003944 D2C1                       		adda.w	d1,a1
00003946 2D44 0004                  		move.l	d4,4(a6)
0000394A 6100 0000                  		bsr.w	LevSel_ChgLine
0000394E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003954 6700                       		beq.s	LevSelSndTest
00003956 4E75                       		rts
00003958                            
00003958                            LevSelSndTest:
00003958 0643 0030                  		add.w	#$30,d3
0000395C 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003966 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000396A 1400                       		move.b	d0,d2
0000396C E808                       		lsr.b	#4,d0
0000396E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003972 1002                       		move.b	d2,d0
00003974 6100 0000                  		bsr.w	LevSel_ChgSnd
00003978 4E75                       		rts	
0000397A                            ; End of function LevSelTextLoad
0000397A                            
0000397A                            
0000397A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000397A                            
0000397A                            
0000397A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000397A 0240 000F                  		andi.w	#$F,d0
0000397E 0C00 000A                  		cmpi.b	#$A,d0
00003982 6500                       		bcs.s	loc_3580
00003984 5E00                       		addi.b	#7,d0
00003986                            
00003986                            loc_3580:
00003986 D043                       		add.w	d3,d0
00003988 3C80                       		move.w	d0,(a6)
0000398A 4E75                       		rts	
0000398C                            ; End of function LevSel_ChgSnd
0000398C                            
0000398C                            
0000398C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000398C                            
0000398C                            
0000398C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000398C 740F                       		moveq	#$10-1,d2		; number of characters per line
0000398E                            
0000398E                            @loop:
0000398E 7000                       		moveq	#0,d0
00003990 1019                       		move.b	(a1)+,d0
00003992 0C00 0020                  		cmpi.b	#$20,d0
00003996 6E00                       		bgt.s	@draw
00003998 3CBC 0000                  		move.w	#0,(a6)
0000399C 51CA FFF0                  		dbf	d2,@loop
000039A0 4E75                       		rts	
000039A2                            ; ===========================================================================
000039A2                            
000039A2                            @draw:				; XREF: LevSel_ChgLine
000039A2 D043                       		add.w	d3,d0
000039A4 3C80                       		move.w	d0,(a6)
000039A6 51CA FFE6                  		dbf	d2,@loop
000039AA 4E75                       		rts	
000039AC                            ; End of function LevSel_ChgLine
000039AC                            		
000039AC                            CStringSlop_draw:
000039AC D043                       		add.w	d3,d0
000039AE 3C80                       		move.w	d0,(a6)
000039B0                            CStringSlop:				; XREF: LevSelTextLoad
000039B0 7000                       		moveq	#0,d0
000039B2 1019                       		move.b	(a1)+,d0
000039B4 0C00 0020                  		cmpi.b	#$20,d0
000039B8 6EF2                       		bgt.s	CStringSlop_draw
000039BA                            		
000039BA 0C00 0001                  		cmpi.b	#1,d0
000039BE 6700                       		beq.s	@InsertSpaces
000039C0 6500                       		blo.s	@end
000039C2                            		
000039C2 3CBC 0000                  		move.w	#0,(a6)
000039C6 60E8                       		bra.s	CStringSlop
000039C8                            	@end:
000039C8 4E75                       		rts
000039CA                            	@InsertSpaces:
000039CA 7000                       		moveq	#0,d0
000039CC 1019                       		move.b	(a1)+,d0
000039CE                            		
000039CE                            	@insert:
000039CE 3CBC 0000                  		move.w	#0,(a6)
000039D2 51C8 FFFA                  		dbf.w	d0,@insert
000039D6 60D8                       		bra.s	CStringSlop
000039D8                            ; End of function LevSel_ChgLine
000039D8                            
000039D8                            ; ===========================================================================
000039D8                            ; ---------------------------------------------------------------------------
000039D8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000039D8                            ; ---------------------------------------------------------------------------
000039D8                            LevelMenuText:	
000039D8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000039E8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039F8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A08 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A18 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A28 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A38 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003A48 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A58 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A68 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003A78 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A88 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A98                            LMTSecondRow:
00003A98 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003AA8 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003AB8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AC8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003AD8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AE8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AF8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B08 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B18 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B28 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003B38 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B48                            LMTSelectableEnd:
00003B48 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003B58                            LMTEnd:
00003B58                            
00003B58                            Now_Playing:
00003B58 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003B68                            		even
00003B68                            NP_Track:
00003B68 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003B70                            		even
00003B70                            NP_SFX:
00003B70 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003B78                            		even
00003B78                            
00003B78                            ShowNow_Playing:
00003B78 1C00                       		move.b	d0,d6
00003B7A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003B7E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003B82 4DF9 00C0 0000             		lea		($C00000).l,a6
00003B88 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003B90 6100 FE1E                  		bsr.w	CStringSlop
00003B94                            		
00003B94 43FA FFD2                  		lea	NP_Track(pc),a1
00003B98 0C06 00A0                  		cmpi.b	#$A0,d6
00003B9C 6D00                       		blt.s	@track
00003B9E                            		
00003B9E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003BA2                            	@track:
00003BA2 6100 FE0C                  		bsr.w	CStringSlop
00003BA6                            		
00003BA6 0643 0030                  		add.w	#$30,d3
00003BAA 1006                       		move.b	d6,d0
00003BAC 1400                       		move.b	d0,d2
00003BAE E808                       		lsr.b	#4,d0
00003BB0 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003BB4 1002                       		move.b	d2,d0
00003BB6 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003BBA 4E75                       		rts	
00003BBC                            
00003BBC                            ; 1 is insert spaces btw
00003BBC                            Controls_Normal:
00003BBC 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003BC8                            		even		
00003BC8                            Controls_SND:
00003BC8 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003BEE 00                         		even
00003BEE                            ; ---------------------------------------------------------------------------
00003BEE                            ; Music	playlist
00003BEE                            ; ---------------------------------------------------------------------------
00003BEE                            MusicList1:	incbin	misc\muslist1.bin
00003BF6                            		even
00003BF6                            MusicList2:	incbin	misc\muslist2.bin
00003BFC                            		even
00003BFC                            MusicList3:	incbin	misc\muslist3.bin
00003C02                            		even
00003C02                            MusicList4:	incbin	misc\muslist4.bin
00003C08                            		even
00003C08                            ; ===========================================================================
00003C08                            
00003C08                            ; ---------------------------------------------------------------------------
00003C08                            ; Level
00003C08                            ; ---------------------------------------------------------------------------
00003C08                            
00003C08                            Level:					; XREF: GameModeArray
00003C08 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C0E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C12 6B00                       		bmi.s	loc_37B6
00003C14 103C 00E0                  		move.b	#$E0,d0
00003C18 6100 D9A6                  		bsr.w	PlaySound_Special ; fade out music
00003C1C                            
00003C1C                            loc_37B6:
00003C1C 6100 DBE4                  		bsr.w	ClearPLC
00003C20 6100 E41A                  		bsr.w	Pal_FadeFrom
00003C24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C28 6B00                       		bmi.s	Level_ClrRam
00003C2A 46FC 2700                  		move	#$2700,sr
00003C2E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C38 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C3E 6100 DA24                  		bsr.w	NemDec
00003C42 46FC 2300                  		move	#$2300,sr
00003C46 7000                       		moveq	#0,d0
00003C48 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C4C E948                       		lsl.w	#4,d0
00003C4E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C54 45F2 0000                  		lea	(a2,d0.w),a2
00003C58 7000                       		moveq	#0,d0
00003C5A 1012                       		move.b	(a2),d0
00003C5C 6700                       		beq.s	loc_37FC
00003C5E 6100 DB44                  		bsr.w	LoadPLC		; load level patterns
00003C62                            
00003C62                            loc_37FC:
00003C62 7001                       		moveq	#1,d0
00003C64 6100 DB3E                  		bsr.w	LoadPLC		; load standard	patterns
00003C68                            
00003C68                            Level_ClrRam:
00003C68 43F8 D000                  		lea	($FFFFD000).w,a1
00003C6C 7000                       		moveq	#0,d0
00003C6E 323C 07FF                  		move.w	#$7FF,d1
00003C72                            
00003C72                            Level_ClrObjRam:
00003C72 22C0                       		move.l	d0,(a1)+
00003C74 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C78                            
00003C78 43F8 F628                  		lea	($FFFFF628).w,a1
00003C7C 7000                       		moveq	#0,d0
00003C7E 323C 0015                  		move.w	#$15,d1
00003C82                            
00003C82                            Level_ClrVars:
00003C82 22C0                       		move.l	d0,(a1)+
00003C84 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C88                            
00003C88 43F8 F700                  		lea	($FFFFF700).w,a1
00003C8C 7000                       		moveq	#0,d0
00003C8E 323C 003F                  		move.w	#$3F,d1
00003C92                            
00003C92                            Level_ClrVars2:
00003C92 22C0                       		move.l	d0,(a1)+
00003C94 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C98                            
00003C98 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C9C 7000                       		moveq	#0,d0
00003C9E 323C 0047                  		move.w	#$47,d1
00003CA2                            
00003CA2                            Level_ClrVars3:
00003CA2 22C0                       		move.l	d0,(a1)+
00003CA4 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003CA8                            
00003CA8 46FC 2700                  		move	#$2700,sr
00003CAC 6100 D83A                  		bsr.w	ClearScreen
00003CB0 4DF9 00C0 0004             		lea	($C00004).l,a6
00003CB6 3CBC 8B03                  		move.w	#$8B03,(a6)
00003CBA 3CBC 8230                  		move.w	#$8230,(a6)
00003CBE 3CBC 8407                  		move.w	#$8407,(a6)
00003CC2 3CBC 857C                  		move.w	#$857C,(a6)
00003CC6 3CBC 9001                  		move.w	#$9001,(a6)
00003CCA 3CBC 8004                  		move.w	#$8004,(a6)
00003CCE 3CBC 8720                  		move.w	#$8720,(a6)
00003CD2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003CD8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003CDC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CE2 6600                       		bne.s	Level_LoadPal	; if not, branch
00003CE4 3CBC 8014                  		move.w	#$8014,(a6)
00003CE8 7000                       		moveq	#0,d0
00003CEA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CEE D040                       		add.w	d0,d0
00003CF0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CF6 3031 0000                  		move.w	(a1,d0.w),d0
00003CFA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CFE 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D02 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D06 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D0A 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D0E 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D14 6000 0000                  		bra.w	Level_LoadPal
00003D18                            Player_Palette:
00003D18                            		; normal, lz, sbz, blank
00003D18 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D20                            		
00003D20 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D28                            		; add more player palettes
00003D28                            Level_LoadPal:
00003D28 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D2E 46FC 2300                  		move	#$2300,sr
00003D32                            
00003D32 7200                       		moveq	#0,d1
00003D34 1238 FFE8                  		move.b	(v_character),d1
00003D38 D241                       		add.w	d1,d1
00003D3A D241                       		add.w	d1,d1
00003D3C D241                       		add.w	d1,d1
00003D3E 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D42                            		
00003D42 6100 E5BE                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D46 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D4C 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D4E 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D52 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D58 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D5A 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D5E                            
00003D5E                            Level_WaterPal:
00003D5E 6100 E5BA                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D62 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D66 6700                       		beq.s	Level_GetBgm
00003D68 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D6E                            
00003D6E                            ; NineKode begins here - How to play different songs on different acts
00003D6E                             
00003D6E                            Level_GetBgm:
00003D6E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D72 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C                             
00003D7C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D82 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D84 43F9 0000 3BEE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D8A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D8C                             
00003D8C                            Level_GetBgm2:
00003D8C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D92 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D94 43F9 0000 3BF6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D9A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D9C                             
00003D9C                            Level_GetBgm3:
00003D9C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003DA2 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003DA4 43F9 0000 3BFC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003DAA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DAC                             
00003DAC                            Level_GetBgm4:
00003DAC 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003DB2 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003DB4 43F9 0000 3C02             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003DBA                             
00003DBA                            Level_PlayBgm:
00003DBA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003DBE 6100 D7FA                  		bsr.w	PlaySound	; play music
00003DC2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003DC8                             
00003DC8                            ; NineKode ends here
00003DC8                            
00003DC8                            Level_TtlCard:
00003DC8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003DCE 6100 EE62                  		bsr.w	DelayProgram
00003DD2 4EB9 0000 0000             		jsr	ObjectsLoad
00003DD8 4EB9 0000 0000             		jsr	BuildSprites
00003DDE 6100 DA30                  		bsr.w	RunPLC_RAM
00003DE2 3038 D108                  		move.w	($FFFFD108).w,d0
00003DE6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DEA 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DEC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DF0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DF2 4EB9 0000 0000             		jsr	Hud_Base
00003DF8                            
00003DF8                            loc_3946:
00003DF8 7003                       		moveq	#3,d0
00003DFA 6100 E4EA                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DFE 6100 0000                  		bsr.w	LevelSizeLoad
00003E02 6100 0000                  		bsr.w	DeformBgLayer
00003E06 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E0C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E10 6100 0000                  		bsr.w	LoadTilesFromStart
00003E14 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E1A 6100 0000                  		bsr.w	ColIndexLoad
00003E1E 6100 0000                  		bsr.w	LZWaterEffects
00003E22 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E28 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E2C 6B00                       		bmi.s	Level_ChkDebug
00003E2E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E34                            
00003E34                            Level_ChkDebug:
00003E34 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E38 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E3A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E40 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E42 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E48                            
00003E48                            Level_ChkWater:
00003E48 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E4E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E54 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E5A 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E5C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E62 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E68 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E6E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E74                            
00003E74                            Level_LoadObj:
00003E74 4EB9 0000 0000             		jsr	ObjPosLoad
00003E7A 4EB9 0000 0000             		jsr	ObjectsLoad
00003E80 4EB9 0000 0000             		jsr	BuildSprites
00003E86 7000                       		moveq	#0,d0
00003E88 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E8C 6600                       		bne.s	loc_39E8	; if yes, branch
00003E8E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E92 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E96 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E9A                            
00003E9A                            loc_39E8:
00003E9A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E9E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003EA2 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003EA6 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003EAA                            		; move.b	d0,($FFFFFE2F).w
00003EAA 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003EB0 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003EB4 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003EB8 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003EBC 6100 0000                  		bsr.w	OscillateNumInit
00003EC0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EC6 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003ECC 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003ED2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003ED8 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003EDE 7000                       		moveq	#0,d0
00003EE0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003EE4 E548                       		lsl.w	#2,d0
00003EE6 2271 0000                  		movea.l	(a1,d0.w),a1
00003EEA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003EEE 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003EF0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003EF6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EFA 5340                       		subq.w	#1,d0
00003EFC E548                       		lsl.w	#2,d0
00003EFE 2271 0000                  		movea.l	(a1,d0.w),a1
00003F02                            
00003F02                            Level_Demo:
00003F02 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F08 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F0C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F12 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F16 6A00                       		bpl.s	Level_ChkWaterPal
00003F18 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F1E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F24 6600                       		bne.s	Level_ChkWaterPal
00003F26 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F2C                            
00003F2C                            Level_ChkWaterPal:
00003F2C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F32 6600                       		bne.s	Level_Delay	; if not, branch
00003F34 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F36 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F3C 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F3E 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F40                            
00003F40                            Level_WaterPal2:
00003F40 6100 E3F4                  		bsr.w	PalLoad4_Water
00003F44                            
00003F44                            Level_Delay:
00003F44 323C 0003                  		move.w	#3,d1
00003F48                            
00003F48                            Level_DelayLoop:
00003F48 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F4E 6100 ECE2                  		bsr.w	DelayProgram
00003F52 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F56                            
00003F56 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F5C 6100 E03E                  		bsr.w	Pal_FadeTo2
00003F60 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F64 6B00                       		bmi.s	Level_ClrCardArt
00003F66 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F6A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F6E 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F72 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F76 6000                       		bra.s	Level_StartGame
00003F78                            ; ===========================================================================
00003F78                            
00003F78                            Level_ClrCardArt:
00003F78 7002                       		moveq	#2,d0
00003F7A 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003F80 7000                       		moveq	#0,d0
00003F82 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F86 0640 0015                  		addi.w	#$15,d0
00003F8A 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F90                            
00003F90                            Level_StartGame:
00003F90 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F96                            
00003F96                            ; ---------------------------------------------------------------------------
00003F96                            ; Main level loop (when	all title card and loading sequences are finished)
00003F96                            ; ---------------------------------------------------------------------------
00003F96                            
00003F96                            Level_MainLoop:
00003F96 6100 D634                  		bsr.w	PauseGame
00003F9A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FA0 6100 EC90                  		bsr.w	DelayProgram
00003FA4 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003FA8 6100 0000                  		bsr.w	MoveSonicInDemo
00003FAC 6100 0000                  		bsr.w	LZWaterEffects
00003FB0 4EB9 0000 0000             		jsr	ObjectsLoad
00003FB6 4A78 FE08                  		tst.w	($FFFFFE08).w
00003FBA 6600                       		bne.s	loc_3B10
00003FBC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FC2 6400                       		bcc.s	loc_3B14
00003FC4                            
00003FC4                            loc_3B10:
00003FC4 6100 0000                  		bsr.w	DeformBgLayer
00003FC8                            
00003FC8                            loc_3B14:
00003FC8 4EB9 0000 0000             		jsr	BuildSprites
00003FCE 4EB9 0000 0000             		jsr	ObjPosLoad
00003FD4 6100 DB8A                  		bsr.w	PalCycle_Load
00003FD8 6100 D836                  		bsr.w	RunPLC_RAM
00003FDC 6100 0000                  		bsr.w	OscillateNumDo
00003FE0 6100 0000                  		bsr.w	ChangeRingFrame
00003FE4 6100 0000                  		bsr.w	SignpostArtLoad
00003FE8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FEE 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FF0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FF4 6600 FC12                  		bne.w	Level		; if yes, branch
00003FF8 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FFE 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004002 4E75                       		rts	
00004004                            ; ===========================================================================
00004004                            
00004004                            Level_ChkDemo:				; XREF: Level_MainLoop
00004004 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004008 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000400A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000400E 6700                       		beq.s	Level_EndDemo	; if not, branch
00004010 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004016 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000401A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004020 4E75                       		rts	
00004022                            ; ===========================================================================
00004022                            
00004022                            Level_EndDemo:				; XREF: Level_ChkDemo
00004022 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004028 6600                       		bne.s	loc_3B88	; if not, branch
0000402A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004030 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004034 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004036 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000403C                            
0000403C                            loc_3B88:
0000403C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004042 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004048 4278 F794                  		clr.w	($FFFFF794).w
0000404C                            
0000404C                            loc_3B98:
0000404C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004052 6100 EBDE                  		bsr.w	DelayProgram
00004056 6100 0000                  		bsr.w	MoveSonicInDemo
0000405A 4EB9 0000 0000             		jsr	ObjectsLoad
00004060 4EB9 0000 0000             		jsr	BuildSprites
00004066 4EB9 0000 0000             		jsr	ObjPosLoad
0000406C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004070 6A00                       		bpl.s	loc_3BC8
00004072 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004078 6100 DFE2                  		bsr.w	Pal_FadeOut
0000407C                            
0000407C                            loc_3BC8:
0000407C 4A78 F614                  		tst.w	($FFFFF614).w
00004080 66CA                       		bne.s	loc_3B98
00004082 4E75                       		rts	
00004084                            ; ===========================================================================
00004084                            ; ---------------------------------------------------------------------------
00004084                            ; Subroutine to	do special water effects in Labyrinth Zone
00004084                            ; ---------------------------------------------------------------------------
00004084                            
00004084                            LZWaterEffects:				; XREF: Level
00004084 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000408A 6600                       		bne.s	locret_3C28	; if not, branch
0000408C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004092 6400                       		bcc.s	LZMoveWater
00004094 6100 0000                  		bsr.w	LZWindTunnels
00004098 6100 0000                  		bsr.w	LZWaterSlides
0000409C 6100 0000                  		bsr.w	LZDynamicWater
000040A0                            
000040A0                            LZMoveWater:
000040A0 4238 F64E                  		clr.b	($FFFFF64E).w
000040A4 7000                       		moveq	#0,d0
000040A6 1038 FE60                  		move.b	($FFFFFE60).w,d0
000040AA E248                       		lsr.w	#1,d0
000040AC D078 F648                  		add.w	($FFFFF648).w,d0
000040B0 31C0 F646                  		move.w	d0,($FFFFF646).w
000040B4 3038 F646                  		move.w	($FFFFF646).w,d0
000040B8 9078 F704                  		sub.w	($FFFFF704).w,d0
000040BC 6400                       		bcc.s	loc_3C1A
000040BE 4A40                       		tst.w	d0
000040C0 6A00                       		bpl.s	loc_3C1A
000040C2 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040C8 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040CE                            
000040CE                            loc_3C1A:
000040CE 0C40 00DF                  		cmpi.w	#$DF,d0
000040D2 6500                       		bcs.s	loc_3C24
000040D4 303C 00DF                  		move.w	#$DF,d0
000040D8                            
000040D8                            loc_3C24:
000040D8 11C0 F625                  		move.b	d0,($FFFFF625).w
000040DC                            
000040DC                            locret_3C28:
000040DC 4E75                       		rts	
000040DE                            ; ===========================================================================
000040DE                            ; ---------------------------------------------------------------------------
000040DE                            ; Labyrinth default water heights
000040DE                            ; ---------------------------------------------------------------------------
000040DE                            WaterHeight:	incbin	misc\lz_heigh.bin
000040E6                            		even
000040E6                            ; ===========================================================================
000040E6                            
000040E6                            ; ---------------------------------------------------------------------------
000040E6                            ; Labyrinth dynamic water routines
000040E6                            ; ---------------------------------------------------------------------------
000040E6                            
000040E6                            LZDynamicWater:				; XREF: LZWaterEffects
000040E6 7000                       		moveq	#0,d0
000040E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040EC D040                       		add.w	d0,d0
000040EE 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040F2 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040F6 7200                       		moveq	#0,d1
000040F8 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040FC 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004100 9078 F648                  		sub.w	($FFFFF648).w,d0
00004104 6700                       		beq.s	locret_3C5A
00004106 6400                       		bcc.s	loc_3C56
00004108 4441                       		neg.w	d1
0000410A                            
0000410A                            loc_3C56:
0000410A D378 F648                  		add.w	d1,($FFFFF648).w
0000410E                            
0000410E                            locret_3C5A:
0000410E 4E75                       		rts	
00004110                            ; ===========================================================================
00004110 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004112 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004114 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004116 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004118                            ; ===========================================================================
00004118                            
00004118                            DynWater_LZ1:				; XREF: DynWater_Index
00004118 3038 F700                  		move.w	($FFFFF700).w,d0
0000411C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004120 6600                       		bne.s	loc_3CD0
00004122 323C 00B8                  		move.w	#$B8,d1
00004126 0C40 0600                  		cmpi.w	#$600,d0
0000412A 6500                       		bcs.s	loc_3CB4
0000412C 323C 0108                  		move.w	#$108,d1
00004130 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004136 6500                       		bcs.s	loc_3CBA
00004138 0C40 0C00                  		cmpi.w	#$C00,d0
0000413C 6500                       		bcs.s	loc_3CB4
0000413E 323C 0318                  		move.w	#$318,d1
00004142 0C40 1080                  		cmpi.w	#$1080,d0
00004146 6500                       		bcs.s	loc_3CB4
00004148 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000414E 323C 05C8                  		move.w	#$5C8,d1
00004152 0C40 1380                  		cmpi.w	#$1380,d0
00004156 6500                       		bcs.s	loc_3CB4
00004158 323C 03A8                  		move.w	#$3A8,d1
0000415C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004160 6600                       		bne.s	loc_3CB4
00004162 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004168                            
00004168                            loc_3CB4:
00004168 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000416C 4E75                       		rts	
0000416E                            ; ===========================================================================
0000416E                            
0000416E                            loc_3CBA:				; XREF: DynWater_LZ1
0000416E 0C40 0C80                  		cmpi.w	#$C80,d0
00004172 65F4                       		bcs.s	loc_3CB4
00004174 323C 00E8                  		move.w	#$E8,d1
00004178 0C40 1500                  		cmpi.w	#$1500,d0
0000417C 65EA                       		bcs.s	loc_3CB4
0000417E 323C 0108                  		move.w	#$108,d1
00004182 60E4                       		bra.s	loc_3CB4
00004184                            ; ===========================================================================
00004184                            
00004184                            loc_3CD0:				; XREF: DynWater_LZ1
00004184 5302                       		subq.b	#1,d2
00004186 6600                       		bne.s	locret_3CF4
00004188 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000418E 6400                       		bcc.s	locret_3CF4
00004190 323C 03A8                  		move.w	#$3A8,d1
00004194 0C40 1300                  		cmpi.w	#$1300,d0
00004198 6500                       		bcs.s	loc_3CF0
0000419A 323C 0108                  		move.w	#$108,d1
0000419E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041A4                            
000041A4                            loc_3CF0:
000041A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041A8                            
000041A8                            locret_3CF4:
000041A8 4E75                       		rts	
000041AA                            ; ===========================================================================
000041AA                            
000041AA                            DynWater_LZ2:				; XREF: DynWater_Index
000041AA 3038 F700                  		move.w	($FFFFF700).w,d0
000041AE 323C 0328                  		move.w	#$328,d1
000041B2 0C40 0500                  		cmpi.w	#$500,d0
000041B6 6500                       		bcs.s	loc_3D12
000041B8 323C 03C8                  		move.w	#$3C8,d1
000041BC 0C40 0B00                  		cmpi.w	#$B00,d0
000041C0 6500                       		bcs.s	loc_3D12
000041C2 323C 0428                  		move.w	#$428,d1
000041C6                            
000041C6                            loc_3D12:
000041C6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041CA 4E75                       		rts	
000041CC                            ; ===========================================================================
000041CC                            
000041CC                            DynWater_LZ3:				; XREF: DynWater_Index
000041CC 3038 F700                  		move.w	($FFFFF700).w,d0
000041D0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041D4 6600                       		bne.s	loc_3D5E
000041D6 323C 0500                  		move.w	#$500,d1
000041DA 0C40 0600                  		cmpi.w	#$600,d0
000041DE 6500                       		bcs.s	loc_3D54
000041E0 0C40 1B00                  		cmpi.w	#$1B00,d0
000041E4 6500                       		bcs.s	loc_3D54
000041E6 323C 0850                  		move.w	#$850,d1
000041EA                            
000041EA                            loc_3D54:
000041EA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041EE 31C1 F648                  		move.w	d1,($FFFFF648).w
000041F2 4E75                       		rts	
000041F4                            ; ===========================================================================
000041F4                            
000041F4                            loc_3D5E:				; XREF: DynWater_LZ3
000041F4 5302                       		subq.b	#1,d2
000041F6 6600                       		bne.s	loc_3DA8
000041F8 323C 04C8                  		move.w	#$4C8,d1
000041FC 0C40 0770                  		cmpi.w	#$770,d0
00004200 6500                       		bcs.s	loc_3DA2
00004202 323C 0308                  		move.w	#$308,d1
00004206 0C40 1400                  		cmpi.w	#$1400,d0
0000420A 6500                       		bcs.s	loc_3DA2
0000420C 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004212 6700                       		beq.s	loc_3D8E
00004214 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000421A 6400                       		bcc.s	loc_3D8E
0000421C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004222 6400                       		bcc.s	loc_3DA2
00004224                            
00004224                            loc_3D8E:
00004224 323C 0508                  		move.w	#$508,d1
00004228 31C1 F648                  		move.w	d1,($FFFFF648).w
0000422C 0C40 1770                  		cmpi.w	#$1770,d0
00004230 6500                       		bcs.s	loc_3DA2
00004232 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004238                            
00004238                            loc_3DA2:
00004238 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000423C 4E75                       		rts	
0000423E                            ; ===========================================================================
0000423E                            
0000423E                            loc_3DA8:
0000423E 5302                       		subq.b	#1,d2
00004240 6600                       		bne.s	loc_3DD2
00004242 323C 0508                  		move.w	#$508,d1
00004246 0C40 1860                  		cmpi.w	#$1860,d0
0000424A 6500                       		bcs.s	loc_3DCC
0000424C 323C 0188                  		move.w	#$188,d1
00004250 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004254 6400                       		bcc.s	loc_3DC6
00004256 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000425A 6600                       		bne.s	loc_3DCC
0000425C                            
0000425C                            loc_3DC6:
0000425C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004262                            
00004262                            loc_3DCC:
00004262 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004266 4E75                       		rts	
00004268                            ; ===========================================================================
00004268                            
00004268                            loc_3DD2:
00004268 5302                       		subq.b	#1,d2
0000426A 6600                       		bne.s	loc_3E0E
0000426C 323C 0188                  		move.w	#$188,d1
00004270 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004274 6500                       		bcs.s	loc_3E04
00004276 323C 0900                  		move.w	#$900,d1
0000427A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000427E 6500                       		bcs.s	loc_3E04
00004280 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004286 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000428C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004292 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004298 4E75                       		rts	
0000429A                            ; ===========================================================================
0000429A                            
0000429A                            loc_3E04:
0000429A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000429E 31C1 F648                  		move.w	d1,($FFFFF648).w
000042A2 4E75                       		rts	
000042A4                            ; ===========================================================================
000042A4                            
000042A4                            loc_3E0E:
000042A4 0C40 1E00                  		cmpi.w	#$1E00,d0
000042A8 6500                       		bcs.s	locret_3E1A
000042AA 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000042B0                            
000042B0                            locret_3E1A:
000042B0 4E75                       		rts	
000042B2                            ; ===========================================================================
000042B2                            
000042B2                            DynWater_SBZ3:				; XREF: DynWater_Index
000042B2 323C 0228                  		move.w	#$228,d1
000042B6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000042BC 6500                       		bcs.s	loc_3E2C
000042BE 323C 04C8                  		move.w	#$4C8,d1
000042C2                            
000042C2                            loc_3E2C:
000042C2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042C6 4E75                       		rts
000042C8                            
000042C8                            ; ---------------------------------------------------------------------------
000042C8                            ; Labyrinth Zone "wind tunnels"	subroutine
000042C8                            ; ---------------------------------------------------------------------------
000042C8                            
000042C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042C8                            
000042C8                            
000042C8                            LZWindTunnels:				; XREF: LZWaterEffects
000042C8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042CC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000042D0 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000042D6 7000                       		moveq	#0,d0
000042D8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042DC E748                       		lsl.w	#3,d0
000042DE D4C0                       		adda.w	d0,a2
000042E0 7200                       		moveq	#0,d1
000042E2 4A38 FE11                  		tst.b	($FFFFFE11).w
000042E6 6600                       		bne.s	loc_3E56
000042E8 7201                       		moveq	#1,d1
000042EA 514A                       		subq.w	#8,a2
000042EC                            
000042EC                            loc_3E56:
000042EC 43F8 D000                  		lea	($FFFFD000).w,a1
000042F0                            
000042F0                            LZWind_Loop:
000042F0 3029 0008                  		move.w	8(a1),d0
000042F4 B052                       		cmp.w	(a2),d0
000042F6 6500 0000                  		bcs.w	loc_3EF4
000042FA B06A 0004                  		cmp.w	4(a2),d0
000042FE 6400 0000                  		bcc.w	loc_3EF4
00004302 3429 000C                  		move.w	$C(a1),d2
00004306 B46A 0002                  		cmp.w	2(a2),d2
0000430A 6500                       		bcs.s	loc_3EF4
0000430C B46A 0006                  		cmp.w	6(a2),d2
00004310 6400                       		bcc.s	loc_3EF4
00004312 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004316 0200 003F                  		andi.b	#$3F,d0
0000431A 6600                       		bne.s	loc_3E90
0000431C 303C 00D0                  		move.w	#$D0,d0
00004320 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004326                            
00004326                            loc_3E90:
00004326 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000432A 6600 0000                  		bne.w	locret_3F0A
0000432E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004334 6400                       		bcc.s	loc_3F06
00004336 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000433C 0440 0080                  		subi.w	#$80,d0
00004340 B052                       		cmp.w	(a2),d0
00004342 6400                       		bcc.s	LZWind_Move
00004344 7002                       		moveq	#2,d0
00004346 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000434C 6600                       		bne.s	loc_3EBA
0000434E 4440                       		neg.w	d0
00004350                            
00004350                            loc_3EBA:
00004350 D169 000C                  		add.w	d0,$C(a1)
00004354                            
00004354                            LZWind_Move:
00004354 5869 0008                  		addq.w	#4,8(a1)
00004358 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000435E 337C 0000 0012             		move.w	#0,$12(a1)
00004364 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000436A 08E9 0001 0022             		bset	#1,$22(a1)
00004370 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004376 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004378 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000437C                            
0000437C                            LZWind_MoveDown:
0000437C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004382 6700                       		beq.s	locret_3EF2	; if not, branch
00004384 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004388                            
00004388                            locret_3EF2:
00004388 4E75                       		rts	
0000438A                            ; ===========================================================================
0000438A                            
0000438A                            loc_3EF4:				; XREF: LZWindTunnels
0000438A 504A                       		addq.w	#8,a2
0000438C 51C9 FF62                  		dbf	d1,LZWind_Loop
00004390 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004394 6700                       		beq.s	locret_3F0A
00004396 137C 0000 001C             		move.b	#0,$1C(a1)
0000439C                            
0000439C                            loc_3F06:
0000439C 4238 F7C7                  		clr.b	($FFFFF7C7).w
000043A0                            
000043A0                            locret_3F0A:
000043A0 4E75                       		rts	
000043A2                            ; End of function LZWindTunnels
000043A2                            
000043A2                            ; ===========================================================================
000043A2 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000043AA 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000043BC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000043CA                            					; XREF: LZWindTunnels
000043CA                            		even
000043CA                            
000043CA                            ; ---------------------------------------------------------------------------
000043CA                            ; Labyrinth Zone water slide subroutine
000043CA                            ; ---------------------------------------------------------------------------
000043CA                            
000043CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043CA                            
000043CA                            
000043CA                            LZWaterSlides:				; XREF: LZWaterEffects
000043CA 43F8 D000                  		lea	($FFFFD000).w,a1
000043CE 0829 0001 0022             		btst	#1,$22(a1)
000043D4 6600                       		bne.s	loc_3F6A
000043D6 3029 000C                  		move.w	$C(a1),d0
000043DA E248                       		lsr.w	#1,d0
000043DC 0240 0380                  		andi.w	#$380,d0
000043E0 1229 0008                  		move.b	8(a1),d1
000043E4 0241 007F                  		andi.w	#$7F,d1
000043E8 D041                       		add.w	d1,d0
000043EA 45F8 A400                  		lea	($FFFFA400).w,a2
000043EE 1032 0000                  		move.b	(a2,d0.w),d0
000043F2 45FA 0000                  		lea	byte_3FCF(pc),a2
000043F6 7206                       		moveq	#6,d1
000043F8                            
000043F8                            loc_3F62:
000043F8 B022                       		cmp.b	-(a2),d0
000043FA 57C9 FFFC                  		dbeq	d1,loc_3F62
000043FE 6700                       		beq.s	LZSlide_Move
00004400                            
00004400                            loc_3F6A:
00004400 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004404 6700                       		beq.s	locret_3F7A
00004406 337C 0005 003E             		move.w	#5,$3E(a1)
0000440C 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004410                            
00004410                            locret_3F7A:
00004410 4E75                       		rts	
00004412                            ; ===========================================================================
00004412                            
00004412                            LZSlide_Move:				; XREF: LZWaterSlides
00004412 0C41 0003                  		cmpi.w	#3,d1
00004416 6400                       		bcc.s	loc_3F84
00004418 4E71                       		nop	
0000441A                            
0000441A                            loc_3F84:
0000441A 08A9 0000 0022             		bclr	#0,$22(a1)
00004420 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004424 1340 0014                  		move.b	d0,$14(a1)
00004428 6A00                       		bpl.s	loc_3F9A
0000442A 08E9 0000 0022             		bset	#0,$22(a1)
00004430                            
00004430                            loc_3F9A:
00004430 4229 0015                  		clr.b	$15(a1)
00004434 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000443A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004440 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004444 0200 001F                  		andi.b	#$1F,d0
00004448 6600                       		bne.s	locret_3FBE
0000444A 303C 00D0                  		move.w	#$D0,d0
0000444E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
00004454                            
00004454                            locret_3FBE:
00004454 4E75                       		rts	
00004456                            ; End of function LZWaterSlides
00004456                            
00004456                            ; ===========================================================================
00004456 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004465 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004466                            		even
00004466                            
00004466                            ; ---------------------------------------------------------------------------
00004466                            ; Subroutine to	move Sonic in demo mode
00004466                            ; ---------------------------------------------------------------------------
00004466                            
00004466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004466                            
00004466                            
00004466                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004466 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000446A 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000446C 4E75                       		rts	
0000446E                            ; ===========================================================================
0000446E                            
0000446E                            ; This is an unused subroutine for recording a demo
0000446E                            
0000446E                            MoveDemo_Record:
0000446E 43F9 0008 0000             		lea	($80000).l,a1
00004474 3038 F790                  		move.w	($FFFFF790).w,d0
00004478 D2C0                       		adda.w	d0,a1
0000447A 1038 F604                  		move.b	($FFFFF604).w,d0
0000447E B011                       		cmp.b	(a1),d0
00004480 6600                       		bne.s	loc_3FFA
00004482 5229 0001                  		addq.b	#1,1(a1)
00004486 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000448C 6700                       		beq.s	loc_3FFA
0000448E 4E75                       		rts	
00004490                            ; ===========================================================================
00004490                            
00004490                            loc_3FFA:				; XREF: MoveDemo_Record
00004490 1340 0002                  		move.b	d0,2(a1)
00004494 137C 0000 0003             		move.b	#0,3(a1)
0000449A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000449E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000044A4 4E75                       		rts	
000044A6                            ; ===========================================================================
000044A6                            
000044A6                            MoveDemo_On:				; XREF: MoveSonicInDemo
000044A6 4A38 F604                  		tst.b	($FFFFF604).w
000044AA 6A00                       		bpl.s	loc_4022
000044AC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044B0 6B00                       		bmi.s	loc_4022
000044B2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000044B8                            
000044B8                            loc_4022:
000044B8 43F9 0000 0000             		lea	(Demo_Index).l,a1
000044BE 7000                       		moveq	#0,d0
000044C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044C4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000044CA 6600                       		bne.s	loc_4038
000044CC 7006                       		moveq	#6,d0
000044CE                            
000044CE                            loc_4038:
000044CE E548                       		lsl.w	#2,d0
000044D0 2271 0000                  		movea.l	(a1,d0.w),a1
000044D4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044D8 6A00                       		bpl.s	loc_4056
000044DA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044E0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044E4 5340                       		subq.w	#1,d0
000044E6 E548                       		lsl.w	#2,d0
000044E8 2271 0000                  		movea.l	(a1,d0.w),a1
000044EC                            
000044EC                            loc_4056:
000044EC 3038 F790                  		move.w	($FFFFF790).w,d0
000044F0 D2C0                       		adda.w	d0,a1
000044F2 1011                       		move.b	(a1),d0
000044F4 41F8 F604                  		lea	($FFFFF604).w,a0
000044F8 1200                       		move.b	d0,d1
000044FA 1410                       		move.b	(a0),d2
000044FC B500                       		eor.b	d2,d0
000044FE 10C1                       		move.b	d1,(a0)+
00004500 C001                       		and.b	d1,d0
00004502 10C0                       		move.b	d0,(a0)+
00004504 5338 F792                  		subq.b	#1,($FFFFF792).w
00004508 6400                       		bcc.s	locret_407E
0000450A 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004510 5478 F790                  		addq.w	#2,($FFFFF790).w
00004514                            
00004514                            locret_407E:
00004514 4E75                       		rts	
00004516                            ; End of function MoveSonicInDemo
00004516                            
00004516                            ; ===========================================================================
00004516                            ; ---------------------------------------------------------------------------
00004516                            ; Demo sequence	pointers
00004516                            ; ---------------------------------------------------------------------------
00004516                            Demo_Index:
00004516                            	include "_inc\Demo pointers for intro.asm"
00004516                            ; ---------------------------------------------------------------------------
00004516                            ; Demo sequence	pointers
00004516                            ; ---------------------------------------------------------------------------
00004516 0000 0000                  	dc.l Demo_GHZ
0000451A 0000 0000                  	dc.l Demo_GHZ
0000451E 0000 0000                  	dc.l Demo_MZ
00004522 0000 0000                  	dc.l Demo_MZ
00004526 0000 0000                  	dc.l Demo_SYZ
0000452A 0000 0000                  	dc.l Demo_SYZ
0000452E 0000 0000                  	dc.l Demo_SS
00004532 0000 0000                  	dc.l Demo_SS
00004532 0000 0000                  	dc.l Demo_SS
00004536                            
00004536                            Demo_EndIndex:
00004536                            	include "_inc\Demo pointers for ending.asm"
00004536                            ; ---------------------------------------------------------------------------
00004536                            ; Demo (ending) sequence pointers
00004536                            ; ---------------------------------------------------------------------------
00004536 0000 0000                  	dc.l Demo_EndGHZ1
0000453A 0000 0000                  	dc.l Demo_EndMZ
0000453E 0000 0000                  	dc.l Demo_EndSYZ
00004542 0000 0000                  	dc.l Demo_EndLZ
00004546 0000 0000                  	dc.l Demo_EndSLZ
0000454A 0000 0000                  	dc.l Demo_EndSBZ1
0000454E 0000 0000                  	dc.l Demo_EndSBZ2
00004552 0000 0000                  	dc.l Demo_EndGHZ2
00004552 0000 0000                  	dc.l Demo_EndGHZ2
00004556                            
00004556 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004566 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004576 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004586                            		even
00004586                            
00004586                            ; ---------------------------------------------------------------------------
00004586                            ; Collision index loading subroutine
00004586                            ; ---------------------------------------------------------------------------
00004586                            
00004586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004586                            
00004586                            
00004586                            ColIndexLoad:				; XREF: Level
00004586 7000                       		moveq	#0,d0
00004588 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000458C E548                       		lsl.w	#2,d0
0000458E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004594 4E75                       		rts	
00004596                            ; End of function ColIndexLoad
00004596                            
00004596                            ; ===========================================================================
00004596                            ; ---------------------------------------------------------------------------
00004596                            ; Collision index pointers
00004596                            ; ---------------------------------------------------------------------------
00004596                            ColPointers:
00004596                            	include "_inc\Collision index pointers.asm"
00004596                            ; ---------------------------------------------------------------------------
00004596                            ; Collision index pointers
00004596                            ; ---------------------------------------------------------------------------
00004596 0000 0000                  	dc.l Col_GHZ
0000459A 0000 0000                  	dc.l Col_LZ
0000459E 0000 0000                  	dc.l Col_MZ
000045A2 0000 0000                  	dc.l Col_SLZ
000045A6 0000 0000                  	dc.l Col_SYZ
000045AA 0000 0000                  	dc.l Col_SBZ
000045AA 0000 0000                  	dc.l Col_SBZ
000045AE                            
000045AE                            ; ---------------------------------------------------------------------------
000045AE                            ; Oscillating number subroutine
000045AE                            ; ---------------------------------------------------------------------------
000045AE                            
000045AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045AE                            
000045AE                            
000045AE                            OscillateNumInit:			; XREF: Level
000045AE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045B2 45F9 0000 0000             		lea	(Osc_Data).l,a2
000045B8 7220                       		moveq	#$20,d1
000045BA                            
000045BA                            Osc_Loop:
000045BA 32DA                       		move.w	(a2)+,(a1)+
000045BC 51C9 FFFC                  		dbf	d1,Osc_Loop
000045C0 4E75                       		rts	
000045C2                            ; End of function OscillateNumInit
000045C2                            
000045C2                            ; ===========================================================================
000045C2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000045C6 0000 0080                  		dc.w 0,	$80
000045CA 0000 0080                  		dc.w 0,	$80
000045CE 0000 0080                  		dc.w 0,	$80
000045D2 0000 0080                  		dc.w 0,	$80
000045D6 0000 0080                  		dc.w 0,	$80
000045DA 0000 0080                  		dc.w 0,	$80
000045DE 0000 0080                  		dc.w 0,	$80
000045E2 0000 0080                  		dc.w 0,	$80
000045E6 0000 50F0                  		dc.w 0,	$50F0
000045EA 011E 2080                  		dc.w $11E, $2080
000045EE 00B4 3080                  		dc.w $B4, $3080
000045F2 010E 5080                  		dc.w $10E, $5080
000045F6 01C2 7080                  		dc.w $1C2, $7080
000045FA 0276 0080                  		dc.w $276, $80
000045FE 0000 0080                  		dc.w 0,	$80
00004602 0000                       		dc.w 0
00004604                            		even
00004604                            
00004604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004604                            
00004604                            
00004604                            OscillateNumDo:				; XREF: Level
00004604 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000460A 6400                       		bcc.s	locret_41C4
0000460C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004610 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004616 3619                       		move.w	(a1)+,d3
00004618 720F                       		moveq	#$F,d1
0000461A                            
0000461A                            loc_4184:
0000461A 341A                       		move.w	(a2)+,d2
0000461C 381A                       		move.w	(a2)+,d4
0000461E 0303                       		btst	d1,d3
00004620 6600                       		bne.s	loc_41A4
00004622 3029 0002                  		move.w	2(a1),d0
00004626 D042                       		add.w	d2,d0
00004628 3340 0002                  		move.w	d0,2(a1)
0000462C D151                       		add.w	d0,0(a1)
0000462E B811                       		cmp.b	0(a1),d4
00004630 6200                       		bhi.s	loc_41BA
00004632 03C3                       		bset	d1,d3
00004634 6000                       		bra.s	loc_41BA
00004636                            ; ===========================================================================
00004636                            
00004636                            loc_41A4:				; XREF: OscillateNumDo
00004636 3029 0002                  		move.w	2(a1),d0
0000463A 9042                       		sub.w	d2,d0
0000463C 3340 0002                  		move.w	d0,2(a1)
00004640 D151                       		add.w	d0,0(a1)
00004642 B811                       		cmp.b	0(a1),d4
00004644 6300                       		bls.s	loc_41BA
00004646 0383                       		bclr	d1,d3
00004648                            
00004648                            loc_41BA:
00004648 5849                       		addq.w	#4,a1
0000464A 51C9 FFCE                  		dbf	d1,loc_4184
0000464E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004652                            
00004652                            locret_41C4:
00004652 4E75                       		rts	
00004654                            ; End of function OscillateNumDo
00004654                            
00004654                            ; ===========================================================================
00004654 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004658 0002 0018                  		dc.w 2,	$18
0000465C 0002 0020                  		dc.w 2,	$20
00004660 0002 0030                  		dc.w 2,	$30
00004664 0004 0020                  		dc.w 4,	$20
00004668 0008 0008                  		dc.w 8,	8
0000466C 0008 0040                  		dc.w 8,	$40
00004670 0004 0040                  		dc.w 4,	$40
00004674 0002 0050                  		dc.w 2,	$50
00004678 0002 0050                  		dc.w 2,	$50
0000467C 0002 0020                  		dc.w 2,	$20
00004680 0003 0030                  		dc.w 3,	$30
00004684 0005 0050                  		dc.w 5,	$50
00004688 0007 0070                  		dc.w 7,	$70
0000468C 0002 0010                  		dc.w 2,	$10
00004690 0002 0010                  		dc.w 2,	$10
00004694                            		even
00004694                            
00004694                            ; ---------------------------------------------------------------------------
00004694                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004694                            ; ---------------------------------------------------------------------------
00004694                            
00004694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004694                            
00004694                            
00004694                            ChangeRingFrame:			; XREF: Level
00004694 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004698 6A00                       		bpl.s	loc_421C
0000469A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000046A0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000046A4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000046AA                            
000046AA                            loc_421C:
000046AA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000046AE 6A00                       		bpl.s	loc_4232
000046B0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000046B6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000046BA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000046C0                            
000046C0                            loc_4232:
000046C0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000046C4 6A00                       		bpl.s	loc_4250
000046C6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000046CC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000046D0 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046D6 6500                       		bcs.s	loc_4250
000046D8 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046DE                            
000046DE                            loc_4250:
000046DE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046E2 6700                       		beq.s	locret_4272
000046E4 7000                       		moveq	#0,d0
000046E6 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046EA D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046EE 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046F2 EF58                       		rol.w	#7,d0
000046F4 0240 0003                  		andi.w	#3,d0
000046F8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046FC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004700                            
00004700                            locret_4272:
00004700 4E75                       		rts	
00004702                            ; End of function ChangeRingFrame
00004702                            
00004702                            ; ---------------------------------------------------------------------------
00004702                            ; End-of-act signpost pattern loading subroutine
00004702                            ; ---------------------------------------------------------------------------
00004702                            
00004702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004702                            
00004702                            
00004702                            SignpostArtLoad:			; XREF: Level
00004702 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004706 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000470A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004710 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004712 3038 F700                  		move.w	($FFFFF700).w,d0
00004716 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000471A 0441 0100                  		subi.w	#$100,d1
0000471E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004720 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004722 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004726 6700                       		beq.s	Signpost_Exit
00004728 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000472C 6700                       		beq.s	Signpost_Exit
0000472E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004732 7012                       		moveq	#$12,d0
00004734 6000 D0A0                  		bra.w	LoadPLC2	; load signpost	patterns
00004738                            ; ===========================================================================
00004738                            
00004738                            Signpost_Exit:
00004738 4E75                       		rts	
0000473A                            ; End of function SignpostArtLoad
0000473A                            
0000473A                            ; ===========================================================================
0000473A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000047BA                            Demo_MZ:	incbin	demodata\i_mz.bin
000048EA                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000496A                            Demo_SS:	incbin	demodata\i_ss.bin
00004A6A                            ; ===========================================================================
00004A6A                            
00004A6A                            ; ---------------------------------------------------------------------------
00004A6A                            ; Special Stage
00004A6A                            ; ---------------------------------------------------------------------------
00004A6A                            
00004A6A                            SpecialStage:				; XREF: GameModeArray
00004A6A 303C 00CA                  		move.w	#$CA,d0
00004A6E 6100 CB50                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A72 6100 D6F2                  		bsr.w	Pal_MakeFlash
00004A76 46FC 2700                  		move	#$2700,sr
00004A7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A80 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A84 3CBC 8004                  		move.w	#$8004,(a6)
00004A88 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A8E 3CBC 9011                  		move.w	#$9011,(a6)
00004A92 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A96 0200 00BF                  		andi.b	#$BF,d0
00004A9A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AA0 6100 CA46                  		bsr.w	ClearScreen
00004AA4 46FC 2300                  		move	#$2300,sr
00004AA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00004AAE 3ABC 8F01                  		move.w	#$8F01,(a5)
00004AB2 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004AB8 3ABC 9780                  		move.w	#$9780,(a5)
00004ABC 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004AC2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004ACA                            
00004ACA                            loc_463C:
00004ACA 3215                       		move.w	(a5),d1
00004ACC 0801 0001                  		btst	#1,d1
00004AD0 66F8                       		bne.s	loc_463C
00004AD2 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AD6 6100 0000                  		bsr.w	SS_BGLoad
00004ADA 7014                       		moveq	#$14,d0
00004ADC 6100 CE32                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004AE0 43F8 D000                  		lea	($FFFFD000).w,a1
00004AE4 7000                       		moveq	#0,d0
00004AE6 323C 07FF                  		move.w	#$7FF,d1
00004AEA                            
00004AEA                            SS_ClrObjRam:
00004AEA 22C0                       		move.l	d0,(a1)+
00004AEC 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004AF0                            
00004AF0 43F8 F700                  		lea	($FFFFF700).w,a1
00004AF4 7000                       		moveq	#0,d0
00004AF6 323C 003F                  		move.w	#$3F,d1
00004AFA                            
00004AFA                            SS_ClrRam:
00004AFA 22C0                       		move.l	d0,(a1)+
00004AFC 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B00                            
00004B00 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B04 7000                       		moveq	#0,d0
00004B06 323C 0027                  		move.w	#$27,d1
00004B0A                            
00004B0A                            SS_ClrRam2:
00004B0A 22C0                       		move.l	d0,(a1)+
00004B0C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B10                            
00004B10 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B14 7000                       		moveq	#0,d0
00004B16 323C 007F                  		move.w	#$7F,d1
00004B1A                            
00004B1A                            SS_ClrNemRam:
00004B1A 22C0                       		move.l	d0,(a1)+
00004B1C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B20                            
00004B20 4238 F64E                  		clr.b	($FFFFF64E).w
00004B24 4278 FE02                  		clr.w	($FFFFFE02).w
00004B28 700A                       		moveq	#$A,d0
00004B2A 6100 D7BA                  		bsr.w	PalLoad1	; load special stage pallet
00004B2E 4EB9 0000 0000             		jsr	SS_Load
00004B34 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B3C 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B44 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B4A 6100 0000                  		bsr.w	PalCycle_SS
00004B4E 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B52 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004B58 303C 0089                  		move.w	#$89,d0
00004B5C 6100 CA5C                  		bsr.w	PlaySound	; play special stage BG	music
00004B60 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B66 43F9 0000 4516             		lea	(Demo_Index).l,a1
00004B6C 7006                       		moveq	#6,d0
00004B6E E548                       		lsl.w	#2,d0
00004B70 2271 0000                  		movea.l	(a1,d0.w),a1
00004B74 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B7A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B7E 4278 FE20                  		clr.w	($FFFFFE20).w
00004B82 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B86 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B8C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B92 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B96 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B98 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B9E 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BA0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004BA6                            
00004BA6                            SS_NoDebug:
00004BA6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004BAA 0000 0040                  		ori.b	#$40,d0
00004BAE 33C0 00C0 0004             		move.w	d0,($C00004).l
00004BB4 6100 D504                  		bsr.w	Pal_MakeWhite
00004BB8                            
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            ; Main Special Stage loop
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            
00004BB8                            SS_MainLoop:
00004BB8 6100 CA12                  		bsr.w	PauseGame
00004BBC 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004BC2 6100 E06E                  		bsr.w	DelayProgram
00004BC6 6100 F89E                  		bsr.w	MoveSonicInDemo
00004BCA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BD0 4EB9 0000 0000             		jsr	ObjectsLoad
00004BD6 4EB9 0000 0000             		jsr	BuildSprites
00004BDC 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BE2 6100 0000                  		bsr.w	SS_BGAnimate
00004BE6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BEA 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BEC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BF0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BF4                            
00004BF4                            SS_ChkEnd:
00004BF4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BFA 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004BFE                            
00004BFE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C02 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C06 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C0C 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C12 6500                       		bcs.s	SS_End		; if not, branch
00004C14 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C18                            
00004C18                            SS_End:
00004C18 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C1E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C24 4278 F794                  		clr.w	($FFFFF794).w
00004C28                            
00004C28                            SS_EndLoop:
00004C28 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C2E 6100 E002                  		bsr.w	DelayProgram
00004C32 6100 F832                  		bsr.w	MoveSonicInDemo
00004C36 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C3C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C42 4EB9 0000 0000             		jsr	BuildSprites
00004C48 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C4E 6100 0000                  		bsr.w	SS_BGAnimate
00004C52 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C56 6A00                       		bpl.s	loc_47D4
00004C58 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C5E 6100 D526                  		bsr.w	Pal_ToWhite
00004C62                            
00004C62                            loc_47D4:
00004C62 4A78 F614                  		tst.w	($FFFFF614).w
00004C66 66C0                       		bne.s	SS_EndLoop
00004C68                            
00004C68 46FC 2700                  		move	#$2700,sr
00004C6C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C72 3CBC 8230                  		move.w	#$8230,(a6)
00004C76 3CBC 8407                  		move.w	#$8407,(a6)
00004C7A 3CBC 9001                  		move.w	#$9001,(a6)
00004C7E 6100 C868                  		bsr.w	ClearScreen
00004C82 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C8C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C92 6100 C9D0                  		bsr.w	NemDec
00004C96 4EB9 0000 0000             		jsr	Hud_Base
00004C9C 46FC 2300                  		move	#$2300,sr
00004CA0 7011                       		moveq	#$11,d0
00004CA2 6100 D65E                  		bsr.w	PalLoad2	; load results screen pallet
00004CA6 7000                       		moveq	#0,d0
00004CA8 6100 CB2C                  		bsr.w	LoadPLC2
00004CAC 701B                       		moveq	#$1B,d0
00004CAE 6100 CAF4                  		bsr.w	LoadPLC		; load results screen patterns
00004CB2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004CB8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004CBE 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004CC2 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004CC6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004CCA 303C 008E                  		move.w	#$8E,d0
00004CCE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004CD4 43F8 D000                  		lea	($FFFFD000).w,a1
00004CD8 7000                       		moveq	#0,d0
00004CDA 323C 07FF                  		move.w	#$7FF,d1
00004CDE                            
00004CDE                            SS_EndClrObjRam:
00004CDE 22C0                       		move.l	d0,(a1)+
00004CE0 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CE4                            
00004CE4 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CEA                            
00004CEA                            SS_NormalExit:
00004CEA 6100 C8E0                  		bsr.w	PauseGame
00004CEE 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CF4 6100 DF3C                  		bsr.w	DelayProgram
00004CF8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CFE 4EB9 0000 0000             		jsr	BuildSprites
00004D04 6100 CB0A                  		bsr.w	RunPLC_RAM
00004D08 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D0C 67DC                       		beq.s	SS_NormalExit
00004D0E 4AB8 F680                  		tst.l	($FFFFF680).w
00004D12 66D6                       		bne.s	SS_NormalExit
00004D14 303C 00CA                  		move.w	#$CA,d0
00004D18 6100 C8A6                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D1C 6100 D448                  		bsr.w	Pal_MakeFlash
00004D20 4E75                       		rts	
00004D22                            ; ===========================================================================
00004D22                            
00004D22                            SS_ToSegaScreen:
00004D22 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D28 4E75                       		rts
00004D2A                            
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            ; Special stage	background loading subroutine
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            
00004D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D2A                            
00004D2A                            
00004D2A                            SS_BGLoad:				; XREF: SpecialStage
00004D2A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D30 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D36 303C 4051                  		move.w	#$4051,d0
00004D3A 6100 CC06                  		bsr.w	EniDec
00004D3E 263C 5000 0001             		move.l	#$50000001,d3
00004D44 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D4A 7E06                       		moveq	#6,d7
00004D4C                            
00004D4C                            loc_48BE:
00004D4C 2003                       		move.l	d3,d0
00004D4E 7C03                       		moveq	#3,d6
00004D50 7800                       		moveq	#0,d4
00004D52 0C47 0003                  		cmpi.w	#3,d7
00004D56 6400                       		bcc.s	loc_48CC
00004D58 7801                       		moveq	#1,d4
00004D5A                            
00004D5A                            loc_48CC:
00004D5A 7A07                       		moveq	#7,d5
00004D5C                            
00004D5C                            loc_48CE:
00004D5C 224A                       		movea.l	a2,a1
00004D5E 0A04 0001                  		eori.b	#1,d4
00004D62 6600                       		bne.s	loc_48E2
00004D64 0C47 0006                  		cmpi.w	#6,d7
00004D68 6600                       		bne.s	loc_48F2
00004D6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D70                            
00004D70                            loc_48E2:
00004D70 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D74 7207                       		moveq	#7,d1
00004D76 7407                       		moveq	#7,d2
00004D78 6100 C8CA                  		bsr.w	ShowVDPGraphics
00004D7C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D80                            
00004D80                            loc_48F2:
00004D80 0680 0010 0000             		addi.l	#$100000,d0
00004D86 51CD FFD4                  		dbf	d5,loc_48CE
00004D8A 0680 0380 0000             		addi.l	#$3800000,d0
00004D90 0A04 0001                  		eori.b	#1,d4
00004D94 51CE FFC4                  		dbf	d6,loc_48CC
00004D98 0683 1000 0000             		addi.l	#$10000000,d3
00004D9E 6A00                       		bpl.s	loc_491C
00004DA0 4843                       		swap	d3
00004DA2 0683 0000 C000             		addi.l	#$C000,d3
00004DA8 4843                       		swap	d3
00004DAA                            
00004DAA                            loc_491C:
00004DAA D4FC 0080                  		adda.w	#$80,a2
00004DAE 51CF FF9C                  		dbf	d7,loc_48BE
00004DB2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DB8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004DBE 303C 4000                  		move.w	#$4000,d0
00004DC2 6100 CB7E                  		bsr.w	EniDec
00004DC6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DCC 203C 4000 0003             		move.l	#$40000003,d0
00004DD2 723F                       		moveq	#$3F,d1
00004DD4 741F                       		moveq	#$1F,d2
00004DD6 6100 C86C                  		bsr.w	ShowVDPGraphics
00004DDA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DE0 203C 5000 0003             		move.l	#$50000003,d0
00004DE6 723F                       		moveq	#$3F,d1
00004DE8 743F                       		moveq	#$3F,d2
00004DEA 6100 C858                  		bsr.w	ShowVDPGraphics
00004DEE 4E75                       		rts	
00004DF0                            ; End of function SS_BGLoad
00004DF0                            
00004DF0                            ; ---------------------------------------------------------------------------
00004DF0                            ; Pallet cycling routine - special stage
00004DF0                            ; ---------------------------------------------------------------------------
00004DF0                            
00004DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DF0                            
00004DF0                            
00004DF0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DF0 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DF4 6600                       		bne.s	locret_49E6
00004DF6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DFA 6A00                       		bpl.s	locret_49E6
00004DFC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E02 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E06 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E0A 0240 001F                  		andi.w	#$1F,d0
00004E0E E548                       		lsl.w	#2,d0
00004E10 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E16 D0C0                       		adda.w	d0,a0
00004E18 1018                       		move.b	(a0)+,d0
00004E1A 6A00                       		bpl.s	loc_4992
00004E1C 303C 01FF                  		move.w	#$1FF,d0
00004E20                            
00004E20                            loc_4992:
00004E20 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E24 7000                       		moveq	#0,d0
00004E26 1018                       		move.b	(a0)+,d0
00004E28 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E2C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E32 43F1 0000                  		lea	(a1,d0.w),a1
00004E36 303C 8200                  		move.w	#-$7E00,d0
00004E3A 1019                       		move.b	(a1)+,d0
00004E3C 3C80                       		move.w	d0,(a6)
00004E3E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E42 303C 8400                  		move.w	#-$7C00,d0
00004E46 1018                       		move.b	(a0)+,d0
00004E48 3C80                       		move.w	d0,(a6)
00004E4A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E54 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E5C 7000                       		moveq	#0,d0
00004E5E 1018                       		move.b	(a0)+,d0
00004E60 6B00                       		bmi.s	loc_49E8
00004E62 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E68 D2C0                       		adda.w	d0,a1
00004E6A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E6E 24D9                       		move.l	(a1)+,(a2)+
00004E70 24D9                       		move.l	(a1)+,(a2)+
00004E72 24D9                       		move.l	(a1)+,(a2)+
00004E74                            
00004E74                            locret_49E6:
00004E74 4E75                       		rts	
00004E76                            ; ===========================================================================
00004E76                            
00004E76                            loc_49E8:				; XREF: PalCycle_SS
00004E76 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E7A 0C40 008A                  		cmpi.w	#$8A,d0
00004E7E 6500                       		bcs.s	loc_49F4
00004E80 5241                       		addq.w	#1,d1
00004E82                            
00004E82                            loc_49F4:
00004E82 C2FC 002A                  		mulu.w	#$2A,d1
00004E86 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E8C D2C1                       		adda.w	d1,a1
00004E8E 0240 007F                  		andi.w	#$7F,d0
00004E92 0880 0000                  		bclr	#0,d0
00004E96 6700                       		beq.s	loc_4A18
00004E98 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E9C 24D1                       		move.l	(a1),(a2)+
00004E9E 24E9 0004                  		move.l	4(a1),(a2)+
00004EA2 24E9 0008                  		move.l	8(a1),(a2)+
00004EA6                            
00004EA6                            loc_4A18:
00004EA6 D2FC 000C                  		adda.w	#$C,a1
00004EAA 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004EAE 0C40 000A                  		cmpi.w	#$A,d0
00004EB2 6500                       		bcs.s	loc_4A2E
00004EB4 0440 000A                  		subi.w	#$A,d0
00004EB8 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004EBC                            
00004EBC                            loc_4A2E:
00004EBC 3200                       		move.w	d0,d1
00004EBE D040                       		add.w	d0,d0
00004EC0 D041                       		add.w	d1,d0
00004EC2 D2C0                       		adda.w	d0,a1
00004EC4 24D9                       		move.l	(a1)+,(a2)+
00004EC6 34D9                       		move.w	(a1)+,(a2)+
00004EC8 4E75                       		rts	
00004ECA                            ; End of function PalCycle_SS
00004ECA                            
00004ECA                            ; ===========================================================================
00004ECA 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004EDA                            					; XREF: PalCycle_SS
00004EDA 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004EEA 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EFA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F0A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F1A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F2A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F3A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F4A                            		even
00004F4A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F58                            					; XREF: PalCycle_SS
00004F58                            		even
00004F58                            
00004F58                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004FA0                            		even
00004FA0                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005072                            		even
00005072                            
00005072                            ; ---------------------------------------------------------------------------
00005072                            ; Subroutine to	make the special stage background animated
00005072                            ; ---------------------------------------------------------------------------
00005072                            
00005072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005072                            
00005072                            
00005072                            SS_BGAnimate:				; XREF: SpecialStage
00005072 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005076 6600                       		bne.s	loc_4BF6
00005078 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000507E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005084                            
00005084                            loc_4BF6:
00005084 0C40 0008                  		cmpi.w	#8,d0
00005088 6400                       		bcc.s	loc_4C4E
0000508A 0C40 0006                  		cmpi.w	#6,d0
0000508E 6600                       		bne.s	loc_4C10
00005090 5278 F718                  		addq.w	#1,($FFFFF718).w
00005094 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005098 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000509E                            
0000509E                            loc_4C10:
0000509E 7000                       		moveq	#0,d0
000050A0 3038 F708                  		move.w	($FFFFF708).w,d0
000050A4 4440                       		neg.w	d0
000050A6 4840                       		swap	d0
000050A8 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000050AE 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050B2 7609                       		moveq	#9,d3
000050B4                            
000050B4                            loc_4C26:
000050B4 302B 0002                  		move.w	2(a3),d0
000050B8 6100 DBAA                  		bsr.w	CalcSine
000050BC 7400                       		moveq	#0,d2
000050BE 1419                       		move.b	(a1)+,d2
000050C0 C1C2                       		muls.w	d2,d0
000050C2 E080                       		asr.l	#8,d0
000050C4 36C0                       		move.w	d0,(a3)+
000050C6 1419                       		move.b	(a1)+,d2
000050C8 4882                       		ext.w	d2
000050CA D55B                       		add.w	d2,(a3)+
000050CC 51CB FFE6                  		dbf	d3,loc_4C26
000050D0 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050D4 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050DA 6000                       		bra.s	loc_4C7E
000050DC                            ; ===========================================================================
000050DC                            
000050DC                            loc_4C4E:				; XREF: SS_BGAnimate
000050DC 0C40 000C                  		cmpi.w	#$C,d0
000050E0 6600                       		bne.s	loc_4C74
000050E2 5378 F718                  		subq.w	#1,($FFFFF718).w
000050E6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050EA 243C 0001 8000             		move.l	#$18000,d2
000050F0 7206                       		moveq	#6,d1
000050F2                            
000050F2                            loc_4C64:
000050F2 2013                       		move.l	(a3),d0
000050F4 9082                       		sub.l	d2,d0
000050F6 26C0                       		move.l	d0,(a3)+
000050F8 0482 0000 2000             		subi.l	#$2000,d2
000050FE 51C9 FFF2                  		dbf	d1,loc_4C64
00005102                            
00005102                            loc_4C74:
00005102 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005106 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000510C                            
0000510C                            loc_4C7E:
0000510C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005110 3038 F718                  		move.w	($FFFFF718).w,d0
00005114 4440                       		neg.w	d0
00005116 4840                       		swap	d0
00005118 7600                       		moveq	#0,d3
0000511A 161A                       		move.b	(a2)+,d3
0000511C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005120 4442                       		neg.w	d2
00005122 0242 00FF                  		andi.w	#$FF,d2
00005126 E54A                       		lsl.w	#2,d2
00005128                            
00005128                            loc_4C9A:
00005128 301B                       		move.w	(a3)+,d0
0000512A 544B                       		addq.w	#2,a3
0000512C 7200                       		moveq	#0,d1
0000512E 121A                       		move.b	(a2)+,d1
00005130 5341                       		subq.w	#1,d1
00005132                            
00005132                            loc_4CA4:
00005132 2380 2000                  		move.l	d0,(a1,d2.w)
00005136 5842                       		addq.w	#4,d2
00005138 0242 03FC                  		andi.w	#$3FC,d2
0000513C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005140 51CB FFE6                  		dbf	d3,loc_4C9A
00005144 4E75                       		rts	
00005146                            ; End of function SS_BGAnimate
00005146                            
00005146                            ; ===========================================================================
00005146 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005152                            		even
00005152 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000515A                            		even
0000515A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000516E                            		even
0000516E                            					; XREF: SS_BGAnimate
0000516E                            ; ===========================================================================
0000516E                            
0000516E                            ; ---------------------------------------------------------------------------
0000516E                            ; Continue screen
0000516E                            ; ---------------------------------------------------------------------------
0000516E                            
0000516E                            ContinueScreen:				; XREF: GameModeArray
0000516E 6100 CECC                  		bsr.w	Pal_FadeFrom
00005172 46FC 2700                  		move	#$2700,sr
00005176 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000517A 0200 00BF                  		andi.b	#$BF,d0
0000517E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005184 4DF9 00C0 0004             		lea	($C00004).l,a6
0000518A 3CBC 8004                  		move.w	#$8004,(a6)
0000518E 3CBC 8700                  		move.w	#$8700,(a6)
00005192 6100 C354                  		bsr.w	ClearScreen
00005196 43F8 D000                  		lea	($FFFFD000).w,a1
0000519A 7000                       		moveq	#0,d0
0000519C 323C 07FF                  		move.w	#$7FF,d1
000051A0                            
000051A0                            Cont_ClrObjRam:
000051A0 22C0                       		move.l	d0,(a1)+
000051A2 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000051A6                            
000051A6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000051B0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000051B6 6100 C4AC                  		bsr.w	NemDec
000051BA 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000051C4 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000051CA 6100 C498                  		bsr.w	NemDec
000051CE 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051D8 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051DE 6100 C484                  		bsr.w	NemDec
000051E2 720A                       		moveq	#10,d1
000051E4 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051EA 7012                       		moveq	#$12,d0
000051EC 6100 D0F8                  		bsr.w	PalLoad1	; load continue	screen pallet
000051F0 103C 0090                  		move.b	#$90,d0
000051F4 6100 C3C4                  		bsr.w	PlaySound	; play continue	music
000051F8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051FE 42B8 F700                  		clr.l	($FFFFF700).w
00005202 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000520A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005210 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005216 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000521C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005222 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005228 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000522E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005234 4EB9 0000 0000             		jsr	ObjectsLoad
0000523A 4EB9 0000 0000             		jsr	BuildSprites
00005240 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005244 0000 0040                  		ori.b	#$40,d0
00005248 33C0 00C0 0004             		move.w	d0,($C00004).l
0000524E 6100 CD46                  		bsr.w	Pal_FadeTo
00005252                            
00005252                            ; ---------------------------------------------------------------------------
00005252                            ; Continue screen main loop
00005252                            ; ---------------------------------------------------------------------------
00005252                            
00005252                            Cont_MainLoop:
00005252 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005258 6100 D9D8                  		bsr.w	DelayProgram
0000525C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005262 6400                       		bcc.s	loc_4DF2
00005264 46FC 2700                  		move	#$2700,sr
00005268 3238 F614                  		move.w	($FFFFF614).w,d1
0000526C 82FC 003C                  		divu.w	#$3C,d1
00005270 0281 0000 000F             		andi.l	#$F,d1
00005276 4EB9 0000 0000             		jsr	ContScrCounter
0000527C 46FC 2300                  		move	#$2300,sr
00005280                            
00005280                            loc_4DF2:
00005280 4EB9 0000 0000             		jsr	ObjectsLoad
00005286 4EB9 0000 0000             		jsr	BuildSprites
0000528C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005292 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005294 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000529A 64B6                       		bcc.s	Cont_MainLoop
0000529C 4A78 F614                  		tst.w	($FFFFF614).w
000052A0 6600 FFB0                  		bne.w	Cont_MainLoop
000052A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000052AA 4E75                       		rts	
000052AC                            ; ===========================================================================
000052AC                            
000052AC                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000052AC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000052B2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000052B8 7000                       		moveq	#0,d0
000052BA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000052BE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000052C2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000052C6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000052CA 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000052CE 4E75                       		rts	
000052D0                            ; ===========================================================================
000052D0                            
000052D0                            ; ---------------------------------------------------------------------------
000052D0                            ; Object 80 - Continue screen elements
000052D0                            ; ---------------------------------------------------------------------------
000052D0                            
000052D0                            Obj80:					; XREF: Obj_Index
000052D0 7000                       		moveq	#0,d0
000052D2 1028 0024                  		move.b	$24(a0),d0
000052D6 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052DA 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052DE                            ; ===========================================================================
000052DE 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052E0 0000                       		dc.w Obj80_Display-Obj80_Index
000052E2 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052E4 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052E6                            ; ===========================================================================
000052E6                            
000052E6                            Obj80_Main:				; XREF: Obj80_Index
000052E6 5428 0024                  		addq.b	#2,$24(a0)
000052EA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052F2 317C 8500 0002             		move.w	#$8500,2(a0)
000052F8 117C 0000 0001             		move.b	#0,1(a0)
000052FE 117C 003C 0019             		move.b	#$3C,$19(a0)
00005304 317C 0120 0008             		move.w	#$120,8(a0)
0000530A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005310 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005316                            
00005316                            Obj80_Display:				; XREF: Obj80_Index
00005316 4EF9 0000 0000             		jmp	DisplaySprite
0000531C                            ; ===========================================================================
0000531C                            Obj80_MiniSonicPos:
0000531C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000532E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000533A 2248                       		movea.l	a0,a1
0000533C 45F9 0000 531C             		lea	(Obj80_MiniSonicPos).l,a2
00005342 7200                       		moveq	#0,d1
00005344 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005348 5501                       		subq.b	#2,d1
0000534A 6400                       		bcc.s	loc_4EC4
0000534C 4EF9 0000 0000             		jmp	DeleteObject
00005352                            ; ===========================================================================
00005352                            
00005352                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005352 7601                       		moveq	#1,d3
00005354 0C01 000E                  		cmpi.b	#$E,d1
00005358 6500                       		bcs.s	loc_4ED0
0000535A 7600                       		moveq	#0,d3
0000535C 720E                       		moveq	#$E,d1
0000535E                            
0000535E                            loc_4ED0:
0000535E 1401                       		move.b	d1,d2
00005360 0202 0001                  		andi.b	#1,d2
00005364                            
00005364                            Obj80_MiniSonLoop:
00005364 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005368 335A 0008                  		move.w	(a2)+,8(a1)
0000536C 4A02                       		tst.b	d2
0000536E 6700                       		beq.s	loc_4EEA
00005370 0469 000A 0008             		subi.w	#$A,8(a1)
00005376                            
00005376                            loc_4EEA:
00005376 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000537C 137C 0006 001A             		move.b	#6,$1A(a1)
00005382 137C 0006 0024             		move.b	#6,$24(a1)
00005388 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005390 337C 8551 0002             		move.w	#$8551,2(a1)
00005396 137C 0000 0001             		move.b	#0,1(a1)
0000539C 43E9 0040                  		lea	$40(a1),a1
000053A0 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000053A4 43E9 FFC0                  		lea	-$40(a1),a1
000053A8 1343 0028                  		move.b	d3,$28(a1)
000053AC                            
000053AC                            Obj80_ChkType:				; XREF: Obj80_Index
000053AC 4A28 0028                  		tst.b	$28(a0)
000053B0 6700                       		beq.s	loc_4F40
000053B2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000053B8 6500                       		bcs.s	loc_4F40
000053BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053BE 0200 0001                  		andi.b	#1,d0
000053C2 6600                       		bne.s	loc_4F40
000053C4 4A78 D010                  		tst.w	($FFFFD010).w
000053C8 6600                       		bne.s	Obj80_Delete
000053CA 4E75                       		rts	
000053CC                            ; ===========================================================================
000053CC                            
000053CC                            loc_4F40:				; XREF: Obj80_ChkType
000053CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053D0 0200 000F                  		andi.b	#$F,d0
000053D4 6600                       		bne.s	Obj80_Display2
000053D6 0868 0000 001A             		bchg	#0,$1A(a0)
000053DC                            
000053DC                            Obj80_Display2:
000053DC 4EF9 0000 0000             		jmp	DisplaySprite
000053E2                            ; ===========================================================================
000053E2                            
000053E2                            Obj80_Delete:				; XREF: Obj80_ChkType
000053E2 4EF9 0000 0000             		jmp	DeleteObject
000053E8                            ; ===========================================================================
000053E8                            
000053E8                            ; ---------------------------------------------------------------------------
000053E8                            ; Object 81 - Sonic on the continue screen
000053E8                            ; ---------------------------------------------------------------------------
000053E8                            
000053E8                            Obj81:					; XREF: Obj_Index
000053E8 7000                       		moveq	#0,d0
000053EA 1028 0024                  		move.b	$24(a0),d0
000053EE 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053F2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053F6 4EF9 0000 0000             		jmp	DisplaySprite
000053FC                            ; ===========================================================================
000053FC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053FE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005400 0000                       		dc.w Obj81_Animate-Obj81_Index
00005402 0000                       		dc.w Obj81_Run-Obj81_Index
00005404                            ; ===========================================================================
00005404                            
00005404                            Obj81_Main:				; XREF: Obj81_Index
00005404 5428 0024                  		addq.b	#2,$24(a0)
00005408 317C 00A0 0008             		move.w	#$A0,8(a0)
0000540E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005414 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000541C 317C 0780 0002             		move.w	#$780,2(a0)
00005422 117C 0004 0001             		move.b	#4,1(a0)
00005428 117C 0002 0018             		move.b	#2,$18(a0)
0000542E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005434 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000543A                            
0000543A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000543A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005440 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005442 5428 0024                  		addq.b	#2,$24(a0)
00005446 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000544A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005452 317C 8500 0002             		move.w	#$8500,2(a0)
00005458 117C 0000 001C             		move.b	#0,$1C(a0)
0000545E 6000                       		bra.s	Obj81_Animate
00005460                            ; ===========================================================================
00005460                            
00005460                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005460 4EB9 0000 0000             		jsr	SpeedToPos
00005466 4EB9 0000 0000             		jsr	Sonic_Animate
0000546C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005472                            ; ===========================================================================
00005472                            
00005472                            Obj81_Animate:				; XREF: Obj81_Index
00005472 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005476 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005478 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000547E 4EF9 0000 0000             		jmp	AnimateSprite
00005484                            ; ===========================================================================
00005484                            
00005484                            Obj81_GetUp:				; XREF: Obj81_Animate
00005484 5428 0024                  		addq.b	#2,$24(a0)
00005488 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005490 317C 0780 0002             		move.w	#$780,2(a0)
00005496 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000549C 4268 0014                  		clr.w	$14(a0)
000054A0 5168 000C                  		subq.w	#8,$C(a0)
000054A4 103C 00E0                  		move.b	#$E0,d0
000054A8 6100 C116                  		bsr.w	PlaySound_Special ; fade out music
000054AC                            
000054AC                            Obj81_Run:				; XREF: Obj81_Index
000054AC 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000054B2 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000054B4 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000054BA 6000                       		bra.s	Obj81_ShowRun
000054BC                            ; ===========================================================================
000054BC                            
000054BC                            Obj81_AddSpeed:				; XREF: Obj81_Run
000054BC 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000054C2                            
000054C2                            Obj81_ShowRun:				; XREF: Obj81_Run
000054C2 4EB9 0000 0000             		jsr	SpeedToPos
000054C8 4EB9 0000 0000             		jsr	Sonic_Animate
000054CE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054D4                            ; ===========================================================================
000054D4                            Ani_obj81:
000054D4                            	include "_anim\obj81.asm"
000054D4                            ; ---------------------------------------------------------------------------
000054D4                            ; Animation script - Sonic on the continue screen
000054D4                            ; ---------------------------------------------------------------------------
000054D4 0000                       		dc.w byte_504A-Ani_obj81
000054D6 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054E2 00                         		even
000054E2 00                         		even
000054E2                            
000054E2                            ; ---------------------------------------------------------------------------
000054E2                            ; Sprite mappings - Continue screen
000054E2                            ; ---------------------------------------------------------------------------
000054E2                            Map_obj80:
000054E2                            	include "_maps\obj80.asm"
000054E2                            ; ---------------------------------------------------------------------------
000054E2                            ; Sprite mappings - Continue screen
000054E2                            ; ---------------------------------------------------------------------------
000054E2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054E6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054EA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054EE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054F2 0B                         byte_5066:	dc.b $B
000054F3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054F8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054FD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005502 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005507 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000550C F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005511 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005516 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000551B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005520 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005525 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000552A 03                         byte_509E:	dc.b 3
0000552B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005530 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005535 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000553A 03                         byte_50AE:	dc.b 3
0000553B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005540 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005545 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000554A 03                         byte_50BE:	dc.b 3
0000554B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005550 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005555 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000555A 02                         byte_50CE:	dc.b 2
0000555B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005560 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005565 01                         byte_50D9:	dc.b 1
00005566 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000556B 01                         byte_50DF:	dc.b 1
0000556C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005572 00                         		even
00005572 00                         		even
00005572                            
00005572                            ; ===========================================================================
00005572                            ; ---------------------------------------------------------------------------
00005572                            ; Ending sequence in Green Hill	Zone
00005572                            ; ---------------------------------------------------------------------------
00005572                            
00005572                            EndingSequence:				; XREF: GameModeArray
00005572 103C 00E4                  		move.b	#$E4,d0
00005576 6100 C048                  		bsr.w	PlaySound_Special ; stop music
0000557A 6100 CAC0                  		bsr.w	Pal_FadeFrom
0000557E 43F8 D000                  		lea	($FFFFD000).w,a1
00005582 7000                       		moveq	#0,d0
00005584 323C 07FF                  		move.w	#$7FF,d1
00005588                            
00005588                            End_ClrObjRam:
00005588 22C0                       		move.l	d0,(a1)+
0000558A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000558E                            
0000558E 43F8 F628                  		lea	($FFFFF628).w,a1
00005592 7000                       		moveq	#0,d0
00005594 323C 0015                  		move.w	#$15,d1
00005598                            
00005598                            End_ClrRam:
00005598 22C0                       		move.l	d0,(a1)+
0000559A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000559E                            
0000559E 43F8 F700                  		lea	($FFFFF700).w,a1
000055A2 7000                       		moveq	#0,d0
000055A4 323C 003F                  		move.w	#$3F,d1
000055A8                            
000055A8                            End_ClrRam2:
000055A8 22C0                       		move.l	d0,(a1)+
000055AA 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000055AE                            
000055AE 43F8 FE60                  		lea	($FFFFFE60).w,a1
000055B2 7000                       		moveq	#0,d0
000055B4 323C 0047                  		move.w	#$47,d1
000055B8                            
000055B8                            End_ClrRam3:
000055B8 22C0                       		move.l	d0,(a1)+
000055BA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000055BE                            
000055BE 46FC 2700                  		move	#$2700,sr
000055C2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055C6 0200 00BF                  		andi.b	#$BF,d0
000055CA 33C0 00C0 0004             		move.w	d0,($C00004).l
000055D0 6100 BF16                  		bsr.w	ClearScreen
000055D4 4DF9 00C0 0004             		lea	($C00004).l,a6
000055DA 3CBC 8B03                  		move.w	#$8B03,(a6)
000055DE 3CBC 8230                  		move.w	#$8230,(a6)
000055E2 3CBC 8407                  		move.w	#$8407,(a6)
000055E6 3CBC 857C                  		move.w	#$857C,(a6)
000055EA 3CBC 9001                  		move.w	#$9001,(a6)
000055EE 3CBC 8004                  		move.w	#$8004,(a6)
000055F2 3CBC 8720                  		move.w	#$8720,(a6)
000055F6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055FC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005600 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005606 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000560C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005612 6700                       		beq.s	End_LoadData	; if yes, branch
00005614 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000561A                            
0000561A                            End_LoadData:
0000561A 701C                       		moveq	#$1C,d0
0000561C 6100 C2F2                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005620 4EB9 0000 0000             		jsr	Hud_Base
00005626 6100 0000                  		bsr.w	LevelSizeLoad
0000562A 6100 0000                  		bsr.w	DeformBgLayer
0000562E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005634 6100 0000                  		bsr.w	MainLoadBlockLoad
00005638 6100 0000                  		bsr.w	LoadTilesFromStart
0000563C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005644 46FC 2300                  		move	#$2300,sr
00005648 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000564E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005652 6100 C46C                  		bsr.w	KosDec
00005656 7003                       		moveq	#3,d0
00005658 6100 CC8C                  		bsr.w	PalLoad1	; load Sonic's pallet
0000565C 303C 008B                  		move.w	#$8B,d0
00005660 6100 BF58                  		bsr.w	PlaySound	; play ending sequence music
00005664 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000566A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000566C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005672                            
00005672                            End_LoadSonic:
00005672 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005678 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000567E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005684 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000568A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005690 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005696 4EB9 0000 0000             		jsr	ObjPosLoad
0000569C 4EB9 0000 0000             		jsr	ObjectsLoad
000056A2 4EB9 0000 0000             		jsr	BuildSprites
000056A8 7000                       		moveq	#0,d0
000056AA 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000056AE 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000056B2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000056B6 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000056BA 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000056BE 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000056C2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000056C6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000056CA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000056CE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000056D2 6100 EEDA                  		bsr.w	OscillateNumInit
000056D6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056DC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056E2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056E8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056EE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056F4 6100 D53C                  		bsr.w	DelayProgram
000056F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056FC 0000 0040                  		ori.b	#$40,d0
00005700 33C0 00C0 0004             		move.w	d0,($C00004).l
00005706 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000570C 6100 C888                  		bsr.w	Pal_FadeTo
00005710                            
00005710                            ; ---------------------------------------------------------------------------
00005710                            ; Main ending sequence loop
00005710                            ; ---------------------------------------------------------------------------
00005710                            
00005710                            End_MainLoop:
00005710 6100 BEBA                  		bsr.w	PauseGame
00005714 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000571A 6100 D516                  		bsr.w	DelayProgram
0000571E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005722 6100 0000                  		bsr.w	End_MoveSonic
00005726 4EB9 0000 0000             		jsr	ObjectsLoad
0000572C 6100 0000                  		bsr.w	DeformBgLayer
00005730 4EB9 0000 0000             		jsr	BuildSprites
00005736 4EB9 0000 0000             		jsr	ObjPosLoad
0000573C 6100 C422                  		bsr.w	PalCycle_Load
00005740 6100 EEC2                  		bsr.w	OscillateNumDo
00005744 6100 EF4E                  		bsr.w	ChangeRingFrame
00005748 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000574E 6700                       		beq.s	loc_52DA	; if yes, branch
00005750 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005756 103C 0091                  		move.b	#$91,d0
0000575A 6100 BE64                  		bsr.w	PlaySound_Special ; play credits music
0000575E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005764 4E75                       		rts	
00005766                            ; ===========================================================================
00005766                            
00005766                            loc_52DA:
00005766 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000576A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000576E                            
0000576E 4278 FE02                  		clr.w	($FFFFFE02).w
00005772 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005778 4278 F794                  		clr.w	($FFFFF794).w
0000577C                            
0000577C                            End_AllEmlds:				; XREF: loc_5334
0000577C 6100 BE4E                  		bsr.w	PauseGame
00005780 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005786 6100 D4AA                  		bsr.w	DelayProgram
0000578A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000578E 6100 0000                  		bsr.w	End_MoveSonic
00005792 4EB9 0000 0000             		jsr	ObjectsLoad
00005798 6100 0000                  		bsr.w	DeformBgLayer
0000579C 4EB9 0000 0000             		jsr	BuildSprites
000057A2 4EB9 0000 0000             		jsr	ObjPosLoad
000057A8 6100 EE5A                  		bsr.w	OscillateNumDo
000057AC 6100 EEE6                  		bsr.w	ChangeRingFrame
000057B0 5378 F794                  		subq.w	#1,($FFFFF794).w
000057B4 6A00                       		bpl.s	loc_5334
000057B6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000057BC 6100 C9C8                  		bsr.w	Pal_ToWhite
000057C0                            
000057C0                            loc_5334:
000057C0 4A78 FE02                  		tst.w	($FFFFFE02).w
000057C4 6700 FFB6                  		beq.w	End_AllEmlds
000057C8 4278 FE02                  		clr.w	($FFFFFE02).w
000057CC 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000057D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000057D8 4DF9 00C0 0000             		lea	($C00000).l,a6
000057DE 47F8 F700                  		lea	($FFFFF700).w,a3
000057E2 49F8 A400                  		lea	($FFFFA400).w,a4
000057E6 343C 4000                  		move.w	#$4000,d2
000057EA 6100 0000                  		bsr.w	LoadTilesFromStart2
000057EE 7013                       		moveq	#$13,d0
000057F0 6100 CAF4                  		bsr.w	PalLoad1	; load ending pallet
000057F4 6100 C8C4                  		bsr.w	Pal_MakeWhite
000057F8 6000 FF16                  		bra.w	End_MainLoop
000057FC                            
000057FC                            ; ---------------------------------------------------------------------------
000057FC                            ; Subroutine controlling Sonic on the ending sequence
000057FC                            ; ---------------------------------------------------------------------------
000057FC                            
000057FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057FC                            
000057FC                            
000057FC                            End_MoveSonic:				; XREF: End_MainLoop
000057FC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005800 6600                       		bne.s	End_MoveSonic2
00005802 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005808 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000580A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000580E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005814 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000581A 4E75                       		rts	
0000581C                            ; ===========================================================================
0000581C                            
0000581C                            End_MoveSonic2:				; XREF: End_MoveSonic
0000581C 5500                       		subq.b	#2,d0
0000581E 6600                       		bne.s	End_MoveSonic3
00005820 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005826 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005828 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000582C 7000                       		moveq	#0,d0
0000582E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005832 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005836 31C0 D014                  		move.w	d0,($FFFFD014).w
0000583A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005840 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005846 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000584C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005852 4E75                       		rts	
00005854                            ; ===========================================================================
00005854                            
00005854                            End_MoveSonic3:				; XREF: End_MoveSonic
00005854 5500                       		subq.b	#2,d0
00005856 6600                       		bne.s	End_MoveSonExit
00005858 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000585C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005862 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005868 4278 D024                  		clr.w	($FFFFD024).w
0000586C                            
0000586C                            End_MoveSonExit:
0000586C 4E75                       		rts	
0000586E                            ; End of function End_MoveSonic
0000586E                            
0000586E                            ; ===========================================================================
0000586E                            ; ---------------------------------------------------------------------------
0000586E                            ; Object 87 - Sonic on ending sequence
0000586E                            ; ---------------------------------------------------------------------------
0000586E                            
0000586E                            Obj87:					; XREF: Obj_Index
0000586E 7000                       		moveq	#0,d0
00005870 1028 0025                  		move.b	$25(a0),d0
00005874 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005878 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000587C 4EF9 0000 0000             		jmp	DisplaySprite
00005882                            ; ===========================================================================
00005882 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005886 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000588A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000588E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005892 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj87_Main:				; XREF: Obj87_Index
00005896 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000589C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000589E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000058A4 317C 00D8 0030             		move.w	#$D8,$30(a0)
000058AA 4E75                       		rts	
000058AC                            ; ===========================================================================
000058AC                            
000058AC                            Obj87_Main2:				; XREF: Obj87_Main
000058AC 5428 0025                  		addq.b	#2,$25(a0)
000058B0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058B8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058BE 117C 0004 0001             		move.b	#4,1(a0)
000058C4 4228 0022                  		clr.b	$22(a0)
000058C8 117C 0002 0018             		move.b	#2,$18(a0)
000058CE 117C 0000 001A             		move.b	#0,$1A(a0)
000058D4 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058DA                            
000058DA                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058DA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058DE 6600                       		bne.s	Obj87_Wait
000058E0 5428 0025                  		addq.b	#2,$25(a0)
000058E4 317C 0001 001C             		move.w	#1,$1C(a0)
000058EA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058F0                            
000058F0                            Obj87_Wait:
000058F0 4E75                       		rts	
000058F2                            ; ===========================================================================
000058F2                            
000058F2                            Obj87_LookUp:				; XREF: Obj87_Index
000058F2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058FA 6600                       		bne.s	locret_5480
000058FC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005902 317C 005A 0030             		move.w	#$5A,$30(a0)
00005908 5428 0025                  		addq.b	#2,$25(a0)
0000590C                            
0000590C                            locret_5480:
0000590C 4E75                       		rts	
0000590E                            ; ===========================================================================
0000590E                            
0000590E                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000590E 5368 0030                  		subq.w	#1,$30(a0)
00005912 6600                       		bne.s	Obj87_Wait2
00005914 43F8 D400                  		lea	($FFFFD400).w,a1
00005918 323C 00FF                  		move.w	#$FF,d1
0000591C                            
0000591C                            Obj87_ClrLoop:
0000591C 4299                       		clr.l	(a1)+
0000591E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005922 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005928 5428 0025                  		addq.b	#2,$25(a0)
0000592C 117C 0001 001C             		move.b	#1,$1C(a0)
00005932 317C 003C 0030             		move.w	#$3C,$30(a0)
00005938                            
00005938                            Obj87_Wait2:
00005938 4E75                       		rts	
0000593A                            ; ===========================================================================
0000593A                            
0000593A                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000593A 5368 0030                  		subq.w	#1,$30(a0)
0000593E 6600                       		bne.s	Obj87_Wait3
00005940 5428 0025                  		addq.b	#2,$25(a0)
00005944 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000594A 117C 0002 001C             		move.b	#2,$1C(a0)
00005950 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005956                            
00005956                            Obj87_Wait3:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            
00005958                            Obj87_Animate:				; XREF: Obj87_Index
00005958 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000595E 4EF9 0000 0000             		jmp	AnimateSprite
00005964                            ; ===========================================================================
00005964                            
00005964                            Obj87_Leap:				; XREF: Obj87_Index
00005964 5368 0030                  		subq.w	#1,$30(a0)
00005968 6600                       		bne.s	Obj87_Wait4
0000596A 5428 0025                  		addq.b	#2,$25(a0)
0000596E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005976 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000597C 117C 0004 0001             		move.b	#4,1(a0)
00005982 4228 0022                  		clr.b	$22(a0)
00005986 117C 0002 0018             		move.b	#2,$18(a0)
0000598C 117C 0005 001A             		move.b	#5,$1A(a0)
00005992 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005998 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000599E 60B8                       		bra.s	Obj87_Animate
000059A0                            ; ===========================================================================
000059A0                            
000059A0                            Obj87_Wait4:				; XREF: Obj87_Leap
000059A0 4E75                       		rts	
000059A2                            ; ===========================================================================
000059A2                            Ani_obj87:
000059A2                            	include "_anim\obj87.asm"
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Animation script - Sonic on the ending sequence
000059A2                            ; ---------------------------------------------------------------------------
000059A2 0000                       		dc.w byte_551C-Ani_obj87
000059A4 0000                       		dc.w byte_552A-Ani_obj87
000059A6 0000                       		dc.w byte_5534-Ani_obj87
000059A8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000059B6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000059C0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000059C8                            		even
000059C8                            		even
000059C8                            
000059C8                            ; ===========================================================================
000059C8                            ; ---------------------------------------------------------------------------
000059C8                            ; Object 88 - chaos emeralds on	the ending sequence
000059C8                            ; ---------------------------------------------------------------------------
000059C8                            
000059C8                            Obj88:					; XREF: Obj_Index
000059C8 7000                       		moveq	#0,d0
000059CA 1028 0024                  		move.b	$24(a0),d0
000059CE 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000059D2 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000059D6 4EF9 0000 0000             		jmp	DisplaySprite
000059DC                            ; ===========================================================================
000059DC 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059DE 0000                       		dc.w Obj88_Move-Obj88_Index
000059E0                            ; ===========================================================================
000059E0                            
000059E0                            Obj88_Main:				; XREF: Obj88_Index
000059E0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059E6 6700                       		beq.s	Obj88_Main2
000059E8 588F                       		addq.l	#4,sp
000059EA 4E75                       		rts	
000059EC                            ; ===========================================================================
000059EC                            
000059EC                            Obj88_Main2:				; XREF: Obj88_Main
000059EC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059F2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059F8 2248                       		movea.l	a0,a1
000059FA 7600                       		moveq	#0,d3
000059FC 7401                       		moveq	#1,d2
000059FE 7205                       		moveq	#5,d1
00005A00                            
00005A00                            Obj88_MainLoop:
00005A00 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A04 5429 0024                  		addq.b	#2,$24(a1)
00005A08 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A10 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A16 137C 0004 0001             		move.b	#4,1(a1)
00005A1C 137C 0001 0018             		move.b	#1,$18(a1)
00005A22 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A28 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A2E 1342 001C                  		move.b	d2,$1C(a1)
00005A32 1342 001A                  		move.b	d2,$1A(a1)
00005A36 5202                       		addq.b	#1,d2
00005A38 1343 0026                  		move.b	d3,$26(a1)
00005A3C 0603 002A                  		addi.b	#$2A,d3
00005A40 43E9 0040                  		lea	$40(a1),a1
00005A44 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A48                            
00005A48                            Obj88_Move:				; XREF: Obj88_Index
00005A48 3028 003E                  		move.w	$3E(a0),d0
00005A4C D168 0026                  		add.w	d0,$26(a0)
00005A50 1028 0026                  		move.b	$26(a0),d0
00005A54 4EB9 0000 2C64             		jsr	(CalcSine).l
00005A5A 7800                       		moveq	#0,d4
00005A5C 1828 003C                  		move.b	$3C(a0),d4
00005A60 C3C4                       		muls.w	d4,d1
00005A62 E081                       		asr.l	#8,d1
00005A64 C1C4                       		muls.w	d4,d0
00005A66 E080                       		asr.l	#8,d0
00005A68 D268 0038                  		add.w	$38(a0),d1
00005A6C D068 003A                  		add.w	$3A(a0),d0
00005A70 3141 0008                  		move.w	d1,8(a0)
00005A74 3140 000C                  		move.w	d0,$C(a0)
00005A78 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A7E 6700                       		beq.s	loc_55FA
00005A80 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A86                            
00005A86                            loc_55FA:
00005A86 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A8C 6700                       		beq.s	loc_5608
00005A8E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A94                            
00005A94                            loc_5608:
00005A94 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A9A 6700                       		beq.s	locret_5614
00005A9C 5368 003A                  		subq.w	#1,$3A(a0)
00005AA0                            
00005AA0                            locret_5614:
00005AA0 4E75                       		rts	
00005AA2                            ; ===========================================================================
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            
00005AA2                            Obj89:					; XREF: Obj_Index
00005AA2 7000                       		moveq	#0,d0
00005AA4 1028 0024                  		move.b	$24(a0),d0
00005AA8 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005AAC 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005AB0                            ; ===========================================================================
00005AB0 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005AB2 0000                       		dc.w Obj89_Move-Obj89_Index
00005AB4 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005AB6                            ; ===========================================================================
00005AB6                            
00005AB6                            Obj89_Main:				; XREF: Obj89_Index
00005AB6 5428 0024                  		addq.b	#2,$24(a0)
00005ABA 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005AC0 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005AC6 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005ACE 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005AD4 117C 0000 0001             		move.b	#0,1(a0)
00005ADA 117C 0000 0018             		move.b	#0,$18(a0)
00005AE0                            
00005AE0                            Obj89_Move:				; XREF: Obj89_Index
00005AE0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005AE6 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005AE8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005AEE 4EB9 0000 0000             		jsr	DisplaySprite
00005AF4                            ; ===========================================================================
00005AF4                            
00005AF4                            Obj89_Delay:				; XREF: Obj89_Move
00005AF4 5428 0024                  		addq.b	#2,$24(a0)
00005AF8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AFE                            
00005AFE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AFE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B02 6A00                       		bpl.s	Obj89_Display
00005B04 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B0A                            
00005B0A                            Obj89_Display:
00005B0A 4EB9 0000 0000             		jsr	DisplaySprite
00005B10                            ; ===========================================================================
00005B10                            ; ---------------------------------------------------------------------------
00005B10                            ; Sprite mappings - Sonic on the ending	sequence
00005B10                            ; ---------------------------------------------------------------------------
00005B10                            Map_obj87:
00005B10                            	include "_maps\obj87.asm"
00005B10                            ; ---------------------------------------------------------------------------
00005B10                            ; Sprite mappings - Sonic on the ending	sequence
00005B10                            ; ---------------------------------------------------------------------------
00005B10 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B14 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B18 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B1C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B20 02                         byte_5690:	dc.b 2
00005B21 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B26 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B2B 03                         byte_569B:	dc.b 3
00005B2C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B31 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B36 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B3B 02                         byte_56AB:	dc.b 2
00005B3C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B41 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B46 02                         byte_56B6:	dc.b 2
00005B47 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B4C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B51 02                         byte_56C1:	dc.b 2
00005B52 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B57 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B5C 03                         byte_56CC:	dc.b 3
00005B5D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B62 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B67 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B6C 07                         byte_56DC:	dc.b 7
00005B6D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B72 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B77 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B7C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B81 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B86 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B8B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B90 18                         byte_5700:	dc.b $18
00005B91 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B96 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B9B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005BA0 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005BA5 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005BAA 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005BAF 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005BB4 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005BB9 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005BBE B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005BC3 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005BC8 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005BCD C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005BD2 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005BD7 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BDC D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BE1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BE6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BEB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BF0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BF5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BFA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BFF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C04 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C0A 00                         		even
00005C0A 00                         		even
00005C0A                            
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            Map_obj88:
00005C0A                            	include "_maps\obj88.asm"
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C0E 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C12 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C16 0000                       		dc.w byte_57AC-Map_obj88
00005C18 01                         byte_5788:	dc.b 1
00005C19 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C1E 01                         byte_578E:	dc.b 1
00005C1F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C24 01                         byte_5794:	dc.b 1
00005C25 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C2A 01                         byte_579A:	dc.b 1
00005C2B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C30 01                         byte_57A0:	dc.b 1
00005C31 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C36 01                         byte_57A6:	dc.b 1
00005C37 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C3C 01                         byte_57AC:	dc.b 1
00005C3D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C42                            		even
00005C42                            		even
00005C42                            
00005C42                            ; ---------------------------------------------------------------------------
00005C42                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C42                            ; ---------------------------------------------------------------------------
00005C42                            Map_obj89:
00005C42                            	include "_maps\obj89.asm"
00005C42                            ; ---------------------------------------------------------------------------
00005C42                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C42                            ; ---------------------------------------------------------------------------
00005C42 0000                       		dc.w byte_57B4-Map_obj89
00005C44 03                         byte_57B4:	dc.b 3
00005C45 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C4A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C4F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C54                            		even
00005C54                            		even
00005C54                            
00005C54                            ; ===========================================================================
00005C54                            ; ---------------------------------------------------------------------------
00005C54                            ; Credits ending sequence
00005C54                            ; ---------------------------------------------------------------------------
00005C54                            
00005C54                            Credits:				; XREF: GameModeArray
00005C54 6100 BBAC                  		bsr.w	ClearPLC
00005C58 6100 C3E2                  		bsr.w	Pal_FadeFrom
00005C5C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C62 3CBC 8004                  		move.w	#$8004,(a6)
00005C66 3CBC 8230                  		move.w	#$8230,(a6)
00005C6A 3CBC 8407                  		move.w	#$8407,(a6)
00005C6E 3CBC 9001                  		move.w	#$9001,(a6)
00005C72 3CBC 9200                  		move.w	#$9200,(a6)
00005C76 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C7A 3CBC 8720                  		move.w	#$8720,(a6)
00005C7E 4238 F64E                  		clr.b	($FFFFF64E).w
00005C82 6100 B864                  		bsr.w	ClearScreen
00005C86 43F8 D000                  		lea	($FFFFD000).w,a1
00005C8A 7000                       		moveq	#0,d0
00005C8C 323C 07FF                  		move.w	#$7FF,d1
00005C90                            
00005C90                            Cred_ClrObjRam:
00005C90 22C0                       		move.l	d0,(a1)+
00005C92 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C96                            
00005C96 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005CA0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005CA6 6100 B9BC                  		bsr.w	NemDec
00005CAA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CAE 7000                       		moveq	#0,d0
00005CB0 323C 001F                  		move.w	#$1F,d1
00005CB4                            
00005CB4                            Cred_ClrPallet:
00005CB4 22C0                       		move.l	d0,(a1)+
00005CB6 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005CBA                            
00005CBA 7003                       		moveq	#3,d0
00005CBC 6100 C628                  		bsr.w	PalLoad1	; load Sonic's pallet
00005CC0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005CC6 4EB9 0000 0000             		jsr	ObjectsLoad
00005CCC 4EB9 0000 0000             		jsr	BuildSprites
00005CD2 6100 0000                  		bsr.w	EndingDemoLoad
00005CD6 7000                       		moveq	#0,d0
00005CD8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CDC E948                       		lsl.w	#4,d0
00005CDE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CE4 45F2 0000                  		lea	(a2,d0.w),a2
00005CE8 7000                       		moveq	#0,d0
00005CEA 1012                       		move.b	(a2),d0
00005CEC 6700                       		beq.s	loc_5862
00005CEE 6100 BAB4                  		bsr.w	LoadPLC		; load level patterns
00005CF2                            
00005CF2                            loc_5862:
00005CF2 7001                       		moveq	#1,d0
00005CF4 6100 BAAE                  		bsr.w	LoadPLC		; load standard	level patterns
00005CF8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CFE 6100 C296                  		bsr.w	Pal_FadeTo
00005D02                            
00005D02                            Cred_WaitLoop:
00005D02 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D08 6100 CF28                  		bsr.w	DelayProgram
00005D0C 6100 BB02                  		bsr.w	RunPLC_RAM
00005D10 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D14 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D16 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D1A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D1C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D22 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Ending sequence demo loading subroutine
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D28                            
00005D28                            
00005D28                            EndingDemoLoad:				; XREF: Credits
00005D28 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D2C 0240 000F                  		andi.w	#$F,d0
00005D30 D040                       		add.w	d0,d0
00005D32 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D36 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D3A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D3E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D44 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D46 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D4C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D52 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D58 7000                       		moveq	#0,d0
00005D5A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D5E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D62 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D66 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D6A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D70 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D72 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D78 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D7C 303C 0008                  		move.w	#8,d0
00005D80                            
00005D80                            EndDemo_LampLoad:
00005D80 24D9                       		move.l	(a1)+,(a2)+
00005D82 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D86                            
00005D86                            EndDemo_Exit:
00005D86 4E75                       		rts	
00005D88                            ; End of function EndingDemoLoad
00005D88                            
00005D88                            ; ===========================================================================
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            ; Levels used in the end sequence demos
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D98                            
00005D98                            ; ---------------------------------------------------------------------------
00005D98                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D98                            ; ---------------------------------------------------------------------------
00005D98                            EndDemo_LampVar:
00005D98 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D9A 0A00 062C 000D             		dc.w $A00, $62C, $D
00005DA0 0000 0000                  		dc.l 0
00005DA4 0000                       		dc.b 0,	0
00005DA6 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005DBA 0101                       		dc.b 1,	1
00005DBC                            ; ===========================================================================
00005DBC                            ; ---------------------------------------------------------------------------
00005DBC                            ; "TRY AGAIN" and "END"	screens
00005DBC                            ; ---------------------------------------------------------------------------
00005DBC                            
00005DBC                            TryAgainEnd:				; XREF: Credits
00005DBC 6100 BA44                  		bsr.w	ClearPLC
00005DC0 6100 C27A                  		bsr.w	Pal_FadeFrom
00005DC4 4DF9 00C0 0004             		lea	($C00004).l,a6
00005DCA 3CBC 8004                  		move.w	#$8004,(a6)
00005DCE 3CBC 8230                  		move.w	#$8230,(a6)
00005DD2 3CBC 8407                  		move.w	#$8407,(a6)
00005DD6 3CBC 9001                  		move.w	#$9001,(a6)
00005DDA 3CBC 9200                  		move.w	#$9200,(a6)
00005DDE 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DE2 3CBC 8720                  		move.w	#$8720,(a6)
00005DE6 4238 F64E                  		clr.b	($FFFFF64E).w
00005DEA 6100 B6FC                  		bsr.w	ClearScreen
00005DEE 43F8 D000                  		lea	($FFFFD000).w,a1
00005DF2 7000                       		moveq	#0,d0
00005DF4 323C 07FF                  		move.w	#$7FF,d1
00005DF8                            
00005DF8                            TryAg_ClrObjRam:
00005DF8 22C0                       		move.l	d0,(a1)+
00005DFA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DFE                            
00005DFE 701D                       		moveq	#$1D,d0
00005E00 6100 BB0E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E04 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E08 7000                       		moveq	#0,d0
00005E0A 323C 001F                  		move.w	#$1F,d1
00005E0E                            
00005E0E                            TryAg_ClrPallet:
00005E0E 22C0                       		move.l	d0,(a1)+
00005E10 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E14                            
00005E14 7013                       		moveq	#$13,d0
00005E16 6100 C4CE                  		bsr.w	PalLoad1	; load ending pallet
00005E1A 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E1E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E24 4EB9 0000 0000             		jsr	ObjectsLoad
00005E2A 4EB9 0000 0000             		jsr	BuildSprites
00005E30 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E36 6100 C15E                  		bsr.w	Pal_FadeTo
00005E3A                            
00005E3A                            ; ---------------------------------------------------------------------------
00005E3A                            ; "TRY AGAIN" and "END"	screen main loop
00005E3A                            ; ---------------------------------------------------------------------------
00005E3A                            TryAg_MainLoop:
00005E3A 6100 B790                  		bsr.w	PauseGame
00005E3E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E44 6100 CDEC                  		bsr.w	DelayProgram
00005E48 4EB9 0000 0000             		jsr	ObjectsLoad
00005E4E 4EB9 0000 0000             		jsr	BuildSprites
00005E54 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E5A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E5C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E60 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E62 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E68 67D0                       		beq.s	TryAg_MainLoop
00005E6A                            
00005E6A                            TryAg_Exit:
00005E6A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E70 4E75                       		rts	
00005E72                            
00005E72                            ; ===========================================================================
00005E72                            ; ---------------------------------------------------------------------------
00005E72                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E72                            ; ---------------------------------------------------------------------------
00005E72                            
00005E72                            Obj8B:					; XREF: Obj_Index
00005E72 7000                       		moveq	#0,d0
00005E74 1028 0024                  		move.b	$24(a0),d0
00005E78 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E7C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E80 4EF9 0000 0000             		jmp	DisplaySprite
00005E86                            ; ===========================================================================
00005E86 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E88 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E8A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E8C 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E8E                            ; ===========================================================================
00005E8E                            
00005E8E                            Obj8B_Main:				; XREF: Obj8B_Index
00005E8E 5428 0024                  		addq.b	#2,$24(a0)
00005E92 317C 0120 0008             		move.w	#$120,8(a0)
00005E98 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E9E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005EA6 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EAC 117C 0000 0001             		move.b	#0,1(a0)
00005EB2 117C 0002 0018             		move.b	#2,$18(a0)
00005EB8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005EBE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EC4 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005EC6 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005ECC 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005ED2 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005ED8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005EDE                            
00005EDE                            Obj8B_Animate:				; XREF: Obj8B_Index
00005EDE 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005EE4 4EF9 0000 0000             		jmp	AnimateSprite
00005EEA                            ; ===========================================================================
00005EEA                            
00005EEA                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005EEA 5428 0024                  		addq.b	#2,$24(a0)
00005EEE 7002                       		moveq	#2,d0
00005EF0 0828 0000 001C             		btst	#0,$1C(a0)
00005EF6 6700                       		beq.s	loc_5A6A
00005EF8 4440                       		neg.w	d0
00005EFA                            
00005EFA                            loc_5A6A:
00005EFA 43F8 D800                  		lea	($FFFFD800).w,a1
00005EFE 7205                       		moveq	#5,d1
00005F00                            
00005F00                            loc_5A70:
00005F00 1340 003E                  		move.b	d0,$3E(a1)
00005F04 3400                       		move.w	d0,d2
00005F06 E742                       		asl.w	#3,d2
00005F08 D529 0026                  		add.b	d2,$26(a1)
00005F0C 43E9 0040                  		lea	$40(a1),a1
00005F10 51C9 FFEE                  		dbf	d1,loc_5A70
00005F14 5228 001A                  		addq.b	#1,$1A(a0)
00005F18 317C 0070 0030             		move.w	#112,$30(a0)
00005F1E                            
00005F1E                            loc_5A8E:				; XREF: Obj8B_Index
00005F1E 5368 0030                  		subq.w	#1,$30(a0)
00005F22 6A00                       		bpl.s	locret_5AA0
00005F24 0868 0000 001C             		bchg	#0,$1C(a0)
00005F2A 117C 0002 0024             		move.b	#2,$24(a0)
00005F30                            
00005F30                            locret_5AA0:
00005F30 4E75                       		rts	
00005F32                            ; ===========================================================================
00005F32                            Ani_obj8B:
00005F32                            	include "_anim\obj8B.asm"
00005F32                            ; ---------------------------------------------------------------------------
00005F32                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F32                            ; ---------------------------------------------------------------------------
00005F32 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F34 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F36 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F38 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F3C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F40 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F52                            		even
00005F52                            		even
00005F52                            
00005F52                            ; ===========================================================================
00005F52                            ; ---------------------------------------------------------------------------
00005F52                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F52                            ; ---------------------------------------------------------------------------
00005F52                            
00005F52                            Obj8C:					; XREF: Obj_Index
00005F52 7000                       		moveq	#0,d0
00005F54 1028 0024                  		move.b	$24(a0),d0
00005F58 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F5C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F60 4EF9 0000 0000             		jmp	DisplaySprite
00005F66                            ; ===========================================================================
00005F66 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F68 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F6A                            ; ===========================================================================
00005F6A                            
00005F6A                            Obj8C_Main:				; XREF: Obj8C_Index
00005F6A 2248                       		movea.l	a0,a1
00005F6C 7400                       		moveq	#0,d2
00005F6E 7600                       		moveq	#0,d3
00005F70 7205                       		moveq	#5,d1
00005F72 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F76                            
00005F76                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F76 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F7A 5429 0024                  		addq.b	#2,$24(a1)
00005F7E 237C 0000 5C0A 0004        		move.l	#Map_obj88,4(a1)
00005F86 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F8C 137C 0000 0001             		move.b	#0,1(a1)
00005F92 137C 0001 0018             		move.b	#1,$18(a1)
00005F98 337C 0104 0008             		move.w	#$104,8(a1)
00005F9E 337C 0120 0038             		move.w	#$120,$38(a1)
00005FA4 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005FAA 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005FB0 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005FB6 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005FBA                            
00005FBA                            Obj8C_ChkEms:
00005FBA 7000                       		moveq	#0,d0
00005FBC 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005FC0 5340                       		subq.w	#1,d0
00005FC2 6500                       		bcs.s	loc_5B42
00005FC4                            
00005FC4                            Obj8C_ChkEmLoop:
00005FC4 B433 0000                  		cmp.b	(a3,d0.w),d2
00005FC8 6600                       		bne.s	loc_5B3E
00005FCA 5202                       		addq.b	#1,d2
00005FCC 60EC                       		bra.s	Obj8C_ChkEms
00005FCE                            ; ===========================================================================
00005FCE                            
00005FCE                            loc_5B3E:
00005FCE 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005FD2                            
00005FD2                            loc_5B42:
00005FD2 1342 001A                  		move.b	d2,$1A(a1)
00005FD6 5229 001A                  		addq.b	#1,$1A(a1)
00005FDA 5202                       		addq.b	#1,d2
00005FDC 137C 0080 0026             		move.b	#$80,$26(a1)
00005FE2 1343 001E                  		move.b	d3,$1E(a1)
00005FE6 1343 001F                  		move.b	d3,$1F(a1)
00005FEA 0643 000A                  		addi.w	#$A,d3
00005FEE 43E9 0040                  		lea	$40(a1),a1
00005FF2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FF6                            
00005FF6                            Obj8C_Move:				; XREF: Obj8C_Index
00005FF6 4A68 003E                  		tst.w	$3E(a0)
00005FFA 6700                       		beq.s	locret_5BBA
00005FFC 4A28 001E                  		tst.b	$1E(a0)
00006000 6700                       		beq.s	loc_5B78
00006002 5328 001E                  		subq.b	#1,$1E(a0)
00006006 6600                       		bne.s	loc_5B80
00006008                            
00006008                            loc_5B78:
00006008 3028 003E                  		move.w	$3E(a0),d0
0000600C D168 0026                  		add.w	d0,$26(a0)
00006010                            
00006010                            loc_5B80:
00006010 1028 0026                  		move.b	$26(a0),d0
00006014 6700                       		beq.s	loc_5B8C
00006016 0C00 0080                  		cmpi.b	#$80,d0
0000601A 6600                       		bne.s	loc_5B96
0000601C                            
0000601C                            loc_5B8C:
0000601C 4268 003E                  		clr.w	$3E(a0)
00006020 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006026                            
00006026                            loc_5B96:
00006026 4EB9 0000 2C64             		jsr	(CalcSine).l
0000602C 7800                       		moveq	#0,d4
0000602E 1828 003C                  		move.b	$3C(a0),d4
00006032 C3C4                       		muls.w	d4,d1
00006034 E081                       		asr.l	#8,d1
00006036 C1C4                       		muls.w	d4,d0
00006038 E080                       		asr.l	#8,d0
0000603A D268 0038                  		add.w	$38(a0),d1
0000603E D068 003A                  		add.w	$3A(a0),d0
00006042 3141 0008                  		move.w	d1,8(a0)
00006046 3140 000A                  		move.w	d0,$A(a0)
0000604A                            
0000604A                            locret_5BBA:
0000604A 4E75                       		rts	
0000604C                            ; ===========================================================================
0000604C                            ; ---------------------------------------------------------------------------
0000604C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000604C                            ; ---------------------------------------------------------------------------
0000604C                            Map_obj8B:
0000604C                            	include "_maps\obj8B.asm"
0000604C                            ; ---------------------------------------------------------------------------
0000604C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000604C                            ; ---------------------------------------------------------------------------
0000604C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006050 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006054 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006058 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000605C 08                         byte_5BCC:	dc.b 8
0000605D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006062 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006067 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000606C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006071 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006076 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000607B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006080 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006085 08                         byte_5BF5:	dc.b 8
00006086 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000608B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006090 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006095 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000609A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000609F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060A4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060A9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060AE 08                         byte_5C1E:	dc.b 8
000060AF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000060B4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000060B9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000060BE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000060C3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060C8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060CD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060D2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060D7 08                         byte_5C47:	dc.b 8
000060D8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060DD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060E2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060E7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060EC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060F1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060F6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060FB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006100 0C                         byte_5C70:	dc.b $C
00006101 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006106 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000610B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006110 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006115 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000611A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000611F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006124 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006129 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000612E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006133 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006138 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000613D 0A                         byte_5CAD:	dc.b $A
0000613E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006143 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006148 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000614D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006152 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006157 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000615C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006161 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006166 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000616B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006170 0A                         byte_5CE0:	dc.b $A
00006171 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006176 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000617B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006180 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006185 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000618A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000618F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006194 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006199 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000619E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000061A3 0C                         byte_5D13:	dc.b $C
000061A4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000061A9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000061AE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000061B3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000061B8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000061BD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000061C2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000061C7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000061CC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000061D1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000061D6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061DB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061E0                            		even
000061E0                            		even
000061E0                            
000061E0                            ; ---------------------------------------------------------------------------
000061E0                            ; Ending sequence demos
000061E0                            ; ---------------------------------------------------------------------------
000061E0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000620E                            		even
0000620E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000624E                            		even
0000624E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000627E                            		even
0000627E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000062AE                            		even
000062AE                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000062CE                            		even
000062CE                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062EE                            		even
000062EE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000631E                            		even
0000631E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000634E                            		even
0000634E                            
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            ; Subroutine to	load level boundaries and start	locations
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            
0000634E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000634E                            
0000634E                            
0000634E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000634E 7000                       		moveq	#0,d0
00006350 11C0 F740                  		move.b	d0,($FFFFF740).w
00006354 11C0 F741                  		move.b	d0,($FFFFF741).w
00006358 11C0 F746                  		move.b	d0,($FFFFF746).w
0000635C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006360 11C0 F742                  		move.b	d0,($FFFFF742).w
00006364 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006368 ED08                       		lsl.b	#6,d0
0000636A E848                       		lsr.w	#4,d0
0000636C 3200                       		move.w	d0,d1
0000636E D040                       		add.w	d0,d0
00006370 D041                       		add.w	d1,d0
00006372 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006376 3018                       		move.w	(a0)+,d0
00006378 31C0 F730                  		move.w	d0,($FFFFF730).w
0000637C 2018                       		move.l	(a0)+,d0
0000637E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006382 21C0 F720                  		move.l	d0,($FFFFF720).w
00006386 2018                       		move.l	(a0)+,d0
00006388 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000638C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006390 3038 F728                  		move.w	($FFFFF728).w,d0
00006394 0640 0240                  		addi.w	#$240,d0
00006398 31C0 F732                  		move.w	d0,($FFFFF732).w
0000639C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000063A2 3018                       		move.w	(a0)+,d0
000063A4 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000063A8 6000 0000                  		bra.w	LevSz_ChkLamp
000063AC                            ; ===========================================================================
000063AC                            ; ---------------------------------------------------------------------------
000063AC                            ; Level size array and ending start location array
000063AC                            ; ---------------------------------------------------------------------------
000063AC                            LevelSizeArray:        ; GHZ
000063AC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000063B8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000063C4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000063D0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000063DC                                    ; LZ
000063DC 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000063E8 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000063F4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006400 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
0000640C                                    ; MZ
0000640C 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006418 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006424 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006430 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000643C                                    ; SLZ
0000643C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006448 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006454 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006460 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000646C                                    ; SYZ
0000646C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006478 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006484 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006490 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000649C                                    ; SBZ
0000649C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000064A8 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000064B4 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000064C0 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064CC                                    ; Ending
000064CC 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000064D8 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000064E4 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000064F0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000064FC                                    even
000064FC                            EndingStLocArray:
000064FC                            		incbin	misc\sloc_end.bin
0000651C                            		even
0000651C                            
0000651C                            ; ===========================================================================
0000651C                            
0000651C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000651C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006520 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006522 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006528 3238 D008                  		move.w	($FFFFD008).w,d1
0000652C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006530 6000                       		bra.s	loc_60D0
00006532                            ; ===========================================================================
00006532                            
00006532                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006532 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006536 ED08                       		lsl.b	#6,d0
00006538 E848                       		lsr.w	#4,d0
0000653A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000653E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006542 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006544 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006548 5340                       		subq.w	#1,d0
0000654A E548                       		lsl.w	#2,d0
0000654C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006550                            
00006550                            LevSz_SonicPos:
00006550 7200                       		moveq	#0,d1
00006552 3219                       		move.w	(a1)+,d1
00006554 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006558 7000                       		moveq	#0,d0
0000655A 3011                       		move.w	(a1),d0
0000655C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006560                            
00006560                            loc_60D0:				; XREF: LevSz_ChkLamp
00006560 0441 00A0                  		subi.w	#$A0,d1
00006564 6400                       		bcc.s	loc_60D8
00006566 7200                       		moveq	#0,d1
00006568                            
00006568                            loc_60D8:
00006568 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000656C B242                       		cmp.w	d2,d1
0000656E 6500                       		bcs.s	loc_60E2
00006570 3202                       		move.w	d2,d1
00006572                            
00006572                            loc_60E2:
00006572 31C1 F700                  		move.w	d1,($FFFFF700).w
00006576 0440 0060                  		subi.w	#$60,d0
0000657A 6400                       		bcc.s	loc_60EE
0000657C 7000                       		moveq	#0,d0
0000657E                            
0000657E                            loc_60EE:
0000657E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006582 6D00                       		blt.s	loc_60F8
00006584 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006588                            
00006588                            loc_60F8:
00006588 31C0 F704                  		move.w	d0,($FFFFF704).w
0000658C 6100 0000                  		bsr.w	BgScrollSpeed
00006590 7000                       		moveq	#0,d0
00006592 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006596 E508                       		lsl.b	#2,d0
00006598 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000659E 6000 0000                  		bra.w	LevSz_Unk
000065A2                            ; ===========================================================================
000065A2                            ; ---------------------------------------------------------------------------
000065A2                            ; Sonic	start location array
000065A2                            ; ---------------------------------------------------------------------------
000065A2                            StartLocArray:	incbin	misc\sloc_lev.bin
00006612                            		even
00006612                            
00006612                            ; ---------------------------------------------------------------------------
00006612                            ; Which	256x256	tiles contain loops or roll-tunnels
00006612                            ; ---------------------------------------------------------------------------
00006612                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006612                            ; loop,	loop, tunnel, tunnel
00006612                            ; ---------------------------------------------------------------------------
00006612                            LoopTileNums:	incbin	misc\loopnums.bin
0000662E                            		even
0000662E                            
0000662E                            ; ===========================================================================
0000662E                            
0000662E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000662E 7000                       		moveq	#0,d0
00006630 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006634 E748                       		lsl.w	#3,d0
00006636 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000663A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000663E 24D9                       		move.l	(a1)+,(a2)+
00006640 24D9                       		move.l	(a1)+,(a2)+
00006642 4E75                       		rts	
00006644                            ; End of function LevelSizeLoad
00006644                            
00006644                            ; ===========================================================================
00006644 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000664C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006654 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000665C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006664 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000666C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006674 0070 0100 0100 0100        		dc.l $700100, $1000100
0000667C                            
0000667C                            ; ---------------------------------------------------------------------------
0000667C                            ; Subroutine to	set scroll speed of some backgrounds
0000667C                            ; ---------------------------------------------------------------------------
0000667C                            
0000667C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000667C                            
0000667C                            
0000667C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000667C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006680 6600                       		bne.s	loc_6206
00006682 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006686 31C0 F714                  		move.w	d0,($FFFFF714).w
0000668A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000668E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006692 31C1 F718                  		move.w	d1,($FFFFF718).w
00006696                            
00006696                            loc_6206:
00006696 7400                       		moveq	#0,d2
00006698 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000669C D442                       		add.w	d2,d2
0000669E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066A2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066A6                            ; End of function BgScrollSpeed
000066A6                            
000066A6                            ; ===========================================================================
000066A6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066AA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066AE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066B2 0000                       		dc.w BgScroll_End-BgScroll_Index
000066B4                            ; ===========================================================================
000066B4                            
000066B4                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066B4 6000 0000                  		bra.w	Deform_GHZ
000066B8                            ; ===========================================================================
000066B8                            
000066B8                            BgScroll_LZ:				; XREF: BgScroll_Index
000066B8 E280                       		asr.l	#1,d0
000066BA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066BE 4E75                       		rts	
000066C0                            ; ===========================================================================
000066C0                            
000066C0                            BgScroll_MZ:				; XREF: BgScroll_Index
000066C0 4E75                       		rts	
000066C2                            ; ===========================================================================
000066C2                            
000066C2                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066C2 E280                       		asr.l	#1,d0
000066C4 0640 00C0                  		addi.w	#$C0,d0
000066C8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066CC 4E75                       		rts	
000066CE                            ; ===========================================================================
000066CE                            
000066CE                            BgScroll_SYZ:				; XREF: BgScroll_Index
000066CE E980                       		asl.l	#4,d0
000066D0 2400                       		move.l	d0,d2
000066D2 E380                       		asl.l	#1,d0
000066D4 D082                       		add.l	d2,d0
000066D6 E080                       		asr.l	#8,d0
000066D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066DC 31C0 F714                  		move.w	d0,($FFFFF714).w
000066E0 4E75                       		rts	
000066E2                            ; ===========================================================================
000066E2                            
000066E2                            BgScroll_SBZ:				; XREF: BgScroll_Index
000066E2 E980                       		asl.l	#4,d0
000066E4 E380                       		asl.l	#1,d0
000066E6 E080                       		asr.l	#8,d0
000066E8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066EC 4E75                       		rts	
000066EE                            ; ===========================================================================
000066EE                            
000066EE                            BgScroll_End:				; XREF: BgScroll_Index
000066EE 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066F4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000066FA 4E75                       		rts	
000066FC                            ; ===========================================================================
000066FC 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006702 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006708 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000670E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006714 4E75                       		rts
00006716                            
00006716                            ; ---------------------------------------------------------------------------
00006716                            ; Background layer deformation subroutines
00006716                            ; ---------------------------------------------------------------------------
00006716                            
00006716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006716                            
00006716                            
00006716                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006716 4A38 F744                  		tst.b	($FFFFF744).w
0000671A 6700                       		beq.s	loc_628E
0000671C 4E75                       		rts	
0000671E                            ; ===========================================================================
0000671E                            
0000671E                            loc_628E:
0000671E 4278 F754                  		clr.w	($FFFFF754).w
00006722 4278 F756                  		clr.w	($FFFFF756).w
00006726 4278 F758                  		clr.w	($FFFFF758).w
0000672A 4278 F75A                  		clr.w	($FFFFF75A).w
0000672E 6100 0000                  		bsr.w	ScrollHoriz
00006732 6100 0000                  		bsr.w	ScrollVertical
00006736 6100 0000                  		bsr.w	DynScrResizeLoad
0000673A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006740 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006746 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000674C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006752 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006758 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000675E 7000                       		moveq	#0,d0
00006760 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006764 D040                       		add.w	d0,d0
00006766 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000676A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000676E                            ; End of function DeformBgLayer
0000676E                            
0000676E                            ; ===========================================================================
0000676E                            ; ---------------------------------------------------------------------------
0000676E                            ; Offset index for background layer deformation	code
0000676E                            ; ---------------------------------------------------------------------------
0000676E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006772 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006776 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000677A 0000                       		dc.w Deform_GHZ-Deform_Index
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            ; Green	Hill Zone background layer deformation code
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            
0000677C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000677C                            
0000677C                            
0000677C                            Deform_GHZ:				; XREF: Deform_Index
0000677C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006780 48C4                       		ext.l	d4
00006782 EB84                       		asl.l	#5,d4
00006784 2204                       		move.l	d4,d1
00006786 E384                       		asl.l	#1,d4
00006788 D881                       		add.l	d1,d4
0000678A 7A00                       		moveq	#0,d5
0000678C 6100 0000                  		bsr.w	ScrollBlock1
00006790 6100 0000                  		bsr.w	ScrollBlock4
00006794 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006798 3038 F704                  		move.w	($FFFFF704).w,d0
0000679C 0240 07FF                  		andi.w	#$7FF,d0
000067A0 EA48                       		lsr.w	#5,d0
000067A2 4440                       		neg.w	d0
000067A4 0640 0026                  		addi.w	#$26,d0
000067A8 31C0 F714                  		move.w	d0,($FFFFF714).w
000067AC 3800                       		move.w	d0,d4
000067AE 6100 0000                  		bsr.w	ScrollBlock3
000067B2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067B8 323C 006F                  		move.w	#$6F,d1
000067BC 9244                       		sub.w	d4,d1
000067BE 3038 F700                  		move.w	($FFFFF700).w,d0
000067C2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000067C8 6600                       		bne.s	loc_633C
000067CA 7000                       		moveq	#0,d0
000067CC                            
000067CC                            loc_633C:
000067CC 4440                       		neg.w	d0
000067CE 4840                       		swap	d0
000067D0 3038 F708                  		move.w	($FFFFF708).w,d0
000067D4 4440                       		neg.w	d0
000067D6                            
000067D6                            loc_6346:
000067D6 22C0                       		move.l	d0,(a1)+
000067D8 51C9 FFFC                  		dbf	d1,loc_6346
000067DC 323C 0027                  		move.w	#$27,d1
000067E0 3038 F710                  		move.w	($FFFFF710).w,d0
000067E4 4440                       		neg.w	d0
000067E6                            
000067E6                            loc_6356:
000067E6 22C0                       		move.l	d0,(a1)+
000067E8 51C9 FFFC                  		dbf	d1,loc_6356
000067EC 3038 F710                  		move.w	($FFFFF710).w,d0
000067F0 0640 0000                  		addi.w	#0,d0
000067F4 3438 F700                  		move.w	($FFFFF700).w,d2
000067F8 0642 FE00                  		addi.w	#-$200,d2
000067FC 9440                       		sub.w	d0,d2
000067FE 48C2                       		ext.l	d2
00006800 E182                       		asl.l	#8,d2
00006802 85FC 0068                  		divs.w	#$68,d2
00006806 48C2                       		ext.l	d2
00006808 E182                       		asl.l	#8,d2
0000680A 7600                       		moveq	#0,d3
0000680C 3600                       		move.w	d0,d3
0000680E 323C 0047                  		move.w	#$47,d1
00006812 D244                       		add.w	d4,d1
00006814                            
00006814                            loc_6384:
00006814 3003                       		move.w	d3,d0
00006816 4440                       		neg.w	d0
00006818 22C0                       		move.l	d0,(a1)+
0000681A 4843                       		swap	d3
0000681C D682                       		add.l	d2,d3
0000681E 4843                       		swap	d3
00006820 51C9 FFF2                  		dbf	d1,loc_6384
00006824 4E75                       		rts	
00006826                            ; End of function Deform_GHZ
00006826                            
00006826                            ; ---------------------------------------------------------------------------
00006826                            ; Labyrinth Zone background layer deformation code
00006826                            ; ---------------------------------------------------------------------------
00006826                            
00006826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006826                            
00006826                            
00006826                            Deform_LZ:				; XREF: Deform_Index
00006826 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000682A 48C4                       		ext.l	d4
0000682C EF84                       		asl.l	#7,d4
0000682E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006832 48C5                       		ext.l	d5
00006834 EF85                       		asl.l	#7,d5
00006836 6100 0000                  		bsr.w	ScrollBlock1
0000683A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006840 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006844 323C 00DF                  		move.w	#$DF,d1
00006848 3038 F700                  		move.w	($FFFFF700).w,d0
0000684C 4440                       		neg.w	d0
0000684E 4840                       		swap	d0
00006850 3038 F708                  		move.w	($FFFFF708).w,d0
00006854 4440                       		neg.w	d0
00006856                            
00006856                            loc_63C6:
00006856 22C0                       		move.l	d0,(a1)+
00006858 51C9 FFFC                  		dbf	d1,loc_63C6
0000685C 3038 F646                  		move.w	($FFFFF646).w,d0
00006860 9078 F704                  		sub.w	($FFFFF704).w,d0
00006864 4E75                       		rts	
00006866                            ; End of function Deform_LZ
00006866                            
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Marble Zone background layer deformation code
00006866                            ; ---------------------------------------------------------------------------
00006866                            
00006866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006866                            
00006866                            
00006866                            Deform_MZ:				; XREF: Deform_Index
00006866 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000686A 48C4                       		ext.l	d4
0000686C ED84                       		asl.l	#6,d4
0000686E 2204                       		move.l	d4,d1
00006870 E384                       		asl.l	#1,d4
00006872 D881                       		add.l	d1,d4
00006874 7A00                       		moveq	#0,d5
00006876 6100 0000                  		bsr.w	ScrollBlock1
0000687A 303C 0200                  		move.w	#$200,d0
0000687E 3238 F704                  		move.w	($FFFFF704).w,d1
00006882 0441 01C8                  		subi.w	#$1C8,d1
00006886 6500                       		bcs.s	loc_6402
00006888 3401                       		move.w	d1,d2
0000688A D241                       		add.w	d1,d1
0000688C D242                       		add.w	d2,d1
0000688E E441                       		asr.w	#2,d1
00006890 D041                       		add.w	d1,d0
00006892                            
00006892                            loc_6402:
00006892 31C0 F714                  		move.w	d0,($FFFFF714).w
00006896 6100 0000                  		bsr.w	ScrollBlock3
0000689A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068A0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068A4 323C 00DF                  		move.w	#$DF,d1
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0
000068AC 4440                       		neg.w	d0
000068AE 4840                       		swap	d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0
000068B4 4440                       		neg.w	d0
000068B6                            
000068B6                            loc_6426:
000068B6 22C0                       		move.l	d0,(a1)+
000068B8 51C9 FFFC                  		dbf	d1,loc_6426
000068BC 4E75                       		rts	
000068BE                            ; End of function Deform_MZ
000068BE                            
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            ; Star Light Zone background layer deformation code
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            
000068BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068BE                            
000068BE                            
000068BE                            Deform_SLZ:				; XREF: Deform_Index
000068BE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068C2 48C4                       		ext.l	d4
000068C4 EB84                       		asl.l	#5,d4
000068C6 2204                       		move.l	d4,d1
000068C8 E384                       		asl.l	#1,d4
000068CA D881                       		add.l	d1,d4
000068CC 7A00                       		moveq	#0,d5
000068CE 6100 0000                  		bsr.w	ScrollBlock1
000068D2 6100 0000                  		bsr.w	ScrollBlock3
000068D6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068DA                            	;	move.w	($FFFFF704).w,d0
000068DA                            	;	andi.w	#$7FF,d0
000068DA EA48                       		lsr.w	#5,d0
000068DC 4440                       		neg.w	d0
000068DE 0640 0026                  		addi.w	#$26,d0
000068E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E6 3800                       		move.w	d0,d4
000068E8                            	;	bsr.w	ScrollBlock3
000068E8 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000068EE 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000068F2                            
000068F2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068F6 4440                       		neg.w	d0			; negate (positive to negative)
000068F8 4840                       		swap	d0			; send to the left side of d0
000068FA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068FE 45F8 A800                  		lea	($FFFFA800).w,a2
00006902 069A 0000 5000             		addi.l	#$5000,(a2)+
00006908 069A 0000 C000             		addi.l	#$C000,(a2)+
0000690E 3038 A800                  		move.w	($FFFFA800).w,d0
00006912 4440                       		neg.w	d0			; negate (positive to negative)
00006914 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006916 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000691A                            slz_DeformLoop_1:
0000691A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000691C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006920                            
00006920 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006924 4440                       		neg.w	d0			; negate (positive to negative)
00006926 4840                       		swap	d0			; send to the left side of d0
00006928 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000692C 45F8 A800                  		lea	($FFFFA800).w,a2
00006930 069A 0000 5000             		addi.l	#$5000,(a2)+
00006936 069A 0000 C000             		addi.l	#$C000,(a2)+
0000693C 3038 A800                  		move.w	($FFFFA800).w,d0
00006940 4440                       		neg.w	d0			; negate (positive to negative)
00006942 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006944 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006948                            slz_DeformLoop_2:
00006948 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000694A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000694E                            
0000694E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006952 4440                       		neg.w	d0			; negate (positive to negative)
00006954 4840                       		swap	d0			; send to the left side of d0
00006956 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000695A 45F8 A800                  		lea	($FFFFA800).w,a2
0000695E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006964 069A 0000 C000             		addi.l	#$C000,(a2)+
0000696A 3038 A800                  		move.w	($FFFFA800).w,d0
0000696E 4440                       		neg.w	d0			; negate (positive to negative)
00006970 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006972 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006976                            slz_DeformLoop_3:
00006976 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006978 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000697C                            
0000697C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006980 4440                       		neg.w	d0			; negate (positive to negative)
00006982 4840                       		swap	d0			; send to the left side of d0
00006984 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006988 45F8 A800                  		lea	($FFFFA800).w,a2
0000698C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006992 069A 0000 C000             		addi.l	#$C000,(a2)+
00006998 3038 A800                  		move.w	($FFFFA800).w,d0
0000699C 4440                       		neg.w	d0			; negate (positive to negative)
0000699E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069A0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A4                            slz_DeformLoop_4:
000069A4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069AA                            
000069AA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069AE 4440                       		neg.w	d0			; negate (positive to negative)
000069B0 4840                       		swap	d0			; send to the left side of d0
000069B2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B6 45F8 A800                  		lea	($FFFFA800).w,a2
000069BA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069C0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069C6 3038 A800                  		move.w	($FFFFA800).w,d0
000069CA 4440                       		neg.w	d0			; negate (positive to negative)
000069CC E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000069CE 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D2                            slz_DeformLoop_5:
000069D2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000069D8                            
000069D8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069DC 4440                       		neg.w	d0			; negate (positive to negative)
000069DE 4840                       		swap	d0			; send to the left side of d0
000069E0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069E4 4440                       		neg.w	d0			; negate (positive to negative)
000069E6 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000069E8 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069EC                            slz_DeformLoop_6:
000069EC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069EE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000069F2                            
000069F2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069F6 4440                       		neg.w	d0			; negate (positive to negative)
000069F8 4840                       		swap	d0			; send to the left side of d0
000069FA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069FE 4440                       		neg.w	d0			; negate (positive to negative)
00006A00 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A02 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A06                            slz_DeformLoop_7:
00006A06 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A08 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A0C                            
00006A0C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A10 4440                       		neg.w	d0			; negate (positive to negative)
00006A12 4840                       		swap	d0			; send to the left side of d0
00006A14 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A18 4440                       		neg.w	d0			; negate (positive to negative)
00006A1A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A1C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A20                            slz_DeformLoop_8:
00006A20 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A22 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A26                            
00006A26 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A2A 4440                       		neg.w	d0			; negate (positive to negative)
00006A2C 4840                       		swap	d0			; send to the left side of d0
00006A2E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A32 4440                       		neg.w	d0			; negate (positive to negative)
00006A34 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A36 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A3A                            slz_DeformLoop_9:
00006A3A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A3C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A40                            
00006A40 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A44 4440                       		neg.w	d0			; negate (positive to negative)
00006A46 4840                       		swap	d0			; send to the left side of d0
00006A48 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A4C 4440                       		neg.w	d0			; negate (positive to negative)
00006A4E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A50 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A54                            slz_DeformLoop_10:
00006A54 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A56 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A5A                            
00006A5A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A5E 4440                       		neg.w	d0			; negate (positive to negative)
00006A60 4840                       		swap	d0			; send to the left side of d0
00006A62 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A66 4440                       		neg.w	d0			; negate (positive to negative)
00006A68 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A6A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A6E                            slz_DeformLoop_11:
00006A6E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A70 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A74                            
00006A74 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A78 4440                       		neg.w	d0			; negate (positive to negative)
00006A7A 4840                       		swap	d0			; send to the left side of d0
00006A7C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A80 4440                       		neg.w	d0			; negate (positive to negative)
00006A82 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A84 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A88                            slz_DeformLoop_12:
00006A88 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A8A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006A8E                            
00006A8E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A92 4440                       		neg.w	d0			; negate (positive to negative)
00006A94 4840                       		swap	d0			; send to the left side of d0
00006A96 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A9A 4440                       		neg.w	d0			; negate (positive to negative)
00006A9C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006A9E 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AA2                            slz_DeformLoop_13:
00006AA2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AA4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006AA8 4E75                       		rts	
00006AAA                            ; End of function Deform_SLZ
00006AAA 4E75                       		rts	
00006AAC                            ; End of function Deform_SLZ_2
00006AAC                            
00006AAC                            ; ---------------------------------------------------------------------------
00006AAC                            ; Spring Yard Zone background layer deformation	code
00006AAC                            ; ---------------------------------------------------------------------------
00006AAC                            
00006AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AAC                            
00006AAC                            
00006AAC                            Deform_SYZ:				; XREF: Deform_Index
00006AAC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AB0 48C4                       		ext.l	d4
00006AB2 ED84                       		asl.l	#6,d4
00006AB4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AB8 48C5                       		ext.l	d5
00006ABA E985                       		asl.l	#4,d5
00006ABC 2205                       		move.l	d5,d1
00006ABE E385                       		asl.l	#1,d5
00006AC0 DA81                       		add.l	d1,d5
00006AC2 6100 0000                  		bsr.w	ScrollBlock1
00006AC6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006ACC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AD0 323C 00DF                  		move.w	#$DF,d1
00006AD4 3038 F700                  		move.w	($FFFFF700).w,d0
00006AD8 4440                       		neg.w	d0
00006ADA 4840                       		swap	d0
00006ADC 3038 F708                  		move.w	($FFFFF708).w,d0
00006AE0 4440                       		neg.w	d0
00006AE2                            
00006AE2                            loc_653C:
00006AE2 22C0                       		move.l	d0,(a1)+
00006AE4 51C9 FFFC                  		dbf	d1,loc_653C
00006AE8 4E75                       		rts	
00006AEA                            ; End of function Deform_SYZ
00006AEA                            
00006AEA                            ; ---------------------------------------------------------------------------
00006AEA                            ; Scrap	Brain Zone background layer deformation	code
00006AEA                            ; ---------------------------------------------------------------------------
00006AEA                            
00006AEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AEA                            
00006AEA                            
00006AEA                            Deform_SBZ:				; XREF: Deform_Index
00006AEA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AEE 48C4                       		ext.l	d4
00006AF0 ED84                       		asl.l	#6,d4
00006AF2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AF6 48C5                       		ext.l	d5
00006AF8 E985                       		asl.l	#4,d5
00006AFA E385                       		asl.l	#1,d5
00006AFC 6100 0000                  		bsr.w	ScrollBlock1
00006B00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B06 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B0A 323C 00DF                  		move.w	#$DF,d1
00006B0E 3038 F700                  		move.w	($FFFFF700).w,d0
00006B12 4440                       		neg.w	d0
00006B14 4840                       		swap	d0
00006B16 3038 F708                  		move.w	($FFFFF708).w,d0
00006B1A 4440                       		neg.w	d0
00006B1C                            
00006B1C                            loc_6576:
00006B1C 22C0                       		move.l	d0,(a1)+
00006B1E 51C9 FFFC                  		dbf	d1,loc_6576
00006B22 4E75                       		rts	
00006B24                            ; End of function Deform_SBZ
00006B24                            
00006B24                            ; ---------------------------------------------------------------------------
00006B24                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B24                            ; ---------------------------------------------------------------------------
00006B24                            
00006B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B24                            
00006B24                            
00006B24                            ScrollHoriz:				; XREF: DeformBgLayer
00006B24 3838 F700                  		move.w	($FFFFF700).w,d4
00006B28 6100                       		bsr.s	ScrollHoriz2
00006B2A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B2E 0240 0010                  		andi.w	#$10,d0
00006B32 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B36 B300                       		eor.b	d1,d0
00006B38 6600                       		bne.s	locret_65B0
00006B3A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B40 3038 F700                  		move.w	($FFFFF700).w,d0
00006B44 9044                       		sub.w	d4,d0
00006B46 6A00                       		bpl.s	loc_65AA
00006B48 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B4E 4E75                       		rts	
00006B50                            ; ===========================================================================
00006B50                            
00006B50                            loc_65AA:
00006B50 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006B56                            
00006B56                            locret_65B0:
00006B56 4E75                       		rts	
00006B58                            ; End of function ScrollHoriz
00006B58                            
00006B58                            
00006B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B58                            
00006B58                            
00006B58                            ScrollHoriz2:				; XREF: ScrollHoriz
00006B58 3038 D008                  		move.w	($FFFFD008).w,d0
00006B5C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006B60 0440 0090                  		subi.w	#$90,d0
00006B64 6500                       		bcs.s	loc_65F6
00006B66 0440 0010                  		subi.w	#$10,d0
00006B6A 6400                       		bcc.s	loc_65CC
00006B6C 4278 F73A                  		clr.w	($FFFFF73A).w
00006B70 4E75                       		rts	
00006B72                            ; ===========================================================================
00006B72                            
00006B72                            loc_65CC:
00006B72 0C40 0010                  		cmpi.w	#$10,d0
00006B76 6500                       		bcs.s	loc_65D6
00006B78 303C 0010                  		move.w	#$10,d0
00006B7C                            
00006B7C                            loc_65D6:
00006B7C D078 F700                  		add.w	($FFFFF700).w,d0
00006B80 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006B84 6D00                       		blt.s	loc_65E4
00006B86 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006B8A                            
00006B8A                            loc_65E4:
00006B8A 3200                       		move.w	d0,d1
00006B8C 9278 F700                  		sub.w	($FFFFF700).w,d1
00006B90 E141                       		asl.w	#8,d1
00006B92 31C0 F700                  		move.w	d0,($FFFFF700).w
00006B96 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006B9A 4E75                       		rts	
00006B9C                            ; ===========================================================================
00006B9C                            
00006B9C                            loc_65F6:				; XREF: ScrollHoriz2
00006B9C D078 F700                  		add.w	($FFFFF700).w,d0
00006BA0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006BA4 6EE4                       		bgt.s	loc_65E4
00006BA6 3038 F728                  		move.w	($FFFFF728).w,d0
00006BAA 60DE                       		bra.s	loc_65E4
00006BAC                            ; End of function ScrollHoriz2
00006BAC                            
00006BAC                            ; ===========================================================================
00006BAC 4A40                       		tst.w	d0
00006BAE 6A00                       		bpl.s	loc_6610
00006BB0 303C FFFE                  		move.w	#-2,d0
00006BB4 60E6                       		bra.s	loc_65F6
00006BB6                            ; ===========================================================================
00006BB6                            
00006BB6                            loc_6610:
00006BB6 303C 0002                  		move.w	#2,d0
00006BBA 60B6                       		bra.s	loc_65CC
00006BBC                            
00006BBC                            ; ---------------------------------------------------------------------------
00006BBC                            ; Subroutine to	scroll the level vertically as Sonic moves
00006BBC                            ; ---------------------------------------------------------------------------
00006BBC                            
00006BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BBC                            
00006BBC                            
00006BBC                            ScrollVertical:				; XREF: DeformBgLayer
00006BBC 7200                       		moveq	#0,d1
00006BBE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006BC2 9078 F704                  		sub.w	($FFFFF704).w,d0
00006BC6 0838 0002 D022             		btst	#2,($FFFFD022).w
00006BCC 6700                       		beq.s	loc_662A
00006BCE 5B40                       		subq.w	#5,d0
00006BD0                            
00006BD0                            loc_662A:
00006BD0 0838 0001 D022             		btst	#1,($FFFFD022).w
00006BD6 6700                       		beq.s	loc_664A
00006BD8 0640 0020                  		addi.w	#$20,d0
00006BDC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BE0 6500                       		bcs.s	loc_6696
00006BE2 0440 0040                  		subi.w	#$40,d0
00006BE6 6400                       		bcc.s	loc_6696
00006BE8 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BEC 6600                       		bne.s	loc_66A8
00006BEE 6000                       		bra.s	loc_6656
00006BF0                            ; ===========================================================================
00006BF0                            
00006BF0                            loc_664A:
00006BF0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BF4 6600                       		bne.s	loc_665C
00006BF6 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BFA 6600                       		bne.s	loc_66A8
00006BFC                            
00006BFC                            loc_6656:
00006BFC 4278 F73C                  		clr.w	($FFFFF73C).w
00006C00 4E75                       		rts	
00006C02                            ; ===========================================================================
00006C02                            
00006C02                            loc_665C:
00006C02 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C08 6600                       		bne.s	loc_6684
00006C0A 3238 D014                  		move.w	($FFFFD014).w,d1
00006C0E 6A00                       		bpl.s	loc_666C
00006C10 4441                       		neg.w	d1
00006C12                            
00006C12                            loc_666C:
00006C12 0C41 0800                  		cmpi.w	#$800,d1
00006C16 6400                       		bcc.s	loc_6696
00006C18 323C 0600                  		move.w	#$600,d1
00006C1C 0C40 0006                  		cmpi.w	#6,d0
00006C20 6E00                       		bgt.s	loc_66F6
00006C22 0C40 FFFA                  		cmpi.w	#-6,d0
00006C26 6D00                       		blt.s	loc_66C0
00006C28 6000                       		bra.s	loc_66AE
00006C2A                            ; ===========================================================================
00006C2A                            
00006C2A                            loc_6684:
00006C2A 323C 0200                  		move.w	#$200,d1
00006C2E 0C40 0002                  		cmpi.w	#2,d0
00006C32 6E00                       		bgt.s	loc_66F6
00006C34 0C40 FFFE                  		cmpi.w	#-2,d0
00006C38 6D00                       		blt.s	loc_66C0
00006C3A 6000                       		bra.s	loc_66AE
00006C3C                            ; ===========================================================================
00006C3C                            
00006C3C                            loc_6696:
00006C3C 323C 1000                  		move.w	#$1000,d1
00006C40 0C40 0010                  		cmpi.w	#$10,d0
00006C44 6E00                       		bgt.s	loc_66F6
00006C46 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C4A 6D00                       		blt.s	loc_66C0
00006C4C 6000                       		bra.s	loc_66AE
00006C4E                            ; ===========================================================================
00006C4E                            
00006C4E                            loc_66A8:
00006C4E 7000                       		moveq	#0,d0
00006C50 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006C54                            
00006C54                            loc_66AE:
00006C54 7200                       		moveq	#0,d1
00006C56 3200                       		move.w	d0,d1
00006C58 D278 F704                  		add.w	($FFFFF704).w,d1
00006C5C 4A40                       		tst.w	d0
00006C5E 6A00 0000                  		bpl.w	loc_6700
00006C62 6000 0000                  		bra.w	loc_66CC
00006C66                            ; ===========================================================================
00006C66                            
00006C66                            loc_66C0:
00006C66 4441                       		neg.w	d1
00006C68 48C1                       		ext.l	d1
00006C6A E181                       		asl.l	#8,d1
00006C6C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C70 4841                       		swap	d1
00006C72                            
00006C72                            loc_66CC:
00006C72 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006C76 6E00                       		bgt.s	loc_6724
00006C78 0C41 FF00                  		cmpi.w	#-$100,d1
00006C7C 6E00                       		bgt.s	loc_66F0
00006C7E 0241 07FF                  		andi.w	#$7FF,d1
00006C82 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C88 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006C8E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C94 6000                       		bra.s	loc_6724
00006C96                            ; ===========================================================================
00006C96                            
00006C96                            loc_66F0:
00006C96 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006C9A 6000                       		bra.s	loc_6724
00006C9C                            ; ===========================================================================
00006C9C                            
00006C9C                            loc_66F6:
00006C9C 48C1                       		ext.l	d1
00006C9E E181                       		asl.l	#8,d1
00006CA0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CA4 4841                       		swap	d1
00006CA6                            
00006CA6                            loc_6700:
00006CA6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006CAA 6D00                       		blt.s	loc_6724
00006CAC 0441 0800                  		subi.w	#$800,d1
00006CB0 6500                       		bcs.s	loc_6720
00006CB2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CB8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006CBE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CC4 6000                       		bra.s	loc_6724
00006CC6                            ; ===========================================================================
00006CC6                            
00006CC6                            loc_6720:
00006CC6 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006CCA                            
00006CCA                            loc_6724:
00006CCA 3838 F704                  		move.w	($FFFFF704).w,d4
00006CCE 4841                       		swap	d1
00006CD0 2601                       		move.l	d1,d3
00006CD2 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006CD6 E09B                       		ror.l	#8,d3
00006CD8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006CDC 21C1 F704                  		move.l	d1,($FFFFF704).w
00006CE0 3038 F704                  		move.w	($FFFFF704).w,d0
00006CE4 0240 0010                  		andi.w	#$10,d0
00006CE8 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006CEC B300                       		eor.b	d1,d0
00006CEE 6600                       		bne.s	locret_6766
00006CF0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006CF6 3038 F704                  		move.w	($FFFFF704).w,d0
00006CFA 9044                       		sub.w	d4,d0
00006CFC 6A00                       		bpl.s	loc_6760
00006CFE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D04 4E75                       		rts	
00006D06                            ; ===========================================================================
00006D06                            
00006D06                            loc_6760:
00006D06 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D0C                            
00006D0C                            locret_6766:
00006D0C 4E75                       		rts	
00006D0E                            ; End of function ScrollVertical
00006D0E                            
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D0E 2438 F708                  		move.l	($FFFFF708).w,d2
00006D12 2002                       		move.l	d2,d0
00006D14 D084                       		add.l	d4,d0
00006D16 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D1A 2200                       		move.l	d0,d1
00006D1C 4841                       		swap	d1
00006D1E 0241 0010                  		andi.w	#$10,d1
00006D22 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D26 B701                       		eor.b	d3,d1
00006D28 6600                       		bne.s	loc_679C
00006D2A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D30 9082                       		sub.l	d2,d0
00006D32 6A00                       		bpl.s	loc_6796
00006D34 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D3A 6000                       		bra.s	loc_679C
00006D3C                            ; ===========================================================================
00006D3C                            
00006D3C                            loc_6796:
00006D3C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D42                            
00006D42                            loc_679C:
00006D42 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D46 2003                       		move.l	d3,d0
00006D48 D085                       		add.l	d5,d0
00006D4A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D4E 2200                       		move.l	d0,d1
00006D50 4841                       		swap	d1
00006D52 0241 0010                  		andi.w	#$10,d1
00006D56 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D5A B501                       		eor.b	d2,d1
00006D5C 6600                       		bne.s	locret_67D0
00006D5E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D64 9083                       		sub.l	d3,d0
00006D66 6A00                       		bpl.s	loc_67CA
00006D68 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D6E 4E75                       		rts	
00006D70                            ; ===========================================================================
00006D70                            
00006D70                            loc_67CA:
00006D70 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D76                            
00006D76                            locret_67D0:
00006D76 4E75                       		rts	
00006D78                            ; End of function ScrollBlock1
00006D78                            
00006D78                            
00006D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D78                            
00006D78                            
00006D78                            ScrollBlock2:				; XREF: Deform_SLZ
00006D78 2438 F708                  		move.l	($FFFFF708).w,d2
00006D7C 2002                       		move.l	d2,d0
00006D7E D084                       		add.l	d4,d0
00006D80 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D84 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D88 2003                       		move.l	d3,d0
00006D8A D085                       		add.l	d5,d0
00006D8C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D90 2200                       		move.l	d0,d1
00006D92 4841                       		swap	d1
00006D94 0241 0010                  		andi.w	#$10,d1
00006D98 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D9C B501                       		eor.b	d2,d1
00006D9E 6600                       		bne.s	locret_6812
00006DA0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DA6 9083                       		sub.l	d3,d0
00006DA8 6A00                       		bpl.s	loc_680C
00006DAA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DB0 4E75                       		rts	
00006DB2                            ; ===========================================================================
00006DB2                            
00006DB2                            loc_680C:
00006DB2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DB8                            
00006DB8                            locret_6812:
00006DB8 4E75                       		rts	
00006DBA                            ; End of function ScrollBlock2
00006DBA                            
00006DBA                            
00006DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DBA                            
00006DBA                            
00006DBA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006DBA 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006DBE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006DC2 3200                       		move.w	d0,d1
00006DC4 0241 0010                  		andi.w	#$10,d1
00006DC8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DCC B501                       		eor.b	d2,d1
00006DCE 6600                       		bne.s	locret_6842
00006DD0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DD6 9043                       		sub.w	d3,d0
00006DD8 6A00                       		bpl.s	loc_683C
00006DDA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DE0 4E75                       		rts	
00006DE2                            ; ===========================================================================
00006DE2                            
00006DE2                            loc_683C:
00006DE2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DE8                            
00006DE8                            locret_6842:
00006DE8 4E75                       		rts	
00006DEA                            ; End of function ScrollBlock3
00006DEA                            
00006DEA                            
00006DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEA                            
00006DEA                            
00006DEA                            ScrollBlock4:				; XREF: Deform_GHZ
00006DEA 3438 F710                  		move.w	($FFFFF710).w,d2
00006DEE 3638 F714                  		move.w	($FFFFF714).w,d3
00006DF2 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006DF6 48C0                       		ext.l	d0
00006DF8 EF80                       		asl.l	#7,d0
00006DFA D1B8 F710                  		add.l	d0,($FFFFF710).w
00006DFE 3038 F710                  		move.w	($FFFFF710).w,d0
00006E02 0240 0010                  		andi.w	#$10,d0
00006E06 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E0A B300                       		eor.b	d1,d0
00006E0C 6600                       		bne.s	locret_6884
00006E0E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E14 3038 F710                  		move.w	($FFFFF710).w,d0
00006E18 9042                       		sub.w	d2,d0
00006E1A 6A00                       		bpl.s	loc_687E
00006E1C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E22 6000                       		bra.s	locret_6884
00006E24                            ; ===========================================================================
00006E24                            
00006E24                            loc_687E:
00006E24 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E2A                            
00006E2A                            locret_6884:
00006E2A 4E75                       		rts	
00006E2C                            ; End of function ScrollBlock4
00006E2C                            
00006E2C                            
00006E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E2C                            
00006E2C                            
00006E2C                            sub_6886:				; XREF: loc_C44
00006E2C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E32 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E38 45F8 F756                  		lea	($FFFFF756).w,a2
00006E3C 47F8 F708                  		lea	($FFFFF708).w,a3
00006E40 49F8 A440                  		lea	($FFFFA440).w,a4
00006E44 343C 6000                  		move.w	#$6000,d2
00006E48 6100 0000                  		bsr.w	sub_6954
00006E4C 45F8 F758                  		lea	($FFFFF758).w,a2
00006E50 47F8 F710                  		lea	($FFFFF710).w,a3
00006E54 6000 0000                  		bra.w	sub_69F4
00006E58                            ; End of function sub_6886
00006E58                            
00006E58                            ; ---------------------------------------------------------------------------
00006E58                            ; Subroutine to	display	correct	tiles as you move
00006E58                            ; ---------------------------------------------------------------------------
00006E58                            
00006E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E58                            
00006E58                            
00006E58                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006E58 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E5E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E64 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006E68 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006E6C 49F8 A440                  		lea	($FFFFA440).w,a4
00006E70 343C 6000                  		move.w	#$6000,d2
00006E74 6100 0000                  		bsr.w	sub_6954
00006E78 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006E7C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006E80 6100 0000                  		bsr.w	sub_69F4
00006E84 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006E88 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006E8C 49F8 A400                  		lea	($FFFFA400).w,a4
00006E90 343C 4000                  		move.w	#$4000,d2
00006E94 4A12                       		tst.b	(a2)
00006E96 6700                       		beq.s	locret_6952
00006E98 0892 0000                  		bclr	#0,(a2)
00006E9C 6700                       		beq.s	loc_6908
00006E9E 78F0                       		moveq	#-$10,d4
00006EA0 7AF0                       		moveq	#-$10,d5
00006EA2 6100 0000                  		bsr.w	sub_6C20
00006EA6 78F0                       		moveq	#-$10,d4
00006EA8 7AF0                       		moveq	#-$10,d5
00006EAA 6100 0000                  		bsr.w	sub_6AD8
00006EAE                            
00006EAE                            loc_6908:
00006EAE 0892 0001                  		bclr	#1,(a2)
00006EB2 6700                       		beq.s	loc_6922
00006EB4 383C 00E0                  		move.w	#$E0,d4
00006EB8 7AF0                       		moveq	#-$10,d5
00006EBA 6100 0000                  		bsr.w	sub_6C20
00006EBE 383C 00E0                  		move.w	#$E0,d4
00006EC2 7AF0                       		moveq	#-$10,d5
00006EC4 6100 0000                  		bsr.w	sub_6AD8
00006EC8                            
00006EC8                            loc_6922:
00006EC8 0892 0002                  		bclr	#2,(a2)
00006ECC 6700                       		beq.s	loc_6938
00006ECE 78F0                       		moveq	#-$10,d4
00006ED0 7AF0                       		moveq	#-$10,d5
00006ED2 6100 0000                  		bsr.w	sub_6C20
00006ED6 78F0                       		moveq	#-$10,d4
00006ED8 7AF0                       		moveq	#-$10,d5
00006EDA 6100 0000                  		bsr.w	sub_6B04
00006EDE                            
00006EDE                            loc_6938:
00006EDE 0892 0003                  		bclr	#3,(a2)
00006EE2 6700                       		beq.s	locret_6952
00006EE4 78F0                       		moveq	#-$10,d4
00006EE6 3A3C 0140                  		move.w	#$140,d5
00006EEA 6100 0000                  		bsr.w	sub_6C20
00006EEE 78F0                       		moveq	#-$10,d4
00006EF0 3A3C 0140                  		move.w	#$140,d5
00006EF4 6100 0000                  		bsr.w	sub_6B04
00006EF8                            
00006EF8                            locret_6952:
00006EF8 4E75                       		rts	
00006EFA                            ; End of function LoadTilesAsYouMove
00006EFA                            
00006EFA                            
00006EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFA                            
00006EFA                            
00006EFA                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006EFA 4A12                       		tst.b	(a2)
00006EFC 6700 0000                  		beq.w	locret_69F2
00006F00 0892 0000                  		bclr	#0,(a2)
00006F04 6700                       		beq.s	loc_6972
00006F06 78F0                       		moveq	#-$10,d4
00006F08 7AF0                       		moveq	#-$10,d5
00006F0A 6100 0000                  		bsr.w	sub_6C20
00006F0E 78F0                       		moveq	#-$10,d4
00006F10 7AF0                       		moveq	#-$10,d5
00006F12 7C1F                       		moveq	#$1F,d6
00006F14 6100 0000                  		bsr.w	sub_6ADA
00006F18                            
00006F18                            loc_6972:
00006F18 0892 0001                  		bclr	#1,(a2)
00006F1C 6700                       		beq.s	loc_698E
00006F1E 383C 00E0                  		move.w	#$E0,d4
00006F22 7AF0                       		moveq	#-$10,d5
00006F24 6100 0000                  		bsr.w	sub_6C20
00006F28 383C 00E0                  		move.w	#$E0,d4
00006F2C 7AF0                       		moveq	#-$10,d5
00006F2E 7C1F                       		moveq	#$1F,d6
00006F30 6100 0000                  		bsr.w	sub_6ADA
00006F34                            
00006F34                            loc_698E:
00006F34 0892 0002                  		bclr	#2,(a2)
00006F38 6700                       		beq.s	loc_69BE
00006F3A 78F0                       		moveq	#-$10,d4
00006F3C 7AF0                       		moveq	#-$10,d5
00006F3E 6100 0000                  		bsr.w	sub_6C20
00006F42 78F0                       		moveq	#-$10,d4
00006F44 7AF0                       		moveq	#-$10,d5
00006F46 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F4A 322B 0004                  		move.w	4(a3),d1
00006F4E 0241 FFF0                  		andi.w	#-$10,d1
00006F52 9C41                       		sub.w	d1,d6
00006F54 6D00                       		blt.s	loc_69BE
00006F56 E84E                       		lsr.w	#4,d6
00006F58 0C46 000F                  		cmpi.w	#$F,d6
00006F5C 6500                       		bcs.s	loc_69BA
00006F5E 7C0F                       		moveq	#$F,d6
00006F60                            
00006F60                            loc_69BA:
00006F60 6100 0000                  		bsr.w	sub_6B06
00006F64                            
00006F64                            loc_69BE:
00006F64 0892 0003                  		bclr	#3,(a2)
00006F68 6700                       		beq.s	locret_69F2
00006F6A 78F0                       		moveq	#-$10,d4
00006F6C 3A3C 0140                  		move.w	#$140,d5
00006F70 6100 0000                  		bsr.w	sub_6C20
00006F74 78F0                       		moveq	#-$10,d4
00006F76 3A3C 0140                  		move.w	#$140,d5
00006F7A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F7E 322B 0004                  		move.w	4(a3),d1
00006F82 0241 FFF0                  		andi.w	#-$10,d1
00006F86 9C41                       		sub.w	d1,d6
00006F88 6D00                       		blt.s	locret_69F2
00006F8A E84E                       		lsr.w	#4,d6
00006F8C 0C46 000F                  		cmpi.w	#$F,d6
00006F90 6500                       		bcs.s	loc_69EE
00006F92 7C0F                       		moveq	#$F,d6
00006F94                            
00006F94                            loc_69EE:
00006F94 6100 0000                  		bsr.w	sub_6B06
00006F98                            
00006F98                            locret_69F2:
00006F98 4E75                       		rts	
00006F9A                            ; End of function sub_6954
00006F9A                            
00006F9A                            
00006F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F9A                            
00006F9A                            
00006F9A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006F9A 4A12                       		tst.b	(a2)
00006F9C 6700 0000                  		beq.w	locret_6A80
00006FA0 0892 0002                  		bclr	#2,(a2)
00006FA4 6700                       		beq.s	loc_6A3E
00006FA6 0C53 0010                  		cmpi.w	#$10,(a3)
00006FAA 6500                       		bcs.s	loc_6A3E
00006FAC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FB0 322B 0004                  		move.w	4(a3),d1
00006FB4 0241 FFF0                  		andi.w	#-$10,d1
00006FB8 9841                       		sub.w	d1,d4
00006FBA 3F04                       		move.w	d4,-(sp)
00006FBC 7AF0                       		moveq	#-$10,d5
00006FBE 6100 0000                  		bsr.w	sub_6C20
00006FC2 381F                       		move.w	(sp)+,d4
00006FC4 7AF0                       		moveq	#-$10,d5
00006FC6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FCA 322B 0004                  		move.w	4(a3),d1
00006FCE 0241 FFF0                  		andi.w	#-$10,d1
00006FD2 9C41                       		sub.w	d1,d6
00006FD4 6D00                       		blt.s	loc_6A3E
00006FD6 E84E                       		lsr.w	#4,d6
00006FD8 0446 000E                  		subi.w	#$E,d6
00006FDC 6400                       		bcc.s	loc_6A3E
00006FDE 4446                       		neg.w	d6
00006FE0 6100 0000                  		bsr.w	sub_6B06
00006FE4                            
00006FE4                            loc_6A3E:
00006FE4 0892 0003                  		bclr	#3,(a2)
00006FE8 6700                       		beq.s	locret_6A80
00006FEA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FEE 322B 0004                  		move.w	4(a3),d1
00006FF2 0241 FFF0                  		andi.w	#-$10,d1
00006FF6 9841                       		sub.w	d1,d4
00006FF8 3F04                       		move.w	d4,-(sp)
00006FFA 3A3C 0140                  		move.w	#$140,d5
00006FFE 6100 0000                  		bsr.w	sub_6C20
00007002 381F                       		move.w	(sp)+,d4
00007004 3A3C 0140                  		move.w	#$140,d5
00007008 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000700C 322B 0004                  		move.w	4(a3),d1
00007010 0241 FFF0                  		andi.w	#-$10,d1
00007014 9C41                       		sub.w	d1,d6
00007016 6D00                       		blt.s	locret_6A80
00007018 E84E                       		lsr.w	#4,d6
0000701A 0446 000E                  		subi.w	#$E,d6
0000701E 6400                       		bcc.s	locret_6A80
00007020 4446                       		neg.w	d6
00007022 6100 0000                  		bsr.w	sub_6B06
00007026                            
00007026                            locret_6A80:
00007026 4E75                       		rts	
00007028                            ; End of function sub_69F4
00007028                            
00007028                            ; ===========================================================================
00007028 4A12                       		tst.b	(a2)
0000702A 6700                       		beq.s	locret_6AD6
0000702C 0892 0002                  		bclr	#2,(a2)
00007030 6700                       		beq.s	loc_6AAC
00007032 383C 00D0                  		move.w	#$D0,d4
00007036 322B 0004                  		move.w	4(a3),d1
0000703A 0241 FFF0                  		andi.w	#-$10,d1
0000703E 9841                       		sub.w	d1,d4
00007040 3F04                       		move.w	d4,-(sp)
00007042 7AF0                       		moveq	#-$10,d5
00007044 6100 0000                  		bsr.w	sub_6C3C
00007048 381F                       		move.w	(sp)+,d4
0000704A 7AF0                       		moveq	#-$10,d5
0000704C 7C02                       		moveq	#2,d6
0000704E 6100 0000                  		bsr.w	sub_6B06
00007052                            
00007052                            loc_6AAC:
00007052 0892 0003                  		bclr	#3,(a2)
00007056 6700                       		beq.s	locret_6AD6
00007058 383C 00D0                  		move.w	#$D0,d4
0000705C 322B 0004                  		move.w	4(a3),d1
00007060 0241 FFF0                  		andi.w	#-$10,d1
00007064 9841                       		sub.w	d1,d4
00007066 3F04                       		move.w	d4,-(sp)
00007068 3A3C 0140                  		move.w	#$140,d5
0000706C 6100 0000                  		bsr.w	sub_6C3C
00007070 381F                       		move.w	(sp)+,d4
00007072 3A3C 0140                  		move.w	#$140,d5
00007076 7C02                       		moveq	#2,d6
00007078 6100 0000                  		bsr.w	sub_6B06
0000707C                            
0000707C                            locret_6AD6:
0000707C 4E75                       		rts	
0000707E                            
0000707E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707E                            
0000707E                            
0000707E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000707E 7C15                       		moveq	#$15,d6
00007080                            ; End of function sub_6AD8
00007080                            
00007080                            
00007080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007080                            
00007080                            
00007080                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007080 2E3C 0080 0000             		move.l	#$800000,d7
00007086 2200                       		move.l	d0,d1
00007088                            
00007088                            loc_6AE2:
00007088 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000708C 6100 0000                  		bsr.w	sub_6BD6
00007090 2001                       		move.l	d1,d0
00007092 6100 0000                  		bsr.w	sub_6B32
00007096 5801                       		addq.b	#4,d1
00007098 0201 007F                  		andi.b	#$7F,d1
0000709C 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070A0 0645 0010                  		addi.w	#$10,d5
000070A4 51CE FFE2                  		dbf	d6,loc_6AE2
000070A8 4E75                       		rts	
000070AA                            ; End of function sub_6ADA
000070AA                            
000070AA                            
000070AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070AA                            
000070AA                            
000070AA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000070AA 7C0F                       		moveq	#$F,d6
000070AC                            ; End of function sub_6B04
000070AC                            
000070AC                            
000070AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070AC                            
000070AC                            
000070AC                            sub_6B06:				; XREF: sub_6954
000070AC 2E3C 0080 0000             		move.l	#$800000,d7
000070B2 2200                       		move.l	d0,d1
000070B4                            
000070B4                            loc_6B0E:
000070B4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070B8 6100 0000                  		bsr.w	sub_6BD6
000070BC 2001                       		move.l	d1,d0
000070BE 6100 0000                  		bsr.w	sub_6B32
000070C2 0641 0100                  		addi.w	#$100,d1
000070C6 0241 0FFF                  		andi.w	#$FFF,d1
000070CA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070CE 0644 0010                  		addi.w	#$10,d4
000070D2 51CE FFE0                  		dbf	d6,loc_6B0E
000070D6 4E75                       		rts	
000070D8                            ; End of function sub_6B06
000070D8                            
000070D8                            
000070D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070D8                            
000070D8                            
000070D8                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000070D8 8042                       		or.w	d2,d0
000070DA 4840                       		swap	d0
000070DC 0810 0004                  		btst	#4,(a0)
000070E0 6600                       		bne.s	loc_6B6E
000070E2 0810 0003                  		btst	#3,(a0)
000070E6 6600                       		bne.s	loc_6B4E
000070E8 2A80                       		move.l	d0,(a5)
000070EA 2C99                       		move.l	(a1)+,(a6)
000070EC D087                       		add.l	d7,d0
000070EE 2A80                       		move.l	d0,(a5)
000070F0 2C99                       		move.l	(a1)+,(a6)
000070F2 4E75                       		rts	
000070F4                            ; ===========================================================================
000070F4                            
000070F4                            loc_6B4E:
000070F4 2A80                       		move.l	d0,(a5)
000070F6 2819                       		move.l	(a1)+,d4
000070F8 0A84 0800 0800             		eori.l	#$8000800,d4
000070FE 4844                       		swap	d4
00007100 2C84                       		move.l	d4,(a6)
00007102 D087                       		add.l	d7,d0
00007104 2A80                       		move.l	d0,(a5)
00007106 2819                       		move.l	(a1)+,d4
00007108 0A84 0800 0800             		eori.l	#$8000800,d4
0000710E 4844                       		swap	d4
00007110 2C84                       		move.l	d4,(a6)
00007112 4E75                       		rts	
00007114                            ; ===========================================================================
00007114                            
00007114                            loc_6B6E:
00007114 0810 0003                  		btst	#3,(a0)
00007118 6600                       		bne.s	loc_6B90
0000711A 2A80                       		move.l	d0,(a5)
0000711C 2A19                       		move.l	(a1)+,d5
0000711E 2819                       		move.l	(a1)+,d4
00007120 0A84 1000 1000             		eori.l	#$10001000,d4
00007126 2C84                       		move.l	d4,(a6)
00007128 D087                       		add.l	d7,d0
0000712A 2A80                       		move.l	d0,(a5)
0000712C 0A85 1000 1000             		eori.l	#$10001000,d5
00007132 2C85                       		move.l	d5,(a6)
00007134 4E75                       		rts	
00007136                            ; ===========================================================================
00007136                            
00007136                            loc_6B90:
00007136 2A80                       		move.l	d0,(a5)
00007138 2A19                       		move.l	(a1)+,d5
0000713A 2819                       		move.l	(a1)+,d4
0000713C 0A84 1800 1800             		eori.l	#$18001800,d4
00007142 4844                       		swap	d4
00007144 2C84                       		move.l	d4,(a6)
00007146 D087                       		add.l	d7,d0
00007148 2A80                       		move.l	d0,(a5)
0000714A 0A85 1800 1800             		eori.l	#$18001800,d5
00007150 4845                       		swap	d5
00007152 2C85                       		move.l	d5,(a6)
00007154 4E75                       		rts	
00007156                            ; End of function sub_6B32
00007156                            
00007156                            ; ===========================================================================
00007156 4E75                       		rts	
00007158                            ; ===========================================================================
00007158 2A80                       		move.l	d0,(a5)
0000715A 3A3C 2000                  		move.w	#$2000,d5
0000715E 3819                       		move.w	(a1)+,d4
00007160 D845                       		add.w	d5,d4
00007162 3C84                       		move.w	d4,(a6)
00007164 3819                       		move.w	(a1)+,d4
00007166 D845                       		add.w	d5,d4
00007168 3C84                       		move.w	d4,(a6)
0000716A D087                       		add.l	d7,d0
0000716C 2A80                       		move.l	d0,(a5)
0000716E 3819                       		move.w	(a1)+,d4
00007170 D845                       		add.w	d5,d4
00007172 3C84                       		move.w	d4,(a6)
00007174 3819                       		move.w	(a1)+,d4
00007176 D845                       		add.w	d5,d4
00007178 3C84                       		move.w	d4,(a6)
0000717A 4E75                       		rts	
0000717C                            
0000717C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000717C                            
0000717C                            
0000717C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000717C 43F8 B000                  		lea	($FFFFB000).w,a1
00007180 D86B 0004                  		add.w	4(a3),d4
00007184 DA53                       		add.w	(a3),d5
00007186 3604                       		move.w	d4,d3
00007188 E24B                       		lsr.w	#1,d3
0000718A 0243 0380                  		andi.w	#$380,d3
0000718E E64D                       		lsr.w	#3,d5
00007190 3005                       		move.w	d5,d0
00007192 EA48                       		lsr.w	#5,d0
00007194 0240 007F                  		andi.w	#$7F,d0
00007198 D043                       		add.w	d3,d0
0000719A 76FF                       		moveq	#-1,d3
0000719C 1634 0000                  		move.b	(a4,d0.w),d3
000071A0 6700                       		beq.s	locret_6C1E
000071A2 5303                       		subq.b	#1,d3
000071A4 0243 007F                  		andi.w	#$7F,d3
000071A8 EE5B                       		ror.w	#7,d3
000071AA D844                       		add.w	d4,d4
000071AC 0244 01E0                  		andi.w	#$1E0,d4
000071B0 0245 001E                  		andi.w	#$1E,d5
000071B4 D644                       		add.w	d4,d3
000071B6 D645                       		add.w	d5,d3
000071B8 2043                       		movea.l	d3,a0
000071BA 3610                       		move.w	(a0),d3
000071BC 0243 03FF                  		andi.w	#$3FF,d3
000071C0 E74B                       		lsl.w	#3,d3
000071C2 D2C3                       		adda.w	d3,a1
000071C4                            
000071C4                            locret_6C1E:
000071C4 4E75                       		rts	
000071C6                            ; End of function sub_6BD6
000071C6                            
000071C6                            
000071C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C6                            
000071C6                            
000071C6                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000071C6 D86B 0004                  		add.w	4(a3),d4
000071CA DA53                       		add.w	(a3),d5
000071CC 0244 00F0                  		andi.w	#$F0,d4
000071D0 0245 01F0                  		andi.w	#$1F0,d5
000071D4 E94C                       		lsl.w	#4,d4
000071D6 E44D                       		lsr.w	#2,d5
000071D8 D845                       		add.w	d5,d4
000071DA 7003                       		moveq	#3,d0
000071DC 4840                       		swap	d0
000071DE 3004                       		move.w	d4,d0
000071E0 4E75                       		rts	
000071E2                            ; End of function sub_6C20
000071E2                            
000071E2                            
000071E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E2                            ; not used
000071E2                            
000071E2                            
000071E2                            sub_6C3C:
000071E2 D86B 0004                  		add.w	4(a3),d4
000071E6 DA53                       		add.w	(a3),d5
000071E8 0244 00F0                  		andi.w	#$F0,d4
000071EC 0245 01F0                  		andi.w	#$1F0,d5
000071F0 E94C                       		lsl.w	#4,d4
000071F2 E44D                       		lsr.w	#2,d5
000071F4 D845                       		add.w	d5,d4
000071F6 7002                       		moveq	#2,d0
000071F8 4840                       		swap	d0
000071FA 3004                       		move.w	d4,d0
000071FC 4E75                       		rts	
000071FE                            ; End of function sub_6C3C
000071FE                            
000071FE                            ; ---------------------------------------------------------------------------
000071FE                            ; Subroutine to	load tiles as soon as the level	appears
000071FE                            ; ---------------------------------------------------------------------------
000071FE                            
000071FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071FE                            
000071FE                            
000071FE                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000071FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00007204 4DF9 00C0 0000             		lea	($C00000).l,a6
0000720A 47F8 F700                  		lea	($FFFFF700).w,a3
0000720E 49F8 A400                  		lea	($FFFFA400).w,a4
00007212 343C 4000                  		move.w	#$4000,d2
00007216 6100                       		bsr.s	LoadTilesFromStart2
00007218 47F8 F708                  		lea	($FFFFF708).w,a3
0000721C 49F8 A440                  		lea	($FFFFA440).w,a4
00007220 343C 6000                  		move.w	#$6000,d2
00007224                            ; End of function LoadTilesFromStart
00007224                            
00007224                            
00007224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007224                            
00007224                            
00007224                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007224 78F0                       		moveq	#-$10,d4
00007226 7C0F                       		moveq	#$F,d6
00007228                            
00007228                            loc_6C82:
00007228 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000722C 7A00                       		moveq	#0,d5
0000722E 3204                       		move.w	d4,d1
00007230 6100 FF94                  		bsr.w	sub_6C20
00007234 3801                       		move.w	d1,d4
00007236 7A00                       		moveq	#0,d5
00007238 7C1F                       		moveq	#$1F,d6
0000723A 6100 FE44                  		bsr.w	sub_6ADA
0000723E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007242 0644 0010                  		addi.w	#$10,d4
00007246 51CE FFE0                  		dbf	d6,loc_6C82
0000724A 4E75                       		rts	
0000724C                            ; End of function LoadTilesFromStart2
0000724C                            
0000724C                            ; ---------------------------------------------------------------------------
0000724C                            ; Main Load Block loading subroutine
0000724C                            ; ---------------------------------------------------------------------------
0000724C                            
0000724C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000724C                            
0000724C                            
0000724C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000724C 7000                       		moveq	#0,d0
0000724E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007252 E948                       		lsl.w	#4,d0
00007254 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000725A 45F2 0000                  		lea	(a2,d0.w),a2
0000725E 2F0A                       		move.l	a2,-(sp)
00007260 588A                       		addq.l	#4,a2
00007262 205A                       		movea.l	(a2)+,a0
00007264 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007268 303C 0000                  		move.w	#0,d0
0000726C 6100 A6D4                  		bsr.w	EniDec
00007270 205A                       		movea.l	(a2)+,a0
00007272 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007278 6100 A846                  		bsr.w	KosDec
0000727C 6100 0000                  		bsr.w	LevelLayoutLoad
00007280 301A                       		move.w	(a2)+,d0
00007282 3012                       		move.w	(a2),d0
00007284 0240 00FF                  		andi.w	#$FF,d0
00007288 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000728E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007290 700C                       		moveq	#$C,d0		; use SB3 pallet
00007292                            
00007292                            MLB_ChkSBZPal:
00007292 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007298 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000729A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000072A0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000072A2                            
000072A2                            MLB_UsePal0E:
000072A2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000072A4                            
000072A4                            MLB_NormalPal:
000072A4 6100 B040                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000072A8 245F                       		movea.l	(sp)+,a2
000072AA 584A                       		addq.w	#4,a2
000072AC 7000                       		moveq	#0,d0
000072AE 1012                       		move.b	(a2),d0
000072B0 6700                       		beq.s	locret_6D10
000072B2 6100 A4F0                  		bsr.w	LoadPLC		; load pattern load cues
000072B6                            
000072B6                            locret_6D10:
000072B6 4E75                       		rts	
000072B8                            ; End of function MainLoadBlockLoad
000072B8                            
000072B8                            ; ---------------------------------------------------------------------------
000072B8                            ; Level	layout loading subroutine
000072B8                            ; ---------------------------------------------------------------------------
000072B8                            
000072B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B8                            
000072B8                            
000072B8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000072B8 47F8 A400                  		lea	($FFFFA400).w,a3
000072BC 323C 01FF                  		move.w	#$1FF,d1
000072C0 7000                       		moveq	#0,d0
000072C2                            
000072C2                            LevLoad_ClrRam:
000072C2 26C0                       		move.l	d0,(a3)+
000072C4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000072C8                            
000072C8 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000072CC 7200                       		moveq	#0,d1
000072CE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000072D2 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000072D6 7202                       		moveq	#2,d1
000072D8                            ; End of function LevelLayoutLoad
000072D8                            
000072D8                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000072D8                            
000072D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D8                            
000072D8                            
000072D8                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000072D8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000072DC ED08                       		lsl.b	#6,d0
000072DE EA48                       		lsr.w	#5,d0
000072E0 3400                       		move.w	d0,d2
000072E2 D040                       		add.w	d0,d0
000072E4 D042                       		add.w	d2,d0
000072E6 D041                       		add.w	d1,d0
000072E8 43F9 0000 0000             		lea	(Level_Index).l,a1
000072EE 3031 0000                  		move.w	(a1,d0.w),d0
000072F2 43F1 0000                  		lea	(a1,d0.w),a1
000072F6 7200                       		moveq	#0,d1
000072F8 3401                       		move.w	d1,d2
000072FA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000072FC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000072FE                            
000072FE                            LevLoad_NumRows:
000072FE 3001                       		move.w	d1,d0
00007300 204B                       		movea.l	a3,a0
00007302                            
00007302                            LevLoad_Row:
00007302 10D9                       		move.b	(a1)+,(a0)+
00007304 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007308 47EB 0080                  		lea	$80(a3),a3	; do next row
0000730C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007310 4E75                       		rts	
00007312                            ; End of function LevelLayoutLoad2
00007312                            
00007312                            ; ---------------------------------------------------------------------------
00007312                            ; Dynamic screen resize	loading	subroutine
00007312                            ; ---------------------------------------------------------------------------
00007312                            
00007312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007312                            
00007312                            
00007312                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007312 7000                       		moveq	#0,d0
00007314 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007318 D040                       		add.w	d0,d0
0000731A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000731E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007322 7202                       		moveq	#2,d1
00007324 3038 F726                  		move.w	($FFFFF726).w,d0
00007328 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000732C 6700                       		beq.s	locret_6DAA
0000732E 6400                       		bcc.s	loc_6DAC
00007330 4441                       		neg.w	d1
00007332 3038 F704                  		move.w	($FFFFF704).w,d0
00007336 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000733A 6300                       		bls.s	loc_6DA0
0000733C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007340 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007346                            
00007346                            loc_6DA0:
00007346 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000734A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007350                            
00007350                            locret_6DAA:
00007350 4E75                       		rts	
00007352                            ; ===========================================================================
00007352                            
00007352                            loc_6DAC:				; XREF: DynScrResizeLoad
00007352 3038 F704                  		move.w	($FFFFF704).w,d0
00007356 5040                       		addq.w	#8,d0
00007358 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000735C 6500                       		bcs.s	loc_6DC4
0000735E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007364 6700                       		beq.s	loc_6DC4
00007366 D241                       		add.w	d1,d1
00007368 D241                       		add.w	d1,d1
0000736A                            
0000736A                            loc_6DC4:
0000736A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000736E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007374 4E75                       		rts	
00007376                            ; End of function DynScrResizeLoad
00007376                            
00007376                            ; ===========================================================================
00007376                            ; ---------------------------------------------------------------------------
00007376                            ; Offset index for dynamic screen resizing
00007376                            ; ---------------------------------------------------------------------------
00007376 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000737A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000737E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007382 0000                       		dc.w Resize_Ending-Resize_Index
00007384                            ; ===========================================================================
00007384                            ; ---------------------------------------------------------------------------
00007384                            ; Green	Hill Zone dynamic screen resizing
00007384                            ; ---------------------------------------------------------------------------
00007384                            
00007384                            Resize_GHZ:				; XREF: Resize_Index
00007384 7000                       		moveq	#0,d0
00007386 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000738A D040                       		add.w	d0,d0
0000738C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007390 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007394                            ; ===========================================================================
00007394 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007396 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007398 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000739A                            ; ===========================================================================
0000739A                            
0000739A                            Resize_GHZ1:
0000739A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000073A0 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000073A6 6500                       		bcs.s	locret_6E08	; if not, branch
000073A8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000073AE                            
000073AE                            locret_6E08:
000073AE 4E75                       		rts	
000073B0                            ; ===========================================================================
000073B0                            
000073B0                            Resize_GHZ2:
000073B0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073B6 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000073BC 6500                       		bcs.s	locret_6E3A
000073BE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000073C4 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000073CA 6500                       		bcs.s	locret_6E3A
000073CC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000073D2 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000073D8 6500                       		bcs.s	locret_6E3A
000073DA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073E0                            
000073E0                            locret_6E3A:
000073E0 4E75                       		rts	
000073E2                            ; ===========================================================================
000073E2                            
000073E2                            Resize_GHZ3:
000073E2 7000                       		moveq	#0,d0
000073E4 1038 F742                  		move.b	($FFFFF742).w,d0
000073E8 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000073EC 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000073F0                            ; ===========================================================================
000073F0 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000073F2 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000073F4 0000                       		dc.w Resize_GHZ3end-off_6E4A
000073F6                            ; ===========================================================================
000073F6                            
000073F6                            Resize_GHZ3main:
000073F6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073FC 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007402 6500                       		bcs.s	locret_6E96
00007404 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000740A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007410 6500                       		bcs.s	locret_6E96
00007412 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007418 6500                       		bcs.s	loc_6E98
0000741A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007420 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007426 6400                       		bcc.s	loc_6E8E
00007428 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000742E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007434                            
00007434                            loc_6E8E:
00007434 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000743A 6400                       		bcc.s	loc_6E98
0000743C                            
0000743C                            locret_6E96:
0000743C 4E75                       		rts	
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            loc_6E98:
0000743E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007444 5438 F742                  		addq.b	#2,($FFFFF742).w
00007448 4E75                       		rts	
0000744A                            ; ===========================================================================
0000744A                            
0000744A                            Resize_GHZ3boss:
0000744A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007450 6400                       		bcc.s	loc_6EB0
00007452 5538 F742                  		subq.b	#2,($FFFFF742).w
00007456                            
00007456                            loc_6EB0:
00007456 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000745C 6500                       		bcs.s	locret_6EE8
0000745E 6100 0000                  		bsr.w	SingleObjLoad
00007462 6600                       		bne.s	loc_6ED0
00007464 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007468 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000746E 337C 0280 000C             		move.w	#$280,$C(a1)
00007474                            
00007474                            loc_6ED0:
00007474 303C 008C                  		move.w	#$8C,d0
00007478 6100 A140                  		bsr.w	PlaySound	; play boss music
0000747C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007482 5438 F742                  		addq.b	#2,($FFFFF742).w
00007486 7011                       		moveq	#$11,d0
00007488 6000 A31A                  		bra.w	LoadPLC		; load boss patterns
0000748C                            ; ===========================================================================
0000748C                            
0000748C                            locret_6EE8:
0000748C 4E75                       		rts	
0000748E                            ; ===========================================================================
0000748E                            
0000748E                            Resize_GHZ3end:
0000748E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007494 4E75                       		rts	
00007496                            ; ===========================================================================
00007496                            ; ---------------------------------------------------------------------------
00007496                            ; Labyrinth Zone dynamic screen	resizing
00007496                            ; ---------------------------------------------------------------------------
00007496                            
00007496                            Resize_LZ:				; XREF: Resize_Index
00007496 7000                       		moveq	#0,d0
00007498 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000749C D040                       		add.w	d0,d0
0000749E 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000074A2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000074A6                            ; ===========================================================================
000074A6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000074A8 0000                       		dc.w Resize_LZ12-Resize_LZx
000074AA 0000                       		dc.w Resize_LZ3-Resize_LZx
000074AC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000074AE                            ; ===========================================================================
000074AE                            
000074AE                            Resize_LZ12:
000074AE 4E75                       		rts	
000074B0                            ; ===========================================================================
000074B0                            
000074B0                            Resize_LZ3:
000074B0 7000                       		moveq	#0,d0
000074B2 1038 F742                  		move.b	($FFFFF742).w,d0
000074B6 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000074BA 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000074BE                            ; ===========================================================================
000074BE                            off_6E4A2:	
000074BE 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000074C0 0000                       		dc.w Resize_LZ3end-off_6E4A2
000074C2                            ; ===========================================================================
000074C2                            Resize_LZ3boss:
000074C2 4A38 F742                  		tst.b	($FFFFF742).w
000074C6 6600                       		bne.s	locret_6F62
000074C8 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000074CE 6500                       		bcs.s	locret_6F62
000074D0 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000074D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000074DC                            
000074DC 6100 0000                  		bsr.w	SingleObjLoad
000074E0 6600                       		bne.s	loc_6F4A
000074E2 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000074E6 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000074EC 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000074F2                            loc_6F4A:
000074F2 303C 008C                  		move.w	#$8C,d0
000074F6 6100 A0C2                  		bsr.w	PlaySound	; play boss music
000074FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007500 5438 F742                  		addq.b	#2,($FFFFF742).w
00007504 7020                       		moveq	#$20,d0
00007506 6000 A29C                  		bra.w	LoadPLC		; load boss patterns
0000750A                            ; ===========================================================================
0000750A                            
0000750A                            locret_6F62:
0000750A 4E75                       		rts	
0000750C                            ; ===========================================================================
0000750C                            
0000750C                            Resize_LZ3end:
0000750C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007512 4E75                       		rts	
00007514                            ; ===========================================================================
00007514                            
00007514                            Resize_SBZ3:
00007514 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000751A 6500                       		bcs.s	locret_6F8C
0000751C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007522 6400                       		bcc.s	locret_6F8C	; if not, branch
00007524 4238 FE30                  		clr.b	($FFFFFE30).w
00007528 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000752E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007534 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000753A                            
0000753A                            locret_6F8C:
0000753A 4E75                       		rts	
0000753C                            ; ===========================================================================
0000753C                            ; ---------------------------------------------------------------------------
0000753C                            ; Marble Zone dynamic screen resizing
0000753C                            ; ---------------------------------------------------------------------------
0000753C                            
0000753C                            Resize_MZ:				; XREF: Resize_Index
0000753C 7000                       		moveq	#0,d0
0000753E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007542 D040                       		add.w	d0,d0
00007544 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007548 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000754C                            ; ===========================================================================
0000754C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000754E 0000                       		dc.w Resize_MZ2-Resize_MZx
00007550 0000                       		dc.w Resize_MZ3-Resize_MZx
00007552                            ; ===========================================================================
00007552                            
00007552                            Resize_MZ1:
00007552 7000                       		moveq	#0,d0
00007554 1038 F742                  		move.b	($FFFFF742).w,d0
00007558 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000755C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007560                            ; ===========================================================================
00007560 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007562 0000                       		dc.w loc_6FEA-off_6FB2
00007564 0000                       		dc.w loc_702E-off_6FB2
00007566 0000                       		dc.w loc_7050-off_6FB2
00007568                            ; ===========================================================================
00007568                            
00007568                            loc_6FBA:
00007568 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000756E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007574 6500                       		bcs.s	locret_6FE8
00007576 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000757C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007582 6500                       		bcs.s	locret_6FE8
00007584 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000758A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007590 6500                       		bcs.s	locret_6FE8
00007592 5438 F742                  		addq.b	#2,($FFFFF742).w
00007596                            
00007596                            locret_6FE8:
00007596 4E75                       		rts	
00007598                            ; ===========================================================================
00007598                            
00007598                            loc_6FEA:
00007598 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000759E 6400                       		bcc.s	loc_6FF8
000075A0 5538 F742                  		subq.b	#2,($FFFFF742).w
000075A4 4E75                       		rts	
000075A6                            ; ===========================================================================
000075A6                            
000075A6                            loc_6FF8:
000075A6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075AC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000075B2 6400                       		bcc.s	locret_702C
000075B4 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000075BA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075C0 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000075C6 6400                       		bcc.s	locret_702C
000075C8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075CE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075D4 6500                       		bcs.s	locret_702C
000075D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000075DA                            
000075DA                            locret_702C:
000075DA 4E75                       		rts	
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            loc_702E:
000075DC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075E2 6400                       		bcc.s	loc_703C
000075E4 5538 F742                  		subq.b	#2,($FFFFF742).w
000075E8 4E75                       		rts	
000075EA                            ; ===========================================================================
000075EA                            
000075EA                            loc_703C:
000075EA 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000075F0 6500                       		bcs.s	locret_704E
000075F2 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000075F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075FC                            
000075FC                            locret_704E:
000075FC 4E75                       		rts	
000075FE                            ; ===========================================================================
000075FE                            
000075FE                            loc_7050:
000075FE 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007604 6500                       		bcs.s	locret_7072
00007606 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000760C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007612 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007618 6500                       		bcs.s	locret_7072
0000761A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007620                            
00007620                            locret_7072:
00007620 4E75                       		rts	
00007622                            ; ===========================================================================
00007622                            
00007622                            Resize_MZ2:
00007622 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007628 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000762E 6500                       		bcs.s	locret_7088
00007630 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007636                            
00007636                            locret_7088:
00007636 4E75                       		rts	
00007638                            ; ===========================================================================
00007638                            
00007638                            Resize_MZ3:
00007638 7000                       		moveq	#0,d0
0000763A 1038 F742                  		move.b	($FFFFF742).w,d0
0000763E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007642 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007646                            ; ===========================================================================
00007646 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007648 0000                       		dc.w Resize_MZ3end-off_7098
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            Resize_MZ3boss:
0000764A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007650 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007656 6500                       		bcs.s	locret_70E8
00007658 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000765E 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007664 6500                       		bcs.s	locret_70E8
00007666 6100 0000                  		bsr.w	SingleObjLoad
0000766A 6600                       		bne.s	loc_70D0
0000766C 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007670 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007676 337C 022C 000C             		move.w	#$22C,$C(a1)
0000767C                            
0000767C                            loc_70D0:
0000767C 303C 008C                  		move.w	#$8C,d0
00007680 6100 9F38                  		bsr.w	PlaySound	; play boss music
00007684 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000768A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000768E 7011                       		moveq	#$11,d0
00007690 6000 A112                  		bra.w	LoadPLC		; load boss patterns
00007694                            ; ===========================================================================
00007694                            
00007694                            locret_70E8:
00007694 4E75                       		rts	
00007696                            ; ===========================================================================
00007696                            
00007696                            Resize_MZ3end:
00007696 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000769C 4E75                       		rts	
0000769E                            ; ===========================================================================
0000769E                            ; ---------------------------------------------------------------------------
0000769E                            ; Star Light Zone dynamic screen resizing
0000769E                            ; ---------------------------------------------------------------------------
0000769E                            
0000769E                            Resize_SLZ:				; XREF: Resize_Index
0000769E 7000                       		moveq	#0,d0
000076A0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076A4 D040                       		add.w	d0,d0
000076A6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000076AA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000076AE                            ; ===========================================================================
000076AE 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000076B0 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000076B2 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000076B4                            ; ===========================================================================
000076B4                            
000076B4                            Resize_SLZ1:
000076B4 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000076BA 4E75                       		rts	
000076BC                            
000076BC                            Resize_SLZ2:
000076BC 4E75                       		rts	
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            Resize_SLZ3:
000076BE 7000                       		moveq	#0,d0
000076C0 1038 F742                  		move.b	($FFFFF742).w,d0
000076C4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000076C8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000076CC                            ; ===========================================================================
000076CC 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000076CE 0000                       		dc.w Resize_SLZ3boss-off_7118
000076D0 0000                       		dc.w Resize_SLZ3end-off_7118
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SLZ3main:
000076D2 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7130
000076DA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E4                            
000076E4                            locret_7130:
000076E4 4E75                       		rts	
000076E6                            ; ===========================================================================
000076E6                            
000076E6                            Resize_SLZ3boss:
000076E6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000076EC 6500                       		bcs.s	locret_715C
000076EE 6100 0000                  		bsr.w	SingleObjLoad
000076F2 6600                       		bne.s	loc_7144
000076F4 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000076F8                            
000076F8                            loc_7144:
000076F8 303C 008C                  		move.w	#$8C,d0
000076FC 6100 9EBC                  		bsr.w	PlaySound	; play boss music
00007700 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007706 5438 F742                  		addq.b	#2,($FFFFF742).w
0000770A 7011                       		moveq	#$11,d0
0000770C 6000 A096                  		bra.w	LoadPLC		; load boss patterns
00007710                            ; ===========================================================================
00007710                            
00007710                            locret_715C:
00007710 4E75                       		rts	
00007712                            ; ===========================================================================
00007712                            
00007712                            Resize_SLZ3end:
00007712 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007718 4E75                       		rts
0000771A 4E75                       		rts
0000771C                            ; ===========================================================================
0000771C                            ; ---------------------------------------------------------------------------
0000771C                            ; Spring Yard Zone dynamic screen resizing
0000771C                            ; ---------------------------------------------------------------------------
0000771C                            
0000771C                            Resize_SYZ:				; XREF: Resize_Index
0000771C 7000                       		moveq	#0,d0
0000771E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007722 D040                       		add.w	d0,d0
00007724 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007728 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000772C                            ; ===========================================================================
0000772C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000772E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007730 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007732                            ; ===========================================================================
00007732                            
00007732                            Resize_SYZ1:
00007732 4E75                       		rts	
00007734                            ; ===========================================================================
00007734                            
00007734                            Resize_SYZ2:
00007734 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000773A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007740 6500                       		bcs.s	locret_71A2
00007742 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007748 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000774E 6500                       		bcs.s	locret_71A2
00007750 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007756                            
00007756                            locret_71A2:
00007756 4E75                       		rts	
00007758                            ; ===========================================================================
00007758                            
00007758                            Resize_SYZ3:
00007758 7000                       		moveq	#0,d0
0000775A 1038 F742                  		move.b	($FFFFF742).w,d0
0000775E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007762 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007766                            ; ===========================================================================
00007766 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007768 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000776A 0000                       		dc.w Resize_SYZ3end-off_71B2
0000776C                            ; ===========================================================================
0000776C                            
0000776C                            Resize_SYZ3main:
0000776C 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007772 6500                       		bcs.s	locret_71CE
00007774 6100 0000                  		bsr.w	SingleObjLoad
00007778 6600                       		bne.s	locret_71CE
0000777A 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000777E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007782                            
00007782                            locret_71CE:
00007782 4E75                       		rts	
00007784                            ; ===========================================================================
00007784                            
00007784                            Resize_SYZ3boss:
00007784 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000778A 6500                       		bcs.s	locret_7200
0000778C 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007792 6100 0000                  		bsr.w	SingleObjLoad
00007796 6600                       		bne.s	loc_71EC
00007798 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000779C 5438 F742                  		addq.b	#2,($FFFFF742).w
000077A0                            
000077A0                            loc_71EC:
000077A0 303C 008C                  		move.w	#$8C,d0
000077A4 6100 9E14                  		bsr.w	PlaySound	; play boss music
000077A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077AE 7011                       		moveq	#$11,d0
000077B0 6000 9FF2                  		bra.w	LoadPLC		; load boss patterns
000077B4                            ; ===========================================================================
000077B4                            
000077B4                            locret_7200:
000077B4 4E75                       		rts	
000077B6                            ; ===========================================================================
000077B6                            
000077B6                            Resize_SYZ3end:
000077B6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077BC 4E75                       		rts	
000077BE                            ; ===========================================================================
000077BE                            ; ---------------------------------------------------------------------------
000077BE                            ; Scrap	Brain Zone dynamic screen resizing
000077BE                            ; ---------------------------------------------------------------------------
000077BE                            
000077BE                            Resize_SBZ:				; XREF: Resize_Index
000077BE 7000                       		moveq	#0,d0
000077C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077C4 D040                       		add.w	d0,d0
000077C6 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000077CA 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000077CE                            ; ===========================================================================
000077CE 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000077D0 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000077D2 0000                       		dc.w Resize_FZ-Resize_SBZx
000077D4                            ; ===========================================================================
000077D4                            
000077D4                            Resize_SBZ1:
000077D4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000077DA 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000077E0 6500                       		bcs.s	locret_7242
000077E2 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000077E8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000077EE 6500                       		bcs.s	locret_7242
000077F0 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000077F6                            
000077F6                            locret_7242:
000077F6 4E75                       		rts	
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            Resize_SBZ2:
000077F8 7000                       		moveq	#0,d0
000077FA 1038 F742                  		move.b	($FFFFF742).w,d0
000077FE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007802 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007806                            ; ===========================================================================
00007806 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007808 0000                       		dc.w Resize_SBZ2boss-off_7252
0000780A 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000780C 0000                       		dc.w Resize_SBZ2end-off_7252
0000780E                            ; ===========================================================================
0000780E                            
0000780E                            Resize_SBZ2main:
0000780E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007814 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000781A 6500                       		bcs.s	locret_727A
0000781C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007822 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007828 6500                       		bcs.s	locret_727A
0000782A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000782E                            
0000782E                            locret_727A:
0000782E 4E75                       		rts	
00007830                            ; ===========================================================================
00007830                            
00007830                            Resize_SBZ2boss:
00007830 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007836 6500                       		bcs.s	locret_7298
00007838 6100 0000                  		bsr.w	SingleObjLoad
0000783C 6600                       		bne.s	locret_7298
0000783E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007842 5438 F742                  		addq.b	#2,($FFFFF742).w
00007846 701E                       		moveq	#$1E,d0
00007848 6000 9F5A                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000784C                            ; ===========================================================================
0000784C                            
0000784C                            locret_7298:
0000784C 4E75                       		rts	
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            Resize_SBZ2boss2:
0000784E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007854 6500                       		bcs.s	loc_72B6
00007856 6100 0000                  		bsr.w	SingleObjLoad
0000785A 6600                       		bne.s	loc_72B0
0000785C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007860 5438 F742                  		addq.b	#2,($FFFFF742).w
00007864                            
00007864                            loc_72B0:
00007864 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000786A                            
0000786A                            loc_72B6:
0000786A 6000                       		bra.s	loc_72C2
0000786C                            ; ===========================================================================
0000786C                            
0000786C                            Resize_SBZ2end:
0000786C 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007872 6500                       		bcs.s	loc_72C2
00007874 4E75                       		rts	
00007876                            ; ===========================================================================
00007876                            
00007876                            loc_72C2:
00007876 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000787C 4E75                       		rts	
0000787E                            ; ===========================================================================
0000787E                            
0000787E                            Resize_FZ:
0000787E 7000                       		moveq	#0,d0
00007880 1038 F742                  		move.b	($FFFFF742).w,d0
00007884 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007888 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000788C                            ; ===========================================================================
0000788C 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007890 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007894 0000                       		dc.w Resize_FZend2-off_72D8
00007896                            ; ===========================================================================
00007896                            
00007896                            Resize_FZmain:
00007896 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000789C 6500                       		bcs.s	loc_72F4
0000789E 5438 F742                  		addq.b	#2,($FFFFF742).w
000078A2 701F                       		moveq	#$1F,d0
000078A4 6100 9EFE                  		bsr.w	LoadPLC		; load FZ boss patterns
000078A8                            
000078A8                            loc_72F4:
000078A8 60CC                       		bra.s	loc_72C2
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            Resize_FZboss:
000078AA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000078B0 6500                       		bcs.s	loc_7312
000078B2 6100 0000                  		bsr.w	SingleObjLoad
000078B6 6600                       		bne.s	loc_7312
000078B8 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000078BC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078C0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078C6                            
000078C6                            loc_7312:
000078C6 60AE                       		bra.s	loc_72C2
000078C8                            ; ===========================================================================
000078C8                            
000078C8                            Resize_FZend:
000078C8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000078CE 6500                       		bcs.s	loc_7320
000078D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078D4                            
000078D4                            loc_7320:
000078D4 60A0                       		bra.s	loc_72C2
000078D6                            ; ===========================================================================
000078D6                            
000078D6                            locret_7322:
000078D6 4E75                       		rts	
000078D8                            ; ===========================================================================
000078D8                            
000078D8                            Resize_FZend2:
000078D8 609C                       		bra.s	loc_72C2
000078DA                            ; ===========================================================================
000078DA                            ; ---------------------------------------------------------------------------
000078DA                            ; Ending sequence dynamic screen resizing (empty)
000078DA                            ; ---------------------------------------------------------------------------
000078DA                            
000078DA                            Resize_Ending:				; XREF: Resize_Index
000078DA 4E75                       		rts	
000078DC                            ; ===========================================================================
000078DC                            ; ---------------------------------------------------------------------------
000078DC                            ; Object 11 - GHZ bridge
000078DC                            ; ---------------------------------------------------------------------------
000078DC                            
000078DC                            Obj11:					; XREF: Obj_Index
000078DC 7000                       		moveq	#0,d0
000078DE 1028 0024                  		move.b	$24(a0),d0
000078E2 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000078E6 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000078EA                            ; ===========================================================================
000078EA 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000078EE 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000078F2 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Obj11_Main:				; XREF: Obj11_Index
000078F6 5428 0024                  		addq.b	#2,$24(a0)
000078FA 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007902 317C 438E 0002             		move.w	#$438E,2(a0)
00007908 117C 0004 0001             		move.b	#4,1(a0)
0000790E 117C 0003 0018             		move.b	#3,$18(a0)
00007914 117C 0080 0019             		move.b	#$80,$19(a0)
0000791A 3428 000C                  		move.w	$C(a0),d2
0000791E 3628 0008                  		move.w	8(a0),d3
00007922 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007924 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007928 7200                       		moveq	#0,d1
0000792A 1212                       		move.b	(a2),d1		; copy a2 to d1
0000792C 14FC 0000                  		move.b	#0,(a2)+
00007930 3001                       		move.w	d1,d0
00007932 E248                       		lsr.w	#1,d0
00007934 E948                       		lsl.w	#4,d0
00007936 9640                       		sub.w	d0,d3
00007938 5501                       		subq.b	#2,d1
0000793A 6500                       		bcs.s	Obj11_Action
0000793C                            
0000793C                            Obj11_MakeBdg:
0000793C 6100 0000                  		bsr.w	SingleObjLoad
00007940 6600                       		bne.s	Obj11_Action
00007942 5228 0028                  		addq.b	#1,$28(a0)
00007946 B668 0008                  		cmp.w	8(a0),d3
0000794A 6600                       		bne.s	loc_73B8
0000794C 0643 0010                  		addi.w	#$10,d3
00007950 3142 000C                  		move.w	d2,$C(a0)
00007954 3142 003C                  		move.w	d2,$3C(a0)
00007958 3A08                       		move.w	a0,d5
0000795A 0445 D000                  		subi.w	#-$3000,d5
0000795E EC4D                       		lsr.w	#6,d5
00007960 0245 007F                  		andi.w	#$7F,d5
00007964 14C5                       		move.b	d5,(a2)+
00007966 5228 0028                  		addq.b	#1,$28(a0)
0000796A                            
0000796A                            loc_73B8:				; XREF: ROM:00007398j
0000796A 3A09                       		move.w	a1,d5
0000796C 0445 D000                  		subi.w	#-$3000,d5
00007970 EC4D                       		lsr.w	#6,d5
00007972 0245 007F                  		andi.w	#$7F,d5
00007976 14C5                       		move.b	d5,(a2)+
00007978 137C 000A 0024             		move.b	#$A,$24(a1)
0000797E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007980 3342 000C                  		move.w	d2,$C(a1)
00007984 3342 003C                  		move.w	d2,$3C(a1)
00007988 3343 0008                  		move.w	d3,8(a1)
0000798C 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007994 337C 438E 0002             		move.w	#$438E,2(a1)
0000799A 137C 0004 0001             		move.b	#4,1(a1)
000079A0 137C 0003 0018             		move.b	#3,$18(a1)
000079A6 137C 0008 0019             		move.b	#8,$19(a1)
000079AC 0643 0010                  		addi.w	#$10,d3
000079B0 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000079B4                            
000079B4                            Obj11_Action:				; XREF: Obj11_Index
000079B4 6100                       		bsr.s	Obj11_Solid
000079B6 4A28 003E                  		tst.b	$3E(a0)
000079BA 6700                       		beq.s	Obj11_Display
000079BC 5928 003E                  		subq.b	#4,$3E(a0)
000079C0 6100 0000                  		bsr.w	Obj11_Bend
000079C4                            
000079C4                            Obj11_Display:
000079C4 6100 0000                  		bsr.w	DisplaySprite
000079C8 6000 0000                  		bra.w	Obj11_ChkDel
000079CC                            
000079CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079CC                            
000079CC                            
000079CC                            Obj11_Solid:				; XREF: Obj11_Action
000079CC 7200                       		moveq	#0,d1
000079CE 1228 0028                  		move.b	$28(a0),d1
000079D2 E749                       		lsl.w	#3,d1
000079D4 3401                       		move.w	d1,d2
000079D6 5041                       		addq.w	#8,d1
000079D8 D442                       		add.w	d2,d2
000079DA 43F8 D000                  		lea	($FFFFD000).w,a1
000079DE 4A69 0012                  		tst.w	$12(a1)
000079E2 6B00 0000                  		bmi.w	locret_751E
000079E6 3029 0008                  		move.w	8(a1),d0
000079EA 9068 0008                  		sub.w	8(a0),d0
000079EE D041                       		add.w	d1,d0
000079F0 6B00 0000                  		bmi.w	locret_751E
000079F4 B042                       		cmp.w	d2,d0
000079F6 6400 0000                  		bcc.w	locret_751E
000079FA 6000                       		bra.s	Platform2
000079FC                            ; End of function Obj11_Solid
000079FC                            
000079FC                            ; ---------------------------------------------------------------------------
000079FC                            ; Platform subroutine
000079FC                            ; ---------------------------------------------------------------------------
000079FC                            
000079FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FC                            
000079FC                            
000079FC                            PlatformObject:
000079FC 43F8 D000                  		lea	($FFFFD000).w,a1
00007A00 4A69 0012                  		tst.w	$12(a1)
00007A04 6B00 0000                  		bmi.w	locret_751E
00007A08 3029 0008                  		move.w	8(a1),d0
00007A0C 9068 0008                  		sub.w	8(a0),d0
00007A10 D041                       		add.w	d1,d0
00007A12 6B00 0000                  		bmi.w	locret_751E
00007A16 D241                       		add.w	d1,d1
00007A18 B041                       		cmp.w	d1,d0
00007A1A 6400 0000                  		bcc.w	locret_751E
00007A1E                            
00007A1E                            Platform2:
00007A1E 3028 000C                  		move.w	$C(a0),d0
00007A22 5140                       		subq.w	#8,d0
00007A24                            
00007A24                            Platform3:
00007A24 3429 000C                  		move.w	$C(a1),d2
00007A28 1229 0016                  		move.b	$16(a1),d1
00007A2C 4881                       		ext.w	d1
00007A2E D242                       		add.w	d2,d1
00007A30 5841                       		addq.w	#4,d1
00007A32 9041                       		sub.w	d1,d0
00007A34 6200 0000                  		bhi.w	locret_751E
00007A38 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A3C 6500 0000                  		bcs.w	locret_751E
00007A40 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A44 6B00 0000                  		bmi.w	locret_751E
00007A48 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A4E 6400 0000                  		bcc.w	locret_751E
00007A52 D440                       		add.w	d0,d2
00007A54 5642                       		addq.w	#3,d2
00007A56 3342 000C                  		move.w	d2,$C(a1)
00007A5A 5428 0024                  		addq.b	#2,$24(a0)
00007A5E                            
00007A5E                            loc_74AE:
00007A5E 0829 0003 0022             		btst	#3,$22(a1)
00007A64 6700                       		beq.s	loc_74DC
00007A66 7000                       		moveq	#0,d0
00007A68 1029 003D                  		move.b	$3D(a1),d0
00007A6C ED48                       		lsl.w	#6,d0
00007A6E 0680 00FF D000             		addi.l	#$FFD000,d0
00007A74 2440                       		movea.l	d0,a2
00007A76 08AA 0003 0022             		bclr	#3,$22(a2)
00007A7C 422A 0025                  		clr.b	$25(a2)
00007A80 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007A86 6600                       		bne.s	loc_74DC
00007A88 552A 0024                  		subq.b	#2,$24(a2)
00007A8C                            
00007A8C                            loc_74DC:
00007A8C 3008                       		move.w	a0,d0
00007A8E 0440 D000                  		subi.w	#-$3000,d0
00007A92 EC48                       		lsr.w	#6,d0
00007A94 0240 007F                  		andi.w	#$7F,d0
00007A98 1340 003D                  		move.b	d0,$3D(a1)
00007A9C 137C 0000 0026             		move.b	#0,$26(a1)
00007AA2 337C 0000 0012             		move.w	#0,$12(a1)
00007AA8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007AAE 0829 0001 0022             		btst	#1,$22(a1)
00007AB4 6700                       		beq.s	loc_7512
00007AB6 2F08                       		move.l	a0,-(sp)
00007AB8 2049                       		movea.l	a1,a0
00007ABA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007AC0 205F                       		movea.l	(sp)+,a0
00007AC2                            
00007AC2                            loc_7512:
00007AC2 08E9 0003 0022             		bset	#3,$22(a1)
00007AC8 08E8 0003 0022             		bset	#3,$22(a0)
00007ACE                            
00007ACE                            locret_751E:
00007ACE 4E75                       		rts	
00007AD0                            ; End of function PlatformObject
00007AD0                            
00007AD0                            ; ---------------------------------------------------------------------------
00007AD0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007AD0                            ; ---------------------------------------------------------------------------
00007AD0                            
00007AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AD0                            
00007AD0                            
00007AD0                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007AD0 43F8 D000                  		lea	($FFFFD000).w,a1
00007AD4 4A69 0012                  		tst.w	$12(a1)
00007AD8 6B00 FFF4                  		bmi.w	locret_751E
00007ADC 3029 0008                  		move.w	8(a1),d0
00007AE0 9068 0008                  		sub.w	8(a0),d0
00007AE4 D041                       		add.w	d1,d0
00007AE6 6BE6                       		bmi.s	locret_751E
00007AE8 D241                       		add.w	d1,d1
00007AEA B041                       		cmp.w	d1,d0
00007AEC 64E0                       		bcc.s	locret_751E
00007AEE 0828 0000 0001             		btst	#0,1(a0)
00007AF4 6700                       		beq.s	loc_754A
00007AF6 4640                       		not.w	d0
00007AF8 D041                       		add.w	d1,d0
00007AFA                            
00007AFA                            loc_754A:
00007AFA E248                       		lsr.w	#1,d0
00007AFC 7600                       		moveq	#0,d3
00007AFE 1632 0000                  		move.b	(a2,d0.w),d3
00007B02 3028 000C                  		move.w	$C(a0),d0
00007B06 9043                       		sub.w	d3,d0
00007B08 6000 FF1A                  		bra.w	Platform3
00007B0C                            ; End of function SlopeObject
00007B0C                            
00007B0C                            
00007B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B0C                            
00007B0C                            
00007B0C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B0C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B10 4A69 0012                  		tst.w	$12(a1)
00007B14 6B00 FFB8                  		bmi.w	locret_751E
00007B18 3029 0008                  		move.w	8(a1),d0
00007B1C 9068 0008                  		sub.w	8(a0),d0
00007B20 D041                       		add.w	d1,d0
00007B22 6B00 FFAA                  		bmi.w	locret_751E
00007B26 D241                       		add.w	d1,d1
00007B28 B041                       		cmp.w	d1,d0
00007B2A 6400 FFA2                  		bcc.w	locret_751E
00007B2E 3028 000C                  		move.w	$C(a0),d0
00007B32 9043                       		sub.w	d3,d0
00007B34 6000 FEEE                  		bra.w	Platform3
00007B38                            ; End of function Obj15_Solid
00007B38                            
00007B38                            ; ===========================================================================
00007B38                            
00007B38                            Obj11_Action2:				; XREF: Obj11_Index
00007B38 6100                       		bsr.s	Obj11_WalkOff
00007B3A 6100 0000                  		bsr.w	DisplaySprite
00007B3E 6000 0000                  		bra.w	Obj11_ChkDel
00007B42                            
00007B42                            ; ---------------------------------------------------------------------------
00007B42                            ; Subroutine allowing Sonic to walk off a bridge
00007B42                            ; ---------------------------------------------------------------------------
00007B42                            
00007B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B42                            
00007B42                            
00007B42                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B42 7200                       		moveq	#0,d1
00007B44 1228 0028                  		move.b	$28(a0),d1
00007B48 E749                       		lsl.w	#3,d1
00007B4A 3401                       		move.w	d1,d2
00007B4C 5041                       		addq.w	#8,d1
00007B4E 6100                       		bsr.s	ExitPlatform2
00007B50 6400                       		bcc.s	locret_75BE
00007B52 E848                       		lsr.w	#4,d0
00007B54 1140 003F                  		move.b	d0,$3F(a0)
00007B58 1028 003E                  		move.b	$3E(a0),d0
00007B5C 0C00 0040                  		cmpi.b	#$40,d0
00007B60 6700                       		beq.s	loc_75B6
00007B62 5828 003E                  		addq.b	#4,$3E(a0)
00007B66                            
00007B66                            loc_75B6:
00007B66 6100 0000                  		bsr.w	Obj11_Bend
00007B6A 6100 0000                  		bsr.w	Obj11_MoveSonic
00007B6E                            
00007B6E                            locret_75BE:
00007B6E 4E75                       		rts	
00007B70                            ; End of function Obj11_WalkOff
00007B70                            
00007B70                            ; ---------------------------------------------------------------------------
00007B70                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007B70                            ; ---------------------------------------------------------------------------
00007B70                            
00007B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B70                            
00007B70                            
00007B70                            ExitPlatform:
00007B70 3401                       		move.w	d1,d2
00007B72                            
00007B72                            ExitPlatform2:
00007B72 D442                       		add.w	d2,d2
00007B74 43F8 D000                  		lea	($FFFFD000).w,a1
00007B78 0829 0001 0022             		btst	#1,$22(a1)
00007B7E 6600                       		bne.s	loc_75E0
00007B80 3029 0008                  		move.w	8(a1),d0
00007B84 9068 0008                  		sub.w	8(a0),d0
00007B88 D041                       		add.w	d1,d0
00007B8A 6B00                       		bmi.s	loc_75E0
00007B8C B042                       		cmp.w	d2,d0
00007B8E 6500                       		bcs.s	locret_75F2
00007B90                            
00007B90                            loc_75E0:
00007B90 08A9 0003 0022             		bclr	#3,$22(a1)
00007B96 117C 0002 0024             		move.b	#2,$24(a0)
00007B9C 08A8 0003 0022             		bclr	#3,$22(a0)
00007BA2                            
00007BA2                            locret_75F2:
00007BA2 4E75                       		rts	
00007BA4                            ; End of function ExitPlatform
00007BA4                            
00007BA4                            
00007BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BA4                            
00007BA4                            
00007BA4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007BA4 7000                       		moveq	#0,d0
00007BA6 1028 003F                  		move.b	$3F(a0),d0
00007BAA 1030 0029                  		move.b	$29(a0,d0.w),d0
00007BAE ED48                       		lsl.w	#6,d0
00007BB0 0680 00FF D000             		addi.l	#$FFD000,d0
00007BB6 2440                       		movea.l	d0,a2
00007BB8 43F8 D000                  		lea	($FFFFD000).w,a1
00007BBC 302A 000C                  		move.w	$C(a2),d0
00007BC0 5140                       		subq.w	#8,d0
00007BC2 7200                       		moveq	#0,d1
00007BC4 1229 0016                  		move.b	$16(a1),d1
00007BC8 9041                       		sub.w	d1,d0
00007BCA 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007BCE 4E75                       		rts	
00007BD0                            ; End of function Obj11_MoveSonic
00007BD0                            
00007BD0                            
00007BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BD0                            
00007BD0                            
00007BD0                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007BD0 1028 003E                  		move.b	$3E(a0),d0
00007BD4 6100 B08E                  		bsr.w	CalcSine
00007BD8 3800                       		move.w	d0,d4
00007BDA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007BE0 7000                       		moveq	#0,d0
00007BE2 1028 0028                  		move.b	$28(a0),d0
00007BE6 E948                       		lsl.w	#4,d0
00007BE8 7600                       		moveq	#0,d3
00007BEA 1628 003F                  		move.b	$3F(a0),d3
00007BEE 3403                       		move.w	d3,d2
00007BF0 D640                       		add.w	d0,d3
00007BF2 7A00                       		moveq	#0,d5
00007BF4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007BFA 1A35 3000                  		move.b	(a5,d3.w),d5
00007BFE 0243 000F                  		andi.w	#$F,d3
00007C02 E94B                       		lsl.w	#4,d3
00007C04 47F4 3000                  		lea	(a4,d3.w),a3
00007C08 45E8 0029                  		lea	$29(a0),a2
00007C0C                            
00007C0C                            loc_765C:
00007C0C 7000                       		moveq	#0,d0
00007C0E 101A                       		move.b	(a2)+,d0
00007C10 ED48                       		lsl.w	#6,d0
00007C12 0680 00FF D000             		addi.l	#$FFD000,d0
00007C18 2240                       		movea.l	d0,a1
00007C1A 7000                       		moveq	#0,d0
00007C1C 101B                       		move.b	(a3)+,d0
00007C1E 5240                       		addq.w	#1,d0
00007C20 C0C5                       		mulu.w	d5,d0
00007C22 C0C4                       		mulu.w	d4,d0
00007C24 4840                       		swap	d0
00007C26 D069 003C                  		add.w	$3C(a1),d0
00007C2A 3340 000C                  		move.w	d0,$C(a1)
00007C2E 51CA FFDC                  		dbf	d2,loc_765C
00007C32 7000                       		moveq	#0,d0
00007C34 1028 0028                  		move.b	$28(a0),d0
00007C38 7600                       		moveq	#0,d3
00007C3A 1628 003F                  		move.b	$3F(a0),d3
00007C3E 5203                       		addq.b	#1,d3
00007C40 9600                       		sub.b	d0,d3
00007C42 4403                       		neg.b	d3
00007C44 6B00                       		bmi.s	locret_76CA
00007C46 3403                       		move.w	d3,d2
00007C48 E94B                       		lsl.w	#4,d3
00007C4A 47F4 3000                  		lea	(a4,d3.w),a3
00007C4E D6C2                       		adda.w	d2,a3
00007C50 5342                       		subq.w	#1,d2
00007C52 6500                       		bcs.s	locret_76CA
00007C54                            
00007C54                            loc_76A4:
00007C54 7000                       		moveq	#0,d0
00007C56 101A                       		move.b	(a2)+,d0
00007C58 ED48                       		lsl.w	#6,d0
00007C5A 0680 00FF D000             		addi.l	#$FFD000,d0
00007C60 2240                       		movea.l	d0,a1
00007C62 7000                       		moveq	#0,d0
00007C64 1023                       		move.b	-(a3),d0
00007C66 5240                       		addq.w	#1,d0
00007C68 C0C5                       		mulu.w	d5,d0
00007C6A C0C4                       		mulu.w	d4,d0
00007C6C 4840                       		swap	d0
00007C6E D069 003C                  		add.w	$3C(a1),d0
00007C72 3340 000C                  		move.w	d0,$C(a1)
00007C76 51CA FFDC                  		dbf	d2,loc_76A4
00007C7A                            
00007C7A                            locret_76CA:
00007C7A 4E75                       		rts	
00007C7C                            ; End of function Obj11_Bend
00007C7C                            
00007C7C                            ; ===========================================================================
00007C7C                            ; ---------------------------------------------------------------------------
00007C7C                            ; GHZ bridge-bending data
00007C7C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007C7C                            ; ---------------------------------------------------------------------------
00007C7C                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007D8C                            		even
00007D8C                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007E8C                            		even
00007E8C                            
00007E8C                            ; ===========================================================================
00007E8C                            
00007E8C                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007E8C 3028 0008                  		move.w	8(a0),d0
00007E90 0240 FF80                  		andi.w	#$FF80,d0
00007E94 3238 F700                  		move.w	($FFFFF700).w,d1
00007E98 0441 0080                  		subi.w	#$80,d1
00007E9C 0241 FF80                  		andi.w	#$FF80,d1
00007EA0 9041                       		sub.w	d1,d0
00007EA2 0C40 0280                  		cmpi.w	#$280,d0
00007EA6 6200 0000                  		bhi.w	Obj11_DelAll
00007EAA 4E75                       		rts	
00007EAC                            ; ===========================================================================
00007EAC                            
00007EAC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007EAC 7400                       		moveq	#0,d2
00007EAE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007EB2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007EB4 5302                       		subq.b	#1,d2		; subtract 1
00007EB6 6500                       		bcs.s	Obj11_Delete
00007EB8                            
00007EB8                            Obj11_DelLoop:
00007EB8 7000                       		moveq	#0,d0
00007EBA 101A                       		move.b	(a2)+,d0
00007EBC ED48                       		lsl.w	#6,d0
00007EBE 0680 00FF D000             		addi.l	#$FFD000,d0
00007EC4 2240                       		movea.l	d0,a1
00007EC6 B048                       		cmp.w	a0,d0
00007EC8 6700                       		beq.s	loc_791E
00007ECA 6100 0000                  		bsr.w	DeleteObject2
00007ECE                            
00007ECE                            loc_791E:
00007ECE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007ED2                            
00007ED2                            Obj11_Delete:
00007ED2 6100 0000                  		bsr.w	DeleteObject
00007ED6 4E75                       		rts	
00007ED8                            ; ===========================================================================
00007ED8                            
00007ED8                            Obj11_Delete2:				; XREF: Obj11_Index
00007ED8 6100 0000                  		bsr.w	DeleteObject
00007EDC 4E75                       		rts	
00007EDE                            ; ===========================================================================
00007EDE                            
00007EDE                            Obj11_Display2:				; XREF: Obj11_Index
00007EDE 6100 0000                  		bsr.w	DisplaySprite
00007EE2 4E75                       		rts	
00007EE4                            ; ===========================================================================
00007EE4                            ; ---------------------------------------------------------------------------
00007EE4                            ; Sprite mappings - GHZ	bridge
00007EE4                            ; ---------------------------------------------------------------------------
00007EE4                            Map_obj11:
00007EE4                            	include "_maps\obj11.asm"
00007EE4                            ; ---------------------------------------------------------------------------
00007EE4                            ; Sprite mappings - GHZ	bridge
00007EE4                            ; ---------------------------------------------------------------------------
00007EE4 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007EE8 0000                       		dc.w byte_794B-Map_obj11
00007EEA 01                         byte_793A:	dc.b 1
00007EEB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007EF0 02                         byte_7940:	dc.b 2
00007EF1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007EF6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007EFB 01                         byte_794B:	dc.b 1
00007EFC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F02 00                         		even
00007F02 00                         		even
00007F02                            
00007F02                            ; ===========================================================================
00007F02                            ; ---------------------------------------------------------------------------
00007F02                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F02                            ;	    - spiked ball on a chain (SBZ)
00007F02                            ; ---------------------------------------------------------------------------
00007F02                            
00007F02                            Obj15:					; XREF: Obj_Index
00007F02 7000                       		moveq	#0,d0
00007F04 1028 0024                  		move.b	$24(a0),d0
00007F08 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F0C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F10                            ; ===========================================================================
00007F10 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F14 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F18 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F1C 0000                       		dc.w Obj15_Action-Obj15_Index
00007F1E                            ; ===========================================================================
00007F1E                            
00007F1E                            Obj15_Main:				; XREF: Obj15_Index
00007F1E 5428 0024                  		addq.b	#2,$24(a0)
00007F22 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F2A 317C 4380 0002             		move.w	#$4380,2(a0)
00007F30 117C 0004 0001             		move.b	#4,1(a0)
00007F36 117C 0003 0018             		move.b	#3,$18(a0)
00007F3C 117C 0018 0019             		move.b	#$18,$19(a0)
00007F42 117C 0008 0016             		move.b	#8,$16(a0)
00007F48 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F4E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007F54 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F5A 6600                       		bne.s	Obj15_NotSLZ
00007F5C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007F64 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007F6A 117C 0020 0019             		move.b	#$20,$19(a0)
00007F70 117C 0010 0016             		move.b	#$10,$16(a0)
00007F76 117C 0099 0020             		move.b	#$99,$20(a0)
00007F7C                            
00007F7C                            Obj15_NotSLZ:
00007F7C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007F82 6600                       		bne.s	Obj15_SetLength
00007F84 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007F8C 317C 0391 0002             		move.w	#$391,2(a0)
00007F92 117C 0018 0019             		move.b	#$18,$19(a0)
00007F98 117C 0018 0016             		move.b	#$18,$16(a0)
00007F9E 117C 0086 0020             		move.b	#$86,$20(a0)
00007FA4 117C 000C 0024             		move.b	#$C,$24(a0)
00007FAA                            
00007FAA                            Obj15_SetLength:
00007FAA 1810                       		move.b	0(a0),d4
00007FAC 7200                       		moveq	#0,d1
00007FAE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007FB2 1212                       		move.b	(a2),d1		; move a2 to d1
00007FB4 3F01                       		move.w	d1,-(sp)
00007FB6 0241 000F                  		andi.w	#$F,d1
00007FBA 14FC 0000                  		move.b	#0,(a2)+
00007FBE 3601                       		move.w	d1,d3
00007FC0 E94B                       		lsl.w	#4,d3
00007FC2 5003                       		addq.b	#8,d3
00007FC4 1143 003C                  		move.b	d3,$3C(a0)
00007FC8 5103                       		subq.b	#8,d3
00007FCA 4A28 001A                  		tst.b	$1A(a0)
00007FCE 6700                       		beq.s	Obj15_MakeChain
00007FD0 5003                       		addq.b	#8,d3
00007FD2 5341                       		subq.w	#1,d1
00007FD4                            
00007FD4                            Obj15_MakeChain:
00007FD4 6100 0000                  		bsr.w	SingleObjLoad
00007FD8 6600                       		bne.s	loc_7A92
00007FDA 5228 0028                  		addq.b	#1,$28(a0)
00007FDE 3A09                       		move.w	a1,d5
00007FE0 0445 D000                  		subi.w	#-$3000,d5
00007FE4 EC4D                       		lsr.w	#6,d5
00007FE6 0245 007F                  		andi.w	#$7F,d5
00007FEA 14C5                       		move.b	d5,(a2)+
00007FEC 137C 000A 0024             		move.b	#$A,$24(a1)
00007FF2 1284                       		move.b	d4,0(a1)	; load swinging	object
00007FF4 2368 0004 0004             		move.l	4(a0),4(a1)
00007FFA 3368 0002 0002             		move.w	2(a0),2(a1)
00008000 08A9 0006 0002             		bclr	#6,2(a1)
00008006 137C 0004 0001             		move.b	#4,1(a1)
0000800C 137C 0004 0018             		move.b	#4,$18(a1)
00008012 137C 0008 0019             		move.b	#8,$19(a1)
00008018 137C 0001 001A             		move.b	#1,$1A(a1)
0000801E 1343 003C                  		move.b	d3,$3C(a1)
00008022 0403 0010                  		subi.b	#$10,d3
00008026 6400                       		bcc.s	loc_7A8E
00008028 137C 0002 001A             		move.b	#2,$1A(a1)
0000802E 137C 0003 0018             		move.b	#3,$18(a1)
00008034 08E9 0006 0002             		bset	#6,2(a1)
0000803A                            
0000803A                            loc_7A8E:
0000803A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000803E                            
0000803E                            loc_7A92:
0000803E 3A08                       		move.w	a0,d5
00008040 0445 D000                  		subi.w	#-$3000,d5
00008044 EC4D                       		lsr.w	#6,d5
00008046 0245 007F                  		andi.w	#$7F,d5
0000804A 14C5                       		move.b	d5,(a2)+
0000804C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008052 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008058 321F                       		move.w	(sp)+,d1
0000805A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000805E 6700                       		beq.s	loc_7AD4	; if not, branch
00008060 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008068 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000806E 117C 0001 001A             		move.b	#1,$1A(a0)
00008074 117C 0002 0018             		move.b	#2,$18(a0)
0000807A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008080                            
00008080                            loc_7AD4:
00008080 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008086 6700                       		beq.s	Obj15_Action	; if yes, branch
00008088                            
00008088                            Obj15_SetSolid:				; XREF: Obj15_Index
00008088 7200                       		moveq	#0,d1
0000808A 1228 0019                  		move.b	$19(a0),d1
0000808E 7600                       		moveq	#0,d3
00008090 1628 0016                  		move.b	$16(a0),d3
00008094 6100 FA76                  		bsr.w	Obj15_Solid
00008098                            
00008098                            Obj15_Action:				; XREF: Obj15_Index
00008098 6100 0000                  		bsr.w	Obj15_Move
0000809C 6100 0000                  		bsr.w	DisplaySprite
000080A0 6000 0000                  		bra.w	Obj15_ChkDel
000080A4                            ; ===========================================================================
000080A4                            
000080A4                            Obj15_Action2:				; XREF: Obj15_Index
000080A4 7200                       		moveq	#0,d1
000080A6 1228 0019                  		move.b	$19(a0),d1
000080AA 6100 FAC4                  		bsr.w	ExitPlatform
000080AE 3F28 0008                  		move.w	8(a0),-(sp)
000080B2 6100 0000                  		bsr.w	Obj15_Move
000080B6 341F                       		move.w	(sp)+,d2
000080B8 7600                       		moveq	#0,d3
000080BA 1628 0016                  		move.b	$16(a0),d3
000080BE 5203                       		addq.b	#1,d3
000080C0 6100 0000                  		bsr.w	MvSonicOnPtfm
000080C4 6100 0000                  		bsr.w	DisplaySprite
000080C8 6000 0000                  		bra.w	Obj15_ChkDel
000080CC                            
000080CC 4E75                       		rts
000080CE                            
000080CE                            ; ---------------------------------------------------------------------------
000080CE                            ; Subroutine to	change Sonic's position with a platform
000080CE                            ; ---------------------------------------------------------------------------
000080CE                            
000080CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080CE                            
000080CE                            
000080CE                            MvSonicOnPtfm:
000080CE 43F8 D000                  		lea	($FFFFD000).w,a1
000080D2 3028 000C                  		move.w	$C(a0),d0
000080D6 9043                       		sub.w	d3,d0
000080D8 6000                       		bra.s	MvSonic2
000080DA                            ; End of function MvSonicOnPtfm
000080DA                            
000080DA                            ; ---------------------------------------------------------------------------
000080DA                            ; Subroutine to	change Sonic's position with a platform
000080DA                            ; ---------------------------------------------------------------------------
000080DA                            
000080DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080DA                            
000080DA                            
000080DA                            MvSonicOnPtfm2:
000080DA 43F8 D000                  		lea	($FFFFD000).w,a1
000080DE 3028 000C                  		move.w	$C(a0),d0
000080E2 0440 0009                  		subi.w	#9,d0
000080E6                            
000080E6                            MvSonic2:
000080E6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000080EA 6B00                       		bmi.s	locret_7B62
000080EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000080F2 6400                       		bcc.s	locret_7B62
000080F4 4A78 FE08                  		tst.w	($FFFFFE08).w
000080F8 6600                       		bne.s	locret_7B62
000080FA 7200                       		moveq	#0,d1
000080FC 1229 0016                  		move.b	$16(a1),d1
00008100 9041                       		sub.w	d1,d0
00008102 3340 000C                  		move.w	d0,$C(a1)
00008106 9468 0008                  		sub.w	8(a0),d2
0000810A 9569 0008                  		sub.w	d2,8(a1)
0000810E                            
0000810E                            locret_7B62:
0000810E 4E75                       		rts	
00008110                            ; End of function MvSonicOnPtfm2
00008110                            
00008110                            
00008110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008110                            
00008110                            
00008110                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008110 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008114 323C 0080                  		move.w	#$80,d1
00008118 0828 0000 0022             		btst	#0,$22(a0)
0000811E 6700                       		beq.s	loc_7B78
00008120 4440                       		neg.w	d0
00008122 D041                       		add.w	d1,d0
00008124                            
00008124                            loc_7B78:
00008124 6000                       		bra.s	Obj15_Move2
00008126                            ; End of function Obj15_Move
00008126                            
00008126                            
00008126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008126                            
00008126                            
00008126                            Obj48_Move:				; XREF: Obj48_Display2
00008126 4A28 003D                  		tst.b	$3D(a0)
0000812A 6600                       		bne.s	loc_7B9C
0000812C 3028 003E                  		move.w	$3E(a0),d0
00008130 5040                       		addq.w	#8,d0
00008132 3140 003E                  		move.w	d0,$3E(a0)
00008136 D168 0026                  		add.w	d0,$26(a0)
0000813A 0C40 0200                  		cmpi.w	#$200,d0
0000813E 6600                       		bne.s	loc_7BB6
00008140 117C 0001 003D             		move.b	#1,$3D(a0)
00008146 6000                       		bra.s	loc_7BB6
00008148                            ; ===========================================================================
00008148                            
00008148                            loc_7B9C:
00008148 3028 003E                  		move.w	$3E(a0),d0
0000814C 5140                       		subq.w	#8,d0
0000814E 3140 003E                  		move.w	d0,$3E(a0)
00008152 D168 0026                  		add.w	d0,$26(a0)
00008156 0C40 FE00                  		cmpi.w	#-$200,d0
0000815A 6600                       		bne.s	loc_7BB6
0000815C 117C 0000 003D             		move.b	#0,$3D(a0)
00008162                            
00008162                            loc_7BB6:
00008162 1028 0026                  		move.b	$26(a0),d0
00008166                            ; End of function Obj48_Move
00008166                            
00008166                            
00008166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008166                            
00008166                            
00008166                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008166 6100 AAFC                  		bsr.w	CalcSine
0000816A 3428 0038                  		move.w	$38(a0),d2
0000816E 3628 003A                  		move.w	$3A(a0),d3
00008172 45E8 0028                  		lea	$28(a0),a2
00008176 7C00                       		moveq	#0,d6
00008178 1C1A                       		move.b	(a2)+,d6
0000817A                            
0000817A                            loc_7BCE:
0000817A 7800                       		moveq	#0,d4
0000817C 181A                       		move.b	(a2)+,d4
0000817E ED4C                       		lsl.w	#6,d4
00008180 0684 00FF D000             		addi.l	#$FFD000,d4
00008186 2244                       		movea.l	d4,a1
00008188 7800                       		moveq	#0,d4
0000818A 1829 003C                  		move.b	$3C(a1),d4
0000818E 2A04                       		move.l	d4,d5
00008190 C9C0                       		muls.w	d0,d4
00008192 E084                       		asr.l	#8,d4
00008194 CBC1                       		muls.w	d1,d5
00008196 E085                       		asr.l	#8,d5
00008198 D842                       		add.w	d2,d4
0000819A DA43                       		add.w	d3,d5
0000819C 3344 000C                  		move.w	d4,$C(a1)
000081A0 3345 0008                  		move.w	d5,8(a1)
000081A4 51CE FFD4                  		dbf	d6,loc_7BCE
000081A8 4E75                       		rts	
000081AA                            ; End of function Obj15_Move2
000081AA                            
000081AA                            ; ===========================================================================
000081AA                            
000081AA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000081AA 3028 003A                  		move.w	$3A(a0),d0
000081AE 0240 FF80                  		andi.w	#$FF80,d0
000081B2 3238 F700                  		move.w	($FFFFF700).w,d1
000081B6 0441 0080                  		subi.w	#$80,d1
000081BA 0241 FF80                  		andi.w	#$FF80,d1
000081BE 9041                       		sub.w	d1,d0
000081C0 0C40 0280                  		cmpi.w	#$280,d0
000081C4 6200 0000                  		bhi.w	Obj15_DelAll
000081C8 4E75                       		rts	
000081CA                            ; ===========================================================================
000081CA                            
000081CA                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000081CA 7400                       		moveq	#0,d2
000081CC 45E8 0028                  		lea	$28(a0),a2
000081D0 141A                       		move.b	(a2)+,d2
000081D2                            
000081D2                            Obj15_DelLoop:
000081D2 7000                       		moveq	#0,d0
000081D4 101A                       		move.b	(a2)+,d0
000081D6 ED48                       		lsl.w	#6,d0
000081D8 0680 00FF D000             		addi.l	#$FFD000,d0
000081DE 2240                       		movea.l	d0,a1
000081E0 6100 0000                  		bsr.w	DeleteObject2
000081E4 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000081E8 4E75                       		rts	
000081EA                            ; ===========================================================================
000081EA                            
000081EA                            Obj15_Delete:				; XREF: Obj15_Index
000081EA 6100 0000                  		bsr.w	DeleteObject
000081EE 4E75                       		rts	
000081F0                            ; ===========================================================================
000081F0                            
000081F0                            Obj15_Display:				; XREF: Obj15_Index
000081F0 6000 0000                  		bra.w	DisplaySprite
000081F4                            ; ===========================================================================
000081F4                            ; ---------------------------------------------------------------------------
000081F4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081F4                            ; ---------------------------------------------------------------------------
000081F4                            Map_obj15:
000081F4                            	include "_maps\obj15ghz.asm"
000081F4                            ; ---------------------------------------------------------------------------
000081F4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081F4                            ; ---------------------------------------------------------------------------
000081F4 0000                       		dc.w byte_7C4E-Map_obj15
000081F6 0000                       		dc.w byte_7C59-Map_obj15
000081F8 0000                       		dc.w byte_7C5F-Map_obj15
000081FA 02                         byte_7C4E:	dc.b 2
000081FB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008200 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008205 01                         byte_7C59:	dc.b 1
00008206 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000820B 01                         byte_7C5F:	dc.b 1
0000820C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008212 00                         		even
00008212 00                         		even
00008212                            
00008212                            ; ---------------------------------------------------------------------------
00008212                            ; Sprite mappings - SLZ	swinging platforms
00008212                            ; ---------------------------------------------------------------------------
00008212                            Map_obj15a:
00008212                            	include "_maps\obj15slz.asm"
00008212                            ; ---------------------------------------------------------------------------
00008212                            ; Sprite mappings - SLZ	swinging platforms
00008212                            ; ---------------------------------------------------------------------------
00008212 0000                       		dc.w byte_7C6C-Map_obj15a
00008214 0000                       		dc.w byte_7C95-Map_obj15a
00008216 0000                       		dc.w byte_7C9B-Map_obj15a
00008218 08                         byte_7C6C:	dc.b 8
00008219 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000821E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008223 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008228 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000822D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008232 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008237 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000823C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008241 01                         byte_7C95:	dc.b 1
00008242 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008247 01                         byte_7C9B:	dc.b 1
00008248 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000824E 00                         		even
0000824E 00                         		even
0000824E                            
0000824E                            ; ===========================================================================
0000824E                            ; ---------------------------------------------------------------------------
0000824E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000824E                            ; ---------------------------------------------------------------------------
0000824E                            
0000824E                            Obj17:					; XREF: Obj_Index
0000824E 7000                       		moveq	#0,d0
00008250 1028 0024                  		move.b	$24(a0),d0
00008254 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008258 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000825C                            ; ===========================================================================
0000825C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000825E 0000                       		dc.w Obj17_Action-Obj17_Index
00008260 0000                       		dc.w Obj17_Action-Obj17_Index
00008262 0000                       		dc.w Obj17_Delete-Obj17_Index
00008264 0000                       		dc.w Obj17_Display-Obj17_Index
00008266                            ; ===========================================================================
00008266                            
00008266                            Obj17_Main:				; XREF: Obj17_Index
00008266 5428 0024                  		addq.b	#2,$24(a0)
0000826A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008272 317C 4398 0002             		move.w	#$4398,2(a0)
00008278 117C 0007 0022             		move.b	#7,$22(a0)
0000827E 117C 0004 0001             		move.b	#4,1(a0)
00008284 117C 0003 0018             		move.b	#3,$18(a0)
0000828A 117C 0008 0019             		move.b	#8,$19(a0)
00008290 3428 000C                  		move.w	$C(a0),d2
00008294 3628 0008                  		move.w	8(a0),d3
00008298 1810                       		move.b	0(a0),d4
0000829A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000829E 7200                       		moveq	#0,d1
000082A0 1212                       		move.b	(a2),d1		; move a2 to d1
000082A2 14FC 0000                  		move.b	#0,(a2)+
000082A6 3001                       		move.w	d1,d0
000082A8 E248                       		lsr.w	#1,d0
000082AA E948                       		lsl.w	#4,d0
000082AC 9640                       		sub.w	d0,d3
000082AE 5501                       		subq.b	#2,d1
000082B0 6500                       		bcs.s	Obj17_Action
000082B2 7C00                       		moveq	#0,d6
000082B4                            
000082B4                            Obj17_MakeHelix:
000082B4 6100 0000                  		bsr.w	SingleObjLoad
000082B8 6600                       		bne.s	Obj17_Action
000082BA 5228 0028                  		addq.b	#1,$28(a0)
000082BE 3A09                       		move.w	a1,d5
000082C0 0445 D000                  		subi.w	#$D000,d5
000082C4 EC4D                       		lsr.w	#6,d5
000082C6 0245 007F                  		andi.w	#$7F,d5
000082CA 14C5                       		move.b	d5,(a2)+
000082CC 137C 0008 0024             		move.b	#8,$24(a1)
000082D2 1284                       		move.b	d4,0(a1)
000082D4 3342 000C                  		move.w	d2,$C(a1)
000082D8 3343 0008                  		move.w	d3,8(a1)
000082DC 2368 0004 0004             		move.l	4(a0),4(a1)
000082E2 337C 4398 0002             		move.w	#$4398,2(a1)
000082E8 137C 0004 0001             		move.b	#4,1(a1)
000082EE 137C 0003 0018             		move.b	#3,$18(a1)
000082F4 137C 0008 0019             		move.b	#8,$19(a1)
000082FA 1346 003E                  		move.b	d6,$3E(a1)
000082FE 5206                       		addq.b	#1,d6
00008300 0206 0007                  		andi.b	#7,d6
00008304 0643 0010                  		addi.w	#$10,d3
00008308 B668 0008                  		cmp.w	8(a0),d3
0000830C 6600                       		bne.s	loc_7D78
0000830E 1146 003E                  		move.b	d6,$3E(a0)
00008312 5206                       		addq.b	#1,d6
00008314 0206 0007                  		andi.b	#7,d6
00008318 0643 0010                  		addi.w	#$10,d3
0000831C 5228 0028                  		addq.b	#1,$28(a0)
00008320                            
00008320                            loc_7D78:
00008320 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008324                            
00008324                            Obj17_Action:				; XREF: Obj17_Index
00008324 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008328 6100 0000                  		bsr.w	DisplaySprite
0000832C 6000 0000                  		bra.w	Obj17_ChkDel
00008330                            
00008330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008330                            
00008330                            
00008330                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008330 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008334 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000833A D028 003E                  		add.b	$3E(a0),d0
0000833E 0200 0007                  		andi.b	#7,d0
00008342 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008346 6600                       		bne.s	locret_7DA6
00008348 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000834E                            
0000834E                            locret_7DA6:
0000834E 4E75                       		rts	
00008350                            ; End of function Obj17_RotateSpikes
00008350                            
00008350                            ; ===========================================================================
00008350                            
00008350                            Obj17_ChkDel:				; XREF: Obj17_Action
00008350 3028 0008                  		move.w	8(a0),d0
00008354 0240 FF80                  		andi.w	#$FF80,d0
00008358 3238 F700                  		move.w	($FFFFF700).w,d1
0000835C 0441 0080                  		subi.w	#$80,d1
00008360 0241 FF80                  		andi.w	#$FF80,d1
00008364 9041                       		sub.w	d1,d0
00008366 0C40 0280                  		cmpi.w	#$280,d0
0000836A 6200 0000                  		bhi.w	Obj17_DelAll
0000836E 4E75                       		rts	
00008370                            ; ===========================================================================
00008370                            
00008370                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008370 7400                       		moveq	#0,d2
00008372 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008376 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008378 5502                       		subq.b	#2,d2
0000837A 6500                       		bcs.s	Obj17_Delete
0000837C                            
0000837C                            Obj17_DelLoop:
0000837C 7000                       		moveq	#0,d0
0000837E 101A                       		move.b	(a2)+,d0
00008380 ED48                       		lsl.w	#6,d0
00008382 0680 00FF D000             		addi.l	#$FFD000,d0
00008388 2240                       		movea.l	d0,a1
0000838A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000838E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008392                            
00008392                            Obj17_Delete:				; XREF: Obj17_Index
00008392 6100 0000                  		bsr.w	DeleteObject
00008396 4E75                       		rts	
00008398                            ; ===========================================================================
00008398                            
00008398                            Obj17_Display:				; XREF: Obj17_Index
00008398 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000839C 6000 0000                  		bra.w	DisplaySprite
000083A0                            ; ===========================================================================
000083A0                            ; ---------------------------------------------------------------------------
000083A0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083A0                            ; ---------------------------------------------------------------------------
000083A0                            Map_obj17:
000083A0                            	include "_maps\obj17.asm"
000083A0                            ; ---------------------------------------------------------------------------
000083A0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083A0                            ; ---------------------------------------------------------------------------
000083A0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000083A4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000083A8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000083AC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000083B0 01                         byte_7E08:	dc.b 1
000083B1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000083B6 01                         byte_7E0E:	dc.b 1
000083B7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000083BC 01                         byte_7E14:	dc.b 1
000083BD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000083C2 01                         byte_7E1A:	dc.b 1
000083C3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000083C8 01                         byte_7E20:	dc.b 1
000083C9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000083CE 01                         byte_7E26:	dc.b 1
000083CF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000083D4 01                         byte_7E2C:	dc.b 1
000083D5 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000083DA                            		even
000083DA                            		even
000083DA                            
000083DA                            ; ===========================================================================
000083DA                            ; ---------------------------------------------------------------------------
000083DA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000083DA                            ; ---------------------------------------------------------------------------
000083DA                            
000083DA                            Obj18:					; XREF: Obj_Index
000083DA 7000                       		moveq	#0,d0
000083DC 1028 0024                  		move.b	$24(a0),d0
000083E0 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000083E4 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000083E8                            ; ===========================================================================
000083E8 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000083EA 0000                       		dc.w Obj18_Solid-Obj18_Index
000083EC 0000                       		dc.w Obj18_Action2-Obj18_Index
000083EE 0000                       		dc.w Obj18_Delete-Obj18_Index
000083F0 0000                       		dc.w Obj18_Action-Obj18_Index
000083F2                            ; ===========================================================================
000083F2                            
000083F2                            Obj18_Main:				; XREF: Obj18_Index
000083F2 5428 0024                  		addq.b	#2,$24(a0)
000083F6 317C 4000 0002             		move.w	#$4000,2(a0)
000083FC 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008404 117C 0020 0019             		move.b	#$20,$19(a0)
0000840A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008410 6600                       		bne.s	Obj18_NotSYZ
00008412 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000841A 117C 0020 0019             		move.b	#$20,$19(a0)
00008420                            
00008420                            Obj18_NotSYZ:
00008420 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008426 6600                       		bne.s	Obj18_NotSLZ
00008428 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008430 117C 0020 0019             		move.b	#$20,$19(a0)
00008436 317C 4000 0002             		move.w	#$4000,2(a0)
0000843C 117C 0003 0028             		move.b	#3,$28(a0)
00008442                            
00008442                            Obj18_NotSLZ:
00008442 117C 0004 0001             		move.b	#4,1(a0)
00008448 117C 0004 0018             		move.b	#4,$18(a0)
0000844E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008454 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000845A 3168 0008 0032             		move.w	8(a0),$32(a0)
00008460 317C 0080 0026             		move.w	#$80,$26(a0)
00008466 7200                       		moveq	#0,d1
00008468 1028 0028                  		move.b	$28(a0),d0
0000846C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008470 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008472 5201                       		addq.b	#1,d1		; use frame #1
00008474 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000847A                            
0000847A                            Obj18_SetFrame:
0000847A 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000847E                            
0000847E                            Obj18_Solid:				; XREF: Obj18_Index
0000847E 4A28 0038                  		tst.b	$38(a0)
00008482 6700                       		beq.s	loc_7EE0
00008484 5928 0038                  		subq.b	#4,$38(a0)
00008488                            
00008488                            loc_7EE0:
00008488 7200                       		moveq	#0,d1
0000848A 1228 0019                  		move.b	$19(a0),d1
0000848E 6100 F56C                  		bsr.w	PlatformObject
00008492                            
00008492                            Obj18_Action:				; XREF: Obj18_Index
00008492 6100 0000                  		bsr.w	Obj18_Move
00008496 6100 0000                  		bsr.w	Obj18_Nudge
0000849A 6100 0000                  		bsr.w	DisplaySprite
0000849E 6000 0000                  		bra.w	Obj18_ChkDel
000084A2                            ; ===========================================================================
000084A2                            
000084A2                            Obj18_Action2:				; XREF: Obj18_Index
000084A2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000084A8 6700                       		beq.s	loc_7F06
000084AA 5828 0038                  		addq.b	#4,$38(a0)
000084AE                            
000084AE                            loc_7F06:
000084AE 7200                       		moveq	#0,d1
000084B0 1228 0019                  		move.b	$19(a0),d1
000084B4 6100 F6BA                  		bsr.w	ExitPlatform
000084B8 3F28 0008                  		move.w	8(a0),-(sp)
000084BC 6100 0000                  		bsr.w	Obj18_Move
000084C0 6100 0000                  		bsr.w	Obj18_Nudge
000084C4 341F                       		move.w	(sp)+,d2
000084C6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000084CA 6100 0000                  		bsr.w	DisplaySprite
000084CE 6000 0000                  		bra.w	Obj18_ChkDel
000084D2                            
000084D2 4E75                       		rts
000084D4                            
000084D4                            ; ---------------------------------------------------------------------------
000084D4                            ; Subroutine to	move platform slightly when you	stand on it
000084D4                            ; ---------------------------------------------------------------------------
000084D4                            
000084D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D4                            
000084D4                            
000084D4                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000084D4 1028 0038                  		move.b	$38(a0),d0
000084D8 6100 A78A                  		bsr.w	CalcSine
000084DC 323C 0400                  		move.w	#$400,d1
000084E0 C1C1                       		muls.w	d1,d0
000084E2 4840                       		swap	d0
000084E4 D068 002C                  		add.w	$2C(a0),d0
000084E8 3140 000C                  		move.w	d0,$C(a0)
000084EC 4E75                       		rts	
000084EE                            ; End of function Obj18_Nudge
000084EE                            
000084EE                            ; ---------------------------------------------------------------------------
000084EE                            ; Subroutine to	move platforms
000084EE                            ; ---------------------------------------------------------------------------
000084EE                            
000084EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084EE                            
000084EE                            
000084EE                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000084EE 7000                       		moveq	#0,d0
000084F0 1028 0028                  		move.b	$28(a0),d0
000084F4 0240 000F                  		andi.w	#$F,d0
000084F8 D040                       		add.w	d0,d0
000084FA 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000084FE 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008502                            ; End of function Obj18_Move
00008502                            
00008502                            ; ===========================================================================
00008502 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008506 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000850A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000850E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008512 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008516 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000851A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000851C                            ; ===========================================================================
0000851C                            
0000851C                            Obj18_Type00:
0000851C 4E75                       		rts			; platform 00 doesn't move
0000851E                            ; ===========================================================================
0000851E                            
0000851E                            Obj18_Type05:
0000851E 3028 0032                  		move.w	$32(a0),d0
00008522 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008526 4401                       		neg.b	d1		; reverse platform-motion
00008528 0601 0040                  		addi.b	#$40,d1
0000852C 6000                       		bra.s	Obj18_01_Move
0000852E                            ; ===========================================================================
0000852E                            
0000852E                            Obj18_Type01:
0000852E 3028 0032                  		move.w	$32(a0),d0
00008532 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008536 0401 0040                  		subi.b	#$40,d1
0000853A                            
0000853A                            Obj18_01_Move:
0000853A 4881                       		ext.w	d1
0000853C D041                       		add.w	d1,d0
0000853E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008542 6000 0000                  		bra.w	Obj18_ChgMotion
00008546                            ; ===========================================================================
00008546                            
00008546                            Obj18_Type0C:
00008546 3028 0034                  		move.w	$34(a0),d0
0000854A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000854E 4401                       		neg.b	d1		; reverse platform-motion
00008550 0601 0030                  		addi.b	#$30,d1
00008554 6000                       		bra.s	Obj18_02_Move
00008556                            ; ===========================================================================
00008556                            
00008556                            Obj18_Type0B:
00008556 3028 0034                  		move.w	$34(a0),d0
0000855A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000855E 0401 0030                  		subi.b	#$30,d1
00008562 6000                       		bra.s	Obj18_02_Move
00008564                            ; ===========================================================================
00008564                            
00008564                            Obj18_Type06:
00008564 3028 0034                  		move.w	$34(a0),d0
00008568 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000856C 4401                       		neg.b	d1		; reverse platform-motion
0000856E 0601 0040                  		addi.b	#$40,d1
00008572 6000                       		bra.s	Obj18_02_Move
00008574                            ; ===========================================================================
00008574                            
00008574                            Obj18_Type02:
00008574 3028 0034                  		move.w	$34(a0),d0
00008578 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000857C 0401 0040                  		subi.b	#$40,d1
00008580                            
00008580                            Obj18_02_Move:
00008580 4881                       		ext.w	d1
00008582 D041                       		add.w	d1,d0
00008584 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008588 6000 0000                  		bra.w	Obj18_ChgMotion
0000858C                            ; ===========================================================================
0000858C                            
0000858C                            Obj18_Type03:
0000858C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008590 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008592 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008598 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000859A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000085A0                            
000085A0                            Obj18_03_NoMove:
000085A0 4E75                       		rts	
000085A2                            ; ===========================================================================
000085A2                            
000085A2                            Obj18_03_Wait:
000085A2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000085A6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000085A8 317C 0020 003A             		move.w	#32,$3A(a0)
000085AE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000085B2 4E75                       		rts	
000085B4                            ; ===========================================================================
000085B4                            
000085B4                            Obj18_Type04:
000085B4 4A68 003A                  		tst.w	$3A(a0)
000085B8 6700                       		beq.s	loc_8048
000085BA 5368 003A                  		subq.w	#1,$3A(a0)
000085BE 6600                       		bne.s	loc_8048
000085C0 0828 0003 0022             		btst	#3,$22(a0)
000085C6 6700                       		beq.s	loc_8042
000085C8 08E9 0001 0022             		bset	#1,$22(a1)
000085CE 08A9 0003 0022             		bclr	#3,$22(a1)
000085D4 137C 0002 0024             		move.b	#2,$24(a1)
000085DA 08A8 0003 0022             		bclr	#3,$22(a0)
000085E0 4228 0025                  		clr.b	$25(a0)
000085E4 3368 0012 0012             		move.w	$12(a0),$12(a1)
000085EA                            
000085EA                            loc_8042:
000085EA 117C 0008 0024             		move.b	#8,$24(a0)
000085F0                            
000085F0                            loc_8048:
000085F0 2628 002C                  		move.l	$2C(a0),d3
000085F4 3028 0012                  		move.w	$12(a0),d0
000085F8 48C0                       		ext.l	d0
000085FA E180                       		asl.l	#8,d0
000085FC D680                       		add.l	d0,d3
000085FE 2143 002C                  		move.l	d3,$2C(a0)
00008602 0668 0038 0012             		addi.w	#$38,$12(a0)
00008608 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000860C 0640 00E0                  		addi.w	#$E0,d0
00008610 B068 002C                  		cmp.w	$2C(a0),d0
00008614 6400                       		bcc.s	locret_8074
00008616 117C 0006 0024             		move.b	#6,$24(a0)
0000861C                            
0000861C                            locret_8074:
0000861C 4E75                       		rts	
0000861E                            ; ===========================================================================
0000861E                            
0000861E                            Obj18_Type07:
0000861E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008622 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008624 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008628 7000                       		moveq	#0,d0
0000862A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000862E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008630 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008634 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008636 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000863C                            
0000863C                            Obj18_07_NoMove:
0000863C 4E75                       		rts	
0000863E                            ; ===========================================================================
0000863E                            
0000863E                            Obj18_07_Wait:
0000863E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008642 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008644 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008648 4E75                       		rts	
0000864A                            ; ===========================================================================
0000864A                            
0000864A                            Obj18_Type08:
0000864A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000864E 3028 0034                  		move.w	$34(a0),d0
00008652 0440 0200                  		subi.w	#$200,d0
00008656 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000865A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000865C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008660                            
00008660                            Obj18_08_NoStop:
00008660 4E75                       		rts	
00008662                            ; ===========================================================================
00008662                            
00008662                            Obj18_Type0A:
00008662 3028 0034                  		move.w	$34(a0),d0
00008666 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000866A 0401 0040                  		subi.b	#$40,d1
0000866E 4881                       		ext.w	d1
00008670 E241                       		asr.w	#1,d1
00008672 D041                       		add.w	d1,d0
00008674 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008678                            
00008678                            Obj18_ChgMotion:
00008678 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000867E 4E75                       		rts	
00008680                            ; ===========================================================================
00008680                            
00008680                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008680 3028 0032                  		move.w	$32(a0),d0
00008684 0240 FF80                  		andi.w	#$FF80,d0
00008688 3238 F700                  		move.w	($FFFFF700).w,d1
0000868C 0441 0080                  		subi.w	#$80,d1
00008690 0241 FF80                  		andi.w	#$FF80,d1
00008694 9041                       		sub.w	d1,d0
00008696 0C40 0280                  		cmpi.w	#$280,d0
0000869A 6200                       		bhi.s	Obj18_Delete
0000869C 4E75                       		rts	
0000869E                            ; ===========================================================================
0000869E                            
0000869E                            Obj18_Delete:				; XREF: Obj18_Index
0000869E 6000 0000                  		bra.w	DeleteObject
000086A2                            ; ===========================================================================
000086A2                            ; ---------------------------------------------------------------------------
000086A2                            ; Sprite mappings - unused
000086A2                            ; ---------------------------------------------------------------------------
000086A2                            Map_obj18x:
000086A2                            	include "_maps\obj18x.asm"
000086A2                            ; ---------------------------------------------------------------------------
000086A2                            ; Sprite mappings - unused
000086A2                            ; ---------------------------------------------------------------------------
000086A2 0000                       		dc.w byte_80FE-Map_obj18x
000086A4 0000                       		dc.w byte_8109-Map_obj18x
000086A6 02                         byte_80FE:	dc.b 2
000086A7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000086AC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000086B1 0A                         byte_8109:	dc.b $A
000086B2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000086B7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000086BC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000086C1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000086C6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000086CB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000086D0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000086D5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000086DA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000086DF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000086E4                            		even
000086E4                            		even
000086E4                            
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - GHZ	platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            Map_obj18:
000086E4                            	include "_maps\obj18ghz.asm"
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - GHZ	platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4 0000                       		dc.w byte_8140-Map_obj18
000086E6 0000                       		dc.w byte_8155-Map_obj18
000086E8 04                         byte_8140:	dc.b 4
000086E9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000086EE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000086F3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000086F8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000086FD 0A                         byte_8155:	dc.b $A
000086FE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008703 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008708 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000870D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008712 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008717 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000871C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008721 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008726 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000872B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008730                            		even
00008730                            		even
00008730                            
00008730                            ; ---------------------------------------------------------------------------
00008730                            ; Sprite mappings - SYZ	platforms
00008730                            ; ---------------------------------------------------------------------------
00008730                            Map_obj18a:
00008730                            	include "_maps\obj18syz.asm"
00008730                            ; ---------------------------------------------------------------------------
00008730                            ; Sprite mappings - SYZ	platforms
00008730                            ; ---------------------------------------------------------------------------
00008730 0000                       		dc.w byte_818A-Map_obj18a
00008732 03                         byte_818A:	dc.b 3
00008733 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008738 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000873D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008742                            		even
00008742                            		even
00008742                            
00008742                            ; ---------------------------------------------------------------------------
00008742                            ; Sprite mappings - SLZ	platforms
00008742                            ; ---------------------------------------------------------------------------
00008742                            Map_obj18b:
00008742                            	include "_maps\obj18slz.asm"
00008742                            ; ---------------------------------------------------------------------------
00008742                            ; Sprite mappings - SLZ	platforms
00008742                            ; ---------------------------------------------------------------------------
00008742 0000                       		dc.w byte_819C-Map_obj18b
00008744 02                         byte_819C:	dc.b 2
00008745 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000874A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008750 00                         		even
00008750 00                         		even
00008750                            
00008750                            ; ===========================================================================
00008750                            ; ---------------------------------------------------------------------------
00008750                            ; Object 19 - Pearto bombs
00008750                            ; ---------------------------------------------------------------------------
00008750                            Obj19:					; XREF: Obj_Index
00008750 7000                       		moveq	#0,d0
00008752 1028 0024                  		move.b	$24(a0),d0
00008756 323B 0000                  		move.w	off_7070(pc,d0.w),d1
0000875A 4EFB 1000                  		jmp	off_7070(pc,d1.w)
0000875E                            ; ---------------------------------------------------------------------------
0000875E                            
0000875E 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008764                            ; ---------------------------------------------------------------------------
00008764                            
00008764                            loc_7076:
00008764 5428 0024                  		addq.b	#2,$24(a0)
00008768 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008770 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008776 117C 0004 0001             		move.b	#4,1(a0)
0000877C 117C 0003 0019             		move.b	#3,$19(a0)
00008782 117C 0087 0020             		move.b	#$87,$20(a0)
00008788 117C 0008 0018             		move.b	#8,$18(a0)
0000878E 317C 0018 0030             		move.w	#$18,$30(a0)
00008794                            
00008794                            loc_70A6:
00008794 0828 0007 0022             		btst	#7,$22(a0)
0000879A 6600                       		bne.s	loc_70C2
0000879C 4A68 0030                  		tst.w	$30(a0)
000087A0 6600                       		bne.s	loc_70D2
000087A2 4EB9 0000 0000             		jsr	ObjHitFloor
000087A8 4A41                       		tst.w	d1
000087AA 6A00                       		bpl.s	loc_70D6
000087AC D368 000C                  		add.w	d1,$C(a0)
000087B0                            
000087B0                            loc_70C2:
000087B0 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000087B4 117C 0000 0024             		move.b	#0,$24(a0)
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            
000087BA                            loc_70D2:
000087BA 5368 0030                  		subq.w	#1,$30(a0)
000087BE                            
000087BE                            loc_70D6:
000087BE 6100 0000                  		bsr.w	ObjectFall
000087C2 6100 0000                  		bsr.w	DisplaySprite
000087C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000087CA 0640 00E0                  		addi.w	#$E0,d0
000087CE B068 000C                  		cmp.w	$C(a0),d0
000087D2 6500                       		bcs.s	loc_70EE
000087D4 4E75                       		rts
000087D6                            ; ---------------------------------------------------------------------------
000087D6                            
000087D6                            loc_70EE:
000087D6 6100 0000                  		bsr.w	DeleteObject
000087DA 4E75                       		rts
000087DC                            		
000087DC                            Map_obj19:
000087DC                            	include "_maps\obj19.asm"
000087DC                            Map_02b4:
000087DC 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000087DE 01                         Map_02b4_2: 	dc.b $1
000087DF F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000087E4                            	even
000087E4                            	even
000087E4                            ; ===========================================================================
000087E4                            ; ---------------------------------------------------------------------------
000087E4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087E4                            ; ---------------------------------------------------------------------------
000087E4                            Map_obj48:
000087E4                            	include "_maps\obj48.asm"
000087E4                            ; ---------------------------------------------------------------------------
000087E4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087E4                            ; ---------------------------------------------------------------------------
000087E4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000087E8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000087EC 06                         byte_81B2:	dc.b 6
000087ED F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000087F2 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000087F7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000087FC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008801 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008806 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000880B 04                         byte_81D1:	dc.b 4
0000880C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008811 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008816 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000881B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008820 04                         byte_81E6:	dc.b 4
00008821 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008826 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000882B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008830 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008835 04                         byte_81FB:	dc.b 4
00008836 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000883B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008840 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008845 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000884A                            		even
0000884A                            		even
0000884A                            
0000884A                            ; ===========================================================================
0000884A                            ; ---------------------------------------------------------------------------
0000884A                            ; Object 1A - GHZ collapsing ledge
0000884A                            ; ---------------------------------------------------------------------------
0000884A                            
0000884A                            Obj1A:					; XREF: Obj_Index
0000884A 7000                       		moveq	#0,d0
0000884C 1028 0024                  		move.b	$24(a0),d0
00008850 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008854 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008858                            ; ===========================================================================
00008858 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000885C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008860 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008864                            ; ===========================================================================
00008864                            
00008864                            Obj1A_Main:				; XREF: Obj1A_Index
00008864 5428 0024                  		addq.b	#2,$24(a0)
00008868 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008870 317C 4000 0002             		move.w	#$4000,2(a0)
00008876 0028 0004 0001             		ori.b	#4,1(a0)
0000887C 117C 0004 0018             		move.b	#4,$18(a0)
00008882 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008888 117C 0064 0019             		move.b	#$64,$19(a0)
0000888E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008894 117C 0038 0016             		move.b	#$38,$16(a0)
0000889A 08E8 0004 0001             		bset	#4,1(a0)
000088A0                            
000088A0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000088A0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000088A4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000088A6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000088AA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000088AE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088B2                            
000088B2                            Obj1A_Slope:
000088B2 323C 0030                  		move.w	#$30,d1
000088B6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088BC 6100 F212                  		bsr.w	SlopeObject
000088C0 6000 0000                  		bra.w	MarkObjGone
000088C4                            ; ===========================================================================
000088C4                            
000088C4                            Obj1A_Touch:				; XREF: Obj1A_Index
000088C4 4A28 0038                  		tst.b	$38(a0)
000088C8 6700 0000                  		beq.w	loc_847A
000088CC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088D2 5328 0038                  		subq.b	#1,$38(a0)
000088D6                            
000088D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088D6                            
000088D6                            
000088D6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000088D6 323C 0030                  		move.w	#$30,d1
000088DA 6100 F294                  		bsr.w	ExitPlatform
000088DE 323C 0030                  		move.w	#$30,d1
000088E2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088E8 3428 0008                  		move.w	8(a0),d2
000088EC 6100 0000                  		bsr.w	SlopeObject2
000088F0 6000 0000                  		bra.w	MarkObjGone
000088F4                            ; End of function Obj1A_WalkOff
000088F4                            
000088F4                            ; ===========================================================================
000088F4                            
000088F4                            Obj1A_Display:				; XREF: Obj1A_Index
000088F4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088F8 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000088FA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088FE 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008902 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008906 6000 0000                  		bra.w	DisplaySprite
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            loc_82D0:				; XREF: Obj1A_Display
0000890A 5328 0038                  		subq.b	#1,$38(a0)
0000890E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008912 43F8 D000                  		lea	($FFFFD000).w,a1
00008916 0829 0003 0022             		btst	#3,$22(a1)
0000891C 6700                       		beq.s	loc_82FC
0000891E 4A28 0038                  		tst.b	$38(a0)
00008922 6600                       		bne.s	locret_8308
00008924 08A9 0003 0022             		bclr	#3,$22(a1)
0000892A 08A9 0005 0022             		bclr	#5,$22(a1)
00008930 137C 0001 001D             		move.b	#1,$1D(a1)
00008936                            
00008936                            loc_82FC:
00008936 117C 0000 003A             		move.b	#0,$3A(a0)
0000893C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008942                            
00008942                            locret_8308:
00008942 4E75                       		rts	
00008944                            ; ===========================================================================
00008944                            
00008944                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008944 6100 0000                  		bsr.w	ObjectFall
00008948 6100 0000                  		bsr.w	DisplaySprite
0000894C 4A28 0001                  		tst.b	1(a0)
00008950 6A00                       		bpl.s	Obj1A_Delete
00008952 4E75                       		rts	
00008954                            ; ===========================================================================
00008954                            
00008954                            Obj1A_Delete:				; XREF: Obj1A_Index
00008954 6100 0000                  		bsr.w	DeleteObject
00008958 4E75                       		rts	
0000895A                            ; ===========================================================================
0000895A                            ; ---------------------------------------------------------------------------
0000895A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000895A                            ; ---------------------------------------------------------------------------
0000895A                            
0000895A                            Obj53:					; XREF: Obj_Index
0000895A 7000                       		moveq	#0,d0
0000895C 1028 0024                  		move.b	$24(a0),d0
00008960 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008964 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008968                            ; ===========================================================================
00008968 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000896C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008970 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008974                            ; ===========================================================================
00008974                            
00008974                            Obj53_Main:				; XREF: Obj53_Index
00008974 5428 0024                  		addq.b	#2,$24(a0)
00008978 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008980 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008986 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000898C 6600                       		bne.s	Obj53_NotSLZ
0000898E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008994 5428 001A                  		addq.b	#2,$1A(a0)
00008998                            
00008998                            Obj53_NotSLZ:
00008998 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000899E 6600                       		bne.s	Obj53_NotSBZ
000089A0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000089A6                            
000089A6                            Obj53_NotSBZ:
000089A6 0028 0004 0001             		ori.b	#4,1(a0)
000089AC 117C 0004 0018             		move.b	#4,$18(a0)
000089B2 117C 0007 0038             		move.b	#7,$38(a0)
000089B8 117C 0044 0019             		move.b	#$44,$19(a0)
000089BE                            
000089BE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000089BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000089C2 6700                       		beq.s	Obj53_Solid	; if not, branch
000089C4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000089C8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000089CC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089D0                            
000089D0                            Obj53_Solid:
000089D0 323C 0020                  		move.w	#$20,d1
000089D4 6100 F026                  		bsr.w	PlatformObject
000089D8 4A28 0028                  		tst.b	$28(a0)
000089DC 6A00                       		bpl.s	Obj53_MarkAsGone
000089DE 0829 0003 0022             		btst	#3,$22(a1)
000089E4 6700                       		beq.s	Obj53_MarkAsGone
000089E6 08A8 0000 0001             		bclr	#0,1(a0)
000089EC 3029 0008                  		move.w	8(a1),d0
000089F0 9068 0008                  		sub.w	8(a0),d0
000089F4 6400                       		bcc.s	Obj53_MarkAsGone
000089F6 08E8 0000 0001             		bset	#0,1(a0)
000089FC                            
000089FC                            Obj53_MarkAsGone:
000089FC 6000 0000                  		bra.w	MarkObjGone
00008A00                            ; ===========================================================================
00008A00                            
00008A00                            Obj53_Touch:				; XREF: Obj53_Index
00008A00 4A28 0038                  		tst.b	$38(a0)
00008A04 6700 0000                  		beq.w	loc_8458
00008A08 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A0E 5328 0038                  		subq.b	#1,$38(a0)
00008A12                            
00008A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A12                            
00008A12                            
00008A12                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A12 323C 0020                  		move.w	#$20,d1
00008A16 6100 F158                  		bsr.w	ExitPlatform
00008A1A 3428 0008                  		move.w	8(a0),d2
00008A1E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A22 6000 0000                  		bra.w	MarkObjGone
00008A26                            ; End of function Obj53_WalkOff
00008A26                            
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            Obj53_Display:				; XREF: Obj53_Index
00008A26 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A2A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008A2C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A30 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A34 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A38 6000 0000                  		bra.w	DisplaySprite
00008A3C                            ; ===========================================================================
00008A3C                            
00008A3C                            loc_8402:
00008A3C 5328 0038                  		subq.b	#1,$38(a0)
00008A40 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008A44 43F8 D000                  		lea	($FFFFD000).w,a1
00008A48 0829 0003 0022             		btst	#3,$22(a1)
00008A4E 6700                       		beq.s	loc_842E
00008A50 4A28 0038                  		tst.b	$38(a0)
00008A54 6600                       		bne.s	locret_843A
00008A56 08A9 0003 0022             		bclr	#3,$22(a1)
00008A5C 08A9 0005 0022             		bclr	#5,$22(a1)
00008A62 137C 0001 001D             		move.b	#1,$1D(a1)
00008A68                            
00008A68                            loc_842E:
00008A68 117C 0000 003A             		move.b	#0,$3A(a0)
00008A6E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008A74                            
00008A74                            locret_843A:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Obj53_TimeZero:				; XREF: Obj53_Display
00008A76 6100 0000                  		bsr.w	ObjectFall
00008A7A 6100 0000                  		bsr.w	DisplaySprite
00008A7E 4A28 0001                  		tst.b	1(a0)
00008A82 6A00                       		bpl.s	Obj53_Delete
00008A84 4E75                       		rts	
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            Obj53_Delete:				; XREF: Obj53_Index
00008A86 6100 0000                  		bsr.w	DeleteObject
00008A8A 4E75                       		rts	
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008A8C 117C 0000 003A             		move.b	#0,$3A(a0)
00008A92                            
00008A92                            loc_8458:				; XREF: Obj53_Touch
00008A92 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008A98 0828 0000 0028             		btst	#0,$28(a0)
00008A9E 6700                       		beq.s	loc_846C
00008AA0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008AA6                            
00008AA6                            loc_846C:
00008AA6 7207                       		moveq	#7,d1
00008AA8 5228 001A                  		addq.b	#1,$1A(a0)
00008AAC 6000                       		bra.s	loc_8486
00008AAE                            ; ===========================================================================
00008AAE                            
00008AAE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008AAE 117C 0000 003A             		move.b	#0,$3A(a0)
00008AB4                            
00008AB4                            loc_847A:				; XREF: Obj1A_Touch
00008AB4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008ABA 7218                       		moveq	#$18,d1
00008ABC 5428 001A                  		addq.b	#2,$1A(a0)
00008AC0                            
00008AC0                            loc_8486:				; XREF: Obj53_Collapse
00008AC0 7000                       		moveq	#0,d0
00008AC2 1028 001A                  		move.b	$1A(a0),d0
00008AC6 D040                       		add.w	d0,d0
00008AC8 2668 0004                  		movea.l	4(a0),a3
00008ACC D6F3 0000                  		adda.w	(a3,d0.w),a3
00008AD0 524B                       		addq.w	#1,a3
00008AD2 08E8 0005 0001             		bset	#5,1(a0)
00008AD8 1810                       		move.b	0(a0),d4
00008ADA 1A28 0001                  		move.b	1(a0),d5
00008ADE 2248                       		movea.l	a0,a1
00008AE0 6000                       		bra.s	loc_84B2
00008AE2                            ; ===========================================================================
00008AE2                            
00008AE2                            loc_84AA:
00008AE2 6100 0000                  		bsr.w	SingleObjLoad
00008AE6 6600                       		bne.s	loc_84F2
00008AE8 5A4B                       		addq.w	#5,a3
00008AEA                            
00008AEA                            loc_84B2:
00008AEA 137C 0006 0024             		move.b	#6,$24(a1)
00008AF0 1284                       		move.b	d4,0(a1)
00008AF2 234B 0004                  		move.l	a3,4(a1)
00008AF6 1345 0001                  		move.b	d5,1(a1)
00008AFA 3368 0008 0008             		move.w	8(a0),8(a1)
00008B00 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B06 3368 0002 0002             		move.w	2(a0),2(a1)
00008B0C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B12 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B18 135C 0038                  		move.b	(a4)+,$38(a1)
00008B1C B3C8                       		cmpa.l	a0,a1
00008B1E 6400                       		bcc.s	loc_84EE
00008B20 6100 0000                  		bsr.w	DisplaySprite2
00008B24                            
00008B24                            loc_84EE:
00008B24 51C9 FFBC                  		dbf	d1,loc_84AA
00008B28                            
00008B28                            loc_84F2:
00008B28 6100 0000                  		bsr.w	DisplaySprite
00008B2C 303C 00B9                  		move.w	#$B9,d0
00008B30 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008B36                            ; ===========================================================================
00008B36                            ; ---------------------------------------------------------------------------
00008B36                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B36                            ; ---------------------------------------------------------------------------
00008B36 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B46 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008B50 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008B58 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008B60                            
00008B60                            ; ---------------------------------------------------------------------------
00008B60                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008B60                            ; ---------------------------------------------------------------------------
00008B60                            
00008B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B60                            
00008B60                            
00008B60                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008B60 43F8 D000                  		lea	($FFFFD000).w,a1
00008B64 0829 0003 0022             		btst	#3,$22(a1)
00008B6A 6700                       		beq.s	locret_856E
00008B6C 3029 0008                  		move.w	8(a1),d0
00008B70 9068 0008                  		sub.w	8(a0),d0
00008B74 D041                       		add.w	d1,d0
00008B76 E248                       		lsr.w	#1,d0
00008B78 0828 0000 0001             		btst	#0,1(a0)
00008B7E 6700                       		beq.s	loc_854E
00008B80 4640                       		not.w	d0
00008B82 D041                       		add.w	d1,d0
00008B84                            
00008B84                            loc_854E:
00008B84 7200                       		moveq	#0,d1
00008B86 1232 0000                  		move.b	(a2,d0.w),d1
00008B8A 3028 000C                  		move.w	$C(a0),d0
00008B8E 9041                       		sub.w	d1,d0
00008B90 7200                       		moveq	#0,d1
00008B92 1229 0016                  		move.b	$16(a1),d1
00008B96 9041                       		sub.w	d1,d0
00008B98 3340 000C                  		move.w	d0,$C(a1)
00008B9C 9468 0008                  		sub.w	8(a0),d2
00008BA0 9569 0008                  		sub.w	d2,8(a1)
00008BA4                            
00008BA4                            locret_856E:
00008BA4 4E75                       		rts	
00008BA6                            ; End of function SlopeObject2
00008BA6                            
00008BA6                            ; ===========================================================================
00008BA6                            ; ---------------------------------------------------------------------------
00008BA6                            ; Collision data for GHZ collapsing ledge
00008BA6                            ; ---------------------------------------------------------------------------
00008BA6                            Obj1A_SlopeData:
00008BA6                            		incbin	misc\ghzledge.bin
00008BD6                            		even
00008BD6                            
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            ; Sprite mappings - GHZ	collapsing ledge
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            Map_obj1A:
00008BD6                            	include "_maps\obj1A.asm"
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            ; Sprite mappings - GHZ	collapsing ledge
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008BDA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008BDE 10                         byte_85A8:	dc.b $10
00008BDF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008BE4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008BE9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008BEE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008BF3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BF8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008BFD F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C02 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C07 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C0C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C11 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C16 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C1B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C20 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C25 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C2A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C2F 10                         byte_85F9:	dc.b $10
00008C30 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C35 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C3A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C3F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C44 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C49 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C4E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C53 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C58 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C5D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008C62 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C67 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C6C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C71 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C76 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C7B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C80 19                         byte_864A:	dc.b $19
00008C81 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008C86 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008C8B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008C90 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C95 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C9A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C9F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008CA4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008CA9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CAE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008CB3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008CB8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008CBD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008CC2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008CC7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CCC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CD1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008CD6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008CDB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CE0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008CE5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008CEA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CEF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008CF4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008CF9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CFE 19                         byte_86C8:	dc.b $19
00008CFF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D04 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D09 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D0E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D13 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D18 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D1D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D22 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D27 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D2C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D31 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D36 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D3B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D40 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D45 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D4A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D4F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D54 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D59 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D5E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D63 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D68 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D6D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D72 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D77 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D7C                            		even
00008D7C                            		even
00008D7C                            
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C                            Map_obj53:
00008D7C                            	include "_maps\obj53.asm"
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008D80 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008D84 04                         byte_874E:	dc.b 4
00008D85 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008D8A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008D8F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008D94 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008D99 08                         byte_8763:	dc.b 8
00008D9A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008D9F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008DA4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DA9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008DAE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008DB3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008DB8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008DBD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008DC2 04                         byte_878C:	dc.b 4
00008DC3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008DC8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008DCD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DD2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008DD7 08                         byte_87A1:	dc.b 8
00008DD8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DDD F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008DE2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DE7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008DEC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008DF1 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008DF6 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008DFB 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E00                            		even
00008E00                            		even
00008E00                            
00008E00                            ; ===========================================================================
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            
00008E00                            Obj1C:					; XREF: Obj_Index
00008E00 7000                       		moveq	#0,d0
00008E02 1028 0024                  		move.b	$24(a0),d0
00008E06 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E0A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E0E                            ; ===========================================================================
00008E0E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E10 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            Obj1C_Main:				; XREF: Obj1C_Index
00008E12 5428 0024                  		addq.b	#2,$24(a0)
00008E16 7000                       		moveq	#0,d0
00008E18 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E1C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E20 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E24 2159 0004                  		move.l	(a1)+,4(a0)
00008E28 3159 0002                  		move.w	(a1)+,2(a0)
00008E2C 0028 0004 0001             		ori.b	#4,1(a0)
00008E32 1159 001A                  		move.b	(a1)+,$1A(a0)
00008E36 1159 0019                  		move.b	(a1)+,$19(a0)
00008E3A 1159 0018                  		move.b	(a1)+,$18(a0)
00008E3E 1159 0020                  		move.b	(a1)+,$20(a0)
00008E42                            
00008E42                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008E42 3028 0008                  		move.w	8(a0),d0
00008E46 0240 FF80                  		andi.w	#$FF80,d0
00008E4A 3238 F700                  		move.w	($FFFFF700).w,d1
00008E4E 0441 0080                  		subi.w	#$80,d1
00008E52 0241 FF80                  		andi.w	#$FF80,d1
00008E56 9041                       		sub.w	d1,d0
00008E58 0C40 0280                  		cmpi.w	#$280,d0
00008E5C 6200 0000                  		bhi.w	DeleteObject
00008E60 6000 0000                  		bra.w	DisplaySprite
00008E64                            ; ===========================================================================
00008E64                            ; ---------------------------------------------------------------------------
00008E64                            ; Variables for	object $1C are stored in an array
00008E64                            ; ---------------------------------------------------------------------------
00008E64 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008E68 44D8                       		dc.w $44D8		; VRAM setting
00008E6A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008E6E 0000 0000                  		dc.l Map_obj1C
00008E72 44D8                       		dc.w $44D8
00008E74 0008 0200                  		dc.b 0,	8, 2, 0
00008E78 0000 0000                  		dc.l Map_obj1C
00008E7C 44D8                       		dc.w $44D8
00008E7E 0008 0200                  		dc.b 0,	8, 2, 0
00008E82 0000 7EE4                  		dc.l Map_obj11
00008E86 438E                       		dc.w $438E
00008E88 0110 0100                  		dc.b 1,	$10, 1,	0
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            ; Sprite mappings - SLZ	lava thrower
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            Map_obj1C:
00008E8C                            	include "_maps\obj1C.asm"
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            ; Sprite mappings - SLZ	lava thrower
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C 0000                       		dc.w byte_8858-Map_obj1C
00008E8E 01                         byte_8858:	dc.b 1
00008E8F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008E94                            		even
00008E94                            		even
00008E94                            
00008E94                            ; ===========================================================================
00008E94                            ; ---------------------------------------------------------------------------
00008E94                            ; Object 1D - switch that activates when Sonic touches it
00008E94                            ; (this	is not used anywhere in	the game)
00008E94                            ; ---------------------------------------------------------------------------
00008E94                            
00008E94                            Obj1D:					; XREF: Obj_Index
00008E94 7000                       		moveq	#0,d0
00008E96 1028 0024                  		move.b	$24(a0),d0
00008E9A 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008E9E 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008EA2                            ; ===========================================================================
00008EA2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008EA4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008EA6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008EA8                            ; ===========================================================================
00008EA8                            
00008EA8                            Obj1D_Main:				; XREF: Obj1D_Index
00008EA8 5428 0024                  		addq.b	#2,$24(a0)
00008EAC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008EB4 317C 4000 0002             		move.w	#$4000,2(a0)
00008EBA 117C 0004 0001             		move.b	#4,1(a0)
00008EC0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008EC6 117C 0010 0019             		move.b	#$10,$19(a0)
00008ECC 117C 0005 0018             		move.b	#5,$18(a0)
00008ED2                            
00008ED2                            Obj1D_Action:				; XREF: Obj1D_Index
00008ED2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008ED8 323C 0010                  		move.w	#$10,d1
00008EDC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008EE0 6700                       		beq.s	Obj1D_ChkDel
00008EE2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008EE6 7001                       		moveq	#1,d0
00008EE8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008EEC                            
00008EEC                            Obj1D_ChkDel:
00008EEC 6100 0000                  		bsr.w	DisplaySprite
00008EF0 3028 0008                  		move.w	8(a0),d0
00008EF4 0240 FF80                  		andi.w	#$FF80,d0
00008EF8 3238 F700                  		move.w	($FFFFF700).w,d1
00008EFC 0441 0080                  		subi.w	#$80,d1
00008F00 0241 FF80                  		andi.w	#$FF80,d1
00008F04 9041                       		sub.w	d1,d0
00008F06 0C40 0280                  		cmpi.w	#$280,d0
00008F0A 6200 0000                  		bhi.w	Obj1D_Delete
00008F0E 4E75                       		rts	
00008F10                            ; ===========================================================================
00008F10                            
00008F10                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F10 6100 0000                  		bsr.w	DeleteObject
00008F14 4E75                       		rts	
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            ; Subroutine to	check if Sonic touches the object
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            
00008F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F16                            
00008F16                            
00008F16                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F16 43F8 D000                  		lea	($FFFFD000).w,a1
00008F1A 3029 0008                  		move.w	8(a1),d0
00008F1E 9068 0008                  		sub.w	8(a0),d0
00008F22 D041                       		add.w	d1,d0
00008F24 6B00                       		bmi.s	loc_8918
00008F26 D241                       		add.w	d1,d1
00008F28 B041                       		cmp.w	d1,d0
00008F2A 6400                       		bcc.s	loc_8918
00008F2C 3429 000C                  		move.w	$C(a1),d2
00008F30 1229 0016                  		move.b	$16(a1),d1
00008F34 4881                       		ext.w	d1
00008F36 D242                       		add.w	d2,d1
00008F38 3028 000C                  		move.w	$C(a0),d0
00008F3C 0440 0010                  		subi.w	#$10,d0
00008F40 9041                       		sub.w	d1,d0
00008F42 6200                       		bhi.s	loc_8918
00008F44 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F48 6500                       		bcs.s	loc_8918
00008F4A 70FF                       		moveq	#-1,d0
00008F4C 4E75                       		rts	
00008F4E                            ; ===========================================================================
00008F4E                            
00008F4E                            loc_8918:
00008F4E 7000                       		moveq	#0,d0
00008F50 4E75                       		rts	
00008F52                            ; End of function Obj1D_ChkTouch
00008F52                            
00008F52                            ; ===========================================================================
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            ; Sprite mappings - object 1D
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            Map_obj1D:
00008F52                            	include "_maps\obj1D.asm"
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            ; Sprite mappings - object 1D
00008F52                            ; ---------------------------------------------------------------------------
00008F52 0000                       		dc.w byte_891E-Map_obj1D
00008F54 04                         byte_891E:	dc.b 4
00008F55 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008F5A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008F5F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008F64 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008F6A 00                         		even
00008F6A 00                         		even
00008F6A                            
00008F6A                            ; ===========================================================================
00008F6A                            ; ---------------------------------------------------------------------------
00008F6A                            ; Object 2A - doors (SBZ)
00008F6A                            ; ---------------------------------------------------------------------------
00008F6A                            
00008F6A                            Obj2A:					; XREF: Obj_Index
00008F6A 7000                       		moveq	#0,d0
00008F6C 1028 0024                  		move.b	$24(a0),d0
00008F70 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008F74 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008F78                            ; ===========================================================================
00008F78 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008F7A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008F7C                            ; ===========================================================================
00008F7C                            
00008F7C                            Obj2A_Main:				; XREF: Obj2A_Index
00008F7C 5428 0024                  		addq.b	#2,$24(a0)
00008F80 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008F88 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008F8E 0028 0004 0001             		ori.b	#4,1(a0)
00008F94 117C 0008 0019             		move.b	#8,$19(a0)
00008F9A 117C 0004 0018             		move.b	#4,$18(a0)
00008FA0                            
00008FA0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008FA0 323C 0040                  		move.w	#$40,d1
00008FA4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008FA8 3038 D008                  		move.w	($FFFFD008).w,d0
00008FAC D041                       		add.w	d1,d0
00008FAE B068 0008                  		cmp.w	8(a0),d0
00008FB2 6500                       		bcs.s	Obj2A_Animate
00008FB4 9041                       		sub.w	d1,d0
00008FB6 9041                       		sub.w	d1,d0
00008FB8 B068 0008                  		cmp.w	8(a0),d0
00008FBC 6400                       		bcc.s	Obj2A_Animate
00008FBE D041                       		add.w	d1,d0
00008FC0 B068 0008                  		cmp.w	8(a0),d0
00008FC4 6400                       		bcc.s	loc_899A
00008FC6 0828 0000 0022             		btst	#0,$22(a0)
00008FCC 6600                       		bne.s	Obj2A_Animate
00008FCE 6000                       		bra.s	Obj2A_Open
00008FD0                            ; ===========================================================================
00008FD0                            
00008FD0                            loc_899A:				; XREF: Obj2A_OpenShut
00008FD0 0828 0000 0022             		btst	#0,$22(a0)
00008FD6 6700                       		beq.s	Obj2A_Animate
00008FD8                            
00008FD8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008FD8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008FDE                            
00008FDE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008FDE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008FE4 6100 0000                  		bsr.w	AnimateSprite
00008FE8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008FEC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008FEE 323C 0011                  		move.w	#$11,d1
00008FF2 343C 0020                  		move.w	#$20,d2
00008FF6 3602                       		move.w	d2,d3
00008FF8 5243                       		addq.w	#1,d3
00008FFA 3828 0008                  		move.w	8(a0),d4
00008FFE 6100 0000                  		bsr.w	SolidObject
00009002                            
00009002                            Obj2A_MarkAsUsed:
00009002 6000 0000                  		bra.w	MarkObjGone
00009006                            ; ===========================================================================
00009006                            Ani_obj2A:
00009006                            	include "_anim\obj2A.asm"
00009006                            ; ---------------------------------------------------------------------------
00009006                            ; Animation script - doors (SBZ)
00009006                            ; ---------------------------------------------------------------------------
00009006 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009008 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000900A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009016 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009022                            		even
00009022                            		even
00009022                            
00009022                            ; ---------------------------------------------------------------------------
00009022                            ; Sprite mappings - doors (SBZ)
00009022                            ; ---------------------------------------------------------------------------
00009022                            Map_obj2A:
00009022                            	include "_maps\obj2A.asm"
00009022                            ; ---------------------------------------------------------------------------
00009022                            ; Sprite mappings - doors (SBZ)
00009022                            ; ---------------------------------------------------------------------------
00009022 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009026 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000902A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000902E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009032 0000                       		dc.w byte_8A56-Map_obj2A
00009034 02                         byte_89FE:	dc.b 2
00009035 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000903A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000903F 02                         byte_8A09:	dc.b 2
00009040 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009045 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000904A 02                         byte_8A14:	dc.b 2
0000904B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009050 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009055 02                         byte_8A1F:	dc.b 2
00009056 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000905B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009060 02                         byte_8A2A:	dc.b 2
00009061 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009066 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000906B 02                         byte_8A35:	dc.b 2
0000906C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009071 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009076 02                         byte_8A40:	dc.b 2
00009077 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000907C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009081 02                         byte_8A4B:	dc.b 2
00009082 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009087 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000908C 02                         byte_8A56:	dc.b 2
0000908D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009092 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009098 00                         		even
00009098 00                         		even
00009098                            
00009098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009098                            
00009098                            
00009098                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009098 6100 0000                  		bsr.w	Obj44_SolidWall2
0000909C 6700                       		beq.s	loc_8AA8
0000909E 6B00 0000                  		bmi.w	loc_8AC4
000090A2 4A40                       		tst.w	d0
000090A4 6700 0000                  		beq.w	loc_8A92
000090A8 6B00                       		bmi.s	loc_8A7C
000090AA 4A69 0010                  		tst.w	$10(a1)
000090AE 6B00                       		bmi.s	loc_8A92
000090B0 6000                       		bra.s	loc_8A82
000090B2                            ; ===========================================================================
000090B2                            
000090B2                            loc_8A7C:
000090B2 4A69 0010                  		tst.w	$10(a1)
000090B6 6A00                       		bpl.s	loc_8A92
000090B8                            
000090B8                            loc_8A82:
000090B8 9169 0008                  		sub.w	d0,8(a1)
000090BC 337C 0000 0014             		move.w	#0,$14(a1)
000090C2 337C 0000 0010             		move.w	#0,$10(a1)
000090C8                            
000090C8                            loc_8A92:
000090C8 0829 0001 0022             		btst	#1,$22(a1)
000090CE 6600                       		bne.s	loc_8AB6
000090D0 08E9 0005 0022             		bset	#5,$22(a1)
000090D6 08E8 0005 0022             		bset	#5,$22(a0)
000090DC 4E75                       		rts	
000090DE                            ; ===========================================================================
000090DE                            
000090DE                            loc_8AA8:
000090DE 0828 0005 0022             		btst	#5,$22(a0)
000090E4 6700                       		beq.s	locret_8AC2
000090E6 337C 0001 001C             		move.w	#1,$1C(a1)
000090EC                            
000090EC                            loc_8AB6:
000090EC 08A8 0005 0022             		bclr	#5,$22(a0)
000090F2 08A9 0005 0022             		bclr	#5,$22(a1)
000090F8                            
000090F8                            locret_8AC2:
000090F8 4E75                       		rts	
000090FA                            ; ===========================================================================
000090FA                            
000090FA                            loc_8AC4:
000090FA 4A69 0012                  		tst.w	$12(a1)
000090FE 6A00                       		bpl.s	locret_8AD8
00009100 4A43                       		tst.w	d3
00009102 6A00                       		bpl.s	locret_8AD8
00009104 9769 000C                  		sub.w	d3,$C(a1)
00009108 337C 0000 0012             		move.w	#0,$12(a1)
0000910E                            
0000910E                            locret_8AD8:
0000910E 4E75                       		rts	
00009110                            ; End of function Obj44_SolidWall
00009110                            
00009110                            
00009110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009110                            
00009110                            
00009110                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009110 43F8 D000                  		lea	($FFFFD000).w,a1
00009114 3029 0008                  		move.w	8(a1),d0
00009118 9068 0008                  		sub.w	8(a0),d0
0000911C D041                       		add.w	d1,d0
0000911E 6B00                       		bmi.s	loc_8B48
00009120 3601                       		move.w	d1,d3
00009122 D643                       		add.w	d3,d3
00009124 B043                       		cmp.w	d3,d0
00009126 6200                       		bhi.s	loc_8B48
00009128 1629 0016                  		move.b	$16(a1),d3
0000912C 4883                       		ext.w	d3
0000912E D443                       		add.w	d3,d2
00009130 3629 000C                  		move.w	$C(a1),d3
00009134 9668 000C                  		sub.w	$C(a0),d3
00009138 D642                       		add.w	d2,d3
0000913A 6B00                       		bmi.s	loc_8B48
0000913C 3802                       		move.w	d2,d4
0000913E D844                       		add.w	d4,d4
00009140 B644                       		cmp.w	d4,d3
00009142 6400                       		bcc.s	loc_8B48
00009144 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009148 6B00                       		bmi.s	loc_8B48
0000914A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009150 6400                       		bcc.s	loc_8B48
00009152 4A78 FE08                  		tst.w	($FFFFFE08).w
00009156 6600                       		bne.s	loc_8B48
00009158 3A00                       		move.w	d0,d5
0000915A B240                       		cmp.w	d0,d1
0000915C 6400                       		bcc.s	loc_8B30
0000915E D241                       		add.w	d1,d1
00009160 9041                       		sub.w	d1,d0
00009162 3A00                       		move.w	d0,d5
00009164 4445                       		neg.w	d5
00009166                            
00009166                            loc_8B30:
00009166 3203                       		move.w	d3,d1
00009168 B443                       		cmp.w	d3,d2
0000916A 6400                       		bcc.s	loc_8B3C
0000916C 9644                       		sub.w	d4,d3
0000916E 3203                       		move.w	d3,d1
00009170 4441                       		neg.w	d1
00009172                            
00009172                            loc_8B3C:
00009172 BA41                       		cmp.w	d1,d5
00009174 6200                       		bhi.s	loc_8B44
00009176 7801                       		moveq	#1,d4
00009178 4E75                       		rts	
0000917A                            ; ===========================================================================
0000917A                            
0000917A                            loc_8B44:
0000917A 78FF                       		moveq	#-1,d4
0000917C 4E75                       		rts	
0000917E                            ; ===========================================================================
0000917E                            
0000917E                            loc_8B48:
0000917E 7800                       		moveq	#0,d4
00009180 4E75                       		rts	
00009182                            ; End of function Obj44_SolidWall2
00009182                            
00009182                            ; ===========================================================================
00009182                            ; ---------------------------------------------------------------------------
00009182                            ; Object 1E - Ball Hog enemy (SBZ)
00009182                            ; ---------------------------------------------------------------------------
00009182                            
00009182                            Obj1E:					; XREF: Obj_Index
00009182 7000                       		moveq	#0,d0
00009184 1028 0024                  		move.b	$24(a0),d0
00009188 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000918C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009190                            ; ===========================================================================
00009190 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009192 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009194                            ; ===========================================================================
00009194                            
00009194                            Obj1E_Main:				; XREF: Obj1E_Index
00009194 117C 0013 0016             		move.b	#$13,$16(a0)
0000919A 117C 0008 0017             		move.b	#8,$17(a0)
000091A0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000091A8 317C 2302 0002             		move.w	#$2302,2(a0)
000091AE 117C 0004 0001             		move.b	#4,1(a0)
000091B4 117C 0004 0018             		move.b	#4,$18(a0)
000091BA 117C 0005 0020             		move.b	#5,$20(a0)
000091C0 117C 000C 0019             		move.b	#$C,$19(a0)
000091C6 6100 0000                  		bsr.w	ObjectFall
000091CA 4EB9 0000 0000             		jsr	ObjHitFloor
000091D0 4A41                       		tst.w	d1
000091D2 6A00                       		bpl.s	locret_8BAC
000091D4 D368 000C                  		add.w	d1,$C(a0)
000091D8 317C 0000 0012             		move.w	#0,$12(a0)
000091DE 5428 0024                  		addq.b	#2,$24(a0)
000091E2                            
000091E2                            locret_8BAC:
000091E2 4E75                       		rts	
000091E4                            ; ===========================================================================
000091E4                            
000091E4                            Obj1E_Action:				; XREF: Obj1E_Index
000091E4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000091EA 6100 0000                  		bsr.w	AnimateSprite
000091EE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000091F4 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000091F6 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000091FA 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000091FC 6000                       		bra.s	Obj1E_MarkAsGone
000091FE                            ; ===========================================================================
000091FE                            
000091FE                            Obj1E_SetBall:				; XREF: Obj1E_Action
000091FE 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009202                            
00009202                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009202 6000 0000                  		bra.w	MarkObjGone
00009206                            ; ===========================================================================
00009206                            
00009206                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009206 117C 0001 0032             		move.b	#1,$32(a0)
0000920C 6100 0000                  		bsr.w	SingleObjLoad
00009210 6600                       		bne.s	loc_8C1A
00009212 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009216 3368 0008 0008             		move.w	8(a0),8(a1)
0000921C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009222 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009228 337C 0000 0012             		move.w	#0,$12(a1)
0000922E 70FC                       		moveq	#-4,d0
00009230 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009236 6700                       		beq.s	loc_8C0A	; if not, branch
00009238 4440                       		neg.w	d0
0000923A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000923E                            
0000923E                            loc_8C0A:
0000923E D169 0008                  		add.w	d0,8(a1)
00009242 0669 000C 000C             		addi.w	#$C,$C(a1)
00009248 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000924E                            
0000924E                            loc_8C1A:
0000924E 60B2                       		bra.s	Obj1E_MarkAsGone
00009250                            ; ===========================================================================
00009250                            ; ---------------------------------------------------------------------------
00009250                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009250                            ; ---------------------------------------------------------------------------
00009250                            
00009250                            Obj20:					; XREF: Obj_Index
00009250 7000                       		moveq	#0,d0
00009252 1028 0024                  		move.b	$24(a0),d0
00009256 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000925A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000925E                            ; ===========================================================================
0000925E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009260 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009262                            ; ===========================================================================
00009262                            
00009262                            Obj20_Main:				; XREF: Obj20_Index
00009262 5428 0024                  		addq.b	#2,$24(a0)
00009266 117C 0007 0016             		move.b	#7,$16(a0)
0000926C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009274 317C 2302 0002             		move.w	#$2302,2(a0)
0000927A 117C 0004 0001             		move.b	#4,1(a0)
00009280 117C 0003 0018             		move.b	#3,$18(a0)
00009286 117C 0087 0020             		move.b	#$87,$20(a0)
0000928C 117C 0008 0019             		move.b	#8,$19(a0)
00009292 7000                       		moveq	#0,d0
00009294 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009298 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000929C 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000092A0 117C 0004 001A             		move.b	#4,$1A(a0)
000092A6                            
000092A6                            Obj20_Bounce:				; XREF: Obj20_Index
000092A6 4EB9 0000 0000             		jsr	ObjectFall
000092AC 4A68 0012                  		tst.w	$12(a0)
000092B0 6B00                       		bmi.s	Obj20_ChkExplode
000092B2 4EB9 0000 0000             		jsr	ObjHitFloor
000092B8 4A41                       		tst.w	d1
000092BA 6A00                       		bpl.s	Obj20_ChkExplode
000092BC D368 000C                  		add.w	d1,$C(a0)
000092C0 317C FD00 0012             		move.w	#-$300,$12(a0)
000092C6 4A03                       		tst.b	d3
000092C8 6700                       		beq.s	Obj20_ChkExplode
000092CA 6B00                       		bmi.s	loc_8CA4
000092CC 4A68 0010                  		tst.w	$10(a0)
000092D0 6A00                       		bpl.s	Obj20_ChkExplode
000092D2 4468 0010                  		neg.w	$10(a0)
000092D6 6000                       		bra.s	Obj20_ChkExplode
000092D8                            ; ===========================================================================
000092D8                            
000092D8                            loc_8CA4:				; XREF: Obj20_Bounce
000092D8 4A68 0010                  		tst.w	$10(a0)
000092DC 6B00                       		bmi.s	Obj20_ChkExplode
000092DE 4468 0010                  		neg.w	$10(a0)
000092E2                            
000092E2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000092E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000092E6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000092E8 10BC 0024                  		move.b	#$24,0(a0)
000092EC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000092F0 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000092F6 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000092FA                            ; ===========================================================================
000092FA                            
000092FA                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000092FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092FE 6A00                       		bpl.s	Obj20_Display
00009300 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009306 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000930C                            
0000930C                            Obj20_Display:
0000930C 6100 0000                  		bsr.w	DisplaySprite
00009310 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009314 0640 00E0                  		addi.w	#$E0,d0
00009318 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000931C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009320 4E75                       		rts	
00009322                            ; ===========================================================================
00009322                            ; ---------------------------------------------------------------------------
00009322                            ; Object 24 - explosion	from a destroyed monitor
00009322                            ; ---------------------------------------------------------------------------
00009322                            
00009322                            Obj24:					; XREF: Obj_Index
00009322 7000                       		moveq	#0,d0
00009324 1028 0024                  		move.b	$24(a0),d0
00009328 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000932C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009330                            ; ===========================================================================
00009330 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009332 0000                       		dc.w Obj24_Animate-Obj24_Index
00009334                            ; ===========================================================================
00009334                            
00009334                            Obj24_Main:				; XREF: Obj24_Index
00009334 5428 0024                  		addq.b	#2,$24(a0)
00009338 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009340 317C 041C 0002             		move.w	#$41C,2(a0)
00009346 117C 0004 0001             		move.b	#4,1(a0)
0000934C 117C 0001 0018             		move.b	#1,$18(a0)
00009352 117C 0000 0020             		move.b	#0,$20(a0)
00009358 117C 000C 0019             		move.b	#$C,$19(a0)
0000935E 117C 0009 001E             		move.b	#9,$1E(a0)
00009364 117C 0000 001A             		move.b	#0,$1A(a0)
0000936A 303C 00A5                  		move.w	#$A5,d0
0000936E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009374                            
00009374                            Obj24_Animate:				; XREF: Obj24_Index
00009374 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009378 6A00                       		bpl.s	Obj24_Display
0000937A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009380 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009384 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000938A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000938E                            
0000938E                            Obj24_Display:
0000938E 6000 0000                  		bra.w	DisplaySprite
00009392                            ; ===========================================================================
00009392                            ; ---------------------------------------------------------------------------
00009392                            ; Object 27 - explosion	from a destroyed enemy
00009392                            ; ---------------------------------------------------------------------------
00009392                            
00009392                            Obj27:					; XREF: Obj_Index
00009392 7000                       		moveq	#0,d0
00009394 1028 0024                  		move.b	$24(a0),d0
00009398 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000939C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000093A0                            ; ===========================================================================
000093A0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000093A2 0000                       		dc.w Obj27_Main-Obj27_Index
000093A4 0000                       		dc.w Obj27_Animate-Obj27_Index
000093A6                            ; ===========================================================================
000093A6                            
000093A6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000093A6 5428 0024                  		addq.b	#2,$24(a0)
000093AA 6100 0000                  		bsr.w	SingleObjLoad
000093AE 6600                       		bne.s	Obj27_Main
000093B0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000093B4 3368 0008 0008             		move.w	8(a0),8(a1)
000093BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000093C0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000093C6                            
000093C6                            Obj27_Main:				; XREF: Obj27_Index
000093C6 5428 0024                  		addq.b	#2,$24(a0)
000093CA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000093D2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000093D8 117C 0004 0001             		move.b	#4,1(a0)
000093DE 117C 0001 0018             		move.b	#1,$18(a0)
000093E4 117C 0000 0020             		move.b	#0,$20(a0)
000093EA 117C 000C 0019             		move.b	#$C,$19(a0)
000093F0                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000093F0 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000093F6 117C 0000 001A             		move.b	#0,$1A(a0)
000093FC 303C 00C1                  		move.w	#$C1,d0
00009400 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009406                            
00009406 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000940C 1028 0028                  		move.b	$28(a0),d0
00009410 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009416 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000941C                            
0000941C                            Obj27_Animate:				; XREF: Obj27_Index
0000941C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009420 6A00                       		bpl.s	Obj27_Display
00009422                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009422 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009428 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000942C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009432 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009436                            
00009436                            Obj27_Display:
00009436 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000943C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009442 6000 0000                  		bra.w	DisplaySprite
00009446                            ; ===========================================================================
00009446                            ; ---------------------------------------------------------------------------
00009446                            Obj27_ExplosionXYSpd:
00009446                            		; dc.w	-$350, -$300	; Left
00009446                            		; dc.w	-$200, -$450	; Near middle (left)
00009446                            		; dc.w	0, -$500	; Middle
00009446                            		; dc.w	$200, -$450	; Near middle (right)
00009446                            		; dc.w	$350, -$300	; Right
00009446                            
00009446 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000944A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000944E 0000 FA00                  		dc.w	0, -$600	; Middle
00009452 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009456 0150 FC00                  		dc.w	$150, -$400	; Right
0000945A                            
0000945A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009474                            ; ---------------------------------------------------------------------------
00009474                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009474                            ; ---------------------------------------------------------------------------
00009474                            
00009474                            Obj3F:					; XREF: Obj_Index
00009474 7000                       		moveq	#0,d0
00009476 1028 0024                  		move.b	$24(a0),d0
0000947A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000947E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009482                            ; ===========================================================================
00009482 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009484 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009486                            ; ===========================================================================
00009486                            
00009486                            Obj3F_Main:				; XREF: Obj3F_Index
00009486 5428 0024                  		addq.b	#2,$24(a0)
0000948A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009492 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009498 117C 0004 0001             		move.b	#4,1(a0)
0000949E 117C 0001 0018             		move.b	#1,$18(a0)
000094A4 117C 0000 0020             		move.b	#0,$20(a0)
000094AA 117C 000C 0019             		move.b	#$C,$19(a0)
000094B0 117C 0007 001E             		move.b	#7,$1E(a0)
000094B6 117C 0000 001A             		move.b	#0,$1A(a0)
000094BC 303C 00C4                  		move.w	#$C4,d0
000094C0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000094C6                            ; ===========================================================================
000094C6                            Ani_obj1E:
000094C6                            	include "_anim\obj1E.asm"
000094C6                            ; ---------------------------------------------------------------------------
000094C6                            ; Animation script - doors (SBZ)
000094C6                            ; ---------------------------------------------------------------------------
000094C6 0000                       		dc.w byte_8E4A-Ani_obj1E
000094C8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000094E0 00                         		even
000094E0 00                         		even
000094E0                            
000094E0                            ; ---------------------------------------------------------------------------
000094E0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094E0                            ; ---------------------------------------------------------------------------
000094E0                            Map_obj1E:
000094E0                            	include "_maps\obj1E.asm"
000094E0                            ; ---------------------------------------------------------------------------
000094E0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094E0                            ; ---------------------------------------------------------------------------
000094E0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000094E4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000094E8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000094EC 02                         byte_8E6E:	dc.b 2
000094ED EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094F2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000094F7 02                         byte_8E79:	dc.b 2
000094F8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094FD FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009502 02                         byte_8E84:	dc.b 2
00009503 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009508 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000950D 02                         byte_8E8F:	dc.b 2
0000950E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009513 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009518 01                         byte_8E9A:	dc.b 1
00009519 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000951E 01                         byte_8EA0:	dc.b 1
0000951F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009524                            		even
00009524                            		even
00009524                            
00009524                            ; ---------------------------------------------------------------------------
00009524                            ; Sprite mappings - explosion
00009524                            ; ---------------------------------------------------------------------------
00009524                            Map_obj24:
00009524                            	include "_maps\obj24.asm"
00009524                            ; ---------------------------------------------------------------------------
00009524                            ; Sprite mappings - explosion
00009524                            ; ---------------------------------------------------------------------------
00009524 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009528 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000952C 01                         byte_8EAE:	dc.b 1
0000952D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009532 01                         byte_8EB4:	dc.b 1
00009533 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009538 01                         byte_8EBA:	dc.b 1
00009539 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000953E 01                         byte_8EC0:	dc.b 1
0000953F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009544                            		even
00009544                            		even
00009544                            
00009544                            ; ---------------------------------------------------------------------------
00009544                            ; Sprite mappings - explosion
00009544                            ; ---------------------------------------------------------------------------
00009544 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009548 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000954C 0000                       		dc.w byte_8EF7-Map_obj27
0000954E 01                         byte_8ED0:	dc.b 1
0000954F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009554 01                         byte_8ED6:	dc.b 1
00009555 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000955A 01                         byte_8EDC:	dc.b 1
0000955B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009560 04                         byte_8EE2:	dc.b 4
00009561 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009566 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000956B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009570 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009575 04                         byte_8EF7:	dc.b 4
00009576 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000957B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009580 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009585 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000958A                            		even
0000958A                            ; ---------------------------------------------------------------------------
0000958A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000958A                            ; ---------------------------------------------------------------------------
0000958A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000958C 0000                       		dc.w byte_8F16-Map_obj3F
0000958E 0000                       		dc.w byte_8F1C-Map_obj3F
00009590 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009592 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009594 01                         byte_8F16:	dc.b 1
00009595 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000959A 01                         byte_8F1C:	dc.b 1
0000959B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000095A0                            		even
000095A0                            ; ===========================================================================
000095A0                            ; ---------------------------------------------------------------------------
000095A0                            ; Object 28 - animals
000095A0                            ; ---------------------------------------------------------------------------
000095A0                            
000095A0                            Obj28:					; XREF: Obj_Index
000095A0 7000                       		moveq	#0,d0
000095A2 1028 0024                  		move.b	$24(a0),d0
000095A6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000095AA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000095AE                            ; ===========================================================================
000095AE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000095B2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095B6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000095BA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095BE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000095C2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000095C6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000095CA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095CE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095D2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000095D6 0000                       		dc.w loc_92D6-Obj28_Index
000095D8                            
000095D8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000095E4                            
000095E4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000095E8 0000 0000                  		dc.l Map_obj28
000095EC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000095F0 0000 0000                  		dc.l Map_obj28a		; mappings address
000095F4 FE80 FD00                  		dc.w $FE80, $FD00
000095F8 0000 0000                  		dc.l Map_obj28
000095FC FEC0 FE80                  		dc.w $FEC0, $FE80
00009600 0000 0000                  		dc.l Map_obj28a
00009604 FE40 FD00                  		dc.w $FE40, $FD00
00009608 0000 0000                  		dc.l Map_obj28b
0000960C FD00 FC00                  		dc.w $FD00, $FC00
00009610 0000 0000                  		dc.l Map_obj28a
00009614 FD80 FC80                  		dc.w $FD80, $FC80
00009618 0000 0000                  		dc.l Map_obj28b
0000961C                            
0000961C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000962C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000963C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009648                            
00009648 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000965C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009670 0000 0000                  		dc.l Map_obj28b
00009674                            
00009674 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009686 0565 05B3                  		dc.w $565, $5B3
0000968A                            ; ===========================================================================
0000968A                            
0000968A                            Obj28_Ending:				; XREF: Obj28_Index
0000968A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000968E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009692 7000                       		moveq	#0,d0
00009694 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009698 D040                       		add.w	d0,d0		; multiply d0 by 2
0000969A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000969E 0440 0014                  		subi.w	#$14,d0
000096A2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000096A8 D040                       		add.w	d0,d0
000096AA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000096B0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000096B4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000096BA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000096C0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000096C6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000096CC 117C 000C 0016             		move.b	#$C,$16(a0)
000096D2 117C 0004 0001             		move.b	#4,1(a0)
000096D8 08E8 0000 0001             		bset	#0,1(a0)
000096DE 117C 0006 0018             		move.b	#6,$18(a0)
000096E4 117C 0008 0019             		move.b	#8,$19(a0)
000096EA 117C 0007 001E             		move.b	#7,$1E(a0)
000096F0 6000 0000                  		bra.w	DisplaySprite
000096F4                            ; ===========================================================================
000096F4                            
000096F4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000096F4 5428 0024                  		addq.b	#2,$24(a0)
000096F8 6100 9544                  		bsr.w	RandomNumber
000096FC 0240 0001                  		andi.w	#1,d0
00009700 7200                       		moveq	#0,d1
00009702 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009706 D241                       		add.w	d1,d1
00009708 D240                       		add.w	d0,d1
0000970A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000970E 1031 1000                  		move.b	(a1,d1.w),d0
00009712 1140 0030                  		move.b	d0,$30(a0)
00009716 E748                       		lsl.w	#3,d0
00009718 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000971C D2C0                       		adda.w	d0,a1
0000971E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009722 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009726 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000972A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009730 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009736 6700                       		beq.s	loc_90C0	; if yes, branch
00009738 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000973E                            
0000973E                            loc_90C0:
0000973E 117C 000C 0016             		move.b	#$C,$16(a0)
00009744 117C 0004 0001             		move.b	#4,1(a0)
0000974A 08E8 0000 0001             		bset	#0,1(a0)
00009750 117C 0006 0018             		move.b	#6,$18(a0)
00009756 117C 0008 0019             		move.b	#8,$19(a0)
0000975C 117C 0007 001E             		move.b	#7,$1E(a0)
00009762 117C 0002 001A             		move.b	#2,$1A(a0)
00009768 317C FC00 0012             		move.w	#-$400,$12(a0)
0000976E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009772 6600                       		bne.s	loc_911C
00009774 6100 0000                  		bsr.w	SingleObjLoad
00009778 6600                       		bne.s	Obj28_Display
0000977A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000977E 3368 0008 0008             		move.w	8(a0),8(a1)
00009784 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000978A 3028 003E                  		move.w	$3E(a0),d0
0000978E E248                       		lsr.w	#1,d0
00009790 1340 001A                  		move.b	d0,$1A(a1)
00009794                            
00009794                            Obj28_Display:
00009794 6000 0000                  		bra.w	DisplaySprite
00009798                            ; ===========================================================================
00009798                            
00009798                            loc_911C:
00009798 117C 0012 0024             		move.b	#$12,$24(a0)
0000979E 4268 0010                  		clr.w	$10(a0)
000097A2 6000 0000                  		bra.w	DisplaySprite
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            loc_912A:				; XREF: Obj28_Index
000097A6 4A28 0001                  		tst.b	1(a0)
000097AA 6A00 0000                  		bpl.w	DeleteObject
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 4A68 0012                  		tst.w	$12(a0)
000097B6 6B00                       		bmi.s	loc_9180
000097B8 4EB9 0000 0000             		jsr	ObjHitFloor
000097BE 4A41                       		tst.w	d1
000097C0 6A00                       		bpl.s	loc_9180
000097C2 D368 000C                  		add.w	d1,$C(a0)
000097C6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097D2 117C 0001 001A             		move.b	#1,$1A(a0)
000097D8 1028 0030                  		move.b	$30(a0),d0
000097DC D000                       		add.b	d0,d0
000097DE 5800                       		addq.b	#4,d0
000097E0 1140 0024                  		move.b	d0,$24(a0)
000097E4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097E8 6700                       		beq.s	loc_9180
000097EA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000097F0 6700                       		beq.s	loc_9180
000097F2 4468 0010                  		neg.w	$10(a0)
000097F6 0868 0000 0001             		bchg	#0,1(a0)
000097FC                            
000097FC                            loc_9180:
000097FC 6000 0000                  		bra.w	DisplaySprite
00009800                            ; ===========================================================================
00009800                            
00009800                            loc_9184:				; XREF: Obj28_Index
00009800 6100 0000                  		bsr.w	ObjectFall
00009804 117C 0001 001A             		move.b	#1,$1A(a0)
0000980A 4A68 0012                  		tst.w	$12(a0)
0000980E 6B00                       		bmi.s	loc_91AE
00009810 117C 0000 001A             		move.b	#0,$1A(a0)
00009816 4EB9 0000 0000             		jsr	ObjHitFloor
0000981C 4A41                       		tst.w	d1
0000981E 6A00                       		bpl.s	loc_91AE
00009820 D368 000C                  		add.w	d1,$C(a0)
00009824 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000982A                            
0000982A                            loc_91AE:
0000982A 4A28 0028                  		tst.b	$28(a0)
0000982E 6600                       		bne.s	loc_9224
00009830 4A28 0001                  		tst.b	1(a0)
00009834 6A00 0000                  		bpl.w	DeleteObject
00009838 6000 0000                  		bra.w	DisplaySprite
0000983C                            ; ===========================================================================
0000983C                            
0000983C                            loc_91C0:				; XREF: Obj28_Index
0000983C 6100 0000                  		bsr.w	SpeedToPos
00009840 0668 0018 0012             		addi.w	#$18,$12(a0)
00009846 4A68 0012                  		tst.w	$12(a0)
0000984A 6B00                       		bmi.s	loc_91FC
0000984C 4EB9 0000 0000             		jsr	ObjHitFloor
00009852 4A41                       		tst.w	d1
00009854 6A00                       		bpl.s	loc_91FC
00009856 D368 000C                  		add.w	d1,$C(a0)
0000985A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009860 4A28 0028                  		tst.b	$28(a0)
00009864 6700                       		beq.s	loc_91FC
00009866 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000986C 6700                       		beq.s	loc_91FC
0000986E 4468 0010                  		neg.w	$10(a0)
00009872 0868 0000 0001             		bchg	#0,1(a0)
00009878                            
00009878                            loc_91FC:
00009878 5328 001E                  		subq.b	#1,$1E(a0)
0000987C 6A00                       		bpl.s	loc_9212
0000987E 117C 0001 001E             		move.b	#1,$1E(a0)
00009884 5228 001A                  		addq.b	#1,$1A(a0)
00009888 0228 0001 001A             		andi.b	#1,$1A(a0)
0000988E                            
0000988E                            loc_9212:
0000988E 4A28 0028                  		tst.b	$28(a0)
00009892 6600                       		bne.s	loc_9224
00009894 4A28 0001                  		tst.b	1(a0)
00009898 6A00 0000                  		bpl.w	DeleteObject
0000989C 6000 0000                  		bra.w	DisplaySprite
000098A0                            ; ===========================================================================
000098A0                            
000098A0                            loc_9224:				; XREF: Obj28_Index
000098A0 3028 0008                  		move.w	8(a0),d0
000098A4 9078 D008                  		sub.w	($FFFFD008).w,d0
000098A8 6500                       		bcs.s	loc_923C
000098AA 0440 0180                  		subi.w	#$180,d0
000098AE 6A00                       		bpl.s	loc_923C
000098B0 4A28 0001                  		tst.b	1(a0)
000098B4 6A00 0000                  		bpl.w	DeleteObject
000098B8                            
000098B8                            loc_923C:
000098B8 6000 0000                  		bra.w	DisplaySprite
000098BC                            ; ===========================================================================
000098BC                            
000098BC                            loc_9240:				; XREF: Obj28_Index
000098BC 4A28 0001                  		tst.b	1(a0)
000098C0 6A00 0000                  		bpl.w	DeleteObject
000098C4 5368 0036                  		subq.w	#1,$36(a0)
000098C8 6600 0000                  		bne.w	loc_925C
000098CC 117C 0002 0024             		move.b	#2,$24(a0)
000098D2 117C 0003 0018             		move.b	#3,$18(a0)
000098D8                            
000098D8                            loc_925C:
000098D8 6000 0000                  		bra.w	DisplaySprite
000098DC                            ; ===========================================================================
000098DC                            
000098DC                            loc_9260:				; XREF: Obj28_Index
000098DC 6100 0000                  		bsr.w	sub_9404
000098E0 6400                       		bcc.s	loc_927C
000098E2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098E8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098EE 117C 000E 0024             		move.b	#$E,$24(a0)
000098F4 6000 FF46                  		bra.w	loc_91C0
000098F8                            ; ===========================================================================
000098F8                            
000098F8                            loc_927C:
000098F8 6000 FFA6                  		bra.w	loc_9224
000098FC                            ; ===========================================================================
000098FC                            
000098FC                            loc_9280:				; XREF: Obj28_Index
000098FC 6100 0000                  		bsr.w	sub_9404
00009900 6A00                       		bpl.s	loc_92B6
00009902 4268 0010                  		clr.w	$10(a0)
00009906 4268 0032                  		clr.w	$32(a0)
0000990A 6100 0000                  		bsr.w	SpeedToPos
0000990E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009914 6100 0000                  		bsr.w	loc_93C4
00009918 6100 0000                  		bsr.w	loc_93EC
0000991C 5328 001E                  		subq.b	#1,$1E(a0)
00009920 6A00                       		bpl.s	loc_92B6
00009922 117C 0001 001E             		move.b	#1,$1E(a0)
00009928 5228 001A                  		addq.b	#1,$1A(a0)
0000992C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009932                            
00009932                            loc_92B6:
00009932 6000 FF6C                  		bra.w	loc_9224
00009936                            ; ===========================================================================
00009936                            
00009936                            loc_92BA:				; XREF: Obj28_Index
00009936 6100 0000                  		bsr.w	sub_9404
0000993A 6A00                       		bpl.s	loc_9310
0000993C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009942 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009948 117C 0004 0024             		move.b	#4,$24(a0)
0000994E 6000 FEB0                  		bra.w	loc_9184
00009952                            ; ===========================================================================
00009952                            
00009952                            loc_92D6:				; XREF: Obj28_Index
00009952 6100 0000                  		bsr.w	ObjectFall
00009956 117C 0001 001A             		move.b	#1,$1A(a0)
0000995C 4A68 0012                  		tst.w	$12(a0)
00009960 6B00                       		bmi.s	loc_9310
00009962 117C 0000 001A             		move.b	#0,$1A(a0)
00009968 4EB9 0000 0000             		jsr	ObjHitFloor
0000996E 4A41                       		tst.w	d1
00009970 6A00                       		bpl.s	loc_9310
00009972 4628 0029                  		not.b	$29(a0)
00009976 6600                       		bne.s	loc_9306
00009978 4468 0010                  		neg.w	$10(a0)
0000997C 0868 0000 0001             		bchg	#0,1(a0)
00009982                            
00009982                            loc_9306:
00009982 D368 000C                  		add.w	d1,$C(a0)
00009986 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000998C                            
0000998C                            loc_9310:
0000998C 6000 FF12                  		bra.w	loc_9224
00009990                            ; ===========================================================================
00009990                            
00009990                            loc_9314:				; XREF: Obj28_Index
00009990 6100 0000                  		bsr.w	sub_9404
00009994 6A00                       		bpl.s	loc_932E
00009996 4268 0010                  		clr.w	$10(a0)
0000999A 4268 0032                  		clr.w	$32(a0)
0000999E 6100 0000                  		bsr.w	ObjectFall
000099A2 6100 0000                  		bsr.w	loc_93C4
000099A6 6100 0000                  		bsr.w	loc_93EC
000099AA                            
000099AA                            loc_932E:
000099AA 6000 FEF4                  		bra.w	loc_9224
000099AE                            ; ===========================================================================
000099AE                            
000099AE                            loc_9332:				; XREF: Obj28_Index
000099AE 6100 0000                  		bsr.w	sub_9404
000099B2 6A00                       		bpl.s	loc_936C
000099B4 6100 0000                  		bsr.w	ObjectFall
000099B8 117C 0001 001A             		move.b	#1,$1A(a0)
000099BE 4A68 0012                  		tst.w	$12(a0)
000099C2 6B00                       		bmi.s	loc_936C
000099C4 117C 0000 001A             		move.b	#0,$1A(a0)
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	loc_936C
000099D4 4468 0010                  		neg.w	$10(a0)
000099D8 0868 0000 0001             		bchg	#0,1(a0)
000099DE D368 000C                  		add.w	d1,$C(a0)
000099E2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099E8                            
000099E8                            loc_936C:
000099E8 6000 FEB6                  		bra.w	loc_9224
000099EC                            ; ===========================================================================
000099EC                            
000099EC                            loc_9370:				; XREF: Obj28_Index
000099EC 6100 0000                  		bsr.w	sub_9404
000099F0 6A00                       		bpl.s	loc_93C0
000099F2 6100 0000                  		bsr.w	SpeedToPos
000099F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000099FC 4A68 0012                  		tst.w	$12(a0)
00009A00 6B00                       		bmi.s	loc_93AA
00009A02 4EB9 0000 0000             		jsr	ObjHitFloor
00009A08 4A41                       		tst.w	d1
00009A0A 6A00                       		bpl.s	loc_93AA
00009A0C 4628 0029                  		not.b	$29(a0)
00009A10 6600                       		bne.s	loc_93A0
00009A12 4468 0010                  		neg.w	$10(a0)
00009A16 0868 0000 0001             		bchg	#0,1(a0)
00009A1C                            
00009A1C                            loc_93A0:
00009A1C D368 000C                  		add.w	d1,$C(a0)
00009A20 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A26                            
00009A26                            loc_93AA:
00009A26 5328 001E                  		subq.b	#1,$1E(a0)
00009A2A 6A00                       		bpl.s	loc_93C0
00009A2C 117C 0001 001E             		move.b	#1,$1E(a0)
00009A32 5228 001A                  		addq.b	#1,$1A(a0)
00009A36 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A3C                            
00009A3C                            loc_93C0:
00009A3C 6000 FE62                  		bra.w	loc_9224
00009A40                            ; ===========================================================================
00009A40                            
00009A40                            loc_93C4:
00009A40 117C 0001 001A             		move.b	#1,$1A(a0)
00009A46 4A68 0012                  		tst.w	$12(a0)
00009A4A 6B00                       		bmi.s	locret_93EA
00009A4C 117C 0000 001A             		move.b	#0,$1A(a0)
00009A52 4EB9 0000 0000             		jsr	ObjHitFloor
00009A58 4A41                       		tst.w	d1
00009A5A 6A00                       		bpl.s	locret_93EA
00009A5C D368 000C                  		add.w	d1,$C(a0)
00009A60 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A66                            
00009A66                            locret_93EA:
00009A66 4E75                       		rts	
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            loc_93EC:
00009A68 08E8 0000 0001             		bset	#0,1(a0)
00009A6E 3028 0008                  		move.w	8(a0),d0
00009A72 9078 D008                  		sub.w	($FFFFD008).w,d0
00009A76 6400                       		bcc.s	locret_9402
00009A78 08A8 0000 0001             		bclr	#0,1(a0)
00009A7E                            
00009A7E                            locret_9402:
00009A7E 4E75                       		rts	
00009A80                            
00009A80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A80                            
00009A80                            
00009A80                            sub_9404:
00009A80 3038 D008                  		move.w	($FFFFD008).w,d0
00009A84 9068 0008                  		sub.w	8(a0),d0
00009A88 0440 00B8                  		subi.w	#$B8,d0
00009A8C 4E75                       		rts	
00009A8E                            ; End of function sub_9404
00009A8E                            
00009A8E                            ; ===========================================================================
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            ; Object 29 - points that appear when you destroy something
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            
00009A8E                            Obj29:					; XREF: Obj_Index
00009A8E 7000                       		moveq	#0,d0
00009A90 1028 0024                  		move.b	$24(a0),d0
00009A94 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009A98 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009A9C 6000 0000                  		bra.w	DisplaySprite
00009AA0                            ; ===========================================================================
00009AA0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009AA2 0000                       		dc.w Obj29_Slower-Obj29_Index
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            Obj29_Main:				; XREF: Obj29_Index
00009AA4 5428 0024                  		addq.b	#2,$24(a0)
00009AA8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009AB0 317C 2797 0002             		move.w	#$2797,2(a0)
00009AB6 117C 0004 0001             		move.b	#4,1(a0)
00009ABC 117C 0001 0018             		move.b	#1,$18(a0)
00009AC2 117C 0008 0019             		move.b	#8,$19(a0)
00009AC8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009ACE                            
00009ACE                            Obj29_Slower:				; XREF: Obj29_Index
00009ACE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009AD2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009AD6 6100 0000                  		bsr.w	SpeedToPos
00009ADA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009AE0 4E75                       		rts	
00009AE2                            ; ===========================================================================
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Sprite mappings - animals
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            Map_obj28:
00009AE2                            	include "_maps\obj28.asm"
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Sprite mappings - animals
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2 0000                       		dc.w byte_9472-Map_obj28
00009AE4 0000                       		dc.w byte_9478-Map_obj28
00009AE6 0000                       		dc.w byte_946C-Map_obj28
00009AE8 01                         byte_946C:	dc.b 1
00009AE9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009AEE 01                         byte_9472:	dc.b 1
00009AEF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009AF4 01                         byte_9478:	dc.b 1
00009AF5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009AFA                            		even
00009AFA                            		even
00009AFA                            
00009AFA                            Map_obj28a:
00009AFA                            	include "_maps\obj28a.asm"
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA                            ; Sprite mappings - animals
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA 0000                       		dc.w byte_948A-Map_obj28a
00009AFC 0000                       		dc.w byte_9490-Map_obj28a
00009AFE 0000                       		dc.w byte_9484-Map_obj28a
00009B00 01                         byte_9484:	dc.b 1
00009B01 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B06 01                         byte_948A:	dc.b 1
00009B07 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B0C 01                         byte_9490:	dc.b 1
00009B0D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B12                            		even
00009B12                            		even
00009B12                            
00009B12                            Map_obj28b:
00009B12                            	include "_maps\obj28b.asm"
00009B12                            ; ---------------------------------------------------------------------------
00009B12                            ; Sprite mappings - animals
00009B12                            ; ---------------------------------------------------------------------------
00009B12 0000                       		dc.w byte_94A2-Map_obj28b
00009B14 0000                       		dc.w byte_94A8-Map_obj28b
00009B16 0000                       		dc.w byte_949C-Map_obj28b
00009B18 01                         byte_949C:	dc.b 1
00009B19 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B1E 01                         byte_94A2:	dc.b 1
00009B1F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B24 01                         byte_94A8:	dc.b 1
00009B25 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B2A                            		even
00009B2A                            		even
00009B2A                            
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            Map_obj29:
00009B2A                            	include "_maps\obj29.asm"
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009B2E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009B32 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009B36 0000                       		dc.w byte_94E5-Map_obj29
00009B38 01                         byte_94BC:	dc.b 1
00009B39 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B3E 01                         byte_94C2:	dc.b 1
00009B3F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B44 01                         byte_94C8:	dc.b 1
00009B45 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009B4A 01                         byte_94CE:	dc.b 1
00009B4B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009B50 01                         byte_94D4:	dc.b 1
00009B51 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009B56 02                         byte_94DA:	dc.b 2
00009B57 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009B5C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009B61 02                         byte_94E5:	dc.b 2
00009B62 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009B67 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009B6C                            		even
00009B6C                            		even
00009B6C                            
00009B6C                            ; ===========================================================================
00009B6C                            ; ---------------------------------------------------------------------------
00009B6C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009B6C                            ; ---------------------------------------------------------------------------
00009B6C                            
00009B6C                            Obj1F:					; XREF: Obj_Index
00009B6C 7000                       		moveq	#0,d0
00009B6E 1028 0024                  		move.b	$24(a0),d0
00009B72 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009B76 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009B7A                            ; ===========================================================================
00009B7A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009B7C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009B7E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009B80 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009B82 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009B84                            ; ===========================================================================
00009B84                            
00009B84                            Obj1F_Main:				; XREF: Obj1F_Index
00009B84 117C 0010 0016             		move.b	#$10,$16(a0)
00009B8A 117C 0008 0017             		move.b	#8,$17(a0)
00009B90 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B98 317C 0400 0002             		move.w	#$400,2(a0)
00009B9E 117C 0004 0001             		move.b	#4,1(a0)
00009BA4 117C 0003 0018             		move.b	#3,$18(a0)
00009BAA 117C 0006 0020             		move.b	#6,$20(a0)
00009BB0 117C 0015 0019             		move.b	#$15,$19(a0)
00009BB6 6100 0000                  		bsr.w	ObjectFall
00009BBA 4EB9 0000 0000             		jsr	ObjHitFloor
00009BC0 4A41                       		tst.w	d1
00009BC2 6A00                       		bpl.s	locret_955A
00009BC4 D368 000C                  		add.w	d1,$C(a0)
00009BC8 1143 0026                  		move.b	d3,$26(a0)
00009BCC 317C 0000 0012             		move.w	#0,$12(a0)
00009BD2 5428 0024                  		addq.b	#2,$24(a0)
00009BD6                            
00009BD6                            locret_955A:
00009BD6 4E75                       		rts	
00009BD8                            ; ===========================================================================
00009BD8                            
00009BD8                            Obj1F_Action:				; XREF: Obj1F_Index
00009BD8 7000                       		moveq	#0,d0
00009BDA 1028 0025                  		move.b	$25(a0),d0
00009BDE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009BE2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009BE6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009BEC 6100 0000                  		bsr.w	AnimateSprite
00009BF0 6000 0000                  		bra.w	MarkObjGone
00009BF4                            ; ===========================================================================
00009BF4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009BF6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009BF8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009BFC 6A00                       		bpl.s	locret_95B6
00009BFE 4A28 0001                  		tst.b	1(a0)
00009C02 6A00                       		bpl.s	Obj1F_Move
00009C04 0868 0001 0032             		bchg	#1,$32(a0)
00009C0A 6600                       		bne.s	Obj1F_MakeFire
00009C0C                            
00009C0C                            Obj1F_Move:
00009C0C 5428 0025                  		addq.b	#2,$25(a0)
00009C10 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C16 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009C1C 6100 0000                  		bsr.w	Obj1F_SetAni
00009C20 5600                       		addq.b	#3,d0
00009C22 1140 001C                  		move.b	d0,$1C(a0)
00009C26 0868 0000 0022             		bchg	#0,$22(a0)
00009C2C 6600                       		bne.s	locret_95B6
00009C2E 4468 0010                  		neg.w	$10(a0)		; change direction
00009C32                            
00009C32                            locret_95B6:
00009C32 4E75                       		rts	
00009C34                            ; ===========================================================================
00009C34                            
00009C34                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009C34 317C 003B 0030             		move.w	#$3B,$30(a0)
00009C3A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009C40 6100 0000                  		bsr.w	SingleObjLoad
00009C44 6600                       		bne.s	Obj1F_MakeFire2
00009C46 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009C4A 137C 0006 0024             		move.b	#6,$24(a1)
00009C50 3368 0008 0008             		move.w	8(a0),8(a1)
00009C56 0469 0010 0008             		subi.w	#$10,8(a1)
00009C5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C62 337C FF00 0010             		move.w	#-$100,$10(a1)
00009C68                            
00009C68                            Obj1F_MakeFire2:
00009C68 6100 0000                  		bsr.w	SingleObjLoad
00009C6C 6600                       		bne.s	locret_9618
00009C6E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009C72 137C 0006 0024             		move.b	#6,$24(a1)
00009C78 3368 0008 0008             		move.w	8(a0),8(a1)
00009C7E 0669 0010 0008             		addi.w	#$10,8(a1)
00009C84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C8A 337C 0100 0010             		move.w	#$100,$10(a1)
00009C90                            
00009C90                            locret_9618:
00009C90 4E75                       		rts	
00009C92                            ; ===========================================================================
00009C92                            
00009C92                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009C92 5368 0030                  		subq.w	#1,$30(a0)
00009C96 6B00                       		bmi.s	loc_966E
00009C98 6100 0000                  		bsr.w	SpeedToPos
00009C9C 0868 0000 0032             		bchg	#0,$32(a0)
00009CA2 6600                       		bne.s	loc_9654
00009CA4 3628 0008                  		move.w	8(a0),d3
00009CA8 0643 0010                  		addi.w	#$10,d3
00009CAC 0828 0000 0022             		btst	#0,$22(a0)
00009CB2 6700                       		beq.s	loc_9640
00009CB4 0443 0020                  		subi.w	#$20,d3
00009CB8                            
00009CB8                            loc_9640:
00009CB8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009CBE 0C41 FFF8                  		cmpi.w	#-8,d1
00009CC2 6D00                       		blt.s	loc_966E
00009CC4 0C41 000C                  		cmpi.w	#$C,d1
00009CC8 6C00                       		bge.s	loc_966E
00009CCA 4E75                       		rts	
00009CCC                            ; ===========================================================================
00009CCC                            
00009CCC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009CCC 4EB9 0000 0000             		jsr	ObjHitFloor
00009CD2 D368 000C                  		add.w	d1,$C(a0)
00009CD6 1143 0026                  		move.b	d3,$26(a0)
00009CDA 6100 0000                  		bsr.w	Obj1F_SetAni
00009CDE 5600                       		addq.b	#3,d0
00009CE0 1140 001C                  		move.b	d0,$1C(a0)
00009CE4 4E75                       		rts	
00009CE6                            ; ===========================================================================
00009CE6                            
00009CE6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009CE6 5528 0025                  		subq.b	#2,$25(a0)
00009CEA 317C 003B 0030             		move.w	#59,$30(a0)
00009CF0 317C 0000 0010             		move.w	#0,$10(a0)
00009CF6 6100 0000                  		bsr.w	Obj1F_SetAni
00009CFA 1140 001C                  		move.b	d0,$1C(a0)
00009CFE 4E75                       		rts	
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            
00009D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D00                            
00009D00                            
00009D00                            Obj1F_SetAni:				; XREF: loc_966E
00009D00 7000                       		moveq	#0,d0
00009D02 1628 0026                  		move.b	$26(a0),d3
00009D06 6B00                       		bmi.s	loc_96A4
00009D08 0C03 0006                  		cmpi.b	#6,d3
00009D0C 6500                       		bcs.s	locret_96A2
00009D0E 7001                       		moveq	#1,d0
00009D10 0828 0000 0022             		btst	#0,$22(a0)
00009D16 6600                       		bne.s	locret_96A2
00009D18 7002                       		moveq	#2,d0
00009D1A                            
00009D1A                            locret_96A2:
00009D1A 4E75                       		rts	
00009D1C                            ; ===========================================================================
00009D1C                            
00009D1C                            loc_96A4:				; XREF: Obj1F_SetAni
00009D1C 0C03 00FA                  		cmpi.b	#-6,d3
00009D20 6200                       		bhi.s	locret_96B6
00009D22 7002                       		moveq	#2,d0
00009D24 0828 0000 0022             		btst	#0,$22(a0)
00009D2A 6600                       		bne.s	locret_96B6
00009D2C 7001                       		moveq	#1,d0
00009D2E                            
00009D2E                            locret_96B6:
00009D2E 4E75                       		rts	
00009D30                            ; End of function Obj1F_SetAni
00009D30                            
00009D30                            ; ===========================================================================
00009D30                            
00009D30                            Obj1F_Delete:				; XREF: Obj1F_Index
00009D30 6100 0000                  		bsr.w	DeleteObject
00009D34 4E75                       		rts	
00009D36                            ; ===========================================================================
00009D36                            ; ---------------------------------------------------------------------------
00009D36                            ; Sub-object - missile that the	Crabmeat throws
00009D36                            ; ---------------------------------------------------------------------------
00009D36                            
00009D36                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009D36 5428 0024                  		addq.b	#2,$24(a0)
00009D3A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D42 317C 0400 0002             		move.w	#$400,2(a0)
00009D48 117C 0004 0001             		move.b	#4,1(a0)
00009D4E 117C 0003 0018             		move.b	#3,$18(a0)
00009D54 117C 0087 0020             		move.b	#$87,$20(a0)
00009D5A 117C 0008 0019             		move.b	#8,$19(a0)
00009D60 317C FC00 0012             		move.w	#-$400,$12(a0)
00009D66 117C 0007 001C             		move.b	#7,$1C(a0)
00009D6C                            
00009D6C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009D6C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009D72 6100 0000                  		bsr.w	AnimateSprite
00009D76 6100 0000                  		bsr.w	ObjectFall
00009D7A 6100 0000                  		bsr.w	DisplaySprite
00009D7E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D82 0640 00E0                  		addi.w	#$E0,d0
00009D86 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009D8A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj1F_Delete2:
00009D8E 6000 0000                  		bra.w	DeleteObject
00009D92                            ; ===========================================================================
00009D92                            Ani_obj1F:
00009D92                            	include "_anim\obj1F.asm"
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Animation script - Crabmeat enemy
00009D92                            ; ---------------------------------------------------------------------------
00009D92 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009D98 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009D9E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009DA2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009DA6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009DAA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009DAE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009DB4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009DBA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009DC0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009DC4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009DC8                            		even
00009DC8                            		even
00009DC8                            
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            Map_obj1F:
00009DC8                            	include "_maps\obj1F.asm"
00009DC8                            Map_1514:
00009DC8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009DCA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009DCC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009DCE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009DD0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009DD2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009DD4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009DD6 03                         Map_1514_E: 	dc.b $3
00009DD7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DDC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DE1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DE6 03                         Map_1514_1E: 	dc.b $3
00009DE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DF6 03                         Map_1514_2E: 	dc.b $3
00009DF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E06 03                         Map_1514_3E: 	dc.b $3
00009E07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E16 03                         Map_1514_4E: 	dc.b $3
00009E17 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E1C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E21 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E26 01                         Map_1514_5E: 	dc.b $1
00009E27 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009E2C 01                         Map_1514_64: 	dc.b $1
00009E2D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009E32                            	even
00009E32                            	even
00009E32                            
00009E32                            ; ===========================================================================
00009E32                            ; ---------------------------------------------------------------------------
00009E32                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E32                            ; ---------------------------------------------------------------------------
00009E32                            
00009E32                            Obj22:					; XREF: Obj_Index
00009E32 7000                       		moveq	#0,d0
00009E34 1028 0024                  		move.b	$24(a0),d0
00009E38 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009E3C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009E40                            ; ===========================================================================
00009E40 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009E42 0000                       		dc.w Obj22_Action-Obj22_Index
00009E44 0000                       		dc.w Obj22_Delete-Obj22_Index
00009E46                            ; ===========================================================================
00009E46                            
00009E46                            Obj22_Main:				; XREF: Obj22_Index
00009E46 5428 0024                  		addq.b	#2,$24(a0)
00009E4A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009E52 317C 0444 0002             		move.w	#$444,2(a0)
00009E58 117C 0004 0001             		move.b	#4,1(a0)
00009E5E 117C 0003 0018             		move.b	#3,$18(a0)
00009E64 117C 0008 0020             		move.b	#8,$20(a0)
00009E6A 117C 0018 0019             		move.b	#$18,$19(a0)
00009E70                            
00009E70                            Obj22_Action:				; XREF: Obj22_Index
00009E70 7000                       		moveq	#0,d0
00009E72 1028 0025                  		move.b	$25(a0),d0
00009E76 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009E7A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009E7E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009E84 6100 0000                  		bsr.w	AnimateSprite
00009E88 6000 0000                  		bra.w	MarkObjGone
00009E8C                            ; ===========================================================================
00009E8C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009E8E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009E90                            ; ===========================================================================
00009E90                            
00009E90                            Obj22_Move:				; XREF: Obj22_Index2
00009E90 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E94 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009E96 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009E9C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009E9E 5428 0025                  		addq.b	#2,$25(a0)
00009EA2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009EA8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009EAE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009EB4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EBA 6600                       		bne.s	locret_986C	; if not, branch
00009EBC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009EC0                            
00009EC0                            locret_986C:
00009EC0 4E75                       		rts	
00009EC2                            ; ===========================================================================
00009EC2                            
00009EC2                            Obj22_Fire:				; XREF: Obj22_Move
00009EC2 6100 0000                  		bsr.w	SingleObjLoad
00009EC6 6600                       		bne.s	locret_98D0
00009EC8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009ECC 3368 0008 0008             		move.w	8(a0),8(a1)
00009ED2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009ED8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009EDE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009EE4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009EEA 303C 0018                  		move.w	#$18,d0
00009EEE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EF4 6600                       		bne.s	loc_98AA	; if not, branch
00009EF6 4440                       		neg.w	d0
00009EF8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009EFC                            
00009EFC                            loc_98AA:
00009EFC D169 0008                  		add.w	d0,8(a1)
00009F00 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F06 337C 000E 0032             		move.w	#$E,$32(a1)
00009F0C 2348 003C                  		move.l	a0,$3C(a1)
00009F10 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F16 317C 003B 0032             		move.w	#$3B,$32(a0)
00009F1C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009F22                            
00009F22                            locret_98D0:
00009F22 4E75                       		rts	
00009F24                            ; ===========================================================================
00009F24                            
00009F24                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009F24 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F28 6B00                       		bmi.s	Obj22_ChgDir
00009F2A 6100 0000                  		bsr.w	SpeedToPos
00009F2E 4A28 0034                  		tst.b	$34(a0)
00009F32 6600                       		bne.s	locret_992A
00009F34 3038 D008                  		move.w	($FFFFD008).w,d0
00009F38 9068 0008                  		sub.w	8(a0),d0
00009F3C 6A00                       		bpl.s	Obj22_SetNrSonic
00009F3E 4440                       		neg.w	d0
00009F40                            
00009F40                            Obj22_SetNrSonic:
00009F40 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F44 6400                       		bcc.s	locret_992A	; if not, branch
00009F46 4A28 0001                  		tst.b	1(a0)
00009F4A 6A00                       		bpl.s	locret_992A
00009F4C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009F52 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009F58 6000                       		bra.s	Obj22_Stop
00009F5A                            ; ===========================================================================
00009F5A                            
00009F5A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009F5A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009F60 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009F66 317C 003B 0032             		move.w	#59,$32(a0)
00009F6C                            
00009F6C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009F6C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009F70 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009F76 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009F7C                            
00009F7C                            locret_992A:
00009F7C 4E75                       		rts	
00009F7E                            ; ===========================================================================
00009F7E                            
00009F7E                            Obj22_Delete:				; XREF: Obj22_Index
00009F7E 6100 0000                  		bsr.w	DeleteObject
00009F82 4E75                       		rts	
00009F84                            ; ===========================================================================
00009F84                            ; ---------------------------------------------------------------------------
00009F84                            ; Object 23 - missile that Buzz	Bomber throws
00009F84                            ; ---------------------------------------------------------------------------
00009F84                            
00009F84                            Obj23:					; XREF: Obj_Index
00009F84 7000                       		moveq	#0,d0
00009F86 1028 0024                  		move.b	$24(a0),d0
00009F8A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009F8E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009F92                            ; ===========================================================================
00009F92 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009F94 0000                       		dc.w Obj23_Animate-Obj23_Index
00009F96 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009F98 0000                       		dc.w Obj23_Delete-Obj23_Index
00009F9A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009F9C                            ; ===========================================================================
00009F9C                            
00009F9C                            Obj23_Main:				; XREF: Obj23_Index
00009F9C 5368 0032                  		subq.w	#1,$32(a0)
00009FA0 6A00                       		bpl.s	Obj23_ChkCancel
00009FA2 5428 0024                  		addq.b	#2,$24(a0)
00009FA6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009FAE 317C 2444 0002             		move.w	#$2444,2(a0)
00009FB4 117C 0004 0001             		move.b	#4,1(a0)
00009FBA 117C 0003 0018             		move.b	#3,$18(a0)
00009FC0 117C 0008 0019             		move.b	#8,$19(a0)
00009FC6 0228 0003 0022             		andi.b	#3,$22(a0)
00009FCC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009FD0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009FD2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009FD8 117C 0087 0020             		move.b	#$87,$20(a0)
00009FDE 117C 0001 001C             		move.b	#1,$1C(a0)
00009FE4 6000                       		bra.s	Obj23_Animate2
00009FE6                            ; ===========================================================================
00009FE6                            
00009FE6                            Obj23_Animate:				; XREF: Obj23_Index
00009FE6 6100                       		bsr.s	Obj23_ChkCancel
00009FE8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009FEE 6100 0000                  		bsr.w	AnimateSprite
00009FF2 6000 0000                  		bra.w	DisplaySprite
00009FF6                            ; ---------------------------------------------------------------------------
00009FF6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009FF6                            ; destroyed, and if it has, then cancel	the missile
00009FF6                            ; ---------------------------------------------------------------------------
00009FF6                            
00009FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FF6                            
00009FF6                            
00009FF6                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009FF6 2268 003C                  		movea.l	$3C(a0),a1
00009FFA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009FFE 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A000 4E75                       		rts	
0000A002                            ; End of function Obj23_ChkCancel
0000A002                            
0000A002                            ; ===========================================================================
0000A002                            
0000A002                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A002 0828 0007 0022             		btst	#7,$22(a0)
0000A008 6600                       		bne.s	Obj23_Explode
0000A00A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A010 117C 0001 001C             		move.b	#1,$1C(a0)
0000A016 6100 0000                  		bsr.w	SpeedToPos
0000A01A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A020 6100 0000                  		bsr.w	AnimateSprite
0000A024 6100 0000                  		bsr.w	DisplaySprite
0000A028 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A02C 0640 00E0                  		addi.w	#$E0,d0
0000A030 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A034 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A036 4E75                       		rts	
0000A038                            ; ===========================================================================
0000A038                            
0000A038                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A038 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A03C 117C 0000 0024             		move.b	#0,$24(a0)
0000A042 6000 F2DE                  		bra.w	Obj24
0000A046                            ; ===========================================================================
0000A046                            
0000A046                            Obj23_Delete:				; XREF: Obj23_Index
0000A046 6100 0000                  		bsr.w	DeleteObject
0000A04A 4E75                       		rts	
0000A04C                            ; ===========================================================================
0000A04C                            
0000A04C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A04C 4A28 0001                  		tst.b	1(a0)
0000A050 6AF4                       		bpl.s	Obj23_Delete
0000A052 6100 0000                  		bsr.w	SpeedToPos
0000A056                            
0000A056                            Obj23_Animate2:				; XREF: Obj23_Main
0000A056 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A05C 6100 0000                  		bsr.w	AnimateSprite
0000A060 6100 0000                  		bsr.w	DisplaySprite
0000A064 4E75                       		rts	
0000A066                            ; ===========================================================================
0000A066                            Ani_obj22:
0000A066                            	include "_anim\obj22.asm"
0000A066                            ; ---------------------------------------------------------------------------
0000A066                            ; Animation script - Buzz Bomber enemy
0000A066                            ; ---------------------------------------------------------------------------
0000A066 0000                       		dc.w byte_9A1E-Ani_obj22
0000A068 0000                       		dc.w byte_9A22-Ani_obj22
0000A06A 0000                       		dc.w byte_9A26-Ani_obj22
0000A06C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A070 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A074 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A078                            		even
0000A078                            		even
0000A078                            
0000A078                            Ani_obj23:
0000A078                            	include "_anim\obj23.asm"
0000A078                            ; ---------------------------------------------------------------------------
0000A078                            ; Animation script - missile that Buzz Bomber throws
0000A078                            ; ---------------------------------------------------------------------------
0000A078 0000                       		dc.w byte_9A2E-Ani_obj23
0000A07A 0000                       		dc.w byte_9A32-Ani_obj23
0000A07C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A080 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A084                            		even
0000A084                            		even
0000A084                            
0000A084                            ; ---------------------------------------------------------------------------
0000A084                            ; Sprite mappings - Buzz Bomber	enemy
0000A084                            ; ---------------------------------------------------------------------------
0000A084                            Map_obj22:
0000A084                            	include "_maps\obj22.asm"
0000A084                            Map_e97a:
0000A084 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A086 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A088 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A08A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A08C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A08E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A090 06                         Map_e97a_C: 	dc.b $6
0000A091 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A096 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A09B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0A0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0A5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A0AA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0AF 06                         Map_e97a_2B: 	dc.b $6
0000A0B0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0B5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0BA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0BF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0C4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A0C9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A0CE 07                         Map_e97a_4A: 	dc.b $7
0000A0CF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A0D4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0D9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0DE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0E3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0E8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A0ED F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0F2 07                         Map_e97a_6E: 	dc.b $7
0000A0F3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A0F8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0FD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A102 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A107 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A10C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A111 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A116 06                         Map_e97a_92: 	dc.b $6
0000A117 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A11C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A121 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A126 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A12B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A130 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A135 04                         Map_e97a_B1: 	dc.b $4
0000A136 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A13B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A140 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A145 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A14A                            	even
0000A14A                            	even
0000A14A                            
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            Map_obj23:
0000A14A                            	include "_maps\obj23.asm"
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A14E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A152 01                         byte_9B0E:	dc.b 1
0000A153 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A158 01                         byte_9B14:	dc.b 1
0000A159 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A15E 01                         byte_9B1A:	dc.b 1
0000A15F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A164 01                         byte_9B20:	dc.b 1
0000A165 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A16A                            		even
0000A16A                            		even
0000A16A                            
0000A16A                            ; ===========================================================================
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A                            ; Object 25 - rings
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A                            
0000A16A                            Obj25:					; XREF: Obj_Index
0000A16A 7000                       		moveq	#0,d0
0000A16C 1028 0024                  		move.b	$24(a0),d0
0000A170 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A174 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A178                            ; ===========================================================================
0000A178 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A17A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A17C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A17E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A180 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A182                            ; ---------------------------------------------------------------------------
0000A182                            ; Distances between rings (format: horizontal, vertical)
0000A182                            ; ---------------------------------------------------------------------------
0000A182 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A184 1800                       		dc.b $18, 0		; horizontal normal
0000A186 2000                       		dc.b $20, 0		; horizontal wide
0000A188 0010                       		dc.b 0,	$10		; vertical tight
0000A18A 0018                       		dc.b 0,	$18		; vertical normal
0000A18C 0020                       		dc.b 0,	$20		; vertical wide
0000A18E 1010                       		dc.b $10, $10		; diagonal
0000A190 1818                       		dc.b $18, $18
0000A192 2020                       		dc.b $20, $20
0000A194 F010                       		dc.b $F0, $10
0000A196 E818                       		dc.b $E8, $18
0000A198 E020                       		dc.b $E0, $20
0000A19A 1008                       		dc.b $10, 8
0000A19C 1810                       		dc.b $18, $10
0000A19E F008                       		dc.b $F0, 8
0000A1A0 E810                       		dc.b $E8, $10
0000A1A2                            ; ===========================================================================
0000A1A2                            
0000A1A2                            Obj25_Main:				; XREF: Obj25_Index
0000A1A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A1A6 7000                       		moveq	#0,d0
0000A1A8 1028 0023                  		move.b	$23(a0),d0
0000A1AC 45F2 0002                  		lea	2(a2,d0.w),a2
0000A1B0 1812                       		move.b	(a2),d4
0000A1B2 1228 0028                  		move.b	$28(a0),d1
0000A1B6 1001                       		move.b	d1,d0
0000A1B8 0241 0007                  		andi.w	#7,d1
0000A1BC 0C41 0007                  		cmpi.w	#7,d1
0000A1C0 6600                       		bne.s	loc_9B80
0000A1C2 7206                       		moveq	#6,d1
0000A1C4                            
0000A1C4                            loc_9B80:
0000A1C4 4841                       		swap	d1
0000A1C6 323C 0000                  		move.w	#0,d1
0000A1CA E808                       		lsr.b	#4,d0
0000A1CC D040                       		add.w	d0,d0
0000A1CE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A1D2 4885                       		ext.w	d5
0000A1D4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A1D8 4886                       		ext.w	d6
0000A1DA 2248                       		movea.l	a0,a1
0000A1DC 3428 0008                  		move.w	8(a0),d2
0000A1E0 3628 000C                  		move.w	$C(a0),d3
0000A1E4 E20C                       		lsr.b	#1,d4
0000A1E6 6500                       		bcs.s	loc_9C02
0000A1E8 0892 0007                  		bclr	#7,(a2)
0000A1EC 6000                       		bra.s	loc_9BBA
0000A1EE                            ; ===========================================================================
0000A1EE                            
0000A1EE                            Obj25_MakeRings:
0000A1EE 4841                       		swap	d1
0000A1F0 E20C                       		lsr.b	#1,d4
0000A1F2 6500                       		bcs.s	loc_9C02
0000A1F4 0892 0007                  		bclr	#7,(a2)
0000A1F8 6100 0000                  		bsr.w	SingleObjLoad
0000A1FC 6600                       		bne.s	loc_9C0E
0000A1FE                            
0000A1FE                            loc_9BBA:				; XREF: Obj25_Main
0000A1FE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A202 5429 0024                  		addq.b	#2,$24(a1)
0000A206 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A20A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A210 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A214 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A21C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A222 137C 0004 0001             		move.b	#4,1(a1)
0000A228 137C 0002 0018             		move.b	#2,$18(a1)
0000A22E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A234 137C 0008 0019             		move.b	#8,$19(a1)
0000A23A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A240 1341 0034                  		move.b	d1,$34(a1)
0000A244                            
0000A244                            loc_9C02:
0000A244 5241                       		addq.w	#1,d1
0000A246 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A248 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A24A 4841                       		swap	d1
0000A24C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A250                            
0000A250                            loc_9C0E:
0000A250 0812 0000                  		btst	#0,(a2)
0000A254 6600 0000                  		bne.w	DeleteObject
0000A258                            
0000A258                            Obj25_Animate:				; XREF: Obj25_Index
0000A258 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A25E 6100 0000                  		bsr.w	DisplaySprite
0000A262 3028 0032                  		move.w	$32(a0),d0
0000A266 0240 FF80                  		andi.w	#$FF80,d0
0000A26A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A26E 0441 0080                  		subi.w	#$80,d1
0000A272 0241 FF80                  		andi.w	#$FF80,d1
0000A276 9041                       		sub.w	d1,d0
0000A278 0C40 0280                  		cmpi.w	#$280,d0
0000A27C 6200                       		bhi.s	Obj25_Delete
0000A27E 4E75                       		rts	
0000A280                            ; ===========================================================================
0000A280                            
0000A280                            Obj25_Collect:				; XREF: Obj25_Index
0000A280 5428 0024                  		addq.b	#2,$24(a0)
0000A284 117C 0000 0020             		move.b	#0,$20(a0)
0000A28A 117C 0001 0018             		move.b	#1,$18(a0)
0000A290 6100 0000                  		bsr.w	CollectRing
0000A294 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A298 7000                       		moveq	#0,d0
0000A29A 1028 0023                  		move.b	$23(a0),d0
0000A29E 1228 0034                  		move.b	$34(a0),d1
0000A2A2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A2A6                            
0000A2A6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A2A6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2AC 6100 0000                  		bsr.w	AnimateSprite
0000A2B0 6000 0000                  		bra.w	DisplaySprite
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            Obj25_Delete:				; XREF: Obj25_Index
0000A2B4 6000 0000                  		bra.w	DeleteObject
0000A2B8                            
0000A2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2B8                            
0000A2B8                            
0000A2B8                            CollectRing:				; XREF: Obj25_Collect
0000A2B8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A2BC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A2C2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A2C6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A2CC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2CE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A2D4 6700                       		beq.s	loc_9CA4
0000A2D6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A2DC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2DE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A2E4 6600                       		bne.s	Obj25_PlaySnd
0000A2E6                            
0000A2E6                            loc_9CA4:
0000A2E6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A2EA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A2EE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A2F2                            
0000A2F2                            Obj25_PlaySnd:
0000A2F2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A2F8                            ; End of function CollectRing
0000A2F8                            
0000A2F8                            ; ===========================================================================
0000A2F8                            ; ---------------------------------------------------------------------------
0000A2F8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A2F8                            ; ---------------------------------------------------------------------------
0000A2F8                            
0000A2F8                            Obj37:					; XREF: Obj_Index
0000A2F8 7000                       		moveq	#0,d0
0000A2FA 1028 0024                  		move.b	$24(a0),d0
0000A2FE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A302 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A306                            ; ===========================================================================
0000A306 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A308 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A30A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A30C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A30E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A310                            ; ===========================================================================
0000A310                            
0000A310                            Obj37_CountRings:			; XREF: Obj37_Index
0000A310 2248                       		movea.l	a0,a1
0000A312 7A00                       		moveq	#0,d5
0000A314 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A318 7020                       		moveq	#32,d0
0000A31A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A31C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A31E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A320                            
0000A320                            loc_9CDE:
0000A320 5345                       		subq.w	#1,d5
0000A322 383C 0288                  		move.w	#$288,d4
0000A326 6000                       		bra.s	Obj37_MakeRings
0000A328                            ; ===========================================================================
0000A328                            
0000A328                            Obj37_Loop:
0000A328 6100 0000                  		bsr.w	SingleObjLoad
0000A32C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A330                            
0000A330                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A330 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A334 5429 0024                  		addq.b	#2,$24(a1)
0000A338 137C 0008 0016             		move.b	#8,$16(a1)
0000A33E 137C 0008 0017             		move.b	#8,$17(a1)
0000A344 3368 0008 0008             		move.w	8(a0),8(a1)
0000A34A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A350 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A358 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A35E 137C 0004 0001             		move.b	#4,1(a1)
0000A364 137C 0003 0018             		move.b	#3,$18(a1)
0000A36A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A370 137C 0008 0019             		move.b	#8,$19(a1)
0000A376 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A37C 4A44                       		tst.w	d4
0000A37E 6B00                       		bmi.s	loc_9D62
0000A380 3004                       		move.w	d4,d0
0000A382 6100 88E0                  		bsr.w	CalcSine
0000A386 3404                       		move.w	d4,d2
0000A388 E04A                       		lsr.w	#8,d2
0000A38A E560                       		asl.w	d2,d0
0000A38C E561                       		asl.w	d2,d1
0000A38E 3400                       		move.w	d0,d2
0000A390 3601                       		move.w	d1,d3
0000A392 0604 0010                  		addi.b	#$10,d4
0000A396 6400                       		bcc.s	loc_9D62
0000A398 0444 0080                  		subi.w	#$80,d4
0000A39C 6400                       		bcc.s	loc_9D62
0000A39E 383C 0288                  		move.w	#$288,d4
0000A3A2                            
0000A3A2                            loc_9D62:
0000A3A2 3342 0010                  		move.w	d2,$10(a1)
0000A3A6 3343 0012                  		move.w	d3,$12(a1)
0000A3AA 4442                       		neg.w	d2
0000A3AC 4444                       		neg.w	d4
0000A3AE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A3B2                            
0000A3B2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A3B2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A3B8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A3BE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A3C4 303C 00C6                  		move.w	#$C6,d0
0000A3C8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A3CE                            
0000A3CE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A3CE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A3D4 6100 0000                  		bsr.w	SpeedToPos
0000A3D8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A3DE 6B00                       		bmi.s	Obj37_ChkDel
0000A3E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A3E4 D007                       		add.b	d7,d0
0000A3E6 0200 0003                  		andi.b	#3,d0
0000A3EA 6600                       		bne.s	Obj37_ChkDel
0000A3EC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3F2 4A41                       		tst.w	d1
0000A3F4 6A00                       		bpl.s	Obj37_ChkDel
0000A3F6 D368 000C                  		add.w	d1,$C(a0)
0000A3FA 3028 0012                  		move.w	$12(a0),d0
0000A3FE E440                       		asr.w	#2,d0
0000A400 9168 0012                  		sub.w	d0,$12(a0)
0000A404 4468 0012                  		neg.w	$12(a0)
0000A408                            
0000A408                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A408 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A40C 6700                       		beq.s	Obj37_Delete
0000A40E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A412 0640 00E0                  		addi.w	#$E0,d0
0000A416 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A41A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A41C 6000 0000                  		bra.w	DisplaySprite
0000A420                            ; ===========================================================================
0000A420                            
0000A420                            Obj37_Collect:				; XREF: Obj37_Index
0000A420 5428 0024                  		addq.b	#2,$24(a0)
0000A424 117C 0000 0020             		move.b	#0,$20(a0)
0000A42A 117C 0001 0018             		move.b	#1,$18(a0)
0000A430 6100 FE86                  		bsr.w	CollectRing
0000A434                            
0000A434                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A434 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A43A 6100 0000                  		bsr.w	AnimateSprite
0000A43E 6000 0000                  		bra.w	DisplaySprite
0000A442                            ; ===========================================================================
0000A442                            
0000A442                            Obj37_Delete:				; XREF: Obj37_Index
0000A442 6000 0000                  		bra.w	DeleteObject
0000A446                            ; ===========================================================================
0000A446                            ; ---------------------------------------------------------------------------
0000A446                            ; Object 4B - giant ring for entry to special stage
0000A446                            ; ---------------------------------------------------------------------------
0000A446                            
0000A446                            Obj4B:					; XREF: Obj_Index
0000A446 7000                       		moveq	#0,d0
0000A448 1028 0024                  		move.b	$24(a0),d0
0000A44C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A450 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A454                            ; ===========================================================================
0000A454 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A456 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A458 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A45A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A45C                            ; ===========================================================================
0000A45C                            
0000A45C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A45C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A464 317C 2400 0002             		move.w	#$2400,2(a0)
0000A46A 0028 0004 0001             		ori.b	#4,1(a0)
0000A470 117C 0040 0019             		move.b	#$40,$19(a0)
0000A476 4A28 0001                  		tst.b	1(a0)
0000A47A 6A00                       		bpl.s	Obj4B_Animate
0000A47C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A482 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A486 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A48C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A48E 4E75                       		rts	
0000A490                            ; ===========================================================================
0000A490                            
0000A490                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A490 5428 0024                  		addq.b	#2,$24(a0)
0000A494 117C 0002 0018             		move.b	#2,$18(a0)
0000A49A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A4A0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A4A6                            
0000A4A6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A4A6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A4AC 3028 0008                  		move.w	8(a0),d0
0000A4B0 0240 FF80                  		andi.w	#$FF80,d0
0000A4B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4B8 0441 0080                  		subi.w	#$80,d1
0000A4BC 0241 FF80                  		andi.w	#$FF80,d1
0000A4C0 9041                       		sub.w	d1,d0
0000A4C2 0C40 0280                  		cmpi.w	#$280,d0
0000A4C6 6200 0000                  		bhi.w	DeleteObject
0000A4CA 6000 0000                  		bra.w	DisplaySprite
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A4CE 5528 0024                  		subq.b	#2,$24(a0)
0000A4D2 117C 0000 0020             		move.b	#0,$20(a0)
0000A4D8 6100 0000                  		bsr.w	SingleObjLoad
0000A4DC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A4E0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A4E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A4EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A4F0 2348 003C                  		move.l	a0,$3C(a1)
0000A4F4 3038 D008                  		move.w	($FFFFD008).w,d0
0000A4F8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A4FC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A4FE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A504                            
0000A504                            Obj4B_PlaySnd:
0000A504 303C 00C3                  		move.w	#$C3,d0
0000A508 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A50E 6096                       		bra.s	Obj4B_Animate
0000A510                            ; ===========================================================================
0000A510                            
0000A510                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A510 6000 0000                  		bra.w	DeleteObject
0000A514                            ; ===========================================================================
0000A514                            ; ---------------------------------------------------------------------------
0000A514                            ; Object 7C - flash effect when	you collect the	giant ring
0000A514                            ; ---------------------------------------------------------------------------
0000A514                            
0000A514                            Obj7C:					; XREF: Obj_Index
0000A514 7000                       		moveq	#0,d0
0000A516 1028 0024                  		move.b	$24(a0),d0
0000A51A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A51E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A522                            ; ===========================================================================
0000A522 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A524 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A526 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A528                            ; ===========================================================================
0000A528                            
0000A528                            Obj7C_Main:				; XREF: Obj7C_Index
0000A528 5428 0024                  		addq.b	#2,$24(a0)
0000A52C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A534 317C 2462 0002             		move.w	#$2462,2(a0)
0000A53A 0028 0004 0001             		ori.b	#4,1(a0)
0000A540 117C 0000 0018             		move.b	#0,$18(a0)
0000A546 117C 0020 0019             		move.b	#$20,$19(a0)
0000A54C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A552                            
0000A552                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A552 6100                       		bsr.s	Obj7C_Collect
0000A554 3028 0008                  		move.w	8(a0),d0
0000A558 0240 FF80                  		andi.w	#$FF80,d0
0000A55C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A560 0441 0080                  		subi.w	#$80,d1
0000A564 0241 FF80                  		andi.w	#$FF80,d1
0000A568 9041                       		sub.w	d1,d0
0000A56A 0C40 0280                  		cmpi.w	#$280,d0
0000A56E 6200 0000                  		bhi.w	DeleteObject
0000A572 6000 0000                  		bra.w	DisplaySprite
0000A576                            
0000A576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A576                            
0000A576                            
0000A576                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A576 5328 001E                  		subq.b	#1,$1E(a0)
0000A57A 6A00                       		bpl.s	locret_9F76
0000A57C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A582 5228 001A                  		addq.b	#1,$1A(a0)
0000A586 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A58C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A58E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A594 6600                       		bne.s	locret_9F76	; if not, branch
0000A596 2268 003C                  		movea.l	$3C(a0),a1
0000A59A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A5A0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A5A6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A5AC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A5B0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A5B4                            
0000A5B4                            locret_9F76:
0000A5B4 4E75                       		rts	
0000A5B6                            ; ===========================================================================
0000A5B6                            
0000A5B6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A5B6 5428 0024                  		addq.b	#2,$24(a0)
0000A5BA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A5C0 588F                       		addq.l	#4,sp
0000A5C2 4E75                       		rts	
0000A5C4                            ; End of function Obj7C_Collect
0000A5C4                            
0000A5C4                            ; ===========================================================================
0000A5C4                            
0000A5C4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A5C4 6000 0000                  		bra.w	DeleteObject
0000A5C8                            ; ===========================================================================
0000A5C8                            Ani_obj25:
0000A5C8                            	include "_anim\obj25.asm"
0000A5C8                            ; ---------------------------------------------------------------------------
0000A5C8                            ; Animation script - ring
0000A5C8                            ; ---------------------------------------------------------------------------
0000A5C8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A5CA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A5D0                            		even
0000A5D0                            		even
0000A5D0                            
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0                            ; Sprite mappings - rings
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0                            Map_obj25:
0000A5D0                            	include "_maps\obj25.asm"
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0                            ; Sprite mappings - rings
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A5D4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A5D8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A5DC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A5E0 01                         byte_9FA2:	dc.b 1
0000A5E1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A5E6 01                         byte_9FA8:	dc.b 1
0000A5E7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A5EC 01                         byte_9FAE:	dc.b 1
0000A5ED F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A5F2 01                         byte_9FB4:	dc.b 1
0000A5F3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A5F8 01                         byte_9FBA:	dc.b 1
0000A5F9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A5FE 01                         byte_9FC0:	dc.b 1
0000A5FF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A604 01                         byte_9FC6:	dc.b 1
0000A605 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A60A 01                         byte_9FCC:	dc.b 1
0000A60B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A610                            		even
0000A610                            		even
0000A610                            
0000A610                            ; ---------------------------------------------------------------------------
0000A610                            ; Sprite mappings - giant ring
0000A610                            ; ---------------------------------------------------------------------------
0000A610                            Map_obj4B:
0000A610                            	include "_maps\obj4B.asm"
0000A610                            ; ---------------------------------------------------------------------------
0000A610                            ; Sprite mappings - giant ring
0000A610                            ; ---------------------------------------------------------------------------
0000A610 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A614 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A618 0A                         byte_9FDA:	dc.b $A
0000A619 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A61E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A623 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A628 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A62D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A632 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A637 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A63C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A641 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A646 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A64B 08                         byte_A00D:	dc.b 8
0000A64C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A651 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A656 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A65B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A660 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A665 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A66A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A66F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A674 04                         byte_A036:	dc.b 4
0000A675 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A67A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A67F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A684 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A689 08                         byte_A04B:	dc.b 8
0000A68A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A68F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A694 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A699 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A69E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A6A3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A6A8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A6AD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A6B2                            		even
0000A6B2                            		even
0000A6B2                            
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2                            Map_obj7C:
0000A6B2                            	include "_maps\obj7C.asm"
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A6B6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A6BA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A6BE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A6C2 02                         byte_A084:	dc.b 2
0000A6C3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A6C8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A6CD 04                         byte_A08F:	dc.b 4
0000A6CE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A6D3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A6D8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A6DD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A6E2 04                         byte_A0A4:	dc.b 4
0000A6E3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A6E8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A6ED 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A6F2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A6F7 04                         byte_A0B9:	dc.b 4
0000A6F8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A6FD E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A702 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A707 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A70C 04                         byte_A0CE:	dc.b 4
0000A70D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A712 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A717 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A71C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A721 04                         byte_A0E3:	dc.b 4
0000A722 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A727 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A72C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A731 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A736 02                         byte_A0F8:	dc.b 2
0000A737 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A73C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A741 04                         byte_A103:	dc.b 4
0000A742 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A747 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A74C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A751 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A756                            		even
0000A756                            		even
0000A756                            
0000A756                            ; ===========================================================================
0000A756                            ; ---------------------------------------------------------------------------
0000A756                            ; Object 26 - monitors
0000A756                            ; ---------------------------------------------------------------------------
0000A756                            
0000A756                            Obj26:					; XREF: Obj_Index
0000A756 7000                       		moveq	#0,d0
0000A758 1028 0024                  		move.b	$24(a0),d0
0000A75C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A760 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A764                            ; ===========================================================================
0000A764 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A766 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A768 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A76A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A76C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A76E                            ; ===========================================================================
0000A76E                            
0000A76E                            Obj26_Main:				; XREF: Obj26_Index
0000A76E 5428 0024                  		addq.b	#2,$24(a0)
0000A772 117C 000E 0016             		move.b	#$E,$16(a0)
0000A778 117C 000E 0017             		move.b	#$E,$17(a0)
0000A77E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A786 317C 0680 0002             		move.w	#$680,2(a0)
0000A78C 117C 0004 0001             		move.b	#4,1(a0)
0000A792 117C 0003 0018             		move.b	#3,$18(a0)
0000A798 117C 000F 0019             		move.b	#$F,$19(a0)
0000A79E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7A2 7000                       		moveq	#0,d0
0000A7A4 1028 0023                  		move.b	$23(a0),d0
0000A7A8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A7AE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A7B4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A7B6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A7BC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A7C2 4E75                       		rts	
0000A7C4                            ; ===========================================================================
0000A7C4                            
0000A7C4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A7C4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A7CA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A7D0                            
0000A7D0                            Obj26_Solid:				; XREF: Obj26_Index
0000A7D0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A7D4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A7D6 5500                       		subq.b	#2,d0
0000A7D8 6600                       		bne.s	Obj26_Fall
0000A7DA 7200                       		moveq	#0,d1
0000A7DC 1228 0019                  		move.b	$19(a0),d1
0000A7E0 0641 000B                  		addi.w	#$B,d1
0000A7E4 6100 D38A                  		bsr.w	ExitPlatform
0000A7E8 0829 0003 0022             		btst	#3,$22(a1)
0000A7EE 6600 0000                  		bne.w	loc_A1BC
0000A7F2 4228 0025                  		clr.b	$25(a0)
0000A7F6 6000 0000                  		bra.w	Obj26_Animate
0000A7FA                            ; ===========================================================================
0000A7FA                            
0000A7FA                            loc_A1BC:				; XREF: Obj26_Solid
0000A7FA 363C 0010                  		move.w	#$10,d3
0000A7FE 3428 0008                  		move.w	8(a0),d2
0000A802 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000A806 6000 0000                  		bra.w	Obj26_Animate
0000A80A                            ; ===========================================================================
0000A80A                            
0000A80A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A80A 6100 0000                  		bsr.w	ObjectFall
0000A80E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A814 4A41                       		tst.w	d1
0000A816 6A00 0000                  		bpl.w	Obj26_Animate
0000A81A D368 000C                  		add.w	d1,$C(a0)
0000A81E 4268 0012                  		clr.w	$12(a0)
0000A822 4228 0025                  		clr.b	$25(a0)
0000A826 6000 0000                  		bra.w	Obj26_Animate
0000A82A                            ; ===========================================================================
0000A82A                            
0000A82A                            loc_A1EC:				; XREF: Obj26_Solid
0000A82A 323C 001A                  		move.w	#$1A,d1
0000A82E 343C 000F                  		move.w	#$F,d2
0000A832 6100 0000                  		bsr.w	Obj26_SolidSides
0000A836 6700 0000                  		beq.w	loc_A25C
0000A83A 4A69 0012                  		tst.w	$12(a1)
0000A83E 6B00                       		bmi.s	loc_A20A
0000A840 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A846 6700                       		beq.s	loc_A25C	; if yes, branch
0000A848                            
0000A848                            loc_A20A:
0000A848 4A41                       		tst.w	d1
0000A84A 6A00                       		bpl.s	loc_A220
0000A84C 9769 000C                  		sub.w	d3,$C(a1)
0000A850 6100 D20C                  		bsr.w	loc_74AE
0000A854 117C 0002 0025             		move.b	#2,$25(a0)
0000A85A 6000 0000                  		bra.w	Obj26_Animate
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            loc_A220:
0000A85E 4A40                       		tst.w	d0
0000A860 6700 0000                  		beq.w	loc_A246
0000A864 6B00                       		bmi.s	loc_A230
0000A866 4A69 0010                  		tst.w	$10(a1)
0000A86A 6B00                       		bmi.s	loc_A246
0000A86C 6000                       		bra.s	loc_A236
0000A86E                            ; ===========================================================================
0000A86E                            
0000A86E                            loc_A230:
0000A86E 4A69 0010                  		tst.w	$10(a1)
0000A872 6A00                       		bpl.s	loc_A246
0000A874                            
0000A874                            loc_A236:
0000A874 9169 0008                  		sub.w	d0,8(a1)
0000A878 337C 0000 0014             		move.w	#0,$14(a1)
0000A87E 337C 0000 0010             		move.w	#0,$10(a1)
0000A884                            
0000A884                            loc_A246:
0000A884 0829 0001 0022             		btst	#1,$22(a1)
0000A88A 6600                       		bne.s	loc_A26A
0000A88C 08E9 0005 0022             		bset	#5,$22(a1)
0000A892 08E8 0005 0022             		bset	#5,$22(a0)
0000A898 6000                       		bra.s	Obj26_Animate
0000A89A                            ; ===========================================================================
0000A89A                            
0000A89A                            loc_A25C:
0000A89A 0828 0005 0022             		btst	#5,$22(a0)
0000A8A0 6700                       		beq.s	Obj26_Animate
0000A8A2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A8A8                            
0000A8A8                            loc_A26A:
0000A8A8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A8AE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A8B4                            
0000A8B4                            Obj26_Animate:				; XREF: Obj26_Index
0000A8B4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A8BA 6100 0000                  		bsr.w	AnimateSprite
0000A8BE                            
0000A8BE                            Obj26_Display:				; XREF: Obj26_Index
0000A8BE 6100 0000                  		bsr.w	DisplaySprite
0000A8C2 3028 0008                  		move.w	8(a0),d0
0000A8C6 0240 FF80                  		andi.w	#$FF80,d0
0000A8CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A8CE 0441 0080                  		subi.w	#$80,d1
0000A8D2 0241 FF80                  		andi.w	#$FF80,d1
0000A8D6 9041                       		sub.w	d1,d0
0000A8D8 0C40 0280                  		cmpi.w	#$280,d0
0000A8DC 6200 0000                  		bhi.w	DeleteObject
0000A8E0 4E75                       		rts	
0000A8E2                            ; ===========================================================================
0000A8E2                            
0000A8E2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A8E2 5428 0024                  		addq.b	#2,$24(a0)
0000A8E6 117C 0000 0020             		move.b	#0,$20(a0)
0000A8EC 6100 0000                  		bsr.w	SingleObjLoad
0000A8F0 6600                       		bne.s	Obj26_Explode
0000A8F2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A8F6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A8FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A902 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A908 7400                       		moveq	#0,d2	; GMZ
0000A90A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A90C                            
0000A90C                            Obj26_Explode:
0000A90C 6100 0000                  		bsr.w	SingleObjLoad
0000A910 6600                       		bne.s	Obj26_SetBroken
0000A912 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A916 5429 0024                  		addq.b	#2,$24(a1)
0000A91A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A91E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A924 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A92A                            
0000A92A                            Obj26_NextExplosion:
0000A92A 5802                       		addq.b	#4,d2
0000A92C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A930                            
0000A930                            Obj26_SetBroken:
0000A930 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A934 7000                       		moveq	#0,d0
0000A936 1028 0023                  		move.b	$23(a0),d0
0000A93A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A940 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A946 6000 0000                  		bra.w	DisplaySprite
0000A94A                            ; ===========================================================================
0000A94A                            ; ---------------------------------------------------------------------------
0000A94A                            ; Object 2E - contents of monitors
0000A94A                            ; ---------------------------------------------------------------------------
0000A94A                            
0000A94A                            Obj2E:					; XREF: Obj_Index
0000A94A 7000                       		moveq	#0,d0
0000A94C 1028 0024                  		move.b	$24(a0),d0
0000A950 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A954 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A958 6000 0000                  		bra.w	DisplaySprite
0000A95C                            ; ===========================================================================
0000A95C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A95E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A960 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Obj2E_Main:				; XREF: Obj2E_Index
0000A962 5428 0024                  		addq.b	#2,$24(a0)
0000A966 317C 0680 0002             		move.w	#$680,2(a0)
0000A96C 117C 0024 0001             		move.b	#$24,1(a0)
0000A972 117C 0003 0018             		move.b	#3,$18(a0)
0000A978 117C 0008 0019             		move.b	#8,$19(a0)
0000A97E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A984 7000                       		moveq	#0,d0
0000A986 1028 001C                  		move.b	$1C(a0),d0
0000A98A 5400                       		addq.b	#2,d0
0000A98C 1140 001A                  		move.b	d0,$1A(a0)
0000A990 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A996 D000                       		add.b	d0,d0
0000A998 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A99C 5249                       		addq.w	#1,a1
0000A99E 2149 0004                  		move.l	a1,4(a0)
0000A9A2                            
0000A9A2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A9A2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A9A6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A9AA 6100 0000                  		bsr.w	SpeedToPos
0000A9AE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A9B4 4E75                       		rts	
0000A9B6                            ; ===========================================================================
0000A9B6                            
0000A9B6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A9B6 5428 0024                  		addq.b	#2,$24(a0)
0000A9BA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A9C0 1028 001C                  		move.b	$1C(a0),d0
0000A9C4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A9C8 6600                       		bne.s	Obj2E_ChkSonic
0000A9CA 4E75                       		rts			; Eggman monitor does nothing
0000A9CC                            ; ===========================================================================
0000A9CC                            
0000A9CC                            Obj2E_ChkSonic:
0000A9CC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A9D0 6600                       		bne.s	Obj2E_ChkShoes
0000A9D2                            
0000A9D2                            ExtraLife:
0000A9D2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A9D6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A9DA 303C 0088                  		move.w	#$88,d0
0000A9DE 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A9E4                            ; ===========================================================================
0000A9E4                            
0000A9E4                            Obj2E_ChkShoes:
0000A9E4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A9E8 6600                       		bne.s	Obj2E_ChkShield
0000A9EA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A9F0 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A9F6 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A9FC 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA02 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA08 303C 00E2                  		move.w	#$E2,d0
0000AA0C 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AA12                            ; ===========================================================================
0000AA12                            
0000AA12                            Obj2E_ChkShield:
0000AA12 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA16 6600                       		bne.s	Obj2E_ChkInvinc
0000AA18 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AA1E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AA24 303C 00AF                  		move.w	#$AF,d0
0000AA28 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AA2E                            ; ===========================================================================
0000AA2E                            
0000AA2E                            Obj2E_ChkInvinc:
0000AA2E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA32 6600                       		bne.s	Obj2E_ChkRings
0000AA34 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AA3A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AA40 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AA46 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AA4C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AA52 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AA58 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AA5E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AA64 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AA6A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AA70 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AA74 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AA76 303C 0087                  		move.w	#$87,d0
0000AA7A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AA80                            ; ===========================================================================
0000AA80                            
0000AA80                            Obj2E_NoMusic:
0000AA80 4E75                       		rts	
0000AA82                            ; ===========================================================================
0000AA82                            
0000AA82                            Obj2E_ChkRings:
0000AA82 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AA86 6600                       		bne.s	Obj2E_ChkS
0000AA88 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AA8E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AA94 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AA9A 6500                       		bcs.s	Obj2E_RingSound
0000AA9C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AAA2 6700 FF2E                  		beq.w	ExtraLife
0000AAA6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AAAC 6500                       		bcs.s	Obj2E_RingSound
0000AAAE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AAB4 6700 FF1C                  		beq.w	ExtraLife
0000AAB8                            
0000AAB8                            Obj2E_RingSound:
0000AAB8 303C 00B5                  		move.w	#$B5,d0
0000AABC 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AAC2                            ; ===========================================================================
0000AAC2                            
0000AAC2                            Obj2E_ChkS:
0000AAC2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AAC6 6600                       		bne.s	Obj2E_ChkEnd
0000AAC8                            		; nop	
0000AAC8 7201                       		moveq	#1,d1
0000AACA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AACE                            
0000AACE                            Obj2E_ChkEnd:
0000AACE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AAD0                            ; ===========================================================================
0000AAD0                            
0000AAD0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AAD0 5368 001E                  		subq.w	#1,$1E(a0)
0000AAD4 6B00 0000                  		bmi.w	DeleteObject
0000AAD8 4E75                       		rts	
0000AADA                            ; ---------------------------------------------------------------------------
0000AADA                            ; Subroutine to	make the sides of a monitor solid
0000AADA                            ; ---------------------------------------------------------------------------
0000AADA                            
0000AADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AADA                            
0000AADA                            
0000AADA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AADA 43F8 D000                  		lea	($FFFFD000).w,a1
0000AADE 3029 0008                  		move.w	8(a1),d0
0000AAE2 9068 0008                  		sub.w	8(a0),d0
0000AAE6 D041                       		add.w	d1,d0
0000AAE8 6B00                       		bmi.s	loc_A4E6
0000AAEA 3601                       		move.w	d1,d3
0000AAEC D643                       		add.w	d3,d3
0000AAEE B043                       		cmp.w	d3,d0
0000AAF0 6200                       		bhi.s	loc_A4E6
0000AAF2 1629 0016                  		move.b	$16(a1),d3
0000AAF6 4883                       		ext.w	d3
0000AAF8 D443                       		add.w	d3,d2
0000AAFA 3629 000C                  		move.w	$C(a1),d3
0000AAFE 9668 000C                  		sub.w	$C(a0),d3
0000AB02 D642                       		add.w	d2,d3
0000AB04 6B00                       		bmi.s	loc_A4E6
0000AB06 D442                       		add.w	d2,d2
0000AB08 B642                       		cmp.w	d2,d3
0000AB0A 6400                       		bcc.s	loc_A4E6
0000AB0C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB10 6B00                       		bmi.s	loc_A4E6
0000AB12 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB18 6400                       		bcc.s	loc_A4E6
0000AB1A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB1E 6600                       		bne.s	loc_A4E6
0000AB20 B240                       		cmp.w	d0,d1
0000AB22 6400                       		bcc.s	loc_A4DC
0000AB24 D241                       		add.w	d1,d1
0000AB26 9041                       		sub.w	d1,d0
0000AB28                            
0000AB28                            loc_A4DC:
0000AB28 0C43 0010                  		cmpi.w	#$10,d3
0000AB2C 6500                       		bcs.s	loc_A4EA
0000AB2E                            
0000AB2E                            loc_A4E2:
0000AB2E 7201                       		moveq	#1,d1
0000AB30 4E75                       		rts	
0000AB32                            ; ===========================================================================
0000AB32                            
0000AB32                            loc_A4E6:
0000AB32 7200                       		moveq	#0,d1
0000AB34 4E75                       		rts	
0000AB36                            ; ===========================================================================
0000AB36                            
0000AB36                            loc_A4EA:
0000AB36 7200                       		moveq	#0,d1
0000AB38 1228 0019                  		move.b	$19(a0),d1
0000AB3C 5841                       		addq.w	#4,d1
0000AB3E 3401                       		move.w	d1,d2
0000AB40 D442                       		add.w	d2,d2
0000AB42 D269 0008                  		add.w	8(a1),d1
0000AB46 9268 0008                  		sub.w	8(a0),d1
0000AB4A 6BE2                       		bmi.s	loc_A4E2
0000AB4C B242                       		cmp.w	d2,d1
0000AB4E 64DE                       		bcc.s	loc_A4E2
0000AB50 72FF                       		moveq	#-1,d1
0000AB52 4E75                       		rts	
0000AB54                            ; End of function Obj26_SolidSides
0000AB54                            
0000AB54                            ; ===========================================================================
0000AB54                            Ani_obj26:
0000AB54                            	include "_anim\obj26.asm"
0000AB54                            ; ---------------------------------------------------------------------------
0000AB54                            ; Animation script - monitors
0000AB54                            ; ---------------------------------------------------------------------------
0000AB54 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AB5A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AB60 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AB66 0000                       		dc.w byte_A582-Ani_obj26
0000AB68 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AB6E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AB7A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AB86 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AB92 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AB9E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ABAA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ABB6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ABC2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ABCE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ABD6                            		even
0000ABD6                            		even
0000ABD6                            
0000ABD6                            ; ---------------------------------------------------------------------------
0000ABD6                            ; Sprite mappings - monitors
0000ABD6                            ; ---------------------------------------------------------------------------
0000ABD6                            Map_obj26:
0000ABD6                            	include "_maps\obj26.asm"
0000ABD6                            ; ================================================================================
0000ABD6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ABD6                            ; ================================================================================
0000ABD6                            
0000ABD6                            DATAY1U343IF3L:
0000ABD6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ABDA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ABDE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ABE2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000ABE6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000ABEA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000ABEE 05                         DATAY1U343IF3L_0: dc.b $5
0000ABEF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABF4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABF9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABFE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC03 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC08 06                         DATAY1U343IF3L_1: dc.b $6
0000AC09 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC0E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC13 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC18 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC1D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC22 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC27 05                         DATAY1U343IF3L_2: dc.b $5
0000AC28 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC2D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC32 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC37 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC3C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC41 05                         DATAY1U343IF3L_3: dc.b $5
0000AC42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC5B 06                         DATAY1U343IF3L_4: dc.b $6
0000AC5C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AC61 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC66 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC6B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC70 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC75 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC7A 06                         DATAY1U343IF3L_5: dc.b $6
0000AC7B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AC80 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC85 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC8A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC8F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC94 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC99 06                         DATAY1U343IF3L_6: dc.b $6
0000AC9A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AC9F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACA4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACA9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACAE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACB3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACB8 06                         DATAY1U343IF3L_7: dc.b $6
0000ACB9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000ACBE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACC3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACC8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACCD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACD2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACD7 06                         DATAY1U343IF3L_8: dc.b $6
0000ACD8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000ACDD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACE2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACE7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACEC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACF1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACF6 06                         DATAY1U343IF3L_9: dc.b $6
0000ACF7 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ACFC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD01 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD06 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD0B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD10 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD15 05                         DATAY1U343IF3L_A: dc.b $5
0000AD16 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD1B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD20 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD25 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD2A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD2F 01                         DATAY1U343IF3L_B: dc.b $1
0000AD30 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AD36 00                         	even
0000AD36 00                         	even
0000AD36                            
0000AD36                            ; ===========================================================================
0000AD36                            ; ---------------------------------------------------------------------------
0000AD36                            ; Object 0E - Sonic on the title screen
0000AD36                            ; ---------------------------------------------------------------------------
0000AD36                            
0000AD36                            Obj0E:					; XREF: Obj_Index
0000AD36 7000                       		moveq	#0,d0
0000AD38 1028 0024                  		move.b	$24(a0),d0
0000AD3C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD40 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD44                            ; ===========================================================================
0000AD44 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD46 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD48 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AD4A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AD4C 5428 0024                  		addq.b	#2,$24(a0)
0000AD50 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AD56 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AD5C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AD64 317C 2300 0002             		move.w	#$2300,2(a0)
0000AD6A 117C 0001 0018             		move.b	#1,$18(a0)
0000AD70 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AD76 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD7C 6100 0000                  		bsr.w	AnimateSprite
0000AD80                            
0000AD80                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AD80 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AD84 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AD86 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AD8A 6000 0000                  		bra.w	DisplaySprite
0000AD8E                            ; ===========================================================================
0000AD8E                            
0000AD8E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AD8E 4E75                       		rts	
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            Obj0E_Move:				; XREF: Obj0E_Index
0000AD90 5168 000A                  		subq.w	#8,$A(a0)
0000AD94 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AD9A 6600                       		bne.s	Obj0E_Display
0000AD9C 5428 0024                  		addq.b	#2,$24(a0)
0000ADA0                            
0000ADA0                            Obj0E_Display:
0000ADA0 6000 0000                  		bra.w	DisplaySprite
0000ADA4                            ; ===========================================================================
0000ADA4 4E75                       		rts	
0000ADA6                            ; ===========================================================================
0000ADA6                            
0000ADA6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ADA6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADAC 6100 0000                  		bsr.w	AnimateSprite
0000ADB0 6000 0000                  		bra.w	DisplaySprite
0000ADB4                            ; ===========================================================================
0000ADB4 4E75                       		rts	
0000ADB6                            ; ===========================================================================
0000ADB6                            ; ---------------------------------------------------------------------------
0000ADB6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ADB6                            ; ---------------------------------------------------------------------------
0000ADB6                            
0000ADB6                            Obj0F:					; XREF: Obj_Index
0000ADB6 7000                       		moveq	#0,d0
0000ADB8 1028 0024                  		move.b	$24(a0),d0
0000ADBC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ADC0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ADC4 6000 0000                  		bra.w	DisplaySprite
0000ADC8                            ; ===========================================================================
0000ADC8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ADCA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ADCC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ADCE                            ; ===========================================================================
0000ADCE                            
0000ADCE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ADCE 5428 0024                  		addq.b	#2,$24(a0)
0000ADD2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ADD8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ADDE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ADE6 317C 0200 0002             		move.w	#$200,2(a0)
0000ADEC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000ADF2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000ADF4 5428 0024                  		addq.b	#2,$24(a0)
0000ADF8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000ADFE 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE00 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE06 317C 0170 0008             		move.w	#$170,8(a0)
0000AE0C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE12                            
0000AE12                            locret_A6F8:				; XREF: Obj0F_Index
0000AE12 4E75                       		rts	
0000AE14                            ; ===========================================================================
0000AE14                            
0000AE14                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE14 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE1A 6000 0000                  		bra.w	AnimateSprite
0000AE1E                            ; ===========================================================================
0000AE1E                            Ani_obj0E:
0000AE1E                            	include "_anim\obj0E.asm"
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            ; Animation script - Sonic on the title screen
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E 0000                       		dc.w byte_A706-Ani_obj0E
0000AE20 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE2C                            		even
0000AE2C                            		even
0000AE2C                            
0000AE2C                            Ani_obj0F:
0000AE2C                            	include "_anim\obj0F.asm"
0000AE2C                            ; ---------------------------------------------------------------------------
0000AE2C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE2C                            ; ---------------------------------------------------------------------------
0000AE2C 0000                       		dc.w byte_A714-Ani_obj0F
0000AE2E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE32                            		even
0000AE32                            		even
0000AE32                            
0000AE32                            ; ---------------------------------------------------------------------------
0000AE32                            ; Subroutine to	animate	a sprite using an animation script
0000AE32                            ; ---------------------------------------------------------------------------
0000AE32                            
0000AE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE32                            
0000AE32                            
0000AE32                            AnimateSprite:
0000AE32 7000                       		moveq	#0,d0
0000AE34 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE38 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE3C 6700                       		beq.s	Anim_Run	; if not, branch
0000AE3E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE42 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE48 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AE4E                            
0000AE4E                            Anim_Run:
0000AE4E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AE52 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AE54 D040                       		add.w	d0,d0
0000AE56 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AE5A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AE5E 7200                       		moveq	#0,d1
0000AE60 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AE64 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AE68 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AE6A                            
0000AE6A                            Anim_Next:
0000AE6A 1200                       		move.b	d0,d1
0000AE6C 0200 001F                  		andi.b	#$1F,d0
0000AE70 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AE74 1028 0022                  		move.b	$22(a0),d0
0000AE78 E719                       		rol.b	#3,d1
0000AE7A B101                       		eor.b	d0,d1
0000AE7C 0201 0003                  		andi.b	#3,d1
0000AE80 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AE86 8328 0001                  		or.b	d1,1(a0)
0000AE8A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AE8E                            
0000AE8E                            Anim_Wait:
0000AE8E 4E75                       		rts	
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            Anim_End_FF:
0000AE90 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AE92 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AE94 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AE9A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AE9E 60CA                       		bra.s	Anim_Next
0000AEA0                            ; ===========================================================================
0000AEA0                            
0000AEA0                            Anim_End_FE:
0000AEA0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AEA2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AEA4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AEA8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AEAC 9200                       		sub.b	d0,d1
0000AEAE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AEB2 60B6                       		bra.s	Anim_Next
0000AEB4                            ; ===========================================================================
0000AEB4                            
0000AEB4                            Anim_End_FD:
0000AEB4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AEB6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AEB8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AEBE                            
0000AEBE                            Anim_End_FC:
0000AEBE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AEC0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AEC2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AEC6                            
0000AEC6                            Anim_End_FB:
0000AEC6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AEC8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AECA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AED0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AED4                            
0000AED4                            Anim_End_FA:
0000AED4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AED6 6600                       		bne.s	Anim_End	; if not, branch
0000AED8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AEDC                            
0000AEDC                            Anim_End:
0000AEDC 4E75                       		rts	
0000AEDE                            ; End of function AnimateSprite
0000AEDE                            
0000AEDE                            ; ===========================================================================
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            Map_obj0F:
0000AEDE                            	include "_maps\obj0F.asm"
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE 0000                       		dc.w byte_A7CD-Map_obj0F
0000AEE0 0000                       		dc.w byte_A7CC-Map_obj0F
0000AEE2 0000                       		dc.w byte_A7EB-Map_obj0F
0000AEE4 0000                       		dc.w byte_A882-Map_obj0F
0000AEE6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AEE7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AEEC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AEF1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AEF6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AEFB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF00 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF05 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF06 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF0B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF10 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF15 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF1A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF1F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF24 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF29 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF2E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF33 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF38 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF3D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF42 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF47 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF4C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF51 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF56 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF5B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF60 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF65 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF6A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF6F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF74 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF79 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF7E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF83 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF88 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF8D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF92 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF97 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF9C 01                         byte_A882:	dc.b 1			; "TM"
0000AF9D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AFA2                            		even
0000AFA2                            		even
0000AFA2                            
0000AFA2                            ; ---------------------------------------------------------------------------
0000AFA2                            ; Sprite mappings - Sonic on the title screen
0000AFA2                            ; ---------------------------------------------------------------------------
0000AFA2                            Map_obj0E:
0000AFA2                            	include "_maps\obj0E.asm"
0000AFA2                            ; ================================================================================
0000AFA2                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AFA2                            ; ================================================================================
0000AFA2                            
0000AFA2                            DATAGKI0HYDQBXP:
0000AFA2 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AFA6 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AFAA 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AFAE 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AFB2 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AFB3 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AFB8 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AFBD 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AFC2 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AFC7 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AFCC 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AFD1 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AFD6 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AFDB 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AFDC 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AFE1 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AFE6 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AFEB 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AFF0 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AFF5 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AFFA 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AFFF 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B004 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B009 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B00E 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B013 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B014 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B019 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B01E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B023 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B028 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B02D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B032 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B037 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B03C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B041 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B046 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B04B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B04C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B051 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B056 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B05B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B060 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B065 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B06A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B06F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B074 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B079 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B07E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B07F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B084 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B089 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B08E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B093 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B098 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B09D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B0A2 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B0A7 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B0AC 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B0B1 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B0B6 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B0BB 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B0C0 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B0C5 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B0CA 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B0CF 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B0D0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B0D5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B0DA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B0DF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B0E4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B0E9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B0EE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B0F3 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B0F8 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B0FD 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B102 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B107 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B108 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B10D 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B112 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B117 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B11C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B121 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B126 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B12B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B130 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B135 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B13A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B13F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B144 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B149 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B14E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B153 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B154 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B159 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B15E 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B163 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B168 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B16D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B172 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B177 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B17C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B181 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B186 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B18B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B190 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B195 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B19A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B1A0 00                         	even
0000B1A0 00                         	even
0000B1A0                            
0000B1A0                            ; ===========================================================================
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            ; Object 2B - Chopper enemy (GHZ)
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            
0000B1A0                            Obj2B:					; XREF: Obj_Index
0000B1A0 7000                       		moveq	#0,d0
0000B1A2 1028 0024                  		move.b	$24(a0),d0
0000B1A6 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B1AA 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B1AE 6000 0000                  		bra.w	MarkObjGone
0000B1B2                            ; ===========================================================================
0000B1B2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B1B4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B1B6                            ; ===========================================================================
0000B1B6                            
0000B1B6                            Obj2B_Main:				; XREF: Obj2B_Index
0000B1B6 5428 0024                  		addq.b	#2,$24(a0)
0000B1BA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B1C2 317C 047B 0002             		move.w	#$47B,2(a0)
0000B1C8 117C 0004 0001             		move.b	#4,1(a0)
0000B1CE 117C 0004 0018             		move.b	#4,$18(a0)
0000B1D4 117C 0009 0020             		move.b	#9,$20(a0)
0000B1DA 117C 0010 0019             		move.b	#$10,$19(a0)
0000B1E0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B1E6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B1EC                            
0000B1EC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B1EC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B1F2 6100 FC3E                  		bsr.w	AnimateSprite
0000B1F6 6100 0000                  		bsr.w	SpeedToPos
0000B1FA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B200 3028 0030                  		move.w	$30(a0),d0
0000B204 B068 000C                  		cmp.w	$C(a0),d0
0000B208 6400                       		bcc.s	Obj2B_ChgAni
0000B20A 3140 000C                  		move.w	d0,$C(a0)
0000B20E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B214                            
0000B214                            Obj2B_ChgAni:
0000B214 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B21A 0440 00C0                  		subi.w	#$C0,d0
0000B21E B068 000C                  		cmp.w	$C(a0),d0
0000B222 6400                       		bcc.s	locret_ABB6
0000B224 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B22A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B22E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B230 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B236                            
0000B236                            locret_ABB6:
0000B236 4E75                       		rts	
0000B238                            ; ===========================================================================
0000B238                            Ani_obj2B:
0000B238                            	include "_anim\obj2B.asm"
0000B238                            ; ---------------------------------------------------------------------------
0000B238                            ; Animation script - Chopper enemy
0000B238                            ; ---------------------------------------------------------------------------
0000B238 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B23A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B23C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B23E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B242 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B246 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B24A 00                         		even
0000B24A 00                         		even
0000B24A                            
0000B24A                            ; ---------------------------------------------------------------------------
0000B24A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B24A                            ; ---------------------------------------------------------------------------
0000B24A                            Map_obj2B:
0000B24A                            	include "_maps\obj2B.asm"
0000B24A                            Map_1ff1:
0000B24A 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B24C 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B24E 02                         Map_1ff1_4: 	dc.b $2
0000B24F E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B254 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B259 02                         Map_1ff1_F: 	dc.b $2
0000B25A E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B25F 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B264                            	even
0000B264                            	even
0000B264                            
0000B264                            ; ===========================================================================
0000B264                            ; ---------------------------------------------------------------------------
0000B264                            ; Object 2C - Jaws enemy (LZ)
0000B264                            ; ---------------------------------------------------------------------------
0000B264                            
0000B264                            Obj2C:					; XREF: Obj_Index
0000B264 7000                       		moveq	#0,d0
0000B266 1028 0024                  		move.b	$24(a0),d0
0000B26A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B26E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B272                            ; ===========================================================================
0000B272 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B274 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B276                            ; ===========================================================================
0000B276                            
0000B276                            Obj2C_Main:				; XREF: Obj2C_Index
0000B276 5428 0024                  		addq.b	#2,$24(a0)
0000B27A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B282 317C 2486 0002             		move.w	#$2486,2(a0)
0000B288 0028 0004 0001             		ori.b	#4,1(a0)
0000B28E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B294 117C 0004 0018             		move.b	#4,$18(a0)
0000B29A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B2A0 7000                       		moveq	#0,d0
0000B2A2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B2A6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B2A8 5340                       		subq.w	#1,d0
0000B2AA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B2AE 3140 0032                  		move.w	d0,$32(a0)
0000B2B2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B2B8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B2BE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B2C0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B2C4                            
0000B2C4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B2C4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B2C8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B2CA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B2D0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B2D4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B2DA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B2E0                            
0000B2E0                            Obj2C_Animate:
0000B2E0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B2E6 6100 FB4A                  		bsr.w	AnimateSprite
0000B2EA 6100 0000                  		bsr.w	SpeedToPos
0000B2EE 6000 0000                  		bra.w	MarkObjGone
0000B2F2                            ; ===========================================================================
0000B2F2                            Ani_obj2C:
0000B2F2                            	include "_anim\obj2C.asm"
0000B2F2                            ; ---------------------------------------------------------------------------
0000B2F2                            ; Animation script - Jaws enemy
0000B2F2                            ; ---------------------------------------------------------------------------
0000B2F2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B2F4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B2FA                            		even
0000B2FA                            		even
0000B2FA                            
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Sprite mappings - Jaws enemy (LZ)
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            Map_obj2C:
0000B2FA                            	include "_maps\obj2C.asm"
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Sprite mappings - Jaws enemy (LZ)
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA 0000                       		dc.w byte_AC78-Map_obj2C
0000B2FC 0000                       		dc.w byte_AC83-Map_obj2C
0000B2FE 0000                       		dc.w byte_AC8E-Map_obj2C
0000B300 0000                       		dc.w byte_AC99-Map_obj2C
0000B302 02                         byte_AC78:	dc.b 2
0000B303 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B308 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B30D 02                         byte_AC83:	dc.b 2
0000B30E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B313 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B318 02                         byte_AC8E:	dc.b 2
0000B319 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B31E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B323 02                         byte_AC99:	dc.b 2
0000B324 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B329 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B32E                            		even
0000B32E                            		even
0000B32E                            
0000B32E                            ; ===========================================================================
0000B32E                            ; ---------------------------------------------------------------------------
0000B32E                            ; Object 2D - Burrobot enemy (LZ)
0000B32E                            ; ---------------------------------------------------------------------------
0000B32E                            
0000B32E                            Obj2D:					; XREF: Obj_Index
0000B32E 7000                       		moveq	#0,d0
0000B330 1028 0024                  		move.b	$24(a0),d0
0000B334 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B338 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B33C                            ; ===========================================================================
0000B33C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B33E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B340                            ; ===========================================================================
0000B340                            
0000B340                            Obj2D_Main:				; XREF: Obj2D_Index
0000B340 5428 0024                  		addq.b	#2,$24(a0)
0000B344 117C 0013 0016             		move.b	#$13,$16(a0)
0000B34A 117C 0008 0017             		move.b	#8,$17(a0)
0000B350 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B358 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B35E 0028 0004 0001             		ori.b	#4,1(a0)
0000B364 117C 0004 0018             		move.b	#4,$18(a0)
0000B36A 117C 0005 0020             		move.b	#5,$20(a0)
0000B370 117C 000C 0019             		move.b	#$C,$19(a0)
0000B376 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B37A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B380                            
0000B380                            Obj2D_Action:				; XREF: Obj2D_Index
0000B380 7000                       		moveq	#0,d0
0000B382 1028 0025                  		move.b	$25(a0),d0
0000B386 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B38A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B38E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B394 6100 FA9C                  		bsr.w	AnimateSprite
0000B398 6000 0000                  		bra.w	MarkObjGone
0000B39C                            ; ===========================================================================
0000B39C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B39E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B3A0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B3A2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B3A4                            ; ===========================================================================
0000B3A4                            
0000B3A4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B3A4 5368 0030                  		subq.w	#1,$30(a0)
0000B3A8 6A00                       		bpl.s	locret_AD42
0000B3AA 5428 0025                  		addq.b	#2,$25(a0)
0000B3AE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B3B4 317C 0080 0010             		move.w	#$80,$10(a0)
0000B3BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B3C0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B3C6 6700                       		beq.s	locret_AD42
0000B3C8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B3CC                            
0000B3CC                            locret_AD42:
0000B3CC 4E75                       		rts	
0000B3CE                            ; ===========================================================================
0000B3CE                            
0000B3CE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B3CE 5368 0030                  		subq.w	#1,$30(a0)
0000B3D2 6B00                       		bmi.s	loc_AD84
0000B3D4 6100 0000                  		bsr.w	SpeedToPos
0000B3D8 0868 0000 0032             		bchg	#0,$32(a0)
0000B3DE 6600                       		bne.s	loc_AD78
0000B3E0 3628 0008                  		move.w	8(a0),d3
0000B3E4 0643 000C                  		addi.w	#$C,d3
0000B3E8 0828 0000 0022             		btst	#0,$22(a0)
0000B3EE 6600                       		bne.s	loc_AD6A
0000B3F0 0443 0018                  		subi.w	#$18,d3
0000B3F4                            
0000B3F4                            loc_AD6A:
0000B3F4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B3FA 0C41 000C                  		cmpi.w	#$C,d1
0000B3FE 6C00                       		bge.s	loc_AD84
0000B400 4E75                       		rts	
0000B402                            ; ===========================================================================
0000B402                            
0000B402                            loc_AD78:				; XREF: Obj2D_Move
0000B402 4EB9 0000 0000             		jsr	ObjHitFloor
0000B408 D368 000C                  		add.w	d1,$C(a0)
0000B40C 4E75                       		rts	
0000B40E                            ; ===========================================================================
0000B40E                            
0000B40E                            loc_AD84:				; XREF: Obj2D_Move
0000B40E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B414 6700                       		beq.s	loc_ADA4
0000B416 5528 0025                  		subq.b	#2,$25(a0)
0000B41A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B420 317C 0000 0010             		move.w	#0,$10(a0)
0000B426 117C 0000 001C             		move.b	#0,$1C(a0)
0000B42C 4E75                       		rts	
0000B42E                            ; ===========================================================================
0000B42E                            
0000B42E                            loc_ADA4:
0000B42E 5428 0025                  		addq.b	#2,$25(a0)
0000B432 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B438 117C 0002 001C             		move.b	#2,$1C(a0)
0000B43E 4E75                       		rts	
0000B440                            ; ===========================================================================
0000B440                            
0000B440                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B440 6100 0000                  		bsr.w	SpeedToPos
0000B444 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B44A 6B00                       		bmi.s	locret_ADF0
0000B44C 117C 0003 001C             		move.b	#3,$1C(a0)
0000B452 4EB9 0000 0000             		jsr	ObjHitFloor
0000B458 4A41                       		tst.w	d1
0000B45A 6A00                       		bpl.s	locret_ADF0
0000B45C D368 000C                  		add.w	d1,$C(a0)
0000B460 317C 0000 0012             		move.w	#0,$12(a0)
0000B466 117C 0001 001C             		move.b	#1,$1C(a0)
0000B46C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B472 5528 0025                  		subq.b	#2,$25(a0)
0000B476 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B47A                            
0000B47A                            locret_ADF0:
0000B47A 4E75                       		rts	
0000B47C                            ; ===========================================================================
0000B47C                            
0000B47C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B47C 343C 0060                  		move.w	#$60,d2
0000B480 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B484 6400                       		bcc.s	locret_AE20
0000B486 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B48A 9068 000C                  		sub.w	$C(a0),d0
0000B48E 6400                       		bcc.s	locret_AE20
0000B490 0C40 FF80                  		cmpi.w	#-$80,d0
0000B494 6500                       		bcs.s	locret_AE20
0000B496 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B49A 6600                       		bne.s	locret_AE20
0000B49C 5528 0025                  		subq.b	#2,$25(a0)
0000B4A0 3141 0010                  		move.w	d1,$10(a0)
0000B4A4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4AA                            
0000B4AA                            locret_AE20:
0000B4AA 4E75                       		rts	
0000B4AC                            
0000B4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4AC                            
0000B4AC                            
0000B4AC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B4AC 323C 0080                  		move.w	#$80,d1
0000B4B0 08E8 0000 0022             		bset	#0,$22(a0)
0000B4B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000B4BA 9068 0008                  		sub.w	8(a0),d0
0000B4BE 6400                       		bcc.s	loc_AE40
0000B4C0 4440                       		neg.w	d0
0000B4C2 4441                       		neg.w	d1
0000B4C4 08A8 0000 0022             		bclr	#0,$22(a0)
0000B4CA                            
0000B4CA                            loc_AE40:
0000B4CA B042                       		cmp.w	d2,d0
0000B4CC 4E75                       		rts	
0000B4CE                            ; End of function Obj2D_ChkSonic2
0000B4CE                            
0000B4CE                            ; ===========================================================================
0000B4CE                            Ani_obj2D:
0000B4CE                            	include "_anim\obj2D.asm"
0000B4CE                            ; ---------------------------------------------------------------------------
0000B4CE                            ; Animation script - Burrobot enemy but craig
0000B4CE                            ; ---------------------------------------------------------------------------
0000B4CE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B4D0 0000                       		dc.w byte_AE50-Ani_obj2D
0000B4D2 0000                       		dc.w byte_AE54-Ani_obj2D
0000B4D4 0000                       		dc.w byte_AE58-Ani_obj2D
0000B4D6 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B4D9 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B4DD 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B4EB 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B4EE                            		even
0000B4EE                            		even
0000B4EE                            
0000B4EE                            ; ---------------------------------------------------------------------------
0000B4EE                            ; Sprite mappings - Burrobot enemy (LZ)
0000B4EE                            ; ---------------------------------------------------------------------------
0000B4EE                            Map_obj2D:
0000B4EE                            	include "_maps\obj2D.asm"
0000B4EE                            Map_e3a3:
0000B4EE 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B4F0 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B4F2 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B4F4 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B4F6 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B4F8 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B4FA 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B4FC 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B4FE 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B500 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B502 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B504 02                         Map_e3a3_16: 	dc.b $2
0000B505 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B50A 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B50F 02                         Map_e3a3_21: 	dc.b $2
0000B510 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B515 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B51A 02                         Map_e3a3_2C: 	dc.b $2
0000B51B EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B520 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B525 02                         Map_e3a3_37: 	dc.b $2
0000B526 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B52B FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B530 02                         Map_e3a3_42: 	dc.b $2
0000B531 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B536 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B53B 02                         Map_e3a3_4D: 	dc.b $2
0000B53C EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B541 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B546 02                         Map_e3a3_58: 	dc.b $2
0000B547 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B54C FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B551 02                         Map_e3a3_63: 	dc.b $2
0000B552 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B557 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B55C 02                         Map_e3a3_6E: 	dc.b $2
0000B55D EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B562 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B567 02                         Map_e3a3_79: 	dc.b $2
0000B568 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B56D 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B572 02                         Map_e3a3_84: 	dc.b $2
0000B573 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B578 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B57E 00                         	even
0000B57E 00                         	even
0000B57E                            
0000B57E                            ; ===========================================================================
0000B57E                            ; ---------------------------------------------------------------------------
0000B57E                            ; Object 2F - large moving platforms (MZ)
0000B57E                            ; ---------------------------------------------------------------------------
0000B57E                            
0000B57E                            Obj2F:					; XREF: Obj_Index
0000B57E 7000                       		moveq	#0,d0
0000B580 1028 0024                  		move.b	$24(a0),d0
0000B584 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B588 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B58C                            ; ===========================================================================
0000B58C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B58E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B590                            
0000B590 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B592 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B594 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B596 0140                       		dc.b 1,	$40
0000B598 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B59A 0220                       		dc.b 2,	$20
0000B59C                            ; ===========================================================================
0000B59C                            
0000B59C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B59C 5428 0024                  		addq.b	#2,$24(a0)
0000B5A0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B5A8 317C C000 0002             		move.w	#$C000,2(a0)
0000B5AE 117C 0004 0001             		move.b	#4,1(a0)
0000B5B4 117C 0005 0018             		move.b	#5,$18(a0)
0000B5BA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B5C0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B5C6 7000                       		moveq	#0,d0
0000B5C8 1028 0028                  		move.b	$28(a0),d0
0000B5CC E448                       		lsr.w	#2,d0
0000B5CE 0240 001C                  		andi.w	#$1C,d0
0000B5D2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B5D6 3019                       		move.w	(a1)+,d0
0000B5D8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B5DC 214A 0030                  		move.l	a2,$30(a0)
0000B5E0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B5E4 1151 0019                  		move.b	(a1),$19(a0)
0000B5E8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B5EE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B5F4 08E8 0004 0001             		bset	#4,1(a0)
0000B5FA                            
0000B5FA                            Obj2F_Action:				; XREF: Obj2F_Index
0000B5FA 6100 0000                  		bsr.w	Obj2F_Types
0000B5FE 4A28 0025                  		tst.b	$25(a0)
0000B602 6700                       		beq.s	Obj2F_Solid
0000B604 7200                       		moveq	#0,d1
0000B606 1228 0019                  		move.b	$19(a0),d1
0000B60A 0641 000B                  		addi.w	#$B,d1
0000B60E 6100 C560                  		bsr.w	ExitPlatform
0000B612 0829 0003 0022             		btst	#3,$22(a1)
0000B618 6600 0000                  		bne.w	Obj2F_Slope
0000B61C 4228 0025                  		clr.b	$25(a0)
0000B620 6000                       		bra.s	Obj2F_Display
0000B622                            ; ===========================================================================
0000B622                            
0000B622                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B622 7200                       		moveq	#0,d1
0000B624 1228 0019                  		move.b	$19(a0),d1
0000B628 0641 000B                  		addi.w	#$B,d1
0000B62C 2468 0030                  		movea.l	$30(a0),a2
0000B630 3428 0008                  		move.w	8(a0),d2
0000B634 6100 D52A                  		bsr.w	SlopeObject2
0000B638 6000                       		bra.s	Obj2F_Display
0000B63A                            ; ===========================================================================
0000B63A                            
0000B63A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B63A 7200                       		moveq	#0,d1
0000B63C 1228 0019                  		move.b	$19(a0),d1
0000B640 0641 000B                  		addi.w	#$B,d1
0000B644 343C 0020                  		move.w	#$20,d2
0000B648 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B64E 6600                       		bne.s	loc_AF8E
0000B650 343C 0030                  		move.w	#$30,d2
0000B654                            
0000B654                            loc_AF8E:
0000B654 2468 0030                  		movea.l	$30(a0),a2
0000B658 6100 0000                  		bsr.w	SolidObject2F
0000B65C                            
0000B65C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B65C 6100 0000                  		bsr.w	DisplaySprite
0000B660 6000 0000                  		bra.w	Obj2F_ChkDel
0000B664                            
0000B664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B664                            
0000B664                            
0000B664                            Obj2F_Types:				; XREF: Obj2F_Action
0000B664 7000                       		moveq	#0,d0
0000B666 1028 0028                  		move.b	$28(a0),d0
0000B66A 0240 0007                  		andi.w	#7,d0
0000B66E D040                       		add.w	d0,d0
0000B670 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B674 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B678                            ; End of function Obj2F_Types
0000B678                            
0000B678                            ; ===========================================================================
0000B678 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B67A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B67C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B67E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B680 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B682 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B684                            ; ===========================================================================
0000B684                            
0000B684                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B684 4E75                       		rts			; type 00 platform doesn't move
0000B686                            ; ===========================================================================
0000B686                            
0000B686                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B686 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B68A 323C 0020                  		move.w	#$20,d1
0000B68E 6000                       		bra.s	Obj2F_Move
0000B690                            ; ===========================================================================
0000B690                            
0000B690                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B690 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B694 323C 0030                  		move.w	#$30,d1
0000B698 6000                       		bra.s	Obj2F_Move
0000B69A                            ; ===========================================================================
0000B69A                            
0000B69A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B69A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B69E 323C 0040                  		move.w	#$40,d1
0000B6A2 6000                       		bra.s	Obj2F_Move
0000B6A4                            ; ===========================================================================
0000B6A4                            
0000B6A4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B6A4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B6A8 323C 0060                  		move.w	#$60,d1
0000B6AC                            
0000B6AC                            Obj2F_Move:
0000B6AC 0828 0003 0028             		btst	#3,$28(a0)
0000B6B2 6700                       		beq.s	loc_AFF2
0000B6B4 4440                       		neg.w	d0
0000B6B6 D041                       		add.w	d1,d0
0000B6B8                            
0000B6B8                            loc_AFF2:
0000B6B8 3228 002C                  		move.w	$2C(a0),d1
0000B6BC 9240                       		sub.w	d0,d1
0000B6BE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B6C2 4E75                       		rts	
0000B6C4                            ; ===========================================================================
0000B6C4                            
0000B6C4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B6C4 1028 0034                  		move.b	$34(a0),d0
0000B6C8 4A28 0025                  		tst.b	$25(a0)
0000B6CC 6600                       		bne.s	loc_B010
0000B6CE 5500                       		subq.b	#2,d0
0000B6D0 6400                       		bcc.s	loc_B01C
0000B6D2 7000                       		moveq	#0,d0
0000B6D4 6000                       		bra.s	loc_B01C
0000B6D6                            ; ===========================================================================
0000B6D6                            
0000B6D6                            loc_B010:
0000B6D6 5800                       		addq.b	#4,d0
0000B6D8 0C00 0040                  		cmpi.b	#$40,d0
0000B6DC 6500                       		bcs.s	loc_B01C
0000B6DE 103C 0040                  		move.b	#$40,d0
0000B6E2                            
0000B6E2                            loc_B01C:
0000B6E2 1140 0034                  		move.b	d0,$34(a0)
0000B6E6 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B6EC E848                       		lsr.w	#4,d0
0000B6EE 3200                       		move.w	d0,d1
0000B6F0 D068 002C                  		add.w	$2C(a0),d0
0000B6F4 3140 000C                  		move.w	d0,$C(a0)
0000B6F8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B6FE 6600                       		bne.s	loc_B07A
0000B700 4A28 0035                  		tst.b	$35(a0)
0000B704 6600                       		bne.s	loc_B07A
0000B706 117C 0001 0035             		move.b	#1,$35(a0)
0000B70C 6100 0000                  		bsr.w	SingleObjLoad2
0000B710 6600                       		bne.s	loc_B07A
0000B712 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B716 3368 0008 0008             		move.w	8(a0),8(a1)
0000B71C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B722 5069 002C                  		addq.w	#8,$2C(a1)
0000B726 5769 002C                  		subq.w	#3,$2C(a1)
0000B72A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B730 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B736 2348 0038                  		move.l	a0,$38(a1)
0000B73A 2448                       		movea.l	a0,a2
0000B73C 6100                       		bsr.s	sub_B09C
0000B73E                            
0000B73E                            loc_B07A:
0000B73E 7400                       		moveq	#0,d2
0000B740 45E8 0036                  		lea	$36(a0),a2
0000B744 141A                       		move.b	(a2)+,d2
0000B746 5302                       		subq.b	#1,d2
0000B748 6500                       		bcs.s	locret_B09A
0000B74A                            
0000B74A                            loc_B086:
0000B74A 7000                       		moveq	#0,d0
0000B74C 101A                       		move.b	(a2)+,d0
0000B74E ED48                       		lsl.w	#6,d0
0000B750 0640 D000                  		addi.w	#-$3000,d0
0000B754 3240                       		movea.w	d0,a1
0000B756 3341 003C                  		move.w	d1,$3C(a1)
0000B75A 51CA FFEE                  		dbf	d2,loc_B086
0000B75E                            
0000B75E                            locret_B09A:
0000B75E 4E75                       		rts	
0000B760                            
0000B760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B760                            
0000B760                            
0000B760                            sub_B09C:
0000B760 45EA 0036                  		lea	$36(a2),a2
0000B764 7000                       		moveq	#0,d0
0000B766 1012                       		move.b	(a2),d0
0000B768 5212                       		addq.b	#1,(a2)
0000B76A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B76E 3009                       		move.w	a1,d0
0000B770 0440 D000                  		subi.w	#-$3000,d0
0000B774 EC48                       		lsr.w	#6,d0
0000B776 0240 007F                  		andi.w	#$7F,d0
0000B77A 1480                       		move.b	d0,(a2)
0000B77C 4E75                       		rts	
0000B77E                            ; End of function sub_B09C
0000B77E                            
0000B77E                            ; ===========================================================================
0000B77E                            
0000B77E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B77E 4A28 0035                  		tst.b	$35(a0)
0000B782 6700                       		beq.s	loc_B0C6
0000B784 4A28 0001                  		tst.b	1(a0)
0000B788 6A00                       		bpl.s	Obj2F_DelFlames
0000B78A                            
0000B78A                            loc_B0C6:
0000B78A 3028 002A                  		move.w	$2A(a0),d0
0000B78E 0240 FF80                  		andi.w	#$FF80,d0
0000B792 3238 F700                  		move.w	($FFFFF700).w,d1
0000B796 0441 0080                  		subi.w	#$80,d1
0000B79A 0241 FF80                  		andi.w	#$FF80,d1
0000B79E 9041                       		sub.w	d1,d0
0000B7A0 0C40 0280                  		cmpi.w	#$280,d0
0000B7A4 6200 0000                  		bhi.w	DeleteObject
0000B7A8 4E75                       		rts	
0000B7AA                            ; ===========================================================================
0000B7AA                            
0000B7AA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B7AA 7400                       		moveq	#0,d2
0000B7AC                            
0000B7AC                            loc_B0E8:
0000B7AC 45E8 0036                  		lea	$36(a0),a2
0000B7B0 1412                       		move.b	(a2),d2
0000B7B2 421A                       		clr.b	(a2)+
0000B7B4 5302                       		subq.b	#1,d2
0000B7B6 6500                       		bcs.s	locret_B116
0000B7B8                            
0000B7B8                            loc_B0F4:
0000B7B8 7000                       		moveq	#0,d0
0000B7BA 1012                       		move.b	(a2),d0
0000B7BC 421A                       		clr.b	(a2)+
0000B7BE ED48                       		lsl.w	#6,d0
0000B7C0 0640 D000                  		addi.w	#-$3000,d0
0000B7C4 3240                       		movea.w	d0,a1
0000B7C6 6100 0000                  		bsr.w	DeleteObject2
0000B7CA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B7CE 117C 0000 0035             		move.b	#0,$35(a0)
0000B7D4 117C 0000 0034             		move.b	#0,$34(a0)
0000B7DA                            
0000B7DA                            locret_B116:
0000B7DA 4E75                       		rts	
0000B7DC                            ; ===========================================================================
0000B7DC                            ; ---------------------------------------------------------------------------
0000B7DC                            ; Collision data for large moving platforms (MZ)
0000B7DC                            ; ---------------------------------------------------------------------------
0000B7DC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B828                            		even
0000B828                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B854                            		even
0000B854                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B8A0                            		even
0000B8A0                            ; ===========================================================================
0000B8A0                            ; ---------------------------------------------------------------------------
0000B8A0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B8A0                            ; (appears when	you walk on sinking platforms)
0000B8A0                            ; ---------------------------------------------------------------------------
0000B8A0                            
0000B8A0                            Obj35:					; XREF: Obj_Index
0000B8A0 7000                       		moveq	#0,d0
0000B8A2 1028 0024                  		move.b	$24(a0),d0
0000B8A6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B8AA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B8AE                            ; ===========================================================================
0000B8AE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B8B0 0000                       		dc.w loc_B238-Obj35_Index
0000B8B2 0000                       		dc.w Obj35_Move-Obj35_Index
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj35_Main:				; XREF: Obj35_Index
0000B8B4 5428 0024                  		addq.b	#2,$24(a0)
0000B8B8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B8C0 317C 0345 0002             		move.w	#$345,2(a0)
0000B8C6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B8CC 117C 0004 0001             		move.b	#4,1(a0)
0000B8D2 117C 0001 0018             		move.b	#1,$18(a0)
0000B8D8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B8DE 117C 0008 0019             		move.b	#8,$19(a0)
0000B8E4 303C 00C8                  		move.w	#$C8,d0
0000B8E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B8EE 4A28 0028                  		tst.b	$28(a0)
0000B8F2 6700                       		beq.s	loc_B238
0000B8F4 5428 0024                  		addq.b	#2,$24(a0)
0000B8F8 6000 0000                  		bra.w	Obj35_Move
0000B8FC                            ; ===========================================================================
0000B8FC                            
0000B8FC                            loc_B238:				; XREF: Obj35_Index
0000B8FC 2268 0030                  		movea.l	$30(a0),a1
0000B900 3228 0008                  		move.w	8(a0),d1
0000B904 9268 002A                  		sub.w	$2A(a0),d1
0000B908 0641 000C                  		addi.w	#$C,d1
0000B90C 3001                       		move.w	d1,d0
0000B90E E248                       		lsr.w	#1,d0
0000B910 1031 0000                  		move.b	(a1,d0.w),d0
0000B914 4440                       		neg.w	d0
0000B916 D068 002C                  		add.w	$2C(a0),d0
0000B91A 3400                       		move.w	d0,d2
0000B91C D068 003C                  		add.w	$3C(a0),d0
0000B920 3140 000C                  		move.w	d0,$C(a0)
0000B924 0C41 0084                  		cmpi.w	#$84,d1
0000B928 6400                       		bcc.s	loc_B2B0
0000B92A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B932 0C41 0080                  		cmpi.w	#$80,d1
0000B936 6400                       		bcc.s	loc_B2B0
0000B938 2028 0008                  		move.l	8(a0),d0
0000B93C 0680 0008 0000             		addi.l	#$80000,d0
0000B942 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B948 6600                       		bne.s	loc_B2B0
0000B94A 6100 0000                  		bsr.w	SingleObjLoad2
0000B94E 6600                       		bne.s	loc_B2B0
0000B950 12BC 0035                  		move.b	#$35,0(a1)
0000B954 3368 0008 0008             		move.w	8(a0),8(a1)
0000B95A 3342 002C                  		move.w	d2,$2C(a1)
0000B95E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B964 137C 0001 0028             		move.b	#1,$28(a1)
0000B96A 2468 0038                  		movea.l	$38(a0),a2
0000B96E 6100 FDF0                  		bsr.w	sub_B09C
0000B972                            
0000B972                            loc_B2B0:
0000B972 6000                       		bra.s	Obj35_Animate
0000B974                            ; ===========================================================================
0000B974                            
0000B974                            Obj35_Move:				; XREF: Obj35_Index
0000B974 3028 002C                  		move.w	$2C(a0),d0
0000B978 D068 003C                  		add.w	$3C(a0),d0
0000B97C 3140 000C                  		move.w	d0,$C(a0)
0000B980                            
0000B980                            Obj35_Animate:				; XREF: loc_B238
0000B980 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B986 6100 F4AA                  		bsr.w	AnimateSprite
0000B98A 6000 0000                  		bra.w	DisplaySprite
0000B98E                            ; ===========================================================================
0000B98E                            Ani_obj35:
0000B98E                            	include "_anim\obj35.asm"
0000B98E                            ; ---------------------------------------------------------------------------
0000B98E                            ; Animation script - fireball that sits on the	floor (MZ)
0000B98E                            ; ---------------------------------------------------------------------------
0000B98E 0000                       		dc.w byte_B2CE-Ani_obj35
0000B990 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B996                            		even
0000B996                            		even
0000B996                            
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            ; Sprite mappings - large moving platforms (MZ)
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            Map_obj2F:
0000B996                            	include "_maps\obj2F.asm"
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            ; Sprite mappings - large moving platforms (MZ)
0000B996                            ; ---------------------------------------------------------------------------
0000B996 0000                       		dc.w byte_B2DA-Map_obj2F
0000B998 0000                       		dc.w byte_B31C-Map_obj2F
0000B99A 0000                       		dc.w byte_B34F-Map_obj2F
0000B99C 0D                         byte_B2DA:	dc.b $D
0000B99D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B9A2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B9A7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9AC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B9B1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B9B6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9BB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B9C0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B9C5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B9CA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B9CF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B9D4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B9D9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B9DE 0A                         byte_B31C:	dc.b $A
0000B9DF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B9E4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B9E9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9EE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B9F3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B9F8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9FD C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA02 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA07 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA0C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA11 06                         byte_B34F:	dc.b 6
0000BA12 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA17 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA1C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BA21 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BA26 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA2B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA30                            		even
0000BA30                            		even
0000BA30                            
0000BA30                            ; ---------------------------------------------------------------------------
0000BA30                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BA30                            ; ---------------------------------------------------------------------------
0000BA30                            Map_obj14:
0000BA30                            	include "_maps\obj14.asm"
0000BA30                            ; --------------------------------------------------------------------------------
0000BA30                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA30                            ; --------------------------------------------------------------------------------
0000BA30                            
0000BA30                            SME_C6wT7:	
0000BA30 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BA34 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BA38 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BA3C 01                         SME_C6wT7_C:	dc.b 1	
0000BA3D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA42 01                         SME_C6wT7_12:	dc.b 1	
0000BA43 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA48 02                         SME_C6wT7_18:	dc.b 2	
0000BA49 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BA4E E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BA53 01                         SME_C6wT7_23:	dc.b 1	
0000BA54 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA59 01                         SME_C6wT7_29:	dc.b 1	
0000BA5A F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA5F 01                         SME_C6wT7_2F:	dc.b 1	
0000BA60 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BA66 00                         		even
0000BA66 00                         		even
0000BA66                            
0000BA66                            ; ===========================================================================
0000BA66                            ; ---------------------------------------------------------------------------
0000BA66                            ; Object 30 - large green glassy blocks	(MZ)
0000BA66                            ; ---------------------------------------------------------------------------
0000BA66                            
0000BA66                            Obj30:					; XREF: Obj_Index
0000BA66 7000                       		moveq	#0,d0
0000BA68 1028 0024                  		move.b	$24(a0),d0
0000BA6C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BA70 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BA74 3028 0008                  		move.w	8(a0),d0
0000BA78 0240 FF80                  		andi.w	#$FF80,d0
0000BA7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA80 0441 0080                  		subi.w	#$80,d1
0000BA84 0241 FF80                  		andi.w	#$FF80,d1
0000BA88 9041                       		sub.w	d1,d0
0000BA8A 0C40 0280                  		cmpi.w	#$280,d0
0000BA8E 6200 0000                  		bhi.w	Obj30_Delete
0000BA92 6000 0000                  		bra.w	DisplaySprite
0000BA96                            ; ===========================================================================
0000BA96                            
0000BA96                            Obj30_Delete:
0000BA96 6000 0000                  		bra.w	DeleteObject
0000BA9A                            ; ===========================================================================
0000BA9A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BA9C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BA9E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BAA0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BAA2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BAA4                            
0000BAA4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BAA7 0400 01                    		dc.b 4,	0, 1
0000BAAA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BAAD 0800 01                    		dc.b 8,	0, 1
0000BAB0                            ; ===========================================================================
0000BAB0                            
0000BAB0                            Obj30_Main:				; XREF: Obj30_Index
0000BAB0 45F9 0000 BAA4             		lea	(Obj30_Vars1).l,a2
0000BAB6 7201                       		moveq	#1,d1
0000BAB8 117C 0048 0016             		move.b	#$48,$16(a0)
0000BABE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BAC4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BAC6 45F9 0000 BAAA             		lea	(Obj30_Vars2).l,a2
0000BACC 7201                       		moveq	#1,d1
0000BACE 117C 0038 0016             		move.b	#$38,$16(a0)
0000BAD4                            
0000BAD4                            loc_B40C:
0000BAD4 2248                       		movea.l	a0,a1
0000BAD6 6000                       		bra.s	Obj30_Load	; load main object
0000BAD8                            ; ===========================================================================
0000BAD8                            
0000BAD8                            Obj30_Loop:
0000BAD8 6100 0000                  		bsr.w	SingleObjLoad2
0000BADC 6600                       		bne.s	loc_B480
0000BADE                            
0000BADE                            Obj30_Load:				; XREF: Obj30_Main
0000BADE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BAE2 12BC 0030                  		move.b	#$30,0(a1)
0000BAE6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BAEC 101A                       		move.b	(a2)+,d0
0000BAEE 4880                       		ext.w	d0
0000BAF0 D068 000C                  		add.w	$C(a0),d0
0000BAF4 3340 000C                  		move.w	d0,$C(a1)
0000BAF8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB00 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB06 137C 0004 0001             		move.b	#4,1(a1)
0000BB0C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB12 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB18 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB1E 137C 0004 0018             		move.b	#4,$18(a1)
0000BB24 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB28 2348 003C                  		move.l	a0,$3C(a1)
0000BB2C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BB30                            
0000BB30 137C 0010 0019             		move.b	#$10,$19(a1)
0000BB36 137C 0003 0018             		move.b	#3,$18(a1)
0000BB3C 5029 0028                  		addq.b	#8,$28(a1)
0000BB40 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BB46                            
0000BB46                            loc_B480:
0000BB46 317C 0090 0032             		move.w	#$90,$32(a0)
0000BB4C 08E8 0004 0001             		bset	#4,1(a0)
0000BB52                            
0000BB52                            Obj30_Block012:				; XREF: Obj30_Index
0000BB52 6100 0000                  		bsr.w	Obj30_Types
0000BB56 323C 002B                  		move.w	#$2B,d1
0000BB5A 343C 0048                  		move.w	#$48,d2
0000BB5E 363C 0049                  		move.w	#$49,d3
0000BB62 3828 0008                  		move.w	8(a0),d4
0000BB66 6000 0000                  		bra.w	SolidObject
0000BB6A                            ; ===========================================================================
0000BB6A                            
0000BB6A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BB6A 2268 003C                  		movea.l	$3C(a0),a1
0000BB6E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB74 6000 0000                  		bra.w	Obj30_Types
0000BB78                            ; ===========================================================================
0000BB78                            
0000BB78                            Obj30_Block34:				; XREF: Obj30_Index
0000BB78 6100 0000                  		bsr.w	Obj30_Types
0000BB7C 323C 002B                  		move.w	#$2B,d1
0000BB80 343C 0038                  		move.w	#$38,d2
0000BB84 363C 0039                  		move.w	#$39,d3
0000BB88 3828 0008                  		move.w	8(a0),d4
0000BB8C 6000 0000                  		bra.w	SolidObject
0000BB90                            ; ===========================================================================
0000BB90                            
0000BB90                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BB90 2268 003C                  		movea.l	$3C(a0),a1
0000BB94 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB9A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BBA0 6000 0002                  		bra.w	*+4
0000BBA4                            
0000BBA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBA4                            
0000BBA4                            
0000BBA4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BBA4 7000                       		moveq	#0,d0
0000BBA6 1028 0028                  		move.b	$28(a0),d0
0000BBAA 0240 0007                  		andi.w	#7,d0
0000BBAE D040                       		add.w	d0,d0
0000BBB0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BBB4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BBB8                            ; End of function Obj30_Types
0000BBB8                            
0000BBB8                            ; ===========================================================================
0000BBB8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BBBA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BBBC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BBBE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BBC0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BBC2                            ; ===========================================================================
0000BBC2                            
0000BBC2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BBC2 4E75                       		rts	
0000BBC4                            ; ===========================================================================
0000BBC4                            
0000BBC4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BBC4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBC8 323C 0040                  		move.w	#$40,d1
0000BBCC 6000                       		bra.s	loc_B514
0000BBCE                            ; ===========================================================================
0000BBCE                            
0000BBCE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BBCE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBD2 323C 0040                  		move.w	#$40,d1
0000BBD6 4440                       		neg.w	d0
0000BBD8 D041                       		add.w	d1,d0
0000BBDA                            
0000BBDA                            loc_B514:				; XREF: Obj30_Type01
0000BBDA 0828 0003 0028             		btst	#3,$28(a0)
0000BBE0 6700                       		beq.s	loc_B526
0000BBE2 4440                       		neg.w	d0
0000BBE4 D041                       		add.w	d1,d0
0000BBE6 E208                       		lsr.b	#1,d0
0000BBE8 0640 0020                  		addi.w	#$20,d0
0000BBEC                            
0000BBEC                            loc_B526:
0000BBEC 6000 0000                  		bra.w	loc_B5EE
0000BBF0                            ; ===========================================================================
0000BBF0                            
0000BBF0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BBF0 0828 0003 0028             		btst	#3,$28(a0)
0000BBF6 6700                       		beq.s	loc_B53E
0000BBF8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBFC 0440 0010                  		subi.w	#$10,d0
0000BC00 6000 0000                  		bra.w	loc_B5EE
0000BC04                            ; ===========================================================================
0000BC04                            
0000BC04                            loc_B53E:
0000BC04 0828 0003 0022             		btst	#3,$22(a0)
0000BC0A 6600                       		bne.s	loc_B54E
0000BC0C 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC12 6000                       		bra.s	loc_B582
0000BC14                            ; ===========================================================================
0000BC14                            
0000BC14                            loc_B54E:
0000BC14 4A28 0034                  		tst.b	$34(a0)
0000BC18 6600                       		bne.s	loc_B582
0000BC1A 117C 0001 0034             		move.b	#1,$34(a0)
0000BC20 08E8 0000 0035             		bset	#0,$35(a0)
0000BC26 6700                       		beq.s	loc_B582
0000BC28 08E8 0007 0034             		bset	#7,$34(a0)
0000BC2E 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC34 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC3A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BC40 6600                       		bne.s	loc_B582
0000BC42 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC48                            
0000BC48                            loc_B582:
0000BC48 4A28 0034                  		tst.b	$34(a0)
0000BC4C 6A00                       		bpl.s	loc_B5AA
0000BC4E 4A28 0038                  		tst.b	$38(a0)
0000BC52 6700                       		beq.s	loc_B594
0000BC54 5328 0038                  		subq.b	#1,$38(a0)
0000BC58 6600                       		bne.s	loc_B5AA
0000BC5A                            
0000BC5A                            loc_B594:
0000BC5A 4A68 0032                  		tst.w	$32(a0)
0000BC5E 6700                       		beq.s	loc_B5A4
0000BC60 5368 0032                  		subq.w	#1,$32(a0)
0000BC64 5368 0036                  		subq.w	#1,$36(a0)
0000BC68 6600                       		bne.s	loc_B5AA
0000BC6A                            
0000BC6A                            loc_B5A4:
0000BC6A 08A8 0007 0034             		bclr	#7,$34(a0)
0000BC70                            
0000BC70                            loc_B5AA:
0000BC70 3028 0032                  		move.w	$32(a0),d0
0000BC74 6000                       		bra.s	loc_B5EE
0000BC76                            ; ===========================================================================
0000BC76                            
0000BC76                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BC76 0828 0003 0028             		btst	#3,$28(a0)
0000BC7C 6700                       		beq.s	Obj30_ChkSwitch
0000BC7E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC82 0440 0010                  		subi.w	#$10,d0
0000BC86 6000                       		bra.s	loc_B5EE
0000BC88                            ; ===========================================================================
0000BC88                            
0000BC88                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BC88 4A28 0034                  		tst.b	$34(a0)
0000BC8C 6600                       		bne.s	loc_B5E0
0000BC8E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BC92 7000                       		moveq	#0,d0
0000BC94 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BC98 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BC9A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BC9E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BCA0 117C 0001 0034             		move.b	#1,$34(a0)
0000BCA6                            
0000BCA6                            loc_B5E0:
0000BCA6 4A68 0032                  		tst.w	$32(a0)
0000BCAA 6700                       		beq.s	loc_B5EA
0000BCAC 5568 0032                  		subq.w	#2,$32(a0)
0000BCB0                            
0000BCB0                            loc_B5EA:
0000BCB0 3028 0032                  		move.w	$32(a0),d0
0000BCB4                            
0000BCB4                            loc_B5EE:
0000BCB4 3228 0030                  		move.w	$30(a0),d1
0000BCB8 9240                       		sub.w	d0,d1
0000BCBA 3141 000C                  		move.w	d1,$C(a0)
0000BCBE 4E75                       		rts	
0000BCC0                            ; ===========================================================================
0000BCC0                            ; ---------------------------------------------------------------------------
0000BCC0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCC0                            ; ---------------------------------------------------------------------------
0000BCC0                            Map_obj30:
0000BCC0                            	include "_maps\obj30.asm"
0000BCC0                            ; ---------------------------------------------------------------------------
0000BCC0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCC0                            ; ---------------------------------------------------------------------------
0000BCC0 0000                       		dc.w byte_B600-Map_obj30
0000BCC2 0000                       		dc.w byte_B63D-Map_obj30
0000BCC4 0000                       		dc.w byte_B648-Map_obj30
0000BCC6 0C                         byte_B600:	dc.b $C
0000BCC7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BCCC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BCD1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BCD6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BCDB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BCE0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BCE5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BCEA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BCEF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BCF4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BCF9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BCFE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD03 02                         byte_B63D:	dc.b 2
0000BD04 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD09 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD0E 0A                         byte_B648:	dc.b $A
0000BD0F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD14 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD19 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BD1E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BD23 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BD28 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BD2D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD32 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD37 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD3C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD42 00                         		even
0000BD42 00                         		even
0000BD42                            
0000BD42                            ; ===========================================================================
0000BD42                            ; ---------------------------------------------------------------------------
0000BD42                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD42                            ; ---------------------------------------------------------------------------
0000BD42                            
0000BD42                            Obj31:					; XREF: Obj_Index
0000BD42 7000                       		moveq	#0,d0
0000BD44 1028 0024                  		move.b	$24(a0),d0
0000BD48 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BD4C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BD50                            ; ===========================================================================
0000BD50 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BD52 0000                       		dc.w loc_B798-Obj31_Index
0000BD54 0000                       		dc.w loc_B7FE-Obj31_Index
0000BD56 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BD58 0000                       		dc.w loc_B7E2-Obj31_Index
0000BD5A                            
0000BD5A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BD5C 0100                       		dc.b 1,	0
0000BD5E                            
0000BD5E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BD61 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BD64 08CC 03                    		dc.b 8,	$CC, 3
0000BD67 06F0 02                    		dc.b 6,	$F0, 2
0000BD6A                            
0000BD6A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BD6E 5000 7800                  		dc.w $5000, $7800
0000BD72 3800 5800                  		dc.w $3800, $5800
0000BD76 B800                       		dc.w $B800
0000BD78                            ; ===========================================================================
0000BD78                            
0000BD78                            Obj31_Main:				; XREF: Obj31_Index
0000BD78 7000                       		moveq	#0,d0
0000BD7A 1028 0028                  		move.b	$28(a0),d0
0000BD7E 6A00                       		bpl.s	loc_B6CE
0000BD80 0240 007F                  		andi.w	#$7F,d0
0000BD84 D040                       		add.w	d0,d0
0000BD86 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BD8A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BD8E 101A                       		move.b	(a2)+,d0
0000BD90 1140 0028                  		move.b	d0,$28(a0)
0000BD94                            
0000BD94                            loc_B6CE:
0000BD94 0200 000F                  		andi.b	#$F,d0
0000BD98 D040                       		add.w	d0,d0
0000BD9A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BD9E 4A40                       		tst.w	d0
0000BDA0 6600                       		bne.s	loc_B6E0
0000BDA2 3142 0032                  		move.w	d2,$32(a0)
0000BDA6                            
0000BDA6                            loc_B6E0:
0000BDA6 45F9 0000 BD5E             		lea	(Obj31_Var).l,a2
0000BDAC 2248                       		movea.l	a0,a1
0000BDAE 7203                       		moveq	#3,d1
0000BDB0 6000                       		bra.s	Obj31_MakeStomper
0000BDB2                            ; ===========================================================================
0000BDB2                            
0000BDB2                            Obj31_Loop:
0000BDB2 6100 0000                  		bsr.w	SingleObjLoad2
0000BDB6 6600 0000                  		bne.w	Obj31_SetSize
0000BDBA                            
0000BDBA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BDBA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BDBE 12BC 0031                  		move.b	#$31,0(a1)
0000BDC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDC8 101A                       		move.b	(a2)+,d0
0000BDCA 4880                       		ext.w	d0
0000BDCC D068 000C                  		add.w	$C(a0),d0
0000BDD0 3340 000C                  		move.w	d0,$C(a1)
0000BDD4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BDDC 337C 0300 0002             		move.w	#$300,2(a1)
0000BDE2 137C 0004 0001             		move.b	#4,1(a1)
0000BDE8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BDEE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BDF4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BDFA 3342 0034                  		move.w	d2,$34(a1)
0000BDFE 137C 0004 0018             		move.b	#4,$18(a1)
0000BE04 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE08 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE0E 6600                       		bne.s	loc_B76A
0000BE10 5341                       		subq.w	#1,d1
0000BE12 1028 0028                  		move.b	$28(a0),d0
0000BE16 0240 00F0                  		andi.w	#$F0,d0
0000BE1A 0C40 0020                  		cmpi.w	#$20,d0
0000BE1E 679A                       		beq.s	Obj31_MakeStomper
0000BE20 137C 0038 0019             		move.b	#$38,$19(a1)
0000BE26 137C 0090 0020             		move.b	#$90,$20(a1)
0000BE2C 5241                       		addq.w	#1,d1
0000BE2E                            
0000BE2E                            loc_B76A:
0000BE2E 2348 003C                  		move.l	a0,$3C(a1)
0000BE32 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BE36                            
0000BE36 137C 0003 0018             		move.b	#3,$18(a1)
0000BE3C                            
0000BE3C                            Obj31_SetSize:
0000BE3C 7000                       		moveq	#0,d0
0000BE3E 1028 0028                  		move.b	$28(a0),d0
0000BE42 E648                       		lsr.w	#3,d0
0000BE44 0200 000E                  		andi.b	#$E,d0
0000BE48 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BE4C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BE50 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BE54 6000                       		bra.s	loc_B798
0000BE56                            ; ===========================================================================
0000BE56 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BE58 3009                       		dc.b $30, 9
0000BE5A 100A                       		dc.b $10, $A
0000BE5C                            ; ===========================================================================
0000BE5C                            
0000BE5C                            loc_B798:				; XREF: Obj31_Index
0000BE5C 6100 0000                  		bsr.w	Obj31_Types
0000BE60 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BE66 7200                       		moveq	#0,d1
0000BE68 1228 0019                  		move.b	$19(a0),d1
0000BE6C 0641 000B                  		addi.w	#$B,d1
0000BE70 343C 000C                  		move.w	#$C,d2
0000BE74 363C 000D                  		move.w	#$D,d3
0000BE78 3828 0008                  		move.w	8(a0),d4
0000BE7C 6100 0000                  		bsr.w	SolidObject
0000BE80 0828 0003 0022             		btst	#3,$22(a0)
0000BE86 6700                       		beq.s	Obj31_Display
0000BE88 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BE8E 6400                       		bcc.s	Obj31_Display
0000BE90 2448                       		movea.l	a0,a2
0000BE92 41F8 D000                  		lea	($FFFFD000).w,a0
0000BE96 4EB9 0000 0000             		jsr	KillSonic
0000BE9C 204A                       		movea.l	a2,a0
0000BE9E                            
0000BE9E                            Obj31_Display:
0000BE9E 6100 0000                  		bsr.w	DisplaySprite
0000BEA2 6000 0000                  		bra.w	Obj31_ChkDel
0000BEA6                            ; ===========================================================================
0000BEA6                            
0000BEA6                            loc_B7E2:				; XREF: Obj31_Index
0000BEA6 117C 0080 0016             		move.b	#$80,$16(a0)
0000BEAC 08E8 0004 0001             		bset	#4,1(a0)
0000BEB2 2268 003C                  		movea.l	$3C(a0),a1
0000BEB6 1029 0032                  		move.b	$32(a1),d0
0000BEBA EA08                       		lsr.b	#5,d0
0000BEBC 5600                       		addq.b	#3,d0
0000BEBE 1140 001A                  		move.b	d0,$1A(a0)
0000BEC2                            
0000BEC2                            loc_B7FE:				; XREF: Obj31_Index
0000BEC2 2268 003C                  		movea.l	$3C(a0),a1
0000BEC6 7000                       		moveq	#0,d0
0000BEC8 1029 0032                  		move.b	$32(a1),d0
0000BECC D068 0030                  		add.w	$30(a0),d0
0000BED0 3140 000C                  		move.w	d0,$C(a0)
0000BED4                            
0000BED4                            Obj31_Display2:				; XREF: Obj31_Index
0000BED4 6100 0000                  		bsr.w	DisplaySprite
0000BED8                            
0000BED8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BED8 3028 0008                  		move.w	8(a0),d0
0000BEDC 0240 FF80                  		andi.w	#$FF80,d0
0000BEE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BEE4 0441 0080                  		subi.w	#$80,d1
0000BEE8 0241 FF80                  		andi.w	#$FF80,d1
0000BEEC 9041                       		sub.w	d1,d0
0000BEEE 0C40 0280                  		cmpi.w	#$280,d0
0000BEF2 6200 0000                  		bhi.w	DeleteObject
0000BEF6 4E75                       		rts	
0000BEF8                            ; ===========================================================================
0000BEF8                            
0000BEF8                            Obj31_Types:				; XREF: loc_B798
0000BEF8 1028 0028                  		move.b	$28(a0),d0
0000BEFC 0240 000F                  		andi.w	#$F,d0
0000BF00 D040                       		add.w	d0,d0
0000BF02 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF06 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF0A                            ; ===========================================================================
0000BF0A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF0C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF0E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF10 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF12 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF14 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF16 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF18                            ; ===========================================================================
0000BF18                            
0000BF18                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BF1C 7000                       		moveq	#0,d0
0000BF1E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BF22 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BF26 6700                       		beq.s	loc_B8A8	; if not, branch
0000BF28 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BF2C 6A00                       		bpl.s	loc_B872
0000BF2E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF34 6700                       		beq.s	loc_B8A0
0000BF36                            
0000BF36                            loc_B872:
0000BF36 4A68 0032                  		tst.w	$32(a0)
0000BF3A 6700                       		beq.s	loc_B8A0
0000BF3C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF40 0200 000F                  		andi.b	#$F,d0
0000BF44 6600                       		bne.s	loc_B892
0000BF46 4A28 0001                  		tst.b	1(a0)
0000BF4A 6A00                       		bpl.s	loc_B892
0000BF4C 303C 00C7                  		move.w	#$C7,d0
0000BF50 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BF56                            
0000BF56                            loc_B892:
0000BF56 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF5C 6400                       		bcc.s	Obj31_Restart
0000BF5E 317C 0000 0032             		move.w	#0,$32(a0)
0000BF64                            
0000BF64                            loc_B8A0:
0000BF64 317C 0000 0012             		move.w	#0,$12(a0)
0000BF6A 6000                       		bra.s	Obj31_Restart
0000BF6C                            ; ===========================================================================
0000BF6C                            
0000BF6C                            loc_B8A8:				; XREF: Obj31_Type00
0000BF6C 3228 0034                  		move.w	$34(a0),d1
0000BF70 B268 0032                  		cmp.w	$32(a0),d1
0000BF74 6700                       		beq.s	Obj31_Restart
0000BF76 3028 0012                  		move.w	$12(a0),d0
0000BF7A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BF80 D168 0032                  		add.w	d0,$32(a0)
0000BF84 B268 0032                  		cmp.w	$32(a0),d1
0000BF88 6200                       		bhi.s	Obj31_Restart
0000BF8A 3141 0032                  		move.w	d1,$32(a0)
0000BF8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF94 4A28 0001                  		tst.b	1(a0)
0000BF98 6A00                       		bpl.s	Obj31_Restart
0000BF9A 303C 00BD                  		move.w	#$BD,d0
0000BF9E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BFA4                            
0000BFA4                            Obj31_Restart:
0000BFA4 7000                       		moveq	#0,d0
0000BFA6 1028 0032                  		move.b	$32(a0),d0
0000BFAA D068 0030                  		add.w	$30(a0),d0
0000BFAE 3140 000C                  		move.w	d0,$C(a0)
0000BFB2 4E75                       		rts	
0000BFB4                            ; ===========================================================================
0000BFB4                            
0000BFB4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BFB4 4A68 0036                  		tst.w	$36(a0)
0000BFB8 6700                       		beq.s	loc_B938
0000BFBA 4A68 0038                  		tst.w	$38(a0)
0000BFBE 6700                       		beq.s	loc_B902
0000BFC0 5368 0038                  		subq.w	#1,$38(a0)
0000BFC4 6000                       		bra.s	loc_B97C
0000BFC6                            ; ===========================================================================
0000BFC6                            
0000BFC6                            loc_B902:
0000BFC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFCA 0200 000F                  		andi.b	#$F,d0
0000BFCE 6600                       		bne.s	loc_B91C
0000BFD0 4A28 0001                  		tst.b	1(a0)
0000BFD4 6A00                       		bpl.s	loc_B91C
0000BFD6 303C 00C7                  		move.w	#$C7,d0
0000BFDA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFE0                            
0000BFE0                            loc_B91C:
0000BFE0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFE6 6400                       		bcc.s	loc_B97C
0000BFE8 317C 0000 0032             		move.w	#0,$32(a0)
0000BFEE 317C 0000 0012             		move.w	#0,$12(a0)
0000BFF4 317C 0000 0036             		move.w	#0,$36(a0)
0000BFFA 6000                       		bra.s	loc_B97C
0000BFFC                            ; ===========================================================================
0000BFFC                            
0000BFFC                            loc_B938:				; XREF: Obj31_Type01
0000BFFC 3228 0034                  		move.w	$34(a0),d1
0000C000 B268 0032                  		cmp.w	$32(a0),d1
0000C004 6700                       		beq.s	loc_B97C
0000C006 3028 0012                  		move.w	$12(a0),d0
0000C00A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C010 D168 0032                  		add.w	d0,$32(a0)
0000C014 B268 0032                  		cmp.w	$32(a0),d1
0000C018 6200                       		bhi.s	loc_B97C
0000C01A 3141 0032                  		move.w	d1,$32(a0)
0000C01E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C024 317C 0001 0036             		move.w	#1,$36(a0)
0000C02A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C030 4A28 0001                  		tst.b	1(a0)
0000C034 6A00                       		bpl.s	loc_B97C
0000C036 303C 00BD                  		move.w	#$BD,d0
0000C03A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C040                            
0000C040                            loc_B97C:
0000C040 6000 FF62                  		bra.w	Obj31_Restart
0000C044                            ; ===========================================================================
0000C044                            
0000C044                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C044 3038 D008                  		move.w	($FFFFD008).w,d0
0000C048 9068 0008                  		sub.w	8(a0),d0
0000C04C 6400                       		bcc.s	loc_B98C
0000C04E 4440                       		neg.w	d0
0000C050                            
0000C050                            loc_B98C:
0000C050 0C40 0090                  		cmpi.w	#$90,d0
0000C054 6400                       		bcc.s	loc_B996
0000C056 5228 0028                  		addq.b	#1,$28(a0)
0000C05A                            
0000C05A                            loc_B996:
0000C05A 6000 FF48                  		bra.w	Obj31_Restart
0000C05E                            ; ===========================================================================
0000C05E                            ; ---------------------------------------------------------------------------
0000C05E                            ; Object 45 - spiked metal block from beta version (MZ)
0000C05E                            ; ---------------------------------------------------------------------------
0000C05E                            
0000C05E                            Obj45:					; XREF: Obj_Index
0000C05E 7000                       		moveq	#0,d0
0000C060 1028 0024                  		move.b	$24(a0),d0
0000C064 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C068 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C06C                            ; ===========================================================================
0000C06C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C06E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C070 0000                       		dc.w loc_BA8E-Obj45_Index
0000C072 0000                       		dc.w Obj45_Display-Obj45_Index
0000C074 0000                       		dc.w loc_BA7A-Obj45_Index
0000C076                            
0000C076 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C079 04E4 01                    		dc.b	4, $E4,	  1
0000C07C 0834 03                    		dc.b	8, $34,	  3
0000C07F 0628 02                    		dc.b	6, $28,	  2
0000C082                            
0000C082 3800                       word_B9BE:	dc.w $3800
0000C084 A000                       		dc.w -$6000
0000C086 5000                       		dc.w $5000
0000C088                            ; ===========================================================================
0000C088                            
0000C088                            Obj45_Main:				; XREF: Obj45_Index
0000C088 7000                       		moveq	#0,d0
0000C08A 1028 0028                  		move.b	$28(a0),d0
0000C08E D040                       		add.w	d0,d0
0000C090 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C094 45F9 0000 C076             		lea	(Obj45_Var).l,a2
0000C09A 2248                       		movea.l	a0,a1
0000C09C 7203                       		moveq	#3,d1
0000C09E 6000                       		bra.s	Obj45_Load
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            Obj45_Loop:
0000C0A0 6100 0000                  		bsr.w	SingleObjLoad2
0000C0A4 6600                       		bne.s	loc_BA52
0000C0A6                            
0000C0A6                            Obj45_Load:				; XREF: Obj45_Main
0000C0A6 135A 0024                  		move.b	(a2)+,$24(a1)
0000C0AA 12BC 0045                  		move.b	#$45,0(a1)
0000C0AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C0B4 101A                       		move.b	(a2)+,d0
0000C0B6 4880                       		ext.w	d0
0000C0B8 D068 0008                  		add.w	8(a0),d0
0000C0BC 3340 0008                  		move.w	d0,8(a1)
0000C0C0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C0C8 337C 0300 0002             		move.w	#$300,2(a1)
0000C0CE 137C 0004 0001             		move.b	#4,1(a1)
0000C0D4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C0DA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C0E0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C0E6 137C 0020 0019             		move.b	#$20,$19(a1)
0000C0EC 3342 0034                  		move.w	d2,$34(a1)
0000C0F0 137C 0004 0018             		move.b	#4,$18(a1)
0000C0F6 0C12 0001                  		cmpi.b	#1,(a2)
0000C0FA 6600                       		bne.s	loc_BA40
0000C0FC 137C 0091 0020             		move.b	#$91,$20(a1)
0000C102                            
0000C102                            loc_BA40:
0000C102 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C106 2348 003C                  		move.l	a0,$3C(a1)
0000C10A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C10E                            
0000C10E 137C 0003 0018             		move.b	#3,$18(a1)
0000C114                            
0000C114                            loc_BA52:
0000C114 117C 0010 0019             		move.b	#$10,$19(a0)
0000C11A                            
0000C11A                            Obj45_Solid:				; XREF: Obj45_Index
0000C11A 3F28 0008                  		move.w	8(a0),-(sp)
0000C11E 6100 0000                  		bsr.w	Obj45_Move
0000C122 323C 0017                  		move.w	#$17,d1
0000C126 343C 0020                  		move.w	#$20,d2
0000C12A 363C 0020                  		move.w	#$20,d3
0000C12E 381F                       		move.w	(sp)+,d4
0000C130 6100 0000                  		bsr.w	SolidObject
0000C134 6100 0000                  		bsr.w	DisplaySprite
0000C138 6000 0000                  		bra.w	Obj45_ChkDel
0000C13C                            ; ===========================================================================
0000C13C                            
0000C13C                            loc_BA7A:				; XREF: Obj45_Index
0000C13C 2268 003C                  		movea.l	$3C(a0),a1
0000C140 1029 0032                  		move.b	$32(a1),d0
0000C144 0600 0010                  		addi.b	#$10,d0
0000C148 EA08                       		lsr.b	#5,d0
0000C14A 5600                       		addq.b	#3,d0
0000C14C 1140 001A                  		move.b	d0,$1A(a0)
0000C150                            
0000C150                            loc_BA8E:				; XREF: Obj45_Index
0000C150 2268 003C                  		movea.l	$3C(a0),a1
0000C154 7000                       		moveq	#0,d0
0000C156 1029 0032                  		move.b	$32(a1),d0
0000C15A 4440                       		neg.w	d0
0000C15C D068 0030                  		add.w	$30(a0),d0
0000C160 3140 0008                  		move.w	d0,8(a0)
0000C164                            
0000C164                            Obj45_Display:				; XREF: Obj45_Index
0000C164 6100 0000                  		bsr.w	DisplaySprite
0000C168                            
0000C168                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C168 3028 003A                  		move.w	$3A(a0),d0
0000C16C 0240 FF80                  		andi.w	#$FF80,d0
0000C170 3238 F700                  		move.w	($FFFFF700).w,d1
0000C174 0441 0080                  		subi.w	#$80,d1
0000C178 0241 FF80                  		andi.w	#$FF80,d1
0000C17C 9041                       		sub.w	d1,d0
0000C17E 0C40 0280                  		cmpi.w	#$280,d0
0000C182 6200 0000                  		bhi.w	DeleteObject
0000C186 4E75                       		rts	
0000C188                            
0000C188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C188                            
0000C188                            
0000C188                            Obj45_Move:				; XREF: Obj45_Solid
0000C188 7000                       		moveq	#0,d0
0000C18A 1028 0028                  		move.b	$28(a0),d0
0000C18E D040                       		add.w	d0,d0
0000C190 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C194 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C198                            ; End of function Obj45_Move
0000C198                            
0000C198                            ; ===========================================================================
0000C198 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C19A 0000                       		dc.w loc_BADA-off_BAD6
0000C19C                            ; ===========================================================================
0000C19C                            
0000C19C                            loc_BADA:				; XREF: off_BAD6
0000C19C 4A68 0036                  		tst.w	$36(a0)
0000C1A0 6700                       		beq.s	loc_BB08
0000C1A2 4A68 0038                  		tst.w	$38(a0)
0000C1A6 6700                       		beq.s	loc_BAEC
0000C1A8 5368 0038                  		subq.w	#1,$38(a0)
0000C1AC 6000                       		bra.s	loc_BB3C
0000C1AE                            ; ===========================================================================
0000C1AE                            
0000C1AE                            loc_BAEC:
0000C1AE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1B4 6400                       		bcc.s	loc_BB3C
0000C1B6 317C 0000 0032             		move.w	#0,$32(a0)
0000C1BC 317C 0000 0010             		move.w	#0,$10(a0)
0000C1C2 317C 0000 0036             		move.w	#0,$36(a0)
0000C1C8 6000                       		bra.s	loc_BB3C
0000C1CA                            ; ===========================================================================
0000C1CA                            
0000C1CA                            loc_BB08:				; XREF: loc_BADA
0000C1CA 3228 0034                  		move.w	$34(a0),d1
0000C1CE B268 0032                  		cmp.w	$32(a0),d1
0000C1D2 6700                       		beq.s	loc_BB3C
0000C1D4 3028 0010                  		move.w	$10(a0),d0
0000C1D8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C1DE D168 0032                  		add.w	d0,$32(a0)
0000C1E2 B268 0032                  		cmp.w	$32(a0),d1
0000C1E6 6200                       		bhi.s	loc_BB3C
0000C1E8 3141 0032                  		move.w	d1,$32(a0)
0000C1EC 317C 0000 0010             		move.w	#0,$10(a0)
0000C1F2 317C 0001 0036             		move.w	#1,$36(a0)
0000C1F8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C1FE                            
0000C1FE                            loc_BB3C:
0000C1FE 7000                       		moveq	#0,d0
0000C200 1028 0032                  		move.b	$32(a0),d0
0000C204 4440                       		neg.w	d0
0000C206 D068 0030                  		add.w	$30(a0),d0
0000C20A 3140 0008                  		move.w	d0,8(a0)
0000C20E 4E75                       		rts	
0000C210                            ; ===========================================================================
0000C210                            ; ---------------------------------------------------------------------------
0000C210                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C210                            ; ---------------------------------------------------------------------------
0000C210                            Map_obj31:
0000C210                            	include "_maps\obj31.asm"
0000C210                            ; ---------------------------------------------------------------------------
0000C210                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C210                            ; ---------------------------------------------------------------------------
0000C210 0000                       		dc.w byte_BB64-Map_obj31
0000C212 0000                       		dc.w byte_BB7E-Map_obj31
0000C214 0000                       		dc.w byte_BB98-Map_obj31
0000C216 0000                       		dc.w byte_BB9E-Map_obj31
0000C218 0000                       		dc.w byte_BBA9-Map_obj31
0000C21A 0000                       		dc.w byte_BBBE-Map_obj31
0000C21C 0000                       		dc.w byte_BBDD-Map_obj31
0000C21E 0000                       		dc.w byte_BC06-Map_obj31
0000C220 0000                       		dc.w byte_BC06-Map_obj31
0000C222 0000                       		dc.w byte_BC39-Map_obj31
0000C224 0000                       		dc.w byte_BC53-Map_obj31
0000C226 05                         byte_BB64:	dc.b 5
0000C227 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C22C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C231 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C236 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C23B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C240 05                         byte_BB7E:	dc.b 5
0000C241 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C246 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C24B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C250 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C255 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C25A 01                         byte_BB98:	dc.b 1
0000C25B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C260 02                         byte_BB9E:	dc.b 2
0000C261 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C266 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C26B 04                         byte_BBA9:	dc.b 4
0000C26C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C271 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C276 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C27B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C280 06                         byte_BBBE:	dc.b 6
0000C281 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C286 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C28B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C290 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C295 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C29A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C29F 08                         byte_BBDD:	dc.b 8
0000C2A0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2A5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2AA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2AF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2B4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2B9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2BE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2C3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2C8 0A                         byte_BC06:	dc.b $A
0000C2C9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C2CE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C2D3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2D8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2DD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2E2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2E7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2EC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2F1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2F6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2FB 05                         byte_BC39:	dc.b 5
0000C2FC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C301 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C306 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C30B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C310 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C315 01                         byte_BC53:	dc.b 1
0000C316 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C31C 00                         		even
0000C31C 00                         		even
0000C31C                            
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C                            Map_obj45:
0000C31C                            	include "_maps\obj45.asm"
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C 0000                       		dc.w byte_BC6C-Map_obj45
0000C31E 0000                       		dc.w byte_BC7C-Map_obj45
0000C320 0000                       		dc.w byte_BC8C-Map_obj45
0000C322 0000                       		dc.w byte_BC92-Map_obj45
0000C324 0000                       		dc.w byte_BC9D-Map_obj45
0000C326 0000                       		dc.w byte_BCB2-Map_obj45
0000C328 0000                       		dc.w byte_BCD1-Map_obj45
0000C32A 0000                       		dc.w byte_BCFA-Map_obj45
0000C32C 0000                       		dc.w byte_BCFA-Map_obj45
0000C32E 03                         byte_BC6C:	dc.b 3
0000C32F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C334 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C339 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C33E 03                         byte_BC7C:	dc.b 3
0000C33F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C344 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C349 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C34E 01                         byte_BC8C:	dc.b 1
0000C34F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C354 02                         byte_BC92:	dc.b 2
0000C355 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C35A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C35F 04                         byte_BC9D:	dc.b 4
0000C360 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C365 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C36A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C36F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C374 06                         byte_BCB2:	dc.b 6
0000C375 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C37A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C37F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C384 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C389 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C38E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C393 08                         byte_BCD1:	dc.b 8
0000C394 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C399 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C39E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3A3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3A8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3AD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3B2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3B7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3BC 08                         byte_BCFA:	dc.b 8
0000C3BD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3C2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3C7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3CC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3D1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3D6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3DB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3E0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3E5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C3EA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C3F0 00                         		even
0000C3F0 00                         		even
0000C3F0                            
0000C3F0                            ; ===========================================================================
0000C3F0                            ; ---------------------------------------------------------------------------
0000C3F0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C3F0                            ; ---------------------------------------------------------------------------
0000C3F0                            
0000C3F0                            Obj32:					; XREF: Obj_Index
0000C3F0 7000                       		moveq	#0,d0
0000C3F2 1028 0024                  		move.b	$24(a0),d0
0000C3F6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C3FA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C3FE                            ; ===========================================================================
0000C3FE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C400 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C402                            ; ===========================================================================
0000C402                            
0000C402                            Obj32_Main:				; XREF: Obj32_Index
0000C402 5428 0024                  		addq.b	#2,$24(a0)
0000C406 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C40E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C414 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C41A 6700                       		beq.s	loc_BD60
0000C41C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C422                            
0000C422                            loc_BD60:
0000C422 117C 0004 0001             		move.b	#4,1(a0)
0000C428 117C 0010 0019             		move.b	#$10,$19(a0)
0000C42E 117C 0004 0018             		move.b	#4,$18(a0)
0000C434 5668 000C                  		addq.w	#3,$C(a0)
0000C438                            
0000C438                            Obj32_Pressed:				; XREF: Obj32_Index
0000C438 4A28 0001                  		tst.b	1(a0)
0000C43C 6A00                       		bpl.s	Obj32_Display
0000C43E 323C 001B                  		move.w	#$1B,d1
0000C442 343C 0005                  		move.w	#5,d2
0000C446 363C 0005                  		move.w	#5,d3
0000C44A 3828 0008                  		move.w	8(a0),d4
0000C44E 6100 0000                  		bsr.w	SolidObject
0000C452 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C458 1028 0028                  		move.b	$28(a0),d0
0000C45C 0240 000F                  		andi.w	#$F,d0
0000C460 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C464 47F3 0000                  		lea	(a3,d0.w),a3
0000C468 7600                       		moveq	#0,d3
0000C46A 0828 0006 0028             		btst	#6,$28(a0)
0000C470 6700                       		beq.s	loc_BDB2
0000C472 7607                       		moveq	#7,d3
0000C474                            
0000C474                            loc_BDB2:
0000C474 4A28 0028                  		tst.b	$28(a0)
0000C478 6A00                       		bpl.s	loc_BDBE
0000C47A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C47E 6600                       		bne.s	loc_BDC8
0000C480                            
0000C480                            loc_BDBE:
0000C480 4A28 0025                  		tst.b	$25(a0)
0000C484 6600                       		bne.s	loc_BDC8
0000C486 0793                       		bclr	d3,(a3)
0000C488 6000                       		bra.s	loc_BDDE
0000C48A                            ; ===========================================================================
0000C48A                            
0000C48A                            loc_BDC8:
0000C48A 4A13                       		tst.b	(a3)
0000C48C 6600                       		bne.s	loc_BDD6
0000C48E 303C 00CD                  		move.w	#$CD,d0
0000C492 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C498                            
0000C498                            loc_BDD6:
0000C498 07D3                       		bset	d3,(a3)
0000C49A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C4A0                            
0000C4A0                            loc_BDDE:
0000C4A0 0828 0005 0028             		btst	#5,$28(a0)
0000C4A6 6700                       		beq.s	Obj32_Display
0000C4A8 5328 001E                  		subq.b	#1,$1E(a0)
0000C4AC 6A00                       		bpl.s	Obj32_Display
0000C4AE 117C 0007 001E             		move.b	#7,$1E(a0)
0000C4B4 0868 0001 001A             		bchg	#1,$1A(a0)
0000C4BA                            
0000C4BA                            Obj32_Display:
0000C4BA 6100 0000                  		bsr.w	DisplaySprite
0000C4BE 3028 0008                  		move.w	8(a0),d0
0000C4C2 0240 FF80                  		andi.w	#$FF80,d0
0000C4C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4CA 0441 0080                  		subi.w	#$80,d1
0000C4CE 0241 FF80                  		andi.w	#$FF80,d1
0000C4D2 9041                       		sub.w	d1,d0
0000C4D4 0C40 0280                  		cmpi.w	#$280,d0
0000C4D8 6200 0000                  		bhi.w	Obj32_Delete
0000C4DC 4E75                       		rts	
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            Obj32_Delete:
0000C4DE 6100 0000                  		bsr.w	DeleteObject
0000C4E2 4E75                       		rts	
0000C4E4                            
0000C4E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4E4                            
0000C4E4                            
0000C4E4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C4E4 3F03                       		move.w	d3,-(sp)
0000C4E6 3428 0008                  		move.w	8(a0),d2
0000C4EA 3628 000C                  		move.w	$C(a0),d3
0000C4EE 0442 0010                  		subi.w	#$10,d2
0000C4F2 5143                       		subq.w	#8,d3
0000C4F4 383C 0020                  		move.w	#$20,d4
0000C4F8 3A3C 0010                  		move.w	#$10,d5
0000C4FC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C500 3C3C 005F                  		move.w	#$5F,d6
0000C504                            
0000C504                            Obj32_MZLoop:
0000C504 4A29 0001                  		tst.b	1(a1)
0000C508 6A00                       		bpl.s	loc_BE4E
0000C50A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C50E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C510                            
0000C510                            loc_BE4E:
0000C510 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C514 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C518                            
0000C518 361F                       		move.w	(sp)+,d3
0000C51A 7000                       		moveq	#0,d0
0000C51C                            
0000C51C                            locret_BE5A:
0000C51C 4E75                       		rts	
0000C51E                            ; ===========================================================================
0000C51E 1010                       Obj32_MZData:	dc.b $10, $10
0000C520                            ; ===========================================================================
0000C520                            
0000C520                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C520 7001                       		moveq	#1,d0
0000C522 0240 003F                  		andi.w	#$3F,d0
0000C526 D040                       		add.w	d0,d0
0000C528 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C52C 121A                       		move.b	(a2)+,d1
0000C52E 4881                       		ext.w	d1
0000C530 3029 0008                  		move.w	8(a1),d0
0000C534 9041                       		sub.w	d1,d0
0000C536 9042                       		sub.w	d2,d0
0000C538 6400                       		bcc.s	loc_BE80
0000C53A D241                       		add.w	d1,d1
0000C53C D041                       		add.w	d1,d0
0000C53E 6500                       		bcs.s	loc_BE84
0000C540 60CE                       		bra.s	loc_BE4E
0000C542                            ; ===========================================================================
0000C542                            
0000C542                            loc_BE80:
0000C542 B044                       		cmp.w	d4,d0
0000C544 62CA                       		bhi.s	loc_BE4E
0000C546                            
0000C546                            loc_BE84:
0000C546 121A                       		move.b	(a2)+,d1
0000C548 4881                       		ext.w	d1
0000C54A 3029 000C                  		move.w	$C(a1),d0
0000C54E 9041                       		sub.w	d1,d0
0000C550 9043                       		sub.w	d3,d0
0000C552 6400                       		bcc.s	loc_BE9A
0000C554 D241                       		add.w	d1,d1
0000C556 D041                       		add.w	d1,d0
0000C558 6500                       		bcs.s	loc_BE9E
0000C55A 60B4                       		bra.s	loc_BE4E
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            loc_BE9A:
0000C55C B045                       		cmp.w	d5,d0
0000C55E 62B0                       		bhi.s	loc_BE4E
0000C560                            
0000C560                            loc_BE9E:
0000C560 361F                       		move.w	(sp)+,d3
0000C562 7001                       		moveq	#1,d0
0000C564 4E75                       		rts	
0000C566                            ; End of function Obj32_MZBlock
0000C566                            
0000C566                            ; ===========================================================================
0000C566                            ; ---------------------------------------------------------------------------
0000C566                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C566                            ; ---------------------------------------------------------------------------
0000C566                            Map_obj32:
0000C566                            	include "_maps\obj32.asm"
0000C566                            ; ---------------------------------------------------------------------------
0000C566                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C566                            ; ---------------------------------------------------------------------------
0000C566 0000                       		dc.w byte_BEAC-Map_obj32
0000C568 0000                       		dc.w byte_BEB7-Map_obj32
0000C56A 0000                       		dc.w byte_BEC2-Map_obj32
0000C56C 0000                       		dc.w byte_BEB7-Map_obj32
0000C56E 02                         byte_BEAC:	dc.b 2
0000C56F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C574 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C579 02                         byte_BEB7:	dc.b 2
0000C57A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C57F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C584 02                         byte_BEC2:	dc.b 2
0000C585 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C58A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C58F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C594                            		even
0000C594                            		even
0000C594                            
0000C594                            ; ===========================================================================
0000C594                            ; ---------------------------------------------------------------------------
0000C594                            ; Object 33 - pushable blocks (MZ, LZ)
0000C594                            ; ---------------------------------------------------------------------------
0000C594                            
0000C594                            Obj33:					; XREF: Obj_Index
0000C594 7000                       		moveq	#0,d0
0000C596 1028 0024                  		move.b	$24(a0),d0
0000C59A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C59E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C5A2                            ; ===========================================================================
0000C5A2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C5A4 0000                       		dc.w loc_BF6E-Obj33_Index
0000C5A6 0000                       		dc.w loc_C02C-Obj33_Index
0000C5A8                            
0000C5A8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C5AA 4001                       		dc.b $40, 1
0000C5AC                            ; ===========================================================================
0000C5AC                            
0000C5AC                            Obj33_Main:				; XREF: Obj33_Index
0000C5AC 5428 0024                  		addq.b	#2,$24(a0)
0000C5B0 117C 000F 0016             		move.b	#$F,$16(a0)
0000C5B6 117C 000F 0017             		move.b	#$F,$17(a0)
0000C5BC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C5C4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C5CA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C5D0 6600                       		bne.s	loc_BF16
0000C5D2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C5D8                            
0000C5D8                            loc_BF16:
0000C5D8 117C 0004 0001             		move.b	#4,1(a0)
0000C5DE 117C 0003 0018             		move.b	#3,$18(a0)
0000C5E4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C5EA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C5F0 7000                       		moveq	#0,d0
0000C5F2 1028 0028                  		move.b	$28(a0),d0
0000C5F6 D040                       		add.w	d0,d0
0000C5F8 0240 000E                  		andi.w	#$E,d0
0000C5FC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C600 115A 0019                  		move.b	(a2)+,$19(a0)
0000C604 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C608 4A28 0028                  		tst.b	$28(a0)
0000C60C 6700                       		beq.s	Obj33_ChkGone
0000C60E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C614                            
0000C614                            Obj33_ChkGone:
0000C614 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C618 7000                       		moveq	#0,d0
0000C61A 1028 0023                  		move.b	$23(a0),d0
0000C61E 6700                       		beq.s	loc_BF6E
0000C620 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C626 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C62C 6600 0000                  		bne.w	DeleteObject
0000C630                            
0000C630                            loc_BF6E:				; XREF: Obj33_Index
0000C630 4A28 0032                  		tst.b	$32(a0)
0000C634 6600 0000                  		bne.w	loc_C046
0000C638 7200                       		moveq	#0,d1
0000C63A 1228 0019                  		move.b	$19(a0),d1
0000C63E 0641 000B                  		addi.w	#$B,d1
0000C642 343C 0010                  		move.w	#$10,d2
0000C646 363C 0011                  		move.w	#$11,d3
0000C64A 3828 0008                  		move.w	8(a0),d4
0000C64E 6100 0000                  		bsr.w	loc_C186
0000C652 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C658 6600                       		bne.s	loc_BFC6	; if not, branch
0000C65A 08A8 0007 0028             		bclr	#7,$28(a0)
0000C660 3028 0008                  		move.w	8(a0),d0
0000C664 0C40 0A20                  		cmpi.w	#$A20,d0
0000C668 6500                       		bcs.s	loc_BFC6
0000C66A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C66E 6400                       		bcc.s	loc_BFC6
0000C670 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C674 0440 001C                  		subi.w	#$1C,d0
0000C678 3140 000C                  		move.w	d0,$C(a0)
0000C67C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C682 08E8 0007 0028             		bset	#7,$28(a0)
0000C688                            
0000C688                            loc_BFC6:
0000C688 3028 0008                  		move.w	8(a0),d0
0000C68C 0240 FF80                  		andi.w	#$FF80,d0
0000C690 3238 F700                  		move.w	($FFFFF700).w,d1
0000C694 0441 0080                  		subi.w	#$80,d1
0000C698 0241 FF80                  		andi.w	#$FF80,d1
0000C69C 9041                       		sub.w	d1,d0
0000C69E 0C40 0280                  		cmpi.w	#$280,d0
0000C6A2 6200                       		bhi.s	loc_BFE6
0000C6A4 6000 0000                  		bra.w	DisplaySprite
0000C6A8                            ; ===========================================================================
0000C6A8                            
0000C6A8                            loc_BFE6:
0000C6A8 3028 0034                  		move.w	$34(a0),d0
0000C6AC 0240 FF80                  		andi.w	#$FF80,d0
0000C6B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6B4 0441 0080                  		subi.w	#$80,d1
0000C6B8 0241 FF80                  		andi.w	#$FF80,d1
0000C6BC 9041                       		sub.w	d1,d0
0000C6BE 0C40 0280                  		cmpi.w	#$280,d0
0000C6C2 6200                       		bhi.s	loc_C016
0000C6C4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C6CA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C6D0 117C 0004 0024             		move.b	#4,$24(a0)
0000C6D6 6000                       		bra.s	loc_C02C
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            loc_C016:
0000C6D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6DC 7000                       		moveq	#0,d0
0000C6DE 1028 0023                  		move.b	$23(a0),d0
0000C6E2 6700                       		beq.s	loc_C028
0000C6E4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C6EA                            
0000C6EA                            loc_C028:
0000C6EA 6000 0000                  		bra.w	DeleteObject
0000C6EE                            ; ===========================================================================
0000C6EE                            
0000C6EE                            loc_C02C:				; XREF: Obj33_Index
0000C6EE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C6F2 6700                       		beq.s	locret_C044
0000C6F4 117C 0002 0024             		move.b	#2,$24(a0)
0000C6FA 4228 0032                  		clr.b	$32(a0)
0000C6FE 4268 0010                  		clr.w	$10(a0)
0000C702 4268 0012                  		clr.w	$12(a0)
0000C706                            
0000C706                            locret_C044:
0000C706 4E75                       		rts	
0000C708                            ; ===========================================================================
0000C708                            
0000C708                            loc_C046:				; XREF: loc_BF6E
0000C708 3F28 0008                  		move.w	8(a0),-(sp)
0000C70C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C712 6400                       		bcc.s	loc_C056
0000C714 6100 0000                  		bsr.w	SpeedToPos
0000C718                            
0000C718                            loc_C056:
0000C718 0828 0001 0022             		btst	#1,$22(a0)
0000C71E 6700                       		beq.s	loc_C0A0
0000C720 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C726 4EB9 0000 0000             		jsr	ObjHitFloor
0000C72C 4A41                       		tst.w	d1
0000C72E 6A00 0000                  		bpl.w	loc_C09E
0000C732 D368 000C                  		add.w	d1,$C(a0)
0000C736 4268 0012                  		clr.w	$12(a0)
0000C73A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C740 3011                       		move.w	(a1),d0
0000C742 0240 03FF                  		andi.w	#$3FF,d0
0000C746 0C40 016A                  		cmpi.w	#$16A,d0
0000C74A 6500                       		bcs.s	loc_C09E
0000C74C 3028 0030                  		move.w	$30(a0),d0
0000C750 E640                       		asr.w	#3,d0
0000C752 3140 0010                  		move.w	d0,$10(a0)
0000C756 117C 0001 0032             		move.b	#1,$32(a0)
0000C75C 4268 000E                  		clr.w	$E(a0)
0000C760                            
0000C760                            loc_C09E:
0000C760 6000                       		bra.s	loc_C0E6
0000C762                            ; ===========================================================================
0000C762                            
0000C762                            loc_C0A0:
0000C762 4A68 0010                  		tst.w	$10(a0)
0000C766 6700 0000                  		beq.w	loc_C0D6
0000C76A 6B00                       		bmi.s	loc_C0BC
0000C76C 7600                       		moveq	#0,d3
0000C76E 1628 0019                  		move.b	$19(a0),d3
0000C772 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C778 4A41                       		tst.w	d1		; has block touched a wall?
0000C77A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C77C 6000                       		bra.s	loc_C0E6
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            loc_C0BC:
0000C77E 7600                       		moveq	#0,d3
0000C780 1628 0019                  		move.b	$19(a0),d3
0000C784 4643                       		not.w	d3
0000C786 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C78C 4A41                       		tst.w	d1		; has block touched a wall?
0000C78E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C790 6000                       		bra.s	loc_C0E6
0000C792                            ; ===========================================================================
0000C792                            
0000C792                            Obj33_StopPush:
0000C792 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C796 6000                       		bra.s	loc_C0E6
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_C0D6:
0000C798 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C7A0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C7A6 6400                       		bcc.s	loc_C104
0000C7A8                            
0000C7A8                            loc_C0E6:
0000C7A8 7200                       		moveq	#0,d1
0000C7AA 1228 0019                  		move.b	$19(a0),d1
0000C7AE 0641 000B                  		addi.w	#$B,d1
0000C7B2 343C 0010                  		move.w	#$10,d2
0000C7B6 363C 0011                  		move.w	#$11,d3
0000C7BA 381F                       		move.w	(sp)+,d4
0000C7BC 6100 0000                  		bsr.w	loc_C186
0000C7C0 6100                       		bsr.s	Obj33_ChkLava
0000C7C2 6000 FEC4                  		bra.w	loc_BFC6
0000C7C6                            ; ===========================================================================
0000C7C6                            
0000C7C6                            loc_C104:
0000C7C6 381F                       		move.w	(sp)+,d4
0000C7C8 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7CC 08A9 0003 0022             		bclr	#3,$22(a1)
0000C7D2 08A8 0003 0022             		bclr	#3,$22(a0)
0000C7D8 6000 FECE                  		bra.w	loc_BFE6
0000C7DC                            ; ===========================================================================
0000C7DC                            
0000C7DC                            Obj33_ChkLava:
0000C7DC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C7E2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C7E4 343C FFE0                  		move.w	#-$20,d2
0000C7E8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C7EE 6700                       		beq.s	Obj33_LoadLava
0000C7F0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C7F6 6700                       		beq.s	Obj33_LoadLava
0000C7F8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C7FE 6700                       		beq.s	Obj33_LoadLava
0000C800 4E75                       		rts	
0000C802                            ; ===========================================================================
0000C802                            
0000C802                            Obj33_ChkLava2:
0000C802 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C808 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C80A 343C 0020                  		move.w	#$20,d2
0000C80E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C814 6700                       		beq.s	Obj33_LoadLava
0000C816 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C81C 6700                       		beq.s	Obj33_LoadLava
0000C81E                            
0000C81E                            Obj33_NoLava:
0000C81E 4E75                       		rts	
0000C820                            ; ===========================================================================
0000C820                            
0000C820                            Obj33_LoadLava:
0000C820 6100 0000                  		bsr.w	SingleObjLoad
0000C824 6600                       		bne.s	locret_C184
0000C826 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C82A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C830 D569 0008                  		add.w	d2,8(a1)
0000C834 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C83A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C840 2348 003C                  		move.l	a0,$3C(a1)
0000C844                            
0000C844                            locret_C184:
0000C844 4E75                       		rts	
0000C846                            ; ===========================================================================
0000C846                            
0000C846                            loc_C186:				; XREF: loc_BF6E
0000C846 1028 0025                  		move.b	$25(a0),d0
0000C84A 6700 0000                  		beq.w	loc_C218
0000C84E 5500                       		subq.b	#2,d0
0000C850 6600                       		bne.s	loc_C1AA
0000C852 6100 B31C                  		bsr.w	ExitPlatform
0000C856 0829 0003 0022             		btst	#3,$22(a1)
0000C85C 6600                       		bne.s	loc_C1A4
0000C85E 4228 0025                  		clr.b	$25(a0)
0000C862 4E75                       		rts	
0000C864                            ; ===========================================================================
0000C864                            
0000C864                            loc_C1A4:
0000C864 3404                       		move.w	d4,d2
0000C866 6000 B866                  		bra.w	MvSonicOnPtfm
0000C86A                            ; ===========================================================================
0000C86A                            
0000C86A                            loc_C1AA:
0000C86A 5500                       		subq.b	#2,d0
0000C86C 6600                       		bne.s	loc_C1F2
0000C86E 6100 0000                  		bsr.w	SpeedToPos
0000C872 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C878 4EB9 0000 0000             		jsr	ObjHitFloor
0000C87E 4A41                       		tst.w	d1
0000C880 6A00 0000                  		bpl.w	locret_C1F0
0000C884 D368 000C                  		add.w	d1,$C(a0)
0000C888 4268 0012                  		clr.w	$12(a0)
0000C88C 4228 0025                  		clr.b	$25(a0)
0000C890 3011                       		move.w	(a1),d0
0000C892 0240 03FF                  		andi.w	#$3FF,d0
0000C896 0C40 016A                  		cmpi.w	#$16A,d0
0000C89A 6500                       		bcs.s	locret_C1F0
0000C89C 3028 0030                  		move.w	$30(a0),d0
0000C8A0 E640                       		asr.w	#3,d0
0000C8A2 3140 0010                  		move.w	d0,$10(a0)
0000C8A6 117C 0001 0032             		move.b	#1,$32(a0)
0000C8AC 4268 000E                  		clr.w	$E(a0)
0000C8B0                            
0000C8B0                            locret_C1F0:
0000C8B0 4E75                       		rts	
0000C8B2                            ; ===========================================================================
0000C8B2                            
0000C8B2                            loc_C1F2:
0000C8B2 6100 0000                  		bsr.w	SpeedToPos
0000C8B6 3028 0008                  		move.w	8(a0),d0
0000C8BA 0240 000C                  		andi.w	#$C,d0
0000C8BE 6600 0000                  		bne.w	locret_C2E4
0000C8C2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C8C8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C8CE 4268 0010                  		clr.w	$10(a0)
0000C8D2 5528 0025                  		subq.b	#2,$25(a0)
0000C8D6 4E75                       		rts	
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            loc_C218:
0000C8D8 6100 0000                  		bsr.w	loc_FAC8
0000C8DC 4A44                       		tst.w	d4
0000C8DE 6700 0000                  		beq.w	locret_C2E4
0000C8E2 6B00 0000                  		bmi.w	locret_C2E4
0000C8E6 4A28 0032                  		tst.b	$32(a0)
0000C8EA 6700                       		beq.s	loc_C230
0000C8EC 6000 0000                  		bra.w	locret_C2E4
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            loc_C230:
0000C8F0 4A40                       		tst.w	d0
0000C8F2 6700 0000                  		beq.w	locret_C2E4
0000C8F6 6B00                       		bmi.s	loc_C268
0000C8F8 0829 0000 0022             		btst	#0,$22(a1)
0000C8FE 6600 0000                  		bne.w	locret_C2E4
0000C902 3F00                       		move.w	d0,-(sp)
0000C904 7600                       		moveq	#0,d3
0000C906 1628 0019                  		move.b	$19(a0),d3
0000C90A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C910 301F                       		move.w	(sp)+,d0
0000C912 4A41                       		tst.w	d1
0000C914 6B00 0000                  		bmi.w	locret_C2E4
0000C918 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C920 7001                       		moveq	#1,d0
0000C922 323C 0040                  		move.w	#$40,d1
0000C926 6000                       		bra.s	loc_C294
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            loc_C268:
0000C928 0829 0000 0022             		btst	#0,$22(a1)
0000C92E 6700                       		beq.s	locret_C2E4
0000C930 3F00                       		move.w	d0,-(sp)
0000C932 7600                       		moveq	#0,d3
0000C934 1628 0019                  		move.b	$19(a0),d3
0000C938 4643                       		not.w	d3
0000C93A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C940 301F                       		move.w	(sp)+,d0
0000C942 4A41                       		tst.w	d1
0000C944 6B00                       		bmi.s	locret_C2E4
0000C946 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C94E 70FF                       		moveq	#-1,d0
0000C950 323C FFC0                  		move.w	#-$40,d1
0000C954                            
0000C954                            loc_C294:
0000C954 43F8 D000                  		lea	($FFFFD000).w,a1
0000C958 D169 0008                  		add.w	d0,8(a1)
0000C95C 3341 0014                  		move.w	d1,$14(a1)
0000C960 337C 0000 0010             		move.w	#0,$10(a1)
0000C966 3F00                       		move.w	d0,-(sp)
0000C968 303C 00A7                  		move.w	#$A7,d0
0000C96C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C972 301F                       		move.w	(sp)+,d0
0000C974 4A28 0028                  		tst.b	$28(a0)
0000C978 6B00                       		bmi.s	locret_C2E4
0000C97A 3F00                       		move.w	d0,-(sp)
0000C97C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C982 301F                       		move.w	(sp)+,d0
0000C984 0C41 0004                  		cmpi.w	#4,d1
0000C988 6F00                       		ble.s	loc_C2E0
0000C98A 317C 0400 0010             		move.w	#$400,$10(a0)
0000C990 4A40                       		tst.w	d0
0000C992 6A00                       		bpl.s	loc_C2D8
0000C994 4468 0010                  		neg.w	$10(a0)
0000C998                            
0000C998                            loc_C2D8:
0000C998 117C 0006 0025             		move.b	#6,$25(a0)
0000C99E 6000                       		bra.s	locret_C2E4
0000C9A0                            ; ===========================================================================
0000C9A0                            
0000C9A0                            loc_C2E0:
0000C9A0 D368 000C                  		add.w	d1,$C(a0)
0000C9A4                            
0000C9A4                            locret_C2E4:
0000C9A4 4E75                       		rts	
0000C9A6                            ; ===========================================================================
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            Map_obj33:
0000C9A6                            	include "_maps\obj33.asm"
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6 0000                       		dc.w byte_C2EA-Map_obj33
0000C9A8 0000                       		dc.w byte_C2F0-Map_obj33
0000C9AA 01                         byte_C2EA:	dc.b 1
0000C9AB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C9B0 04                         byte_C2F0:	dc.b 4
0000C9B1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C9B6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C9BB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C9C0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C9C6 00                         		even
0000C9C6 00                         		even
0000C9C6                            
0000C9C6                            ; ===========================================================================
0000C9C6                            ; ---------------------------------------------------------------------------
0000C9C6                            ; Object 34 - zone title cards
0000C9C6                            ; ---------------------------------------------------------------------------
0000C9C6                            
0000C9C6                            Obj34:					; XREF: Obj_Index
0000C9C6 7000                       		moveq	#0,d0
0000C9C8 1028 0024                  		move.b	$24(a0),d0
0000C9CC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C9D0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C9D4                            ; ===========================================================================
0000C9D4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C9D6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C9D8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9DA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9DC                            ; ===========================================================================
0000C9DC                            
0000C9DC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C9DC 2248                       		movea.l	a0,a1
0000C9DE 7000                       		moveq	#0,d0
0000C9E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C9E4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C9EA 6600                       		bne.s	Obj34_CheckFZ
0000C9EC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C9EE                            
0000C9EE                            Obj34_CheckFZ:
0000C9EE 3400                       		move.w	d0,d2
0000C9F0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C9F6 6600                       		bne.s	Obj34_LoadConfig
0000C9F8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C9FA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C9FC                            
0000C9FC                            Obj34_LoadConfig:
0000C9FC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA02 E948                       		lsl.w	#4,d0
0000CA04 D6C0                       		adda.w	d0,a3
0000CA06 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA0C 7203                       		moveq	#3,d1
0000CA0E                            
0000CA0E                            Obj34_Loop:
0000CA0E 12BC 0034                  		move.b	#$34,0(a1)
0000CA12 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA16 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA1A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CA1E 335A 000A                  		move.w	(a2)+,$A(a1)
0000CA22 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA26 101A                       		move.b	(a2)+,d0
0000CA28 6600                       		bne.s	Obj34_ActNumber
0000CA2A 1002                       		move.b	d2,d0
0000CA2C                            
0000CA2C                            Obj34_ActNumber:
0000CA2C 0C00 0007                  		cmpi.b	#7,d0
0000CA30 6600                       		bne.s	Obj34_MakeSprite
0000CA32 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CA36 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CA3C 6600                       		bne.s	Obj34_MakeSprite
0000CA3E 5300                       		subq.b	#1,d0
0000CA40                            
0000CA40                            Obj34_MakeSprite:
0000CA40 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CA44 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CA4C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA52 137C 0078 0019             		move.b	#$78,$19(a1)
0000CA58 137C 0000 0001             		move.b	#0,1(a1)
0000CA5E 137C 0000 0018             		move.b	#0,$18(a1)
0000CA64 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CA6A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA6E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CA72                            
0000CA72                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CA72 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA74 3028 0030                  		move.w	$30(a0),d0
0000CA78 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CA7C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CA7E 6C00                       		bge.s	Obj34_Move
0000CA80 4441                       		neg.w	d1
0000CA82                            
0000CA82                            Obj34_Move:
0000CA82 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA86                            
0000CA86                            loc_C3C8:
0000CA86 3028 0008                  		move.w	8(a0),d0
0000CA8A 6B00                       		bmi.s	locret_C3D8
0000CA8C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA90 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CA92 6000 0000                  		bra.w	DisplaySprite
0000CA96                            ; ===========================================================================
0000CA96                            
0000CA96                            locret_C3D8:
0000CA96 4E75                       		rts	
0000CA98                            ; ===========================================================================
0000CA98                            
0000CA98                            Obj34_Wait:				; XREF: Obj34_Index
0000CA98 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CA9C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CA9E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CAA2 6000 0000                  		bra.w	DisplaySprite
0000CAA6                            ; ===========================================================================
0000CAA6                            
0000CAA6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CAA6 4A28 0001                  		tst.b	1(a0)
0000CAAA 6A00                       		bpl.s	Obj34_ChangeArt
0000CAAC 7220                       		moveq	#$20,d1
0000CAAE 3028 0032                  		move.w	$32(a0),d0
0000CAB2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CAB6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CAB8 6C00                       		bge.s	Obj34_Move2
0000CABA 4441                       		neg.w	d1
0000CABC                            
0000CABC                            Obj34_Move2:
0000CABC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAC0 3028 0008                  		move.w	8(a0),d0
0000CAC4 6B00                       		bmi.s	locret_C412
0000CAC6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CACA 6400                       		bcc.s	locret_C412	; if yes, branch
0000CACC 6000 0000                  		bra.w	DisplaySprite
0000CAD0                            ; ===========================================================================
0000CAD0                            
0000CAD0                            locret_C412:
0000CAD0 4E75                       		rts	
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CAD2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CAD8 6600                       		bne.s	Obj34_Delete
0000CADA 7002                       		moveq	#2,d0
0000CADC 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CAE2 7000                       		moveq	#0,d0
0000CAE4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CAE8 0640 0015                  		addi.w	#$15,d0
0000CAEC 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CAF2                            
0000CAF2                            Obj34_Delete:
0000CAF2 6000 0000                  		bra.w	DeleteObject
0000CAF6                            ; ===========================================================================
0000CAF6 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CAF8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CAFA 00E4                       		dc.w $E4
0000CAFC 0206                       		dc.b 2,	6
0000CAFE 00EA                       		dc.w $EA
0000CB00 0207                       		dc.b 2,	7
0000CB02 00E0                       		dc.w $E0
0000CB04 020A                       		dc.b 2,	$A
0000CB06                            ; ---------------------------------------------------------------------------
0000CB06                            ; Title	card configuration data
0000CB06                            ; Format:
0000CB06                            ; 4 bytes per item (YYYY XXXX)
0000CB06                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB06                            ; ---------------------------------------------------------------------------
0000CB06 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CB16 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB26 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB36 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB46 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CB56 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CB66 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CB76                            ; ===========================================================================
0000CB76                            ; ---------------------------------------------------------------------------
0000CB76                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CB76                            ; ---------------------------------------------------------------------------
0000CB76                            
0000CB76                            Obj39:					; XREF: Obj_Index
0000CB76 7000                       		moveq	#0,d0
0000CB78 1028 0024                  		move.b	$24(a0),d0
0000CB7C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CB80 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CB84                            ; ===========================================================================
0000CB84 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CB86 0000                       		dc.w loc_C50C-Obj39_Index
0000CB88 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CB8A                            ; ===========================================================================
0000CB8A                            
0000CB8A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CB8A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CB8E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CB90 4E75                       		rts	
0000CB92                            ; ===========================================================================
0000CB92                            
0000CB92                            Obj39_Main:
0000CB92 5428 0024                  		addq.b	#2,$24(a0)
0000CB96 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CB9C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CBA2 6700                       		beq.s	loc_C4EC	; if not, branch
0000CBA4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CBAA                            
0000CBAA                            loc_C4EC:
0000CBAA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CBB0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CBB8 317C 855E 0002             		move.w	#$855E,2(a0)
0000CBBE 117C 0000 0001             		move.b	#0,1(a0)
0000CBC4 117C 0000 0018             		move.b	#0,$18(a0)
0000CBCA                            
0000CBCA                            loc_C50C:				; XREF: Obj39_Index
0000CBCA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBCC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CBD2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CBD4 6500                       		bcs.s	Obj39_Move
0000CBD6 4441                       		neg.w	d1
0000CBD8                            
0000CBD8                            Obj39_Move:
0000CBD8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBDC 6000 0000                  		bra.w	DisplaySprite
0000CBE0                            ; ===========================================================================
0000CBE0                            
0000CBE0                            Obj39_SetWait:				; XREF: Obj39_Main
0000CBE0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CBE6 5428 0024                  		addq.b	#2,$24(a0)
0000CBEA 4E75                       		rts	
0000CBEC                            ; ===========================================================================
0000CBEC                            
0000CBEC                            Obj39_Wait:				; XREF: Obj39_Index
0000CBEC 1038 F605                  		move.b	($FFFFF605).w,d0
0000CBF0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CBF4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CBF6 0828 0000 001A             		btst	#0,$1A(a0)
0000CBFC 6600                       		bne.s	Obj39_Display
0000CBFE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC02 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC04 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC08 6000 0000                  		bra.w	DisplaySprite
0000CC0C                            ; ===========================================================================
0000CC0C                            
0000CC0C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CC0C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CC10 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CC12 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CC18 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CC1C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CC1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CC24 6000                       		bra.s	Obj39_Display
0000CC26                            ; ===========================================================================
0000CC26                            
0000CC26                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CC26 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC2C                            
0000CC2C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CC2C 6000 0000                  		bra.w	DisplaySprite
0000CC30                            ; ===========================================================================
0000CC30                            ; ---------------------------------------------------------------------------
0000CC30                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC30                            ; ---------------------------------------------------------------------------
0000CC30                            
0000CC30                            Obj3A:					; XREF: Obj_Index
0000CC30 7000                       		moveq	#0,d0
0000CC32 1028 0024                  		move.b	$24(a0),d0
0000CC36 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CC3A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CC3E                            ; ===========================================================================
0000CC3E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CC40 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CC42 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC44 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CC46 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC48 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CC4A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC4C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CC4E 0000                       		dc.w loc_C766-Obj3A_Index
0000CC50                            ; ===========================================================================
0000CC50                            
0000CC50                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CC50 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC54 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CC56 4E75                       		rts	
0000CC58                            ; ===========================================================================
0000CC58                            
0000CC58                            Obj3A_Main:
0000CC58 2248                       		movea.l	a0,a1
0000CC5A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CC60 7206                       		moveq	#6,d1
0000CC62                            
0000CC62                            Obj3A_Loop:
0000CC62 12BC 003A                  		move.b	#$3A,0(a1)
0000CC66 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CC6A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CC6E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CC72 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CC76 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC7A 101A                       		move.b	(a2)+,d0
0000CC7C 0C00 0006                  		cmpi.b	#6,d0
0000CC80 6600                       		bne.s	loc_C5CA
0000CC82 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CC86                            
0000CC86                            loc_C5CA:
0000CC86 1340 001A                  		move.b	d0,$1A(a1)
0000CC8A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CC92 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC98 137C 0000 0001             		move.b	#0,1(a1)
0000CC9E 43E9 0040                  		lea	$40(a1),a1
0000CCA2 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CCA6                            
0000CCA6                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CCA6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCA8 3028 0030                  		move.w	$30(a0),d0
0000CCAC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CCB0 6700                       		beq.s	loc_C61A	; if yes, branch
0000CCB2 6C00                       		bge.s	Obj3A_Move
0000CCB4 4441                       		neg.w	d1
0000CCB6                            
0000CCB6                            Obj3A_Move:
0000CCB6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCBA                            
0000CCBA                            loc_C5FE:				; XREF: loc_C61A
0000CCBA 3028 0008                  		move.w	8(a0),d0
0000CCBE 6B00                       		bmi.s	locret_C60E
0000CCC0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCC4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CCC6 6000 0000                  		bra.w	DisplaySprite
0000CCCA                            ; ===========================================================================
0000CCCA                            
0000CCCA                            locret_C60E:
0000CCCA 4E75                       		rts	
0000CCCC                            ; ===========================================================================
0000CCCC                            
0000CCCC                            loc_C610:				; XREF: loc_C61A
0000CCCC 117C 000E 0024             		move.b	#$E,$24(a0)
0000CCD2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CCD6                            ; ===========================================================================
0000CCD6                            
0000CCD6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CCD6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CCDC 67EE                       		beq.s	loc_C610
0000CCDE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CCE4 66D4                       		bne.s	loc_C5FE
0000CCE6 5428 0024                  		addq.b	#2,$24(a0)
0000CCEA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CCF0                            
0000CCF0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CCF0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCF4 6600                       		bne.s	Obj3A_Display
0000CCF6 5428 0024                  		addq.b	#2,$24(a0)
0000CCFA                            
0000CCFA                            Obj3A_Display:
0000CCFA 6000 0000                  		bra.w	DisplaySprite
0000CCFE                            ; ===========================================================================
0000CCFE                            
0000CCFE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CCFE 6100 0000                  		bsr.w	DisplaySprite
0000CD02 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD08 7000                       		moveq	#0,d0
0000CD0A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CD0E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CD10 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD14 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CD1A                            
0000CD1A                            Obj3A_RingBonus:
0000CD1A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD1E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CD20 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD24 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD2A                            
0000CD2A                            Obj3A_ChkBonus:
0000CD2A 4A40                       		tst.w	d0		; is there any bonus?
0000CD2C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CD2E 303C 00C5                  		move.w	#$C5,d0
0000CD32 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD38 5428 0024                  		addq.b	#2,$24(a0)
0000CD3C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CD42 6600                       		bne.s	Obj3A_SetDelay
0000CD44 5828 0024                  		addq.b	#4,$24(a0)
0000CD48                            
0000CD48                            Obj3A_SetDelay:
0000CD48 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD4E                            
0000CD4E                            locret_C692:
0000CD4E 4E75                       		rts	
0000CD50                            ; ===========================================================================
0000CD50                            
0000CD50                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CD50 4EB9 0000 0000             		jsr	AddPoints
0000CD56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD5A 0200 0003                  		andi.b	#3,d0
0000CD5E 66EE                       		bne.s	locret_C692
0000CD60 303C 00CD                  		move.w	#$CD,d0
0000CD64 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD6A                            ; ===========================================================================
0000CD6A                            
0000CD6A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CD6A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD6E 0240 0007                  		andi.w	#7,d0
0000CD72 E748                       		lsl.w	#3,d0
0000CD74 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CD78 0241 0003                  		andi.w	#3,d1
0000CD7C D241                       		add.w	d1,d1
0000CD7E D041                       		add.w	d1,d0
0000CD80 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CD84 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CD88 4A40                       		tst.w	d0
0000CD8A 6600                       		bne.s	Obj3A_ChkSS
0000CD8C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CD92 6000                       		bra.s	Obj3A_Display2
0000CD94                            ; ===========================================================================
0000CD94                            
0000CD94                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CD94 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CD98 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CD9C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CD9E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CDA4 6000                       		bra.s	Obj3A_Display2
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CDA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDAC                            
0000CDAC                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CDAC 6000 0000                  		bra.w	DisplaySprite
0000CDB0                            ; ===========================================================================
0000CDB0                            ; ---------------------------------------------------------------------------
0000CDB0                            ; Level	order array
0000CDB0                            ; ---------------------------------------------------------------------------
0000CDB0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CDE0                            		even
0000CDE0                            ; ===========================================================================
0000CDE0                            
0000CDE0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CDE0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CDE2 3028 0032                  		move.w	$32(a0),d0
0000CDE6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CDEA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CDEC 6C00                       		bge.s	Obj3A_Move2
0000CDEE 4441                       		neg.w	d1
0000CDF0                            
0000CDF0                            Obj3A_Move2:
0000CDF0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDF4 3028 0008                  		move.w	8(a0),d0
0000CDF8 6B00                       		bmi.s	locret_C748
0000CDFA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDFE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE00 6000 0000                  		bra.w	DisplaySprite
0000CE04                            ; ===========================================================================
0000CE04                            
0000CE04                            locret_C748:
0000CE04 4E75                       		rts	
0000CE06                            ; ===========================================================================
0000CE06                            
0000CE06                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE06 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CE0C 6600 0000                  		bne.w	DeleteObject
0000CE10 5428 0024                  		addq.b	#2,$24(a0)
0000CE14 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CE18 303C 008D                  		move.w	#$8D,d0
0000CE1C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CE22                            ; ===========================================================================
0000CE22                            
0000CE22                            loc_C766:				; XREF: Obj3A_Index
0000CE22 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CE26 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CE2C 6700 0000                  		beq.w	DeleteObject
0000CE30 4E75                       		rts	
0000CE32                            ; ===========================================================================
0000CE32 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CE38 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CE3A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CE40 0201                       		dc.b 2,	1
0000CE42 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CE48 0206                       		dc.b 2,	6
0000CE4A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CE50 0202                       		dc.b 2,	2
0000CE52 0540 0120 00FC             		dc.w $540, $120, $FC
0000CE58 0203                       		dc.b 2,	3
0000CE5A 0560 0120 010C             		dc.w $560, $120, $10C
0000CE60 0204                       		dc.b 2,	4
0000CE62 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CE68 0205                       		dc.b 2,	5
0000CE6A                            ; ===========================================================================
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            ; Object 7E - special stage results screen
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            
0000CE6A                            Obj7E:					; XREF: Obj_Index
0000CE6A 7000                       		moveq	#0,d0
0000CE6C 1028 0024                  		move.b	$24(a0),d0
0000CE70 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CE74 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CE78                            ; ===========================================================================
0000CE78 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CE7A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CE7C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE7E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CE80 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE82 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE84 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE86 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CE88 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE8A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE8C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CE8E                            ; ===========================================================================
0000CE8E                            
0000CE8E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CE8E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE92 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CE94 4E75                       		rts	
0000CE96                            ; ===========================================================================
0000CE96                            
0000CE96                            Obj7E_Main:
0000CE96 2248                       		movea.l	a0,a1
0000CE98 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CE9E 7203                       		moveq	#3,d1
0000CEA0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CEA6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CEA8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CEAA                            
0000CEAA                            Obj7E_Loop:
0000CEAA 12BC 007E                  		move.b	#$7E,0(a1)
0000CEAE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CEB2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEB6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEBA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEBE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CEC2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CECA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CED0 137C 0000 0001             		move.b	#0,1(a1)
0000CED6 43E9 0040                  		lea	$40(a1),a1
0000CEDA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CEDE                            
0000CEDE 7007                       		moveq	#7,d0
0000CEE0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CEE4 6700                       		beq.s	loc_C842
0000CEE6 7000                       		moveq	#0,d0
0000CEE8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CEEC 6600                       		bne.s	loc_C842	; if not, branch
0000CEEE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CEF0 317C 0018 0008             		move.w	#$18,8(a0)
0000CEF6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CEFC                            
0000CEFC                            loc_C842:
0000CEFC 1140 001A                  		move.b	d0,$1A(a0)
0000CF00                            
0000CF00                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF00 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF02 3028 0030                  		move.w	$30(a0),d0
0000CF06 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF0A 6700                       		beq.s	loc_C86C	; if yes, branch
0000CF0C 6C00                       		bge.s	Obj7E_Move
0000CF0E 4441                       		neg.w	d1
0000CF10                            
0000CF10                            Obj7E_Move:
0000CF10 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF14                            
0000CF14                            loc_C85A:				; XREF: loc_C86C
0000CF14 3028 0008                  		move.w	8(a0),d0
0000CF18 6B00                       		bmi.s	locret_C86A
0000CF1A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF1E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF20 6000 0000                  		bra.w	DisplaySprite
0000CF24                            ; ===========================================================================
0000CF24                            
0000CF24                            locret_C86A:
0000CF24 4E75                       		rts	
0000CF26                            ; ===========================================================================
0000CF26                            
0000CF26                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CF26 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CF2C 66E6                       		bne.s	loc_C85A
0000CF2E 5428 0024                  		addq.b	#2,$24(a0)
0000CF32 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF38 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CF3E                            
0000CF3E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CF3E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF42 6600                       		bne.s	Obj7E_Display
0000CF44 5428 0024                  		addq.b	#2,$24(a0)
0000CF48                            
0000CF48                            Obj7E_Display:
0000CF48 6000 0000                  		bra.w	DisplaySprite
0000CF4C                            ; ===========================================================================
0000CF4C                            
0000CF4C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CF4C 6100 0000                  		bsr.w	DisplaySprite
0000CF50 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CF56 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF5A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CF5C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF62 700A                       		moveq	#10,d0		; add 10 to score
0000CF64 4EB9 0000 0000             		jsr	AddPoints
0000CF6A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF6E 0200 0003                  		andi.b	#3,d0
0000CF72 6600                       		bne.s	locret_C8EA
0000CF74 303C 00CD                  		move.w	#$CD,d0
0000CF78 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CF7E                            ; ===========================================================================
0000CF7E                            
0000CF7E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CF7E 303C 00C5                  		move.w	#$C5,d0
0000CF82 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF88 5428 0024                  		addq.b	#2,$24(a0)
0000CF8C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF92 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CF98 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CF9A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CFA0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CFA4                            
0000CFA4                            locret_C8EA:
0000CFA4 4E75                       		rts	
0000CFA6                            ; ===========================================================================
0000CFA6                            
0000CFA6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CFA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFAC 6000 0000                  		bra.w	DisplaySprite
0000CFB0                            ; ===========================================================================
0000CFB0                            
0000CFB0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CFB0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CFB6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CFBC 303C 00BF                  		move.w	#$BF,d0
0000CFC0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CFC6 5428 0024                  		addq.b	#2,$24(a0)
0000CFCA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CFD0 6000 0000                  		bra.w	DisplaySprite
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            loc_C91A:				; XREF: Obj7E_Index
0000CFD4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFD8 0200 000F                  		andi.b	#$F,d0
0000CFDC 6600                       		bne.s	Obj7E_Display2
0000CFDE 0868 0000 001A             		bchg	#0,$1A(a0)
0000CFE4                            
0000CFE4                            Obj7E_Display2:
0000CFE4 6000 0000                  		bra.w	DisplaySprite
0000CFE8                            ; ===========================================================================
0000CFE8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CFEE 0200                       		dc.b 2,	0		; rountine number, frame number
0000CFF0 0320 0120 0118             		dc.w $320, $120, $118
0000CFF6 0201                       		dc.b 2,	1
0000CFF8 0360 0120 0128             		dc.w $360, $120, $128
0000CFFE 0202                       		dc.b 2,	2
0000D000 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D006 0203                       		dc.b 2,	3
0000D008 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D00E 0206                       		dc.b 2,	6
0000D010                            ; ===========================================================================
0000D010                            ; ---------------------------------------------------------------------------
0000D010                            ; Object 7F - chaos emeralds from the special stage results screen
0000D010                            ; ---------------------------------------------------------------------------
0000D010                            
0000D010                            Obj7F:					; XREF: Obj_Index
0000D010 7000                       		moveq	#0,d0
0000D012 1028 0024                  		move.b	$24(a0),d0
0000D016 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D01A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D01E                            ; ===========================================================================
0000D01E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D020 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D022                            
0000D022                            ; ---------------------------------------------------------------------------
0000D022                            ; X-axis positions for chaos emeralds
0000D022                            ; ---------------------------------------------------------------------------
0000D022 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D02E                            ; ===========================================================================
0000D02E                            
0000D02E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D02E 2248                       		movea.l	a0,a1
0000D030 45F9 0000 D022             		lea	(Obj7F_PosData).l,a2
0000D036 7400                       		moveq	#0,d2
0000D038 7200                       		moveq	#0,d1
0000D03A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D03E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D040 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D044                            
0000D044                            Obj7F_Loop:
0000D044 12BC 007F                  		move.b	#$7F,0(a1)
0000D048 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D04C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D052 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D056 1633 2000                  		move.b	(a3,d2.w),d3
0000D05A 1343 001A                  		move.b	d3,$1A(a1)
0000D05E 1343 001C                  		move.b	d3,$1C(a1)
0000D062 5202                       		addq.b	#1,d2
0000D064 5429 0024                  		addq.b	#2,$24(a1)
0000D068 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D070 337C 8541 0002             		move.w	#$8541,2(a1)
0000D076 137C 0000 0001             		move.b	#0,1(a1)
0000D07C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D080 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D084                            
0000D084                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D084 1028 001A                  		move.b	$1A(a0),d0
0000D088 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D08E 0C00 0006                  		cmpi.b	#6,d0
0000D092 6600                       		bne.s	Obj7F_Display
0000D094 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D09A                            
0000D09A                            Obj7F_Display:
0000D09A 6000 0000                  		bra.w	DisplaySprite
0000D09E                            ; ===========================================================================
0000D09E                            ; ---------------------------------------------------------------------------
0000D09E                            ; Sprite mappings - zone title cards
0000D09E                            ; ---------------------------------------------------------------------------
0000D09E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D0A0 0000                       		dc.w byte_CA2C-Map_obj34
0000D0A2 0000                       		dc.w byte_CA5A-Map_obj34
0000D0A4 0000                       		dc.w byte_CA7A-Map_obj34
0000D0A6 0000                       		dc.w byte_CAA8-Map_obj34
0000D0A8 0000                       		dc.w byte_CADC-Map_obj34
0000D0AA 0000                       		dc.w byte_CB10-Map_obj34
0000D0AC 0000                       		dc.w byte_CB26-Map_obj34
0000D0AE 0000                       		dc.w byte_CB31-Map_obj34
0000D0B0 0000                       		dc.w byte_CB3C-Map_obj34
0000D0B2 0000                       		dc.w byte_CB47-Map_obj34
0000D0B4 0000                       		dc.w byte_CB8A-Map_obj34
0000D0B6 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D0B7 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D0BC F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D0C1 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D0C6 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D0CB F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D0D0 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D0D5 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D0DA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D0DF F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D0E4 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D0E9 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D0EE F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D0F3 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D0F4 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D0F9 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D0FE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D103 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D108 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D10D F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D112 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D117 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D11C F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D121 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D126 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D12B F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D130 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D135 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D13A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D13F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D144 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D149 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D14E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D153 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D158 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D15D F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D162 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D163 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D168 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D16D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D172 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D177 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D17C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D17D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D182 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D187 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D18C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D191 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D196 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D19B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D1A0 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D1A5 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D1AA F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D1AF F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D1B4 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D1B9 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D1BE F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D1C3 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D1C8 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D1CD F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D1D2 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D1D3 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D1D8 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D1DD F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D1E2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D1E7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D1EC F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D1F1 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D1F6 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D1FB F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D200 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D205 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D20A F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D20F F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D214 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D219 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D21E F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D223 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D228 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D22D F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D232 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D237 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D23C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D23D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D242 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D247 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D24C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D251 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D256 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D25B F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D260 04                         byte_CB10:	dc.b 4			; ZONE
0000D261 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D266 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D26B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D270 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D275 00                         		dc.b 0
0000D276 02                         byte_CB26:	dc.b 2			; ACT 1
0000D277 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D27C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D281 02                         byte_CB31:	dc.b 2			; ACT 2
0000D282 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D287 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D28C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D28D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D292 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D297 0D                         byte_CB47:	dc.b $D			; Oval
0000D298 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D29D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D2A2 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D2A7 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D2AC 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D2B1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D2B6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D2BB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D2C0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D2C5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D2CA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D2CF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D2D4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D2D9 00                         		dc.b 0
0000D2DA 05                         byte_CB8A:	dc.b 5			; FINAL
0000D2DB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D2E0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D2E5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D2EA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D2EF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D2F4                            		even
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4                            Map_obj39:
0000D2F4                            	include "_maps\obj39.asm"
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2F4                            ; ---------------------------------------------------------------------------
0000D2F4 0000                       		dc.w byte_CBAC-Map_obj39
0000D2F6 0000                       		dc.w byte_CBB7-Map_obj39
0000D2F8 0000                       		dc.w byte_CBC2-Map_obj39
0000D2FA 0000                       		dc.w byte_CBCD-Map_obj39
0000D2FC 02                         byte_CBAC:	dc.b 2
0000D2FD F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D302 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D307 02                         byte_CBB7:	dc.b 2
0000D308 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D30D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D312 02                         byte_CBC2:	dc.b 2
0000D313 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D318 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D31D 02                         byte_CBCD:	dc.b 2
0000D31E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D323 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D328                            		even
0000D328                            		even
0000D328                            
0000D328                            ; ---------------------------------------------------------------------------
0000D328                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D328                            ; ---------------------------------------------------------------------------
0000D328 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D32A 0000                       		dc.w byte_CC13-Map_obj3A
0000D32C 0000                       		dc.w byte_CC32-Map_obj3A
0000D32E 0000                       		dc.w byte_CC51-Map_obj3A
0000D330 0000                       		dc.w byte_CC75-Map_obj3A
0000D332 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D334 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D336 FF59                       		dc.w byte_CB31-Map_obj3A
0000D338 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D33A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D33B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D340 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D345 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D34A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D34F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D354 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D359 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D35E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D363 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D368 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D36D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D372 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D377 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D37C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D381 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D386 06                         byte_CC13:	dc.b 6			; PASSED
0000D387 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D38C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D391 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D396 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D39B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D3A0 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D3A5 06                         byte_CC32:	dc.b 6			; SCORE
0000D3A6 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D3AB F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D3B0 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D3B5 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D3BA F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3BF FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3C4 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D3C5 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D3CA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3CF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3D4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3D9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3DE F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D3E3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3E8 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D3E9 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3EE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3F3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3F8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3FD FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D402 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D407 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D40C                            		even
0000D40C                            ; ---------------------------------------------------------------------------
0000D40C                            ; Sprite mappings - special stage results screen
0000D40C                            ; ---------------------------------------------------------------------------
0000D40C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D40E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D410 0000                       		dc.w byte_CD0D-Map_obj7E
0000D412 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D414 0000                       		dc.w byte_CD31-Map_obj7E
0000D416 0000                       		dc.w byte_CD46-Map_obj7E
0000D418 0000                       		dc.w byte_CD5B-Map_obj7E
0000D41A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D41C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D41E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D41F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D424 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D429 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D42E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D433 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D438 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D43D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D442 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D447 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D44C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D451 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D456 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D45B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D460 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D461 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D466 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D46B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D470 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D475 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D47A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D47F 07                         byte_CD0D:	dc.b 7
0000D480 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D485 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D48A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D48F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D494 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D499 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D49E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4A3 04                         byte_CD31:	dc.b 4
0000D4A4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4A9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4AE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4B3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D4B8 04                         byte_CD46:	dc.b 4
0000D4B9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4BE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4C3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4C8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D4CD 03                         byte_CD5B:	dc.b 3
0000D4CE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4D3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4D8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4DD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D4DE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D4E3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D4E8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D4ED F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D4F2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D4F7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D4FC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D501 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D506 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D50B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D510 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D515 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D51A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D51B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D520 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D525 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D52A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D52F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D534 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D539 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D53E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D543 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D548 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D54D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D552 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D557 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D55C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D561 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D566                            		even
0000D566                            ; ---------------------------------------------------------------------------
0000D566                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D566                            ; ---------------------------------------------------------------------------
0000D566                            Map_obj7F:
0000D566                            	include "_maps\obj7F.asm"
0000D566                            ; ---------------------------------------------------------------------------
0000D566                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D566                            ; ---------------------------------------------------------------------------
0000D566 0000                       		dc.w byte_CE02-Map_obj7F
0000D568 0000                       		dc.w byte_CE08-Map_obj7F
0000D56A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D56C 0000                       		dc.w byte_CE14-Map_obj7F
0000D56E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D570 0000                       		dc.w byte_CE20-Map_obj7F
0000D572 0000                       		dc.w byte_CE26-Map_obj7F
0000D574 01                         byte_CE02:	dc.b 1
0000D575 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D57A 01                         byte_CE08:	dc.b 1
0000D57B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D580 01                         byte_CE0E:	dc.b 1
0000D581 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D586 01                         byte_CE14:	dc.b 1
0000D587 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D58C 01                         byte_CE1A:	dc.b 1
0000D58D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D592 01                         byte_CE20:	dc.b 1
0000D593 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D598 00                         byte_CE26:	dc.b 0			; Blank frame
0000D59A 00                         		even
0000D59A 00                         		even
0000D59A                            
0000D59A                            ; ===========================================================================
0000D59A                            ; ---------------------------------------------------------------------------
0000D59A                            ; Object 36 - spikes
0000D59A                            ; ---------------------------------------------------------------------------
0000D59A                            
0000D59A                            Obj36:					; XREF: Obj_Index
0000D59A 7000                       		moveq	#0,d0
0000D59C 1028 0024                  		move.b	$24(a0),d0
0000D5A0 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D5A4 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D5A8                            ; ===========================================================================
0000D5A8 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D5AA 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D5AC                            
0000D5AC 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D5AE 0110                       		dc.b 1,	$10
0000D5B0 0204                       		dc.b 2,	4
0000D5B2 031C                       		dc.b 3,	$1C
0000D5B4 0440                       		dc.b 4,	$40
0000D5B6 0510                       		dc.b 5,	$10
0000D5B8                            ; ===========================================================================
0000D5B8                            
0000D5B8                            Obj36_Main:				; XREF: Obj36_Index
0000D5B8 5428 0024                  		addq.b	#2,$24(a0)
0000D5BC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D5C4 317C 051B 0002             		move.w	#$51B,2(a0)
0000D5CA 0028 0004 0001             		ori.b	#4,1(a0)
0000D5D0 117C 0004 0018             		move.b	#4,$18(a0)
0000D5D6 1028 0028                  		move.b	$28(a0),d0
0000D5DA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D5E0 0240 00F0                  		andi.w	#$F0,d0
0000D5E4 43F9 0000 D5AC             		lea	(Obj36_Var).l,a1
0000D5EA E648                       		lsr.w	#3,d0
0000D5EC D2C0                       		adda.w	d0,a1
0000D5EE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D5F2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D5F6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D5FC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D602                            
0000D602                            Obj36_Solid:				; XREF: Obj36_Index
0000D602 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D606 343C 0004                  		move.w	#4,d2
0000D60A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D610 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D612 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D618 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D61A 343C 0014                  		move.w	#$14,d2
0000D61E                            
0000D61E                            ; Spikes types $1x and $5x face	sideways
0000D61E                            
0000D61E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D61E 323C 001B                  		move.w	#$1B,d1
0000D622 3602                       		move.w	d2,d3
0000D624 5243                       		addq.w	#1,d3
0000D626 3828 0008                  		move.w	8(a0),d4
0000D62A 6100 0000                  		bsr.w	SolidObject
0000D62E 0828 0003 0022             		btst	#3,$22(a0)
0000D634 6600                       		bne.s	Obj36_Display
0000D636 0C44 0001                  		cmpi.w	#1,d4
0000D63A 6700                       		beq.s	Obj36_Hurt
0000D63C 6000                       		bra.s	Obj36_Display
0000D63E                            ; ===========================================================================
0000D63E                            
0000D63E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D63E                            
0000D63E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D63E 7200                       		moveq	#0,d1
0000D640 1228 0019                  		move.b	$19(a0),d1
0000D644 0641 000B                  		addi.w	#$B,d1
0000D648 343C 0010                  		move.w	#$10,d2
0000D64C 363C 0011                  		move.w	#$11,d3
0000D650 3828 0008                  		move.w	8(a0),d4
0000D654 6100 0000                  		bsr.w	SolidObject
0000D658 0828 0003 0022             		btst	#3,$22(a0)
0000D65E 6600                       		bne.s	Obj36_Hurt
0000D660 4A44                       		tst.w	d4
0000D662 6A00                       		bpl.s	Obj36_Display
0000D664                            
0000D664                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D664 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D668 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D66A 2F08                       		move.l	a0,-(sp)
0000D66C 2448                       		movea.l	a0,a2
0000D66E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D672 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D678 6400                       		bcc.s	loc_CF20
0000D67A 2628 000C                  		move.l	$C(a0),d3
0000D67E 3028 0012                  		move.w	$12(a0),d0
0000D682 48C0                       		ext.l	d0
0000D684 E180                       		asl.l	#8,d0
0000D686 9680                       		sub.l	d0,d3
0000D688 2143 000C                  		move.l	d3,$C(a0)
0000D68C 4EB9 0000 0000             		jsr	HurtSonic
0000D692                            
0000D692                            loc_CF20:
0000D692 205F                       		movea.l	(sp)+,a0
0000D694                            
0000D694                            Obj36_Display:
0000D694 6100 0000                  		bsr.w	DisplaySprite
0000D698 3028 0030                  		move.w	$30(a0),d0
0000D69C 0240 FF80                  		andi.w	#$FF80,d0
0000D6A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6A4 0441 0080                  		subi.w	#$80,d1
0000D6A8 0241 FF80                  		andi.w	#$FF80,d1
0000D6AC 9041                       		sub.w	d1,d0
0000D6AE 0C40 0280                  		cmpi.w	#$280,d0
0000D6B2 6200 0000                  		bhi.w	DeleteObject
0000D6B6 4E75                       		rts	
0000D6B8                            ; ===========================================================================
0000D6B8                            
0000D6B8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D6B8 7000                       		moveq	#0,d0
0000D6BA 1028 0028                  		move.b	$28(a0),d0
0000D6BE D040                       		add.w	d0,d0
0000D6C0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D6C4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D6C8                            ; ===========================================================================
0000D6C8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D6CA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D6CC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D6CE                            ; ===========================================================================
0000D6CE                            
0000D6CE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D6CE 4E75                       		rts			; don't move the object
0000D6D0                            ; ===========================================================================
0000D6D0                            
0000D6D0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D6D0 6100 0000                  		bsr.w	Obj36_Wait
0000D6D4 7000                       		moveq	#0,d0
0000D6D6 1028 0034                  		move.b	$34(a0),d0
0000D6DA D068 0032                  		add.w	$32(a0),d0
0000D6DE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D6E2 4E75                       		rts	
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D6E4 6100 0000                  		bsr.w	Obj36_Wait
0000D6E8 7000                       		moveq	#0,d0
0000D6EA 1028 0034                  		move.b	$34(a0),d0
0000D6EE D068 0030                  		add.w	$30(a0),d0
0000D6F2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D6F6 4E75                       		rts	
0000D6F8                            ; ===========================================================================
0000D6F8                            
0000D6F8                            Obj36_Wait:
0000D6F8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D6FC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D6FE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D702 6600                       		bne.s	locret_CFE6
0000D704 4A28 0001                  		tst.b	1(a0)
0000D708 6A00                       		bpl.s	locret_CFE6
0000D70A 303C 00B6                  		move.w	#$B6,d0
0000D70E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D714 6000                       		bra.s	locret_CFE6
0000D716                            ; ===========================================================================
0000D716                            
0000D716                            loc_CFA4:
0000D716 4A68 0036                  		tst.w	$36(a0)
0000D71A 6700                       		beq.s	loc_CFC6
0000D71C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D722 6400                       		bcc.s	locret_CFE6
0000D724 317C 0000 0034             		move.w	#0,$34(a0)
0000D72A 317C 0000 0036             		move.w	#0,$36(a0)
0000D730 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D736 6000                       		bra.s	locret_CFE6
0000D738                            ; ===========================================================================
0000D738                            
0000D738                            loc_CFC6:
0000D738 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D73E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D744 6500                       		bcs.s	locret_CFE6
0000D746 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D74C 317C 0001 0036             		move.w	#1,$36(a0)
0000D752 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D758                            
0000D758                            locret_CFE6:
0000D758 4E75                       		rts	
0000D75A                            ; ===========================================================================
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Sprite mappings - spikes
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            Map_obj36:
0000D75A                            	include "_maps\obj36.asm"
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Sprite mappings - spikes
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A 0000                       		dc.w byte_CFF4-Map_obj36
0000D75C 0000                       		dc.w byte_D004-Map_obj36
0000D75E 0000                       		dc.w byte_D014-Map_obj36
0000D760 0000                       		dc.w byte_D01A-Map_obj36
0000D762 0000                       		dc.w byte_D02A-Map_obj36
0000D764 0000                       		dc.w byte_D049-Map_obj36
0000D766 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D767 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D76C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D771 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D776 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D777 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D77C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D781 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D786 01                         byte_D014:	dc.b 1			; 1 spike
0000D787 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D78C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D78D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D792 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D797 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D79C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D79D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D7A2 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D7A7 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D7AC F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D7B1 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D7B6 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D7BB 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D7BC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7C2 00                         		even
0000D7C2 00                         		even
0000D7C2                            
0000D7C2                            ; ===========================================================================
0000D7C2                            ; ---------------------------------------------------------------------------
0000D7C2                            ; Object 3B - purple rock (GHZ)
0000D7C2                            ; ---------------------------------------------------------------------------
0000D7C2                            
0000D7C2                            Obj3B:					; XREF: Obj_Index
0000D7C2 7000                       		moveq	#0,d0
0000D7C4 1028 0024                  		move.b	$24(a0),d0
0000D7C8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D7CC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D7D0                            ; ===========================================================================
0000D7D0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D7D2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D7D4                            ; ===========================================================================
0000D7D4                            
0000D7D4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D7D4 5428 0024                  		addq.b	#2,$24(a0)
0000D7D8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D7E0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D7E6 117C 0004 0001             		move.b	#4,1(a0)
0000D7EC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D7F2 117C 0004 0018             		move.b	#4,$18(a0)
0000D7F8                            
0000D7F8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D7F8 323C 001B                  		move.w	#$1B,d1
0000D7FC 343C 0010                  		move.w	#$10,d2
0000D800 363C 0010                  		move.w	#$10,d3
0000D804 3828 0008                  		move.w	8(a0),d4
0000D808 6100 0000                  		bsr.w	SolidObject
0000D80C 6100 0000                  		bsr.w	DisplaySprite
0000D810 3028 0008                  		move.w	8(a0),d0
0000D814 0240 FF80                  		andi.w	#$FF80,d0
0000D818 3238 F700                  		move.w	($FFFFF700).w,d1
0000D81C 0441 0080                  		subi.w	#$80,d1
0000D820 0241 FF80                  		andi.w	#$FF80,d1
0000D824 9041                       		sub.w	d1,d0
0000D826 0C40 0280                  		cmpi.w	#$280,d0
0000D82A 6200 0000                  		bhi.w	DeleteObject
0000D82E 4E75                       		rts	
0000D830                            ; ===========================================================================
0000D830                            ; ---------------------------------------------------------------------------
0000D830                            ; Object 49 - waterfall	sound effect (GHZ)
0000D830                            ; ---------------------------------------------------------------------------
0000D830                            
0000D830                            Obj49:					; XREF: Obj_Index
0000D830 7000                       		moveq	#0,d0
0000D832 1028 0024                  		move.b	$24(a0),d0
0000D836 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D83A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D83E                            ; ===========================================================================
0000D83E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D840 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D842                            ; ===========================================================================
0000D842                            
0000D842                            Obj49_Main:				; XREF: Obj49_Index
0000D842 5428 0024                  		addq.b	#2,$24(a0)
0000D846 117C 0004 0001             		move.b	#4,1(a0)
0000D84C                            
0000D84C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D84C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D850 0200 003F                  		andi.b	#$3F,d0
0000D854 6600                       		bne.s	Obj49_ChkDel
0000D856 303C 00D0                  		move.w	#$D0,d0
0000D85A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D860                            
0000D860                            Obj49_ChkDel:
0000D860 3028 0008                  		move.w	8(a0),d0
0000D864 0240 FF80                  		andi.w	#$FF80,d0
0000D868 3238 F700                  		move.w	($FFFFF700).w,d1
0000D86C 0441 0080                  		subi.w	#$80,d1
0000D870 0241 FF80                  		andi.w	#$FF80,d1
0000D874 9041                       		sub.w	d1,d0
0000D876 0C40 0280                  		cmpi.w	#$280,d0
0000D87A 6200 0000                  		bhi.w	DeleteObject
0000D87E 4E75                       		rts	
0000D880                            ; ===========================================================================
0000D880                            ; ---------------------------------------------------------------------------
0000D880                            ; Sprite mappings - purple rock	(GHZ)
0000D880                            ; ---------------------------------------------------------------------------
0000D880                            Map_obj3B:
0000D880                            	include "_maps\obj3B.asm"
0000D880                            ; ---------------------------------------------------------------------------
0000D880                            ; Sprite mappings - purple rock	(GHZ)
0000D880                            ; ---------------------------------------------------------------------------
0000D880 0000                       		dc.w byte_D110-Map_obj3B
0000D882 02                         byte_D110:	dc.b 2
0000D883 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D888 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D88E 00                         		even
0000D88E 00                         		even
0000D88E                            
0000D88E                            ; ===========================================================================
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            
0000D88E                            Obj3C:					; XREF: Obj_Index
0000D88E 7000                       		moveq	#0,d0
0000D890 1028 0024                  		move.b	$24(a0),d0
0000D894 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D898 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D89C 6000 0000                  		bra.w	MarkObjGone
0000D8A0                            ; ===========================================================================
0000D8A0 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D8A2 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D8A4 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D8A6                            ; ===========================================================================
0000D8A6                            
0000D8A6                            Obj3C_Main:				; XREF: Obj3C_Index
0000D8A6 5428 0024                  		addq.b	#2,$24(a0)
0000D8AA 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D8B2 317C 450F 0002             		move.w	#$450F,2(a0)
0000D8B8 117C 0004 0001             		move.b	#4,1(a0)
0000D8BE 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8C4 117C 0004 0018             		move.b	#4,$18(a0)
0000D8CA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D8D0                            
0000D8D0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D8D0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D8D6 323C 001B                  		move.w	#$1B,d1
0000D8DA 343C 0020                  		move.w	#$20,d2
0000D8DE 363C 0020                  		move.w	#$20,d3
0000D8E2 3828 0008                  		move.w	8(a0),d4
0000D8E6 6100 0000                  		bsr.w	SolidObject
0000D8EA 0828 0005 0022             		btst	#5,$22(a0)
0000D8F0 6600                       		bne.s	Obj3C_ChkRoll
0000D8F2                            
0000D8F2                            locret_D180:
0000D8F2 4E75                       		rts	
0000D8F4                            ; ===========================================================================
0000D8F4                            
0000D8F4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D8F4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D8FA 66F6                       		bne.s	locret_D180	; if not, branch
0000D8FC 3028 0030                  		move.w	$30(a0),d0
0000D900 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D902 4440                       		neg.w	d0
0000D904                            
0000D904                            Obj3C_ChkSpeed:
0000D904 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D908 65E8                       		bcs.s	locret_D180	; if not, branch
0000D90A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D910 5869 0008                  		addq.w	#4,8(a1)
0000D914 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D91A 3028 0008                  		move.w	8(a0),d0
0000D91E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D922 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D924 5169 0008                  		subq.w	#8,8(a1)
0000D928 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D92E                            
0000D92E                            Obj3C_Smash:
0000D92E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D934 08A8 0005 0022             		bclr	#5,$22(a0)
0000D93A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D940 7207                       		moveq	#7,d1		; load 8 fragments
0000D942 343C 0070                  		move.w	#$70,d2
0000D946 6100                       		bsr.s	SmashObject
0000D948                            
0000D948                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D948 6100 0000                  		bsr.w	SpeedToPos
0000D94C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D952 6100 0000                  		bsr.w	DisplaySprite
0000D956 4A28 0001                  		tst.b	1(a0)
0000D95A 6A00 0000                  		bpl.w	DeleteObject
0000D95E 4E75                       		rts	
0000D960                            
0000D960                            ; ---------------------------------------------------------------------------
0000D960                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D960                            ; ---------------------------------------------------------------------------
0000D960                            
0000D960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D960                            
0000D960                            
0000D960                            SmashObject:				; XREF: Obj3C_Smash
0000D960 7000                       		moveq	#0,d0
0000D962 1028 001A                  		move.b	$1A(a0),d0
0000D966 D040                       		add.w	d0,d0
0000D968 2668 0004                  		movea.l	4(a0),a3
0000D96C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D970 524B                       		addq.w	#1,a3
0000D972 08E8 0005 0001             		bset	#5,1(a0)
0000D978 1810                       		move.b	0(a0),d4
0000D97A 1A28 0001                  		move.b	1(a0),d5
0000D97E 2248                       		movea.l	a0,a1
0000D980 6000                       		bra.s	Smash_LoadFrag
0000D982                            ; ===========================================================================
0000D982                            
0000D982                            Smash_Loop:
0000D982 6100 0000                  		bsr.w	SingleObjLoad
0000D986 6600                       		bne.s	Smash_PlaySnd
0000D988 5A4B                       		addq.w	#5,a3
0000D98A                            
0000D98A                            Smash_LoadFrag:				; XREF: SmashObject
0000D98A 137C 0004 0024             		move.b	#4,$24(a1)
0000D990 1284                       		move.b	d4,0(a1)
0000D992 234B 0004                  		move.l	a3,4(a1)
0000D996 1345 0001                  		move.b	d5,1(a1)
0000D99A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D9A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D9A6 3368 0002 0002             		move.w	2(a0),2(a1)
0000D9AC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D9B2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D9B8 335C 0010                  		move.w	(a4)+,$10(a1)
0000D9BC 335C 0012                  		move.w	(a4)+,$12(a1)
0000D9C0 B3C8                       		cmpa.l	a0,a1
0000D9C2 6400                       		bcc.s	loc_D268
0000D9C4 2F08                       		move.l	a0,-(sp)
0000D9C6 2049                       		movea.l	a1,a0
0000D9C8 6100 0000                  		bsr.w	SpeedToPos
0000D9CC D568 0012                  		add.w	d2,$12(a0)
0000D9D0 205F                       		movea.l	(sp)+,a0
0000D9D2 6100 0000                  		bsr.w	DisplaySprite2
0000D9D6                            
0000D9D6                            loc_D268:
0000D9D6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D9DA                            
0000D9DA                            Smash_PlaySnd:
0000D9DA 303C 00CB                  		move.w	#$CB,d0
0000D9DE 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D9E4                            ; End of function SmashObject
0000D9E4                            
0000D9E4                            ; ===========================================================================
0000D9E4                            ; Smashed block	fragment speeds
0000D9E4                            ;
0000D9E4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D9E8 0600 FF00                  		dc.w $600, $FF00
0000D9EC 0600 0100                  		dc.w $600, $100
0000D9F0 0400 0500                  		dc.w $400, $500
0000D9F4 0600 FA00                  		dc.w $600, $FA00
0000D9F8 0800 FE00                  		dc.w $800, $FE00
0000D9FC 0800 0200                  		dc.w $800, $200
0000DA00 0600 0600                  		dc.w $600, $600
0000DA04                            
0000DA04 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA08 F800 FE00                  		dc.w $F800, $FE00
0000DA0C F800 0200                  		dc.w $F800, $200
0000DA10 FA00 0600                  		dc.w $FA00, $600
0000DA14 FC00 FB00                  		dc.w $FC00, $FB00
0000DA18 FA00 FF00                  		dc.w $FA00, $FF00
0000DA1C FA00 0100                  		dc.w $FA00, $100
0000DA20 FC00 0500                  		dc.w $FC00, $500
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24                            Map_obj3C:
0000DA24                            	include "_maps\obj3C.asm"
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA26 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA28 0000                       		dc.w byte_D30E-Map_obj3C
0000DA2A 08                         byte_D2BC:	dc.b 8
0000DA2B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA30 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA35 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA3A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA3F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA44 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA49 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA4E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA53 08                         byte_D2E5:	dc.b 8
0000DA54 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA59 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA5E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA63 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA68 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA6D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA72 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA77 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA7C 08                         byte_D30E:	dc.b 8
0000DA7D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA82 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA87 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA8C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA91 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DA96 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DA9B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DAA0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DAA6 00                         		even
0000DAA6 00                         		even
0000DAA6                            
0000DAA6                            ; ---------------------------------------------------------------------------
0000DAA6                            ; Object code loading subroutine
0000DAA6                            ; ---------------------------------------------------------------------------
0000DAA6                            
0000DAA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAA6                            
0000DAA6                            
0000DAA6                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DAA6 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DAAA 7E7F                       		moveq	#$7F,d7
0000DAAC 7000                       		moveq	#0,d0
0000DAAE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DAB4 6400                       		bcc.s	loc_D362
0000DAB6                            
0000DAB6                            loc_D348:
0000DAB6 1010                       		move.b	(a0),d0		; load object number from RAM
0000DAB8 6700                       		beq.s	loc_D358
0000DABA D040                       		add.w	d0,d0
0000DABC D040                       		add.w	d0,d0
0000DABE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DAC2 4E91                       		jsr	(a1)		; run the object's code
0000DAC4 7000                       		moveq	#0,d0
0000DAC6                            
0000DAC6                            loc_D358:
0000DAC6 41E8 0040                  		lea	$40(a0),a0	; next object
0000DACA 51CF FFEA                  		dbf	d7,loc_D348
0000DACE 4E75                       		rts	
0000DAD0                            ; ===========================================================================
0000DAD0                            
0000DAD0                            loc_D362:
0000DAD0 7E1F                       		moveq	#$1F,d7
0000DAD2 61E2                       		bsr.s	loc_D348
0000DAD4 7E5F                       		moveq	#$5F,d7
0000DAD6                            
0000DAD6                            loc_D368:
0000DAD6 7000                       		moveq	#0,d0
0000DAD8 1010                       		move.b	(a0),d0
0000DADA 6700                       		beq.s	loc_D378
0000DADC 4A28 0001                  		tst.b	1(a0)
0000DAE0 6A00                       		bpl.s	loc_D378
0000DAE2 6100 0000                  		bsr.w	DisplaySprite
0000DAE6                            
0000DAE6                            loc_D378:
0000DAE6 41E8 0040                  		lea	$40(a0),a0
0000DAEA                            
0000DAEA                            loc_D37C:
0000DAEA 51CF FFEA                  		dbf	d7,loc_D368
0000DAEE 4E75                       		rts	
0000DAF0                            ; End of function ObjectsLoad
0000DAF0                            
0000DAF0                            ; ===========================================================================
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            ; Object pointers
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            Obj_Index:
0000DAF0                            	include "_inc\Object pointers.asm"
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            ; Object pointers
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB00 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB10 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB20 0000 0000 0000 AD36 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB30 0000 78DC 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB40 0000 7F02 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DB50 0000 8750 0000 884A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DB60 0000 8E94 0000 9182 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DB70 0000 0000 0000 9E32 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DB80 0000 A16A 0000 A756 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DB90 0000 9A8E 0000 8F6A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DBA0 0000 B32E 0000 A94A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DBB0 0000 BD42 0000 C3F0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DBC0 0000 B8A0 0000 D59A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DBD0 0000 CB76 0000 CC30 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DBE0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DBF0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC00 0000 C05E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC10 0000 D830 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC20 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC30 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC40 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DC50 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DC60 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DC70 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DC80 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DCB0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DCC0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DCE0 0000 0000 0000 CE6A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DCF0 0000 53E8 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD00 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD10 0000 5AA2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD10 0000 5AA2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD20                            
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            
0000DD20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD20                            
0000DD20                            
0000DD20                            ObjectFall:
0000DD20 2428 0008                  		move.l	8(a0),d2
0000DD24 2628 000C                  		move.l	$C(a0),d3
0000DD28 3028 0010                  		move.w	$10(a0),d0
0000DD2C 48C0                       		ext.l	d0
0000DD2E E180                       		asl.l	#8,d0
0000DD30 D480                       		add.l	d0,d2
0000DD32 3028 0012                  		move.w	$12(a0),d0
0000DD36 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD3C 48C0                       		ext.l	d0
0000DD3E E180                       		asl.l	#8,d0
0000DD40 D680                       		add.l	d0,d3
0000DD42 2142 0008                  		move.l	d2,8(a0)
0000DD46 2143 000C                  		move.l	d3,$C(a0)
0000DD4A 4E75                       		rts	
0000DD4C                            ; End of function ObjectFall
0000DD4C                            
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C                            ; Subroutine translating object	speed to update	object position
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C                            
0000DD4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD4C                            
0000DD4C                            
0000DD4C                            SpeedToPos:
0000DD4C 2428 0008                  		move.l	8(a0),d2
0000DD50 2628 000C                  		move.l	$C(a0),d3
0000DD54 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DD58 48C0                       		ext.l	d0
0000DD5A E180                       		asl.l	#8,d0		; multiply speed by $100
0000DD5C D480                       		add.l	d0,d2		; add to x-axis	position
0000DD5E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DD62 48C0                       		ext.l	d0
0000DD64 E180                       		asl.l	#8,d0		; multiply by $100
0000DD66 D680                       		add.l	d0,d3		; add to y-axis	position
0000DD68 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DD6C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DD70 4E75                       		rts	
0000DD72                            ; End of function SpeedToPos
0000DD72                            
0000DD72                            ; ---------------------------------------------------------------------------
0000DD72                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DD72                            ; ---------------------------------------------------------------------------
0000DD72                            
0000DD72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD72                            
0000DD72                            
0000DD72                            DisplaySprite:
0000DD72 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DD76 3028 0018                  		move.w	$18(a0),d0
0000DD7A E248                       		lsr.w	#1,d0
0000DD7C 0240 0380                  		andi.w	#$380,d0
0000DD80 D2C0                       		adda.w	d0,a1
0000DD82 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DD86 6400                       		bcc.s	locret_D620
0000DD88 5451                       		addq.w	#2,(a1)
0000DD8A D2D1                       		adda.w	(a1),a1
0000DD8C 3288                       		move.w	a0,(a1)
0000DD8E                            
0000DD8E                            locret_D620:
0000DD8E 4E75                       		rts	
0000DD90                            ; End of function DisplaySprite
0000DD90                            
0000DD90                            ; ---------------------------------------------------------------------------
0000DD90                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DD90                            ; ---------------------------------------------------------------------------
0000DD90                            
0000DD90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD90                            
0000DD90                            
0000DD90                            DisplaySprite2:
0000DD90 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DD94 3029 0018                  		move.w	$18(a1),d0
0000DD98 E248                       		lsr.w	#1,d0
0000DD9A 0240 0380                  		andi.w	#$380,d0
0000DD9E D4C0                       		adda.w	d0,a2
0000DDA0 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DDA4 6400                       		bcc.s	locret_D63E
0000DDA6 5452                       		addq.w	#2,(a2)
0000DDA8 D4D2                       		adda.w	(a2),a2
0000DDAA 3489                       		move.w	a1,(a2)
0000DDAC                            
0000DDAC                            locret_D63E:
0000DDAC 4E75                       		rts	
0000DDAE                            ; End of function DisplaySprite2
0000DDAE                            
0000DDAE                            ; ---------------------------------------------------------------------------
0000DDAE                            ; Subroutine to	delete an object
0000DDAE                            ; ---------------------------------------------------------------------------
0000DDAE                            
0000DDAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDAE                            
0000DDAE                            
0000DDAE                            DeleteObject:
0000DDAE 2248                       		movea.l	a0,a1
0000DDB0                            
0000DDB0                            DeleteObject2:
0000DDB0 7200                       		moveq	#0,d1
0000DDB2 700F                       		moveq	#$F,d0
0000DDB4                            
0000DDB4                            loc_D646:
0000DDB4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DDB6 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DDBA 4E75                       		rts	
0000DDBC                            ; End of function DeleteObject
0000DDBC                            
0000DDBC                            ; ===========================================================================
0000DDBC 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DDC0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DDC4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DDC8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DDCC                            ; ---------------------------------------------------------------------------
0000DDCC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DDCC                            ; ---------------------------------------------------------------------------
0000DDCC                            
0000DDCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDCC                            
0000DDCC                            
0000DDCC                            BuildSprites:				; XREF: TitleScreen; et al
0000DDCC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DDD0 7A00                       		moveq	#0,d5
0000DDD2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DDD6 7E07                       		moveq	#7,d7
0000DDD8                            
0000DDD8                            loc_D66A:
0000DDD8 4A54                       		tst.w	(a4)
0000DDDA 6700 0000                  		beq.w	loc_D72E
0000DDDE 7C02                       		moveq	#2,d6
0000DDE0                            
0000DDE0                            loc_D672:
0000DDE0 3074 6000                  		movea.w	(a4,d6.w),a0
0000DDE4 4A10                       		tst.b	(a0)
0000DDE6 6700 0000                  		beq.w	loc_D726
0000DDEA 08A8 0007 0001             		bclr	#7,1(a0)
0000DDF0 1028 0001                  		move.b	1(a0),d0
0000DDF4 1800                       		move.b	d0,d4
0000DDF6 0240 000C                  		andi.w	#$C,d0
0000DDFA 6700                       		beq.s	loc_D6DE
0000DDFC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE00 7000                       		moveq	#0,d0
0000DE02 1028 0019                  		move.b	$19(a0),d0
0000DE06 3628 0008                  		move.w	8(a0),d3
0000DE0A 9651                       		sub.w	(a1),d3
0000DE0C 3203                       		move.w	d3,d1
0000DE0E D240                       		add.w	d0,d1
0000DE10 6B00 0000                  		bmi.w	loc_D726
0000DE14 3203                       		move.w	d3,d1
0000DE16 9240                       		sub.w	d0,d1
0000DE18 0C41 0140                  		cmpi.w	#$140,d1
0000DE1C 6C00                       		bge.s	loc_D726
0000DE1E 0643 0080                  		addi.w	#$80,d3
0000DE22 0804 0004                  		btst	#4,d4
0000DE26 6700                       		beq.s	loc_D6E8
0000DE28 7000                       		moveq	#0,d0
0000DE2A 1028 0016                  		move.b	$16(a0),d0
0000DE2E 3428 000C                  		move.w	$C(a0),d2
0000DE32 9469 0004                  		sub.w	4(a1),d2
0000DE36 3202                       		move.w	d2,d1
0000DE38 D240                       		add.w	d0,d1
0000DE3A 6B00                       		bmi.s	loc_D726
0000DE3C 3202                       		move.w	d2,d1
0000DE3E 9240                       		sub.w	d0,d1
0000DE40 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE44 6C00                       		bge.s	loc_D726
0000DE46 0642 0080                  		addi.w	#$80,d2
0000DE4A 6000                       		bra.s	loc_D700
0000DE4C                            ; ===========================================================================
0000DE4C                            
0000DE4C                            loc_D6DE:
0000DE4C 3428 000A                  		move.w	$A(a0),d2
0000DE50 3628 0008                  		move.w	8(a0),d3
0000DE54 6000                       		bra.s	loc_D700
0000DE56                            ; ===========================================================================
0000DE56                            
0000DE56                            loc_D6E8:
0000DE56 3428 000C                  		move.w	$C(a0),d2
0000DE5A 9469 0004                  		sub.w	4(a1),d2
0000DE5E 0642 0080                  		addi.w	#$80,d2
0000DE62 0C42 0060                  		cmpi.w	#$60,d2
0000DE66 6500                       		bcs.s	loc_D726
0000DE68 0C42 0180                  		cmpi.w	#$180,d2
0000DE6C 6400                       		bcc.s	loc_D726
0000DE6E                            
0000DE6E                            loc_D700:
0000DE6E 2268 0004                  		movea.l	4(a0),a1
0000DE72 7200                       		moveq	#0,d1
0000DE74 0804 0005                  		btst	#5,d4
0000DE78 6600                       		bne.s	loc_D71C
0000DE7A 1228 001A                  		move.b	$1A(a0),d1
0000DE7E D201                       		add.b	d1,d1
0000DE80 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DE84 1219                       		move.b	(a1)+,d1
0000DE86 5301                       		subq.b	#1,d1
0000DE88 6B00                       		bmi.s	loc_D720
0000DE8A                            
0000DE8A                            loc_D71C:
0000DE8A 6100 0000                  		bsr.w	sub_D750
0000DE8E                            
0000DE8E                            loc_D720:
0000DE8E 08E8 0007 0001             		bset	#7,1(a0)
0000DE94                            
0000DE94                            loc_D726:
0000DE94 5446                       		addq.w	#2,d6
0000DE96 5554                       		subq.w	#2,(a4)
0000DE98 6600 FF46                  		bne.w	loc_D672
0000DE9C                            
0000DE9C                            loc_D72E:
0000DE9C 49EC 0080                  		lea	$80(a4),a4
0000DEA0 51CF FF36                  		dbf	d7,loc_D66A
0000DEA4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DEA8 0C05 0050                  		cmpi.b	#$50,d5
0000DEAC 6700                       		beq.s	loc_D748
0000DEAE 24BC 0000 0000             		move.l	#0,(a2)
0000DEB4 4E75                       		rts	
0000DEB6                            ; ===========================================================================
0000DEB6                            
0000DEB6                            loc_D748:
0000DEB6 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DEBC 4E75                       		rts	
0000DEBE                            ; End of function BuildSprites
0000DEBE                            
0000DEBE                            
0000DEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEBE                            
0000DEBE                            
0000DEBE                            sub_D750:				; XREF: BuildSprites
0000DEBE 3668 0002                  		movea.w	2(a0),a3
0000DEC2 0804 0000                  		btst	#0,d4
0000DEC6 6600                       		bne.s	loc_D796
0000DEC8 0804 0001                  		btst	#1,d4
0000DECC 6600 0000                  		bne.w	loc_D7E4
0000DED0                            ; End of function sub_D750
0000DED0                            
0000DED0                            
0000DED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DED0                            
0000DED0                            
0000DED0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DED0 0C05 0050                  		cmpi.b	#$50,d5
0000DED4 6700                       		beq.s	locret_D794
0000DED6 1019                       		move.b	(a1)+,d0
0000DED8 4880                       		ext.w	d0
0000DEDA D042                       		add.w	d2,d0
0000DEDC 34C0                       		move.w	d0,(a2)+
0000DEDE 14D9                       		move.b	(a1)+,(a2)+
0000DEE0 5205                       		addq.b	#1,d5
0000DEE2 14C5                       		move.b	d5,(a2)+
0000DEE4 1019                       		move.b	(a1)+,d0
0000DEE6 E148                       		lsl.w	#8,d0
0000DEE8 1019                       		move.b	(a1)+,d0
0000DEEA D04B                       		add.w	a3,d0
0000DEEC 34C0                       		move.w	d0,(a2)+
0000DEEE 1019                       		move.b	(a1)+,d0
0000DEF0 4880                       		ext.w	d0
0000DEF2 D043                       		add.w	d3,d0
0000DEF4 0240 01FF                  		andi.w	#$1FF,d0
0000DEF8 6600                       		bne.s	loc_D78E
0000DEFA 5240                       		addq.w	#1,d0
0000DEFC                            
0000DEFC                            loc_D78E:
0000DEFC 34C0                       		move.w	d0,(a2)+
0000DEFE 51C9 FFD0                  		dbf	d1,sub_D762
0000DF02                            
0000DF02                            locret_D794:
0000DF02 4E75                       		rts	
0000DF04                            ; End of function sub_D762
0000DF04                            
0000DF04                            ; ===========================================================================
0000DF04                            
0000DF04                            loc_D796:
0000DF04 0804 0001                  		btst	#1,d4
0000DF08 6600 0000                  		bne.w	loc_D82A
0000DF0C                            
0000DF0C                            loc_D79E:
0000DF0C 0C05 0050                  		cmpi.b	#$50,d5
0000DF10 6700                       		beq.s	locret_D7E2
0000DF12 1019                       		move.b	(a1)+,d0
0000DF14 4880                       		ext.w	d0
0000DF16 D042                       		add.w	d2,d0
0000DF18 34C0                       		move.w	d0,(a2)+
0000DF1A 1819                       		move.b	(a1)+,d4
0000DF1C 14C4                       		move.b	d4,(a2)+
0000DF1E 5205                       		addq.b	#1,d5
0000DF20 14C5                       		move.b	d5,(a2)+
0000DF22 1019                       		move.b	(a1)+,d0
0000DF24 E148                       		lsl.w	#8,d0
0000DF26 1019                       		move.b	(a1)+,d0
0000DF28 D04B                       		add.w	a3,d0
0000DF2A 0A40 0800                  		eori.w	#$800,d0
0000DF2E 34C0                       		move.w	d0,(a2)+
0000DF30 1019                       		move.b	(a1)+,d0
0000DF32 4880                       		ext.w	d0
0000DF34 4440                       		neg.w	d0
0000DF36 D804                       		add.b	d4,d4
0000DF38 0244 0018                  		andi.w	#$18,d4
0000DF3C 5044                       		addq.w	#8,d4
0000DF3E 9044                       		sub.w	d4,d0
0000DF40 D043                       		add.w	d3,d0
0000DF42 0240 01FF                  		andi.w	#$1FF,d0
0000DF46 6600                       		bne.s	loc_D7DC
0000DF48 5240                       		addq.w	#1,d0
0000DF4A                            
0000DF4A                            loc_D7DC:
0000DF4A 34C0                       		move.w	d0,(a2)+
0000DF4C 51C9 FFBE                  		dbf	d1,loc_D79E
0000DF50                            
0000DF50                            locret_D7E2:
0000DF50 4E75                       		rts	
0000DF52                            ; ===========================================================================
0000DF52                            
0000DF52                            loc_D7E4:				; XREF: sub_D750
0000DF52 0C05 0050                  		cmpi.b	#$50,d5
0000DF56 6700                       		beq.s	locret_D828
0000DF58 1019                       		move.b	(a1)+,d0
0000DF5A 1811                       		move.b	(a1),d4
0000DF5C 4880                       		ext.w	d0
0000DF5E 4440                       		neg.w	d0
0000DF60 E70C                       		lsl.b	#3,d4
0000DF62 0244 0018                  		andi.w	#$18,d4
0000DF66 5044                       		addq.w	#8,d4
0000DF68 9044                       		sub.w	d4,d0
0000DF6A D042                       		add.w	d2,d0
0000DF6C 34C0                       		move.w	d0,(a2)+
0000DF6E 14D9                       		move.b	(a1)+,(a2)+
0000DF70 5205                       		addq.b	#1,d5
0000DF72 14C5                       		move.b	d5,(a2)+
0000DF74 1019                       		move.b	(a1)+,d0
0000DF76 E148                       		lsl.w	#8,d0
0000DF78 1019                       		move.b	(a1)+,d0
0000DF7A D04B                       		add.w	a3,d0
0000DF7C 0A40 1000                  		eori.w	#$1000,d0
0000DF80 34C0                       		move.w	d0,(a2)+
0000DF82 1019                       		move.b	(a1)+,d0
0000DF84 4880                       		ext.w	d0
0000DF86 D043                       		add.w	d3,d0
0000DF88 0240 01FF                  		andi.w	#$1FF,d0
0000DF8C 6600                       		bne.s	loc_D822
0000DF8E 5240                       		addq.w	#1,d0
0000DF90                            
0000DF90                            loc_D822:
0000DF90 34C0                       		move.w	d0,(a2)+
0000DF92 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DF96                            
0000DF96                            locret_D828:
0000DF96 4E75                       		rts	
0000DF98                            ; ===========================================================================
0000DF98                            
0000DF98                            loc_D82A:
0000DF98 0C05 0050                  		cmpi.b	#$50,d5
0000DF9C 6700                       		beq.s	locret_D87C
0000DF9E 1019                       		move.b	(a1)+,d0
0000DFA0 1811                       		move.b	(a1),d4
0000DFA2 4880                       		ext.w	d0
0000DFA4 4440                       		neg.w	d0
0000DFA6 E70C                       		lsl.b	#3,d4
0000DFA8 0244 0018                  		andi.w	#$18,d4
0000DFAC 5044                       		addq.w	#8,d4
0000DFAE 9044                       		sub.w	d4,d0
0000DFB0 D042                       		add.w	d2,d0
0000DFB2 34C0                       		move.w	d0,(a2)+
0000DFB4 1819                       		move.b	(a1)+,d4
0000DFB6 14C4                       		move.b	d4,(a2)+
0000DFB8 5205                       		addq.b	#1,d5
0000DFBA 14C5                       		move.b	d5,(a2)+
0000DFBC 1019                       		move.b	(a1)+,d0
0000DFBE E148                       		lsl.w	#8,d0
0000DFC0 1019                       		move.b	(a1)+,d0
0000DFC2 D04B                       		add.w	a3,d0
0000DFC4 0A40 1800                  		eori.w	#$1800,d0
0000DFC8 34C0                       		move.w	d0,(a2)+
0000DFCA 1019                       		move.b	(a1)+,d0
0000DFCC 4880                       		ext.w	d0
0000DFCE 4440                       		neg.w	d0
0000DFD0 D804                       		add.b	d4,d4
0000DFD2 0244 0018                  		andi.w	#$18,d4
0000DFD6 5044                       		addq.w	#8,d4
0000DFD8 9044                       		sub.w	d4,d0
0000DFDA D043                       		add.w	d3,d0
0000DFDC 0240 01FF                  		andi.w	#$1FF,d0
0000DFE0 6600                       		bne.s	loc_D876
0000DFE2 5240                       		addq.w	#1,d0
0000DFE4                            
0000DFE4                            loc_D876:
0000DFE4 34C0                       		move.w	d0,(a2)+
0000DFE6 51C9 FFB0                  		dbf	d1,loc_D82A
0000DFEA                            
0000DFEA                            locret_D87C:
0000DFEA 4E75                       		rts	
0000DFEC                            ; ---------------------------------------------------------------------------
0000DFEC                            ; Subroutine to	check if an object is on the screen
0000DFEC                            ; ---------------------------------------------------------------------------
0000DFEC                            
0000DFEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFEC                            
0000DFEC                            
0000DFEC                            ChkObjOnScreen:
0000DFEC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DFF0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DFF4 6B00                       		bmi.s	NotOnScreen
0000DFF6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DFFA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFFC                            
0000DFFC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E000 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E004 6B00                       		bmi.s	NotOnScreen
0000E006 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E00A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E00C                            
0000E00C 7000                       		moveq	#0,d0		; set flag to 0
0000E00E 4E75                       		rts	
0000E010                            ; ===========================================================================
0000E010                            
0000E010                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E010 7001                       		moveq	#1,d0		; set flag to 1
0000E012 4E75                       		rts	
0000E014                            ; End of function ChkObjOnScreen
0000E014                            
0000E014                            
0000E014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E014                            
0000E014                            
0000E014                            ChkObjOnScreen2:
0000E014 7200                       		moveq	#0,d1
0000E016 1228 0019                  		move.b	$19(a0),d1
0000E01A 3028 0008                  		move.w	8(a0),d0
0000E01E 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E022 D041                       		add.w	d1,d0
0000E024 6B00                       		bmi.s	NotOnScreen2
0000E026 D241                       		add.w	d1,d1
0000E028 9041                       		sub.w	d1,d0
0000E02A 0C40 0140                  		cmpi.w	#320,d0
0000E02E 6C00                       		bge.s	NotOnScreen2
0000E030                            
0000E030 3228 000C                  		move.w	$C(a0),d1
0000E034 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E038 6B00                       		bmi.s	NotOnScreen2
0000E03A 0C41 00E0                  		cmpi.w	#224,d1
0000E03E 6C00                       		bge.s	NotOnScreen2
0000E040                            
0000E040 7000                       		moveq	#0,d0
0000E042 4E75                       		rts	
0000E044                            ; ===========================================================================
0000E044                            
0000E044                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E044 7001                       		moveq	#1,d0
0000E046 4E75                       		rts	
0000E048                            ; End of function ChkObjOnScreen2
0000E048                            
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            ; Subroutine to	load a level's objects
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            
0000E048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E048                            
0000E048                            
0000E048                            ObjPosLoad:				; XREF: Level; et al
0000E048 7000                       		moveq	#0,d0
0000E04A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E04E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E052 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E056                            ; End of function ObjPosLoad
0000E056                            
0000E056                            ; ===========================================================================
0000E056 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E058 0000                       		dc.w OPL_Next-OPL_Index
0000E05A                            ; ===========================================================================
0000E05A                            
0000E05A                            OPL_Main:				; XREF: OPL_Index
0000E05A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E05E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E062 ED08                       		lsl.b	#6,d0
0000E064 E848                       		lsr.w	#4,d0
0000E066 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E06C 2248                       		movea.l	a0,a1
0000E06E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E072 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E076 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E07A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E07E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E082 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E086 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E08A 34FC 0101                  		move.w	#$101,(a2)+
0000E08E 303C 005E                  		move.w	#$5E,d0
0000E092                            
0000E092                            OPL_ClrList:
0000E092 429A                       		clr.l	(a2)+
0000E094 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E098                            
0000E098 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E09C 7400                       		moveq	#0,d2
0000E09E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0A2 0446 0080                  		subi.w	#$80,d6
0000E0A6 6400                       		bcc.s	loc_D93C
0000E0A8 7C00                       		moveq	#0,d6
0000E0AA                            
0000E0AA                            loc_D93C:
0000E0AA 0246 FF80                  		andi.w	#$FF80,d6
0000E0AE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E0B2                            
0000E0B2                            loc_D944:
0000E0B2 BC50                       		cmp.w	(a0),d6
0000E0B4 6300                       		bls.s	loc_D956
0000E0B6 4A28 0004                  		tst.b	4(a0)
0000E0BA 6A00                       		bpl.s	loc_D952
0000E0BC 1412                       		move.b	(a2),d2
0000E0BE 5212                       		addq.b	#1,(a2)
0000E0C0                            
0000E0C0                            loc_D952:
0000E0C0 5C48                       		addq.w	#6,a0
0000E0C2 60EE                       		bra.s	loc_D944
0000E0C4                            ; ===========================================================================
0000E0C4                            
0000E0C4                            loc_D956:
0000E0C4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0C8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0CC 0446 0080                  		subi.w	#$80,d6
0000E0D0 6500                       		bcs.s	loc_D976
0000E0D2                            
0000E0D2                            loc_D964:
0000E0D2 BC50                       		cmp.w	(a0),d6
0000E0D4 6300                       		bls.s	loc_D976
0000E0D6 4A28 0004                  		tst.b	4(a0)
0000E0DA 6A00                       		bpl.s	loc_D972
0000E0DC 522A 0001                  		addq.b	#1,1(a2)
0000E0E0                            
0000E0E0                            loc_D972:
0000E0E0 5C48                       		addq.w	#6,a0
0000E0E2 60EE                       		bra.s	loc_D964
0000E0E4                            ; ===========================================================================
0000E0E4                            
0000E0E4                            loc_D976:
0000E0E4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0E8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E0EE                            
0000E0EE                            OPL_Next:				; XREF: OPL_Index
0000E0EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0F2 7400                       		moveq	#0,d2
0000E0F4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0F8 0246 FF80                  		andi.w	#$FF80,d6
0000E0FC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E100 6700 0000                  		beq.w	locret_DA3A
0000E104 6C00                       		bge.s	loc_D9F6
0000E106 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E10A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E10E 0446 0080                  		subi.w	#$80,d6
0000E112 6500                       		bcs.s	loc_D9D2
0000E114                            
0000E114                            loc_D9A6:
0000E114 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E118 6C00                       		bge.s	loc_D9D2
0000E11A 5D48                       		subq.w	#6,a0
0000E11C 4A28 0004                  		tst.b	4(a0)
0000E120 6A00                       		bpl.s	loc_D9BC
0000E122 532A 0001                  		subq.b	#1,1(a2)
0000E126 142A 0001                  		move.b	1(a2),d2
0000E12A                            
0000E12A                            loc_D9BC:
0000E12A 6100 0000                  		bsr.w	loc_DA3C
0000E12E 6600                       		bne.s	loc_D9C6
0000E130 5D48                       		subq.w	#6,a0
0000E132 60E0                       		bra.s	loc_D9A6
0000E134                            ; ===========================================================================
0000E134                            
0000E134                            loc_D9C6:
0000E134 4A28 0004                  		tst.b	4(a0)
0000E138 6A00                       		bpl.s	loc_D9D0
0000E13A 522A 0001                  		addq.b	#1,1(a2)
0000E13E                            
0000E13E                            loc_D9D0:
0000E13E 5C48                       		addq.w	#6,a0
0000E140                            
0000E140                            loc_D9D2:
0000E140 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E144 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E148 0646 0300                  		addi.w	#$300,d6
0000E14C                            
0000E14C                            loc_D9DE:
0000E14C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E150 6E00                       		bgt.s	loc_D9F0
0000E152 4A28 FFFE                  		tst.b	-2(a0)
0000E156 6A00                       		bpl.s	loc_D9EC
0000E158 5312                       		subq.b	#1,(a2)
0000E15A                            
0000E15A                            loc_D9EC:
0000E15A 5D48                       		subq.w	#6,a0
0000E15C 60EE                       		bra.s	loc_D9DE
0000E15E                            ; ===========================================================================
0000E15E                            
0000E15E                            loc_D9F0:
0000E15E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E162 4E75                       		rts	
0000E164                            ; ===========================================================================
0000E164                            
0000E164                            loc_D9F6:
0000E164 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E168 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E16C 0646 0280                  		addi.w	#$280,d6
0000E170                            
0000E170                            loc_DA02:
0000E170 BC50                       		cmp.w	(a0),d6
0000E172 6300                       		bls.s	loc_DA16
0000E174 4A28 0004                  		tst.b	4(a0)
0000E178 6A00                       		bpl.s	loc_DA10
0000E17A 1412                       		move.b	(a2),d2
0000E17C 5212                       		addq.b	#1,(a2)
0000E17E                            
0000E17E                            loc_DA10:
0000E17E 6100 0000                  		bsr.w	loc_DA3C
0000E182 67EC                       		beq.s	loc_DA02
0000E184                            
0000E184                            loc_DA16:
0000E184 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E188 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E18C 0446 0300                  		subi.w	#$300,d6
0000E190 6500                       		bcs.s	loc_DA36
0000E192                            
0000E192                            loc_DA24:
0000E192 BC50                       		cmp.w	(a0),d6
0000E194 6300                       		bls.s	loc_DA36
0000E196 4A28 0004                  		tst.b	4(a0)
0000E19A 6A00                       		bpl.s	loc_DA32
0000E19C 522A 0001                  		addq.b	#1,1(a2)
0000E1A0                            
0000E1A0                            loc_DA32:
0000E1A0 5C48                       		addq.w	#6,a0
0000E1A2 60EE                       		bra.s	loc_DA24
0000E1A4                            ; ===========================================================================
0000E1A4                            
0000E1A4                            loc_DA36:
0000E1A4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1A8                            
0000E1A8                            locret_DA3A:
0000E1A8 4E75                       		rts	
0000E1AA                            ; ===========================================================================
0000E1AA                            
0000E1AA                            loc_DA3C:
0000E1AA 4A28 0004                  		tst.b	4(a0)
0000E1AE 6A00                       		bpl.s	OPL_MakeItem
0000E1B0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E1B6 6700                       		beq.s	OPL_MakeItem
0000E1B8 5C48                       		addq.w	#6,a0
0000E1BA 7000                       		moveq	#0,d0
0000E1BC 4E75                       		rts	
0000E1BE                            ; ===========================================================================
0000E1BE                            
0000E1BE                            OPL_MakeItem:
0000E1BE 6100 0000                  		bsr.w	SingleObjLoad
0000E1C2 6600                       		bne.s	locret_DA8A
0000E1C4 3358 0008                  		move.w	(a0)+,8(a1)
0000E1C8 3018                       		move.w	(a0)+,d0
0000E1CA 3200                       		move.w	d0,d1
0000E1CC 0240 0FFF                  		andi.w	#$FFF,d0
0000E1D0 3340 000C                  		move.w	d0,$C(a1)
0000E1D4 E559                       		rol.w	#2,d1
0000E1D6 0201 0003                  		andi.b	#3,d1
0000E1DA 1341 0001                  		move.b	d1,1(a1)
0000E1DE 1341 0022                  		move.b	d1,$22(a1)
0000E1E2 1018                       		move.b	(a0)+,d0
0000E1E4 6A00                       		bpl.s	loc_DA80
0000E1E6 0200 007F                  		andi.b	#$7F,d0
0000E1EA 1342 0023                  		move.b	d2,$23(a1)
0000E1EE                            
0000E1EE                            loc_DA80:
0000E1EE 1280                       		move.b	d0,0(a1)
0000E1F0 1358 0028                  		move.b	(a0)+,$28(a1)
0000E1F4 7000                       		moveq	#0,d0
0000E1F6                            
0000E1F6                            locret_DA8A:
0000E1F6 4E75                       		rts	
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8                            ; Single object	loading	subroutine
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8                            
0000E1F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1F8                            
0000E1F8                            
0000E1F8                            SingleObjLoad:
0000E1F8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E1FC 303C 005F                  		move.w	#$5F,d0
0000E200                            
0000E200                            loc_DA94:
0000E200 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E202 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E204 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E208 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E20C                            
0000E20C                            locret_DAA0:
0000E20C 4E75                       		rts	
0000E20E                            ; End of function SingleObjLoad
0000E20E                            
0000E20E                            
0000E20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E20E                            
0000E20E                            
0000E20E                            SingleObjLoad2:
0000E20E 2248                       		movea.l	a0,a1
0000E210 303C F000                  		move.w	#-$1000,d0
0000E214 9048                       		sub.w	a0,d0
0000E216 EC48                       		lsr.w	#6,d0
0000E218 5340                       		subq.w	#1,d0
0000E21A 6500                       		bcs.s	locret_DABC
0000E21C                            
0000E21C                            loc_DAB0:
0000E21C 4A11                       		tst.b	(a1)
0000E21E 6700                       		beq.s	locret_DABC
0000E220 43E9 0040                  		lea	$40(a1),a1
0000E224 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E228                            
0000E228                            locret_DABC:
0000E228 4E75                       		rts	
0000E22A                            ; End of function SingleObjLoad2
0000E22A                            
0000E22A                            ; ===========================================================================
0000E22A                            ; ---------------------------------------------------------------------------
0000E22A                            ; Object 41 - springs
0000E22A                            ; ---------------------------------------------------------------------------
0000E22A                            
0000E22A                            Obj41:					; XREF: Obj_Index
0000E22A 7000                       		moveq	#0,d0
0000E22C 1028 0024                  		move.b	$24(a0),d0
0000E230 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E234 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E238 6100 FB38                  		bsr.w	DisplaySprite
0000E23C 3028 0008                  		move.w	8(a0),d0
0000E240 0240 FF80                  		andi.w	#$FF80,d0
0000E244 3238 F700                  		move.w	($FFFFF700).w,d1
0000E248 0441 0080                  		subi.w	#$80,d1
0000E24C 0241 FF80                  		andi.w	#$FF80,d1
0000E250 9041                       		sub.w	d1,d0
0000E252 0C40 0280                  		cmpi.w	#$280,d0
0000E256 6200 FB56                  		bhi.w	DeleteObject
0000E25A 4E75                       		rts	
0000E25C                            ; ===========================================================================
0000E25C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E25E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E260 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E262 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E264 0000                       		dc.w Obj41_LR-Obj41_Index
0000E266 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E268 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E26A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E26C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E26E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E270                            
0000E270 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E272 F600                       		dc.w -$A00		; power	of yellow spring
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            Obj41_Main:				; XREF: Obj41_Index
0000E274 5428 0024                  		addq.b	#2,$24(a0)
0000E278 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E280 317C 0523 0002             		move.w	#$523,2(a0)
0000E286 0028 0004 0001             		ori.b	#4,1(a0)
0000E28C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E292 117C 0004 0018             		move.b	#4,$18(a0)
0000E298 1028 0028                  		move.b	$28(a0),d0
0000E29C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E2A0 6700                       		beq.s	loc_DB54	; if not, branch
0000E2A2 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E2A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E2AE 117C 0003 001A             		move.b	#3,$1A(a0)
0000E2B4 317C 0533 0002             		move.w	#$533,2(a0)
0000E2BA 117C 0008 0019             		move.b	#8,$19(a0)
0000E2C0                            
0000E2C0                            loc_DB54:
0000E2C0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E2C4 6700                       		beq.s	loc_DB66	; if not, branch
0000E2C6 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E2CC 08E8 0001 0022             		bset	#1,$22(a0)
0000E2D2                            
0000E2D2                            loc_DB66:
0000E2D2 0800 0001                  		btst	#1,d0
0000E2D6 6700                       		beq.s	loc_DB72
0000E2D8 08E8 0005 0002             		bset	#5,2(a0)
0000E2DE                            
0000E2DE                            loc_DB72:
0000E2DE 0240 000F                  		andi.w	#$F,d0
0000E2E2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E2E8 4E75                       		rts	
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            Obj41_Up:				; XREF: Obj41_Index
0000E2EA 323C 001B                  		move.w	#$1B,d1
0000E2EE 343C 0008                  		move.w	#8,d2
0000E2F2 363C 0010                  		move.w	#$10,d3
0000E2F6 3828 0008                  		move.w	8(a0),d4
0000E2FA 6100 0000                  		bsr.w	SolidObject
0000E2FE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E302 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E304 4E75                       		rts	
0000E306                            ; ===========================================================================
0000E306                            
0000E306                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E306 5428 0024                  		addq.b	#2,$24(a0)
0000E30A 5069 000C                  		addq.w	#8,$C(a1)
0000E30E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E314 08E9 0001 0022             		bset	#1,$22(a1)
0000E31A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E320 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E326 137C 0002 0024             		move.b	#2,$24(a1)
0000E32C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E332 4228 0025                  		clr.b	$25(a0)
0000E336 303C 00CC                  		move.w	#$CC,d0
0000E33A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E340                            
0000E340                            Obj41_AniUp:				; XREF: Obj41_Index
0000E340 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E346 6000 CAEA                  		bra.w	AnimateSprite
0000E34A                            ; ===========================================================================
0000E34A                            
0000E34A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E34A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E350 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E354 4E75                       		rts	
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            Obj41_LR:				; XREF: Obj41_Index
0000E356 323C 0013                  		move.w	#$13,d1
0000E35A 343C 000E                  		move.w	#$E,d2
0000E35E 363C 000F                  		move.w	#$F,d3
0000E362 3828 0008                  		move.w	8(a0),d4
0000E366 6100 0000                  		bsr.w	SolidObject
0000E36A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E370 6600                       		bne.s	loc_DC0C
0000E372 117C 0008 0024             		move.b	#8,$24(a0)
0000E378                            
0000E378                            loc_DC0C:
0000E378 0828 0005 0022             		btst	#5,$22(a0)
0000E37E 6600                       		bne.s	Obj41_BounceLR
0000E380 4E75                       		rts	
0000E382                            ; ===========================================================================
0000E382                            
0000E382                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E382 5428 0024                  		addq.b	#2,$24(a0)
0000E386 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E38C 5069 0008                  		addq.w	#8,8(a1)
0000E390 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E396 6600                       		bne.s	loc_DC36	; if yes, branch
0000E398 0469 0010 0008             		subi.w	#$10,8(a1)
0000E39E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E3A2                            
0000E3A2                            loc_DC36:
0000E3A2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E3A8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E3AE 0869 0000 0022             		bchg	#0,$22(a1)
0000E3B4 0829 0002 0022             		btst	#2,$22(a1)
0000E3BA 6600                       		bne.s	loc_DC56
0000E3BC 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E3C2                            
0000E3C2                            loc_DC56:
0000E3C2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3C8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3CE 303C 00CC                  		move.w	#$CC,d0
0000E3D2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3D8                            
0000E3D8                            Obj41_AniLR:				; XREF: Obj41_Index
0000E3D8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3DE 6000 CA52                  		bra.w	AnimateSprite
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E3E2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E3E8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E3EC 4E75                       		rts	
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E3EE 323C 001B                  		move.w	#$1B,d1
0000E3F2 343C 0008                  		move.w	#8,d2
0000E3F6 363C 0010                  		move.w	#$10,d3
0000E3FA 3828 0008                  		move.w	8(a0),d4
0000E3FE 6100 0000                  		bsr.w	SolidObject
0000E402 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E408 6600                       		bne.s	loc_DCA4
0000E40A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E410                            
0000E410                            loc_DCA4:
0000E410 4A28 0025                  		tst.b	$25(a0)
0000E414 6600                       		bne.s	locret_DCAE
0000E416 4A44                       		tst.w	d4
0000E418 6B00                       		bmi.s	Obj41_BounceDwn
0000E41A                            
0000E41A                            locret_DCAE:
0000E41A 4E75                       		rts	
0000E41C                            ; ===========================================================================
0000E41C                            
0000E41C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E41C 5428 0024                  		addq.b	#2,$24(a0)
0000E420 5169 000C                  		subq.w	#8,$C(a1)
0000E424 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E42A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E42E 08E9 0001 0022             		bset	#1,$22(a1)
0000E434 08A9 0003 0022             		bclr	#3,$22(a1)
0000E43A 137C 0002 0024             		move.b	#2,$24(a1)
0000E440 08A8 0003 0022             		bclr	#3,$22(a0)
0000E446 4228 0025                  		clr.b	$25(a0)
0000E44A 303C 00CC                  		move.w	#$CC,d0
0000E44E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E454                            
0000E454                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E454 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E45A 6000 C9D6                  		bra.w	AnimateSprite
0000E45E                            ; ===========================================================================
0000E45E                            
0000E45E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E45E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E464 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E468 4E75                       		rts	
0000E46A                            ; ===========================================================================
0000E46A                            Ani_obj41:
0000E46A                            	include "_anim\obj41.asm"
0000E46A                            ; ---------------------------------------------------------------------------
0000E46A                            ; Animation script - springs
0000E46A                            ; ---------------------------------------------------------------------------
0000E46A 0000                       		dc.w byte_DD02-Ani_obj41
0000E46C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E46E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E47A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E486                            		even
0000E486                            		even
0000E486                            
0000E486                            ; ---------------------------------------------------------------------------
0000E486                            ; Sprite mappings - springs
0000E486                            ; ---------------------------------------------------------------------------
0000E486                            Map_obj41:
0000E486                            	include "_maps\obj41.asm"
0000E486                            ; ---------------------------------------------------------------------------
0000E486                            ; Sprite mappings - springs
0000E486                            ; ---------------------------------------------------------------------------
0000E486 0000                       		dc.w byte_DD26-Map_obj41
0000E488 0000                       		dc.w byte_DD31-Map_obj41
0000E48A 0000                       		dc.w byte_DD37-Map_obj41
0000E48C 0000                       		dc.w byte_DD47-Map_obj41
0000E48E 0000                       		dc.w byte_DD4D-Map_obj41
0000E490 0000                       		dc.w byte_DD53-Map_obj41
0000E492 02                         byte_DD26:	dc.b 2
0000E493 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E498 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E49D 01                         byte_DD31:	dc.b 1
0000E49E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E4A3 03                         byte_DD37:	dc.b 3
0000E4A4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E4A9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E4AE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E4B3 01                         byte_DD47:	dc.b 1
0000E4B4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E4B9 01                         byte_DD4D:	dc.b 1
0000E4BA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E4BF 04                         byte_DD53:	dc.b 4
0000E4C0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E4C5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E4CA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E4CF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E4D4                            		even
0000E4D4                            		even
0000E4D4                            
0000E4D4                            ; ===========================================================================
0000E4D4                            ; ---------------------------------------------------------------------------
0000E4D4                            ; Object 42 - Newtron enemy (GHZ)
0000E4D4                            ; ---------------------------------------------------------------------------
0000E4D4                            
0000E4D4                            Obj42:					; XREF: Obj_Index
0000E4D4 7000                       		moveq	#0,d0
0000E4D6 1028 0024                  		move.b	$24(a0),d0
0000E4DA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E4DE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E4E2                            ; ===========================================================================
0000E4E2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E4E4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E4E6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E4E8                            ; ===========================================================================
0000E4E8                            
0000E4E8                            Obj42_Main:				; XREF: Obj42_Index
0000E4E8 5428 0024                  		addq.b	#2,$24(a0)
0000E4EC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E4F4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E4FA 117C 0004 0001             		move.b	#4,1(a0)
0000E500 117C 0004 0018             		move.b	#4,$18(a0)
0000E506 117C 0014 0019             		move.b	#$14,$19(a0)
0000E50C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E512 117C 0008 0017             		move.b	#8,$17(a0)
0000E518                            
0000E518                            Obj42_Action:				; XREF: Obj42_Index
0000E518 7000                       		moveq	#0,d0
0000E51A 1028 0025                  		move.b	$25(a0),d0
0000E51E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E522 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E526 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E52C 6100 C904                  		bsr.w	AnimateSprite
0000E530 6000 0000                  		bra.w	MarkObjGone
0000E534                            ; ===========================================================================
0000E534 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E536 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E538 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E53A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E53C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E53E                            ; ===========================================================================
0000E53E                            
0000E53E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E53E 08E8 0000 0022             		bset	#0,$22(a0)
0000E544 3038 D008                  		move.w	($FFFFD008).w,d0
0000E548 9068 0008                  		sub.w	8(a0),d0
0000E54C 6400                       		bcc.s	loc_DDEA
0000E54E 4440                       		neg.w	d0
0000E550 08A8 0000 0022             		bclr	#0,$22(a0)
0000E556                            
0000E556                            loc_DDEA:
0000E556 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E55A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E55C 5428 0025                  		addq.b	#2,$25(a0)
0000E560 117C 0001 001C             		move.b	#1,$1C(a0)
0000E566 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E56A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E56C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E572 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E578 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E57E                            
0000E57E                            locret_DE12:
0000E57E 4E75                       		rts	
0000E580                            ; ===========================================================================
0000E580                            
0000E580                            Obj42_Type00:				; XREF: Obj42_Index2
0000E580 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E586 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E588 08E8 0000 0022             		bset	#0,$22(a0)
0000E58E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E592 9068 0008                  		sub.w	8(a0),d0
0000E596 6400                       		bcc.s	locret_DE32
0000E598 08A8 0000 0022             		bclr	#0,$22(a0)
0000E59E                            
0000E59E                            locret_DE32:
0000E59E 4E75                       		rts	
0000E5A0                            ; ===========================================================================
0000E5A0                            
0000E5A0                            Obj42_Fall:				; XREF: Obj42_Type00
0000E5A0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E5A6 6600                       		bne.s	loc_DE42
0000E5A8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E5AE                            
0000E5AE                            loc_DE42:
0000E5AE 6100 F770                  		bsr.w	ObjectFall
0000E5B2 6100 0000                  		bsr.w	ObjHitFloor
0000E5B6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E5B8 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E5BA D368 000C                  		add.w	d1,$C(a0)
0000E5BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E5C4 5428 0025                  		addq.b	#2,$25(a0)
0000E5C8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5CE 0828 0005 0002             		btst	#5,2(a0)
0000E5D4 6700                       		beq.s	Obj42_Move
0000E5D6 5228 001C                  		addq.b	#1,$1C(a0)
0000E5DA                            
0000E5DA                            Obj42_Move:
0000E5DA 117C 000D 0020             		move.b	#$D,$20(a0)
0000E5E0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E5E6 0828 0000 0022             		btst	#0,$22(a0)
0000E5EC 6600                       		bne.s	locret_DE86
0000E5EE 4468 0010                  		neg.w	$10(a0)
0000E5F2                            
0000E5F2                            locret_DE86:
0000E5F2 4E75                       		rts	
0000E5F4                            ; ===========================================================================
0000E5F4                            
0000E5F4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E5F4 6100 F756                  		bsr.w	SpeedToPos
0000E5F8 6100 0000                  		bsr.w	ObjHitFloor
0000E5FC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E600 6D00                       		blt.s	loc_DEA2
0000E602 0C41 000C                  		cmpi.w	#$C,d1
0000E606 6C00                       		bge.s	loc_DEA2
0000E608 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E60C 4E75                       		rts	
0000E60E                            ; ===========================================================================
0000E60E                            
0000E60E                            loc_DEA2:
0000E60E 5428 0025                  		addq.b	#2,$25(a0)
0000E612 4E75                       		rts	
0000E614                            ; ===========================================================================
0000E614                            
0000E614                            Obj42_Speed:				; XREF: Obj42_Index2
0000E614 6100 F736                  		bsr.w	SpeedToPos
0000E618 4E75                       		rts	
0000E61A                            ; ===========================================================================
0000E61A                            
0000E61A                            Obj42_Type01:				; XREF: Obj42_Index2
0000E61A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E620 6600                       		bne.s	Obj42_FireMissile
0000E622 117C 000C 0020             		move.b	#$C,$20(a0)
0000E628                            
0000E628                            Obj42_FireMissile:
0000E628 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E62E 6600                       		bne.s	locret_DF14
0000E630 4A28 0032                  		tst.b	$32(a0)
0000E634 6600                       		bne.s	locret_DF14
0000E636 117C 0001 0032             		move.b	#1,$32(a0)
0000E63C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E640 6600                       		bne.s	locret_DF14
0000E642 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E646 3368 0008 0008             		move.w	8(a0),8(a1)
0000E64C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E652 5169 000C                  		subq.w	#8,$C(a1)
0000E656 337C 0200 0010             		move.w	#$200,$10(a1)
0000E65C 303C 0014                  		move.w	#$14,d0
0000E660 0828 0000 0022             		btst	#0,$22(a0)
0000E666 6600                       		bne.s	loc_DF04
0000E668 4440                       		neg.w	d0
0000E66A 4469 0010                  		neg.w	$10(a1)
0000E66E                            
0000E66E                            loc_DF04:
0000E66E D169 0008                  		add.w	d0,8(a1)
0000E672 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E678 137C 0001 0028             		move.b	#1,$28(a1)
0000E67E                            
0000E67E                            locret_DF14:
0000E67E 4E75                       		rts	
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            Obj42_Delete:				; XREF: Obj42_Index
0000E680 6000 F72C                  		bra.w	DeleteObject
0000E684                            ; ===========================================================================
0000E684                            Ani_obj42:
0000E684                            	include "_anim\obj42.asm"
0000E684                            ; ---------------------------------------------------------------------------
0000E684                            ; Animation script - Newtron enemy
0000E684                            ; ---------------------------------------------------------------------------
0000E684 0000                       		dc.w byte_DF24-Ani_obj42
0000E686 0000                       		dc.w byte_DF28-Ani_obj42
0000E688 0000                       		dc.w byte_DF30-Ani_obj42
0000E68A 0000                       		dc.w byte_DF34-Ani_obj42
0000E68C 0000                       		dc.w byte_DF38-Ani_obj42
0000E68E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E692 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E69A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E69E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E6A2 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E6AC                            		even
0000E6AC                            		even
0000E6AC                            
0000E6AC                            ; ---------------------------------------------------------------------------
0000E6AC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6AC                            ; ---------------------------------------------------------------------------
0000E6AC                            Map_obj42:
0000E6AC                            	include "_maps\obj42.asm"
0000E6AC                            ; ---------------------------------------------------------------------------
0000E6AC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6AC                            ; ---------------------------------------------------------------------------
0000E6AC 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E6B0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E6B4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E6B8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E6BC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E6C0 0000                       		dc.w byte_DFF8-Map_obj42
0000E6C2 03                         byte_DF58:	dc.b 3
0000E6C3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E6C8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E6CD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E6D2 03                         byte_DF68:	dc.b 3
0000E6D3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E6D8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6DD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6E2 03                         byte_DF78:	dc.b 3
0000E6E3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E6E8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6ED FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6F2 04                         byte_DF88:	dc.b 4
0000E6F3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E6F8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6FD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E702 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E707 03                         byte_DF9D:	dc.b 3
0000E708 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E70D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E712 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E717 02                         byte_DFAD:	dc.b 2
0000E718 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E71D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E722 03                         byte_DFB8:	dc.b 3
0000E723 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E728 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E72D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E732 03                         byte_DFC8:	dc.b 3
0000E733 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E738 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E73D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E742 03                         byte_DFD8:	dc.b 3
0000E743 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E748 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E74D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E752 03                         byte_DFE8:	dc.b 3
0000E753 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E758 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E75D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E762 00                         byte_DFF8:	dc.b 0
0000E764 00                         		even
0000E764 00                         		even
0000E764                            
0000E764                            ; ===========================================================================
0000E764                            ; ---------------------------------------------------------------------------
0000E764                            ; Object 43 - Roller enemy (SYZ)
0000E764                            ; ---------------------------------------------------------------------------
0000E764                            
0000E764                            Obj43:					; XREF: Obj_Index
0000E764 7000                       		moveq	#0,d0
0000E766 1028 0024                  		move.b	$24(a0),d0
0000E76A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E76E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E772                            ; ===========================================================================
0000E772 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E774 0000                       		dc.w Obj43_Action-Obj43_Index
0000E776                            ; ===========================================================================
0000E776                            
0000E776                            Obj43_Main:				; XREF: Obj43_Index
0000E776 117C 000E 0016             		move.b	#$E,$16(a0)
0000E77C 117C 0008 0017             		move.b	#8,$17(a0)
0000E782 6100 F59C                  		bsr.w	ObjectFall
0000E786 6100 0000                  		bsr.w	ObjHitFloor
0000E78A 4A41                       		tst.w	d1
0000E78C 6A00                       		bpl.s	locret_E052
0000E78E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E792 317C 0000 0012             		move.w	#0,$12(a0)
0000E798 5428 0024                  		addq.b	#2,$24(a0)
0000E79C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E7A4 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E7AA 117C 0004 0001             		move.b	#4,1(a0)
0000E7B0 117C 0004 0018             		move.b	#4,$18(a0)
0000E7B6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7BC                            
0000E7BC                            locret_E052:
0000E7BC 4E75                       		rts	
0000E7BE                            ; ===========================================================================
0000E7BE                            
0000E7BE                            Obj43_Action:				; XREF: Obj43_Index
0000E7BE 7000                       		moveq	#0,d0
0000E7C0 1028 0025                  		move.b	$25(a0),d0
0000E7C4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E7C8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E7CC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E7D2 6100 C65E                  		bsr.w	AnimateSprite
0000E7D6 3028 0008                  		move.w	8(a0),d0
0000E7DA 0240 FF80                  		andi.w	#$FF80,d0
0000E7DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7E2 0441 0080                  		subi.w	#$80,d1
0000E7E6 0241 FF80                  		andi.w	#$FF80,d1
0000E7EA 9041                       		sub.w	d1,d0
0000E7EC 0C40 0280                  		cmpi.w	#$280,d0
0000E7F0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E7F4 6000 F57C                  		bra.w	DisplaySprite
0000E7F8                            ; ===========================================================================
0000E7F8                            
0000E7F8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E7F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E7FC 7000                       		moveq	#0,d0
0000E7FE 1028 0023                  		move.b	$23(a0),d0
0000E802 6700                       		beq.s	Obj43_Delete
0000E804 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E80A                            
0000E80A                            Obj43_Delete:
0000E80A 6000 F5A2                  		bra.w	DeleteObject
0000E80E                            ; ===========================================================================
0000E80E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E810 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E812 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E814 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E816                            ; ===========================================================================
0000E816                            
0000E816                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E816 3038 D008                  		move.w	($FFFFD008).w,d0
0000E81A 0440 0100                  		subi.w	#$100,d0
0000E81E 6500                       		bcs.s	loc_E0D2
0000E820 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E824 6500                       		bcs.s	loc_E0D2
0000E826 5828 0025                  		addq.b	#4,$25(a0)
0000E82A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E830 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E836 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E83C                            
0000E83C                            loc_E0D2:
0000E83C 588F                       		addq.l	#4,sp
0000E83E 4E75                       		rts	
0000E840                            ; ===========================================================================
0000E840                            
0000E840                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E840 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E846 6700                       		beq.s	loc_E0F8
0000E848 5368 0030                  		subq.w	#1,$30(a0)
0000E84C 6A00                       		bpl.s	locret_E0F6
0000E84E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E854 317C 0700 0010             		move.w	#$700,$10(a0)
0000E85A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E860                            
0000E860                            locret_E0F6:
0000E860 4E75                       		rts	
0000E862                            ; ===========================================================================
0000E862                            
0000E862                            loc_E0F8:
0000E862 5428 0025                  		addq.b	#2,$25(a0)
0000E866 4E75                       		rts	
0000E868                            ; ===========================================================================
0000E868                            
0000E868                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E868 6100 0000                  		bsr.w	Obj43_Stop
0000E86C 6100 F4DE                  		bsr.w	SpeedToPos
0000E870 6100 0000                  		bsr.w	ObjHitFloor
0000E874 0C41 FFF8                  		cmpi.w	#-8,d1
0000E878 6D00                       		blt.s	Obj43_Jump
0000E87A 0C41 000C                  		cmpi.w	#$C,d1
0000E87E 6C00                       		bge.s	Obj43_Jump
0000E880 D368 000C                  		add.w	d1,$C(a0)
0000E884 4E75                       		rts	
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            Obj43_Jump:
0000E886 5428 0025                  		addq.b	#2,$25(a0)
0000E88A 08E8 0000 0032             		bset	#0,$32(a0)
0000E890 6700                       		beq.s	locret_E12E
0000E892 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E898                            
0000E898                            locret_E12E:
0000E898 4E75                       		rts	
0000E89A                            ; ===========================================================================
0000E89A                            
0000E89A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E89A 6100 F484                  		bsr.w	ObjectFall
0000E89E 4A68 0012                  		tst.w	$12(a0)
0000E8A2 6B00                       		bmi.s	locret_E150
0000E8A4 6100 0000                  		bsr.w	ObjHitFloor
0000E8A8 4A41                       		tst.w	d1
0000E8AA 6A00                       		bpl.s	locret_E150
0000E8AC D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E8B0 5528 0025                  		subq.b	#2,$25(a0)
0000E8B4 317C 0000 0012             		move.w	#0,$12(a0)
0000E8BA                            
0000E8BA                            locret_E150:
0000E8BA 4E75                       		rts	
0000E8BC                            
0000E8BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8BC                            
0000E8BC                            
0000E8BC                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E8BC 4A28 0032                  		tst.b	$32(a0)
0000E8C0 6B00                       		bmi.s	locret_E188
0000E8C2 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8C6 0440 0030                  		subi.w	#$30,d0
0000E8CA 9068 0008                  		sub.w	8(a0),d0
0000E8CE 6400                       		bcc.s	locret_E188
0000E8D0 117C 0000 001C             		move.b	#0,$1C(a0)
0000E8D6 117C 000E 0020             		move.b	#$E,$20(a0)
0000E8DC 4268 0010                  		clr.w	$10(a0)
0000E8E0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E8E6 117C 0002 0025             		move.b	#2,$25(a0)
0000E8EC 08E8 0007 0032             		bset	#7,$32(a0)
0000E8F2                            
0000E8F2                            locret_E188:
0000E8F2 4E75                       		rts	
0000E8F4                            ; End of function Obj43_Stop
0000E8F4                            
0000E8F4                            ; ===========================================================================
0000E8F4                            Ani_obj43:
0000E8F4                            	include "_anim\obj43.asm"
0000E8F4                            ; ---------------------------------------------------------------------------
0000E8F4                            ; Animation script - Roller enemy
0000E8F4                            ; ---------------------------------------------------------------------------
0000E8F4 0000                       		dc.w byte_E190-Ani_obj43
0000E8F6 0000                       		dc.w byte_E196-Ani_obj43
0000E8F8 0000                       		dc.w byte_E19C-Ani_obj43
0000E8FA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E900 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E906 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E90C 00                         		even
0000E90C 00                         		even
0000E90C                            
0000E90C                            ; ---------------------------------------------------------------------------
0000E90C                            ; Sprite mappings - Roller enemy (SYZ)
0000E90C                            ; ---------------------------------------------------------------------------
0000E90C                            Map_obj43:
0000E90C                            	include "_maps\obj43.asm"
0000E90C                            Map_61da:
0000E90C 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E90E 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E910 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E912 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E914 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E916 02                         Map_61da_A: 	dc.b $2
0000E917 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E91C F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E921 02                         Map_61da_15: 	dc.b $2
0000E922 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E927 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E92C 01                         Map_61da_20: 	dc.b $1
0000E92D F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E932 01                         Map_61da_26: 	dc.b $1
0000E933 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E938 01                         Map_61da_2C: 	dc.b $1
0000E939 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E93E                            	even
0000E93E                            	even
0000E93E                            
0000E93E                            ; ===========================================================================
0000E93E                            ; ---------------------------------------------------------------------------
0000E93E                            ; Object 44 - walls (GHZ)
0000E93E                            ; ---------------------------------------------------------------------------
0000E93E                            
0000E93E                            Obj44:					; XREF: Obj_Index
0000E93E 7000                       		moveq	#0,d0
0000E940 1028 0024                  		move.b	$24(a0),d0
0000E944 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E948 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E94C                            ; ===========================================================================
0000E94C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E94E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E950 0000                       		dc.w Obj44_Display-Obj44_Index
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Obj44_Main:				; XREF: Obj44_Index
0000E952 5428 0024                  		addq.b	#2,$24(a0)
0000E956 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E95E 317C 434C 0002             		move.w	#$434C,2(a0)
0000E964 0028 0004 0001             		ori.b	#4,1(a0)
0000E96A 117C 0008 0019             		move.b	#8,$19(a0)
0000E970 117C 0006 0018             		move.b	#6,$18(a0)
0000E976 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E97C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E982 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E984 5428 0024                  		addq.b	#2,$24(a0)
0000E988 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E98A                            ; ===========================================================================
0000E98A                            
0000E98A                            Obj44_Solid:				; XREF: Obj44_Index
0000E98A 323C 0013                  		move.w	#$13,d1
0000E98E 343C 0028                  		move.w	#$28,d2
0000E992 6100 A704                  		bsr.w	Obj44_SolidWall
0000E996                            
0000E996                            Obj44_Display:				; XREF: Obj44_Index
0000E996 6100 F3DA                  		bsr.w	DisplaySprite
0000E99A 3028 0008                  		move.w	8(a0),d0
0000E99E 0240 FF80                  		andi.w	#$FF80,d0
0000E9A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9A6 0441 0080                  		subi.w	#$80,d1
0000E9AA 0241 FF80                  		andi.w	#$FF80,d1
0000E9AE 9041                       		sub.w	d1,d0
0000E9B0 0C40 0280                  		cmpi.w	#$280,d0
0000E9B4 6200 F3F8                  		bhi.w	DeleteObject
0000E9B8 4E75                       		rts	
0000E9BA                            ; ===========================================================================
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Sprite mappings - walls (GHZ)
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            Map_obj44:
0000E9BA                            	include "_maps\obj44.asm"
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Sprite mappings - walls (GHZ)
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA 0000                       		dc.w byte_E256-Map_obj44
0000E9BC 0000                       		dc.w byte_E26B-Map_obj44
0000E9BE 0000                       		dc.w byte_E280-Map_obj44
0000E9C0 04                         byte_E256:	dc.b 4
0000E9C1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E9C6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9CB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9D0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9D5 04                         byte_E26B:	dc.b 4
0000E9D6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E9DB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9E0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9E5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9EA 04                         byte_E280:	dc.b 4
0000E9EB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E9F0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E9F5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E9FA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA00 00                         		even
0000EA00 00                         		even
0000EA00                            
0000EA00                            ; ===========================================================================
0000EA00                            ; ---------------------------------------------------------------------------
0000EA00                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA00                            ; ---------------------------------------------------------------------------
0000EA00                            
0000EA00                            Obj13:					; XREF: Obj_Index
0000EA00 7000                       		moveq	#0,d0
0000EA02 1028 0024                  		move.b	$24(a0),d0
0000EA06 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA0A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA0E 6000 0000                  		bra.w	Obj14_ChkDel
0000EA12                            ; ===========================================================================
0000EA12 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA14 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA16                            ; ---------------------------------------------------------------------------
0000EA16                            ;
0000EA16                            ; Lava ball production rates
0000EA16                            ;
0000EA16 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA1C                            ; ===========================================================================
0000EA1C                            
0000EA1C                            Obj13_Main:				; XREF: Obj13_Index
0000EA1C 5428 0024                  		addq.b	#2,$24(a0)
0000EA20 1028 0028                  		move.b	$28(a0),d0
0000EA24 E848                       		lsr.w	#4,d0
0000EA26 0240 000F                  		andi.w	#$F,d0
0000EA2A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA30 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA36 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA3C                            
0000EA3C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA3C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA40 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA42 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA48 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EA4C 6600                       		bne.s	locret_E302
0000EA4E 6100 F7A8                  		bsr.w	SingleObjLoad
0000EA52 6600                       		bne.s	locret_E302
0000EA54 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EA58 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA64 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EA6A                            
0000EA6A                            locret_E302:
0000EA6A 4E75                       		rts	
0000EA6C                            ; ===========================================================================
0000EA6C                            ; ---------------------------------------------------------------------------
0000EA6C                            ; Object 14 - lava balls (MZ, SLZ)
0000EA6C                            ; ---------------------------------------------------------------------------
0000EA6C                            
0000EA6C                            Obj14:					; XREF: Obj_Index
0000EA6C 7000                       		moveq	#0,d0
0000EA6E 1028 0024                  		move.b	$24(a0),d0
0000EA72 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EA76 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EA7A 6000 F2F6                  		bra.w	DisplaySprite
0000EA7E                            ; ===========================================================================
0000EA7E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EA80 0000                       		dc.w Obj14_Action-Obj14_Index
0000EA82 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EA84                            
0000EA84 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EA8E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EA96                            ; ===========================================================================
0000EA96                            
0000EA96                            Obj14_Main:				; XREF: Obj14_Index
0000EA96 5428 0024                  		addq.b	#2,$24(a0)
0000EA9A 117C 0008 0016             		move.b	#8,$16(a0)
0000EAA0 117C 0008 0017             		move.b	#8,$17(a0)
0000EAA6 217C 0000 BA30 0004        		move.l	#Map_obj14,4(a0)
0000EAAE 317C 0345 0002             		move.w	#$345,2(a0)
0000EAB4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EABA 6600                       		bne.s	loc_E35A
0000EABC 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EAC2                            
0000EAC2                            loc_E35A:
0000EAC2 117C 0004 0001             		move.b	#4,1(a0)
0000EAC8 117C 0003 0018             		move.b	#3,$18(a0)
0000EACE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EAD4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EADA 4A28 0029                  		tst.b	$29(a0)
0000EADE 6700                       		beq.s	Obj14_SetSpeed
0000EAE0 5428 0018                  		addq.b	#2,$18(a0)
0000EAE4                            
0000EAE4                            Obj14_SetSpeed:
0000EAE4 7000                       		moveq	#0,d0
0000EAE6 1028 0028                  		move.b	$28(a0),d0
0000EAEA D040                       		add.w	d0,d0
0000EAEC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EAF2 117C 0008 0019             		move.b	#8,$19(a0)
0000EAF8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EAFE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB00 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB06 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB0C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB12 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB18                            
0000EB18                            Obj14_PlaySnd:
0000EB18 303C 00AE                  		move.w	#$AE,d0
0000EB1C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB22                            
0000EB22                            Obj14_Action:				; XREF: Obj14_Index
0000EB22 7000                       		moveq	#0,d0
0000EB24 1028 0028                  		move.b	$28(a0),d0
0000EB28 D040                       		add.w	d0,d0
0000EB2A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB2E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB32 6100 F218                  		bsr.w	SpeedToPos
0000EB36 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB3C 6100 C2F4                  		bsr.w	AnimateSprite
0000EB40                            
0000EB40                            Obj14_ChkDel:				; XREF: Obj13
0000EB40 3028 0008                  		move.w	8(a0),d0
0000EB44 0240 FF80                  		andi.w	#$FF80,d0
0000EB48 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB4C 0441 0080                  		subi.w	#$80,d1
0000EB50 0241 FF80                  		andi.w	#$FF80,d1
0000EB54 9041                       		sub.w	d1,d0
0000EB56 0C40 0280                  		cmpi.w	#$280,d0
0000EB5A 6200 F252                  		bhi.w	DeleteObject
0000EB5E 4E75                       		rts	
0000EB60                            ; ===========================================================================
0000EB60 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB64 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB68 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EB6C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EB70 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EB72                            ; ===========================================================================
0000EB72                            ; lavaball types 00-03 fly up and fall back down
0000EB72                            
0000EB72                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EB72 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EB78 3028 0030                  		move.w	$30(a0),d0
0000EB7C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EB80 6400                       		bcc.s	loc_E41E	; if not, branch
0000EB82 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EB86                            
0000EB86                            loc_E41E:
0000EB86 08A8 0001 0022             		bclr	#1,$22(a0)
0000EB8C 4A68 0012                  		tst.w	$12(a0)
0000EB90 6A00                       		bpl.s	locret_E430
0000EB92 08E8 0001 0022             		bset	#1,$22(a0)
0000EB98                            
0000EB98                            locret_E430:
0000EB98 4E75                       		rts	
0000EB9A                            ; ===========================================================================
0000EB9A                            ; lavaball type	04 flies up until it hits the ceiling
0000EB9A                            
0000EB9A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EB9A 08E8 0001 0022             		bset	#1,$22(a0)
0000EBA0 6100 0000                  		bsr.w	ObjHitCeiling
0000EBA4 4A41                       		tst.w	d1
0000EBA6 6A00                       		bpl.s	locret_E452
0000EBA8 117C 0008 0028             		move.b	#8,$28(a0)
0000EBAE 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBB4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EBBA                            
0000EBBA                            locret_E452:
0000EBBA 4E75                       		rts	
0000EBBC                            ; ===========================================================================
0000EBBC                            ; lavaball type	05 falls down until it hits the	floor
0000EBBC                            
0000EBBC                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EBBC 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBC2 6100 0000                  		bsr.w	ObjHitFloor
0000EBC6 4A41                       		tst.w	d1
0000EBC8 6A00                       		bpl.s	locret_E474
0000EBCA 117C 0008 0028             		move.b	#8,$28(a0)
0000EBD0 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBD6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EBDC                            
0000EBDC                            locret_E474:
0000EBDC 4E75                       		rts	
0000EBDE                            ; ===========================================================================
0000EBDE                            ; lavaball types 06-07 move sideways
0000EBDE                            
0000EBDE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EBDE 08E8 0000 0022             		bset	#0,$22(a0)
0000EBE4 76F8                       		moveq	#-8,d3
0000EBE6 6100 0000                  		bsr.w	ObjHitWallLeft
0000EBEA 4A41                       		tst.w	d1
0000EBEC 6A00                       		bpl.s	locret_E498
0000EBEE 117C 0008 0028             		move.b	#8,$28(a0)
0000EBF4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EBFA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC00                            
0000EC00                            locret_E498:
0000EC00 4E75                       		rts	
0000EC02                            ; ===========================================================================
0000EC02                            
0000EC02                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC02 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC08 7608                       		moveq	#8,d3
0000EC0A 6100 0000                  		bsr.w	ObjHitWallRight
0000EC0E 4A41                       		tst.w	d1
0000EC10 6A00                       		bpl.s	locret_E4BC
0000EC12 117C 0008 0028             		move.b	#8,$28(a0)
0000EC18 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC1E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC24                            
0000EC24                            locret_E4BC:
0000EC24 4E75                       		rts	
0000EC26                            ; ===========================================================================
0000EC26                            
0000EC26                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC26 4E75                       		rts	
0000EC28                            ; ===========================================================================
0000EC28                            
0000EC28                            Obj14_Delete:				; XREF: Obj14_Index
0000EC28 6000 F184                  		bra.w	DeleteObject
0000EC2C                            ; ===========================================================================
0000EC2C                            Ani_obj14:
0000EC2C                            	include "_anim\obj14.asm"
0000EC2C                            ; ---------------------------------------------------------------------------
0000EC2C                            ; Animation script - lava balls
0000EC2C                            ; ---------------------------------------------------------------------------
0000EC2C 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC2E 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC30 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC32 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC34 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC3A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC3E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC44 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC48                            		even
0000EC48                            		even
0000EC48                            
0000EC48                            ; ===========================================================================
0000EC48                            ; ---------------------------------------------------------------------------
0000EC48                            ; Object 6D - flame thrower (SBZ)
0000EC48                            ; ---------------------------------------------------------------------------
0000EC48                            
0000EC48                            Obj6D:					; XREF: Obj_Index
0000EC48 7000                       		moveq	#0,d0
0000EC4A 1028 0024                  		move.b	$24(a0),d0
0000EC4E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EC52 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EC56                            ; ===========================================================================
0000EC56 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EC58 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EC5A                            ; ===========================================================================
0000EC5A                            
0000EC5A                            Obj6D_Main:				; XREF: Obj6D_Index
0000EC5A 5428 0024                  		addq.b	#2,$24(a0)
0000EC5E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EC66 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EC6C 0028 0004 0001             		ori.b	#4,1(a0)
0000EC72 117C 0001 0018             		move.b	#1,$18(a0)
0000EC78 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC7E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EC84 1028 0028                  		move.b	$28(a0),d0
0000EC88 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EC8C D040                       		add.w	d0,d0		; multiply by 2
0000EC8E 3140 0030                  		move.w	d0,$30(a0)
0000EC92 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EC96 1028 0028                  		move.b	$28(a0),d0
0000EC9A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EC9E EB48                       		lsl.w	#5,d0		; multiply by $20
0000ECA0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ECA4 117C 000A 0036             		move.b	#$A,$36(a0)
0000ECAA 0828 0001 0022             		btst	#1,$22(a0)
0000ECB0 6700                       		beq.s	Obj6D_Action
0000ECB2 117C 0002 001C             		move.b	#2,$1C(a0)
0000ECB8 117C 0015 0036             		move.b	#$15,$36(a0)
0000ECBE                            
0000ECBE                            Obj6D_Action:				; XREF: Obj6D_Index
0000ECBE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ECC2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ECC4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ECCA 0868 0000 001C             		bchg	#0,$1C(a0)
0000ECD0 6700                       		beq.s	loc_E57A
0000ECD2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ECD8 303C 00B3                  		move.w	#$B3,d0
0000ECDC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ECE2                            
0000ECE2                            loc_E57A:
0000ECE2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ECE8 6100 C148                  		bsr.w	AnimateSprite
0000ECEC 117C 0000 0020             		move.b	#0,$20(a0)
0000ECF2 1028 0036                  		move.b	$36(a0),d0
0000ECF6 B028 001A                  		cmp.b	$1A(a0),d0
0000ECFA 6600                       		bne.s	Obj6D_ChkDel
0000ECFC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED02                            
0000ED02                            Obj6D_ChkDel:
0000ED02 3028 0008                  		move.w	8(a0),d0
0000ED06 0240 FF80                  		andi.w	#$FF80,d0
0000ED0A 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED0E 0441 0080                  		subi.w	#$80,d1
0000ED12 0241 FF80                  		andi.w	#$FF80,d1
0000ED16 9041                       		sub.w	d1,d0
0000ED18 0C40 0280                  		cmpi.w	#$280,d0
0000ED1C 6200 F090                  		bhi.w	DeleteObject
0000ED20 6000 F050                  		bra.w	DisplaySprite
0000ED24                            ; ===========================================================================
0000ED24                            Ani_obj6D:
0000ED24                            	include "_anim\obj6D.asm"
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            ; Animation script - flamethrower (SBZ)
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED26 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED28 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED2A 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED2C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED3A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED44 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ED52 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ED5C                            		even
0000ED5C                            		even
0000ED5C                            
0000ED5C                            ; ---------------------------------------------------------------------------
0000ED5C                            ; Sprite mappings - flame thrower (SBZ)
0000ED5C                            ; ---------------------------------------------------------------------------
0000ED5C                            Map_obj6D:
0000ED5C                            	include "_maps\obj6D.asm"
0000ED5C                            ; ---------------------------------------------------------------------------
0000ED5C                            ; Sprite mappings - flame thrower (SBZ)
0000ED5C                            ; ---------------------------------------------------------------------------
0000ED5C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ED60 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ED64 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ED68 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ED6C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ED70 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ED74 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ED78 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ED7C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ED80 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ED84 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ED88 01                         byte_E620:	dc.b 1
0000ED89 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED8E 02                         byte_E626:	dc.b 2
0000ED8F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED94 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED99 02                         byte_E631:	dc.b 2
0000ED9A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED9F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDA4 03                         byte_E63C:	dc.b 3
0000EDA5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDAA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDAF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDB4 03                         byte_E64C:	dc.b 3
0000EDB5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDBA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDBF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDC4 04                         byte_E65C:	dc.b 4
0000EDC5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDCA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDCF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDD4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDD9 04                         byte_E671:	dc.b 4
0000EDDA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDDF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDE4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDE9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDEE 05                         byte_E686:	dc.b 5
0000EDEF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EDF4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDF9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDFE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE03 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE08 05                         byte_E6A0:	dc.b 5
0000EE09 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE0E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE13 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE18 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE1D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE22 06                         byte_E6BA:	dc.b 6
0000EE23 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE28 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE2D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE32 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE37 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE3C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE41 06                         byte_E6D9:	dc.b 6
0000EE42 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE47 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE4C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE51 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE56 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE5B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE60 01                         byte_E6F8:	dc.b 1
0000EE61 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE66 02                         byte_E6FE:	dc.b 2
0000EE67 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE6C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE71 02                         byte_E709:	dc.b 2
0000EE72 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE77 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE7C 03                         byte_E714:	dc.b 3
0000EE7D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE87 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE8C 03                         byte_E724:	dc.b 3
0000EE8D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE92 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE97 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE9C 04                         byte_E734:	dc.b 4
0000EE9D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEA2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEA7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEAC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEB1 04                         byte_E749:	dc.b 4
0000EEB2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEB7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEBC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEC1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEC6 05                         byte_E75E:	dc.b 5
0000EEC7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EECC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EED1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EED6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEDB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEE0 05                         byte_E778:	dc.b 5
0000EEE1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEE6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEF0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEF5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEFA 06                         byte_E792:	dc.b 6
0000EEFB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF00 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF05 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF0A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF0F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF14 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF19 06                         byte_E7B1:	dc.b 6
0000EF1A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF1F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF24 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF29 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF2E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF33 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF38                            		even
0000EF38                            		even
0000EF38                            
0000EF38                            ; ===========================================================================
0000EF38                            ; ---------------------------------------------------------------------------
0000EF38                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF38                            ; ---------------------------------------------------------------------------
0000EF38                            
0000EF38                            Obj46:					; XREF: Obj_Index
0000EF38 7000                       		moveq	#0,d0
0000EF3A 1028 0024                  		move.b	$24(a0),d0
0000EF3E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF42 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF46                            ; ===========================================================================
0000EF46 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF48 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF4A                            ; ===========================================================================
0000EF4A                            
0000EF4A                            Obj46_Main:				; XREF: Obj46_Index
0000EF4A 5428 0024                  		addq.b	#2,$24(a0)
0000EF4E 117C 000F 0016             		move.b	#$F,$16(a0)
0000EF54 117C 000F 0017             		move.b	#$F,$17(a0)
0000EF5A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EF62 317C 4000 0002             		move.w	#$4000,2(a0)
0000EF68 117C 0004 0001             		move.b	#4,1(a0)
0000EF6E 117C 0003 0018             		move.b	#3,$18(a0)
0000EF74 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF7A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF80 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EF86                            
0000EF86                            Obj46_Action:				; XREF: Obj46_Index
0000EF86 4A28 0001                  		tst.b	1(a0)
0000EF8A 6A00                       		bpl.s	Obj46_ChkDel
0000EF8C 7000                       		moveq	#0,d0
0000EF8E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EF92 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EF96 D040                       		add.w	d0,d0
0000EF98 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EF9C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EFA0 323C 001B                  		move.w	#$1B,d1
0000EFA4 343C 0010                  		move.w	#$10,d2
0000EFA8 363C 0011                  		move.w	#$11,d3
0000EFAC 3828 0008                  		move.w	8(a0),d4
0000EFB0 6100 0000                  		bsr.w	SolidObject
0000EFB4                            
0000EFB4                            Obj46_ChkDel:
0000EFB4 6100 EDBC                  		bsr.w	DisplaySprite
0000EFB8 3028 0008                  		move.w	8(a0),d0
0000EFBC 0240 FF80                  		andi.w	#$FF80,d0
0000EFC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFC4 0441 0080                  		subi.w	#$80,d1
0000EFC8 0241 FF80                  		andi.w	#$FF80,d1
0000EFCC 9041                       		sub.w	d1,d0
0000EFCE 0C40 0280                  		cmpi.w	#$280,d0
0000EFD2 6200 EDDA                  		bhi.w	DeleteObject
0000EFD6 4E75                       		rts	
0000EFD8                            ; ===========================================================================
0000EFD8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EFDA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EFDC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EFDE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EFE0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EFE2                            ; ===========================================================================
0000EFE2                            
0000EFE2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EFE2 4E75                       		rts	
0000EFE4                            ; ===========================================================================
0000EFE4                            
0000EFE4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EFE4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFE8 9068 0008                  		sub.w	8(a0),d0
0000EFEC 6400                       		bcc.s	loc_E888
0000EFEE 4440                       		neg.w	d0
0000EFF0                            
0000EFF0                            loc_E888:
0000EFF0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EFF4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EFF6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EFFC                            
0000EFFC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EFFC 7000                       		moveq	#0,d0
0000EFFE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F002 0828 0003 0028             		btst	#3,$28(a0)
0000F008 6700                       		beq.s	loc_E8A8
0000F00A 4440                       		neg.w	d0
0000F00C 0640 0010                  		addi.w	#$10,d0
0000F010                            
0000F010                            loc_E8A8:
0000F010 3228 0030                  		move.w	$30(a0),d1
0000F014 9240                       		sub.w	d0,d1
0000F016 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F01A 4E75                       		rts	
0000F01C                            ; ===========================================================================
0000F01C                            
0000F01C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F01C 6100 ED2E                  		bsr.w	SpeedToPos
0000F020 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F026 6100 0000                  		bsr.w	ObjHitFloor
0000F02A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F02C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F030 D368 000C                  		add.w	d1,$C(a0)
0000F034 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F038 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F03E 117C 0004 0028             		move.b	#4,$28(a0)
0000F044 3011                       		move.w	(a1),d0
0000F046 0240 03FF                  		andi.w	#$3FF,d0
0000F04A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F04E 6400                       		bcc.s	locret_E8EE
0000F050 117C 0000 0028             		move.b	#0,$28(a0)
0000F056                            
0000F056                            locret_E8EE:
0000F056 4E75                       		rts	
0000F058                            ; ===========================================================================
0000F058                            
0000F058                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F058 7000                       		moveq	#0,d0
0000F05A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F05E E648                       		lsr.w	#3,d0
0000F060 3228 0030                  		move.w	$30(a0),d1
0000F064 9240                       		sub.w	d0,d1
0000F066 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F06A 4E75                       		rts	
0000F06C                            ; ===========================================================================
0000F06C                            ; ---------------------------------------------------------------------------
0000F06C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F06C                            ; ---------------------------------------------------------------------------
0000F06C                            Map_obj46:
0000F06C                            	include "_maps\obj46.asm"
0000F06C                            ; ---------------------------------------------------------------------------
0000F06C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F06C                            ; ---------------------------------------------------------------------------
0000F06C 0000                       		dc.w byte_E906-Map_obj46
0000F06E 01                         byte_E906:	dc.b 1
0000F06F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F074                            		even
0000F074                            		even
0000F074                            
0000F074                            ; ===========================================================================
0000F074                            ; ---------------------------------------------------------------------------
0000F074                            ; Object 12 - lamp (SYZ)
0000F074                            ; ---------------------------------------------------------------------------
0000F074                            
0000F074                            Obj12:					; XREF: Obj_Index
0000F074 7000                       		moveq	#0,d0
0000F076 1028 0024                  		move.b	$24(a0),d0
0000F07A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F07E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F082                            ; ===========================================================================
0000F082 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F084 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            Obj12_Main:				; XREF: Obj12_Index
0000F086 5428 0024                  		addq.b	#2,$24(a0)
0000F08A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F092 317C 0000 0002             		move.w	#0,2(a0)
0000F098 117C 0004 0001             		move.b	#4,1(a0)
0000F09E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0A4 117C 0006 0018             		move.b	#6,$18(a0)
0000F0AA                            
0000F0AA                            Obj12_Animate:				; XREF: Obj12_Index
0000F0AA 5328 001E                  		subq.b	#1,$1E(a0)
0000F0AE 6A00                       		bpl.s	Obj12_ChkDel
0000F0B0 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0B6 5228 001A                  		addq.b	#1,$1A(a0)
0000F0BA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F0C0 6500                       		bcs.s	Obj12_ChkDel
0000F0C2 117C 0000 001A             		move.b	#0,$1A(a0)
0000F0C8                            
0000F0C8                            Obj12_ChkDel:
0000F0C8 3028 0008                  		move.w	8(a0),d0
0000F0CC 0240 FF80                  		andi.w	#$FF80,d0
0000F0D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0D4 0441 0080                  		subi.w	#$80,d1
0000F0D8 0241 FF80                  		andi.w	#$FF80,d1
0000F0DC 9041                       		sub.w	d1,d0
0000F0DE 0C40 0280                  		cmpi.w	#$280,d0
0000F0E2 6200 ECCA                  		bhi.w	DeleteObject
0000F0E6 6000 EC8A                  		bra.w	DisplaySprite
0000F0EA                            ; ===========================================================================
0000F0EA                            ; ---------------------------------------------------------------------------
0000F0EA                            ; Sprite mappings - lamp (SYZ)
0000F0EA                            ; ---------------------------------------------------------------------------
0000F0EA                            Map_obj12:
0000F0EA                            	include "_maps\obj12.asm"
0000F0EA                            ; ---------------------------------------------------------------------------
0000F0EA                            ; Sprite mappings - lamp (SYZ)
0000F0EA                            ; ---------------------------------------------------------------------------
0000F0EA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F0EE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F0F2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F0F6 02                         byte_E98E:	dc.b 2
0000F0F7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F0FC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F101 02                         byte_E999:	dc.b 2
0000F102 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F107 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F10C 02                         byte_E9A4:	dc.b 2
0000F10D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F112 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F117 02                         byte_E9AF:	dc.b 2
0000F118 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F11D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F122 02                         byte_E9BA:	dc.b 2
0000F123 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F128 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F12D 02                         byte_E9C5:	dc.b 2
0000F12E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F133 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F138                            		even
0000F138                            		even
0000F138                            
0000F138                            ; ===========================================================================
0000F138                            ; ---------------------------------------------------------------------------
0000F138                            ; Object 47 - pinball bumper (SYZ)
0000F138                            ; ---------------------------------------------------------------------------
0000F138                            
0000F138                            Obj47:					; XREF: Obj_Index
0000F138 7000                       		moveq	#0,d0
0000F13A 1028 0024                  		move.b	$24(a0),d0
0000F13E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F142 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F146                            ; ===========================================================================
0000F146 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F148 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F14A                            ; ===========================================================================
0000F14A                            
0000F14A                            Obj47_Main:				; XREF: Obj47_Index
0000F14A 5428 0024                  		addq.b	#2,$24(a0)
0000F14E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F156 317C 0380 0002             		move.w	#$380,2(a0)
0000F15C 117C 0004 0001             		move.b	#4,1(a0)
0000F162 117C 0010 0019             		move.b	#$10,$19(a0)
0000F168 117C 0001 0018             		move.b	#1,$18(a0)
0000F16E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F174                            
0000F174                            Obj47_Hit:				; XREF: Obj47_Index
0000F174 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F178 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F17C 4228 0021                  		clr.b	$21(a0)
0000F180 43F8 D000                  		lea	($FFFFD000).w,a1
0000F184 3228 0008                  		move.w	8(a0),d1
0000F188 3428 000C                  		move.w	$C(a0),d2
0000F18C 9269 0008                  		sub.w	8(a1),d1
0000F190 9469 000C                  		sub.w	$C(a1),d2
0000F194 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F19A 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F1A0 C3FC F900                  		muls.w	#-$700,d1
0000F1A4 E081                       		asr.l	#8,d1
0000F1A6 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F1AA C1FC F900                  		muls.w	#-$700,d0
0000F1AE E080                       		asr.l	#8,d0
0000F1B0 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F1B4 08E9 0001 0022             		bset	#1,$22(a1)
0000F1BA 08A9 0004 0022             		bclr	#4,$22(a1)
0000F1C0 08A9 0005 0022             		bclr	#5,$22(a1)
0000F1C6 4229 003C                  		clr.b	$3C(a1)
0000F1CA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F1D0 303C 00B4                  		move.w	#$B4,d0
0000F1D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F1DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1DE 7000                       		moveq	#0,d0
0000F1E0 1028 0023                  		move.b	$23(a0),d0
0000F1E4 6700                       		beq.s	Obj47_Score
0000F1E6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F1EC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F1EE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F1F2                            
0000F1F2                            Obj47_Score:
0000F1F2 7001                       		moveq	#1,d0
0000F1F4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F1FA 6100 EFFC                  		bsr.w	SingleObjLoad
0000F1FE 6600                       		bne.s	Obj47_Display
0000F200 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F204 3368 0008 0008             		move.w	8(a0),8(a1)
0000F20A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F210 137C 0004 001A             		move.b	#4,$1A(a1)
0000F216                            
0000F216                            Obj47_Display:
0000F216 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F21C 6100 BC14                  		bsr.w	AnimateSprite
0000F220 3028 0008                  		move.w	8(a0),d0
0000F224 0240 FF80                  		andi.w	#$FF80,d0
0000F228 3238 F700                  		move.w	($FFFFF700).w,d1
0000F22C 0441 0080                  		subi.w	#$80,d1
0000F230 0241 FF80                  		andi.w	#$FF80,d1
0000F234 9041                       		sub.w	d1,d0
0000F236 0C40 0280                  		cmpi.w	#$280,d0
0000F23A 6200                       		bhi.s	Obj47_ChkHit
0000F23C 6000 EB34                  		bra.w	DisplaySprite
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F240 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F244 7000                       		moveq	#0,d0
0000F246 1028 0023                  		move.b	$23(a0),d0
0000F24A 6700                       		beq.s	Obj47_Delete
0000F24C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F252                            
0000F252                            Obj47_Delete:
0000F252 6000 EB5A                  		bra.w	DeleteObject
0000F256                            ; ===========================================================================
0000F256                            Ani_obj47:
0000F256                            	include "_anim\obj47.asm"
0000F256                            ; ---------------------------------------------------------------------------
0000F256                            ; Animation script - flamethrower (SBZ)
0000F256                            ; ---------------------------------------------------------------------------
0000F256 0000                       		dc.w byte_EAF4-Ani_obj47
0000F258 0000                       		dc.w byte_EAF8-Ani_obj47
0000F25A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F25E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F266                            		even
0000F266                            		even
0000F266                            
0000F266                            ; ---------------------------------------------------------------------------
0000F266                            ; Sprite mappings - pinball bumper (SYZ)
0000F266                            ; ---------------------------------------------------------------------------
0000F266                            Map_obj47:
0000F266                            	include "_maps\obj47.asm"
0000F266                            ; ---------------------------------------------------------------------------
0000F266                            ; Sprite mappings - pinball bumper (SYZ)
0000F266                            ; ---------------------------------------------------------------------------
0000F266 0000                       		dc.w byte_EB06-Map_obj47
0000F268 0000                       		dc.w byte_EB11-Map_obj47
0000F26A 0000                       		dc.w byte_EB1C-Map_obj47
0000F26C 02                         byte_EB06:	dc.b 2
0000F26D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F272 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F277 02                         byte_EB11:	dc.b 2
0000F278 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F27D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F282 02                         byte_EB1C:	dc.b 2
0000F283 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F288 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F28E 00                         		even
0000F28E 00                         		even
0000F28E                            
0000F28E                            ; ===========================================================================
0000F28E                            ; ---------------------------------------------------------------------------
0000F28E                            ; Object 0D - signpost at the end of a level
0000F28E                            ; ---------------------------------------------------------------------------
0000F28E                            
0000F28E                            Obj0D:					; XREF: Obj_Index
0000F28E 7000                       		moveq	#0,d0
0000F290 1028 0024                  		move.b	$24(a0),d0
0000F294 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F298 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F29C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F2A2 6100 BB8E                  		bsr.w	AnimateSprite
0000F2A6 6100 EACA                  		bsr.w	DisplaySprite
0000F2AA 3028 0008                  		move.w	8(a0),d0
0000F2AE 0240 FF80                  		andi.w	#$FF80,d0
0000F2B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2B6 0441 0080                  		subi.w	#$80,d1
0000F2BA 0241 FF80                  		andi.w	#$FF80,d1
0000F2BE 9041                       		sub.w	d1,d0
0000F2C0 0C40 0280                  		cmpi.w	#$280,d0
0000F2C4 6200 EAE8                  		bhi.w	DeleteObject
0000F2C8 4E75                       		rts	
0000F2CA                            ; ===========================================================================
0000F2CA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F2CC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F2CE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F2D0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F2D2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F2D4                            ; ===========================================================================
0000F2D4                            
0000F2D4                            Obj0D_Main:				; XREF: Obj0D_Index
0000F2D4 5428 0024                  		addq.b	#2,$24(a0)
0000F2D8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F2E0 317C 0680 0002             		move.w	#$680,2(a0)
0000F2E6 117C 0004 0001             		move.b	#4,1(a0)
0000F2EC 117C 0018 0019             		move.b	#$18,$19(a0)
0000F2F2 117C 0004 0018             		move.b	#4,$18(a0)
0000F2F8                            
0000F2F8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F2F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2FC 9068 0008                  		sub.w	8(a0),d0
0000F300 6500                       		bcs.s	locret_EBBA
0000F302 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F306 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F308 303C 00CF                  		move.w	#$CF,d0
0000F30C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F312 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F316 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F31C 5428 0024                  		addq.b	#2,$24(a0)
0000F320                            
0000F320                            locret_EBBA:
0000F320 4E75                       		rts	
0000F322                            ; ===========================================================================
0000F322                            
0000F322                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F322 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F326 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F328 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F32E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F332 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F338 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F33A 5428 0024                  		addq.b	#2,$24(a0)
0000F33E                            
0000F33E                            Obj0D_Sparkle:
0000F33E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F342 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F344 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F34A 7000                       		moveq	#0,d0
0000F34C 1028 0034                  		move.b	$34(a0),d0
0000F350 5428 0034                  		addq.b	#2,$34(a0)
0000F354 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F35A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F35E 6100 EE98                  		bsr.w	SingleObjLoad
0000F362 6600                       		bne.s	locret_EC42
0000F364 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F368 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F36E 101A                       		move.b	(a2)+,d0
0000F370 4880                       		ext.w	d0
0000F372 D068 0008                  		add.w	8(a0),d0
0000F376 3340 0008                  		move.w	d0,8(a1)
0000F37A 101A                       		move.b	(a2)+,d0
0000F37C 4880                       		ext.w	d0
0000F37E D068 000C                  		add.w	$C(a0),d0
0000F382 3340 000C                  		move.w	d0,$C(a1)
0000F386 237C 0000 A5D0 0004        		move.l	#Map_obj25,4(a1)
0000F38E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F394 137C 0004 0001             		move.b	#4,1(a1)
0000F39A 137C 0002 0018             		move.b	#2,$18(a1)
0000F3A0 137C 0008 0019             		move.b	#8,$19(a1)
0000F3A6                            
0000F3A6                            locret_EC42:
0000F3A6 4E75                       		rts	
0000F3A8                            ; ===========================================================================
0000F3A8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F3AA 0808                       		dc.b	8,   8
0000F3AC F000                       		dc.b -$10,   0
0000F3AE 18F8                       		dc.b  $18,  -8
0000F3B0 00F8                       		dc.b	0,  -8
0000F3B2 1000                       		dc.b  $10,   0
0000F3B4 E808                       		dc.b -$18,   8
0000F3B6 1810                       		dc.b  $18, $10
0000F3B8                            ; ===========================================================================
0000F3B8                            
0000F3B8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F3B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F3BC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F3C0 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F3C6 6600                       		bne.s	loc_EC70
0000F3C8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F3CE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F3D4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F3D6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F3DC 6000                       		bra.s	loc_EC70
0000F3DE                            
0000F3DE                            Obj0D_MoveLeft:
0000F3DE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F3E4                            
0000F3E4                            loc_EC70:
0000F3E4 4A38 D000                  		tst.b	($FFFFD000).w
0000F3E8 6700                       		beq.s	loc_EC86
0000F3EA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3EE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F3F2 0641 0128                  		addi.w	#$128,d1
0000F3F6 B041                       		cmp.w	d1,d0
0000F3F8 6500                       		bcs.s	locret_ECEE
0000F3FA                            
0000F3FA                            loc_EC86:
0000F3FA 5428 0024                  		addq.b	#2,$24(a0)
0000F3FE                            
0000F3FE                            ; ---------------------------------------------------------------------------
0000F3FE                            ; Subroutine to	set up bonuses at the end of an	act
0000F3FE                            ; ---------------------------------------------------------------------------
0000F3FE                            
0000F3FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3FE                            
0000F3FE                            
0000F3FE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F3FE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F402 6600                       		bne.s	locret_ECEE
0000F404 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F40A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F40E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F412 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F418 7010                       		moveq	#$10,d0
0000F41A 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F420 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F426 7000                       		moveq	#0,d0
0000F428 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F42C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F430 7200                       		moveq	#0,d1
0000F432 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F436 D041                       		add.w	d1,d0		; add up your time
0000F438 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F43C 7214                       		moveq	#$14,d1
0000F43E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F440 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F442 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F444                            
0000F444                            loc_ECD0:
0000F444 D040                       		add.w	d0,d0
0000F446 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F44C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F450 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F454 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F458 303C 008E                  		move.w	#$8E,d0
0000F45C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F462                            
0000F462                            locret_ECEE:
0000F462 4E75                       		rts	
0000F464                            ; End of function GotThroughAct
0000F464                            
0000F464                            ; ===========================================================================
0000F464 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F478 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F48E                            ; ===========================================================================
0000F48E                            
0000F48E                            locret_ED1A:				; XREF: Obj0D_Index
0000F48E 4E75                       		rts	
0000F490                            ; ===========================================================================
0000F490                            Ani_obj0D:
0000F490                            	include "_anim\obj0D.asm"
0000F490                            ; ---------------------------------------------------------------------------
0000F490                            ; Animation script - signpost
0000F490                            ; ---------------------------------------------------------------------------
0000F490 0000                       		dc.w byte_ED24-Ani_obj0D
0000F492 0000                       		dc.w byte_ED28-Ani_obj0D
0000F494 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F496 0000                       		dc.w byte_ED34-Ani_obj0D
0000F498 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F49C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F4A2 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F4A8 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F4AC 00                         		even
0000F4AC 00                         		even
0000F4AC                            
0000F4AC                            ; ---------------------------------------------------------------------------
0000F4AC                            ; Sprite mappings - signpost
0000F4AC                            ; ---------------------------------------------------------------------------
0000F4AC                            Map_obj0D:
0000F4AC                            	include "_maps\obj0D.asm"
0000F4AC                            ; ---------------------------------------------------------------------------
0000F4AC                            ; Sprite mappings - signpost
0000F4AC                            ; ---------------------------------------------------------------------------
0000F4AC 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F4B0 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F4B4 0000                       		dc.w byte_ED73-Map_obj0D
0000F4B6 03                         byte_ED42:	dc.b 3
0000F4B7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4BC F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F4C1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4C6 02                         byte_ED52:	dc.b 2
0000F4C7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F4CC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4D1 02                         byte_ED5D:	dc.b 2
0000F4D2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F4D7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4DC 02                         byte_ED68:	dc.b 2
0000F4DD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F4E2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4E7 03                         byte_ED73:	dc.b 3
0000F4E8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F4ED F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F4F2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4F8 00                         		even
0000F4F8 00                         		even
0000F4F8                            
0000F4F8                            ; ===========================================================================
0000F4F8                            ; ---------------------------------------------------------------------------
0000F4F8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F4F8                            ; ---------------------------------------------------------------------------
0000F4F8                            
0000F4F8                            Obj4C:					; XREF: Obj_Index
0000F4F8 7000                       		moveq	#0,d0
0000F4FA 1028 0024                  		move.b	$24(a0),d0
0000F4FE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F502 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F506 6000 0000                  		bra.w	Obj4D_ChkDel
0000F50A                            ; ===========================================================================
0000F50A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F50C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F50E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F510 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F512 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F514 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F516                            ; ===========================================================================
0000F516                            
0000F516                            Obj4C_Main:				; XREF: Obj4C_Index
0000F516 5428 0024                  		addq.b	#2,$24(a0)
0000F51A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F522 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F528 117C 0004 0001             		move.b	#4,1(a0)
0000F52E 117C 0001 0018             		move.b	#1,$18(a0)
0000F534 117C 0038 0019             		move.b	#$38,$19(a0)
0000F53A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F540                            
0000F540                            loc_EDCC:				; XREF: Obj4C_Index
0000F540 5368 0032                  		subq.w	#1,$32(a0)
0000F544 6A00                       		bpl.s	locret_EDF0
0000F546 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F54C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F550 3228 000C                  		move.w	$C(a0),d1
0000F554 B041                       		cmp.w	d1,d0
0000F556 6400                       		bcc.s	locret_EDF0
0000F558 0441 0170                  		subi.w	#$170,d1
0000F55C B041                       		cmp.w	d1,d0
0000F55E 6500                       		bcs.s	locret_EDF0
0000F560 5428 0024                  		addq.b	#2,$24(a0)
0000F564                            
0000F564                            locret_EDF0:
0000F564 4E75                       		rts	
0000F566                            ; ===========================================================================
0000F566                            
0000F566                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F566 5428 0024                  		addq.b	#2,$24(a0)
0000F56A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F56E 6600                       		bne.s	loc_EE18
0000F570 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F574 3368 0008 0008             		move.w	8(a0),8(a1)
0000F57A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F580 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F586 2348 003C                  		move.l	a0,$3C(a1)
0000F58A                            
0000F58A                            loc_EE18:
0000F58A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F590 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F594 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F596 117C 0004 001C             		move.b	#4,$1C(a0)
0000F59C 6000                       		bra.s	Obj4C_Display
0000F59E                            ; ===========================================================================
0000F59E                            
0000F59E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F59E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F5A2 08E9 0001 0022             		bset	#1,$22(a1)
0000F5A8 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F5AE 6000                       		bra.s	Obj4C_Display
0000F5B0                            ; ===========================================================================
0000F5B0                            
0000F5B0                            loc_EE3E:				; XREF: Obj4C_Index
0000F5B0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5B4 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F5B6 5428 0024                  		addq.b	#2,$24(a0)
0000F5BA 4E75                       		rts	
0000F5BC                            ; ===========================================================================
0000F5BC                            
0000F5BC                            Obj4C_Display:				; XREF: Obj4C_Index
0000F5BC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F5C2 6100 B86E                  		bsr.w	AnimateSprite
0000F5C6 6100 E7AA                  		bsr.w	DisplaySprite
0000F5CA 4E75                       		rts	
0000F5CC                            ; ===========================================================================
0000F5CC                            
0000F5CC                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F5CC 117C 0000 001C             		move.b	#0,$1C(a0)
0000F5D2 117C 0002 0024             		move.b	#2,$24(a0)
0000F5D8 4A28 0028                  		tst.b	$28(a0)
0000F5DC 6700 E7D0                  		beq.w	DeleteObject
0000F5E0 4E75                       		rts	
0000F5E2                            ; ===========================================================================
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2                            
0000F5E2                            Obj4D:					; XREF: Obj_Index
0000F5E2 7000                       		moveq	#0,d0
0000F5E4 1028 0024                  		move.b	$24(a0),d0
0000F5E8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F5EC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F5F0 6000 E780                  		bra.w	DisplaySprite
0000F5F4                            ; ===========================================================================
0000F5F4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F5F6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F5F8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F5FA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F5FC                            
0000F5FC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F600                            ; ===========================================================================
0000F600                            
0000F600                            Obj4D_Main:				; XREF: Obj4D_Index
0000F600 5428 0024                  		addq.b	#2,$24(a0)
0000F604 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F60A 4A28 0028                  		tst.b	$28(a0)
0000F60E 6700                       		beq.s	loc_EEA4
0000F610 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F616                            
0000F616                            loc_EEA4:
0000F616 7000                       		moveq	#0,d0
0000F618 1028 0028                  		move.b	$28(a0),d0
0000F61C D040                       		add.w	d0,d0
0000F61E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F624 2248                       		movea.l	a0,a1
0000F626 7201                       		moveq	#1,d1
0000F628 6100                       		bsr.s	Obj4D_MakeLava
0000F62A 6000                       		bra.s	loc_EF10
0000F62C                            ; ===========================================================================
0000F62C                            
0000F62C                            Obj4D_Loop:
0000F62C 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F630 6600                       		bne.s	loc_EF0A
0000F632                            
0000F632                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F632 12BC 004D                  		move.b	#$4D,0(a1)
0000F636 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F63E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F644 137C 0004 0001             		move.b	#4,1(a1)
0000F64A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F650 3368 0008 0008             		move.w	8(a0),8(a1)
0000F656 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F65C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F662 137C 0001 0018             		move.b	#1,$18(a1)
0000F668 137C 0005 001C             		move.b	#5,$1C(a1)
0000F66E 4A28 0028                  		tst.b	$28(a0)
0000F672 6700                       		beq.s	loc_EF0A
0000F674 137C 0002 001C             		move.b	#2,$1C(a1)
0000F67A                            
0000F67A                            loc_EF0A:
0000F67A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F67E 4E75                       		rts	
0000F680                            ; ===========================================================================
0000F680                            
0000F680                            loc_EF10:				; XREF: Obj4D_Main
0000F680 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F686 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F68C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F692 137C 0093 0020             		move.b	#$93,$20(a1)
0000F698 137C 0080 0016             		move.b	#$80,$16(a1)
0000F69E 08E9 0004 0001             		bset	#4,1(a1)
0000F6A4 5829 0024                  		addq.b	#4,$24(a1)
0000F6A8 2348 003C                  		move.l	a0,$3C(a1)
0000F6AC 4A28 0028                  		tst.b	$28(a0)
0000F6B0 6700                       		beq.s	Obj4D_PlaySnd
0000F6B2 7200                       		moveq	#0,d1
0000F6B4 6100 FF76                  		bsr.w	Obj4D_Loop
0000F6B8 5429 0024                  		addq.b	#2,$24(a1)
0000F6BC 08E9 0004 0002             		bset	#4,2(a1)
0000F6C2 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F6C8 137C 0000 0018             		move.b	#0,$18(a1)
0000F6CE 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6D4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F6DA 117C 0000 0028             		move.b	#0,$28(a0)
0000F6E0                            
0000F6E0                            Obj4D_PlaySnd:
0000F6E0 303C 00C8                  		move.w	#$C8,d0
0000F6E4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6EA                            
0000F6EA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F6EA 7000                       		moveq	#0,d0
0000F6EC 1028 0028                  		move.b	$28(a0),d0
0000F6F0 D040                       		add.w	d0,d0
0000F6F2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F6F6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F6FA 6100 E650                  		bsr.w	SpeedToPos
0000F6FE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F704 6100 B72C                  		bsr.w	AnimateSprite
0000F708                            
0000F708                            Obj4D_ChkDel:				; XREF: Obj4C
0000F708 3028 0008                  		move.w	8(a0),d0
0000F70C 0240 FF80                  		andi.w	#$FF80,d0
0000F710 3238 F700                  		move.w	($FFFFF700).w,d1
0000F714 0441 0080                  		subi.w	#$80,d1
0000F718 0241 FF80                  		andi.w	#$FF80,d1
0000F71C 9041                       		sub.w	d1,d0
0000F71E 0C40 0280                  		cmpi.w	#$280,d0
0000F722 6200 E68A                  		bhi.w	DeleteObject
0000F726 4E75                       		rts	
0000F728                            ; ===========================================================================
0000F728 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F72A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F72C                            ; ===========================================================================
0000F72C                            
0000F72C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F72C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F732 3028 0030                  		move.w	$30(a0),d0
0000F736 B068 000C                  		cmp.w	$C(a0),d0
0000F73A 6400                       		bcc.s	locret_EFDA
0000F73C 5828 0024                  		addq.b	#4,$24(a0)
0000F740 2268 003C                  		movea.l	$3C(a0),a1
0000F744 137C 0003 001C             		move.b	#3,$1C(a1)
0000F74A                            
0000F74A                            locret_EFDA:
0000F74A 4E75                       		rts	
0000F74C                            ; ===========================================================================
0000F74C                            
0000F74C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F74C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F752 3028 0030                  		move.w	$30(a0),d0
0000F756 B068 000C                  		cmp.w	$C(a0),d0
0000F75A 6400                       		bcc.s	locret_EFFA
0000F75C 5828 0024                  		addq.b	#4,$24(a0)
0000F760 2268 003C                  		movea.l	$3C(a0),a1
0000F764 137C 0001 001C             		move.b	#1,$1C(a1)
0000F76A                            
0000F76A                            locret_EFFA:
0000F76A 4E75                       		rts	
0000F76C                            ; ===========================================================================
0000F76C                            
0000F76C                            loc_EFFC:				; XREF: Obj4D_Index
0000F76C 2268 003C                  		movea.l	$3C(a0),a1
0000F770 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F776 6700 0000                  		beq.w	Obj4D_Delete
0000F77A 3029 000C                  		move.w	$C(a1),d0
0000F77E 0640 0060                  		addi.w	#$60,d0
0000F782 3140 000C                  		move.w	d0,$C(a0)
0000F786 9068 0030                  		sub.w	$30(a0),d0
0000F78A 4440                       		neg.w	d0
0000F78C 7208                       		moveq	#8,d1
0000F78E 0C40 0040                  		cmpi.w	#$40,d0
0000F792 6C00                       		bge.s	loc_F026
0000F794 720B                       		moveq	#$B,d1
0000F796                            
0000F796                            loc_F026:
0000F796 0C40 0080                  		cmpi.w	#$80,d0
0000F79A 6F00                       		ble.s	loc_F02E
0000F79C 720E                       		moveq	#$E,d1
0000F79E                            
0000F79E                            loc_F02E:
0000F79E 5328 001E                  		subq.b	#1,$1E(a0)
0000F7A2 6A00                       		bpl.s	loc_F04C
0000F7A4 117C 0007 001E             		move.b	#7,$1E(a0)
0000F7AA 5228 001B                  		addq.b	#1,$1B(a0)
0000F7AE 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F7B4 6500                       		bcs.s	loc_F04C
0000F7B6 117C 0000 001B             		move.b	#0,$1B(a0)
0000F7BC                            
0000F7BC                            loc_F04C:
0000F7BC 1028 001B                  		move.b	$1B(a0),d0
0000F7C0 D001                       		add.b	d1,d0
0000F7C2 1140 001A                  		move.b	d0,$1A(a0)
0000F7C6 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F7CA                            ; ===========================================================================
0000F7CA                            
0000F7CA                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F7CA 6000 E5E2                  		bra.w	DeleteObject
0000F7CE                            ; ===========================================================================
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            ; Object 4E - advancing	wall of	lava (MZ)
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            
0000F7CE                            Obj4E:					; XREF: Obj_Index
0000F7CE 7000                       		moveq	#0,d0
0000F7D0 1028 0024                  		move.b	$24(a0),d0
0000F7D4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F7D8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F7DC                            ; ===========================================================================
0000F7DC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F7DE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F7E0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F7E2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F7E4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F7E6                            ; ===========================================================================
0000F7E6                            
0000F7E6                            Obj4E_Main:				; XREF: Obj4E_Index
0000F7E6 5828 0024                  		addq.b	#4,$24(a0)
0000F7EA 2248                       		movea.l	a0,a1
0000F7EC 7201                       		moveq	#1,d1
0000F7EE 6000                       		bra.s	Obj4E_Main2
0000F7F0                            ; ===========================================================================
0000F7F0                            
0000F7F0                            Obj4E_Loop:
0000F7F0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F7F4 6600                       		bne.s	loc_F0C8
0000F7F6                            
0000F7F6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F7F6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F7FA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F802 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F808 137C 0004 0001             		move.b	#4,1(a1)
0000F80E 137C 0050 0019             		move.b	#$50,$19(a1)
0000F814 3368 0008 0008             		move.w	8(a0),8(a1)
0000F81A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F820 137C 0001 0018             		move.b	#1,$18(a1)
0000F826 137C 0000 001C             		move.b	#0,$1C(a1)
0000F82C 137C 0094 0020             		move.b	#$94,$20(a1)
0000F832 2348 003C                  		move.l	a0,$3C(a1)
0000F836                            
0000F836                            loc_F0C8:
0000F836 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F83A                            
0000F83A 5C29 0024                  		addq.b	#6,$24(a1)
0000F83E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F844                            
0000F844                            Obj4E_Action:				; XREF: Obj4E_Index
0000F844 3038 D008                  		move.w	($FFFFD008).w,d0
0000F848 9068 0008                  		sub.w	8(a0),d0
0000F84C 6400                       		bcc.s	Obj4E_ChkSonic
0000F84E 4440                       		neg.w	d0
0000F850                            
0000F850                            Obj4E_ChkSonic:
0000F850 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F854 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F856 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F85A 9068 000C                  		sub.w	$C(a0),d0
0000F85E 6400                       		bcc.s	loc_F0F4
0000F860 4440                       		neg.w	d0
0000F862                            
0000F862                            loc_F0F4:
0000F862 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F866 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F868 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F86E 6000                       		bra.s	Obj4E_Solid
0000F870                            ; ===========================================================================
0000F870                            
0000F870                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F870 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F874 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F876 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F87C 5528 0024                  		subq.b	#2,$24(a0)
0000F880                            
0000F880                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F880 323C 002B                  		move.w	#$2B,d1
0000F884 343C 0018                  		move.w	#$18,d2
0000F888 3602                       		move.w	d2,d3
0000F88A 5243                       		addq.w	#1,d3
0000F88C 3828 0008                  		move.w	8(a0),d4
0000F890 1028 0024                  		move.b	$24(a0),d0
0000F894 3F00                       		move.w	d0,-(sp)
0000F896 6100 0000                  		bsr.w	SolidObject
0000F89A 301F                       		move.w	(sp)+,d0
0000F89C 1140 0024                  		move.b	d0,$24(a0)
0000F8A0 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F8A6 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F8A8 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F8AC 4228 0036                  		clr.b	$36(a0)
0000F8B0                            
0000F8B0                            Obj4E_Animate:
0000F8B0 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F8B6 6100 B57A                  		bsr.w	AnimateSprite
0000F8BA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F8C0 6400                       		bcc.s	Obj4E_ChkDel
0000F8C2 6100 E488                  		bsr.w	SpeedToPos
0000F8C6                            
0000F8C6                            Obj4E_ChkDel:
0000F8C6 6100 E4AA                  		bsr.w	DisplaySprite
0000F8CA 4A28 0036                  		tst.b	$36(a0)
0000F8CE 6600                       		bne.s	locret_F17E
0000F8D0 3028 0008                  		move.w	8(a0),d0
0000F8D4 0240 FF80                  		andi.w	#$FF80,d0
0000F8D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8DC 0441 0080                  		subi.w	#$80,d1
0000F8E0 0241 FF80                  		andi.w	#$FF80,d1
0000F8E4 9041                       		sub.w	d1,d0
0000F8E6 0C40 0280                  		cmpi.w	#$280,d0
0000F8EA 6200                       		bhi.s	Obj4E_ChkGone
0000F8EC                            
0000F8EC                            locret_F17E:
0000F8EC 4E75                       		rts	
0000F8EE                            ; ===========================================================================
0000F8EE                            
0000F8EE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F8EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F8F2 7000                       		moveq	#0,d0
0000F8F4 1028 0023                  		move.b	$23(a0),d0
0000F8F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F8FE 117C 0008 0024             		move.b	#8,$24(a0)
0000F904 4E75                       		rts	
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F906 2268 003C                  		movea.l	$3C(a0),a1
0000F90A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F910 6700                       		beq.s	Obj4E_Delete
0000F912 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F918 0468 0080 0008             		subi.w	#$80,8(a0)
0000F91E 6000 E452                  		bra.w	DisplaySprite
0000F922                            ; ===========================================================================
0000F922                            
0000F922                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F922 6000 E48A                  		bra.w	DeleteObject
0000F926                            ; ===========================================================================
0000F926                            ; ---------------------------------------------------------------------------
0000F926                            ; Object 54 - invisible	lava tag (MZ)
0000F926                            ; ---------------------------------------------------------------------------
0000F926                            
0000F926                            Obj54:					; XREF: Obj_Index
0000F926 7000                       		moveq	#0,d0
0000F928 1028 0024                  		move.b	$24(a0),d0
0000F92C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F930 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F934                            ; ===========================================================================
0000F934 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F936 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F938                            
0000F938 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F93C                            ; ===========================================================================
0000F93C                            
0000F93C                            Obj54_Main:				; XREF: Obj54_Index
0000F93C 5428 0024                  		addq.b	#2,$24(a0)
0000F940 7000                       		moveq	#0,d0
0000F942 1028 0028                  		move.b	$28(a0),d0
0000F946 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F94C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F954 117C 0084 0001             		move.b	#$84,1(a0)
0000F95A                            
0000F95A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F95A 3028 0008                  		move.w	8(a0),d0
0000F95E 0240 FF80                  		andi.w	#$FF80,d0
0000F962 3238 F700                  		move.w	($FFFFF700).w,d1
0000F966 0441 0080                  		subi.w	#$80,d1
0000F96A 0241 FF80                  		andi.w	#$FF80,d1
0000F96E 9041                       		sub.w	d1,d0
0000F970 6B00 E43C                  		bmi.w	DeleteObject
0000F974 0C40 0280                  		cmpi.w	#$280,d0
0000F978 6200 E434                  		bhi.w	DeleteObject
0000F97C 4E75                       		rts	
0000F97E                            ; ===========================================================================
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            ; Sprite mappings - invisible lava tag (MZ)
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            Map_obj54:
0000F97E                            	include "_maps\obj54.asm"
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            ; Sprite mappings - invisible lava tag (MZ)
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E 0000                       		dc.w byte_F212-Map_obj54
0000F980 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F982 00                         		even
0000F982 00                         		even
0000F982                            
0000F982                            Ani_obj4C:
0000F982                            	include "_anim\obj4C.asm"
0000F982                            ; ---------------------------------------------------------------------------
0000F982                            ; Animation script - geyser of lava (MZ)
0000F982                            ; ---------------------------------------------------------------------------
0000F982 0000                       		dc.w byte_F220-Ani_obj4C
0000F984 0000                       		dc.w byte_F22A-Ani_obj4C
0000F986 0000                       		dc.w byte_F22E-Ani_obj4C
0000F988 0000                       		dc.w byte_F232-Ani_obj4C
0000F98A 0000                       		dc.w byte_F23A-Ani_obj4C
0000F98C 0000                       		dc.w byte_F23E-Ani_obj4C
0000F98E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F998 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F99C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F9A0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F9A8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F9AC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F9B0                            		even
0000F9B0                            		even
0000F9B0                            
0000F9B0                            Ani_obj4E:
0000F9B0                            	include "_anim\obj4E.asm"
0000F9B0                            ; ---------------------------------------------------------------------------
0000F9B0                            ; Animation script - advancing wall of lava (MZ)
0000F9B0                            ; ---------------------------------------------------------------------------
0000F9B0 0000                       		dc.w byte_F244-Ani_obj4E
0000F9B2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F9B8                            		even
0000F9B8                            		even
0000F9B8                            
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8                            Map_obj4C:
0000F9B8                            	include "_maps\obj4C.asm"
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F9BC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F9C0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F9C4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F9C8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F9CC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F9D0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F9D4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F9D8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F9DC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F9E0 02                         byte_F272:	dc.b 2
0000F9E1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F9E6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F9EB 02                         byte_F27D:	dc.b 2
0000F9EC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F9F1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F9F6 04                         byte_F288:	dc.b 4
0000F9F7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F9FC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA01 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA06 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA0B 04                         byte_F29D:	dc.b 4
0000FA0C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA11 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA16 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA1B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA20 06                         byte_F2B2:	dc.b 6
0000FA21 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA26 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA2B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA30 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA35 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA3A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA3F 06                         byte_F2D1:	dc.b 6
0000FA40 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA45 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA4A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA4F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA54 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FA59 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FA5E 02                         byte_F2F0:	dc.b 2
0000FA5F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FA64 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FA69 02                         byte_F2FB:	dc.b 2
0000FA6A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FA6F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FA74 0A                         byte_F306:	dc.b $A
0000FA75 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA7A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA7F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA84 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA89 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA8E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA93 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA98 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA9D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAA2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAA7 0A                         byte_F339:	dc.b $A
0000FAA8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FAAD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAB2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAB7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FABC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAC1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAC6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FACB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FAD0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAD5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FADA 0A                         byte_F36C:	dc.b $A
0000FADB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FAE0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAE5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAEA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FAEF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAF4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAF9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAFE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB03 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB08 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB0D 06                         byte_F39F:	dc.b 6
0000FB0E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB13 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB18 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB1D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB22 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB27 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB2C 06                         byte_F3BE:	dc.b 6
0000FB2D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB32 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB37 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB3C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB41 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB46 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB4B 06                         byte_F3DD:	dc.b 6
0000FB4C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB51 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB56 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB5B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB60 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB65 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB6A 10                         byte_F3FC:	dc.b $10
0000FB6B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB70 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB75 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB7A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB7F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB84 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB89 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB8E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB93 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB98 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB9D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FBA2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FBA7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FBAC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FBB1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FBB6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FBBB 10                         byte_F44D:	dc.b $10
0000FBBC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBC1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBC6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBCB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBD0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBD5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBDA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBDF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBE4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBE9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBEE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FBF3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FBF8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FBFD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC02 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC07 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC0C 10                         byte_F49E:	dc.b $10
0000FC0D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC12 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC17 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC1C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC21 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC26 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC2B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC30 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC35 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC3A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC3F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC44 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC49 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC4E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FC53 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FC58 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FC5D 06                         byte_F4EF:	dc.b 6
0000FC5E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FC63 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FC68 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FC6D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FC72 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FC77 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FC7C 06                         byte_F50E:	dc.b 6
0000FC7D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FC82 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FC87 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FC8C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FC91 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FC96 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FC9B 00                         byte_F52D:	dc.b 0
0000FC9C                            		even
0000FC9C                            		even
0000FC9C                            
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            Map_obj4E:
0000FC9C                            	include "_maps\obj4E.asm"
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C 0000                       		dc.w byte_F538-Map_obj4E
0000FC9E 0000                       		dc.w byte_F566-Map_obj4E
0000FCA0 0000                       		dc.w byte_F594-Map_obj4E
0000FCA2 0000                       		dc.w byte_F5C2-Map_obj4E
0000FCA4 0000                       		dc.w byte_F5F0-Map_obj4E
0000FCA6 09                         byte_F538:	dc.b 9
0000FCA7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FCAC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCB1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCB6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCBB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCC0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCC5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCCA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCCF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCD4 09                         byte_F566:	dc.b 9
0000FCD5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCDA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FCDF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCE4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCE9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCEE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCF3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCF8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCFD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD02 09                         byte_F594:	dc.b 9
0000FD03 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD08 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD0D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD12 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD17 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD1C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD21 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD26 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD2B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD30 09                         byte_F5C2:	dc.b 9
0000FD31 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD36 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD3B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD40 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD45 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD4A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD4F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD54 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD59 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD5E 08                         byte_F5F0:	dc.b 8
0000FD5F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FD64 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD69 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD6E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD73 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD78 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD7D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD82 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD88 00                         		even
0000FD88 00                         		even
0000FD88                            
0000FD88                            ; ===========================================================================
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88                            ; Object 40 - Moto Bug enemy (GHZ)
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88                            
0000FD88                            Obj40:					; XREF: Obj_Index
0000FD88 7000                       		moveq	#0,d0
0000FD8A 1028 0024                  		move.b	$24(a0),d0
0000FD8E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FD92 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FD96                            ; ===========================================================================
0000FD96 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FD98 0000                       		dc.w Obj40_Action-Obj40_Index
0000FD9A 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FD9C 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FD9E                            ; ===========================================================================
0000FD9E                            
0000FD9E                            Obj40_Main:				; XREF: Obj40_Index
0000FD9E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FDA6 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FDAC 117C 0004 0001             		move.b	#4,1(a0)
0000FDB2 117C 0004 0018             		move.b	#4,$18(a0)
0000FDB8 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDBE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FDC2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FDC4 117C 000E 0016             		move.b	#$E,$16(a0)
0000FDCA 117C 0008 0017             		move.b	#8,$17(a0)
0000FDD0 117C 000C 0020             		move.b	#$C,$20(a0)
0000FDD6 6100 DF48                  		bsr.w	ObjectFall
0000FDDA 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDE0 4A41                       		tst.w	d1
0000FDE2 6A00                       		bpl.s	locret_F68A
0000FDE4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDE8 317C 0000 0012             		move.w	#0,$12(a0)
0000FDEE 5428 0024                  		addq.b	#2,$24(a0)
0000FDF2 0868 0000 0022             		bchg	#0,$22(a0)
0000FDF8                            
0000FDF8                            locret_F68A:
0000FDF8 4E75                       		rts	
0000FDFA                            ; ===========================================================================
0000FDFA                            
0000FDFA                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FDFA 5828 0024                  		addq.b	#4,$24(a0)
0000FDFE 6000 0000                  		bra.w	Obj40_Animate
0000FE02                            ; ===========================================================================
0000FE02                            
0000FE02                            Obj40_Action:				; XREF: Obj40_Index
0000FE02 7000                       		moveq	#0,d0
0000FE04 1028 0025                  		move.b	$25(a0),d0
0000FE08 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE0C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE10 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE16 6100 B01A                  		bsr.w	AnimateSprite
0000FE1A                            
0000FE1A                            ; ---------------------------------------------------------------------------
0000FE1A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE1A                            ; ---------------------------------------------------------------------------
0000FE1A                            
0000FE1A                            MarkObjGone:
0000FE1A 3028 0008                  		move.w	8(a0),d0
0000FE1E 0240 FF80                  		andi.w	#$FF80,d0
0000FE22 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE26 0441 0080                  		subi.w	#$80,d1
0000FE2A 0241 FF80                  		andi.w	#$FF80,d1
0000FE2E 9041                       		sub.w	d1,d0
0000FE30 0C40 0280                  		cmpi.w	#$280,d0
0000FE34 6200 0000                  		bhi.w	Mark_ChkGone
0000FE38 6000 DF38                  		bra.w	DisplaySprite
0000FE3C                            ; ===========================================================================
0000FE3C                            
0000FE3C                            Mark_ChkGone:
0000FE3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE40 7000                       		moveq	#0,d0
0000FE42 1028 0023                  		move.b	$23(a0),d0
0000FE46 6700                       		beq.s	Mark_Delete
0000FE48 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE4E                            
0000FE4E                            Mark_Delete:
0000FE4E 6000 DF5E                  		bra.w	DeleteObject
0000FE52                            
0000FE52                            ; ===========================================================================
0000FE52 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FE54 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FE56                            ; ===========================================================================
0000FE56                            
0000FE56                            Obj40_Move:				; XREF: Obj40_Index2
0000FE56 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE5A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FE5C 5428 0025                  		addq.b	#2,$25(a0)
0000FE60 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FE66 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE6C 0868 0000 0022             		bchg	#0,$22(a0)
0000FE72 6600                       		bne.s	locret_F70A
0000FE74 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE78                            
0000FE78                            locret_F70A:
0000FE78 4E75                       		rts	
0000FE7A                            ; ===========================================================================
0000FE7A                            
0000FE7A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FE7A 6100 DED0                  		bsr.w	SpeedToPos
0000FE7E 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE84 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE88 6D00                       		blt.s	Obj40_Pause
0000FE8A 0C41 000C                  		cmpi.w	#$C,d1
0000FE8E 6C00                       		bge.s	Obj40_Pause
0000FE90 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE94 5328 0033                  		subq.b	#1,$33(a0)
0000FE98 6A00                       		bpl.s	locret_F756
0000FE9A 117C 000F 0033             		move.b	#$F,$33(a0)
0000FEA0 6100 E356                  		bsr.w	SingleObjLoad
0000FEA4 6600                       		bne.s	locret_F756
0000FEA6 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FEAA 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEB6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FEBC 137C 0002 001C             		move.b	#2,$1C(a1)
0000FEC2                            
0000FEC2                            locret_F756:
0000FEC2 4E75                       		rts	
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FEC4 5528 0025                  		subq.b	#2,$25(a0)
0000FEC8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FECE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FED4 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEDA 4E75                       		rts	
0000FEDC                            ; ===========================================================================
0000FEDC                            
0000FEDC                            Obj40_Animate:				; XREF: Obj40_Index
0000FEDC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEE2 6100 AF4E                  		bsr.w	AnimateSprite
0000FEE6 6000 DE8A                  		bra.w	DisplaySprite
0000FEEA                            ; ===========================================================================
0000FEEA                            
0000FEEA                            Obj40_Delete:				; XREF: Obj40_Index
0000FEEA 6000 DEC2                  		bra.w	DeleteObject
0000FEEE                            ; ===========================================================================
0000FEEE                            Ani_obj40:
0000FEEE                            	include "_anim\obj40.asm"
0000FEEE                            ; ---------------------------------------------------------------------------
0000FEEE                            ; Animation script - Motobug enemy
0000FEEE                            ; ---------------------------------------------------------------------------
0000FEEE 0000                       		dc.w byte_F788-Ani_obj40
0000FEF0 0000                       		dc.w byte_F78C-Ani_obj40
0000FEF2 0000                       		dc.w byte_F792-Ani_obj40
0000FEF4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FEF8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FEFE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF0C                            		even
0000FF0C                            		even
0000FF0C                            
0000FF0C                            ; ---------------------------------------------------------------------------
0000FF0C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF0C                            ; ---------------------------------------------------------------------------
0000FF0C                            Map_obj40:
0000FF0C                            	include "_maps\obj40.asm"
0000FF0C                            Map_cedc:
0000FF0C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FF0E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FF10 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FF12 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FF14 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FF16 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FF18 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FF1A 04                         Map_cedc_E: 	dc.b $4
0000FF1B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF20 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FF25 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF2A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FF2F 04                         Map_cedc_23: 	dc.b $4
0000FF30 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FF35 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FF3A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FF3F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FF44 05                         Map_cedc_38: 	dc.b $5
0000FF45 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF4A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FF4F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF54 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FF59 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FF5E 01                         Map_cedc_52: 	dc.b $1
0000FF5F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FF64 01                         Map_cedc_58: 	dc.b $1
0000FF65 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FF6A 01                         Map_cedc_5E: 	dc.b $1
0000FF6B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FF70 00                         Map_cedc_64: 	dc.b $0
0000FF72 00                         	even
0000FF72 00                         	even
0000FF72                            
0000FF72                            ; ===========================================================================
0000FF72                            ; ---------------------------------------------------------------------------
0000FF72                            ; Object 4F - blank
0000FF72                            ; ---------------------------------------------------------------------------
0000FF72                            
0000FF72                            Obj4F:					; XREF: Obj_Index
0000FF72 4E75                       		rts	
0000FF74                            
0000FF74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF74                            
0000FF74                            
0000FF74                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FF74 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FF78 D047                       		add.w	d7,d0
0000FF7A 0240 0003                  		andi.w	#3,d0
0000FF7E 6600                       		bne.s	loc_F836
0000FF80 7600                       		moveq	#0,d3
0000FF82 1628 0019                  		move.b	$19(a0),d3
0000FF86 4A68 0010                  		tst.w	$10(a0)
0000FF8A 6B00                       		bmi.s	loc_F82C
0000FF8C 6100 0000                  		bsr.w	ObjHitWallRight
0000FF90 4A41                       		tst.w	d1
0000FF92 6A00                       		bpl.s	loc_F836
0000FF94                            
0000FF94                            loc_F828:
0000FF94 7001                       		moveq	#1,d0
0000FF96 4E75                       		rts	
0000FF98                            ; ===========================================================================
0000FF98                            
0000FF98                            loc_F82C:
0000FF98 4643                       		not.w	d3
0000FF9A 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF9E 4A41                       		tst.w	d1
0000FFA0 6BF2                       		bmi.s	loc_F828
0000FFA2                            
0000FFA2                            loc_F836:
0000FFA2 7000                       		moveq	#0,d0
0000FFA4 4E75                       		rts	
0000FFA6                            ; End of function Obj50_ChkWall
0000FFA6                            
0000FFA6                            ; ===========================================================================
0000FFA6                            ; ---------------------------------------------------------------------------
0000FFA6                            ; Object 50 - Yadrin enemy (SYZ)
0000FFA6                            ; ---------------------------------------------------------------------------
0000FFA6                            
0000FFA6                            Obj50:					; XREF: Obj_Index
0000FFA6 7000                       		moveq	#0,d0
0000FFA8 1028 0024                  		move.b	$24(a0),d0
0000FFAC 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FFB0 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FFB4                            ; ===========================================================================
0000FFB4 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FFB6 0000                       		dc.w Obj50_Action-Obj50_Index
0000FFB8                            ; ===========================================================================
0000FFB8                            
0000FFB8                            Obj50_Main:				; XREF: Obj50_Index
0000FFB8 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FFC0 317C 247B 0002             		move.w	#$247B,2(a0)
0000FFC6 117C 0004 0001             		move.b	#4,1(a0)
0000FFCC 117C 0004 0018             		move.b	#4,$18(a0)
0000FFD2 117C 0014 0019             		move.b	#$14,$19(a0)
0000FFD8 117C 0011 0016             		move.b	#$11,$16(a0)
0000FFDE 117C 0008 0017             		move.b	#8,$17(a0)
0000FFE4 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FFEA 6100 DD34                  		bsr.w	ObjectFall
0000FFEE 6100 0000                  		bsr.w	ObjHitFloor
0000FFF2 4A41                       		tst.w	d1
0000FFF4 6A00                       		bpl.s	locret_F89E
0000FFF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FFFA 317C 0000 0012             		move.w	#0,$12(a0)
00010000 5428 0024                  		addq.b	#2,$24(a0)
00010004 0868 0000 0022             		bchg	#0,$22(a0)
0001000A                            
0001000A                            locret_F89E:
0001000A 4E75                       		rts	
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            Obj50_Action:				; XREF: Obj50_Index
0001000C 7000                       		moveq	#0,d0
0001000E 1028 0025                  		move.b	$25(a0),d0
00010012 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010016 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001001A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010020 6100 AE10                  		bsr.w	AnimateSprite
00010024 6000 FDF4                  		bra.w	MarkObjGone
00010028                            ; ===========================================================================
00010028 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001002A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001002C                            ; ===========================================================================
0001002C                            
0001002C                            Obj50_Move:				; XREF: Obj50_Index2
0001002C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010030 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010032 5428 0025                  		addq.b	#2,$25(a0)
00010036 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001003C 117C 0001 001C             		move.b	#1,$1C(a0)
00010042 0868 0000 0022             		bchg	#0,$22(a0)
00010048 6600                       		bne.s	locret_F8E2
0001004A 4468 0010                  		neg.w	$10(a0)		; change direction
0001004E                            
0001004E                            locret_F8E2:
0001004E 4E75                       		rts	
00010050                            ; ===========================================================================
00010050                            
00010050                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010050 6100 DCFA                  		bsr.w	SpeedToPos
00010054 6100 0000                  		bsr.w	ObjHitFloor
00010058 0C41 FFF8                  		cmpi.w	#-8,d1
0001005C 6D00                       		blt.s	Obj50_Pause
0001005E 0C41 000C                  		cmpi.w	#$C,d1
00010062 6C00                       		bge.s	Obj50_Pause
00010064 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010068 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001006C 6600                       		bne.s	Obj50_Pause
0001006E 4E75                       		rts	
00010070                            ; ===========================================================================
00010070                            
00010070                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010070 5528 0025                  		subq.b	#2,$25(a0)
00010074 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001007A 317C 0000 0010             		move.w	#0,$10(a0)
00010080 117C 0000 001C             		move.b	#0,$1C(a0)
00010086 4E75                       		rts	
00010088                            ; ===========================================================================
00010088                            Ani_obj50:
00010088                            	include "_anim\obj50.asm"
00010088                            ; ---------------------------------------------------------------------------
00010088                            ; Animation script - Yadrin enemy
00010088                            ; ---------------------------------------------------------------------------
00010088 0000                       		dc.w byte_F920-Ani_obj50
0001008A 0000                       		dc.w byte_F924-Ani_obj50
0001008C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010090 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001009A                            		even
0001009A                            		even
0001009A                            
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            Map_obj50:
0001009A                            	include "_maps\obj50.asm"
0001009A                            Map_ff24:
0001009A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001009C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001009E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000100A0 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000100A2 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000100A4 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000100A6 05                         Map_ff24_C: 	dc.b $5
000100A7 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100AC FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000100B1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100B6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100BB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100C0 05                         Map_ff24_26: 	dc.b $5
000100C1 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000100C6 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000100CB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100D0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100D5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100DA 05                         Map_ff24_40: 	dc.b $5
000100DB F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000100E0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000100E5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100EA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100EF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100F4 05                         Map_ff24_5A: 	dc.b $5
000100F5 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100FA FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000100FF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010104 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010109 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001010E 05                         Map_ff24_74: 	dc.b $5
0001010F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010114 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010119 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001011E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010123 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010128 05                         Map_ff24_8E: 	dc.b $5
00010129 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001012E 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010133 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010138 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001013D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010142                            	even
00010142                            	even
00010142                            
00010142                            ; ---------------------------------------------------------------------------
00010142                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010142                            ;
00010142                            ; variables:
00010142                            ; d1 = width
00010142                            ; d2 = height /	2 (when	jumping)
00010142                            ; d3 = height /	2 (when	walking)
00010142                            ; d4 = x-axis position
00010142                            ; ---------------------------------------------------------------------------
00010142                            
00010142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010142                            
00010142                            
00010142                            SolidObject:
00010142 4A28 0025                  		tst.b	$25(a0)
00010146 6700 0000                  		beq.w	loc_FAC8
0001014A 3401                       		move.w	d1,d2
0001014C D442                       		add.w	d2,d2
0001014E 43F8 D000                  		lea	($FFFFD000).w,a1
00010152 0829 0001 0022             		btst	#1,$22(a1)
00010158 6600                       		bne.s	loc_F9FE
0001015A 3029 0008                  		move.w	8(a1),d0
0001015E 9068 0008                  		sub.w	8(a0),d0
00010162 D041                       		add.w	d1,d0
00010164 6B00                       		bmi.s	loc_F9FE
00010166 B042                       		cmp.w	d2,d0
00010168 6500                       		bcs.s	loc_FA12
0001016A                            
0001016A                            loc_F9FE:
0001016A 08A9 0003 0022             		bclr	#3,$22(a1)
00010170 08A8 0003 0022             		bclr	#3,$22(a0)
00010176 4228 0025                  		clr.b	$25(a0)
0001017A 7800                       		moveq	#0,d4
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            
0001017E                            loc_FA12:
0001017E 3404                       		move.w	d4,d2
00010180                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010180 7800                       		moveq	#0,d4
00010182 4E75                       		rts	
00010184                            ; ===========================================================================
00010184                            
00010184                            SolidObject71:				; XREF: Obj71_Solid
00010184 4A28 0025                  		tst.b	$25(a0)
00010188 6700 0000                  		beq.w	loc_FAD0
0001018C 3401                       		move.w	d1,d2
0001018E D442                       		add.w	d2,d2
00010190 43F8 D000                  		lea	($FFFFD000).w,a1
00010194 0829 0001 0022             		btst	#1,$22(a1)
0001019A 6600                       		bne.s	loc_FA44
0001019C 3029 0008                  		move.w	8(a1),d0
000101A0 9068 0008                  		sub.w	8(a0),d0
000101A4 D041                       		add.w	d1,d0
000101A6 6B00                       		bmi.s	loc_FA44
000101A8 B042                       		cmp.w	d2,d0
000101AA 6500                       		bcs.s	loc_FA58
000101AC                            
000101AC                            loc_FA44:
000101AC 08A9 0003 0022             		bclr	#3,$22(a1)
000101B2 08A8 0003 0022             		bclr	#3,$22(a0)
000101B8 4228 0025                  		clr.b	$25(a0)
000101BC 7800                       		moveq	#0,d4
000101BE 4E75                       		rts	
000101C0                            ; ===========================================================================
000101C0                            
000101C0                            loc_FA58:
000101C0 3404                       		move.w	d4,d2
000101C2                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000101C2 7800                       		moveq	#0,d4
000101C4 4E75                       		rts	
000101C6                            ; ===========================================================================
000101C6                            
000101C6                            SolidObject2F:				; XREF: Obj2F_Solid
000101C6 43F8 D000                  		lea	($FFFFD000).w,a1
000101CA 4A28 0001                  		tst.b	1(a0)
000101CE 6A00 0000                  		bpl.w	loc_FB92
000101D2 3029 0008                  		move.w	8(a1),d0
000101D6 9068 0008                  		sub.w	8(a0),d0
000101DA D041                       		add.w	d1,d0
000101DC 6B00 0000                  		bmi.w	loc_FB92
000101E0 3601                       		move.w	d1,d3
000101E2 D643                       		add.w	d3,d3
000101E4 B043                       		cmp.w	d3,d0
000101E6 6200 0000                  		bhi.w	loc_FB92
000101EA 3A00                       		move.w	d0,d5
000101EC 0828 0000 0001             		btst	#0,1(a0)
000101F2 6700                       		beq.s	loc_FA94
000101F4 4645                       		not.w	d5
000101F6 DA43                       		add.w	d3,d5
000101F8                            
000101F8                            loc_FA94:
000101F8 E24D                       		lsr.w	#1,d5
000101FA 7600                       		moveq	#0,d3
000101FC 1632 5000                  		move.b	(a2,d5.w),d3
00010200 9612                       		sub.b	(a2),d3
00010202 3A28 000C                  		move.w	$C(a0),d5
00010206 9A43                       		sub.w	d3,d5
00010208 1629 0016                  		move.b	$16(a1),d3
0001020C 4883                       		ext.w	d3
0001020E D443                       		add.w	d3,d2
00010210 3629 000C                  		move.w	$C(a1),d3
00010214 9645                       		sub.w	d5,d3
00010216 5843                       		addq.w	#4,d3
00010218 D642                       		add.w	d2,d3
0001021A 6B00 0000                  		bmi.w	loc_FB92
0001021E 3802                       		move.w	d2,d4
00010220 D844                       		add.w	d4,d4
00010222 B644                       		cmp.w	d4,d3
00010224 6400 0000                  		bcc.w	loc_FB92
00010228 6000 0000                  		bra.w	loc_FB0E
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            loc_FAC8:
0001022C 4A28 0001                  		tst.b	1(a0)
00010230 6A00 0000                  		bpl.w	loc_FB92
00010234                            
00010234                            loc_FAD0:
00010234 43F8 D000                  		lea	($FFFFD000).w,a1
00010238 3029 0008                  		move.w	8(a1),d0
0001023C 9068 0008                  		sub.w	8(a0),d0
00010240 D041                       		add.w	d1,d0
00010242 6B00 0000                  		bmi.w	loc_FB92
00010246 3601                       		move.w	d1,d3
00010248 D643                       		add.w	d3,d3
0001024A B043                       		cmp.w	d3,d0
0001024C 6200 0000                  		bhi.w	loc_FB92
00010250 1629 0016                  		move.b	$16(a1),d3
00010254 4883                       		ext.w	d3
00010256 D443                       		add.w	d3,d2
00010258 3629 000C                  		move.w	$C(a1),d3
0001025C 9668 000C                  		sub.w	$C(a0),d3
00010260 5843                       		addq.w	#4,d3
00010262 D642                       		add.w	d2,d3
00010264 6B00 0000                  		bmi.w	loc_FB92
00010268 3802                       		move.w	d2,d4
0001026A D844                       		add.w	d4,d4
0001026C B644                       		cmp.w	d4,d3
0001026E 6400 0000                  		bcc.w	loc_FB92
00010272                            
00010272                            loc_FB0E:
00010272 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010276 6B00 0000                  		bmi.w	loc_FB92
0001027A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010280 6400 0000                  		bcc.w	loc_FB92
00010284 4A78 FE08                  		tst.w	($FFFFFE08).w
00010288 6600 0000                  		bne.w	loc_FBAC
0001028C 3A00                       		move.w	d0,d5
0001028E B240                       		cmp.w	d0,d1
00010290 6400                       		bcc.s	loc_FB36
00010292 D241                       		add.w	d1,d1
00010294 9041                       		sub.w	d1,d0
00010296 3A00                       		move.w	d0,d5
00010298 4445                       		neg.w	d5
0001029A                            
0001029A                            loc_FB36:
0001029A 3203                       		move.w	d3,d1
0001029C B443                       		cmp.w	d3,d2
0001029E 6400                       		bcc.s	loc_FB44
000102A0 5943                       		subq.w	#4,d3
000102A2 9644                       		sub.w	d4,d3
000102A4 3203                       		move.w	d3,d1
000102A6 4441                       		neg.w	d1
000102A8                            
000102A8                            loc_FB44:
000102A8 BA41                       		cmp.w	d1,d5
000102AA 6200 0000                  		bhi.w	loc_FBB0
000102AE 0C41 0004                  		cmpi.w	#4,d1
000102B2 6300                       		bls.s	loc_FB8C
000102B4 4A40                       		tst.w	d0
000102B6 6700                       		beq.s	loc_FB70
000102B8 6B00                       		bmi.s	loc_FB5E
000102BA 4A69 0010                  		tst.w	$10(a1)
000102BE 6B00                       		bmi.s	loc_FB70
000102C0 6000                       		bra.s	loc_FB64
000102C2                            ; ===========================================================================
000102C2                            
000102C2                            loc_FB5E:
000102C2 4A69 0010                  		tst.w	$10(a1)
000102C6 6A00                       		bpl.s	loc_FB70
000102C8                            
000102C8                            loc_FB64:
000102C8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000102CE 337C 0000 0010             		move.w	#0,$10(a1)
000102D4                            
000102D4                            loc_FB70:
000102D4 9169 0008                  		sub.w	d0,8(a1)
000102D8 0829 0001 0022             		btst	#1,$22(a1)
000102DE 6600                       		bne.s	loc_FB8C
000102E0 08E9 0005 0022             		bset	#5,$22(a1)
000102E6 08E8 0005 0022             		bset	#5,$22(a0)
000102EC 7801                       		moveq	#1,d4
000102EE 4E75                       		rts	
000102F0                            ; ===========================================================================
000102F0                            
000102F0                            loc_FB8C:
000102F0 6100                       		bsr.s	loc_FBA0
000102F2 7801                       		moveq	#1,d4
000102F4 4E75                       		rts	
000102F6                            ; ===========================================================================
000102F6                            
000102F6                            loc_FB92:
000102F6 0828 0005 0022             		btst	#5,$22(a0)
000102FC 6700                       		beq.s	loc_FBAC
000102FE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010304                            
00010304                            loc_FBA0:
00010304 08A8 0005 0022             		bclr	#5,$22(a0)
0001030A 08A9 0005 0022             		bclr	#5,$22(a1)
00010310                            
00010310                            loc_FBAC:
00010310 7800                       		moveq	#0,d4
00010312 4E75                       		rts	
00010314                            ; ===========================================================================
00010314                            
00010314                            loc_FBB0:
00010314 4A43                       		tst.w	d3
00010316 6B00                       		bmi.s	loc_FBBC
00010318 0C43 0010                  		cmpi.w	#$10,d3
0001031C 6500                       		bcs.s	loc_FBEE
0001031E 60D6                       		bra.s	loc_FB92
00010320                            ; ===========================================================================
00010320                            
00010320                            loc_FBBC:
00010320 4A69 0012                  		tst.w	$12(a1)
00010324 6700                       		beq.s	loc_FBD6
00010326 6A00                       		bpl.s	loc_FBD2
00010328 4A43                       		tst.w	d3
0001032A 6A00                       		bpl.s	loc_FBD2
0001032C 9769 000C                  		sub.w	d3,$C(a1)
00010330 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010336                            
00010336                            loc_FBD2:
00010336 78FF                       		moveq	#-1,d4
00010338 4E75                       		rts	
0001033A                            ; ===========================================================================
0001033A                            
0001033A                            loc_FBD6:
0001033A 0829 0001 0022             		btst	#1,$22(a1)
00010340 66F4                       		bne.s	loc_FBD2
00010342 2F08                       		move.l	a0,-(sp)
00010344 2049                       		movea.l	a1,a0
00010346 4EB9 0000 0000             		jsr	KillSonic
0001034C 205F                       		movea.l	(sp)+,a0
0001034E 78FF                       		moveq	#-1,d4
00010350 4E75                       		rts	
00010352                            ; ===========================================================================
00010352                            
00010352                            loc_FBEE:
00010352 5943                       		subq.w	#4,d3
00010354 7200                       		moveq	#0,d1
00010356 1228 0019                  		move.b	$19(a0),d1
0001035A 3401                       		move.w	d1,d2
0001035C D442                       		add.w	d2,d2
0001035E D269 0008                  		add.w	8(a1),d1
00010362 9268 0008                  		sub.w	8(a0),d1
00010366 6B00                       		bmi.s	loc_FC28
00010368 B242                       		cmp.w	d2,d1
0001036A 6400                       		bcc.s	loc_FC28
0001036C 4A69 0012                  		tst.w	$12(a1)
00010370 6B00                       		bmi.s	loc_FC28
00010372 9769 000C                  		sub.w	d3,$C(a1)
00010376 5369 000C                  		subq.w	#1,$C(a1)
0001037A 6100                       		bsr.s	sub_FC2C
0001037C 117C 0002 0025             		move.b	#2,$25(a0)
00010382 08E8 0003 0022             		bset	#3,$22(a0)
00010388 78FF                       		moveq	#-1,d4
0001038A 4E75                       		rts	
0001038C                            ; ===========================================================================
0001038C                            
0001038C                            loc_FC28:
0001038C 7800                       		moveq	#0,d4
0001038E 4E75                       		rts	
00010390                            ; End of function SolidObject
00010390                            
00010390                            
00010390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010390                            
00010390                            
00010390                            sub_FC2C:				; XREF: SolidObject
00010390 0829 0003 0022             		btst	#3,$22(a1)
00010396 6700                       		beq.s	loc_FC4E
00010398 7000                       		moveq	#0,d0
0001039A 1029 003D                  		move.b	$3D(a1),d0
0001039E ED48                       		lsl.w	#6,d0
000103A0 0680 00FF D000             		addi.l	#$FFD000,d0
000103A6 2440                       		movea.l	d0,a2
000103A8 08AA 0003 0022             		bclr	#3,$22(a2)
000103AE 422A 0025                  		clr.b	$25(a2)
000103B2                            
000103B2                            loc_FC4E:
000103B2 3008                       		move.w	a0,d0
000103B4 0440 D000                  		subi.w	#-$3000,d0
000103B8 EC48                       		lsr.w	#6,d0
000103BA 0240 007F                  		andi.w	#$7F,d0
000103BE 1340 003D                  		move.b	d0,$3D(a1)
000103C2 137C 0000 0026             		move.b	#0,$26(a1)
000103C8 337C 0000 0012             		move.w	#0,$12(a1)
000103CE 3369 0010 0014             		move.w	$10(a1),$14(a1)
000103D4 0829 0001 0022             		btst	#1,$22(a1)
000103DA 6700                       		beq.s	loc_FC84
000103DC 2F08                       		move.l	a0,-(sp)
000103DE 2049                       		movea.l	a1,a0
000103E0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000103E6 205F                       		movea.l	(sp)+,a0
000103E8                            
000103E8                            loc_FC84:
000103E8 08E9 0003 0022             		bset	#3,$22(a1)
000103EE 08E8 0003 0022             		bset	#3,$22(a0)
000103F4 4E75                       		rts	
000103F6                            ; End of function sub_FC2C
000103F6                            
000103F6                            ; ===========================================================================
000103F6                            ; ---------------------------------------------------------------------------
000103F6                            ; Object 51 - smashable	green block (MZ)
000103F6                            ; ---------------------------------------------------------------------------
000103F6                            
000103F6                            Obj51:					; XREF: Obj_Index
000103F6 7000                       		moveq	#0,d0
000103F8 1028 0024                  		move.b	$24(a0),d0
000103FC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010400 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010404 6000 FA14                  		bra.w	MarkObjGone
00010408                            ; ===========================================================================
00010408 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001040A 0000                       		dc.w Obj51_Solid-Obj51_Index
0001040C 0000                       		dc.w Obj51_Display-Obj51_Index
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            Obj51_Main:				; XREF: Obj51_Index
0001040E 5428 0024                  		addq.b	#2,$24(a0)
00010412 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001041A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010420 117C 0004 0001             		move.b	#4,1(a0)
00010426 117C 0010 0019             		move.b	#$10,$19(a0)
0001042C 117C 0004 0018             		move.b	#4,$18(a0)
00010432 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010438                            
00010438                            Obj51_Solid:				; XREF: Obj51_Index
00010438 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001043E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010444 323C 001B                  		move.w	#$1B,d1
00010448 343C 0010                  		move.w	#$10,d2
0001044C 363C 0011                  		move.w	#$11,d3
00010450 3828 0008                  		move.w	8(a0),d4
00010454 6100 FCEC                  		bsr.w	SolidObject
00010458 0828 0003 0022             		btst	#3,$22(a0)
0001045E 6600                       		bne.s	Obj51_Smash
00010460                            
00010460                            locret_FCFC:
00010460 4E75                       		rts	
00010462                            ; ===========================================================================
00010462                            
00010462                            Obj51_Smash:				; XREF: Obj51_Solid
00010462 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010468 66F6                       		bne.s	locret_FCFC	; if not, branch
0001046A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010470 08E9 0002 0022             		bset	#2,$22(a1)
00010476 137C 000E 0016             		move.b	#$E,$16(a1)
0001047C 137C 0007 0017             		move.b	#7,$17(a1)
00010482 137C 0002 001C             		move.b	#2,$1C(a1)
00010488 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001048E 08E9 0001 0022             		bset	#1,$22(a1)
00010494 08A9 0003 0022             		bclr	#3,$22(a1)
0001049A 137C 0002 0024             		move.b	#2,$24(a1)
000104A0 08A8 0003 0022             		bclr	#3,$22(a0)
000104A6 4228 0025                  		clr.b	$25(a0)
000104AA 117C 0001 001A             		move.b	#1,$1A(a0)
000104B0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000104B6 7203                       		moveq	#3,d1		; set number of	fragments to 4
000104B8 343C 0038                  		move.w	#$38,d2
000104BC 6100 D4A2                  		bsr.w	SmashObject
000104C0 6100 DD36                  		bsr.w	SingleObjLoad
000104C4 6600                       		bne.s	Obj51_Display
000104C6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000104CA 3368 0008 0008             		move.w	8(a0),8(a1)
000104D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000104D6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000104DA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000104DE 0C42 0006                  		cmpi.w	#6,d2
000104E2 6500                       		bcs.s	Obj51_Bonus
000104E4 7406                       		moveq	#6,d2
000104E6                            
000104E6                            Obj51_Bonus:
000104E6 7000                       		moveq	#0,d0
000104E8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000104EC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000104F2 6500                       		bcs.s	loc_FD98	; if not, branch
000104F4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000104F8 740A                       		moveq	#10,d2
000104FA                            
000104FA                            loc_FD98:
000104FA 4EB9 0000 0000             		jsr	AddPoints
00010500 E24A                       		lsr.w	#1,d2
00010502 1342 001A                  		move.b	d2,$1A(a1)
00010506                            
00010506                            Obj51_Display:				; XREF: Obj51_Index
00010506 6100 D844                  		bsr.w	SpeedToPos
0001050A 0668 0038 0012             		addi.w	#$38,$12(a0)
00010510 6100 D860                  		bsr.w	DisplaySprite
00010514 4A28 0001                  		tst.b	1(a0)
00010518 6A00 D894                  		bpl.w	DeleteObject
0001051C 4E75                       		rts	
0001051E                            ; ===========================================================================
0001051E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010522 FF00 FF00                  		dc.w $FF00, $FF00
00010526 0200 FE00                  		dc.w $200, $FE00
0001052A 0100 FF00                  		dc.w $100, $FF00
0001052E                            
0001052E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010536                            ; ---------------------------------------------------------------------------
00010536                            ; Sprite mappings - smashable green block (MZ)
00010536                            ; ---------------------------------------------------------------------------
00010536                            Map_obj51:
00010536                            	include "_maps\obj51.asm"
00010536                            ; ---------------------------------------------------------------------------
00010536                            ; Sprite mappings - smashable green block (MZ)
00010536                            ; ---------------------------------------------------------------------------
00010536 0000                       		dc.w byte_FDD8-Map_obj51
00010538 0000                       		dc.w byte_FDE3-Map_obj51
0001053A 02                         byte_FDD8:	dc.b 2
0001053B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010540 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010545 04                         byte_FDE3:	dc.b 4
00010546 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001054B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010550 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010555 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001055A                            		even
0001055A                            		even
0001055A                            
0001055A                            ; ===========================================================================
0001055A                            ; ---------------------------------------------------------------------------
0001055A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001055A                            ; ---------------------------------------------------------------------------
0001055A                            
0001055A                            Obj52:					; XREF: Obj_Index
0001055A 7000                       		moveq	#0,d0
0001055C 1028 0024                  		move.b	$24(a0),d0
00010560 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010564 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010568                            ; ===========================================================================
00010568 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001056A 0000                       		dc.w Obj52_Platform-Obj52_Index
0001056C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001056E                            
0001056E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010570 2001                       		dc.b $20, 1
00010572 2002                       		dc.b $20, 2
00010574 4003                       		dc.b $40, 3
00010576 3004                       		dc.b $30, 4
00010578                            ; ===========================================================================
00010578                            
00010578                            Obj52_Main:				; XREF: Obj52_Index
00010578 5428 0024                  		addq.b	#2,$24(a0)
0001057C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010584 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001058A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010590 6600                       		bne.s	loc_FE44
00010592 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001059A 317C 43BC 0002             		move.w	#$43BC,2(a0)
000105A0 117C 0007 0016             		move.b	#7,$16(a0)
000105A6                            
000105A6                            loc_FE44:
000105A6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000105AC 6600                       		bne.s	loc_FE60
000105AE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000105B4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000105BA 6700                       		beq.s	loc_FE60	; if yes, branch
000105BC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000105C2                            
000105C2                            loc_FE60:
000105C2 117C 0004 0001             		move.b	#4,1(a0)
000105C8 7000                       		moveq	#0,d0
000105CA 1028 0028                  		move.b	$28(a0),d0
000105CE E648                       		lsr.w	#3,d0
000105D0 0240 001E                  		andi.w	#$1E,d0
000105D4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000105D8 115A 0019                  		move.b	(a2)+,$19(a0)
000105DC 115A 001A                  		move.b	(a2)+,$1A(a0)
000105E0 117C 0004 0018             		move.b	#4,$18(a0)
000105E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000105EC 3168 000C 0032             		move.w	$C(a0),$32(a0)
000105F2 0228 000F 0028             		andi.b	#$F,$28(a0)
000105F8                            
000105F8                            Obj52_Platform:				; XREF: Obj52_Index
000105F8 6100 0000                  		bsr.w	Obj52_Move
000105FC 7200                       		moveq	#0,d1
000105FE 1228 0019                  		move.b	$19(a0),d1
00010602 4EB9 0000 79FC             		jsr	(PlatformObject).l
00010608 6000                       		bra.s	Obj52_ChkDel
0001060A                            ; ===========================================================================
0001060A                            
0001060A                            Obj52_StandOn:				; XREF: Obj52_Index
0001060A 7200                       		moveq	#0,d1
0001060C 1228 0019                  		move.b	$19(a0),d1
00010610 4EB9 0000 7B70             		jsr	(ExitPlatform).l
00010616 3F28 0008                  		move.w	8(a0),-(sp)
0001061A 6100 0000                  		bsr.w	Obj52_Move
0001061E 341F                       		move.w	(sp)+,d2
00010620 4EB9 0000 80DA             		jsr	(MvSonicOnPtfm2).l
00010626                            
00010626                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010626 3028 0030                  		move.w	$30(a0),d0
0001062A 0240 FF80                  		andi.w	#$FF80,d0
0001062E 3238 F700                  		move.w	($FFFFF700).w,d1
00010632 0441 0080                  		subi.w	#$80,d1
00010636 0241 FF80                  		andi.w	#$FF80,d1
0001063A 9041                       		sub.w	d1,d0
0001063C 0C40 0280                  		cmpi.w	#$280,d0
00010640 6200 D76C                  		bhi.w	DeleteObject
00010644 6000 D72C                  		bra.w	DisplaySprite
00010648                            ; ===========================================================================
00010648                            
00010648                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010648 7000                       		moveq	#0,d0
0001064A 1028 0028                  		move.b	$28(a0),d0
0001064E 0240 000F                  		andi.w	#$F,d0
00010652 D040                       		add.w	d0,d0
00010654 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010658 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001065C                            ; ===========================================================================
0001065C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010660 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010664 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010668 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001066C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010670 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010672                            ; ===========================================================================
00010672                            
00010672                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010672 4E75                       		rts	
00010674                            ; ===========================================================================
00010674                            
00010674                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010674 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010678 323C 0060                  		move.w	#$60,d1
0001067C 0828 0000 0022             		btst	#0,$22(a0)
00010682 6700                       		beq.s	loc_FF26
00010684 4440                       		neg.w	d0
00010686 D041                       		add.w	d1,d0
00010688                            
00010688                            loc_FF26:
00010688 3228 0030                  		move.w	$30(a0),d1
0001068C 9240                       		sub.w	d0,d1
0001068E 3141 0008                  		move.w	d1,8(a0)
00010692 4E75                       		rts	
00010694                            ; ===========================================================================
00010694                            
00010694                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010694 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001069A 6600                       		bne.s	Obj52_02_Wait
0001069C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000106A0                            
000106A0                            Obj52_02_Wait:
000106A0 4E75                       		rts	
000106A2                            ; ===========================================================================
000106A2                            
000106A2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000106A2 7600                       		moveq	#0,d3
000106A4 1628 0019                  		move.b	$19(a0),d3
000106A8 6100 0000                  		bsr.w	ObjHitWallRight
000106AC 4A41                       		tst.w	d1		; has the platform hit a wall?
000106AE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000106B0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC                            
000106BC                            Obj52_03_End:
000106BC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000106C0 4E75                       		rts	
000106C2                            ; ===========================================================================
000106C2                            
000106C2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000106C2 7600                       		moveq	#0,d3
000106C4 1628 0019                  		move.b	$19(a0),d3
000106C8 6100 0000                  		bsr.w	ObjHitWallRight
000106CC 4A41                       		tst.w	d1		; has the platform hit a wall?
000106CE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000106D0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000106DA 4E75                       		rts	
000106DC                            ; ===========================================================================
000106DC                            
000106DC                            Obj52_05_End:
000106DC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000106E2 6100 D668                  		bsr.w	SpeedToPos
000106E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000106EC 6100 0000                  		bsr.w	ObjHitFloor
000106F0 4A41                       		tst.w	d1		; has platform hit the floor?
000106F2 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000106F6 D368 000C                  		add.w	d1,$C(a0)
000106FA 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000106FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010702                            
00010702                            locret_FFA0:
00010702 4E75                       		rts	
00010704                            ; ===========================================================================
00010704                            
00010704                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010704 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010708 6700                       		beq.s	Obj52_07_ChkDel
0001070A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001070E                            
0001070E                            Obj52_07_ChkDel:
0001070E 588F                       		addq.l	#4,sp
00010710 3028 0030                  		move.w	$30(a0),d0
00010714 0240 FF80                  		andi.w	#$FF80,d0
00010718 3238 F700                  		move.w	($FFFFF700).w,d1
0001071C 0441 0080                  		subi.w	#$80,d1
00010720 0241 FF80                  		andi.w	#$FF80,d1
00010724 9041                       		sub.w	d1,d0
00010726 0C40 0280                  		cmpi.w	#$280,d0
0001072A 6200 D682                  		bhi.w	DeleteObject
0001072E 4E75                       		rts	
00010730                            ; ===========================================================================
00010730                            
00010730                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010730 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010734 323C 0080                  		move.w	#$80,d1
00010738 0828 0000 0022             		btst	#0,$22(a0)
0001073E 6700                       		beq.s	loc_FFE2
00010740 4440                       		neg.w	d0
00010742 D041                       		add.w	d1,d0
00010744                            
00010744                            loc_FFE2:
00010744 3228 0032                  		move.w	$32(a0),d1
00010748 9240                       		sub.w	d0,d1
0001074A 3141 000C                  		move.w	d1,$C(a0)
0001074E 4E75                       		rts	
00010750                            ; ===========================================================================
00010750                            
00010750                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010750 7600                       		moveq	#0,d3
00010752 1628 0019                  		move.b	$19(a0),d3
00010756 D643                       		add.w	d3,d3
00010758 7208                       		moveq	#8,d1
0001075A 0828 0000 0022             		btst	#0,$22(a0)
00010760 6700                       		beq.s	loc_10004
00010762 4441                       		neg.w	d1
00010764 4443                       		neg.w	d3
00010766                            
00010766                            loc_10004:
00010766 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001076A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001076C 3028 0008                  		move.w	8(a0),d0
00010770 9068 0030                  		sub.w	$30(a0),d0
00010774 B043                       		cmp.w	d3,d0
00010776 6700                       		beq.s	Obj52_0A_Wait
00010778 D368 0008                  		add.w	d1,8(a0)	; move platform
0001077C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010782 4E75                       		rts	
00010784                            ; ===========================================================================
00010784                            
00010784                            Obj52_0A_Wait:
00010784 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010788 6600                       		bne.s	locret_1002E	; if time remains, branch
0001078A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010790                            
00010790                            locret_1002E:
00010790 4E75                       		rts	
00010792                            ; ===========================================================================
00010792                            
00010792                            Obj52_0A_Back:
00010792 3028 0008                  		move.w	8(a0),d0
00010796 9068 0030                  		sub.w	$30(a0),d0
0001079A 6700                       		beq.s	Obj52_0A_Reset
0001079C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000107A0 4E75                       		rts	
000107A2                            ; ===========================================================================
000107A2                            
000107A2                            Obj52_0A_Reset:
000107A2 4268 0036                  		clr.w	$36(a0)
000107A6 5328 0028                  		subq.b	#1,$28(a0)
000107AA 4E75                       		rts	
000107AC                            ; ===========================================================================
000107AC                            ; ---------------------------------------------------------------------------
000107AC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107AC                            ; ---------------------------------------------------------------------------
000107AC                            Map_obj52:
000107AC                            	include "_maps\obj52mz.asm"
000107AC                            ; ---------------------------------------------------------------------------
000107AC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107AC                            ; ---------------------------------------------------------------------------
000107AC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000107B0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000107B4 0000                       		dc.w byte_1008F-Map_obj52
000107B6 01                         byte_10054:	dc.b 1
000107B7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107BC 02                         byte_1005A:	dc.b 2
000107BD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000107C2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000107C7 04                         byte_10065:	dc.b 4
000107C8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000107CD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000107D2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000107D7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000107DC 04                         byte_1007A:	dc.b 4
000107DD F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000107E2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000107E7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000107EC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000107F1 03                         byte_1008F:	dc.b 3
000107F2 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000107F7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107FC F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010802 00                         		even
00010802 00                         		even
00010802                            
00010802                            ; ---------------------------------------------------------------------------
00010802                            ; Sprite mappings - moving block (LZ)
00010802                            ; ---------------------------------------------------------------------------
00010802                            Map_obj52a:
00010802                            	include "_maps\obj52lz.asm"
00010802                            ; ---------------------------------------------------------------------------
00010802                            ; Sprite mappings - moving block (LZ)
00010802                            ; ---------------------------------------------------------------------------
00010802 0000                       		dc.w byte_100A2-Map_obj52a
00010804 01                         byte_100A2:	dc.b 1
00010805 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001080A                            		even
0001080A                            		even
0001080A                            
0001080A                            ; ===========================================================================
0001080A                            ; ---------------------------------------------------------------------------
0001080A                            ; Object 55 - Basaran enemy (MZ)
0001080A                            ; ---------------------------------------------------------------------------
0001080A                            
0001080A                            Obj55:					; XREF: Obj_Index
0001080A 7000                       		moveq	#0,d0
0001080C 1028 0024                  		move.b	$24(a0),d0
00010810 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010814 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010818                            ; ===========================================================================
00010818 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001081A 0000                       		dc.w Obj55_Action-Obj55_Index
0001081C                            ; ===========================================================================
0001081C                            
0001081C                            Obj55_Main:				; XREF: Obj55_Index
0001081C 5428 0024                  		addq.b	#2,$24(a0)
00010820 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010828 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001082E 117C 0004 0001             		move.b	#4,1(a0)
00010834 117C 000C 0016             		move.b	#$C,$16(a0)
0001083A 117C 0002 0018             		move.b	#2,$18(a0)
00010840 117C 000B 0020             		move.b	#$B,$20(a0)
00010846 117C 0010 0019             		move.b	#$10,$19(a0)
0001084C                            
0001084C                            Obj55_Action:				; XREF: Obj55_Index
0001084C 7000                       		moveq	#0,d0
0001084E 1028 0025                  		move.b	$25(a0),d0
00010852 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010856 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001085A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010860 6100 A5D0                  		bsr.w	AnimateSprite
00010864 6000 F5B4                  		bra.w	MarkObjGone
00010868                            ; ===========================================================================
00010868 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001086A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001086C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001086E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010870                            ; ===========================================================================
00010870                            
00010870                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010870 343C 0080                  		move.w	#$80,d2
00010874 6100 0000                  		bsr.w	Obj55_ChkSonic
00010878 6400                       		bcc.s	Obj55_NoDrop
0001087A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001087E 3140 0036                  		move.w	d0,$36(a0)
00010882 9068 000C                  		sub.w	$C(a0),d0
00010886 6500                       		bcs.s	Obj55_NoDrop
00010888 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001088C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001088E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010892 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010894 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010898 D007                       		add.b	d7,d0
0001089A 0200 0007                  		andi.b	#7,d0
0001089E 6600                       		bne.s	Obj55_NoDrop
000108A0 117C 0001 001C             		move.b	#1,$1C(a0)
000108A6 5428 0025                  		addq.b	#2,$25(a0)
000108AA                            
000108AA                            Obj55_NoDrop:
000108AA 4E75                       		rts	
000108AC                            ; ===========================================================================
000108AC                            
000108AC                            Obj55_DropFly:				; XREF: Obj55_Index2
000108AC 6100 D49E                  		bsr.w	SpeedToPos
000108B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000108B6 343C 0080                  		move.w	#$80,d2
000108BA 6100 0000                  		bsr.w	Obj55_ChkSonic
000108BE 3028 0036                  		move.w	$36(a0),d0
000108C2 9068 000C                  		sub.w	$C(a0),d0
000108C6 6500                       		bcs.s	Obj55_ChkDel
000108C8 0C40 0010                  		cmpi.w	#$10,d0
000108CC 6400                       		bcc.s	locret_10180
000108CE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000108D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000108D8 117C 0002 001C             		move.b	#2,$1C(a0)
000108DE 5428 0025                  		addq.b	#2,$25(a0)
000108E2                            
000108E2                            locret_10180:
000108E2 4E75                       		rts	
000108E4                            ; ===========================================================================
000108E4                            
000108E4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000108E4 4A28 0001                  		tst.b	1(a0)
000108E8 6A00 D4C4                  		bpl.w	DeleteObject
000108EC 4E75                       		rts	
000108EE                            ; ===========================================================================
000108EE                            
000108EE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000108EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108F2 0200 000F                  		andi.b	#$F,d0
000108F6 6600                       		bne.s	loc_101A0
000108F8 303C 00C0                  		move.w	#$C0,d0
000108FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010902                            
00010902                            loc_101A0:
00010902 6100 D448                  		bsr.w	SpeedToPos
00010906 3038 D008                  		move.w	($FFFFD008).w,d0
0001090A 9068 0008                  		sub.w	8(a0),d0
0001090E 6400                       		bcc.s	loc_101B0
00010910 4440                       		neg.w	d0
00010912                            
00010912                            loc_101B0:
00010912 0C40 0080                  		cmpi.w	#$80,d0
00010916 6500                       		bcs.s	locret_101C6
00010918 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001091C D007                       		add.b	d7,d0
0001091E 0200 0007                  		andi.b	#7,d0
00010922 6600                       		bne.s	locret_101C6
00010924 5428 0025                  		addq.b	#2,$25(a0)
00010928                            
00010928                            locret_101C6:
00010928 4E75                       		rts	
0001092A                            ; ===========================================================================
0001092A                            
0001092A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001092A 6100 D420                  		bsr.w	SpeedToPos
0001092E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010934 6100 0000                  		bsr.w	ObjHitCeiling
00010938 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001093A 6A00                       		bpl.s	locret_101F4	; if not, branch
0001093C 9368 000C                  		sub.w	d1,$C(a0)
00010940 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010946 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001094A 4268 0012                  		clr.w	$12(a0)
0001094E 4228 001C                  		clr.b	$1C(a0)
00010952 4228 0025                  		clr.b	$25(a0)
00010956                            
00010956                            locret_101F4:
00010956 4E75                       		rts	
00010958                            ; ===========================================================================
00010958                            
00010958                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010958 323C 0100                  		move.w	#$100,d1
0001095C 08E8 0000 0022             		bset	#0,$22(a0)
00010962 3038 D008                  		move.w	($FFFFD008).w,d0
00010966 9068 0008                  		sub.w	8(a0),d0
0001096A 6400                       		bcc.s	loc_10214
0001096C 4440                       		neg.w	d0
0001096E 4441                       		neg.w	d1
00010970 08A8 0000 0022             		bclr	#0,$22(a0)
00010976                            
00010976                            loc_10214:
00010976 B042                       		cmp.w	d2,d0
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A 6100 D3D0                  		bsr.w	SpeedToPos
0001097E 6100 D3F2                  		bsr.w	DisplaySprite
00010982 4A28 0001                  		tst.b	1(a0)
00010986 6A00 D426                  		bpl.w	DeleteObject
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            Ani_obj55:
0001098C                            	include "_anim\obj55.asm"
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            ; Animation script - Basaran enemy
0001098C                            ; ---------------------------------------------------------------------------
0001098C 0000                       		dc.w byte_10230-Ani_obj55
0001098E 0000                       		dc.w byte_10234-Ani_obj55
00010990 0000                       		dc.w byte_10238-Ani_obj55
00010992 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010996 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001099A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000109A0                            		even
000109A0                            		even
000109A0                            
000109A0                            ; ---------------------------------------------------------------------------
000109A0                            ; Sprite mappings - Basaran enemy (MZ)
000109A0                            ; ---------------------------------------------------------------------------
000109A0                            Map_obj55:
000109A0                            	include "_maps\obj55.asm"
000109A0                            ; ---------------------------------------------------------------------------
000109A0                            ; Sprite mappings - Basaran enemy (MZ)
000109A0                            ; ---------------------------------------------------------------------------
000109A0 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000109A4 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000109A8 01                         byte_10246:	dc.b 1
000109A9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000109AE 03                         byte_1024C:	dc.b 3
000109AF F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000109B4 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000109B9 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000109BE 04                         byte_1025C:	dc.b 4
000109BF F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000109C4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000109C9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000109CE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000109D3 04                         byte_10271:	dc.b 4
000109D4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000109D9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000109DE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000109E3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000109E8                            		even
000109E8                            		even
000109E8                            
000109E8                            ; ===========================================================================
000109E8                            ; ---------------------------------------------------------------------------
000109E8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000109E8                            ; ---------------------------------------------------------------------------
000109E8                            
000109E8                            Obj56:					; XREF: Obj_Index
000109E8 7000                       		moveq	#0,d0
000109EA 1028 0024                  		move.b	$24(a0),d0
000109EE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000109F2 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000109F6                            ; ===========================================================================
000109F6 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000109F8 0000                       		dc.w Obj56_Action-Obj56_Index
000109FA                            
000109FA 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000109FC 2020                       		dc.b  $20, $20
000109FE 1020                       		dc.b  $10, $20
00010A00 201A                       		dc.b  $20, $1A
00010A02 1027                       		dc.b  $10, $27
00010A04 1010                       		dc.b  $10, $10
00010A06 0820                       		dc.b	8, $20
00010A08 4010                       		dc.b  $40, $10
00010A0A                            ; ===========================================================================
00010A0A                            
00010A0A                            Obj56_Main:				; XREF: Obj56_Index
00010A0A 5428 0024                  		addq.b	#2,$24(a0)
00010A0E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A16 317C 4000 0002             		move.w	#$4000,2(a0)
00010A1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A22 6600                       		bne.s	loc_102C8
00010A24 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A2A                            
00010A2A                            loc_102C8:
00010A2A 117C 0004 0001             		move.b	#4,1(a0)
00010A30 117C 0003 0018             		move.b	#3,$18(a0)
00010A36 7000                       		moveq	#0,d0
00010A38 1028 0028                  		move.b	$28(a0),d0
00010A3C E648                       		lsr.w	#3,d0
00010A3E 0240 000E                  		andi.w	#$E,d0
00010A42 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A46 115A 0019                  		move.b	(a2)+,$19(a0)
00010A4A 1152 0016                  		move.b	(a2),$16(a0)
00010A4E E248                       		lsr.w	#1,d0
00010A50 1140 001A                  		move.b	d0,$1A(a0)
00010A54 3168 0008 0034             		move.w	8(a0),$34(a0)
00010A5A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A60 7000                       		moveq	#0,d0
00010A62 1012                       		move.b	(a2),d0
00010A64 D040                       		add.w	d0,d0
00010A66 3140 003A                  		move.w	d0,$3A(a0)
00010A6A 7000                       		moveq	#0,d0
00010A6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A72 6700                       		beq.s	loc_10332
00010A74 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010A78 0240 000F                  		andi.w	#$F,d0
00010A7C 5140                       		subq.w	#8,d0
00010A7E 6500                       		bcs.s	loc_10332
00010A80 E548                       		lsl.w	#2,d0
00010A82 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010A86 45F2 0000                  		lea	(a2,d0.w),a2
00010A8A 4A52                       		tst.w	(a2)
00010A8C 6A00                       		bpl.s	loc_10332
00010A8E 0868 0000 0022             		bchg	#0,$22(a0)
00010A94                            
00010A94                            loc_10332:
00010A94 1028 0028                  		move.b	$28(a0),d0
00010A98 6A00                       		bpl.s	Obj56_Action
00010A9A 0200 000F                  		andi.b	#$F,d0
00010A9E 1140 003C                  		move.b	d0,$3C(a0)
00010AA2 117C 0005 0028             		move.b	#5,$28(a0)
00010AA8 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010AAE 6600                       		bne.s	Obj56_ChkGone
00010AB0 117C 000C 0028             		move.b	#$C,$28(a0)
00010AB6 317C 0080 003A             		move.w	#$80,$3A(a0)
00010ABC                            
00010ABC                            Obj56_ChkGone:
00010ABC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AC0 7000                       		moveq	#0,d0
00010AC2 1028 0023                  		move.b	$23(a0),d0
00010AC6 6700                       		beq.s	Obj56_Action
00010AC8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010ACE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010AD4 6700                       		beq.s	Obj56_Action
00010AD6 5228 0028                  		addq.b	#1,$28(a0)
00010ADA 4268 003A                  		clr.w	$3A(a0)
00010ADE                            
00010ADE                            Obj56_Action:				; XREF: Obj56_Index
00010ADE 3F28 0008                  		move.w	8(a0),-(sp)
00010AE2 7000                       		moveq	#0,d0
00010AE4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010AE8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010AEC D040                       		add.w	d0,d0
00010AEE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010AF2 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010AF6 381F                       		move.w	(sp)+,d4
00010AF8 4A28 0001                  		tst.b	1(a0)
00010AFC 6A00                       		bpl.s	Obj56_ChkDel
00010AFE 7200                       		moveq	#0,d1
00010B00 1228 0019                  		move.b	$19(a0),d1
00010B04 0641 000B                  		addi.w	#$B,d1
00010B08 7400                       		moveq	#0,d2
00010B0A 1428 0016                  		move.b	$16(a0),d2
00010B0E 3602                       		move.w	d2,d3
00010B10 5243                       		addq.w	#1,d3
00010B12 6100 F62E                  		bsr.w	SolidObject
00010B16                            
00010B16                            Obj56_ChkDel:
00010B16 3028 0034                  		move.w	$34(a0),d0
00010B1A 0240 FF80                  		andi.w	#$FF80,d0
00010B1E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B22 0441 0080                  		subi.w	#$80,d1
00010B26 0241 FF80                  		andi.w	#$FF80,d1
00010B2A 9041                       		sub.w	d1,d0
00010B2C 0C40 0280                  		cmpi.w	#$280,d0
00010B30 6200 D27C                  		bhi.w	DeleteObject
00010B34 6000 D23C                  		bra.w	DisplaySprite
00010B38                            ; ===========================================================================
00010B38 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B3C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B40 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B44 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B48 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010B4C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010B50 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010B54                            ; ===========================================================================
00010B54                            
00010B54                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010B54 4E75                       		rts	
00010B56                            ; ===========================================================================
00010B56                            
00010B56                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010B56 323C 0040                  		move.w	#$40,d1
00010B5A 7000                       		moveq	#0,d0
00010B5C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B60 6000                       		bra.s	Obj56_Move_LR
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010B62 323C 0080                  		move.w	#$80,d1
00010B66 7000                       		moveq	#0,d0
00010B68 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B6C                            
00010B6C                            Obj56_Move_LR:
00010B6C 0828 0000 0022             		btst	#0,$22(a0)
00010B72 6700                       		beq.s	loc_10416
00010B74 4440                       		neg.w	d0
00010B76 D041                       		add.w	d1,d0
00010B78                            
00010B78                            loc_10416:
00010B78 3228 0034                  		move.w	$34(a0),d1
00010B7C 9240                       		sub.w	d0,d1
00010B7E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010B82 4E75                       		rts	
00010B84                            ; ===========================================================================
00010B84                            
00010B84                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010B84 323C 0040                  		move.w	#$40,d1
00010B88 7000                       		moveq	#0,d0
00010B8A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B8E 6000                       		bra.s	Obj56_Move_UD
00010B90                            ; ===========================================================================
00010B90                            
00010B90                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010B90 323C 0080                  		move.w	#$80,d1
00010B94 7000                       		moveq	#0,d0
00010B96 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B9A                            
00010B9A                            Obj56_Move_UD:
00010B9A 0828 0000 0022             		btst	#0,$22(a0)
00010BA0 6700                       		beq.s	loc_10444
00010BA2 4440                       		neg.w	d0
00010BA4 D041                       		add.w	d1,d0
00010BA6                            
00010BA6                            loc_10444:
00010BA6 3228 0030                  		move.w	$30(a0),d1
00010BAA 9240                       		sub.w	d0,d1
00010BAC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010BB0 4E75                       		rts	
00010BB2                            ; ===========================================================================
00010BB2                            
00010BB2                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010BB2 4A28 0038                  		tst.b	$38(a0)
00010BB6 6600                       		bne.s	loc_104A4
00010BB8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BBE 6600                       		bne.s	loc_1047A	; if not, branch
00010BC0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010BC6 6600                       		bne.s	loc_1047A
00010BC8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BCC 3038 D008                  		move.w	($FFFFD008).w,d0
00010BD0 B068 0008                  		cmp.w	8(a0),d0
00010BD4 6400                       		bcc.s	loc_1047A
00010BD6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010BDC                            
00010BDC                            loc_1047A:
00010BDC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BE0 7000                       		moveq	#0,d0
00010BE2 1028 003C                  		move.b	$3C(a0),d0
00010BE6 0832 0000 0000             		btst	#0,(a2,d0.w)
00010BEC 6700                       		beq.s	loc_104AE
00010BEE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BF4 6600                       		bne.s	loc_1049E	; if not, branch
00010BF6 0C00 0003                  		cmpi.b	#3,d0
00010BFA 6600                       		bne.s	loc_1049E
00010BFC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C00                            
00010C00                            loc_1049E:
00010C00 117C 0001 0038             		move.b	#1,$38(a0)
00010C06                            
00010C06                            loc_104A4:
00010C06 4A68 003A                  		tst.w	$3A(a0)
00010C0A 6700                       		beq.s	loc_104C8
00010C0C 5568 003A                  		subq.w	#2,$3A(a0)
00010C10                            
00010C10                            loc_104AE:
00010C10 3028 003A                  		move.w	$3A(a0),d0
00010C14 0828 0000 0022             		btst	#0,$22(a0)
00010C1A 6700                       		beq.s	loc_104BC
00010C1C 4440                       		neg.w	d0
00010C1E                            
00010C1E                            loc_104BC:
00010C1E 3228 0030                  		move.w	$30(a0),d1
00010C22 D240                       		add.w	d0,d1
00010C24 3141 000C                  		move.w	d1,$C(a0)
00010C28 4E75                       		rts	
00010C2A                            ; ===========================================================================
00010C2A                            
00010C2A                            loc_104C8:
00010C2A 5228 0028                  		addq.b	#1,$28(a0)
00010C2E 4228 0038                  		clr.b	$38(a0)
00010C32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C36 7000                       		moveq	#0,d0
00010C38 1028 0023                  		move.b	$23(a0),d0
00010C3C 67D2                       		beq.s	loc_104AE
00010C3E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C44 60CA                       		bra.s	loc_104AE
00010C46                            ; ===========================================================================
00010C46                            
00010C46                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C46 4A28 0038                  		tst.b	$38(a0)
00010C4A 6600                       		bne.s	loc_10500
00010C4C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C50 7000                       		moveq	#0,d0
00010C52 1028 003C                  		move.b	$3C(a0),d0
00010C56 4A32 0000                  		tst.b	(a2,d0.w)
00010C5A 6A00                       		bpl.s	loc_10512
00010C5C 117C 0001 0038             		move.b	#1,$38(a0)
00010C62                            
00010C62                            loc_10500:
00010C62 7000                       		moveq	#0,d0
00010C64 1028 0016                  		move.b	$16(a0),d0
00010C68 D040                       		add.w	d0,d0
00010C6A B068 003A                  		cmp.w	$3A(a0),d0
00010C6E 6700                       		beq.s	loc_1052C
00010C70 5468 003A                  		addq.w	#2,$3A(a0)
00010C74                            
00010C74                            loc_10512:
00010C74 3028 003A                  		move.w	$3A(a0),d0
00010C78 0828 0000 0022             		btst	#0,$22(a0)
00010C7E 6700                       		beq.s	loc_10520
00010C80 4440                       		neg.w	d0
00010C82                            
00010C82                            loc_10520:
00010C82 3228 0030                  		move.w	$30(a0),d1
00010C86 D240                       		add.w	d0,d1
00010C88 3141 000C                  		move.w	d1,$C(a0)
00010C8C 4E75                       		rts	
00010C8E                            ; ===========================================================================
00010C8E                            
00010C8E                            loc_1052C:
00010C8E 5328 0028                  		subq.b	#1,$28(a0)
00010C92 4228 0038                  		clr.b	$38(a0)
00010C96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C9A 7000                       		moveq	#0,d0
00010C9C 1028 0023                  		move.b	$23(a0),d0
00010CA0 67D2                       		beq.s	loc_10512
00010CA2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010CA8 60CA                       		bra.s	loc_10512
00010CAA                            ; ===========================================================================
00010CAA                            
00010CAA                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010CAA 4A28 0038                  		tst.b	$38(a0)
00010CAE 6600                       		bne.s	loc_1055E
00010CB0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010CB4 6700                       		beq.s	locret_10578
00010CB6 117C 0001 0038             		move.b	#1,$38(a0)
00010CBC 4268 003A                  		clr.w	$3A(a0)
00010CC0                            
00010CC0                            loc_1055E:
00010CC0 5268 0008                  		addq.w	#1,8(a0)
00010CC4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CCA 5268 003A                  		addq.w	#1,$3A(a0)
00010CCE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010CD4 6600                       		bne.s	locret_10578
00010CD6 4228 0028                  		clr.b	$28(a0)
00010CDA                            
00010CDA                            locret_10578:
00010CDA 4E75                       		rts	
00010CDC                            ; ===========================================================================
00010CDC                            
00010CDC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010CDC 4A28 0038                  		tst.b	$38(a0)
00010CE0 6600                       		bne.s	loc_10598
00010CE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CE6 7000                       		moveq	#0,d0
00010CE8 1028 003C                  		move.b	$3C(a0),d0
00010CEC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CF2 6700                       		beq.s	loc_105A2
00010CF4 117C 0001 0038             		move.b	#1,$38(a0)
00010CFA                            
00010CFA                            loc_10598:
00010CFA 4A68 003A                  		tst.w	$3A(a0)
00010CFE 6700                       		beq.s	loc_105C0
00010D00 5568 003A                  		subq.w	#2,$3A(a0)
00010D04                            
00010D04                            loc_105A2:
00010D04 3028 003A                  		move.w	$3A(a0),d0
00010D08 0828 0000 0022             		btst	#0,$22(a0)
00010D0E 6700                       		beq.s	loc_105B4
00010D10 4440                       		neg.w	d0
00010D12 0640 0080                  		addi.w	#$80,d0
00010D16                            
00010D16                            loc_105B4:
00010D16 3228 0034                  		move.w	$34(a0),d1
00010D1A D240                       		add.w	d0,d1
00010D1C 3141 0008                  		move.w	d1,8(a0)
00010D20 4E75                       		rts	
00010D22                            ; ===========================================================================
00010D22                            
00010D22                            loc_105C0:
00010D22 5228 0028                  		addq.b	#1,$28(a0)
00010D26 4228 0038                  		clr.b	$38(a0)
00010D2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D2E 7000                       		moveq	#0,d0
00010D30 1028 0023                  		move.b	$23(a0),d0
00010D34 67CE                       		beq.s	loc_105A2
00010D36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D3C 60C6                       		bra.s	loc_105A2
00010D3E                            ; ===========================================================================
00010D3E                            
00010D3E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D3E 4A28 0038                  		tst.b	$38(a0)
00010D42 6600                       		bne.s	loc_105F8
00010D44 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D48 7000                       		moveq	#0,d0
00010D4A 1028 003C                  		move.b	$3C(a0),d0
00010D4E 4A32 0000                  		tst.b	(a2,d0.w)
00010D52 6A00                       		bpl.s	loc_10606
00010D54 117C 0001 0038             		move.b	#1,$38(a0)
00010D5A                            
00010D5A                            loc_105F8:
00010D5A 303C 0080                  		move.w	#$80,d0
00010D5E B068 003A                  		cmp.w	$3A(a0),d0
00010D62 6700                       		beq.s	loc_10624
00010D64 5468 003A                  		addq.w	#2,$3A(a0)
00010D68                            
00010D68                            loc_10606:
00010D68 3028 003A                  		move.w	$3A(a0),d0
00010D6C 0828 0000 0022             		btst	#0,$22(a0)
00010D72 6700                       		beq.s	loc_10618
00010D74 4440                       		neg.w	d0
00010D76 0640 0080                  		addi.w	#$80,d0
00010D7A                            
00010D7A                            loc_10618:
00010D7A 3228 0034                  		move.w	$34(a0),d1
00010D7E D240                       		add.w	d0,d1
00010D80 3141 0008                  		move.w	d1,8(a0)
00010D84 4E75                       		rts	
00010D86                            ; ===========================================================================
00010D86                            
00010D86                            loc_10624:
00010D86 5328 0028                  		subq.b	#1,$28(a0)
00010D8A 4228 0038                  		clr.b	$38(a0)
00010D8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D92 7000                       		moveq	#0,d0
00010D94 1028 0023                  		move.b	$23(a0),d0
00010D98 67CE                       		beq.s	loc_10606
00010D9A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DA0 60C6                       		bra.s	loc_10606
00010DA2                            ; ===========================================================================
00010DA2                            
00010DA2                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010DA2 323C 0010                  		move.w	#$10,d1
00010DA6 7000                       		moveq	#0,d0
00010DA8 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010DAC E248                       		lsr.w	#1,d0
00010DAE 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010DB2 6000                       		bra.s	Obj56_Move_Sqr
00010DB4                            ; ===========================================================================
00010DB4                            
00010DB4                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010DB4 323C 0030                  		move.w	#$30,d1
00010DB8 7000                       		moveq	#0,d0
00010DBA 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010DBE 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010DC2 6000                       		bra.s	Obj56_Move_Sqr
00010DC4                            ; ===========================================================================
00010DC4                            
00010DC4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010DC4 323C 0050                  		move.w	#$50,d1
00010DC8 7000                       		moveq	#0,d0
00010DCA 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010DCE 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010DD2 6000                       		bra.s	Obj56_Move_Sqr
00010DD4                            ; ===========================================================================
00010DD4                            
00010DD4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010DD4 323C 0070                  		move.w	#$70,d1
00010DD8 7000                       		moveq	#0,d0
00010DDA 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010DDE 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010DE2                            
00010DE2                            Obj56_Move_Sqr:
00010DE2 4A43                       		tst.w	d3
00010DE4 6600                       		bne.s	loc_1068E
00010DE6 5228 0022                  		addq.b	#1,$22(a0)
00010DEA 0228 0003 0022             		andi.b	#3,$22(a0)
00010DF0                            
00010DF0                            loc_1068E:
00010DF0 1428 0022                  		move.b	$22(a0),d2
00010DF4 0202 0003                  		andi.b	#3,d2
00010DF8 6600                       		bne.s	loc_106AE
00010DFA 9041                       		sub.w	d1,d0
00010DFC D068 0034                  		add.w	$34(a0),d0
00010E00 3140 0008                  		move.w	d0,8(a0)
00010E04 4441                       		neg.w	d1
00010E06 D268 0030                  		add.w	$30(a0),d1
00010E0A 3141 000C                  		move.w	d1,$C(a0)
00010E0E 4E75                       		rts	
00010E10                            ; ===========================================================================
00010E10                            
00010E10                            loc_106AE:
00010E10 5302                       		subq.b	#1,d2
00010E12 6600                       		bne.s	loc_106CC
00010E14 5341                       		subq.w	#1,d1
00010E16 9041                       		sub.w	d1,d0
00010E18 4440                       		neg.w	d0
00010E1A D068 0030                  		add.w	$30(a0),d0
00010E1E 3140 000C                  		move.w	d0,$C(a0)
00010E22 5241                       		addq.w	#1,d1
00010E24 D268 0034                  		add.w	$34(a0),d1
00010E28 3141 0008                  		move.w	d1,8(a0)
00010E2C 4E75                       		rts	
00010E2E                            ; ===========================================================================
00010E2E                            
00010E2E                            loc_106CC:
00010E2E 5302                       		subq.b	#1,d2
00010E30 6600                       		bne.s	loc_106EA
00010E32 5341                       		subq.w	#1,d1
00010E34 9041                       		sub.w	d1,d0
00010E36 4440                       		neg.w	d0
00010E38 D068 0034                  		add.w	$34(a0),d0
00010E3C 3140 0008                  		move.w	d0,8(a0)
00010E40 5241                       		addq.w	#1,d1
00010E42 D268 0030                  		add.w	$30(a0),d1
00010E46 3141 000C                  		move.w	d1,$C(a0)
00010E4A 4E75                       		rts	
00010E4C                            ; ===========================================================================
00010E4C                            
00010E4C                            loc_106EA:
00010E4C 9041                       		sub.w	d1,d0
00010E4E D068 0030                  		add.w	$30(a0),d0
00010E52 3140 000C                  		move.w	d0,$C(a0)
00010E56 4441                       		neg.w	d1
00010E58 D268 0034                  		add.w	$34(a0),d1
00010E5C 3141 0008                  		move.w	d1,8(a0)
00010E60 4E75                       		rts	
00010E62                            ; ===========================================================================
00010E62                            ; ---------------------------------------------------------------------------
00010E62                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E62                            ; ---------------------------------------------------------------------------
00010E62                            Map_obj56:
00010E62                            	include "_maps\obj56.asm"
00010E62                            ; ---------------------------------------------------------------------------
00010E62                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E62                            ; ---------------------------------------------------------------------------
00010E62 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010E66 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010E6A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010E6E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010E72 01                         byte_10710:	dc.b 1
00010E73 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010E78 04                         byte_10716:	dc.b 4
00010E79 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010E7E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010E83 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010E88 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010E8D 02                         byte_1072B:	dc.b 2
00010E8E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010E93 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010E98 04                         byte_10736:	dc.b 4
00010E99 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010E9E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010EA3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010EA8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010EAD 03                         byte_1074B:	dc.b 3
00010EAE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010EB3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010EB8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010EBD 01                         byte_1075B:	dc.b 1
00010EBE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010EC3 02                         byte_10761:	dc.b 2
00010EC4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010EC9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010ECE 04                         byte_1076C:	dc.b 4
00010ECF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010ED4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010ED9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010EDE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010EE4 00                         		even
00010EE4 00                         		even
00010EE4                            
00010EE4                            ; ===========================================================================
00010EE4                            ; ---------------------------------------------------------------------------
00010EE4                            ; Object 57 - spiked balls (SYZ, LZ)
00010EE4                            ; ---------------------------------------------------------------------------
00010EE4                            
00010EE4                            Obj57:					; XREF: Obj_Index
00010EE4 7000                       		moveq	#0,d0
00010EE6 1028 0024                  		move.b	$24(a0),d0
00010EEA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010EEE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010EF2                            ; ===========================================================================
00010EF2 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010EF4 0000                       		dc.w Obj57_Move-Obj57_Index
00010EF6 0000                       		dc.w Obj57_Display-Obj57_Index
00010EF8                            ; ===========================================================================
00010EF8                            
00010EF8                            Obj57_Main:				; XREF: Obj57_Index
00010EF8 5428 0024                  		addq.b	#2,$24(a0)
00010EFC 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F04 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F0A 117C 0004 0001             		move.b	#4,1(a0)
00010F10 117C 0004 0018             		move.b	#4,$18(a0)
00010F16 117C 0008 0019             		move.b	#8,$19(a0)
00010F1C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F22 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F28 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F2E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F34 6600                       		bne.s	loc_107E8
00010F36 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F3C 317C 0310 0002             		move.w	#$310,2(a0)
00010F42 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010F4A                            
00010F4A                            loc_107E8:
00010F4A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F4E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F52 4881                       		ext.w	d1
00010F54 E741                       		asl.w	#3,d1		; multiply by 8
00010F56 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010F5A 1028 0022                  		move.b	$22(a0),d0
00010F5E E418                       		ror.b	#2,d0
00010F60 0200 00C0                  		andi.b	#-$40,d0
00010F64 1140 0026                  		move.b	d0,$26(a0)
00010F68 45E8 0029                  		lea	$29(a0),a2
00010F6C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F70 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010F74 14FC 0000                  		move.b	#0,(a2)+
00010F78 3601                       		move.w	d1,d3
00010F7A E94B                       		lsl.w	#4,d3
00010F7C 1143 003C                  		move.b	d3,$3C(a0)
00010F80 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010F82 6500                       		bcs.s	loc_10894
00010F84 0828 0003 0028             		btst	#3,$28(a0)
00010F8A 6700                       		beq.s	Obj57_MakeChain
00010F8C 5341                       		subq.w	#1,d1
00010F8E 6500                       		bcs.s	loc_10894
00010F90                            
00010F90                            Obj57_MakeChain:
00010F90 6100 D266                  		bsr.w	SingleObjLoad
00010F94 6600                       		bne.s	loc_10894
00010F96 5228 0029                  		addq.b	#1,$29(a0)
00010F9A 3A09                       		move.w	a1,d5
00010F9C 0445 D000                  		subi.w	#-$3000,d5
00010FA0 EC4D                       		lsr.w	#6,d5
00010FA2 0245 007F                  		andi.w	#$7F,d5
00010FA6 14C5                       		move.b	d5,(a2)+
00010FA8 137C 0004 0024             		move.b	#4,$24(a1)
00010FAE 1290                       		move.b	0(a0),0(a1)
00010FB0 2368 0004 0004             		move.l	4(a0),4(a1)
00010FB6 3368 0002 0002             		move.w	2(a0),2(a1)
00010FBC 1368 0001 0001             		move.b	1(a0),1(a1)
00010FC2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010FC8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010FCE 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010FD4 0403 0010                  		subi.b	#$10,d3
00010FD8 1343 003C                  		move.b	d3,$3C(a1)
00010FDC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010FE2 6600                       		bne.s	loc_10890
00010FE4 4A03                       		tst.b	d3
00010FE6 6600                       		bne.s	loc_10890
00010FE8 137C 0002 001A             		move.b	#2,$1A(a1)
00010FEE                            
00010FEE                            loc_10890:
00010FEE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010FF2                            
00010FF2                            loc_10894:
00010FF2 3A08                       		move.w	a0,d5
00010FF4 0445 D000                  		subi.w	#-$3000,d5
00010FF8 EC4D                       		lsr.w	#6,d5
00010FFA 0245 007F                  		andi.w	#$7F,d5
00010FFE 14C5                       		move.b	d5,(a2)+
00011000 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011006 6600                       		bne.s	Obj57_Move
00011008 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001100E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011014                            
00011014                            Obj57_Move:				; XREF: Obj57_Index
00011014 6100 0000                  		bsr.w	Obj57_MoveSub
00011018 6000 0000                  		bra.w	Obj57_ChkDel
0001101C                            ; ===========================================================================
0001101C                            
0001101C                            Obj57_MoveSub:				; XREF: Obj57_Move
0001101C 3028 003E                  		move.w	$3E(a0),d0
00011020 D168 0026                  		add.w	d0,$26(a0)
00011024 1028 0026                  		move.b	$26(a0),d0
00011028 4EB9 0000 2C64             		jsr	(CalcSine).l
0001102E 3428 0038                  		move.w	$38(a0),d2
00011032 3628 003A                  		move.w	$3A(a0),d3
00011036 45E8 0029                  		lea	$29(a0),a2
0001103A 7C00                       		moveq	#0,d6
0001103C 1C1A                       		move.b	(a2)+,d6
0001103E                            
0001103E                            Obj57_MoveLoop:
0001103E 7800                       		moveq	#0,d4
00011040 181A                       		move.b	(a2)+,d4
00011042 ED4C                       		lsl.w	#6,d4
00011044 0684 00FF D000             		addi.l	#$FFD000,d4
0001104A 2244                       		movea.l	d4,a1
0001104C 7800                       		moveq	#0,d4
0001104E 1829 003C                  		move.b	$3C(a1),d4
00011052 2A04                       		move.l	d4,d5
00011054 C9C0                       		muls.w	d0,d4
00011056 E084                       		asr.l	#8,d4
00011058 CBC1                       		muls.w	d1,d5
0001105A E085                       		asr.l	#8,d5
0001105C D842                       		add.w	d2,d4
0001105E DA43                       		add.w	d3,d5
00011060 3344 000C                  		move.w	d4,$C(a1)
00011064 3345 0008                  		move.w	d5,8(a1)
00011068 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001106C 4E75                       		rts	
0001106E                            ; ===========================================================================
0001106E                            
0001106E                            Obj57_ChkDel:				; XREF: Obj57_Move
0001106E 3028 003A                  		move.w	$3A(a0),d0
00011072 0240 FF80                  		andi.w	#$FF80,d0
00011076 3238 F700                  		move.w	($FFFFF700).w,d1
0001107A 0441 0080                  		subi.w	#$80,d1
0001107E 0241 FF80                  		andi.w	#$FF80,d1
00011082 9041                       		sub.w	d1,d0
00011084 0C40 0280                  		cmpi.w	#$280,d0
00011088 6200 0000                  		bhi.w	Obj57_Delete
0001108C 6000 CCE4                  		bra.w	DisplaySprite
00011090                            ; ===========================================================================
00011090                            
00011090                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011090 7400                       		moveq	#0,d2
00011092 45E8 0029                  		lea	$29(a0),a2
00011096 141A                       		move.b	(a2)+,d2
00011098                            
00011098                            Obj57_DelLoop:
00011098 7000                       		moveq	#0,d0
0001109A 101A                       		move.b	(a2)+,d0
0001109C ED48                       		lsl.w	#6,d0
0001109E 0680 00FF D000             		addi.l	#$FFD000,d0
000110A4 2240                       		movea.l	d0,a1
000110A6 6100 CD08                  		bsr.w	DeleteObject2
000110AA 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000110AE                            
000110AE 4E75                       		rts	
000110B0                            ; ===========================================================================
000110B0                            
000110B0                            Obj57_Display:				; XREF: Obj57_Index
000110B0 6000 CCC0                  		bra.w	DisplaySprite
000110B4                            ; ===========================================================================
000110B4                            ; ---------------------------------------------------------------------------
000110B4                            ; Sprite mappings - chain of spiked balls (SYZ)
000110B4                            ; ---------------------------------------------------------------------------
000110B4                            Map_obj57:
000110B4                            	include "_maps\obj57syz.asm"
000110B4                            ; ---------------------------------------------------------------------------
000110B4                            ; Sprite mappings - chain of spiked balls (SYZ)
000110B4                            ; ---------------------------------------------------------------------------
000110B4 0000                       		dc.w byte_10958-Map_obj57
000110B6 01                         byte_10958:	dc.b 1
000110B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110BC                            		even
000110BC                            		even
000110BC                            
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            Map_obj57a:
000110BC                            	include "_maps\obj57lz.asm"
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110BC                            ; ---------------------------------------------------------------------------
000110BC 0000                       		dc.w byte_10964-Map_obj57a
000110BE 0000                       		dc.w byte_1096A-Map_obj57a
000110C0 0000                       		dc.w byte_10970-Map_obj57a
000110C2 01                         byte_10964:	dc.b 1
000110C3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110C8 01                         byte_1096A:	dc.b 1
000110C9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000110CE 01                         byte_10970:	dc.b 1
000110CF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000110D4                            		even
000110D4                            		even
000110D4                            
000110D4                            ; ===========================================================================
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Object 58 - giant spiked balls (SYZ)
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            
000110D4                            Obj58:					; XREF: Obj_Index
000110D4 7000                       		moveq	#0,d0
000110D6 1028 0024                  		move.b	$24(a0),d0
000110DA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000110DE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000110E2                            ; ===========================================================================
000110E2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000110E4 0000                       		dc.w Obj58_Move-Obj58_Index
000110E6                            ; ===========================================================================
000110E6                            
000110E6                            Obj58_Main:				; XREF: Obj58_Index
000110E6 5428 0024                  		addq.b	#2,$24(a0)
000110EA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000110F2 317C 0396 0002             		move.w	#$396,2(a0)
000110F8 117C 0004 0001             		move.b	#4,1(a0)
000110FE 117C 0004 0018             		move.b	#4,$18(a0)
00011104 117C 0018 0019             		move.b	#$18,$19(a0)
0001110A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011110 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011116 117C 0086 0020             		move.b	#$86,$20(a0)
0001111C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011120 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011124 4881                       		ext.w	d1
00011126 E741                       		asl.w	#3,d1		; multiply by 8
00011128 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001112C 1028 0022                  		move.b	$22(a0),d0
00011130 E418                       		ror.b	#2,d0
00011132 0200 00C0                  		andi.b	#$C0,d0
00011136 1140 0026                  		move.b	d0,$26(a0)
0001113A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011140                            
00011140                            Obj58_Move:				; XREF: Obj58_Index
00011140 7000                       		moveq	#0,d0
00011142 1028 0028                  		move.b	$28(a0),d0	; get object type
00011146 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001114A D040                       		add.w	d0,d0
0001114C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011150 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011154 3028 003A                  		move.w	$3A(a0),d0
00011158 0240 FF80                  		andi.w	#$FF80,d0
0001115C 3238 F700                  		move.w	($FFFFF700).w,d1
00011160 0441 0080                  		subi.w	#$80,d1
00011164 0241 FF80                  		andi.w	#$FF80,d1
00011168 9041                       		sub.w	d1,d0
0001116A 0C40 0280                  		cmpi.w	#$280,d0
0001116E 6200 CC3E                  		bhi.w	DeleteObject
00011172 6000 CBFE                  		bra.w	DisplaySprite
00011176                            ; ===========================================================================
00011176 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011178 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001117A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001117C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001117E 4E75                       		rts	
00011180                            ; ===========================================================================
00011180                            
00011180                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011180 323C 0060                  		move.w	#$60,d1
00011184 7000                       		moveq	#0,d0
00011186 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001118A 0828 0000 0022             		btst	#0,$22(a0)
00011190 6700                       		beq.s	loc_10A38
00011192 4440                       		neg.w	d0
00011194 D041                       		add.w	d1,d0
00011196                            
00011196                            loc_10A38:
00011196 3228 003A                  		move.w	$3A(a0),d1
0001119A 9240                       		sub.w	d0,d1
0001119C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000111A0 4E75                       		rts	
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000111A2 323C 0060                  		move.w	#$60,d1
000111A6 7000                       		moveq	#0,d0
000111A8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111AC 0828 0000 0022             		btst	#0,$22(a0)
000111B2 6700                       		beq.s	loc_10A5C
000111B4 4440                       		neg.w	d0
000111B6 0640 0080                  		addi.w	#$80,d0
000111BA                            
000111BA                            loc_10A5C:
000111BA 3228 0038                  		move.w	$38(a0),d1
000111BE 9240                       		sub.w	d0,d1
000111C0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000111C4 4E75                       		rts	
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000111C6 3028 003E                  		move.w	$3E(a0),d0
000111CA D168 0026                  		add.w	d0,$26(a0)
000111CE 1028 0026                  		move.b	$26(a0),d0
000111D2 4EB9 0000 2C64             		jsr	(CalcSine).l
000111D8 3428 0038                  		move.w	$38(a0),d2
000111DC 3628 003A                  		move.w	$3A(a0),d3
000111E0 7800                       		moveq	#0,d4
000111E2 1828 003C                  		move.b	$3C(a0),d4
000111E6 2A04                       		move.l	d4,d5
000111E8 C9C0                       		muls.w	d0,d4
000111EA E084                       		asr.l	#8,d4
000111EC CBC1                       		muls.w	d1,d5
000111EE E085                       		asr.l	#8,d5
000111F0 D842                       		add.w	d2,d4
000111F2 DA43                       		add.w	d3,d5
000111F4 3144 000C                  		move.w	d4,$C(a0)
000111F8 3145 0008                  		move.w	d5,8(a0)
000111FC 4E75                       		rts	
000111FE                            ; ===========================================================================
000111FE                            ; ---------------------------------------------------------------------------
000111FE                            ; Sprite mappings - SBZ	spiked ball on a chain
000111FE                            ; ---------------------------------------------------------------------------
000111FE                            Map_obj15b:
000111FE                            	include "_maps\obj15sbz.asm"
000111FE                            ; ---------------------------------------------------------------------------
000111FE                            ; Sprite mappings - spiked ball on a chain (SBZ)
000111FE                            ; ---------------------------------------------------------------------------
000111FE 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011202 0000                       		dc.w byte_10AC6-Map_obj15b
00011204 05                         byte_10AA6:	dc.b 5
00011205 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001120A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001120F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011214 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011219 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001121E 01                         byte_10AC0:	dc.b 1
0001121F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011224 02                         byte_10AC6:	dc.b 2
00011225 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001122A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011230 00                         		even
00011230 00                         		even
00011230                            
00011230                            ; ===========================================================================
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011230                            ; ---------------------------------------------------------------------------
00011230                            
00011230                            Obj59:					; XREF: Obj_Index
00011230 7000                       		moveq	#0,d0
00011232 1028 0024                  		move.b	$24(a0),d0
00011236 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001123A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001123E 3028 0032                  		move.w	$32(a0),d0
00011242 0240 FF80                  		andi.w	#$FF80,d0
00011246 3238 F700                  		move.w	($FFFFF700).w,d1
0001124A 0441 0080                  		subi.w	#$80,d1
0001124E 0241 FF80                  		andi.w	#$FF80,d1
00011252 9041                       		sub.w	d1,d0
00011254 0C40 0280                  		cmpi.w	#$280,d0
00011258 6200 CB54                  		bhi.w	DeleteObject
0001125C 6000 CB14                  		bra.w	DisplaySprite
00011260                            ; ===========================================================================
00011260 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011262 0000                       		dc.w Obj59_Platform-Obj59_Index
00011264 0000                       		dc.w Obj59_Action-Obj59_Index
00011266 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011268                            
00011268 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001126A                            
0001126A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001126C 2001                       		dc.b $20, 1
0001126E 3401                       		dc.b $34, 1
00011270 1003                       		dc.b $10, 3
00011272 2003                       		dc.b $20, 3
00011274 3403                       		dc.b $34, 3
00011276 1401                       		dc.b $14, 1
00011278 2401                       		dc.b $24, 1
0001127A 2C01                       		dc.b $2C, 1
0001127C 1403                       		dc.b $14, 3
0001127E 2403                       		dc.b $24, 3
00011280 2C03                       		dc.b $2C, 3
00011282 2005                       		dc.b $20, 5
00011284 2007                       		dc.b $20, 7
00011286 3009                       		dc.b $30, 9
00011288                            ; ===========================================================================
00011288                            
00011288                            Obj59_Main:				; XREF: Obj59_Index
00011288 5428 0024                  		addq.b	#2,$24(a0)
0001128C 7000                       		moveq	#0,d0
0001128E 1028 0028                  		move.b	$28(a0),d0
00011292 6A00                       		bpl.s	Obj59_Main2
00011294 5828 0024                  		addq.b	#4,$24(a0)
00011298 0240 007F                  		andi.w	#$7F,d0
0001129C C0FC 0006                  		mulu.w	#6,d0
000112A0 3140 003C                  		move.w	d0,$3C(a0)
000112A4 3140 003E                  		move.w	d0,$3E(a0)
000112A8 588F                       		addq.l	#4,sp
000112AA 4E75                       		rts	
000112AC                            ; ===========================================================================
000112AC                            
000112AC                            Obj59_Main2:
000112AC E648                       		lsr.w	#3,d0
000112AE 0240 001E                  		andi.w	#$1E,d0
000112B2 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000112B6 115A 0019                  		move.b	(a2)+,$19(a0)
000112BA 115A 001A                  		move.b	(a2)+,$1A(a0)
000112BE 7000                       		moveq	#0,d0
000112C0 1028 0028                  		move.b	$28(a0),d0
000112C4 D040                       		add.w	d0,d0
000112C6 0240 001E                  		andi.w	#$1E,d0
000112CA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000112CE 101A                       		move.b	(a2)+,d0
000112D0 E548                       		lsl.w	#2,d0
000112D2 3140 003C                  		move.w	d0,$3C(a0)
000112D6 115A 0028                  		move.b	(a2)+,$28(a0)
000112DA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000112E2 317C 4000 0002             		move.w	#$4000,2(a0)
000112E8 117C 0004 0001             		move.b	#4,1(a0)
000112EE 117C 0004 0018             		move.b	#4,$18(a0)
000112F4 3168 0008 0032             		move.w	8(a0),$32(a0)
000112FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011300                            
00011300                            Obj59_Platform:				; XREF: Obj59_Index
00011300 7200                       		moveq	#0,d1
00011302 1228 0019                  		move.b	$19(a0),d1
00011306 4EB9 0000 79FC             		jsr	(PlatformObject).l
0001130C 6000 0000                  		bra.w	Obj59_Types
00011310                            ; ===========================================================================
00011310                            
00011310                            Obj59_Action:				; XREF: Obj59_Index
00011310 7200                       		moveq	#0,d1
00011312 1228 0019                  		move.b	$19(a0),d1
00011316 4EB9 0000 7B70             		jsr	(ExitPlatform).l
0001131C 3F28 0008                  		move.w	8(a0),-(sp)
00011320 6100 0000                  		bsr.w	Obj59_Types
00011324 341F                       		move.w	(sp)+,d2
00011326 4A10                       		tst.b	0(a0)
00011328 6700                       		beq.s	locret_10BD4
0001132A 4EF9 0000 80DA             		jmp	(MvSonicOnPtfm2).l
00011330                            ; ===========================================================================
00011330                            
00011330                            locret_10BD4:
00011330 4E75                       		rts	
00011332                            ; ===========================================================================
00011332                            
00011332                            Obj59_Types:
00011332 7000                       		moveq	#0,d0
00011334 1028 0028                  		move.b	$28(a0),d0
00011338 0240 000F                  		andi.w	#$F,d0
0001133C D040                       		add.w	d0,d0
0001133E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011342 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011346                            ; ===========================================================================
00011346 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001134A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001134E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011352 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011356 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001135A                            ; ===========================================================================
0001135A                            
0001135A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001135A 4E75                       		rts	
0001135C                            ; ===========================================================================
0001135C                            
0001135C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001135C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011362 6600                       		bne.s	locret_10C0C
00011364 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011368                            
00011368                            locret_10C0C:
00011368 4E75                       		rts	
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001136A 6100 0000                  		bsr.w	Obj59_Move
0001136E 3028 0034                  		move.w	$34(a0),d0
00011372 4440                       		neg.w	d0
00011374 D068 0030                  		add.w	$30(a0),d0
00011378 3140 000C                  		move.w	d0,$C(a0)
0001137C 4E75                       		rts	
0001137E                            ; ===========================================================================
0001137E                            
0001137E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001137E 6100 0000                  		bsr.w	Obj59_Move
00011382 3028 0034                  		move.w	$34(a0),d0
00011386 D068 0030                  		add.w	$30(a0),d0
0001138A 3140 000C                  		move.w	d0,$C(a0)
0001138E 4E75                       		rts	
00011390                            ; ===========================================================================
00011390                            
00011390                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011390 6100 0000                  		bsr.w	Obj59_Move
00011394 3028 0034                  		move.w	$34(a0),d0
00011398 E240                       		asr.w	#1,d0
0001139A 4440                       		neg.w	d0
0001139C D068 0030                  		add.w	$30(a0),d0
000113A0 3140 000C                  		move.w	d0,$C(a0)
000113A4 3028 0034                  		move.w	$34(a0),d0
000113A8 D068 0032                  		add.w	$32(a0),d0
000113AC 3140 0008                  		move.w	d0,8(a0)
000113B0 4E75                       		rts	
000113B2                            ; ===========================================================================
000113B2                            
000113B2                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000113B2 6100 0000                  		bsr.w	Obj59_Move
000113B6 3028 0034                  		move.w	$34(a0),d0
000113BA E240                       		asr.w	#1,d0
000113BC D068 0030                  		add.w	$30(a0),d0
000113C0 3140 000C                  		move.w	d0,$C(a0)
000113C4 3028 0034                  		move.w	$34(a0),d0
000113C8 4440                       		neg.w	d0
000113CA D068 0032                  		add.w	$32(a0),d0
000113CE 3140 0008                  		move.w	d0,8(a0)
000113D2 4E75                       		rts	
000113D4                            ; ===========================================================================
000113D4                            
000113D4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000113D4 6100 0000                  		bsr.w	Obj59_Move
000113D8 3028 0034                  		move.w	$34(a0),d0
000113DC 4440                       		neg.w	d0
000113DE D068 0030                  		add.w	$30(a0),d0
000113E2 3140 000C                  		move.w	d0,$C(a0)
000113E6 4A28 0028                  		tst.b	$28(a0)
000113EA 6700 0000                  		beq.w	loc_10C94
000113EE 4E75                       		rts	
000113F0                            ; ===========================================================================
000113F0                            
000113F0                            loc_10C94:
000113F0 0828 0003 0022             		btst	#3,$22(a0)
000113F6 6700                       		beq.s	Obj59_Delete
000113F8 08E9 0001 0022             		bset	#1,$22(a1)
000113FE 08A9 0003 0022             		bclr	#3,$22(a1)
00011404 137C 0002 0024             		move.b	#2,$24(a1)
0001140A                            
0001140A                            Obj59_Delete:
0001140A 6000 C9A2                  		bra.w	DeleteObject
0001140E                            
0001140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001140E                            
0001140E                            
0001140E                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001140E 3028 0038                  		move.w	$38(a0),d0
00011412 4A28 003A                  		tst.b	$3A(a0)
00011416 6600                       		bne.s	loc_10CC8
00011418 0C40 0800                  		cmpi.w	#$800,d0
0001141C 6400                       		bcc.s	loc_10CD0
0001141E 0640 0010                  		addi.w	#$10,d0
00011422 6000                       		bra.s	loc_10CD0
00011424                            ; ===========================================================================
00011424                            
00011424                            loc_10CC8:
00011424 4A40                       		tst.w	d0
00011426 6700                       		beq.s	loc_10CD0
00011428 0440 0010                  		subi.w	#$10,d0
0001142C                            
0001142C                            loc_10CD0:
0001142C 3140 0038                  		move.w	d0,$38(a0)
00011430 48C0                       		ext.l	d0
00011432 E180                       		asl.l	#8,d0
00011434 D0A8 0034                  		add.l	$34(a0),d0
00011438 2140 0034                  		move.l	d0,$34(a0)
0001143C 4840                       		swap	d0
0001143E 3428 003C                  		move.w	$3C(a0),d2
00011442 B042                       		cmp.w	d2,d0
00011444 6300                       		bls.s	loc_10CF0
00011446 117C 0001 003A             		move.b	#1,$3A(a0)
0001144C                            
0001144C                            loc_10CF0:
0001144C D442                       		add.w	d2,d2
0001144E B042                       		cmp.w	d2,d0
00011450 6600                       		bne.s	locret_10CFA
00011452 4228 0028                  		clr.b	$28(a0)
00011456                            
00011456                            locret_10CFA:
00011456 4E75                       		rts	
00011458                            ; End of function Obj59_Move
00011458                            
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011458 5368 003C                  		subq.w	#1,$3C(a0)
0001145C 6600                       		bne.s	Obj59_ChkDel
0001145E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011464 6100 CD92                  		bsr.w	SingleObjLoad
00011468 6600                       		bne.s	Obj59_ChkDel
0001146A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001146E 3368 0008 0008             		move.w	8(a0),8(a1)
00011474 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001147A 137C 000E 0028             		move.b	#$E,$28(a1)
00011480                            
00011480                            Obj59_ChkDel:
00011480 588F                       		addq.l	#4,sp
00011482 3028 0008                  		move.w	8(a0),d0
00011486 0240 FF80                  		andi.w	#$FF80,d0
0001148A 3238 F700                  		move.w	($FFFFF700).w,d1
0001148E 0441 0080                  		subi.w	#$80,d1
00011492 0241 FF80                  		andi.w	#$FF80,d1
00011496 9041                       		sub.w	d1,d0
00011498 0C40 0280                  		cmpi.w	#$280,d0
0001149C 6200 C910                  		bhi.w	DeleteObject
000114A0 4E75                       		rts	
000114A2                            ; ===========================================================================
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            Map_obj59:
000114A2                            	include "_maps\obj59.asm"
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114A2                            ; ---------------------------------------------------------------------------
000114A2 0000                       		dc.w byte_10D4A-Map_obj59
000114A4 03                         byte_10D4A:	dc.b 3
000114A5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000114AA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000114AF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000114B4                            		even
000114B4                            		even
000114B4                            
000114B4                            ; ===========================================================================
000114B4                            ; ---------------------------------------------------------------------------
000114B4                            ; Object 5A - platforms	moving in circles (SLZ)
000114B4                            ; ---------------------------------------------------------------------------
000114B4                            
000114B4                            Obj5A:					; XREF: Obj_Index
000114B4 7000                       		moveq	#0,d0
000114B6 1028 0024                  		move.b	$24(a0),d0
000114BA 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000114BE 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000114C2 3028 0032                  		move.w	$32(a0),d0
000114C6 0240 FF80                  		andi.w	#$FF80,d0
000114CA 3238 F700                  		move.w	($FFFFF700).w,d1
000114CE 0441 0080                  		subi.w	#$80,d1
000114D2 0241 FF80                  		andi.w	#$FF80,d1
000114D6 9041                       		sub.w	d1,d0
000114D8 0C40 0280                  		cmpi.w	#$280,d0
000114DC 6200 C8D0                  		bhi.w	DeleteObject
000114E0 6000 C890                  		bra.w	DisplaySprite
000114E4                            ; ===========================================================================
000114E4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000114E6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000114E8 0000                       		dc.w Obj5A_Action-Obj5A_Index
000114EA                            ; ===========================================================================
000114EA                            
000114EA                            Obj5A_Main:				; XREF: Obj5A_Index
000114EA 5428 0024                  		addq.b	#2,$24(a0)
000114EE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000114F6 317C 4000 0002             		move.w	#$4000,2(a0)
000114FC 117C 0004 0001             		move.b	#4,1(a0)
00011502 117C 0004 0018             		move.b	#4,$18(a0)
00011508 117C 0018 0019             		move.b	#$18,$19(a0)
0001150E 3168 0008 0032             		move.w	8(a0),$32(a0)
00011514 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001151A                            
0001151A                            Obj5A_Platform:				; XREF: Obj5A_Index
0001151A 7200                       		moveq	#0,d1
0001151C 1228 0019                  		move.b	$19(a0),d1
00011520 4EB9 0000 79FC             		jsr	(PlatformObject).l
00011526 6000 0000                  		bra.w	Obj5A_Types
0001152A                            ; ===========================================================================
0001152A                            
0001152A                            Obj5A_Action:				; XREF: Obj5A_Index
0001152A 7200                       		moveq	#0,d1
0001152C 1228 0019                  		move.b	$19(a0),d1
00011530 4EB9 0000 7B70             		jsr	(ExitPlatform).l
00011536 3F28 0008                  		move.w	8(a0),-(sp)
0001153A 6100 0000                  		bsr.w	Obj5A_Types
0001153E 341F                       		move.w	(sp)+,d2
00011540 4EF9 0000 80DA             		jmp	(MvSonicOnPtfm2).l
00011546                            ; ===========================================================================
00011546                            
00011546                            Obj5A_Types:
00011546 7000                       		moveq	#0,d0
00011548 1028 0028                  		move.b	$28(a0),d0
0001154C 0240 000C                  		andi.w	#$C,d0
00011550 E248                       		lsr.w	#1,d0
00011552 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011556 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001155A                            ; ===========================================================================
0001155A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001155C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001155E                            ; ===========================================================================
0001155E                            
0001155E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001155E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011562 0401 0050                  		subi.b	#$50,d1
00011566 4881                       		ext.w	d1
00011568 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001156C 0402 0050                  		subi.b	#$50,d2
00011570 4882                       		ext.w	d2
00011572 0828 0000 0028             		btst	#0,$28(a0)
00011578 6700                       		beq.s	loc_10E24
0001157A 4441                       		neg.w	d1
0001157C 4442                       		neg.w	d2
0001157E                            
0001157E                            loc_10E24:
0001157E 0828 0001 0028             		btst	#1,$28(a0)
00011584 6700                       		beq.s	loc_10E30
00011586 4441                       		neg.w	d1
00011588 C342                       		exg	d1,d2
0001158A                            
0001158A                            loc_10E30:
0001158A D268 0032                  		add.w	$32(a0),d1
0001158E 3141 0008                  		move.w	d1,8(a0)
00011592 D468 0030                  		add.w	$30(a0),d2
00011596 3142 000C                  		move.w	d2,$C(a0)
0001159A 4E75                       		rts	
0001159C                            ; ===========================================================================
0001159C                            
0001159C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001159C 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115A0 0401 0050                  		subi.b	#$50,d1
000115A4 4881                       		ext.w	d1
000115A6 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115AA 0402 0050                  		subi.b	#$50,d2
000115AE 4882                       		ext.w	d2
000115B0 0828 0000 0028             		btst	#0,$28(a0)
000115B6 6700                       		beq.s	loc_10E62
000115B8 4441                       		neg.w	d1
000115BA 4442                       		neg.w	d2
000115BC                            
000115BC                            loc_10E62:
000115BC 0828 0001 0028             		btst	#1,$28(a0)
000115C2 6700                       		beq.s	loc_10E6E
000115C4 4441                       		neg.w	d1
000115C6 C342                       		exg	d1,d2
000115C8                            
000115C8                            loc_10E6E:
000115C8 4441                       		neg.w	d1
000115CA D268 0032                  		add.w	$32(a0),d1
000115CE 3141 0008                  		move.w	d1,8(a0)
000115D2 D468 0030                  		add.w	$30(a0),d2
000115D6 3142 000C                  		move.w	d2,$C(a0)
000115DA 4E75                       		rts	
000115DC                            ; ===========================================================================
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            Map_obj5A:
000115DC                            	include "_maps\obj5A.asm"
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115DC                            ; ---------------------------------------------------------------------------
000115DC 0000                       		dc.w byte_10E84-Map_obj5A
000115DE 02                         byte_10E84:	dc.b 2
000115DF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000115E4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000115EA 00                         		even
000115EA 00                         		even
000115EA                            
000115EA                            ; ===========================================================================
000115EA                            ; ---------------------------------------------------------------------------
000115EA                            ; Object 5B - blocks that form a staircase (SLZ)
000115EA                            ; ---------------------------------------------------------------------------
000115EA                            
000115EA                            Obj5B:					; XREF: Obj_Index
000115EA 7000                       		moveq	#0,d0
000115EC 1028 0024                  		move.b	$24(a0),d0
000115F0 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000115F4 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000115F8 3028 0030                  		move.w	$30(a0),d0
000115FC 0240 FF80                  		andi.w	#$FF80,d0
00011600 3238 F700                  		move.w	($FFFFF700).w,d1
00011604 0441 0080                  		subi.w	#$80,d1
00011608 0241 FF80                  		andi.w	#$FF80,d1
0001160C 9041                       		sub.w	d1,d0
0001160E 0C40 0280                  		cmpi.w	#$280,d0
00011612 6200 C79A                  		bhi.w	DeleteObject
00011616 6000 C75A                  		bra.w	DisplaySprite
0001161A                            ; ===========================================================================
0001161A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001161C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001161E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011620                            ; ===========================================================================
00011620                            
00011620                            Obj5B_Main:				; XREF: Obj5B_Index
00011620 5428 0024                  		addq.b	#2,$24(a0)
00011624 7638                       		moveq	#$38,d3
00011626 7801                       		moveq	#1,d4
00011628 0828 0000 0022             		btst	#0,$22(a0)
0001162E 6700                       		beq.s	loc_10EDA
00011630 763B                       		moveq	#$3B,d3
00011632 78FF                       		moveq	#-1,d4
00011634                            
00011634                            loc_10EDA:
00011634 3428 0008                  		move.w	8(a0),d2
00011638 2248                       		movea.l	a0,a1
0001163A 7203                       		moveq	#3,d1
0001163C 6000                       		bra.s	Obj5B_MakeBlocks
0001163E                            ; ===========================================================================
0001163E                            
0001163E                            Obj5B_Loop:
0001163E 6100 CBCE                  		bsr.w	SingleObjLoad2
00011642 6600 0000                  		bne.w	Obj5B_Move
00011646 137C 0004 0024             		move.b	#4,$24(a1)
0001164C                            
0001164C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001164C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011650 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011658 337C 4000 0002             		move.w	#$4000,2(a1)
0001165E 137C 0004 0001             		move.b	#4,1(a1)
00011664 137C 0003 0018             		move.b	#3,$18(a1)
0001166A 137C 0010 0019             		move.b	#$10,$19(a1)
00011670 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011676 3342 0008                  		move.w	d2,8(a1)
0001167A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011680 3368 0008 0030             		move.w	8(a0),$30(a1)
00011686 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001168C 0642 0020                  		addi.w	#$20,d2
00011690 1343 0037                  		move.b	d3,$37(a1)
00011694 2348 003C                  		move.l	a0,$3C(a1)
00011698 D604                       		add.b	d4,d3
0001169A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001169E                            
0001169E                            Obj5B_Move:				; XREF: Obj5B_Index
0001169E 7000                       		moveq	#0,d0
000116A0 1028 0028                  		move.b	$28(a0),d0
000116A4 0240 0007                  		andi.w	#7,d0
000116A8 D040                       		add.w	d0,d0
000116AA 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000116AE 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000116B2                            
000116B2                            Obj5B_Solid:				; XREF: Obj5B_Index
000116B2 2468 003C                  		movea.l	$3C(a0),a2
000116B6 7000                       		moveq	#0,d0
000116B8 1028 0037                  		move.b	$37(a0),d0
000116BC 1032 0000                  		move.b	(a2,d0.w),d0
000116C0 D068 0032                  		add.w	$32(a0),d0
000116C4 3140 000C                  		move.w	d0,$C(a0)
000116C8 7200                       		moveq	#0,d1
000116CA 1228 0019                  		move.b	$19(a0),d1
000116CE 0641 000B                  		addi.w	#$B,d1
000116D2 343C 0010                  		move.w	#$10,d2
000116D6 363C 0011                  		move.w	#$11,d3
000116DA 3828 0008                  		move.w	8(a0),d4
000116DE 6100 EA62                  		bsr.w	SolidObject
000116E2 4A04                       		tst.b	d4
000116E4 6A00                       		bpl.s	loc_10F92
000116E6 1544 0036                  		move.b	d4,$36(a2)
000116EA                            
000116EA                            loc_10F92:
000116EA 0828 0003 0022             		btst	#3,$22(a0)
000116F0 6700                       		beq.s	locret_10FA0
000116F2 157C 0001 0036             		move.b	#1,$36(a2)
000116F8                            
000116F8                            locret_10FA0:
000116F8 4E75                       		rts	
000116FA                            ; ===========================================================================
000116FA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000116FC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000116FE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011700 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011702                            ; ===========================================================================
00011702                            
00011702                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011702 4A68 0034                  		tst.w	$34(a0)
00011706 6600                       		bne.s	loc_10FC0
00011708 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001170E 6600                       		bne.s	locret_10FBE
00011710 317C 001E 0034             		move.w	#$1E,$34(a0)
00011716                            
00011716                            locret_10FBE:
00011716 4E75                       		rts	
00011718                            ; ===========================================================================
00011718                            
00011718                            loc_10FC0:
00011718 5368 0034                  		subq.w	#1,$34(a0)
0001171C 66F8                       		bne.s	locret_10FBE
0001171E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011722 4E75                       		rts	
00011724                            ; ===========================================================================
00011724                            
00011724                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011724 4A68 0034                  		tst.w	$34(a0)
00011728 6600                       		bne.s	loc_10FE0
0001172A 4A28 0036                  		tst.b	$36(a0)
0001172E 6A00                       		bpl.s	locret_10FDE
00011730 317C 003C 0034             		move.w	#$3C,$34(a0)
00011736                            
00011736                            locret_10FDE:
00011736 4E75                       		rts	
00011738                            ; ===========================================================================
00011738                            
00011738                            loc_10FE0:
00011738 5368 0034                  		subq.w	#1,$34(a0)
0001173C 6600                       		bne.s	loc_10FEC
0001173E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011742 4E75                       		rts	
00011744                            ; ===========================================================================
00011744                            
00011744                            loc_10FEC:
00011744 43E8 0038                  		lea	$38(a0),a1
00011748 3028 0034                  		move.w	$34(a0),d0
0001174C E408                       		lsr.b	#2,d0
0001174E 0200 0001                  		andi.b	#1,d0
00011752 12C0                       		move.b	d0,(a1)+
00011754 0A00 0001                  		eori.b	#1,d0
00011758 12C0                       		move.b	d0,(a1)+
0001175A 0A00 0001                  		eori.b	#1,d0
0001175E 12C0                       		move.b	d0,(a1)+
00011760 0A00 0001                  		eori.b	#1,d0
00011764 12C0                       		move.b	d0,(a1)+
00011766 4E75                       		rts	
00011768                            ; ===========================================================================
00011768                            
00011768                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011768 43E8 0038                  		lea	$38(a0),a1
0001176C 0C11 0080                  		cmpi.b	#$80,(a1)
00011770 6700                       		beq.s	locret_11038
00011772 5211                       		addq.b	#1,(a1)
00011774 7200                       		moveq	#0,d1
00011776 1219                       		move.b	(a1)+,d1
00011778 4841                       		swap	d1
0001177A E289                       		lsr.l	#1,d1
0001177C 2401                       		move.l	d1,d2
0001177E E289                       		lsr.l	#1,d1
00011780 2601                       		move.l	d1,d3
00011782 D682                       		add.l	d2,d3
00011784 4841                       		swap	d1
00011786 4842                       		swap	d2
00011788 4843                       		swap	d3
0001178A 12C3                       		move.b	d3,(a1)+
0001178C 12C2                       		move.b	d2,(a1)+
0001178E 12C1                       		move.b	d1,(a1)+
00011790                            
00011790                            locret_11038:
00011790 4E75                       		rts	
00011792 4E75                       		rts	
00011794                            ; ===========================================================================
00011794                            ; ---------------------------------------------------------------------------
00011794                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011794                            ; ---------------------------------------------------------------------------
00011794                            Map_obj5B:
00011794                            	include "_maps\obj5B.asm"
00011794                            ; ---------------------------------------------------------------------------
00011794                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011794                            ; ---------------------------------------------------------------------------
00011794 0000                       		dc.w byte_1103E-Map_obj5B
00011796 01                         byte_1103E:	dc.b 1
00011797 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001179C                            		even
0001179C                            		even
0001179C                            
0001179C                            ; ===========================================================================
0001179C                            ; ---------------------------------------------------------------------------
0001179C                            ; Object 5C - metal girders in foreground (SLZ)
0001179C                            ; ---------------------------------------------------------------------------
0001179C                            
0001179C                            Obj5C:					; XREF: Obj_Index
0001179C 7000                       		moveq	#0,d0
0001179E 1028 0024                  		move.b	$24(a0),d0
000117A2 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000117A6 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000117AA                            ; ===========================================================================
000117AA 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000117AC 0000                       		dc.w Obj5C_Display-Obj5C_Index
000117AE                            ; ===========================================================================
000117AE                            
000117AE                            Obj5C_Main:				; XREF: Obj5C_Index
000117AE 5428 0024                  		addq.b	#2,$24(a0)
000117B2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000117BA 317C 83CC 0002             		move.w	#$83CC,2(a0)
000117C0 117C 0010 0019             		move.b	#$10,$19(a0)
000117C6                            
000117C6                            Obj5C_Display:				; XREF: Obj5C_Index
000117C6 2238 F700                  		move.l	($FFFFF700).w,d1
000117CA D281                       		add.l	d1,d1
000117CC 4841                       		swap	d1
000117CE 4441                       		neg.w	d1
000117D0 3141 0008                  		move.w	d1,8(a0)
000117D4 2238 F704                  		move.l	($FFFFF704).w,d1
000117D8 D281                       		add.l	d1,d1
000117DA 4841                       		swap	d1
000117DC 0241 003F                  		andi.w	#$3F,d1
000117E0 4441                       		neg.w	d1
000117E2 0641 0100                  		addi.w	#$100,d1
000117E6 3141 000A                  		move.w	d1,$A(a0)
000117EA 6000 C586                  		bra.w	DisplaySprite
000117EE                            ; ===========================================================================
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            Map_obj5C:
000117EE                            	include "_maps\obj5C.asm"
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117EE                            ; ---------------------------------------------------------------------------
000117EE 0000                       		dc.w byte_11098-Map_obj5C
000117F0 09                         byte_11098:	dc.b 9
000117F1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000117F6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000117FB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011800 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011805 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001180A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001180F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011814 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011819 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001181E                            		even
0001181E                            		even
0001181E                            
0001181E                            ; ===========================================================================
0001181E                            ; ---------------------------------------------------------------------------
0001181E                            ; Object 1B - water surface (LZ)
0001181E                            ; ---------------------------------------------------------------------------
0001181E                            
0001181E                            Obj1B:					; XREF: Obj_Index
0001181E 7000                       		moveq	#0,d0
00011820 1028 0024                  		move.b	$24(a0),d0
00011824 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011828 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001182C                            ; ===========================================================================
0001182C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001182E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011830                            ; ===========================================================================
00011830                            
00011830                            Obj1B_Main:				; XREF: Obj1B_Index
00011830 5428 0024                  		addq.b	#2,$24(a0)
00011834 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001183C 317C C300 0002             		move.w	#$C300,2(a0)
00011842 117C 0004 0001             		move.b	#4,1(a0)
00011848 117C 0080 0019             		move.b	#$80,$19(a0)
0001184E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011854                            
00011854                            Obj1B_Action:				; XREF: Obj1B_Index
00011854 3238 F700                  		move.w	($FFFFF700).w,d1
00011858 0241 FFE0                  		andi.w	#$FFE0,d1
0001185C D268 0030                  		add.w	$30(a0),d1
00011860 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011866 6700                       		beq.s	loc_11114
00011868 0641 0020                  		addi.w	#$20,d1
0001186C                            
0001186C                            loc_11114:
0001186C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011870 3238 F646                  		move.w	($FFFFF646).w,d1
00011874 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011878 4A28 0032                  		tst.b	$32(a0)
0001187C 6600                       		bne.s	Obj1B_Animate
0001187E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011884 6700                       		beq.s	loc_1114A	; if not, branch
00011886 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001188A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011890 6000                       		bra.s	Obj1B_Display
00011892                            ; ===========================================================================
00011892                            
00011892                            Obj1B_Animate:				; XREF: loc_11114
00011892 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011896 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011898 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001189E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000118A2                            
000118A2                            loc_1114A:				; XREF: loc_11114
000118A2 5328 001E                  		subq.b	#1,$1E(a0)
000118A6 6A00                       		bpl.s	Obj1B_Display
000118A8 117C 0007 001E             		move.b	#7,$1E(a0)
000118AE 5228 001A                  		addq.b	#1,$1A(a0)
000118B2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000118B8 6500                       		bcs.s	Obj1B_Display
000118BA 117C 0000 001A             		move.b	#0,$1A(a0)
000118C0                            
000118C0                            Obj1B_Display:
000118C0 6000 C4B0                  		bra.w	DisplaySprite
000118C4                            ; ===========================================================================
000118C4                            ; ---------------------------------------------------------------------------
000118C4                            ; Sprite mappings - water surface (LZ)
000118C4                            ; ---------------------------------------------------------------------------
000118C4                            Map_obj1B:
000118C4                            	include "_maps\obj1B.asm"
000118C4                            ; ---------------------------------------------------------------------------
000118C4                            ; Sprite mappings - water surface (LZ)
000118C4                            ; ---------------------------------------------------------------------------
000118C4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000118C8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000118CC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000118D0 03                         byte_11178:	dc.b 3
000118D1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118D6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000118DB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000118E0 03                         byte_11188:	dc.b 3
000118E1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000118E6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000118EB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000118F0 03                         byte_11198:	dc.b 3
000118F1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000118F6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000118FB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011900 06                         byte_111A8:	dc.b 6
00011901 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011906 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001190B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011910 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011915 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001191A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001191F 06                         byte_111C7:	dc.b 6
00011920 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011925 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001192A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001192F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011934 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011939 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001193E 06                         byte_111E6:	dc.b 6
0001193F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011944 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011949 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001194E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011953 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011958 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001195E 00                         		even
0001195E 00                         		even
0001195E                            
0001195E                            ; ===========================================================================
0001195E                            ; ---------------------------------------------------------------------------
0001195E                            ; Object 0B - pole that	breaks (LZ)
0001195E                            ; ---------------------------------------------------------------------------
0001195E                            
0001195E                            Obj0B:					; XREF: Obj_Index
0001195E 7000                       		moveq	#0,d0
00011960 1028 0024                  		move.b	$24(a0),d0
00011964 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011968 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001196C                            ; ===========================================================================
0001196C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001196E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011970 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011972                            ; ===========================================================================
00011972                            
00011972                            Obj0B_Main:				; XREF: Obj0B_Index
00011972 5428 0024                  		addq.b	#2,$24(a0)
00011976 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001197E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011984 117C 0004 0001             		move.b	#4,1(a0)
0001198A 117C 0008 0019             		move.b	#8,$19(a0)
00011990 117C 0004 0018             		move.b	#4,$18(a0)
00011996 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001199C 7000                       		moveq	#0,d0
0001199E 1028 0028                  		move.b	$28(a0),d0	; get object type
000119A2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000119A6 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000119AA                            
000119AA                            Obj0B_Action:				; XREF: Obj0B_Index
000119AA 4A28 0032                  		tst.b	$32(a0)
000119AE 6700                       		beq.s	Obj0B_Grab
000119B0 4A68 0030                  		tst.w	$30(a0)
000119B4 6700                       		beq.s	Obj0B_MoveUp
000119B6 5368 0030                  		subq.w	#1,$30(a0)
000119BA 6600                       		bne.s	Obj0B_MoveUp
000119BC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000119C2 6000                       		bra.s	Obj0B_Release
000119C4                            ; ===========================================================================
000119C4                            
000119C4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000119C4 43F8 D000                  		lea	($FFFFD000).w,a1
000119C8 3028 000C                  		move.w	$C(a0),d0
000119CC 0440 0018                  		subi.w	#$18,d0
000119D0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000119D6 6700                       		beq.s	Obj0B_MoveDown
000119D8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000119DC B069 000C                  		cmp.w	$C(a1),d0
000119E0 6500                       		bcs.s	Obj0B_MoveDown
000119E2 3340 000C                  		move.w	d0,$C(a1)
000119E6                            
000119E6                            Obj0B_MoveDown:
000119E6 0640 0024                  		addi.w	#$24,d0
000119EA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000119F0 6700                       		beq.s	Obj0B_LetGo
000119F2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000119F6 B069 000C                  		cmp.w	$C(a1),d0
000119FA 6400                       		bcc.s	Obj0B_LetGo
000119FC 3340 000C                  		move.w	d0,$C(a1)
00011A00                            
00011A00                            Obj0B_LetGo:
00011A00 1038 F603                  		move.b	($FFFFF603).w,d0
00011A04 0240 0070                  		andi.w	#$70,d0
00011A08 6700                       		beq.s	Obj0B_Display
00011A0A                            
00011A0A                            Obj0B_Release:				; XREF: Obj0B_Action
00011A0A 4228 0020                  		clr.b	$20(a0)
00011A0E 5428 0024                  		addq.b	#2,$24(a0)
00011A12 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A16 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A1A 4228 0032                  		clr.b	$32(a0)
00011A1E 6000                       		bra.s	Obj0B_Display
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A20 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A24 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A26 43F8 D000                  		lea	($FFFFD000).w,a1
00011A2A 3028 0008                  		move.w	8(a0),d0
00011A2E 0640 0014                  		addi.w	#$14,d0
00011A32 B069 0008                  		cmp.w	8(a1),d0
00011A36 6400                       		bcc.s	Obj0B_Display
00011A38 4228 0021                  		clr.b	$21(a0)
00011A3C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A42 6400                       		bcc.s	Obj0B_Display
00011A44 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A48 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011A4C 3028 0008                  		move.w	8(a0),d0
00011A50 0640 0014                  		addi.w	#$14,d0
00011A54 3340 0008                  		move.w	d0,8(a1)
00011A58 08A9 0000 0022             		bclr	#0,$22(a1)
00011A5E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011A64 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011A6A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A70 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011A76                            
00011A76                            Obj0B_Display:				; XREF: Obj0B_Index
00011A76 6000 E3A2                  		bra.w	MarkObjGone
00011A7A                            ; ===========================================================================
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            ; Sprite mappings - pole that breaks (LZ)
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            Map_obj0B:
00011A7A                            	include "_maps\obj0B.asm"
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A                            ; Sprite mappings - pole that breaks (LZ)
00011A7A                            ; ---------------------------------------------------------------------------
00011A7A 0000                       		dc.w byte_11326-Map_obj0B
00011A7C 0000                       		dc.w byte_11331-Map_obj0B
00011A7E 02                         byte_11326:	dc.b 2			; normal pole
00011A7F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011A84 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011A89 04                         byte_11331:	dc.b 4			; broken pole
00011A8A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011A8F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011A94 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011A99 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011A9E                            		even
00011A9E                            		even
00011A9E                            
00011A9E                            ; ===========================================================================
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            ; Object 0C - flapping door (LZ)
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            
00011A9E                            Obj0C:					; XREF: Obj_Index
00011A9E 7000                       		moveq	#0,d0
00011AA0 1028 0024                  		move.b	$24(a0),d0
00011AA4 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011AA8 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011AAC                            ; ===========================================================================
00011AAC 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011AAE 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011AB0                            ; ===========================================================================
00011AB0                            
00011AB0                            Obj0C_Main:				; XREF: Obj0C_Index
00011AB0 5428 0024                  		addq.b	#2,$24(a0)
00011AB4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011ABC 317C 4328 0002             		move.w	#$4328,2(a0)
00011AC2 0028 0004 0001             		ori.b	#4,1(a0)
00011AC8 117C 0028 0019             		move.b	#$28,$19(a0)
00011ACE 7000                       		moveq	#0,d0
00011AD0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AD4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011AD8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011ADC                            
00011ADC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011ADC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AE0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011AE2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011AE8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011AEE 4A28 0001                  		tst.b	1(a0)
00011AF2 6A00                       		bpl.s	Obj0C_Solid
00011AF4 303C 00BB                  		move.w	#$BB,d0
00011AF8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011AFE                            
00011AFE                            Obj0C_Solid:
00011AFE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B04 6100 932C                  		bsr.w	AnimateSprite
00011B08 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B0C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B10 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B12 3038 D008                  		move.w	($FFFFD008).w,d0
00011B16 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B1A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B1C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B22 323C 0013                  		move.w	#$13,d1
00011B26 343C 0020                  		move.w	#$20,d2
00011B2A 3602                       		move.w	d2,d3
00011B2C 5243                       		addq.w	#1,d3
00011B2E 3828 0008                  		move.w	8(a0),d4
00011B32 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011B36                            
00011B36                            Obj0C_Display:
00011B36 6000 E2E2                  		bra.w	MarkObjGone
00011B3A                            ; ===========================================================================
00011B3A                            Ani_obj0C:
00011B3A                            	include "_anim\obj0C.asm"
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Animation script - flapping door (LZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A 0000                       		dc.w byte_113E6-Ani_obj0C
00011B3C 0000                       		dc.w byte_113EC-Ani_obj0C
00011B3E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B44 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011B4A                            		even
00011B4A                            		even
00011B4A                            
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - flapping door (LZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            Map_obj0C:
00011B4A                            	include "_maps\obj0C.asm"
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - flapping door (LZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A 0000                       		dc.w byte_113F8-Map_obj0C
00011B4C 0000                       		dc.w byte_11403-Map_obj0C
00011B4E 0000                       		dc.w byte_1140E-Map_obj0C
00011B50 02                         byte_113F8:	dc.b 2
00011B51 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011B56 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011B5B 02                         byte_11403:	dc.b 2
00011B5C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011B61 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011B66 02                         byte_1140E:	dc.b 2
00011B67 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011B6C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011B72 00                         		even
00011B72 00                         		even
00011B72                            
00011B72                            ; ===========================================================================
00011B72                            ; ---------------------------------------------------------------------------
00011B72                            ; Object 71 - invisible	solid blocks
00011B72                            ; ---------------------------------------------------------------------------
00011B72                            
00011B72                            Obj71:					; XREF: Obj_Index
00011B72 7000                       		moveq	#0,d0
00011B74 1028 0024                  		move.b	$24(a0),d0
00011B78 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011B7C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011B80                            ; ===========================================================================
00011B80 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011B82 0000                       		dc.w Obj71_Solid-Obj71_Index
00011B84                            ; ===========================================================================
00011B84                            
00011B84                            Obj71_Main:				; XREF: Obj71_Index
00011B84 5428 0024                  		addq.b	#2,$24(a0)
00011B88 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011B90 317C 8680 0002             		move.w	#$8680,2(a0)
00011B96 0028 0004 0001             		ori.b	#4,1(a0)
00011B9C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BA0 1200                       		move.b	d0,d1
00011BA2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011BA6 0640 0010                  		addi.w	#$10,d0
00011BAA E248                       		lsr.w	#1,d0
00011BAC 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011BB0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011BB4 5241                       		addq.w	#1,d1
00011BB6 E749                       		lsl.w	#3,d1
00011BB8 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011BBC                            
00011BBC                            Obj71_Solid:				; XREF: Obj71_Index
00011BBC 6100 C42E                  		bsr.w	ChkObjOnScreen
00011BC0 6600                       		bne.s	Obj71_ChkDel
00011BC2 7200                       		moveq	#0,d1
00011BC4 1228 0019                  		move.b	$19(a0),d1
00011BC8 0641 000B                  		addi.w	#$B,d1
00011BCC 7400                       		moveq	#0,d2
00011BCE 1428 0016                  		move.b	$16(a0),d2
00011BD2 3602                       		move.w	d2,d3
00011BD4 5243                       		addq.w	#1,d3
00011BD6 3828 0008                  		move.w	8(a0),d4
00011BDA 6100 E5A8                  		bsr.w	SolidObject71
00011BDE                            
00011BDE                            Obj71_ChkDel:
00011BDE 3028 0008                  		move.w	8(a0),d0
00011BE2 0240 FF80                  		andi.w	#$FF80,d0
00011BE6 3238 F700                  		move.w	($FFFFF700).w,d1
00011BEA 0441 0080                  		subi.w	#$80,d1
00011BEE 0241 FF80                  		andi.w	#$FF80,d1
00011BF2 9041                       		sub.w	d1,d0
00011BF4 0C40 0280                  		cmpi.w	#$280,d0
00011BF8 6200                       		bhi.s	Obj71_Delete
00011BFA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011BFE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C00 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C04                            ; ===========================================================================
00011C04                            
00011C04                            Obj71_NoDisplay:
00011C04 4E75                       		rts	
00011C06                            ; ===========================================================================
00011C06                            
00011C06                            Obj71_Delete:
00011C06 4EFA C1A6                  		jmp	DeleteObject
00011C0A                            ; ===========================================================================
00011C0A                            ; ---------------------------------------------------------------------------
00011C0A                            ; Sprite mappings - invisible solid blocks
00011C0A                            ; ---------------------------------------------------------------------------
00011C0A                            Map_obj71:
00011C0A                            	include "_maps\obj71.asm"
00011C0A                            ; ---------------------------------------------------------------------------
00011C0A                            ; Sprite mappings - invisible solid blocks
00011C0A                            ; ---------------------------------------------------------------------------
00011C0A 0000                       		dc.w byte_114BC-Map_obj71
00011C0C 0000                       		dc.w byte_114D1-Map_obj71
00011C0E 0000                       		dc.w byte_114E6-Map_obj71
00011C10 04                         byte_114BC:	dc.b 4
00011C11 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C16 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C1B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C20 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C25 04                         byte_114D1:	dc.b 4
00011C26 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C2B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C30 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C35 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C3A 04                         byte_114E6:	dc.b 4
00011C3B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C40 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C45 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011C4A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011C50 00                         		even
00011C50 00                         		even
00011C50                            
00011C50                            ; ===========================================================================
00011C50                            ; ---------------------------------------------------------------------------
00011C50                            ; Object 5D - fans (SLZ)
00011C50                            ; ---------------------------------------------------------------------------
00011C50                            
00011C50                            Obj5D:					; XREF: Obj_Index
00011C50 7000                       		moveq	#0,d0
00011C52 1028 0024                  		move.b	$24(a0),d0
00011C56 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011C5A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011C5E                            ; ===========================================================================
00011C5E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011C60 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011C62                            ; ===========================================================================
00011C62                            
00011C62                            Obj5D_Main:				; XREF: Obj5D_Index
00011C62 5428 0024                  		addq.b	#2,$24(a0)
00011C66 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011C6E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011C74 0028 0004 0001             		ori.b	#4,1(a0)
00011C7A 117C 0010 0019             		move.b	#$10,$19(a0)
00011C80 117C 0004 0018             		move.b	#4,$18(a0)
00011C86                            
00011C86                            Obj5D_Delay:				; XREF: Obj5D_Index
00011C86 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011C8C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011C8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011C92 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011C94 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011C9A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011CA0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011CA2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011CA8                            
00011CA8                            Obj5D_Blow:
00011CA8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011CAC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011CB0 43F8 D000                  		lea	($FFFFD000).w,a1
00011CB4 3029 0008                  		move.w	8(a1),d0
00011CB8 9068 0008                  		sub.w	8(a0),d0
00011CBC 0828 0000 0022             		btst	#0,$22(a0)
00011CC2 6600                       		bne.s	Obj5D_ChkSonic
00011CC4 4440                       		neg.w	d0
00011CC6                            
00011CC6                            Obj5D_ChkSonic:
00011CC6 0640 0050                  		addi.w	#$50,d0
00011CCA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011CCE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011CD0 3229 000C                  		move.w	$C(a1),d1
00011CD4 0641 0060                  		addi.w	#$60,d1
00011CD8 9268 000C                  		sub.w	$C(a0),d1
00011CDC 6500                       		bcs.s	Obj5D_Animate
00011CDE 0C41 0070                  		cmpi.w	#$70,d1
00011CE2 6400                       		bcc.s	Obj5D_Animate
00011CE4 0440 0050                  		subi.w	#$50,d0
00011CE8 6400                       		bcc.s	loc_1159A
00011CEA 4640                       		not.w	d0
00011CEC D040                       		add.w	d0,d0
00011CEE                            
00011CEE                            loc_1159A:
00011CEE 0640 0060                  		addi.w	#$60,d0
00011CF2 0828 0000 0022             		btst	#0,$22(a0)
00011CF8 6600                       		bne.s	loc_115A8
00011CFA 4440                       		neg.w	d0
00011CFC                            
00011CFC                            loc_115A8:
00011CFC 4400                       		neg.b	d0
00011CFE E840                       		asr.w	#4,d0
00011D00 0828 0000 0028             		btst	#0,$28(a0)
00011D06 6700                       		beq.s	Obj5D_MoveSonic
00011D08 4440                       		neg.w	d0
00011D0A                            
00011D0A                            Obj5D_MoveSonic:
00011D0A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D0E                            
00011D0E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D0E 5328 001E                  		subq.b	#1,$1E(a0)
00011D12 6A00                       		bpl.s	Obj5D_ChkDel
00011D14 117C 0000 001E             		move.b	#0,$1E(a0)
00011D1A 5228 001B                  		addq.b	#1,$1B(a0)
00011D1E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D24 6500                       		bcs.s	loc_115D8
00011D26 117C 0000 001B             		move.b	#0,$1B(a0)
00011D2C                            
00011D2C                            loc_115D8:
00011D2C 7000                       		moveq	#0,d0
00011D2E 0828 0000 0028             		btst	#0,$28(a0)
00011D34 6700                       		beq.s	loc_115E4
00011D36 7002                       		moveq	#2,d0
00011D38                            
00011D38                            loc_115E4:
00011D38 D028 001B                  		add.b	$1B(a0),d0
00011D3C 1140 001A                  		move.b	d0,$1A(a0)
00011D40                            
00011D40                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D40 6100 C030                  		bsr.w	DisplaySprite
00011D44 3028 0008                  		move.w	8(a0),d0
00011D48 0240 FF80                  		andi.w	#$FF80,d0
00011D4C 3238 F700                  		move.w	($FFFFF700).w,d1
00011D50 0441 0080                  		subi.w	#$80,d1
00011D54 0241 FF80                  		andi.w	#$FF80,d1
00011D58 9041                       		sub.w	d1,d0
00011D5A 0C40 0280                  		cmpi.w	#$280,d0
00011D5E 6200 C04E                  		bhi.w	DeleteObject
00011D62 4E75                       		rts	
00011D64                            ; ===========================================================================
00011D64                            ; ---------------------------------------------------------------------------
00011D64                            ; Sprite mappings - fans (SLZ)
00011D64                            ; ---------------------------------------------------------------------------
00011D64                            Map_obj5D:
00011D64                            	include "_maps\obj5D.asm"
00011D64                            ; ---------------------------------------------------------------------------
00011D64                            ; Sprite mappings - fans (SLZ)
00011D64                            ; ---------------------------------------------------------------------------
00011D64 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011D68 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011D6C 0000                       		dc.w byte_1161A-Map_obj5D
00011D6E 02                         byte_1161A:	dc.b 2
00011D6F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011D74 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011D79 02                         byte_11625:	dc.b 2
00011D7A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011D7F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011D84 02                         byte_11630:	dc.b 2
00011D85 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011D8A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011D90 00                         		even
00011D90 00                         		even
00011D90                            
00011D90                            ; ===========================================================================
00011D90                            ; ---------------------------------------------------------------------------
00011D90                            ; Object 5E - seesaws (SLZ)
00011D90                            ; ---------------------------------------------------------------------------
00011D90                            
00011D90                            Obj5E:					; XREF: Obj_Index
00011D90 7000                       		moveq	#0,d0
00011D92 1028 0024                  		move.b	$24(a0),d0
00011D96 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011D9A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011D9E 3028 0030                  		move.w	$30(a0),d0
00011DA2 0240 FF80                  		andi.w	#$FF80,d0
00011DA6 3238 F700                  		move.w	($FFFFF700).w,d1
00011DAA 0441 0080                  		subi.w	#$80,d1
00011DAE 0241 FF80                  		andi.w	#$FF80,d1
00011DB2 9041                       		sub.w	d1,d0
00011DB4 6B00 BFF8                  		bmi.w	DeleteObject
00011DB8 0C40 0280                  		cmpi.w	#$280,d0
00011DBC 6200 BFF0                  		bhi.w	DeleteObject
00011DC0 6000 BFB0                  		bra.w	DisplaySprite
00011DC4                            ; ===========================================================================
00011DC4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011DC6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011DC8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011DCA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011DCC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011DCE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011DD0                            ; ===========================================================================
00011DD0                            
00011DD0                            Obj5E_Main:				; XREF: Obj5E_Index
00011DD0 5428 0024                  		addq.b	#2,$24(a0)
00011DD4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011DDC 317C 0374 0002             		move.w	#$374,2(a0)
00011DE2 0028 0004 0001             		ori.b	#4,1(a0)
00011DE8 117C 0004 0018             		move.b	#4,$18(a0)
00011DEE 117C 0030 0019             		move.b	#$30,$19(a0)
00011DF4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011DFA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011DFE 6600                       		bne.s	loc_116D2	; if not, branch
00011E00 6100 C40C                  		bsr.w	SingleObjLoad2
00011E04 6600                       		bne.s	loc_116D2
00011E06 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E0A 5C29 0024                  		addq.b	#6,$24(a1)
00011E0E 3368 0008 0008             		move.w	8(a0),8(a1)
00011E14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E1A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E20 2348 003C                  		move.l	a0,$3C(a1)
00011E24                            
00011E24                            loc_116D2:
00011E24 0828 0000 0022             		btst	#0,$22(a0)
00011E2A 6700                       		beq.s	loc_116E0
00011E2C 117C 0002 001A             		move.b	#2,$1A(a0)
00011E32                            
00011E32                            loc_116E0:
00011E32 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E38                            
00011E38                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E38 1228 003A                  		move.b	$3A(a0),d1
00011E3C 6100 0000                  		bsr.w	loc_11766
00011E40 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E46 0828 0000 001A             		btst	#0,$1A(a0)
00011E4C 6700                       		beq.s	loc_11702
00011E4E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E54                            
00011E54                            loc_11702:
00011E54 43F8 D000                  		lea	($FFFFD000).w,a1
00011E58 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011E5E 323C 0030                  		move.w	#$30,d1
00011E62 4EB9 0000 7AD0             		jsr	(SlopeObject).l
00011E68 4E75                       		rts	
00011E6A                            ; ===========================================================================
00011E6A                            
00011E6A                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011E6A 6100 0000                  		bsr.w	loc_1174A
00011E6E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E74 0828 0000 001A             		btst	#0,$1A(a0)
00011E7A 6700                       		beq.s	loc_11730
00011E7C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E82                            
00011E82                            loc_11730:
00011E82 323C 0030                  		move.w	#$30,d1
00011E86 4EB9 0000 7B70             		jsr	(ExitPlatform).l
00011E8C 323C 0030                  		move.w	#$30,d1
00011E90 3428 0008                  		move.w	8(a0),d2
00011E94 4EB9 0000 8B60             		jsr	SlopeObject2
00011E9A 4E75                       		rts	
00011E9C                            ; ===========================================================================
00011E9C                            
00011E9C                            loc_1174A:				; XREF: Obj5E_Slope2
00011E9C 7202                       		moveq	#2,d1
00011E9E 43F8 D000                  		lea	($FFFFD000).w,a1
00011EA2 3028 0008                  		move.w	8(a0),d0
00011EA6 9069 0008                  		sub.w	8(a1),d0
00011EAA 6400                       		bcc.s	loc_1175E
00011EAC 4440                       		neg.w	d0
00011EAE 7200                       		moveq	#0,d1
00011EB0                            
00011EB0                            loc_1175E:
00011EB0 0C40 0008                  		cmpi.w	#8,d0
00011EB4 6400                       		bcc.s	loc_11766
00011EB6 7201                       		moveq	#1,d1
00011EB8                            
00011EB8                            loc_11766:
00011EB8 1028 001A                  		move.b	$1A(a0),d0
00011EBC B001                       		cmp.b	d1,d0
00011EBE 6700                       		beq.s	locret_11790
00011EC0 6400                       		bcc.s	loc_11772
00011EC2 5400                       		addq.b	#2,d0
00011EC4                            
00011EC4                            loc_11772:
00011EC4 5300                       		subq.b	#1,d0
00011EC6 1140 001A                  		move.b	d0,$1A(a0)
00011ECA 1141 003A                  		move.b	d1,$3A(a0)
00011ECE 08A8 0000 0001             		bclr	#0,1(a0)
00011ED4 0828 0001 001A             		btst	#1,$1A(a0)
00011EDA 6700                       		beq.s	locret_11790
00011EDC 08E8 0000 0001             		bset	#0,1(a0)
00011EE2                            
00011EE2                            locret_11790:
00011EE2 4E75                       		rts	
00011EE4                            ; ===========================================================================
00011EE4                            
00011EE4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011EE4 5428 0024                  		addq.b	#2,$24(a0)
00011EE8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011EF0 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011EF6 0028 0004 0001             		ori.b	#4,1(a0)
00011EFC 117C 0004 0018             		move.b	#4,$18(a0)
00011F02 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F08 117C 000C 0019             		move.b	#$C,$19(a0)
00011F0E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F14 0668 0028 0008             		addi.w	#$28,8(a0)
00011F1A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F20 117C 0001 001A             		move.b	#1,$1A(a0)
00011F26 0828 0000 0022             		btst	#0,$22(a0)
00011F2C 6700                       		beq.s	Obj5E_MoveSpike
00011F2E 0468 0050 0008             		subi.w	#$50,8(a0)
00011F34 117C 0002 003A             		move.b	#2,$3A(a0)
00011F3A                            
00011F3A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F3A 2268 003C                  		movea.l	$3C(a0),a1
00011F3E 7000                       		moveq	#0,d0
00011F40 1028 003A                  		move.b	$3A(a0),d0
00011F44 9029 003A                  		sub.b	$3A(a1),d0
00011F48 6700                       		beq.s	loc_1183E
00011F4A 6400                       		bcc.s	loc_117FC
00011F4C 4400                       		neg.b	d0
00011F4E                            
00011F4E                            loc_117FC:
00011F4E 323C F7E8                  		move.w	#-$818,d1
00011F52 343C FEEC                  		move.w	#-$114,d2
00011F56 0C00 0001                  		cmpi.b	#1,d0
00011F5A 6700                       		beq.s	loc_11822
00011F5C 323C F510                  		move.w	#-$AF0,d1
00011F60 343C FF34                  		move.w	#-$CC,d2
00011F64 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011F6A 6D00                       		blt.s	loc_11822
00011F6C 323C F200                  		move.w	#-$E00,d1
00011F70 343C FF60                  		move.w	#-$A0,d2
00011F74                            
00011F74                            loc_11822:
00011F74 3141 0012                  		move.w	d1,$12(a0)
00011F78 3142 0010                  		move.w	d2,$10(a0)
00011F7C 3028 0008                  		move.w	8(a0),d0
00011F80 9068 0030                  		sub.w	$30(a0),d0
00011F84 6400                       		bcc.s	loc_11838
00011F86 4468 0010                  		neg.w	$10(a0)
00011F8A                            
00011F8A                            loc_11838:
00011F8A 5428 0024                  		addq.b	#2,$24(a0)
00011F8E 6000                       		bra.s	Obj5E_SpikeFall
00011F90                            ; ===========================================================================
00011F90                            
00011F90                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011F90 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F96 7000                       		moveq	#0,d0
00011F98 1029 001A                  		move.b	$1A(a1),d0
00011F9C 343C 0028                  		move.w	#$28,d2
00011FA0 3228 0008                  		move.w	8(a0),d1
00011FA4 9268 0030                  		sub.w	$30(a0),d1
00011FA8 6400                       		bcc.s	loc_1185C
00011FAA 4442                       		neg.w	d2
00011FAC 5440                       		addq.w	#2,d0
00011FAE                            
00011FAE                            loc_1185C:
00011FAE D040                       		add.w	d0,d0
00011FB0 3228 0034                  		move.w	$34(a0),d1
00011FB4 D272 0000                  		add.w	(a2,d0.w),d1
00011FB8 3141 000C                  		move.w	d1,$C(a0)
00011FBC D468 0030                  		add.w	$30(a0),d2
00011FC0 3142 0008                  		move.w	d2,8(a0)
00011FC4 4268 000E                  		clr.w	$E(a0)
00011FC8 4268 000A                  		clr.w	$A(a0)
00011FCC 4E75                       		rts	
00011FCE                            ; ===========================================================================
00011FCE                            
00011FCE                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011FCE 4A68 0012                  		tst.w	$12(a0)
00011FD2 6A00                       		bpl.s	loc_1189A
00011FD4 6100 BD4A                  		bsr.w	ObjectFall
00011FD8 3028 0034                  		move.w	$34(a0),d0
00011FDC 0440 002F                  		subi.w	#$2F,d0
00011FE0 B068 000C                  		cmp.w	$C(a0),d0
00011FE4 6E00                       		bgt.s	locret_11898
00011FE6 6100 BD38                  		bsr.w	ObjectFall
00011FEA                            
00011FEA                            locret_11898:
00011FEA 4E75                       		rts	
00011FEC                            ; ===========================================================================
00011FEC                            
00011FEC                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011FEC 6100 BD32                  		bsr.w	ObjectFall
00011FF0 2268 003C                  		movea.l	$3C(a0),a1
00011FF4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FFA 7000                       		moveq	#0,d0
00011FFC 1029 001A                  		move.b	$1A(a1),d0
00012000 3228 0008                  		move.w	8(a0),d1
00012004 9268 0030                  		sub.w	$30(a0),d1
00012008 6400                       		bcc.s	loc_118BA
0001200A 5440                       		addq.w	#2,d0
0001200C                            
0001200C                            loc_118BA:
0001200C D040                       		add.w	d0,d0
0001200E 3228 0034                  		move.w	$34(a0),d1
00012012 D272 0000                  		add.w	(a2,d0.w),d1
00012016 B268 000C                  		cmp.w	$C(a0),d1
0001201A 6E00                       		bgt.s	locret_11938
0001201C 2268 003C                  		movea.l	$3C(a0),a1
00012020 7202                       		moveq	#2,d1
00012022 4A68 0010                  		tst.w	$10(a0)
00012026 6B00                       		bmi.s	Obj5E_Spring
00012028 7200                       		moveq	#0,d1
0001202A                            
0001202A                            Obj5E_Spring:
0001202A 1341 003A                  		move.b	d1,$3A(a1)
0001202E 1141 003A                  		move.b	d1,$3A(a0)
00012032 B229 001A                  		cmp.b	$1A(a1),d1
00012036 6700                       		beq.s	loc_1192C
00012038 08A9 0003 0022             		bclr	#3,$22(a1)
0001203E 6700                       		beq.s	loc_1192C
00012040 4229 0025                  		clr.b	$25(a1)
00012044 137C 0002 0024             		move.b	#2,$24(a1)
0001204A 45F8 D000                  		lea	($FFFFD000).w,a2
0001204E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012054 446A 0012                  		neg.w	$12(a2)
00012058 08EA 0001 0022             		bset	#1,$22(a2)
0001205E 08AA 0003 0022             		bclr	#3,$22(a2)
00012064 422A 003C                  		clr.b	$3C(a2)
00012068 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001206E 157C 0002 0024             		move.b	#2,$24(a2)
00012074 303C 00CC                  		move.w	#$CC,d0
00012078 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0001207E                            
0001207E                            loc_1192C:
0001207E 4268 0010                  		clr.w	$10(a0)
00012082 4268 0012                  		clr.w	$12(a0)
00012086 5528 0024                  		subq.b	#2,$24(a0)
0001208A                            
0001208A                            locret_11938:
0001208A 4E75                       		rts	
0001208C                            ; ===========================================================================
0001208C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012096                            
00012096                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000120C6                            		even
000120C6                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000120F6                            		even
000120F6                            ; ---------------------------------------------------------------------------
000120F6                            ; Sprite mappings - seesaws (SLZ)
000120F6                            ; ---------------------------------------------------------------------------
000120F6                            Map_obj5E:
000120F6                            	include "_maps\obj5E.asm"
000120F6                            ; ---------------------------------------------------------------------------
000120F6                            ; Sprite mappings - seesaws (SLZ)
000120F6                            ; ---------------------------------------------------------------------------
000120F6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120FA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120FE 07                         byte_119AC:	dc.b 7
000120FF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012104 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012109 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001210E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012113 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012118 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001211D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012122 04                         byte_119D0:	dc.b 4
00012123 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012128 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001212D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012132 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012138 00                         		even
00012138 00                         		even
00012138                            
00012138                            ; ---------------------------------------------------------------------------
00012138                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012138                            ; ---------------------------------------------------------------------------
00012138                            Map_obj5Ea:
00012138                            	include "_maps\obj5Eballs.asm"
00012138                            ; ---------------------------------------------------------------------------
00012138                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012138                            ; ---------------------------------------------------------------------------
00012138 0000                       		dc.w byte_119EA-Map_obj5Ea
0001213A 0000                       		dc.w byte_119F0-Map_obj5Ea
0001213C 01                         byte_119EA:	dc.b 1
0001213D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012142 01                         byte_119F0:	dc.b 1
00012143 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012148                            		even
00012148                            		even
00012148                            
00012148                            ; ===========================================================================
00012148                            ; ---------------------------------------------------------------------------
00012148                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012148                            ; ---------------------------------------------------------------------------
00012148                            
00012148                            Obj5F:					; XREF: Obj_Index
00012148 7000                       		moveq	#0,d0
0001214A 1028 0024                  		move.b	$24(a0),d0
0001214E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012152 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012156                            ; ===========================================================================
00012156 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012158 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001215A 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001215C 0000                       		dc.w Obj5F_End-Obj5F_Index
0001215E                            ; ===========================================================================
0001215E                            
0001215E                            Obj5F_Main:				; XREF: Obj5F_Index
0001215E 5428 0024                  		addq.b	#2,$24(a0)
00012162 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001216A 317C 0400 0002             		move.w	#$400,2(a0)
00012170 0028 0004 0001             		ori.b	#4,1(a0)
00012176 117C 0003 0018             		move.b	#3,$18(a0)
0001217C 117C 000C 0019             		move.b	#$C,$19(a0)
00012182 1028 0028                  		move.b	$28(a0),d0
00012186 6700                       		beq.s	loc_11A3C
00012188 1140 0024                  		move.b	d0,$24(a0)
0001218C 4E75                       		rts	
0001218E                            ; ===========================================================================
0001218E                            
0001218E                            loc_11A3C:
0001218E 117C 009A 0020             		move.b	#$9A,$20(a0)
00012194 0868 0000 0022             		bchg	#0,$22(a0)
0001219A                            
0001219A                            Obj5F_Action:				; XREF: Obj5F_Index
0001219A 7000                       		moveq	#0,d0
0001219C 1028 0025                  		move.b	$25(a0),d0
000121A0 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000121A4 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000121A8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121AE 6100 8C82                  		bsr.w	AnimateSprite
000121B2 6000 DC66                  		bra.w	MarkObjGone
000121B6                            ; ===========================================================================
000121B6 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000121B8 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000121BA 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000121BC                            ; ===========================================================================
000121BC                            
000121BC                            Obj5F_Walk:				; XREF: Obj5F_Index2
000121BC 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121C4 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000121C6 5428 0025                  		addq.b	#2,$25(a0)
000121CA 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000121D0 317C 0010 0010             		move.w	#$10,$10(a0)
000121D6 117C 0001 001C             		move.b	#1,$1C(a0)
000121DC 0868 0000 0022             		bchg	#0,$22(a0)
000121E2 6700                       		beq.s	locret_11A96
000121E4 4468 0010                  		neg.w	$10(a0)		; change direction
000121E8                            
000121E8                            locret_11A96:
000121E8 4E75                       		rts	
000121EA                            ; ===========================================================================
000121EA                            
000121EA                            Obj5F_Wait:				; XREF: Obj5F_Index2
000121EA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121F2 6B00                       		bmi.s	loc_11AA8
000121F4 6100 BB56                  		bsr.w	SpeedToPos
000121F8 4E75                       		rts	
000121FA                            ; ===========================================================================
000121FA                            
000121FA                            loc_11AA8:
000121FA 5528 0025                  		subq.b	#2,$25(a0)
000121FE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012204 4268 0010                  		clr.w	$10(a0)		; stop walking
00012208 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012210 5368 0030                  		subq.w	#1,$30(a0)
00012214 6A00                       		bpl.s	locret_11AD0
00012216 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001221A 117C 0000 0024             		move.b	#0,$24(a0)
00012220                            
00012220                            locret_11AD0:
00012220 4E75                       		rts	
00012222                            ; ===========================================================================
00012222                            
00012222                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012222 3038 D008                  		move.w	($FFFFD008).w,d0
00012226 9068 0008                  		sub.w	8(a0),d0
0001222A 6400                       		bcc.s	loc_11ADE
0001222C 4440                       		neg.w	d0
0001222E                            
0001222E                            loc_11ADE:
0001222E 0C40 0060                  		cmpi.w	#$60,d0
00012232 6400                       		bcc.s	locret_11B5E
00012234 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012238 9068 000C                  		sub.w	$C(a0),d0
0001223C 6400                       		bcc.s	Obj5F_MakeFuse
0001223E 4440                       		neg.w	d0
00012240                            
00012240                            Obj5F_MakeFuse:
00012240 0C40 0060                  		cmpi.w	#$60,d0
00012244 6400                       		bcc.s	locret_11B5E
00012246 4A78 FE08                  		tst.w	($FFFFFE08).w
0001224A 6600                       		bne.s	locret_11B5E
0001224C 117C 0004 0025             		move.b	#4,$25(a0)
00012252 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012258 4268 0010                  		clr.w	$10(a0)
0001225C 117C 0002 001C             		move.b	#2,$1C(a0)
00012262 6100 BFAA                  		bsr.w	SingleObjLoad2
00012266 6600                       		bne.s	locret_11B5E
00012268 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001226C 3368 0008 0008             		move.w	8(a0),8(a1)
00012272 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012278 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001227E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012284 137C 0004 0028             		move.b	#4,$28(a1)
0001228A 137C 0003 001C             		move.b	#3,$1C(a1)
00012290 337C 0010 0012             		move.w	#$10,$12(a1)
00012296 0828 0001 0022             		btst	#1,$22(a0)
0001229C 6700                       		beq.s	loc_11B54
0001229E 4469 0012                  		neg.w	$12(a1)
000122A2                            
000122A2                            loc_11B54:
000122A2 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000122A8 2348 003C                  		move.l	a0,$3C(a1)
000122AC                            
000122AC                            locret_11B5E:
000122AC 4E75                       		rts	
000122AE                            ; ===========================================================================
000122AE                            
000122AE                            Obj5F_Display:				; XREF: Obj5F_Index
000122AE 6100                       		bsr.s	loc_11B70
000122B0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122B6 6100 8B7A                  		bsr.w	AnimateSprite
000122BA 6000 DB5E                  		bra.w	MarkObjGone
000122BE                            ; ===========================================================================
000122BE                            
000122BE                            loc_11B70:
000122BE 5368 0030                  		subq.w	#1,$30(a0)
000122C2 6B00                       		bmi.s	loc_11B7C
000122C4 6100 BA86                  		bsr.w	SpeedToPos
000122C8 4E75                       		rts	
000122CA                            ; ===========================================================================
000122CA                            
000122CA                            loc_11B7C:
000122CA 4268 0030                  		clr.w	$30(a0)
000122CE 4228 0024                  		clr.b	$24(a0)
000122D2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000122D8 7203                       		moveq	#3,d1
000122DA 2248                       		movea.l	a0,a1
000122DC 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000122E2 6000                       		bra.s	Obj5F_MakeShrap
000122E4                            ; ===========================================================================
000122E4                            
000122E4                            Obj5F_Loop:
000122E4 6100 BF28                  		bsr.w	SingleObjLoad2
000122E8 6600                       		bne.s	loc_11BCE
000122EA                            
000122EA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000122EA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000122EE 3368 0008 0008             		move.w	8(a0),8(a1)
000122F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122FA 137C 0006 0028             		move.b	#6,$28(a1)
00012300 137C 0004 001C             		move.b	#4,$1C(a1)
00012306 335A 0010                  		move.w	(a2)+,$10(a1)
0001230A 335A 0012                  		move.w	(a2)+,$12(a1)
0001230E 137C 0098 0020             		move.b	#$98,$20(a1)
00012314 08E9 0007 0001             		bset	#7,1(a1)
0001231A                            
0001231A                            loc_11BCE:
0001231A 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001231E                            
0001231E 117C 0006 0024             		move.b	#6,$24(a0)
00012324                            
00012324                            Obj5F_End:				; XREF: Obj5F_Index
00012324 6100 BA26                  		bsr.w	SpeedToPos
00012328 0668 0018 0012             		addi.w	#$18,$12(a0)
0001232E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012334 6100 8AFC                  		bsr.w	AnimateSprite
00012338 4A28 0001                  		tst.b	1(a0)
0001233C 6A00 BA70                  		bpl.w	DeleteObject
00012340 6000 BA30                  		bra.w	DisplaySprite
00012344                            ; ===========================================================================
00012344 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012354                            
00012354                            Ani_obj5F:
00012354                            	include "_anim\obj5F.asm"
00012354                            ; ---------------------------------------------------------------------------
00012354                            ; Animation script - Bomb enemy
00012354                            ; ---------------------------------------------------------------------------
00012354 0000                       		dc.w byte_11C12-Ani_obj5F
00012356 0000                       		dc.w byte_11C16-Ani_obj5F
00012358 0000                       		dc.w byte_11C1C-Ani_obj5F
0001235A 0000                       		dc.w byte_11C20-Ani_obj5F
0001235C 0000                       		dc.w byte_11C24-Ani_obj5F
0001235E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012362 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012368 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001236C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012370 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012374                            		even
00012374                            		even
00012374                            
00012374                            ; ---------------------------------------------------------------------------
00012374                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012374                            ; ---------------------------------------------------------------------------
00012374                            Map_obj5F:
00012374                            	include "_maps\obj5F.asm"
00012374                            ; ---------------------------------------------------------------------------
00012374                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012374                            ; ---------------------------------------------------------------------------
00012374 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012378 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001237C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012380 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012384 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012388 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001238C 03                         byte_11C40:	dc.b 3
0001238D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012392 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012397 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001239C 03                         byte_11C50:	dc.b 3
0001239D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123A2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123A7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123AC 03                         byte_11C60:	dc.b 3
000123AD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123B2 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000123B7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123BC 03                         byte_11C70:	dc.b 3
000123BD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123C2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000123C7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123CC 03                         byte_11C80:	dc.b 3
000123CD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123D2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000123D7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123DC 03                         byte_11C90:	dc.b 3
000123DD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123E2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000123E7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123EC 02                         byte_11CA0:	dc.b 2
000123ED F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123F2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123F7 02                         byte_11CAB:	dc.b 2
000123F8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123FD 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012402 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012403 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012408 01                         byte_11CBC:	dc.b 1			; fuse
00012409 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001240E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001240F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012414 01                         byte_11CC8:	dc.b 1			; fireball
00012415 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001241A                            		even
0001241A                            		even
0001241A                            
0001241A                            ; ===========================================================================
0001241A                            ; ---------------------------------------------------------------------------
0001241A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001241A                            ; ---------------------------------------------------------------------------
0001241A                            
0001241A                            Obj60:					; XREF: Obj_Index
0001241A 7000                       		moveq	#0,d0
0001241C 1028 0024                  		move.b	$24(a0),d0
00012420 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012424 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012428                            ; ===========================================================================
00012428 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001242A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001242C 0000                       		dc.w Obj60_Display-Obj60_Index
0001242E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012430 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012432                            ; ===========================================================================
00012432                            
00012432                            Obj60_Main:				; XREF: Obj60_Index
00012432 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001243A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012440 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012446 6700                       		beq.s	loc_11D02
00012448 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001244E                            
0001244E                            loc_11D02:
0001244E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012454 6600                       		bne.s	loc_11D10
00012456 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001245C                            
0001245C                            loc_11D10:
0001245C 0028 0004 0001             		ori.b	#4,1(a0)
00012462 117C 0004 0018             		move.b	#4,$18(a0)
00012468 117C 000B 0020             		move.b	#$B,$20(a0)
0001246E 117C 000C 0019             		move.b	#$C,$19(a0)
00012474 7400                       		moveq	#0,d2
00012476 45E8 0037                  		lea	$37(a0),a2
0001247A 264A                       		movea.l	a2,a3
0001247C 524A                       		addq.w	#1,a2
0001247E 7203                       		moveq	#3,d1
00012480                            
00012480                            Obj60_MakeOrbs:
00012480 6100 BD8C                  		bsr.w	SingleObjLoad2
00012484 6600                       		bne.s	loc_11D90
00012486 5213                       		addq.b	#1,(a3)
00012488 3A09                       		move.w	a1,d5
0001248A 0445 D000                  		subi.w	#-$3000,d5
0001248E EC4D                       		lsr.w	#6,d5
00012490 0245 007F                  		andi.w	#$7F,d5
00012494 14C5                       		move.b	d5,(a2)+
00012496 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012498 137C 0006 0024             		move.b	#6,$24(a1)
0001249E 2368 0004 0004             		move.l	4(a0),4(a1)
000124A4 3368 0002 0002             		move.w	2(a0),2(a1)
000124AA 0029 0004 0001             		ori.b	#4,1(a1)
000124B0 137C 0004 0018             		move.b	#4,$18(a1)
000124B6 137C 0008 0019             		move.b	#8,$19(a1)
000124BC 137C 0003 001A             		move.b	#3,$1A(a1)
000124C2 137C 0098 0020             		move.b	#$98,$20(a1)
000124C8 1342 0026                  		move.b	d2,$26(a1)
000124CC 0602 0040                  		addi.b	#$40,d2
000124D0 2348 003C                  		move.l	a0,$3C(a1)
000124D4 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000124D8                            
000124D8                            loc_11D90:
000124D8 7001                       		moveq	#1,d0
000124DA 0828 0000 0022             		btst	#0,$22(a0)
000124E0 6700                       		beq.s	Obj60_Move
000124E2 4440                       		neg.w	d0
000124E4                            
000124E4                            Obj60_Move:
000124E4 1140 0036                  		move.b	d0,$36(a0)
000124E8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000124EE 5428 0024                  		addq.b	#2,$24(a0)
000124F2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000124F8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000124FE 6700                       		beq.s	locret_11DBC	; if not, branch
00012500 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012504                            
00012504                            locret_11DBC:
00012504 4E75                       		rts	
00012506                            ; ===========================================================================
00012506                            
00012506                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012506 3038 D008                  		move.w	($FFFFD008).w,d0
0001250A 9068 0008                  		sub.w	8(a0),d0
0001250E 6400                       		bcc.s	loc_11DCA
00012510 4440                       		neg.w	d0
00012512                            
00012512                            loc_11DCA:
00012512 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012516 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012518 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001251C 9068 000C                  		sub.w	$C(a0),d0
00012520 6400                       		bcc.s	loc_11DDC
00012522 4440                       		neg.w	d0
00012524                            
00012524                            loc_11DDC:
00012524 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012528 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001252A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001252E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012530 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012536                            
00012536                            Obj60_Animate:
00012536 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001253C 6100 88F4                  		bsr.w	AnimateSprite
00012540 6000 0000                  		bra.w	Obj60_ChkDel
00012544                            ; ===========================================================================
00012544                            
00012544                            Obj60_Display:				; XREF: Obj60_Index
00012544 6100 B806                  		bsr.w	SpeedToPos
00012548                            
00012548                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012548 3028 0008                  		move.w	8(a0),d0
0001254C 0240 FF80                  		andi.w	#$FF80,d0
00012550 3238 F700                  		move.w	($FFFFF700).w,d1
00012554 0441 0080                  		subi.w	#$80,d1
00012558 0241 FF80                  		andi.w	#$FF80,d1
0001255C 9041                       		sub.w	d1,d0
0001255E 0C40 0280                  		cmpi.w	#$280,d0
00012562 6200 0000                  		bhi.w	Obj60_ChkGone
00012566 6000 B80A                  		bra.w	DisplaySprite
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001256A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001256E 7000                       		moveq	#0,d0
00012570 1028 0023                  		move.b	$23(a0),d0
00012574 6700                       		beq.s	loc_11E34
00012576 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001257C                            
0001257C                            loc_11E34:
0001257C 45E8 0037                  		lea	$37(a0),a2
00012580 7400                       		moveq	#0,d2
00012582 141A                       		move.b	(a2)+,d2
00012584 5342                       		subq.w	#1,d2
00012586 6500                       		bcs.s	Obj60_Delete
00012588                            
00012588                            loc_11E40:
00012588 7000                       		moveq	#0,d0
0001258A 101A                       		move.b	(a2)+,d0
0001258C ED48                       		lsl.w	#6,d0
0001258E 0680 00FF D000             		addi.l	#$FFD000,d0
00012594 2240                       		movea.l	d0,a1
00012596 6100 B818                  		bsr.w	DeleteObject2
0001259A 51CA FFEC                  		dbf	d2,loc_11E40
0001259E                            
0001259E                            Obj60_Delete:
0001259E 6000 B80E                  		bra.w	DeleteObject
000125A2                            ; ===========================================================================
000125A2                            
000125A2                            Obj60_MoveOrb:				; XREF: Obj60_Index
000125A2 2268 003C                  		movea.l	$3C(a0),a1
000125A6 0C11 0060                  		cmpi.b	#$60,0(a1)
000125AA 6600 B802                  		bne.w	DeleteObject
000125AE 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000125B4 6600                       		bne.s	Obj60_Circle
000125B6 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000125BC 6600                       		bne.s	Obj60_Circle
000125BE 5428 0024                  		addq.b	#2,$24(a0)
000125C2 5329 0037                  		subq.b	#1,$37(a1)
000125C6 6600                       		bne.s	Obj60_FireOrb
000125C8 5429 0024                  		addq.b	#2,$24(a1)
000125CC                            
000125CC                            Obj60_FireOrb:
000125CC 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000125D2 0829 0000 0022             		btst	#0,$22(a1)
000125D8 6700                       		beq.s	Obj60_Display2
000125DA 4468 0010                  		neg.w	$10(a0)
000125DE                            
000125DE                            Obj60_Display2:
000125DE 6000 B792                  		bra.w	DisplaySprite
000125E2                            ; ===========================================================================
000125E2                            
000125E2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000125E2 1028 0026                  		move.b	$26(a0),d0
000125E6 4EB9 0000 2C64             		jsr	(CalcSine).l
000125EC E841                       		asr.w	#4,d1
000125EE D269 0008                  		add.w	8(a1),d1
000125F2 3141 0008                  		move.w	d1,8(a0)
000125F6 E840                       		asr.w	#4,d0
000125F8 D069 000C                  		add.w	$C(a1),d0
000125FC 3140 000C                  		move.w	d0,$C(a0)
00012600 1029 0036                  		move.b	$36(a1),d0
00012604 D128 0026                  		add.b	d0,$26(a0)
00012608 6000 B768                  		bra.w	DisplaySprite
0001260C                            ; ===========================================================================
0001260C                            
0001260C                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001260C 6100 B73E                  		bsr.w	SpeedToPos
00012610 4A28 0001                  		tst.b	1(a0)
00012614 6A00 B798                  		bpl.w	DeleteObject
00012618 6000 B758                  		bra.w	DisplaySprite
0001261C                            ; ===========================================================================
0001261C                            Ani_obj60:
0001261C                            	include "_anim\obj60.asm"
0001261C                            ; ---------------------------------------------------------------------------
0001261C                            ; Animation script - Orbinaut enemy
0001261C                            ; ---------------------------------------------------------------------------
0001261C 0000                       		dc.w byte_11EDA-Ani_obj60
0001261E 0000                       		dc.w byte_11EDE-Ani_obj60
00012620 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012624 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001262A                            		even
0001262A                            		even
0001262A                            
0001262A                            ; ---------------------------------------------------------------------------
0001262A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001262A                            ; ---------------------------------------------------------------------------
0001262A                            Map_obj60:
0001262A                            	include "_maps\obj60.asm"
0001262A                            ; ---------------------------------------------------------------------------
0001262A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001262A                            ; ---------------------------------------------------------------------------
0001262A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001262E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012632 01                         byte_11EEC:	dc.b 1
00012633 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012638 01                         byte_11EF2:	dc.b 1
00012639 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001263E 01                         byte_11EF8:	dc.b 1
0001263F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012644 01                         byte_11EFE:	dc.b 1
00012645 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001264A                            		even
0001264A                            		even
0001264A                            
0001264A                            ; ===========================================================================
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            ; Object 16 - harpoon (LZ)
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            
0001264A                            Obj16:					; XREF: Obj_Index
0001264A 7000                       		moveq	#0,d0
0001264C 1028 0024                  		move.b	$24(a0),d0
00012650 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012654 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012658                            ; ===========================================================================
00012658 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001265A 0000                       		dc.w Obj16_Move-Obj16_Index
0001265C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001265E                            ; ===========================================================================
0001265E                            
0001265E                            Obj16_Main:				; XREF: Obj16_Index
0001265E 5428 0024                  		addq.b	#2,$24(a0)
00012662 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001266A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012670 0028 0004 0001             		ori.b	#4,1(a0)
00012676 117C 0004 0018             		move.b	#4,$18(a0)
0001267C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012682 117C 0014 0019             		move.b	#$14,$19(a0)
00012688 317C 003C 0030             		move.w	#60,$30(a0)
0001268E                            
0001268E                            Obj16_Move:				; XREF: Obj16_Index
0001268E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012694 6100 879C                  		bsr.w	AnimateSprite
00012698 7000                       		moveq	#0,d0
0001269A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001269E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000126A4 6000 D774                  		bra.w	MarkObjGone
000126A8                            ; ===========================================================================
000126A8 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            Obj16_Wait:				; XREF: Obj16_Index
000126AE 5368 0030                  		subq.w	#1,$30(a0)
000126B2 6A00                       		bpl.s	Obj16_ChkDel
000126B4 317C 003C 0030             		move.w	#60,$30(a0)
000126BA 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000126BE 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000126C4                            
000126C4                            Obj16_ChkDel:
000126C4 6000 D754                  		bra.w	MarkObjGone
000126C8                            ; ===========================================================================
000126C8                            Ani_obj16:
000126C8                            	include "_anim\obj16.asm"
000126C8                            ; ---------------------------------------------------------------------------
000126C8                            ; Animation script - harpoon (LZ)
000126C8                            ; ---------------------------------------------------------------------------
000126C8 0000                       		dc.w byte_11F8A-Ani_obj16
000126CA 0000                       		dc.w byte_11F8E-Ani_obj16
000126CC 0000                       		dc.w byte_11F92-Ani_obj16
000126CE 0000                       		dc.w byte_11F96-Ani_obj16
000126D0 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000126D4 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000126D8 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000126DC 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000126E0                            		even
000126E0                            		even
000126E0                            
000126E0                            ; ---------------------------------------------------------------------------
000126E0                            ; Sprite mappings - harpoon (LZ)
000126E0                            ; ---------------------------------------------------------------------------
000126E0                            Map_obj16:
000126E0                            	include "_maps\obj16.asm"
000126E0                            ; ---------------------------------------------------------------------------
000126E0                            ; Sprite mappings - harpoon (LZ)
000126E0                            ; ---------------------------------------------------------------------------
000126E0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000126E4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000126E8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000126EC 01                         byte_11FA6:	dc.b 1
000126ED FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000126F2 01                         byte_11FAC:	dc.b 1
000126F3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000126F8 02                         byte_11FB2:	dc.b 2
000126F9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000126FE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012703 01                         byte_11FBD:	dc.b 1
00012704 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012709 01                         byte_11FC3:	dc.b 1
0001270A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001270F 02                         byte_11FC9:	dc.b 2
00012710 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012715 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001271A                            		even
0001271A                            		even
0001271A                            
0001271A                            ; ===========================================================================
0001271A                            ; ---------------------------------------------------------------------------
0001271A                            ; Object 61 - blocks (LZ)
0001271A                            ; ---------------------------------------------------------------------------
0001271A                            
0001271A                            Obj61:					; XREF: Obj_Index
0001271A 7000                       		moveq	#0,d0
0001271C 1028 0024                  		move.b	$24(a0),d0
00012720 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012724 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012728                            ; ===========================================================================
00012728 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001272A 0000                       		dc.w Obj61_Action-Obj61_Index
0001272C                            
0001272C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001272E 200C                       		dc.b $20, $C
00012730 1010                       		dc.b $10, $10
00012732 1010                       		dc.b $10, $10
00012734                            ; ===========================================================================
00012734                            
00012734                            Obj61_Main:				; XREF: Obj61_Index
00012734 5428 0024                  		addq.b	#2,$24(a0)
00012738 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012740 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012746 117C 0004 0001             		move.b	#4,1(a0)
0001274C 117C 0003 0018             		move.b	#3,$18(a0)
00012752 7000                       		moveq	#0,d0
00012754 1028 0028                  		move.b	$28(a0),d0
00012758 E648                       		lsr.w	#3,d0
0001275A 0240 000E                  		andi.w	#$E,d0
0001275E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012762 115A 0019                  		move.b	(a2)+,$19(a0)
00012766 1152 0016                  		move.b	(a2),$16(a0)
0001276A E248                       		lsr.w	#1,d0
0001276C 1140 001A                  		move.b	d0,$1A(a0)
00012770 3168 0008 0034             		move.w	8(a0),$34(a0)
00012776 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001277C 1028 0028                  		move.b	$28(a0),d0
00012780 0200 000F                  		andi.b	#$F,d0
00012784 6700                       		beq.s	Obj61_Action
00012786 0C00 0007                  		cmpi.b	#7,d0
0001278A 6700                       		beq.s	Obj61_Action
0001278C 117C 0001 0038             		move.b	#1,$38(a0)
00012792                            
00012792                            Obj61_Action:				; XREF: Obj61_Index
00012792 3F28 0008                  		move.w	8(a0),-(sp)
00012796 7000                       		moveq	#0,d0
00012798 1028 0028                  		move.b	$28(a0),d0
0001279C 0240 000F                  		andi.w	#$F,d0
000127A0 D040                       		add.w	d0,d0
000127A2 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000127A6 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000127AA 381F                       		move.w	(sp)+,d4
000127AC 4A28 0001                  		tst.b	1(a0)
000127B0 6A00                       		bpl.s	Obj61_ChkDel
000127B2 7200                       		moveq	#0,d1
000127B4 1228 0019                  		move.b	$19(a0),d1
000127B8 0641 000B                  		addi.w	#$B,d1
000127BC 7400                       		moveq	#0,d2
000127BE 1428 0016                  		move.b	$16(a0),d2
000127C2 3602                       		move.w	d2,d3
000127C4 5243                       		addq.w	#1,d3
000127C6 6100 D97A                  		bsr.w	SolidObject
000127CA 1144 003F                  		move.b	d4,$3F(a0)
000127CE 6100 0000                  		bsr.w	loc_12180
000127D2                            
000127D2                            Obj61_ChkDel:
000127D2 3028 0034                  		move.w	$34(a0),d0
000127D6 0240 FF80                  		andi.w	#$FF80,d0
000127DA 3238 F700                  		move.w	($FFFFF700).w,d1
000127DE 0441 0080                  		subi.w	#$80,d1
000127E2 0241 FF80                  		andi.w	#$FF80,d1
000127E6 9041                       		sub.w	d1,d0
000127E8 0C40 0280                  		cmpi.w	#$280,d0
000127EC 6200 B5C0                  		bhi.w	DeleteObject
000127F0 6000 B580                  		bra.w	DisplaySprite
000127F4                            ; ===========================================================================
000127F4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127F8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127FC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012800 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012804                            ; ===========================================================================
00012804                            
00012804                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012804 4E75                       		rts	
00012806                            ; ===========================================================================
00012806                            
00012806                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012806 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001280A 6600                       		bne.s	loc_120D6	; if yes, branch
0001280C 0828 0003 0022             		btst	#3,$22(a0)
00012812 6700                       		beq.s	locret_120D4
00012814 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001281A                            
0001281A                            locret_120D4:
0001281A 4E75                       		rts	
0001281C                            ; ===========================================================================
0001281C                            
0001281C                            loc_120D6:
0001281C 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012820 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012822 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012826 4228 0038                  		clr.b	$38(a0)
0001282A 4E75                       		rts	
0001282C                            ; ===========================================================================
0001282C                            
0001282C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001282C 6100 B51E                  		bsr.w	SpeedToPos
00012830 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012834 6100 0000                  		bsr.w	ObjHitFloor
00012838 4A41                       		tst.w	d1
0001283A 6A00 0000                  		bpl.w	locret_12106
0001283E 5241                       		addq.w	#1,d1
00012840 D368 000C                  		add.w	d1,$C(a0)
00012844 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012848 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001284C                            
0001284C                            locret_12106:
0001284C 4E75                       		rts	
0001284E                            ; ===========================================================================
0001284E                            
0001284E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001284E 6100 B4FC                  		bsr.w	SpeedToPos
00012852 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012856 6100 0000                  		bsr.w	ObjHitCeiling
0001285A 4A41                       		tst.w	d1
0001285C 6A00 0000                  		bpl.w	locret_12126
00012860 9368 000C                  		sub.w	d1,$C(a0)
00012864 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012868 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001286C                            
0001286C                            locret_12126:
0001286C 4E75                       		rts	
0001286E                            ; ===========================================================================
0001286E                            
0001286E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001286E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012874 6600                       		bne.s	locret_12138	; if not, branch
00012876 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001287A 4228 0038                  		clr.b	$38(a0)
0001287E                            
0001287E                            locret_12138:
0001287E 4E75                       		rts	
00012880                            ; ===========================================================================
00012880                            
00012880                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012880 3038 F646                  		move.w	($FFFFF646).w,d0
00012884 9068 000C                  		sub.w	$C(a0),d0
00012888 6700                       		beq.s	locret_1217E
0001288A 6400                       		bcc.s	loc_12162
0001288C 0C40 FFFE                  		cmpi.w	#-2,d0
00012890 6C00                       		bge.s	loc_1214E
00012892 70FE                       		moveq	#-2,d0
00012894                            
00012894                            loc_1214E:
00012894 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012898 6100 0000                  		bsr.w	ObjHitCeiling
0001289C 4A41                       		tst.w	d1
0001289E 6A00 0000                  		bpl.w	locret_12160
000128A2 9368 000C                  		sub.w	d1,$C(a0)
000128A6                            
000128A6                            locret_12160:
000128A6 4E75                       		rts	
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            loc_12162:				; XREF: Obj61_Type07
000128A8 0C40 0002                  		cmpi.w	#2,d0
000128AC 6F00                       		ble.s	loc_1216A
000128AE 7002                       		moveq	#2,d0
000128B0                            
000128B0                            loc_1216A:
000128B0 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000128B4 6100 0000                  		bsr.w	ObjHitFloor
000128B8 4A41                       		tst.w	d1
000128BA 6A00 0000                  		bpl.w	locret_1217E
000128BE 5241                       		addq.w	#1,d1
000128C0 D368 000C                  		add.w	d1,$C(a0)
000128C4                            
000128C4                            locret_1217E:
000128C4 4E75                       		rts	
000128C6                            ; ===========================================================================
000128C6                            
000128C6                            loc_12180:				; XREF: Obj61_Action
000128C6 4A28 0038                  		tst.b	$38(a0)
000128CA 6700                       		beq.s	locret_121C0
000128CC 0828 0003 0022             		btst	#3,$22(a0)
000128D2 6600                       		bne.s	loc_1219A
000128D4 4A28 003E                  		tst.b	$3E(a0)
000128D8 6700                       		beq.s	locret_121C0
000128DA 5928 003E                  		subq.b	#4,$3E(a0)
000128DE 6000                       		bra.s	loc_121A6
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            loc_1219A:
000128E0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000128E6 6700                       		beq.s	locret_121C0
000128E8 5828 003E                  		addq.b	#4,$3E(a0)
000128EC                            
000128EC                            loc_121A6:
000128EC 1028 003E                  		move.b	$3E(a0),d0
000128F0 4EB9 0000 2C64             		jsr	(CalcSine).l
000128F6 323C 0400                  		move.w	#$400,d1
000128FA C1C1                       		muls.w	d1,d0
000128FC 4840                       		swap	d0
000128FE D068 0030                  		add.w	$30(a0),d0
00012902 3140 000C                  		move.w	d0,$C(a0)
00012906                            
00012906                            locret_121C0:
00012906 4E75                       		rts	
00012908                            ; ===========================================================================
00012908                            ; ---------------------------------------------------------------------------
00012908                            ; Sprite mappings - blocks (LZ)
00012908                            ; ---------------------------------------------------------------------------
00012908                            Map_obj61:
00012908                            	include "_maps\obj61.asm"
00012908                            ; ---------------------------------------------------------------------------
00012908                            ; Sprite mappings - blocks (LZ)
00012908                            ; ---------------------------------------------------------------------------
00012908 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001290C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012910 01                         byte_121CA:	dc.b 1
00012911 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012916 02                         byte_121D0:	dc.b 2
00012917 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001291C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012921 01                         byte_121DB:	dc.b 1
00012922 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012927 01                         byte_121E1:	dc.b 1
00012928 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001292E 00                         		even
0001292E 00                         		even
0001292E                            
0001292E                            ; ===========================================================================
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Object 62 - gargoyle head (LZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            
0001292E                            Obj62:					; XREF: Obj_Index
0001292E 7000                       		moveq	#0,d0
00012930 1028 0024                  		move.b	$24(a0),d0
00012934 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012938 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001293C 6000 D4DC                  		bra.w	MarkObjGone
00012940                            ; ===========================================================================
00012940 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012942 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012944 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012946 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012948                            
00012948 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012950                            ; ===========================================================================
00012950                            
00012950                            Obj62_Main:				; XREF: Obj62_Index
00012950 5428 0024                  		addq.b	#2,$24(a0)
00012954 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001295C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012962 0028 0004 0001             		ori.b	#4,1(a0)
00012968 117C 0003 0018             		move.b	#3,$18(a0)
0001296E 117C 0010 0019             		move.b	#$10,$19(a0)
00012974 1028 0028                  		move.b	$28(a0),d0	; get object type
00012978 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001297C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012982 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012988 0228 000F 0028             		andi.b	#$F,$28(a0)
0001298E                            
0001298E                            Obj62_MakeFire:				; XREF: Obj62_Index
0001298E 5328 001E                  		subq.b	#1,$1E(a0)
00012992 6600                       		bne.s	Obj62_NoFire
00012994 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001299A 6100 B650                  		bsr.w	ChkObjOnScreen
0001299E 6600                       		bne.s	Obj62_NoFire
000129A0 6100 B856                  		bsr.w	SingleObjLoad
000129A4 6600                       		bne.s	Obj62_NoFire
000129A6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000129AA 5829 0024                  		addq.b	#4,$24(a1)
000129AE 3368 0008 0008             		move.w	8(a0),8(a1)
000129B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129BA 1368 0001 0001             		move.b	1(a0),1(a1)
000129C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000129C6                            
000129C6                            Obj62_NoFire:
000129C6 4E75                       		rts	
000129C8                            ; ===========================================================================
000129C8                            
000129C8                            Obj62_FireBall:				; XREF: Obj62_Index
000129C8 5428 0024                  		addq.b	#2,$24(a0)
000129CC 117C 0008 0016             		move.b	#8,$16(a0)
000129D2 117C 0008 0017             		move.b	#8,$17(a0)
000129D8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129E0 317C 02E9 0002             		move.w	#$2E9,2(a0)
000129E6 0028 0004 0001             		ori.b	#4,1(a0)
000129EC 117C 0004 0018             		move.b	#4,$18(a0)
000129F2 117C 0098 0020             		move.b	#$98,$20(a0)
000129F8 117C 0008 0019             		move.b	#8,$19(a0)
000129FE 117C 0002 001A             		move.b	#2,$1A(a0)
00012A04 5068 000C                  		addq.w	#8,$C(a0)
00012A08 317C 0200 0010             		move.w	#$200,$10(a0)
00012A0E 0828 0000 0022             		btst	#0,$22(a0)
00012A14 6600                       		bne.s	Obj62_Sound
00012A16 4468 0010                  		neg.w	$10(a0)
00012A1A                            
00012A1A                            Obj62_Sound:
00012A1A 303C 00AE                  		move.w	#$AE,d0
00012A1E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A24                            
00012A24                            Obj62_AniFire:				; XREF: Obj62_Index
00012A24 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A28 0200 0007                  		andi.b	#7,d0
00012A2C 6600                       		bne.s	Obj62_StopFire
00012A2E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A34                            
00012A34                            Obj62_StopFire:
00012A34 6100 B316                  		bsr.w	SpeedToPos
00012A38 0828 0000 0022             		btst	#0,$22(a0)
00012A3E 6600                       		bne.s	Obj62_StopFire2
00012A40 76F8                       		moveq	#-8,d3
00012A42 6100 0000                  		bsr.w	ObjHitWallLeft
00012A46 4A41                       		tst.w	d1
00012A48 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012A4C 4E75                       		rts	
00012A4E                            ; ===========================================================================
00012A4E                            
00012A4E                            Obj62_StopFire2:
00012A4E 7608                       		moveq	#8,d3
00012A50 6100 0000                  		bsr.w	ObjHitWallRight
00012A54 4A41                       		tst.w	d1
00012A56 6B00 B356                  		bmi.w	DeleteObject
00012A5A 4E75                       		rts	
00012A5C                            ; ===========================================================================
00012A5C                            ; ---------------------------------------------------------------------------
00012A5C                            ; Sprite mappings - gargoyle head (LZ)
00012A5C                            ; ---------------------------------------------------------------------------
00012A5C                            Map_obj62:
00012A5C                            	include "_maps\obj62.asm"
00012A5C                            ; ---------------------------------------------------------------------------
00012A5C                            ; Sprite mappings - gargoyle head (LZ)
00012A5C                            ; ---------------------------------------------------------------------------
00012A5C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012A60 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012A64 03                         byte_12320:	dc.b 3
00012A65 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012A6A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012A6F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012A74 01                         byte_12330:	dc.b 1
00012A75 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012A7A 01                         byte_12336:	dc.b 1
00012A7B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012A80                            		even
00012A80                            		even
00012A80                            
00012A80                            ; ===========================================================================
00012A80                            ; ---------------------------------------------------------------------------
00012A80                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012A80                            ; ---------------------------------------------------------------------------
00012A80                            
00012A80                            Obj63:					; XREF: Obj_Index
00012A80 7000                       		moveq	#0,d0
00012A82 1028 0024                  		move.b	$24(a0),d0
00012A86 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012A8A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012A8E 3028 0030                  		move.w	$30(a0),d0
00012A92 0240 FF80                  		andi.w	#$FF80,d0
00012A96 3238 F700                  		move.w	($FFFFF700).w,d1
00012A9A 0441 0080                  		subi.w	#$80,d1
00012A9E 0241 FF80                  		andi.w	#$FF80,d1
00012AA2 9041                       		sub.w	d1,d0
00012AA4 0C40 0280                  		cmpi.w	#$280,d0
00012AA8 6200                       		bhi.s	loc_1236A
00012AAA                            
00012AAA                            Obj63_Display:				; XREF: loc_1236A
00012AAA 6000 B2C6                  		bra.w	DisplaySprite
00012AAE                            ; ===========================================================================
00012AAE                            
00012AAE                            loc_1236A:				; XREF: Obj63
00012AAE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012AB4 6600                       		bne.s	loc_12378
00012AB6 0C40 FF80                  		cmpi.w	#-$80,d0
00012ABA 64EE                       		bcc.s	Obj63_Display
00012ABC                            
00012ABC                            loc_12378:
00012ABC 1028 002F                  		move.b	$2F(a0),d0
00012AC0 6A00 B2EC                  		bpl.w	DeleteObject
00012AC4 0240 007F                  		andi.w	#$7F,d0
00012AC8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012ACC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012AD2 6000 B2DA                  		bra.w	DeleteObject
00012AD6                            ; ===========================================================================
00012AD6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012AD8 0000                       		dc.w loc_124B2-Obj63_Index
00012ADA 0000                       		dc.w loc_124C2-Obj63_Index
00012ADC 0000                       		dc.w loc_124DE-Obj63_Index
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            Obj63_Main:				; XREF: Obj63_Index
00012ADE 1028 0028                  		move.b	$28(a0),d0
00012AE2 6B00 0000                  		bmi.w	loc_12460
00012AE6 5428 0024                  		addq.b	#2,$24(a0)
00012AEA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012AF2 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012AF8 0028 0004 0001             		ori.b	#4,1(a0)
00012AFE 117C 0010 0019             		move.b	#$10,$19(a0)
00012B04 117C 0004 0018             		move.b	#4,$18(a0)
00012B0A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B10 6600                       		bne.s	loc_123E2
00012B12 5828 0024                  		addq.b	#4,$24(a0)
00012B16 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B1C 117C 0001 0018             		move.b	#1,$18(a0)
00012B22 6000 0000                  		bra.w	loc_124DE
00012B26                            ; ===========================================================================
00012B26                            
00012B26                            loc_123E2:
00012B26 117C 0004 001A             		move.b	#4,$1A(a0)
00012B2C 7000                       		moveq	#0,d0
00012B2E 1028 0028                  		move.b	$28(a0),d0
00012B32 3200                       		move.w	d0,d1
00012B34 E648                       		lsr.w	#3,d0
00012B36 0240 001E                  		andi.w	#$1E,d0
00012B3A 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B3E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B42 315A 0038                  		move.w	(a2)+,$38(a0)
00012B46 315A 0030                  		move.w	(a2)+,$30(a0)
00012B4A 214A 003C                  		move.l	a2,$3C(a0)
00012B4E 0241 000F                  		andi.w	#$F,d1
00012B52 E549                       		lsl.w	#2,d1
00012B54 1141 0038                  		move.b	d1,$38(a0)
00012B58 117C 0004 003A             		move.b	#4,$3A(a0)
00012B5E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B62 6700                       		beq.s	loc_1244C
00012B64 117C 0001 003B             		move.b	#1,$3B(a0)
00012B6A 4428 003A                  		neg.b	$3A(a0)
00012B6E 7200                       		moveq	#0,d1
00012B70 1228 0038                  		move.b	$38(a0),d1
00012B74 D228 003A                  		add.b	$3A(a0),d1
00012B78 B228 0039                  		cmp.b	$39(a0),d1
00012B7C 6500                       		bcs.s	loc_12448
00012B7E 1001                       		move.b	d1,d0
00012B80 7200                       		moveq	#0,d1
00012B82 4A00                       		tst.b	d0
00012B84 6A00                       		bpl.s	loc_12448
00012B86 1228 0039                  		move.b	$39(a0),d1
00012B8A 5901                       		subq.b	#4,d1
00012B8C                            
00012B8C                            loc_12448:
00012B8C 1141 0038                  		move.b	d1,$38(a0)
00012B90                            
00012B90                            loc_1244C:
00012B90 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012B96 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012B9C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012BA0 6000 0000                  		bra.w	loc_124B2
00012BA4                            ; ===========================================================================
00012BA4                            
00012BA4                            loc_12460:				; XREF: Obj63_Main
00012BA4 1140 002F                  		move.b	d0,$2F(a0)
00012BA8 0240 007F                  		andi.w	#$7F,d0
00012BAC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BB0 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012BB6 6600 B1F6                  		bne.w	DeleteObject
00012BBA D040                       		add.w	d0,d0
00012BBC 0240 001E                  		andi.w	#$1E,d0
00012BC0 0640 0070                  		addi.w	#$70,d0
00012BC4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012BCA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BCE 321A                       		move.w	(a2)+,d1
00012BD0 2248                       		movea.l	a0,a1
00012BD2 6000                       		bra.s	Obj63_MakePtfms
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            Obj63_Loop:
00012BD4 6100 B622                  		bsr.w	SingleObjLoad
00012BD8 6600                       		bne.s	loc_124AA
00012BDA                            
00012BDA                            Obj63_MakePtfms:			; XREF: loc_12460
00012BDA 12BC 0063                  		move.b	#$63,0(a1)
00012BDE 335A 0008                  		move.w	(a2)+,8(a1)
00012BE2 335A 000C                  		move.w	(a2)+,$C(a1)
00012BE6 301A                       		move.w	(a2)+,d0
00012BE8 1340 0028                  		move.b	d0,$28(a1)
00012BEC                            
00012BEC                            loc_124AA:
00012BEC 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012BF0                            
00012BF0 588F                       		addq.l	#4,sp
00012BF2 4E75                       		rts	
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            loc_124B2:				; XREF: Obj63_Index
00012BF4 7200                       		moveq	#0,d1
00012BF6 1228 0019                  		move.b	$19(a0),d1
00012BFA 4EB9 0000 79FC             		jsr	(PlatformObject).l
00012C00 6000 0000                  		bra.w	sub_12502
00012C04                            ; ===========================================================================
00012C04                            
00012C04                            loc_124C2:				; XREF: Obj63_Index
00012C04 7200                       		moveq	#0,d1
00012C06 1228 0019                  		move.b	$19(a0),d1
00012C0A 4EB9 0000 7B70             		jsr	(ExitPlatform).l
00012C10 3F28 0008                  		move.w	8(a0),-(sp)
00012C14 6100 0000                  		bsr.w	sub_12502
00012C18 341F                       		move.w	(sp)+,d2
00012C1A 4EF9 0000 80DA             		jmp	(MvSonicOnPtfm2).l
00012C20                            ; ===========================================================================
00012C20                            
00012C20                            loc_124DE:				; XREF: Obj63_Index
00012C20 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C24 0240 0003                  		andi.w	#3,d0
00012C28 6600                       		bne.s	loc_124FC
00012C2A 7201                       		moveq	#1,d1
00012C2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C30 6700                       		beq.s	loc_124F2
00012C32 4401                       		neg.b	d1
00012C34                            
00012C34                            loc_124F2:
00012C34 D328 001A                  		add.b	d1,$1A(a0)
00012C38 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C3E                            
00012C3E                            loc_124FC:
00012C3E 588F                       		addq.l	#4,sp
00012C40 6000 D1D8                  		bra.w	MarkObjGone
00012C44                            
00012C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C44                            
00012C44                            
00012C44                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C44 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C48 6700                       		beq.s	loc_12520
00012C4A 4A28 003B                  		tst.b	$3B(a0)
00012C4E 6600                       		bne.s	loc_12520
00012C50 117C 0001 003B             		move.b	#1,$3B(a0)
00012C56 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012C5C 4428 003A                  		neg.b	$3A(a0)
00012C60 6000                       		bra.s	loc_12534
00012C62                            ; ===========================================================================
00012C62                            
00012C62                            loc_12520:
00012C62 3028 0008                  		move.w	8(a0),d0
00012C66 B068 0034                  		cmp.w	$34(a0),d0
00012C6A 6600                       		bne.s	loc_1256A
00012C6C 3028 000C                  		move.w	$C(a0),d0
00012C70 B068 0036                  		cmp.w	$36(a0),d0
00012C74 6600                       		bne.s	loc_1256A
00012C76                            
00012C76                            loc_12534:
00012C76 7200                       		moveq	#0,d1
00012C78 1228 0038                  		move.b	$38(a0),d1
00012C7C D228 003A                  		add.b	$3A(a0),d1
00012C80 B228 0039                  		cmp.b	$39(a0),d1
00012C84 6500                       		bcs.s	loc_12552
00012C86 1001                       		move.b	d1,d0
00012C88 7200                       		moveq	#0,d1
00012C8A 4A00                       		tst.b	d0
00012C8C 6A00                       		bpl.s	loc_12552
00012C8E 1228 0039                  		move.b	$39(a0),d1
00012C92 5901                       		subq.b	#4,d1
00012C94                            
00012C94                            loc_12552:
00012C94 1141 0038                  		move.b	d1,$38(a0)
00012C98 2268 003C                  		movea.l	$3C(a0),a1
00012C9C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012CA2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012CA8 6100 0000                  		bsr.w	Obj63_ChangeDir
00012CAC                            
00012CAC                            loc_1256A:
00012CAC 6100 B09E                  		bsr.w	SpeedToPos
00012CB0 4E75                       		rts	
00012CB2                            ; End of function sub_12502
00012CB2                            
00012CB2                            
00012CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CB2                            
00012CB2                            
00012CB2                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012CB2 7000                       		moveq	#0,d0
00012CB4 343C FF00                  		move.w	#-$100,d2
00012CB8 3028 0008                  		move.w	8(a0),d0
00012CBC 9068 0034                  		sub.w	$34(a0),d0
00012CC0 6400                       		bcc.s	loc_12584
00012CC2 4440                       		neg.w	d0
00012CC4 4442                       		neg.w	d2
00012CC6                            
00012CC6                            loc_12584:
00012CC6 7200                       		moveq	#0,d1
00012CC8 363C FF00                  		move.w	#-$100,d3
00012CCC 3228 000C                  		move.w	$C(a0),d1
00012CD0 9268 0036                  		sub.w	$36(a0),d1
00012CD4 6400                       		bcc.s	loc_12598
00012CD6 4441                       		neg.w	d1
00012CD8 4443                       		neg.w	d3
00012CDA                            
00012CDA                            loc_12598:
00012CDA B240                       		cmp.w	d0,d1
00012CDC 6500                       		bcs.s	loc_125C2
00012CDE 3028 0008                  		move.w	8(a0),d0
00012CE2 9068 0034                  		sub.w	$34(a0),d0
00012CE6 6700                       		beq.s	loc_125AE
00012CE8 48C0                       		ext.l	d0
00012CEA E180                       		asl.l	#8,d0
00012CEC 81C1                       		divs.w	d1,d0
00012CEE 4440                       		neg.w	d0
00012CF0                            
00012CF0                            loc_125AE:
00012CF0 3140 0010                  		move.w	d0,$10(a0)
00012CF4 3143 0012                  		move.w	d3,$12(a0)
00012CF8 4840                       		swap	d0
00012CFA 3140 000A                  		move.w	d0,$A(a0)
00012CFE 4268 000E                  		clr.w	$E(a0)
00012D02 4E75                       		rts	
00012D04                            ; ===========================================================================
00012D04                            
00012D04                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D04 3228 000C                  		move.w	$C(a0),d1
00012D08 9268 0036                  		sub.w	$36(a0),d1
00012D0C 6700                       		beq.s	loc_125D4
00012D0E 48C1                       		ext.l	d1
00012D10 E181                       		asl.l	#8,d1
00012D12 83C0                       		divs.w	d0,d1
00012D14 4441                       		neg.w	d1
00012D16                            
00012D16                            loc_125D4:
00012D16 3141 0012                  		move.w	d1,$12(a0)
00012D1A 3142 0010                  		move.w	d2,$10(a0)
00012D1E 4841                       		swap	d1
00012D20 3141 000E                  		move.w	d1,$E(a0)
00012D24 4268 000A                  		clr.w	$A(a0)
00012D28 4E75                       		rts	
00012D2A                            ; End of function Obj63_ChangeDir
00012D2A                            
00012D2A                            ; ===========================================================================
00012D2A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D2C 0000                       		dc.w word_12610-Obj63_Data
00012D2E 0000                       		dc.w word_12628-Obj63_Data
00012D30 0000                       		dc.w word_1263C-Obj63_Data
00012D32 0000                       		dc.w word_12650-Obj63_Data
00012D34 0000                       		dc.w word_12668-Obj63_Data
00012D36 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D46 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012D52 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012D62 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012D6A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012D7E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012D92 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012DAA 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012DBE                            
00012DBE                            ; ---------------------------------------------------------------------------
00012DBE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DBE                            ; ---------------------------------------------------------------------------
00012DBE                            Map_obj63:
00012DBE                            	include "_maps\obj63.asm"
00012DBE                            ; ---------------------------------------------------------------------------
00012DBE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DBE                            ; ---------------------------------------------------------------------------
00012DBE 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012DC2 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012DC6 0000                       		dc.w byte_1269E-Map_obj63
00012DC8 01                         byte_12686:	dc.b 1
00012DC9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012DCE 01                         byte_1268C:	dc.b 1
00012DCF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012DD4 01                         byte_12692:	dc.b 1
00012DD5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012DDA 01                         byte_12698:	dc.b 1
00012DDB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012DE0 01                         byte_1269E:	dc.b 1
00012DE1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012DE6                            		even
00012DE6                            		even
00012DE6                            
00012DE6                            ; ===========================================================================
00012DE6                            ; ---------------------------------------------------------------------------
00012DE6                            ; Object 64 - bubbles (LZ)
00012DE6                            ; ---------------------------------------------------------------------------
00012DE6                            
00012DE6                            Obj64:					; XREF: Obj_Index
00012DE6 7000                       		moveq	#0,d0
00012DE8 1028 0024                  		move.b	$24(a0),d0
00012DEC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012DF0 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012DF4                            ; ===========================================================================
00012DF4 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012DF6 0000                       		dc.w Obj64_Animate-Obj64_Index
00012DF8 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012DFA 0000                       		dc.w Obj64_Display2-Obj64_Index
00012DFC 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012DFE 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E00                            ; ===========================================================================
00012E00                            
00012E00                            Obj64_Main:				; XREF: Obj64_Index
00012E00 5428 0024                  		addq.b	#2,$24(a0)
00012E04 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E0C 317C 8348 0002             		move.w	#$8348,2(a0)
00012E12 117C 0084 0001             		move.b	#$84,1(a0)
00012E18 117C 0010 0019             		move.b	#$10,$19(a0)
00012E1E 117C 0001 0018             		move.b	#1,$18(a0)
00012E24 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E28 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E2A 5028 0024                  		addq.b	#8,$24(a0)
00012E2E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E32 1140 0032                  		move.b	d0,$32(a0)
00012E36 1140 0033                  		move.b	d0,$33(a0)
00012E3A 117C 0006 001C             		move.b	#6,$1C(a0)
00012E40 6000 0000                  		bra.w	Obj64_BblMaker
00012E44                            ; ===========================================================================
00012E44                            
00012E44                            Obj64_Bubble:				; XREF: Obj64_Main
00012E44 1140 001C                  		move.b	d0,$1C(a0)
00012E48 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E4E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012E54 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E5A 1140 0026                  		move.b	d0,$26(a0)
00012E5E                            
00012E5E                            Obj64_Animate:				; XREF: Obj64_Index
00012E5E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E64 4EB9 0000 AE32             		jsr	AnimateSprite
00012E6A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012E70 6600                       		bne.s	Obj64_ChkWater
00012E72 117C 0001 002E             		move.b	#1,$2E(a0)
00012E78                            
00012E78                            Obj64_ChkWater:				; XREF: Obj64_Index
00012E78 3038 F646                  		move.w	($FFFFF646).w,d0
00012E7C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012E80 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012E82                            
00012E82                            Obj64_Burst:				; XREF: Obj64_Wobble
00012E82 117C 0006 0024             		move.b	#6,$24(a0)
00012E88 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012E8C 6000 0000                  		bra.w	Obj64_Display2
00012E90                            ; ===========================================================================
00012E90                            
00012E90                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012E90 1028 0026                  		move.b	$26(a0),d0
00012E94 5228 0026                  		addq.b	#1,$26(a0)
00012E98 0240 007F                  		andi.w	#$7F,d0
00012E9C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012EA2 1031 0000                  		move.b	(a1,d0.w),d0
00012EA6 4880                       		ext.w	d0
00012EA8 D068 0030                  		add.w	$30(a0),d0
00012EAC 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012EB0 4A28 002E                  		tst.b	$2E(a0)
00012EB4 6700                       		beq.s	Obj64_Display
00012EB6 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012EBA 6700                       		beq.s	Obj64_Display	; if not, branch
00012EBC                            
00012EBC 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012EC0 303C 00AD                  		move.w	#$AD,d0
00012EC4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012ECA 43F8 D000                  		lea	($FFFFD000).w,a1
00012ECE 4269 0010                  		clr.w	$10(a1)
00012ED2 4269 0012                  		clr.w	$12(a1)
00012ED6 4269 0014                  		clr.w	$14(a1)
00012EDA 137C 0015 001C             		move.b	#$15,$1C(a1)
00012EE0 337C 0023 003E             		move.w	#$23,$3E(a1)
00012EE6 137C 0000 003C             		move.b	#0,$3C(a1)
00012EEC 08A9 0005 0022             		bclr	#5,$22(a1)
00012EF2 08A9 0004 0022             		bclr	#4,$22(a1)
00012EF8 0829 0002 0022             		btst	#2,$22(a1)
00012EFE 6700 FF82                  		beq.w	Obj64_Burst
00012F02 08A9 0002 0022             		bclr	#2,$22(a1)
00012F08 137C 0013 0016             		move.b	#$13,$16(a1)
00012F0E 137C 0009 0017             		move.b	#9,$17(a1)
00012F14 5B69 000C                  		subq.w	#5,$C(a1)
00012F18 6000 FF68                  		bra.w	Obj64_Burst
00012F1C                            ; ===========================================================================
00012F1C                            
00012F1C                            Obj64_Display:				; XREF: Obj64_Wobble
00012F1C 6100 AE2E                  		bsr.w	SpeedToPos
00012F20 4A28 0001                  		tst.b	1(a0)
00012F24 6A00                       		bpl.s	Obj64_Delete
00012F26 4EFA AE4A                  		jmp	DisplaySprite
00012F2A                            ; ===========================================================================
00012F2A                            
00012F2A                            Obj64_Delete:
00012F2A 4EFA AE82                  		jmp	DeleteObject
00012F2E                            ; ===========================================================================
00012F2E                            
00012F2E                            Obj64_Display2:				; XREF: Obj64_Index
00012F2E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F34 4EB9 0000 AE32             		jsr	AnimateSprite
00012F3A 4A28 0001                  		tst.b	1(a0)
00012F3E 6A00                       		bpl.s	Obj64_Delete2
00012F40 4EFA AE30                  		jmp	DisplaySprite
00012F44                            ; ===========================================================================
00012F44                            
00012F44                            Obj64_Delete2:
00012F44 4EFA AE68                  		jmp	DeleteObject
00012F48                            ; ===========================================================================
00012F48                            
00012F48                            Obj64_Delete3:				; XREF: Obj64_Index
00012F48 6000 AE64                  		bra.w	DeleteObject
00012F4C                            ; ===========================================================================
00012F4C                            
00012F4C                            Obj64_BblMaker:				; XREF: Obj64_Index
00012F4C 4A68 0036                  		tst.w	$36(a0)
00012F50 6600                       		bne.s	loc_12874
00012F52 3038 F646                  		move.w	($FFFFF646).w,d0
00012F56 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012F5A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012F5E 4A28 0001                  		tst.b	1(a0)
00012F62 6A00 0000                  		bpl.w	Obj64_ChkDel
00012F66 5368 0038                  		subq.w	#1,$38(a0)
00012F6A 6A00 0000                  		bpl.w	loc_12914
00012F6E 317C 0001 0036             		move.w	#1,$36(a0)
00012F74                            
00012F74                            loc_1283A:
00012F74 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F7A 3200                       		move.w	d0,d1
00012F7C 0240 0007                  		andi.w	#7,d0
00012F80 0C40 0006                  		cmpi.w	#6,d0
00012F84 64EE                       		bcc.s	loc_1283A
00012F86                            
00012F86 1140 0034                  		move.b	d0,$34(a0)
00012F8A 0241 000C                  		andi.w	#$C,d1
00012F8E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012F94 D2C1                       		adda.w	d1,a1
00012F96 2149 003C                  		move.l	a1,$3C(a0)
00012F9A 5328 0032                  		subq.b	#1,$32(a0)
00012F9E 6A00                       		bpl.s	loc_12872
00012FA0 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012FA6 08E8 0007 0036             		bset	#7,$36(a0)
00012FAC                            
00012FAC                            loc_12872:
00012FAC 6000                       		bra.s	loc_1287C
00012FAE                            ; ===========================================================================
00012FAE                            
00012FAE                            loc_12874:				; XREF: Obj64_BblMaker
00012FAE 5368 0038                  		subq.w	#1,$38(a0)
00012FB2 6A00 0000                  		bpl.w	loc_12914
00012FB6                            
00012FB6                            loc_1287C:
00012FB6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FBC 0240 001F                  		andi.w	#$1F,d0
00012FC0 3140 0038                  		move.w	d0,$38(a0)
00012FC4 6100 B232                  		bsr.w	SingleObjLoad
00012FC8 6600                       		bne.s	loc_128F8
00012FCA 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012FCE 3368 0008 0008             		move.w	8(a0),8(a1)
00012FD4 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FDA 0240 000F                  		andi.w	#$F,d0
00012FDE 5140                       		subq.w	#8,d0
00012FE0 D169 0008                  		add.w	d0,8(a1)
00012FE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012FEA 7000                       		moveq	#0,d0
00012FEC 1028 0034                  		move.b	$34(a0),d0
00012FF0 2468 003C                  		movea.l	$3C(a0),a2
00012FF4 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012FFA 0828 0007 0036             		btst	#7,$36(a0)
00013000 6700                       		beq.s	loc_128F8
00013002 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00013008 0240 0003                  		andi.w	#3,d0
0001300C 6600                       		bne.s	loc_128E4
0001300E 08E8 0006 0036             		bset	#6,$36(a0)
00013014 6600                       		bne.s	loc_128F8
00013016 137C 0002 0028             		move.b	#2,$28(a1)
0001301C                            
0001301C                            loc_128E4:
0001301C 4A28 0034                  		tst.b	$34(a0)
00013020 6600                       		bne.s	loc_128F8
00013022 08E8 0006 0036             		bset	#6,$36(a0)
00013028 6600                       		bne.s	loc_128F8
0001302A 137C 0002 0028             		move.b	#2,$28(a1)
00013030                            
00013030                            loc_128F8:
00013030 5328 0034                  		subq.b	#1,$34(a0)
00013034 6A00                       		bpl.s	loc_12914
00013036 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001303C 0240 007F                  		andi.w	#$7F,d0
00013040 0640 0080                  		addi.w	#$80,d0
00013044 D168 0038                  		add.w	d0,$38(a0)
00013048 4268 0036                  		clr.w	$36(a0)
0001304C                            
0001304C                            loc_12914:
0001304C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013052 4EB9 0000 AE32             		jsr	AnimateSprite
00013058                            
00013058                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013058 3028 0008                  		move.w	8(a0),d0
0001305C 0240 FF80                  		andi.w	#$FF80,d0
00013060 3238 F700                  		move.w	($FFFFF700).w,d1
00013064 0441 0080                  		subi.w	#$80,d1
00013068 0241 FF80                  		andi.w	#$FF80,d1
0001306C 9041                       		sub.w	d1,d0
0001306E 0C40 0280                  		cmpi.w	#$280,d0
00013072 6200 AD3A                  		bhi.w	DeleteObject
00013076 3038 F646                  		move.w	($FFFFF646).w,d0
0001307A B068 000C                  		cmp.w	$C(a0),d0
0001307E 6500 ACF2                  		bcs.w	DisplaySprite
00013082 4E75                       		rts	
00013084                            ; ===========================================================================
00013084                            ; bubble production sequence
00013084                            
00013084                            ; 0 = small bubble, 1 =	large bubble
00013084                            
00013084 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013096                            
00013096                            ; ===========================================================================
00013096                            
00013096                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013096 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001309A 6B00                       		bmi.s	loc_12998
0001309C 43F8 D000                  		lea	($FFFFD000).w,a1
000130A0 3029 0008                  		move.w	8(a1),d0
000130A4 3228 0008                  		move.w	8(a0),d1
000130A8 0441 0010                  		subi.w	#$10,d1
000130AC B240                       		cmp.w	d0,d1
000130AE 6400                       		bcc.s	loc_12998
000130B0 0641 0020                  		addi.w	#$20,d1
000130B4 B240                       		cmp.w	d0,d1
000130B6 6500                       		bcs.s	loc_12998
000130B8 3029 000C                  		move.w	$C(a1),d0
000130BC 3228 000C                  		move.w	$C(a0),d1
000130C0 B240                       		cmp.w	d0,d1
000130C2 6400                       		bcc.s	loc_12998
000130C4 0641 0010                  		addi.w	#$10,d1
000130C8 B240                       		cmp.w	d0,d1
000130CA 6500                       		bcs.s	loc_12998
000130CC 7001                       		moveq	#1,d0
000130CE 4E75                       		rts	
000130D0                            ; ===========================================================================
000130D0                            
000130D0                            loc_12998:
000130D0 7000                       		moveq	#0,d0
000130D2 4E75                       		rts	
000130D4                            ; ===========================================================================
000130D4                            Ani_obj64:
000130D4                            	include "_anim\obj64.asm"
000130D4                            ; ---------------------------------------------------------------------------
000130D4                            ; Animation script - bubbles (LZ)
000130D4                            ; ---------------------------------------------------------------------------
000130D4 0000                       		dc.w byte_129AA-Ani_obj64
000130D6 0000                       		dc.w byte_129B0-Ani_obj64
000130D8 0000                       		dc.w byte_129B6-Ani_obj64
000130DA 0000                       		dc.w byte_129BE-Ani_obj64
000130DC 0000                       		dc.w byte_129BE-Ani_obj64
000130DE 0000                       		dc.w byte_129C0-Ani_obj64
000130E0 0000                       		dc.w byte_129C6-Ani_obj64
000130E2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000130E8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000130EE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000130F6 04FC                       byte_129BE:	dc.b 4,	$FC
000130F8 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000130FE 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013104 00                         		even
00013104 00                         		even
00013104                            
00013104                            ; ---------------------------------------------------------------------------
00013104                            ; Sprite mappings - bubbles (LZ)
00013104                            ; ---------------------------------------------------------------------------
00013104                            Map_obj64:
00013104                            	include "_maps\obj64.asm"
00013104                            ; ---------------------------------------------------------------------------
00013104                            ; Sprite mappings - bubbles (LZ)
00013104                            ; ---------------------------------------------------------------------------
00013104 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013108 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001310C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013110 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013114 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013118 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001311C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013120 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013124 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013128 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001312C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013130 0000                       		dc.w byte_12A9C-Map_obj64
00013132 01                         byte_129FA:	dc.b 1
00013133 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013138 01                         byte_12A00:	dc.b 1
00013139 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001313E 01                         byte_12A06:	dc.b 1
0001313F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013144 01                         byte_12A0C:	dc.b 1
00013145 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001314A 01                         byte_12A12:	dc.b 1
0001314B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013150 01                         byte_12A18:	dc.b 1
00013151 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013156 01                         byte_12A1E:	dc.b 1
00013157 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001315C 04                         byte_12A24:	dc.b 4
0001315D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013162 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013167 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001316C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013171 04                         byte_12A39:	dc.b 4
00013172 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013177 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001317C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013181 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013186 01                         byte_12A4E:	dc.b 1
00013187 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001318C 01                         byte_12A54:	dc.b 1
0001318D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013192 01                         byte_12A5A:	dc.b 1
00013193 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013198 01                         byte_12A60:	dc.b 1
00013199 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001319E 01                         byte_12A66:	dc.b 1
0001319F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000131A4 01                         byte_12A6C:	dc.b 1
000131A5 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000131AA 01                         byte_12A72:	dc.b 1
000131AB F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000131B0 01                         byte_12A78:	dc.b 1
000131B1 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000131B6 01                         byte_12A7E:	dc.b 1
000131B7 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000131BC 01                         byte_12A84:	dc.b 1
000131BD F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000131C2 01                         byte_12A8A:	dc.b 1
000131C3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000131C8 01                         byte_12A90:	dc.b 1
000131C9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000131CE 01                         byte_12A96:	dc.b 1
000131CF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000131D4 00                         byte_12A9C:	dc.b 0
000131D6 00                         		even
000131D6 00                         		even
000131D6                            
000131D6                            ; ===========================================================================
000131D6                            ; ---------------------------------------------------------------------------
000131D6                            ; Object 65 - waterfalls (LZ)
000131D6                            ; ---------------------------------------------------------------------------
000131D6                            
000131D6                            Obj65:					; XREF: Obj_Index
000131D6 7000                       		moveq	#0,d0
000131D8 1028 0024                  		move.b	$24(a0),d0
000131DC 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000131E0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000131E4                            ; ===========================================================================
000131E4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000131E6 0000                       		dc.w Obj65_Animate-Obj65_Index
000131E8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000131EA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000131EC 0000                       		dc.w loc_12B36-Obj65_Index
000131EE                            ; ===========================================================================
000131EE                            
000131EE                            Obj65_Main:				; XREF: Obj65_Index
000131EE 5828 0024                  		addq.b	#4,$24(a0)
000131F2 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000131FA 317C 4259 0002             		move.w	#$4259,2(a0)
00013200 0028 0004 0001             		ori.b	#4,1(a0)
00013206 117C 0018 0019             		move.b	#$18,$19(a0)
0001320C 117C 0001 0018             		move.b	#1,$18(a0)
00013212 1028 0028                  		move.b	$28(a0),d0	; get object type
00013216 6A00                       		bpl.s	loc_12AE6
00013218 08E8 0007 0002             		bset	#7,2(a0)
0001321E                            
0001321E                            loc_12AE6:
0001321E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013222 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013226 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001322A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001322C 4228 0018                  		clr.b	$18(a0)
00013230 5528 0024                  		subq.b	#2,$24(a0)
00013234 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001323A 6700                       		beq.s	loc_12B0A	; if not, branch
0001323C 117C 0006 0024             		move.b	#6,$24(a0)
00013242                            
00013242                            loc_12B0A:
00013242 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013248 6700                       		beq.s	Obj65_Animate	; if not, branch
0001324A 117C 0008 0024             		move.b	#8,$24(a0)
00013250                            
00013250                            Obj65_Animate:				; XREF: Obj65_Index
00013250 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013256 4EB9 0000 AE32             		jsr	AnimateSprite
0001325C                            
0001325C                            Obj65_ChkDel:				; XREF: Obj65_Index
0001325C 6000 CBBC                  		bra.w	MarkObjGone
00013260                            ; ===========================================================================
00013260                            
00013260                            Obj65_FixHeight:			; XREF: Obj65_Index
00013260 3038 F646                  		move.w	($FFFFF646).w,d0
00013264 0440 0010                  		subi.w	#$10,d0
00013268 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001326C 60E2                       		bra.s	Obj65_Animate
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            loc_12B36:				; XREF: Obj65_Index
0001326E 08A8 0007 0002             		bclr	#7,2(a0)
00013274 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001327A 6600                       		bne.s	Obj65_Animate2
0001327C 08E8 0007 0002             		bset	#7,2(a0)
00013282                            
00013282                            Obj65_Animate2:
00013282 60CC                       		bra.s	Obj65_Animate
00013284                            ; ===========================================================================
00013284                            Ani_obj65:
00013284                            	include "_anim\obj65.asm"
00013284                            ; ---------------------------------------------------------------------------
00013284                            ; Animation script - waterfall (LZ)
00013284                            ; ---------------------------------------------------------------------------
00013284 0000                       		dc.w byte_12B4E-Ani_obj65
00013286 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001328C 00                         		even
0001328C 00                         		even
0001328C                            
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            ; Sprite mappings - waterfalls (LZ)
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            Map_obj65:
0001328C                            	include "_maps\obj65.asm"
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            ; Sprite mappings - waterfalls (LZ)
0001328C                            ; ---------------------------------------------------------------------------
0001328C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013290 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013294 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013298 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001329C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000132A0 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000132A4 01                         byte_12B6C:	dc.b 1
000132A5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000132AA 02                         byte_12B72:	dc.b 2
000132AB F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000132B0 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000132B5 02                         byte_12B7D:	dc.b 2
000132B6 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132BB 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132C0 01                         byte_12B88:	dc.b 1
000132C1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000132C6 02                         byte_12B8E:	dc.b 2
000132C7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132CC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132D1 01                         byte_12B99:	dc.b 1
000132D2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000132D7 01                         byte_12B9F:	dc.b 1
000132D8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000132DD 01                         byte_12BA5:	dc.b 1
000132DE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000132E3 02                         byte_12BAB:	dc.b 2
000132E4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000132E9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000132EE 02                         byte_12BB6:	dc.b 2
000132EF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000132F4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000132F9 02                         byte_12BC1:	dc.b 2
000132FA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000132FF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013304 02                         byte_12BCC:	dc.b 2
00013305 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001330A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013310 00                         		even
00013310 00                         		even
00013310                            
00013310                            ; ===========================================================================
00013310                            ; ---------------------------------------------------------------------------
00013310                            ; Object 01 - Sonic
00013310                            ; ---------------------------------------------------------------------------
00013310                            
00013310                            Obj01:					; XREF: Obj_Index
00013310 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013314 6700                       		beq.s	Obj01_Normal	; if not, branch
00013316 4EF9 0000 0000             		jmp	DebugMode
0001331C                            ; ===========================================================================
0001331C                            
0001331C                            Obj01_Normal:
0001331C 7000                       		moveq	#0,d0
0001331E 1028 0024                  		move.b	$24(a0),d0
00013322 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013326 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001332A                            ; ===========================================================================
0001332A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001332C 0000                       		dc.w Obj01_Control-Obj01_Index
0001332E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013330 0000                       		dc.w Obj01_Death-Obj01_Index
00013332 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013334                            ; ===========================================================================
00013334                            
00013334                            Player_Maps:
00013334 0000 0000                  	dc.l	Map_Sonic
00013338 0000 0000                  	dc.l	Map_Sonic ; gronic
0001333C                            	; insert player mapping here
0001333C                            	
0001333C                            Obj01_Main:				; XREF: Obj01_Index
0001333C 5428 0024                  		addq.b	#2,$24(a0)
00013340 117C 0013 0016             		move.b	#$13,$16(a0)
00013346 117C 0009 0017             		move.b	#9,$17(a0)
0001334C                            		
0001334C 7000                       		moveq	#0,d0
0001334E 1038 FFE8                  		move.b	(v_character),d0
00013352 E548                       		lsl.w	#2,d0
00013354 43FA FFDE                  		lea 	Player_Maps(pc),a1
00013358 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001335E                            		
0001335E 317C 0780 0002             		move.w	#$780,2(a0)
00013364 117C 0002 0018             		move.b	#2,$18(a0)
0001336A 117C 0018 0019             		move.b	#$18,$19(a0)
00013370 117C 0004 0001             		move.b	#4,1(a0)
00013376 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001337C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013382 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013388                            
00013388                            Obj01_Control:				; XREF: Obj01_Index
00013388 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001338C 6700                       		beq.s	loc_12C58	; if not, branch
0001338E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013394 6700                       		beq.s	loc_12C58	; if not, branch
00013396 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001339C 4238 F7CC                  		clr.b	($FFFFF7CC).w
000133A0 4E75                       		rts	
000133A2                            ; ===========================================================================
000133A2                            
000133A2                            loc_12C58:
000133A2 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000133A6 6600                       		bne.s	loc_12C64	; if yes, branch
000133A8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000133AE                            
000133AE                            loc_12C64:
000133AE 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000133B4 6600                       		bne.s	loc_12C7E	; if yes, branch
000133B6 7000                       		moveq	#0,d0
000133B8 1028 0022                  		move.b	$22(a0),d0
000133BC 0240 0006                  		andi.w	#6,d0
000133C0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000133C4 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000133C8                            
000133C8                            loc_12C7E:
000133C8 6100                       		bsr.s	Sonic_Display
000133CA 6100 0000                  		bsr.w	Sonic_RecordPos
000133CE 6100 0000                  		bsr.w	Sonic_Water
000133D2 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000133D8 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000133DE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000133E2 6700                       		beq.s	loc_12CA6
000133E4 4A28 001C                  		tst.b	$1C(a0)
000133E8 6600                       		bne.s	loc_12CA6
000133EA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000133F0                            
000133F0                            loc_12CA6:
000133F0 6100 0000                  		bsr.w	Sonic_Animate
000133F4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000133F8 6B00                       		bmi.s	loc_12CB6
000133FA 4EB9 0000 0000             		jsr	TouchResponse
00013400                            
00013400                            loc_12CB6:
00013400 6100 0000                  		bsr.w	Sonic_Loops
00013404 6100 0000                  		bsr.w	LoadSonicDynPLC
00013408 4E75                       		rts	
0001340A                            ; ===========================================================================
0001340A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001340C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001340E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013410 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013412                            ; ---------------------------------------------------------------------------
00013412                            ; Music	to play	after invincibility wears off
00013412                            ; ---------------------------------------------------------------------------
00013412                            ; ===========================================================================
00013412                            
00013412                            Sonic_Display:				; XREF: loc_12C7E
00013412 3028 0030                  		move.w	$30(a0),d0
00013416 6700                       		beq.s	Obj01_Display
00013418 5368 0030                  		subq.w	#1,$30(a0)
0001341C E648                       		lsr.w	#3,d0
0001341E 6400                       		bcc.s	Obj01_ChkInvin
00013420                            
00013420                            Obj01_Display:
00013420 4EBA A950                  		jsr	DisplaySprite
00013424                            
00013424                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013424                             
00013424                            Obj01_ChkInvin:
00013424 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013428 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001342C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013430 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013434 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013438 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001343C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013440 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013444 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001344A 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001344E 7000                       		moveq	#0,d0
00013450 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013454                             
00013454 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001345A 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001345C 43F9 0000 3BEE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013462 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013464                             
00013464                            Obj01_GetBgm2:
00013464 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001346A 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001346C 43F9 0000 3BF6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013472 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013474                             
00013474                            Obj01_GetBgm3:
00013474 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001347A 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001347C 43F9 0000 3BFC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013482 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013484                             
00013484                            Obj01_GetBgm4:
00013484 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001348A 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001348C 43F9 0000 3C02             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013492                             
00013492                            Obj01_PlayMusic:
00013492 1031 0000                  		move.b	(a1,d0.w),d0
00013496 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
0001349C                             
0001349C                            ; NineKode ends here.
0001349C                            
0001349C                            Obj01_RmvInvin:
0001349C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000134A2                            
000134A2                            Obj01_ChkShoes:
000134A2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000134A6 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000134A8 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000134AC 6700                       		beq.s	Obj01_ExitChk
000134AE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000134B2 6600                       		bne.s	Obj01_ExitChk
000134B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000134BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000134C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000134C6 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000134CC 303C 00E3                  		move.w	#$E3,d0
000134D0 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
000134D6                            ; ===========================================================================
000134D6                            
000134D6                            Obj01_ExitChk:
000134D6 4E75                       		rts	
000134D8                            
000134D8                            ; ---------------------------------------------------------------------------
000134D8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000134D8                            ; ---------------------------------------------------------------------------
000134D8                            
000134D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134D8                            
000134D8                            
000134D8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000134D8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000134DC 43F8 CB00                  		lea	($FFFFCB00).w,a1
000134E0 43F1 0000                  		lea	(a1,d0.w),a1
000134E4 32E8 0008                  		move.w	8(a0),(a1)+
000134E8 32E8 000C                  		move.w	$C(a0),(a1)+
000134EC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000134F0 4E75                       		rts	
000134F2                            ; End of function Sonic_RecordPos
000134F2                            
000134F2                            ; ---------------------------------------------------------------------------
000134F2                            ; Subroutine for Sonic when he's underwater
000134F2                            ; ---------------------------------------------------------------------------
000134F2                            
000134F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134F2                            
000134F2                            
000134F2                            Sonic_Water:				; XREF: loc_12C7E
000134F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000134F8 6700                       		beq.s	Obj01_InWater	; if yes, branch
000134FA                            
000134FA                            locret_12D80:
000134FA 4E75                       		rts	
000134FC                            ; ===========================================================================
000134FC                            
000134FC                            Obj01_InWater:
000134FC 3038 F646                  		move.w	($FFFFF646).w,d0
00013500 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013504 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013506 08E8 0006 0022             		bset	#6,$22(a0)
0001350C 66EC                       		bne.s	locret_12D80
0001350E 6100 0000                  		bsr.w	ResumeMusic
00013512 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013518 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001351E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013524 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001352A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013530 E0E8 0010                  		asr	$10(a0)
00013534 E0E8 0012                  		asr	$12(a0)
00013538 E0E8 0012                  		asr	$12(a0)
0001353C 67BC                       		beq.s	locret_12D80
0001353E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013544 303C 00AA                  		move.w	#$AA,d0
00013548 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001354E                            ; ===========================================================================
0001354E                            
0001354E                            Obj01_OutWater:
0001354E 08A8 0006 0022             		bclr	#6,$22(a0)
00013554 67A4                       		beq.s	locret_12D80
00013556 6100 0000                  		bsr.w	ResumeMusic
0001355A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013560 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013566 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001356C E1E8 0012                  		asl	$12(a0)
00013570 6700 FF88                  		beq.w	locret_12D80
00013574 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001357A 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013580 6E00                       		bgt.s	loc_12E0E
00013582 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013588                            
00013588                            loc_12E0E:
00013588 303C 00AA                  		move.w	#$AA,d0
0001358C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
00013592                            ; End of function Sonic_Water
00013592                            
00013592                            ; ===========================================================================
00013592                            ; ---------------------------------------------------------------------------
00013592                            ; Modes	for controlling	Sonic
00013592                            ; ---------------------------------------------------------------------------
00013592                            
00013592                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013592 6100 0000                  		bsr.w	Sonic_Jump
00013596 6100 0000                  		bsr.w	Sonic_SlopeResist
0001359A 6100 0000                  		bsr.w	Sonic_Move
0001359E 6100 0000                  		bsr.w	Sonic_Roll
000135A2 6100 0000                  		bsr.w	Sonic_LevelBound
000135A6 4EBA A7A4                  		jsr	SpeedToPos
000135AA 6100 0000                  		bsr.w	Sonic_AnglePos
000135AE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000135B2 4E75                       		rts	
000135B4                            ; ===========================================================================
000135B4                            
000135B4                            Obj01_MdJump:				; XREF: Obj01_Modes
000135B4 6100 0000                  		bsr.w	Sonic_JumpHeight
000135B8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000135BC 6100 0000                  		bsr.w	Sonic_LevelBound
000135C0 4EBA A75E                  		jsr	ObjectFall
000135C4 0828 0006 0022             		btst	#6,$22(a0)
000135CA 6700                       		beq.s	loc_12E5C
000135CC 0468 0028 0012             		subi.w	#$28,$12(a0)
000135D2                            
000135D2                            loc_12E5C:
000135D2 6100 0000                  		bsr.w	Sonic_JumpAngle
000135D6 6100 0000                  		bsr.w	Sonic_Floor
000135DA 4E75                       		rts	
000135DC                            ; ===========================================================================
000135DC                            
000135DC                            Obj01_MdRoll:				; XREF: Obj01_Modes
000135DC 6100 0000                  		bsr.w	Sonic_Jump
000135E0 6100 0000                  		bsr.w	Sonic_RollRepel
000135E4 6100 0000                  		bsr.w	Sonic_RollSpeed
000135E8 6100 0000                  		bsr.w	Sonic_LevelBound
000135EC 4EBA A75E                  		jsr	SpeedToPos
000135F0 6100 0000                  		bsr.w	Sonic_AnglePos
000135F4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            Obj01_MdJump2:				; XREF: Obj01_Modes
000135FA 6100 0000                  		bsr.w	Sonic_JumpHeight
000135FE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013602 6100 0000                  		bsr.w	Sonic_LevelBound
00013606 6100 0000                  		bsr.w	Sonic_AirUnroll
0001360A 4EBA A714                  		jsr	ObjectFall
0001360E 0828 0006 0022             		btst	#6,$22(a0)
00013614 6700                       		beq.s	loc_12EA6
00013616 0468 0028 0012             		subi.w	#$28,$12(a0)
0001361C                            
0001361C                            loc_12EA6:
0001361C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013620 6100 0000                  		bsr.w	Sonic_Floor
00013624 4E75                       		rts	
00013626                            ; ---------------------------------------------------------------------------
00013626                            ; Subroutine to	make Sonic walk/run
00013626                            ; ---------------------------------------------------------------------------
00013626                            
00013626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013626                            
00013626                            
00013626                            Sonic_Move:				; XREF: Obj01_MdNormal
00013626 3C38 F760                  		move.w	($FFFFF760).w,d6
0001362A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001362E 3838 F764                  		move.w	($FFFFF764).w,d4
00013632 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013636 6600 0000                  		bne.w	loc_12FEE
0001363A 4A68 003E                  		tst.w	$3E(a0)
0001363E 6600 0000                  		bne.w	Obj01_ResetScr
00013642 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013648 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001364A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013650 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013652 6100 0000                  		bsr.w	Sonic_MoveLeft
00013656                            
00013656                            Obj01_NotLeft:
00013656 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001365C 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001365E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013664 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013666 6100 0000                  		bsr.w	Sonic_MoveLeft
0001366A 6000                       		bra.s	Obj01_NotRight
0001366C                            
0001366C                            Obj01_MoveRight:
0001366C 6100 0000                  		bsr.w	Sonic_MoveRight
00013670                            
00013670                            Obj01_NotRight:
00013670 1028 0026                  		move.b	$26(a0),d0
00013674 0600 0020                  		addi.b	#$20,d0
00013678 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001367C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013680 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013684 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013688 08A8 0005 0022             		bclr	#5,$22(a0)
0001368E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013694 0828 0003 0022             		btst	#3,$22(a0)
0001369A 6700                       		beq.s	Sonic_Balance
0001369C 7000                       		moveq	#0,d0
0001369E 1028 003D                  		move.b	$3D(a0),d0
000136A2 ED48                       		lsl.w	#6,d0
000136A4 43F8 D000                  		lea	($FFFFD000).w,a1
000136A8 43F1 0000                  		lea	(a1,d0.w),a1
000136AC 4A29 0022                  		tst.b	$22(a1)
000136B0 6B00                       		bmi.s	Sonic_LookUp
000136B2 7200                       		moveq	#0,d1
000136B4 1229 0019                  		move.b	$19(a1),d1
000136B8 3401                       		move.w	d1,d2
000136BA D442                       		add.w	d2,d2
000136BC 5942                       		subq.w	#4,d2
000136BE D268 0008                  		add.w	8(a0),d1
000136C2 9269 0008                  		sub.w	8(a1),d1
000136C6 0C41 0004                  		cmpi.w	#4,d1
000136CA 6D00                       		blt.s	loc_12F6A
000136CC B242                       		cmp.w	d2,d1
000136CE 6C00                       		bge.s	loc_12F5A
000136D0 6000                       		bra.s	Sonic_LookUp
000136D2                            ; ===========================================================================
000136D2                            
000136D2                            Sonic_Balance:
000136D2 4EB9 0000 0000             		jsr	ObjHitFloor
000136D8 0C41 000C                  		cmpi.w	#$C,d1
000136DC 6D00                       		blt.s	Sonic_LookUp
000136DE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000136E4 6600                       		bne.s	loc_12F62
000136E6                            
000136E6                            loc_12F5A:
000136E6 08A8 0000 0022             		bclr	#0,$22(a0)
000136EC 6000                       		bra.s	loc_12F70
000136EE                            ; ===========================================================================
000136EE                            
000136EE                            loc_12F62:
000136EE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000136F4 6600                       		bne.s	Sonic_LookUp
000136F6                            
000136F6                            loc_12F6A:
000136F6 08E8 0000 0022             		bset	#0,$22(a0)
000136FC                            
000136FC                            loc_12F70:
000136FC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013702 6000                       		bra.s	Obj01_ResetScr
00013704                            ; ===========================================================================
00013704                            
00013704                            Sonic_LookUp:
00013704 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001370A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001370C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013712 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013718 6700                       		beq.s	loc_12FC2
0001371A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001371E 6000                       		bra.s	loc_12FC2
00013720                            ; ===========================================================================
00013720                            
00013720                            Sonic_Duck:
00013720 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013726 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013728 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001372E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013734 6700                       		beq.s	loc_12FC2
00013736 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001373A 6000                       		bra.s	loc_12FC2
0001373C                            ; ===========================================================================
0001373C                            
0001373C                            Obj01_ResetScr:
0001373C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013742 6700                       		beq.s	loc_12FC2	; if yes, branch
00013744 6400                       		bcc.s	loc_12FBE
00013746 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001374A                            
0001374A                            loc_12FBE:
0001374A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001374E                            
0001374E                            loc_12FC2:
0001374E 1038 F602                  		move.b	($FFFFF602).w,d0
00013752 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013756 6600                       		bne.s	loc_12FEE	; if yes, branch
00013758 3028 0014                  		move.w	$14(a0),d0
0001375C 6700                       		beq.s	loc_12FEE
0001375E 6B00                       		bmi.s	loc_12FE2
00013760 9045                       		sub.w	d5,d0
00013762 6400                       		bcc.s	loc_12FDC
00013764 303C 0000                  		move.w	#0,d0
00013768                            
00013768                            loc_12FDC:
00013768 3140 0014                  		move.w	d0,$14(a0)
0001376C 6000                       		bra.s	loc_12FEE
0001376E                            ; ===========================================================================
0001376E                            
0001376E                            loc_12FE2:
0001376E D045                       		add.w	d5,d0
00013770 6400                       		bcc.s	loc_12FEA
00013772 303C 0000                  		move.w	#0,d0
00013776                            
00013776                            loc_12FEA:
00013776 3140 0014                  		move.w	d0,$14(a0)
0001377A                            
0001377A                            loc_12FEE:
0001377A 1028 0026                  		move.b	$26(a0),d0
0001377E 4EB9 0000 2C64             		jsr	(CalcSine).l
00013784 C3E8 0014                  		muls.w	$14(a0),d1
00013788 E081                       		asr.l	#8,d1
0001378A 3141 0010                  		move.w	d1,$10(a0)
0001378E C1E8 0014                  		muls.w	$14(a0),d0
00013792 E080                       		asr.l	#8,d0
00013794 3140 0012                  		move.w	d0,$12(a0)
00013798                            
00013798                            loc_1300C:
00013798 1028 0026                  		move.b	$26(a0),d0
0001379C 0600 0040                  		addi.b	#$40,d0
000137A0 6B00                       		bmi.s	locret_1307C
000137A2 123C 0040                  		move.b	#$40,d1
000137A6 4A68 0014                  		tst.w	$14(a0)
000137AA 6700                       		beq.s	locret_1307C
000137AC 6B00                       		bmi.s	loc_13024
000137AE 4441                       		neg.w	d1
000137B0                            
000137B0                            loc_13024:
000137B0 1028 0026                  		move.b	$26(a0),d0
000137B4 D001                       		add.b	d1,d0
000137B6 3F00                       		move.w	d0,-(sp)
000137B8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000137BC 301F                       		move.w	(sp)+,d0
000137BE 4A41                       		tst.w	d1
000137C0 6A00                       		bpl.s	locret_1307C
000137C2 E141                       		asl.w	#8,d1
000137C4 0600 0020                  		addi.b	#$20,d0
000137C8 0200 00C0                  		andi.b	#$C0,d0
000137CC 6700                       		beq.s	loc_13078
000137CE 0C00 0040                  		cmpi.b	#$40,d0
000137D2 6700                       		beq.s	loc_13066
000137D4 0C00 0080                  		cmpi.b	#$80,d0
000137D8 6700                       		beq.s	loc_13060
000137DA D368 0010                  		add.w	d1,$10(a0)
000137DE 08E8 0005 0022             		bset	#5,$22(a0)
000137E4 317C 0000 0014             		move.w	#0,$14(a0)
000137EA 4E75                       		rts	
000137EC                            ; ===========================================================================
000137EC                            
000137EC                            loc_13060:
000137EC 9368 0012                  		sub.w	d1,$12(a0)
000137F0 4E75                       		rts	
000137F2                            ; ===========================================================================
000137F2                            
000137F2                            loc_13066:
000137F2 9368 0010                  		sub.w	d1,$10(a0)
000137F6 08E8 0005 0022             		bset	#5,$22(a0)
000137FC 317C 0000 0014             		move.w	#0,$14(a0)
00013802 4E75                       		rts	
00013804                            ; ===========================================================================
00013804                            
00013804                            loc_13078:
00013804 D368 0012                  		add.w	d1,$12(a0)
00013808                            
00013808                            locret_1307C:
00013808 4E75                       		rts	
0001380A                            ; End of function Sonic_Move
0001380A                            
0001380A                            
0001380A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001380A                            
0001380A                            
0001380A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001380A 3028 0014                  		move.w	$14(a0),d0
0001380E 6700                       		beq.s	loc_13086
00013810 6A00                       		bpl.s	loc_130B2
00013812                            
00013812                            loc_13086:
00013812 08E8 0000 0022             		bset	#0,$22(a0)
00013818 6600                       		bne.s	loc_1309A
0001381A 08A8 0005 0022             		bclr	#5,$22(a0)
00013820 117C 0001 001D             		move.b	#1,$1D(a0)
00013826                            
00013826                            loc_1309A:
00013826 9045                       		sub.w	d5,d0
00013828 3206                       		move.w	d6,d1
0001382A 4441                       		neg.w	d1
0001382C B041                       		cmp.w	d1,d0
0001382E 6E00                       		bgt.s	loc_130A6
00013830 3001                       		move.w	d1,d0
00013832                            
00013832                            loc_130A6:
00013832 3140 0014                  		move.w	d0,$14(a0)
00013836 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001383C 4E75                       		rts	
0001383E                            ; ===========================================================================
0001383E                            
0001383E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001383E 9044                       		sub.w	d4,d0
00013840 6400                       		bcc.s	loc_130BA
00013842 303C FF80                  		move.w	#-$80,d0
00013846                            
00013846                            loc_130BA:
00013846 3140 0014                  		move.w	d0,$14(a0)
0001384A 1028 0026                  		move.b	$26(a0),d0
0001384E 0600 0020                  		addi.b	#$20,d0
00013852 0200 00C0                  		andi.b	#$C0,d0
00013856 6600                       		bne.s	locret_130E8
00013858 0C40 0400                  		cmpi.w	#$400,d0
0001385C 6D00                       		blt.s	locret_130E8
0001385E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013864 08A8 0000 0022             		bclr	#0,$22(a0)
0001386A 303C 00A4                  		move.w	#$A4,d0
0001386E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013874                            
00013874                            locret_130E8:
00013874 4E75                       		rts	
00013876                            ; End of function Sonic_MoveLeft
00013876                            
00013876                            
00013876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013876                            
00013876                            
00013876                            Sonic_MoveRight:			; XREF: Sonic_Move
00013876 3028 0014                  		move.w	$14(a0),d0
0001387A 6B00                       		bmi.s	loc_13118
0001387C 08A8 0000 0022             		bclr	#0,$22(a0)
00013882 6700                       		beq.s	loc_13104
00013884 08A8 0005 0022             		bclr	#5,$22(a0)
0001388A 117C 0001 001D             		move.b	#1,$1D(a0)
00013890                            
00013890                            loc_13104:
00013890 D045                       		add.w	d5,d0
00013892 B046                       		cmp.w	d6,d0
00013894 6D00                       		blt.s	loc_1310C
00013896 3006                       		move.w	d6,d0
00013898                            
00013898                            loc_1310C:
00013898 3140 0014                  		move.w	d0,$14(a0)
0001389C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138A2 4E75                       		rts	
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            loc_13118:				; XREF: Sonic_MoveRight
000138A4 D044                       		add.w	d4,d0
000138A6 6400                       		bcc.s	loc_13120
000138A8 303C 0080                  		move.w	#$80,d0
000138AC                            
000138AC                            loc_13120:
000138AC 3140 0014                  		move.w	d0,$14(a0)
000138B0 1028 0026                  		move.b	$26(a0),d0
000138B4 0600 0020                  		addi.b	#$20,d0
000138B8 0200 00C0                  		andi.b	#$C0,d0
000138BC 6600                       		bne.s	locret_1314E
000138BE 0C40 FC00                  		cmpi.w	#-$400,d0
000138C2 6E00                       		bgt.s	locret_1314E
000138C4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138CA 08E8 0000 0022             		bset	#0,$22(a0)
000138D0 303C 00A4                  		move.w	#$A4,d0
000138D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000138DA                            
000138DA                            locret_1314E:
000138DA 4E75                       		rts	
000138DC                            ; End of function Sonic_MoveRight
000138DC                            
000138DC                            ; ---------------------------------------------------------------------------
000138DC                            ; Subroutine to	change Sonic's speed as he rolls
000138DC                            ; ---------------------------------------------------------------------------
000138DC                            
000138DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138DC                            
000138DC                            
000138DC                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000138DC 3C38 F760                  		move.w	($FFFFF760).w,d6
000138E0 E346                       		asl.w	#1,d6
000138E2 3A38 F762                  		move.w	($FFFFF762).w,d5
000138E6 E245                       		asr.w	#1,d5
000138E8 3838 F764                  		move.w	($FFFFF764).w,d4
000138EC E444                       		asr.w	#2,d4
000138EE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138F2 6600 0000                  		bne.w	loc_131CC
000138F6 4A68 003E                  		tst.w	$3E(a0)
000138FA 6600                       		bne.s	loc_13188
000138FC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013902 6700                       		beq.s	loc_1317C	; if not, branch
00013904 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001390A 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001390C 6100 0000                  		bsr.w	Sonic_RollLeft
00013910                            
00013910                            loc_1317C:
00013910 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013916 6700                       		beq.s	loc_13188	; if not, branch
00013918 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001391E 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013920 6100 0000                  		bsr.w	Sonic_RollLeft
00013924 6000                       		bra.s	loc_13188
00013926                            
00013926                            SonicRS_RollRight:
00013926 6100 0000                  		bsr.w	Sonic_RollRight
0001392A                            
0001392A                            loc_13188:
0001392A 3028 0014                  		move.w	$14(a0),d0
0001392E 6700                       		beq.s	loc_131AA
00013930 6B00                       		bmi.s	loc_1319E
00013932 9045                       		sub.w	d5,d0
00013934 6400                       		bcc.s	loc_13198
00013936 303C 0000                  		move.w	#0,d0
0001393A                            
0001393A                            loc_13198:
0001393A 3140 0014                  		move.w	d0,$14(a0)
0001393E 6000                       		bra.s	loc_131AA
00013940                            ; ===========================================================================
00013940                            
00013940                            loc_1319E:				; XREF: Sonic_RollSpeed
00013940 D045                       		add.w	d5,d0
00013942 6400                       		bcc.s	loc_131A6
00013944 303C 0000                  		move.w	#0,d0
00013948                            
00013948                            loc_131A6:
00013948 3140 0014                  		move.w	d0,$14(a0)
0001394C                            
0001394C                            loc_131AA:
0001394C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013950 6600                       		bne.s	loc_131CC	; if yes, branch
00013952 08A8 0002 0022             		bclr	#2,$22(a0)
00013958 117C 0013 0016             		move.b	#$13,$16(a0)
0001395E 117C 0009 0017             		move.b	#9,$17(a0)
00013964 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001396A 5B68 000C                  		subq.w	#5,$C(a0)
0001396E                            
0001396E                            loc_131CC:
0001396E 1028 0026                  		move.b	$26(a0),d0
00013972 4EB9 0000 2C64             		jsr	(CalcSine).l
00013978 C1E8 0014                  		muls.w	$14(a0),d0
0001397C E080                       		asr.l	#8,d0
0001397E 3140 0012                  		move.w	d0,$12(a0)
00013982 C3E8 0014                  		muls.w	$14(a0),d1
00013986 E081                       		asr.l	#8,d1
00013988 0C41 1000                  		cmpi.w	#$1000,d1
0001398C 6F00                       		ble.s	loc_131F0
0001398E 323C 1000                  		move.w	#$1000,d1
00013992                            
00013992                            loc_131F0:
00013992 0C41 F000                  		cmpi.w	#-$1000,d1
00013996 6C00                       		bge.s	loc_131FA
00013998 323C F000                  		move.w	#-$1000,d1
0001399C                            
0001399C                            loc_131FA:
0001399C 3141 0010                  		move.w	d1,$10(a0)
000139A0 6000 FDF6                  		bra.w	loc_1300C
000139A4                            ; End of function Sonic_RollSpeed
000139A4                            
000139A4                            
000139A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139A4                            
000139A4                            
000139A4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000139A4 3028 0014                  		move.w	$14(a0),d0
000139A8 6700                       		beq.s	loc_1320A
000139AA 6A00                       		bpl.s	loc_13218
000139AC                            
000139AC                            loc_1320A:
000139AC 08E8 0000 0022             		bset	#0,$22(a0)
000139B2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139B8 4E75                       		rts	
000139BA                            ; ===========================================================================
000139BA                            
000139BA                            loc_13218:
000139BA 9044                       		sub.w	d4,d0
000139BC 6400                       		bcc.s	loc_13220
000139BE 303C FF80                  		move.w	#-$80,d0
000139C2                            
000139C2                            loc_13220:
000139C2 3140 0014                  		move.w	d0,$14(a0)
000139C6 4E75                       		rts	
000139C8                            ; End of function Sonic_RollLeft
000139C8                            
000139C8                            
000139C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139C8                            
000139C8                            
000139C8                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000139C8 3028 0014                  		move.w	$14(a0),d0
000139CC 6B00                       		bmi.s	loc_1323A
000139CE 08A8 0000 0022             		bclr	#0,$22(a0)
000139D4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139DA 4E75                       		rts	
000139DC                            ; ===========================================================================
000139DC                            
000139DC                            loc_1323A:
000139DC D044                       		add.w	d4,d0
000139DE 6400                       		bcc.s	loc_13242
000139E0 303C 0080                  		move.w	#$80,d0
000139E4                            
000139E4                            loc_13242:
000139E4 3140 0014                  		move.w	d0,$14(a0)
000139E8 4E75                       		rts	
000139EA                            ; End of function Sonic_RollRight
000139EA                            
000139EA                            Sonic_AirUnroll:
000139EA                            		
000139EA 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000139EE 6600                       		bne.s	@timer
000139F0 1038 F605                  		move.b	($FFFFF605).w,d0
000139F4 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000139F8 6700                       		beq.s	@end	; if not, branch
000139FA 08A8 0002 0022             		bclr	#2,$22(a0)
00013A00 117C 0013 0016             		move.b	#$13,$16(a0)
00013A06 117C 0009 0017             		move.b	#9,$17(a0)
00013A0C 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013A12 303C 00A5                  		move.w	#$A5,d0
00013A16 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013A1C 2028 0010                  		move.l	$10(a0),d0
00013A20 D080                       		add.l	d0,d0
00013A22 2140 0010                  		move.l	d0,$10(a0)
00013A26 5B68 000C                  		subq.w	#5,$C(a0)
00013A2A                            	@end:
00013A2A 4E75                       		rts
00013A2C                            	@timer:
00013A2C 5328 003A                  		subq.b	#1,$3A(a0)
00013A30 4E75                       		rts
00013A32                            
00013A32                            ; ---------------------------------------------------------------------------
00013A32                            ; Subroutine to	change Sonic's direction while jumping
00013A32                            ; ---------------------------------------------------------------------------
00013A32                            
00013A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A32                            
00013A32                            
00013A32                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A32 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A36 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A3A E345                       		asl.w	#1,d5
00013A3C 0828 0004 0022             		btst	#4,$22(a0)
00013A42 6600                       		bne.s	Obj01_ResetScr2
00013A44 3028 0010                  		move.w	$10(a0),d0
00013A48 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A4E 6700                       		beq.s	loc_13278	; if not, branch
00013A50 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A56 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013A58 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A5C 6E00                       		bgt.s	loc_13278
00013A5E 3001                       		move.w	d1,d0
00013A60                            
00013A60                            loc_13278:
00013A60 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A66 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013A68 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A6E 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013A70 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A74 6E00                       		bgt.s	Obj01_JumpMove
00013A76 3001                       		move.w	d1,d0
00013A78 6000                       		bra.s	Obj01_JumpMove
00013A7A                            
00013A7A                            SonicCJD_JumpLeft:
00013A7A 08E8 0000 0022             		bset	#0,$22(a0)
00013A80 9045                       		sub.w	d5,d0
00013A82 3206                       		move.w	d6,d1
00013A84 4441                       		neg.w	d1
00013A86 B041                       		cmp.w	d1,d0
00013A88                            		; bgt.s	loc_13278
00013A88                            		; move.w	d1,d0
00013A88 4E75                       		rts
00013A8A                            
00013A8A                            SonicCJD_JumpRight:
00013A8A 08A8 0000 0022             		bclr	#0,$22(a0)
00013A90 D045                       		add.w	d5,d0
00013A92 B046                       		cmp.w	d6,d0
00013A94 6D00                       		blt.s	Obj01_JumpMove
00013A96 3006                       		move.w	d6,d0
00013A98                            
00013A98                            Obj01_JumpMove:
00013A98 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013A9C                            
00013A9C                            Obj01_ResetScr2:
00013A9C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013AA2 6700                       		beq.s	loc_132A4	; if yes, branch
00013AA4 6400                       		bcc.s	loc_132A0
00013AA6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013AAA                            
00013AAA                            loc_132A0:
00013AAA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013AAE                            
00013AAE                            loc_132A4:
00013AAE 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013AB4 6500                       		bcs.s	locret_132D2	; if yes, branch
00013AB6 3028 0010                  		move.w	$10(a0),d0
00013ABA 3200                       		move.w	d0,d1
00013ABC EA41                       		asr.w	#5,d1
00013ABE 6700                       		beq.s	locret_132D2
00013AC0 6B00                       		bmi.s	loc_132C6
00013AC2 9041                       		sub.w	d1,d0
00013AC4 6400                       		bcc.s	loc_132C0
00013AC6 303C 0000                  		move.w	#0,d0
00013ACA                            
00013ACA                            loc_132C0:
00013ACA 3140 0010                  		move.w	d0,$10(a0)
00013ACE 4E75                       		rts	
00013AD0                            ; ===========================================================================
00013AD0                            
00013AD0                            loc_132C6:
00013AD0 9041                       		sub.w	d1,d0
00013AD2 6500                       		bcs.s	loc_132CE
00013AD4 303C 0000                  		move.w	#0,d0
00013AD8                            
00013AD8                            loc_132CE:
00013AD8 3140 0010                  		move.w	d0,$10(a0)
00013ADC                            
00013ADC                            locret_132D2:
00013ADC 4E75                       		rts	
00013ADE                            ; End of function Sonic_ChgJumpDir
00013ADE                            
00013ADE                            ; ===========================================================================
00013ADE                            ; ---------------------------------------------------------------------------
00013ADE                            ; Unused subroutine to squash Sonic
00013ADE                            ; ---------------------------------------------------------------------------
00013ADE 1028 0026                  		move.b	$26(a0),d0
00013AE2 0600 0020                  		addi.b	#$20,d0
00013AE6 0200 00C0                  		andi.b	#$C0,d0
00013AEA 6600                       		bne.s	locret_13302
00013AEC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013AF0 4A41                       		tst.w	d1
00013AF2 6A00                       		bpl.s	locret_13302
00013AF4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013AFA 317C 0000 0010             		move.w	#0,$10(a0)
00013B00 317C 0000 0012             		move.w	#0,$12(a0)
00013B06 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013B0C                            
00013B0C                            locret_13302:
00013B0C 4E75                       		rts	
00013B0E                            ; ---------------------------------------------------------------------------
00013B0E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013B0E                            ; ---------------------------------------------------------------------------
00013B0E                            
00013B0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B0E                            
00013B0E                            
00013B0E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013B0E 2228 0008                  		move.l	8(a0),d1
00013B12 3028 0010                  		move.w	$10(a0),d0
00013B16 48C0                       		ext.l	d0
00013B18 E180                       		asl.l	#8,d0
00013B1A D280                       		add.l	d0,d1
00013B1C 4841                       		swap	d1
00013B1E 3038 F728                  		move.w	($FFFFF728).w,d0
00013B22 0640 0010                  		addi.w	#$10,d0
00013B26 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B28 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013B2A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013B2E 0640 0128                  		addi.w	#$128,d0
00013B32 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013B36 6600                       		bne.s	loc_13332
00013B38 0640 0040                  		addi.w	#$40,d0
00013B3C                            
00013B3C                            loc_13332:
00013B3C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B3E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013B40                            
00013B40                            loc_13336:
00013B40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013B44 0640 00E0                  		addi.w	#$E0,d0
00013B48 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013B4C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013B4E 4E75                       		rts	
00013B50                            ; ===========================================================================
00013B50                            
00013B50                            Boundary_Bottom:
00013B50 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013B56 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013B5A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013B60 6500 0000                  		bcs.w	KillSonic
00013B64 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013B68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013B6E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013B74 4E75                       		rts	
00013B76                            ; ===========================================================================
00013B76                            
00013B76                            Boundary_Sides:
00013B76 3140 0008                  		move.w	d0,8(a0)
00013B7A 317C 0000 000A             		move.w	#0,$A(a0)
00013B80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013B86 317C 0000 0014             		move.w	#0,$14(a0)
00013B8C 60B2                       		bra.s	loc_13336
00013B8E                            ; End of function Sonic_LevelBound
00013B8E                            
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            ; Subroutine allowing Sonic to roll when he's moving
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            
00013B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B8E                            
00013B8E                            
00013B8E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013B8E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B92 6600                       		bne.s	Obj01_NoRoll
00013B94 3028 0014                  		move.w	$14(a0),d0
00013B98 6A00                       		bpl.s	loc_13392
00013B9A 4440                       		neg.w	d0
00013B9C                            
00013B9C                            loc_13392:
00013B9C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013BA0 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013BA2 1038 F602                  		move.b	($FFFFF602).w,d0
00013BA6 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013BAA 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013BAC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013BB2 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013BB4                            
00013BB4                            Obj01_NoRoll:
00013BB4 4E75                       		rts	
00013BB6                            ; ===========================================================================
00013BB6                            
00013BB6                            Obj01_ChkRoll:
00013BB6 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013BBC 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013BBE 4E75                       		rts	
00013BC0                            ; ===========================================================================
00013BC0                            
00013BC0                            Obj01_DoRoll:
00013BC0 08E8 0002 0022             		bset	#2,$22(a0)
00013BC6 117C 000E 0016             		move.b	#$E,$16(a0)
00013BCC 117C 0007 0017             		move.b	#7,$17(a0)
00013BD2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013BD8 5A68 000C                  		addq.w	#5,$C(a0)
00013BDC 303C 00BE                  		move.w	#$BE,d0
00013BE0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013BE6 4A68 0014                  		tst.w	$14(a0)
00013BEA 6600                       		bne.s	locret_133E8
00013BEC 317C 0200 0014             		move.w	#$200,$14(a0)
00013BF2                            
00013BF2                            locret_133E8:
00013BF2 4E75                       		rts	
00013BF4                            ; End of function Sonic_Roll
00013BF4                            
00013BF4                            ; ---------------------------------------------------------------------------
00013BF4                            ; Subroutine allowing Sonic to jump
00013BF4                            ; ---------------------------------------------------------------------------
00013BF4                            
00013BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BF4                            
00013BF4                            
00013BF4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BF4 1038 F603                  		move.b	($FFFFF603).w,d0
00013BF8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013BFC 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C00 7000                       		moveq	#0,d0
00013C02 1028 0026                  		move.b	$26(a0),d0
00013C06 0600 0080                  		addi.b	#$80,d0
00013C0A 6100 0000                  		bsr.w	sub_14D48
00013C0E 0C41 0006                  		cmpi.w	#6,d1
00013C12 6D00 0000                  		blt.w	locret_1348E
00013C16 343C 0680                  		move.w	#$680,d2
00013C1A 0828 0006 0022             		btst	#6,$22(a0)
00013C20 6700                       		beq.s	loc_1341C
00013C22 343C 0380                  		move.w	#$380,d2
00013C26                            
00013C26                            loc_1341C:
00013C26 7000                       		moveq	#0,d0
00013C28 1028 0026                  		move.b	$26(a0),d0
00013C2C 0400 0040                  		subi.b	#$40,d0
00013C30 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C36 C3C2                       		muls.w	d2,d1
00013C38 E081                       		asr.l	#8,d1
00013C3A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C3E C1C2                       		muls.w	d2,d0
00013C40 E080                       		asr.l	#8,d0
00013C42 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013C46 08E8 0001 0022             		bset	#1,$22(a0)
00013C4C 08A8 0005 0022             		bclr	#5,$22(a0)
00013C52 588F                       		addq.l	#4,sp
00013C54 117C 0001 003C             		move.b	#1,$3C(a0)
00013C5A 4228 0038                  		clr.b	$38(a0)
00013C5E 303C 00A0                  		move.w	#$A0,d0
00013C62 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013C68 117C 0013 0016             		move.b	#$13,$16(a0)
00013C6E 117C 0009 0017             		move.b	#9,$17(a0)
00013C74 0828 0002 0022             		btst	#2,$22(a0)
00013C7A 6600                       		bne.s	loc_13490
00013C7C 117C 000E 0016             		move.b	#$E,$16(a0)
00013C82 117C 0007 0017             		move.b	#7,$17(a0)
00013C88 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013C8E 08E8 0002 0022             		bset	#2,$22(a0)
00013C94 5A68 000C                  		addq.w	#5,$C(a0)
00013C98 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013C9E                            
00013C9E                            locret_1348E:
00013C9E 4E75                       		rts	
00013CA0                            ; ===========================================================================
00013CA0                            
00013CA0                            loc_13490:
00013CA0 08E8 0004 0022             		bset	#4,$22(a0)
00013CA6 4E75                       		rts	
00013CA8                            ; End of function Sonic_Jump
00013CA8                            
00013CA8                            
00013CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CA8                            
00013CA8                            
00013CA8                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CA8 4A28 003C                  		tst.b	$3C(a0)
00013CAC 6700                       		beq.s	loc_134C4
00013CAE 323C FC00                  		move.w	#-$400,d1
00013CB2 0828 0006 0022             		btst	#6,$22(a0)
00013CB8 6700                       		beq.s	loc_134AE
00013CBA 323C FE00                  		move.w	#-$200,d1
00013CBE                            
00013CBE                            loc_134AE:
00013CBE B268 0012                  		cmp.w	$12(a0),d1
00013CC2 6F00                       		ble.s	locret_134C2
00013CC4 1038 F602                  		move.b	($FFFFF602).w,d0
00013CC8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013CCC 6600                       		bne.s	locret_134C2	; if yes, branch
00013CCE 3141 0012                  		move.w	d1,$12(a0)
00013CD2                            
00013CD2                            locret_134C2:
00013CD2 4E75                       		rts	
00013CD4                            ; ===========================================================================
00013CD4                            
00013CD4                            loc_134C4:
00013CD4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013CDA 6C00                       		bge.s	locret_134D2
00013CDC 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013CE2                            
00013CE2                            locret_134D2:
00013CE2 4E75                       		rts	
00013CE4                            ; End of function Sonic_JumpHeight
00013CE4                            
00013CE4                            ; ---------------------------------------------------------------------------
00013CE4                            ; Subroutine to	slow Sonic walking up a	slope
00013CE4                            ; ---------------------------------------------------------------------------
00013CE4                            
00013CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CE4                            
00013CE4                            
00013CE4                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013CE4 1028 0026                  		move.b	$26(a0),d0
00013CE8 0600 0060                  		addi.b	#$60,d0
00013CEC 0C00 00C0                  		cmpi.b	#$C0,d0
00013CF0 6400                       		bcc.s	locret_13508
00013CF2 1028 0026                  		move.b	$26(a0),d0
00013CF6 4EB9 0000 2C64             		jsr	(CalcSine).l
00013CFC C1FC 0020                  		muls.w	#$20,d0
00013D00 E080                       		asr.l	#8,d0
00013D02 4A68 0014                  		tst.w	$14(a0)
00013D06 6700                       		beq.s	locret_13508
00013D08 6B00                       		bmi.s	loc_13504
00013D0A 4A40                       		tst.w	d0
00013D0C 6700                       		beq.s	locret_13502
00013D0E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013D12                            
00013D12                            locret_13502:
00013D12 4E75                       		rts	
00013D14                            ; ===========================================================================
00013D14                            
00013D14                            loc_13504:
00013D14 D168 0014                  		add.w	d0,$14(a0)
00013D18                            
00013D18                            locret_13508:
00013D18 4E75                       		rts	
00013D1A                            ; End of function Sonic_SlopeResist
00013D1A                            
00013D1A                            ; ---------------------------------------------------------------------------
00013D1A                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013D1A                            ; ---------------------------------------------------------------------------
00013D1A                            
00013D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D1A                            
00013D1A                            
00013D1A                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013D1A 1028 0026                  		move.b	$26(a0),d0
00013D1E 0600 0060                  		addi.b	#$60,d0
00013D22 0C00 00C0                  		cmpi.b	#-$40,d0
00013D26 6400                       		bcc.s	locret_13544
00013D28 1028 0026                  		move.b	$26(a0),d0
00013D2C 4EB9 0000 2C64             		jsr	(CalcSine).l
00013D32 C1FC 0050                  		muls.w	#$50,d0
00013D36 E080                       		asr.l	#8,d0
00013D38 4A68 0014                  		tst.w	$14(a0)
00013D3C 6B00                       		bmi.s	loc_1353A
00013D3E 4A40                       		tst.w	d0
00013D40 6A00                       		bpl.s	loc_13534
00013D42 E480                       		asr.l	#2,d0
00013D44                            
00013D44                            loc_13534:
00013D44 D168 0014                  		add.w	d0,$14(a0)
00013D48 4E75                       		rts	
00013D4A                            ; ===========================================================================
00013D4A                            
00013D4A                            loc_1353A:
00013D4A 4A40                       		tst.w	d0
00013D4C 6B00                       		bmi.s	loc_13540
00013D4E E480                       		asr.l	#2,d0
00013D50                            
00013D50                            loc_13540:
00013D50 D168 0014                  		add.w	d0,$14(a0)
00013D54                            
00013D54                            locret_13544:
00013D54 4E75                       		rts	
00013D56                            ; End of function Sonic_RollRepel
00013D56                            
00013D56                            ; ---------------------------------------------------------------------------
00013D56                            ; Subroutine to	push Sonic down	a slope
00013D56                            ; ---------------------------------------------------------------------------
00013D56                            
00013D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D56                            
00013D56                            
00013D56                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D56 4E71                       		nop	
00013D58 4A28 0038                  		tst.b	$38(a0)
00013D5C 6600                       		bne.s	locret_13580
00013D5E 4A68 003E                  		tst.w	$3E(a0)
00013D62 6600                       		bne.s	loc_13582
00013D64 1028 0026                  		move.b	$26(a0),d0
00013D68 0600 0020                  		addi.b	#$20,d0
00013D6C 0200 00C0                  		andi.b	#$C0,d0
00013D70 6700                       		beq.s	locret_13580
00013D72 3028 0014                  		move.w	$14(a0),d0
00013D76 6A00                       		bpl.s	loc_1356A
00013D78 4440                       		neg.w	d0
00013D7A                            
00013D7A                            loc_1356A:
00013D7A 0C40 0280                  		cmpi.w	#$280,d0
00013D7E 6400                       		bcc.s	locret_13580
00013D80 4268 0014                  		clr.w	$14(a0)
00013D84 08E8 0001 0022             		bset	#1,$22(a0)
00013D8A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013D90                            
00013D90                            locret_13580:
00013D90 4E75                       		rts	
00013D92                            ; ===========================================================================
00013D92                            
00013D92                            loc_13582:
00013D92 5368 003E                  		subq.w	#1,$3E(a0)
00013D96 4E75                       		rts	
00013D98                            ; End of function Sonic_SlopeRepel
00013D98                            
00013D98                            ; ---------------------------------------------------------------------------
00013D98                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013D98                            ; ---------------------------------------------------------------------------
00013D98                            
00013D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D98                            
00013D98                            
00013D98                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D98 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013D9C 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013D9E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013DA0                            
00013DA0 5400                       		addq.b	#2,d0		; increase angle
00013DA2 6400                       		bcc.s	loc_13596
00013DA4 7000                       		moveq	#0,d0
00013DA6                            
00013DA6                            loc_13596:
00013DA6 6000                       		bra.s	loc_1359E
00013DA8                            ; ===========================================================================
00013DA8                            
00013DA8                            loc_13598:
00013DA8 5500                       		subq.b	#2,d0		; decrease angle
00013DAA 6400                       		bcc.s	loc_1359E
00013DAC 7000                       		moveq	#0,d0
00013DAE                            
00013DAE                            loc_1359E:
00013DAE 1140 0026                  		move.b	d0,$26(a0)
00013DB2                            
00013DB2                            locret_135A2:
00013DB2 4E75                       		rts	
00013DB4                            ; End of function Sonic_JumpAngle
00013DB4                            
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            
00013DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DB4                            
00013DB4                            
00013DB4                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013DB4 3228 0010                  		move.w	$10(a0),d1
00013DB8 3428 0012                  		move.w	$12(a0),d2
00013DBC 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013DC2 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013DC6 0400 0020                  		subi.b	#$20,d0
00013DCA 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013DCE 0200 00C0                  		andi.b	#$C0,d0
00013DD2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013DD6 0C00 0040                  		cmpi.b	#$40,d0
00013DDA 6700 0000                  		beq.w	loc_13680
00013DDE 0C00 0080                  		cmpi.b	#$80,d0
00013DE2 6700 0000                  		beq.w	loc_136E2
00013DE6 0C00 00C0                  		cmpi.b	#-$40,d0
00013DEA 6700 0000                  		beq.w	loc_1373E
00013DEE 6100 0000                  		bsr.w	Sonic_HitWall
00013DF2 4A41                       		tst.w	d1
00013DF4 6A00                       		bpl.s	loc_135F0
00013DF6 9368 0008                  		sub.w	d1,8(a0)
00013DFA 317C 0000 0010             		move.w	#0,$10(a0)
00013E00                            
00013E00                            loc_135F0:
00013E00 6100 0000                  		bsr.w	sub_14EB4
00013E04 4A41                       		tst.w	d1
00013E06 6A00                       		bpl.s	loc_13602
00013E08 D368 0008                  		add.w	d1,8(a0)
00013E0C 317C 0000 0010             		move.w	#0,$10(a0)
00013E12                            
00013E12                            loc_13602:
00013E12 6100 0000                  		bsr.w	Sonic_HitFloor
00013E16 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013E1A 4A41                       		tst.w	d1
00013E1C 6A00                       		bpl.s	locret_1367E
00013E1E 1428 0012                  		move.b	$12(a0),d2
00013E22 5002                       		addq.b	#8,d2
00013E24 4402                       		neg.b	d2
00013E26 B202                       		cmp.b	d2,d1
00013E28 6C00                       		bge.s	loc_1361E
00013E2A B002                       		cmp.b	d2,d0
00013E2C 6D00                       		blt.s	locret_1367E
00013E2E                            
00013E2E                            loc_1361E:
00013E2E D368 000C                  		add.w	d1,$C(a0)
00013E32 1143 0026                  		move.b	d3,$26(a0)
00013E36 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E3A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E40 1003                       		move.b	d3,d0
00013E42 0600 0020                  		addi.b	#$20,d0
00013E46 0200 0040                  		andi.b	#$40,d0
00013E4A 6600                       		bne.s	loc_1365C
00013E4C 1003                       		move.b	d3,d0
00013E4E 0600 0010                  		addi.b	#$10,d0
00013E52 0200 0020                  		andi.b	#$20,d0
00013E56 6700                       		beq.s	loc_1364E
00013E58 E0E8 0012                  		asr	$12(a0)
00013E5C 6000                       		bra.s	loc_13670
00013E5E                            ; ===========================================================================
00013E5E                            
00013E5E                            loc_1364E:
00013E5E 317C 0000 0012             		move.w	#0,$12(a0)
00013E64 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E6A 4E75                       		rts	
00013E6C                            ; ===========================================================================
00013E6C                            
00013E6C                            loc_1365C:
00013E6C 317C 0000 0010             		move.w	#0,$10(a0)
00013E72 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013E78 6F00                       		ble.s	loc_13670
00013E7A 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013E80                            
00013E80                            loc_13670:
00013E80 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E86 4A03                       		tst.b	d3
00013E88 6A00                       		bpl.s	locret_1367E
00013E8A 4468 0014                  		neg.w	$14(a0)
00013E8E                            
00013E8E                            locret_1367E:
00013E8E 4E75                       		rts	
00013E90                            ; ===========================================================================
00013E90                            
00013E90                            loc_13680:
00013E90 6100 0000                  		bsr.w	Sonic_HitWall
00013E94 4A41                       		tst.w	d1
00013E96 6A00                       		bpl.s	loc_1369A
00013E98 9368 0008                  		sub.w	d1,8(a0)
00013E9C 317C 0000 0010             		move.w	#0,$10(a0)
00013EA2 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013EA8 4E75                       		rts	
00013EAA                            ; ===========================================================================
00013EAA                            
00013EAA                            loc_1369A:
00013EAA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EAE 4A41                       		tst.w	d1
00013EB0 6A00                       		bpl.s	loc_136B4
00013EB2 9368 000C                  		sub.w	d1,$C(a0)
00013EB6 4A68 0012                  		tst.w	$12(a0)
00013EBA 6A00                       		bpl.s	locret_136B2
00013EBC 317C 0000 0012             		move.w	#0,$12(a0)
00013EC2                            
00013EC2                            locret_136B2:
00013EC2 4E75                       		rts	
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            loc_136B4:
00013EC4 4A68 0012                  		tst.w	$12(a0)
00013EC8 6B00                       		bmi.s	locret_136E0
00013ECA 6100 0000                  		bsr.w	Sonic_HitFloor
00013ECE 4A41                       		tst.w	d1
00013ED0 6A00                       		bpl.s	locret_136E0
00013ED2 D368 000C                  		add.w	d1,$C(a0)
00013ED6 1143 0026                  		move.b	d3,$26(a0)
00013EDA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013EDE 117C 0000 001C             		move.b	#0,$1C(a0)
00013EE4 317C 0000 0012             		move.w	#0,$12(a0)
00013EEA 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EF0                            
00013EF0                            locret_136E0:
00013EF0 4E75                       		rts	
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            loc_136E2:
00013EF2 6100 0000                  		bsr.w	Sonic_HitWall
00013EF6 4A41                       		tst.w	d1
00013EF8 6A00                       		bpl.s	loc_136F4
00013EFA 9368 0008                  		sub.w	d1,8(a0)
00013EFE 317C 0000 0010             		move.w	#0,$10(a0)
00013F04                            
00013F04                            loc_136F4:
00013F04 6100 0000                  		bsr.w	sub_14EB4
00013F08 4A41                       		tst.w	d1
00013F0A 6A00                       		bpl.s	loc_13706
00013F0C D368 0008                  		add.w	d1,8(a0)
00013F10 317C 0000 0010             		move.w	#0,$10(a0)
00013F16                            
00013F16                            loc_13706:
00013F16 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F1A 4A41                       		tst.w	d1
00013F1C 6A00                       		bpl.s	locret_1373C
00013F1E 9368 000C                  		sub.w	d1,$C(a0)
00013F22 1003                       		move.b	d3,d0
00013F24 0600 0020                  		addi.b	#$20,d0
00013F28 0200 0040                  		andi.b	#$40,d0
00013F2C 6600                       		bne.s	loc_13726
00013F2E 317C 0000 0012             		move.w	#0,$12(a0)
00013F34 4E75                       		rts	
00013F36                            ; ===========================================================================
00013F36                            
00013F36                            loc_13726:
00013F36 1143 0026                  		move.b	d3,$26(a0)
00013F3A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F3E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F44 4A03                       		tst.b	d3
00013F46 6A00                       		bpl.s	locret_1373C
00013F48 4468 0014                  		neg.w	$14(a0)
00013F4C                            
00013F4C                            locret_1373C:
00013F4C 4E75                       		rts	
00013F4E                            ; ===========================================================================
00013F4E                            
00013F4E                            loc_1373E:
00013F4E 6100 0000                  		bsr.w	sub_14EB4
00013F52 4A41                       		tst.w	d1
00013F54 6A00                       		bpl.s	loc_13758
00013F56 D368 0008                  		add.w	d1,8(a0)
00013F5A 317C 0000 0010             		move.w	#0,$10(a0)
00013F60 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F66 4E75                       		rts	
00013F68                            ; ===========================================================================
00013F68                            
00013F68                            loc_13758:
00013F68 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F6C 4A41                       		tst.w	d1
00013F6E 6A00                       		bpl.s	loc_13772
00013F70 9368 000C                  		sub.w	d1,$C(a0)
00013F74 4A68 0012                  		tst.w	$12(a0)
00013F78 6A00                       		bpl.s	locret_13770
00013F7A 317C 0000 0012             		move.w	#0,$12(a0)
00013F80                            
00013F80                            locret_13770:
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_13772:
00013F82 4A68 0012                  		tst.w	$12(a0)
00013F86 6B00                       		bmi.s	locret_1379E
00013F88 6100 0000                  		bsr.w	Sonic_HitFloor
00013F8C 4A41                       		tst.w	d1
00013F8E 6A00                       		bpl.s	locret_1379E
00013F90 D368 000C                  		add.w	d1,$C(a0)
00013F94 1143 0026                  		move.b	d3,$26(a0)
00013F98 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F9C 117C 0000 001C             		move.b	#0,$1C(a0)
00013FA2 317C 0000 0012             		move.w	#0,$12(a0)
00013FA8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FAE                            
00013FAE                            locret_1379E:
00013FAE 4E75                       		rts	
00013FB0                            ; End of function Sonic_Floor
00013FB0                            
00013FB0                            ; ---------------------------------------------------------------------------
00013FB0                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013FB0                            ; ---------------------------------------------------------------------------
00013FB0                            
00013FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FB0                            
00013FB0                            
00013FB0                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013FB0 0828 0004 0022             		btst	#4,$22(a0)
00013FB6 6700                       		beq.s	loc_137AE
00013FB8 4E71                       		nop	
00013FBA 4E71                       		nop	
00013FBC 4E71                       		nop	
00013FBE                            
00013FBE                            loc_137AE:
00013FBE 08A8 0005 0022             		bclr	#5,$22(a0)
00013FC4 08A8 0001 0022             		bclr	#1,$22(a0)
00013FCA 08A8 0004 0022             		bclr	#4,$22(a0)
00013FD0 0828 0002 0022             		btst	#2,$22(a0)
00013FD6 6700                       		beq.s	loc_137E4
00013FD8 08A8 0002 0022             		bclr	#2,$22(a0)
00013FDE 117C 0013 0016             		move.b	#$13,$16(a0)
00013FE4 117C 0009 0017             		move.b	#9,$17(a0)
00013FEA 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013FF0 5B68 000C                  		subq.w	#5,$C(a0)
00013FF4                            
00013FF4                            loc_137E4:
00013FF4 117C 0000 003C             		move.b	#0,$3C(a0)
00013FFA 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014000 4E75                       		rts	
00014002                            ; End of function Sonic_ResetOnFloor
00014002                            
00014002                            ; ===========================================================================
00014002                            ; ---------------------------------------------------------------------------
00014002                            ; Sonic	when he	gets hurt
00014002                            ; ---------------------------------------------------------------------------
00014002                            
00014002                            Obj01_Hurt:				; XREF: Obj01_Index
00014002 4EBA 9D48                  		jsr	SpeedToPos
00014006 0668 0030 0012             		addi.w	#$30,$12(a0)
0001400C 0828 0006 0022             		btst	#6,$22(a0)
00014012 6700                       		beq.s	loc_1380C
00014014 0468 0020 0012             		subi.w	#$20,$12(a0)
0001401A                            
0001401A                            loc_1380C:
0001401A 6100 0000                  		bsr.w	Sonic_HurtStop
0001401E 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014022 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014026 6100 0000                  		bsr.w	Sonic_Animate
0001402A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001402E 4EFA 9D42                  		jmp	DisplaySprite
00014032                            
00014032                            ; ---------------------------------------------------------------------------
00014032                            ; Subroutine to	stop Sonic falling after he's been hurt
00014032                            ; ---------------------------------------------------------------------------
00014032                            
00014032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014032                            
00014032                            
00014032                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014032 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014036 0640 00E0                  		addi.w	#$E0,d0
0001403A B068 000C                  		cmp.w	$C(a0),d0
0001403E 6500 0000                  		bcs.w	KillSonic
00014042 6100 FD70                  		bsr.w	Sonic_Floor
00014046 0828 0001 0022             		btst	#1,$22(a0)
0001404C 6600                       		bne.s	locret_13860
0001404E 7000                       		moveq	#0,d0
00014050 3140 0012                  		move.w	d0,$12(a0)
00014054 3140 0010                  		move.w	d0,$10(a0)
00014058 3140 0014                  		move.w	d0,$14(a0)
0001405C 117C 0000 001C             		move.b	#0,$1C(a0)
00014062 5528 0024                  		subq.b	#2,$24(a0)
00014066 317C 0078 0030             		move.w	#$78,$30(a0)
0001406C                            
0001406C                            locret_13860:
0001406C 4E75                       		rts	
0001406E                            ; End of function Sonic_HurtStop
0001406E                            
0001406E                            ; ===========================================================================
0001406E                            ; ---------------------------------------------------------------------------
0001406E                            ; Sonic	when he	dies
0001406E                            ; ---------------------------------------------------------------------------
0001406E                            
0001406E                            Obj01_Death:				; XREF: Obj01_Index
0001406E 6100 0000                  		bsr.w	GameOver
00014072 4EBA 9CAC                  		jsr	ObjectFall
00014076 6100 F460                  		bsr.w	Sonic_RecordPos
0001407A 6100 0000                  		bsr.w	Sonic_Animate
0001407E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014082 4EFA 9CEE                  		jmp	DisplaySprite
00014086                            
00014086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014086                            
00014086                            
00014086                            GameOver:				; XREF: Obj01_Death
00014086 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001408A 0640 0100                  		addi.w	#$100,d0
0001408E B068 000C                  		cmp.w	$C(a0),d0
00014092 6400 0000                  		bcc.w	locret_13900
00014096 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001409C 5428 0024                  		addq.b	#2,$24(a0)
000140A0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000140A4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000140A8 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000140AC 6600                       		bne.s	loc_138D4
000140AE 317C 0000 003A             		move.w	#0,$3A(a0)
000140B4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000140BA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140C0 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000140C6 4238 FE1A                  		clr.b	($FFFFFE1A).w
000140CA                            
000140CA                            loc_138C2:
000140CA 303C 008F                  		move.w	#$8F,d0
000140CE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
000140D4 7003                       		moveq	#3,d0
000140D6 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
000140DC                            ; ===========================================================================
000140DC                            
000140DC                            loc_138D4:
000140DC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000140E2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000140E6 6700                       		beq.s	locret_13900	; if not, branch
000140E8 317C 0000 003A             		move.w	#0,$3A(a0)
000140EE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000140F4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140FA 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014100 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014106 60C2                       		bra.s	loc_138C2
00014108                            ; ===========================================================================
00014108                            
00014108                            locret_13900:
00014108 4E75                       		rts	
0001410A                            ; End of function GameOver
0001410A                            
0001410A                            ; ===========================================================================
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            ; Sonic	when the level is restarted
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            
0001410A                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001410A 4A68 003A                  		tst.w	$3A(a0)
0001410E 6700                       		beq.s	locret_13914
00014110 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014114 6600                       		bne.s	locret_13914
00014116 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001411C                            
0001411C                            locret_13914:
0001411C 4E75                       		rts	
0001411E                            
0001411E                            ; ---------------------------------------------------------------------------
0001411E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001411E                            ; ---------------------------------------------------------------------------
0001411E                            
0001411E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001411E                            
0001411E                            
0001411E                            Sonic_Loops:				; XREF: Obj01_Control
0001411E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014124 6700                       		beq.s	loc_13926	; if yes, branch
00014126 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001412A 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001412E                            
0001412E                            loc_13926:
0001412E 3028 000C                  		move.w	$C(a0),d0
00014132 E248                       		lsr.w	#1,d0
00014134 0240 0380                  		andi.w	#$380,d0
00014138 1228 0008                  		move.b	8(a0),d1
0001413C 0241 007F                  		andi.w	#$7F,d1
00014140 D041                       		add.w	d1,d0
00014142 43F8 A400                  		lea	($FFFFA400).w,a1
00014146 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001414A B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001414E 6700 FA66                  		beq.w	Obj01_ChkRoll
00014152 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014156 6700 FA5E                  		beq.w	Obj01_ChkRoll
0001415A B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001415E 6700                       		beq.s	loc_13976
00014160 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014164 6700                       		beq.s	loc_13966
00014166 08A8 0006 0001             		bclr	#6,1(a0)
0001416C 4E75                       		rts	
0001416E                            ; ===========================================================================
0001416E                            
0001416E                            loc_13966:
0001416E 0828 0001 0022             		btst	#1,$22(a0)
00014174 6700                       		beq.s	loc_13976
00014176 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001417C 4E75                       		rts	
0001417E                            ; ===========================================================================
0001417E                            
0001417E                            loc_13976:
0001417E 3428 0008                  		move.w	8(a0),d2
00014182 0C02 002C                  		cmpi.b	#$2C,d2
00014186 6400                       		bcc.s	loc_13988
00014188 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001418E 4E75                       		rts	
00014190                            ; ===========================================================================
00014190                            
00014190                            loc_13988:
00014190 0C02 00E0                  		cmpi.b	#-$20,d2
00014194 6500                       		bcs.s	loc_13996
00014196 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001419C 4E75                       		rts	
0001419E                            ; ===========================================================================
0001419E                            
0001419E                            loc_13996:
0001419E 0828 0006 0001             		btst	#6,1(a0)
000141A4 6600                       		bne.s	loc_139B2
000141A6 1228 0026                  		move.b	$26(a0),d1
000141AA 6700                       		beq.s	locret_139C2
000141AC 0C01 0080                  		cmpi.b	#-$80,d1
000141B0 6200                       		bhi.s	locret_139C2
000141B2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000141B8 4E75                       		rts	
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            loc_139B2:
000141BA 1228 0026                  		move.b	$26(a0),d1
000141BE 0C01 0080                  		cmpi.b	#-$80,d1
000141C2 6300                       		bls.s	locret_139C2
000141C4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141CA                            
000141CA                            locret_139C2:
000141CA 4E75                       		rts	
000141CC                            ; End of function Sonic_Loops
000141CC                            
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            ; Subroutine to	animate	Sonic's sprites
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            
000141CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141CC                            
000141CC                            Player_Anim:
000141CC 0000 0000                  	dc.l	SonicAniData
000141D0 0000 0000                  	dc.l	SonicAniData ; gronic
000141D4                            	; Insert more animation data for other characters here
000141D4                            	
000141D4                            Sonic_Animate:				; XREF: Obj01_Control; et al
000141D4 7000                       			moveq	#0,d0
000141D6 1038 FFE8                  		move.b	(v_character),d0
000141DA E548                       		lsl.w	#2,d0
000141DC 43FA FFEE                  		lea 	Player_Anim(pc),a1
000141E0                            		
000141E0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000141E4                            	
000141E4 7000                       		moveq	#0,d0
000141E6 1028 001C                  		move.b	$1C(a0),d0
000141EA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000141EE 6700                       		beq.s	SAnim_Do	; if not, branch
000141F0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000141F4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000141FA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014200                            
00014200                            SAnim_Do:
00014200 D040                       		add.w	d0,d0
00014202 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014206 1011                       		move.b	(a1),d0
00014208 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001420A 1228 0022                  		move.b	$22(a0),d1
0001420E 0201 0001                  		andi.b	#1,d1
00014212 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014218 8328 0001                  		or.b	d1,1(a0)
0001421C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014220 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014222 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014226                            
00014226                            SAnim_Do2:
00014226 7200                       		moveq	#0,d1
00014228 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001422C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014230 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014232                            
00014232                            SAnim_Next:
00014232 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014236 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001423A                            
0001423A                            SAnim_Delay:
0001423A 4E75                       		rts	
0001423C                            ; ===========================================================================
0001423C                            
0001423C                            SAnim_End_FF:
0001423C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001423E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014240 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014246 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001424A 60E6                       		bra.s	SAnim_Next
0001424C                            ; ===========================================================================
0001424C                            
0001424C                            SAnim_End_FE:
0001424C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001424E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014250 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014254 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014258 9200                       		sub.b	d0,d1
0001425A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001425E 60D2                       		bra.s	SAnim_Next
00014260                            ; ===========================================================================
00014260                            
00014260                            SAnim_End_FD:
00014260 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014262 6600                       		bne.s	SAnim_End	; if not, branch
00014264 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001426A                            
0001426A                            SAnim_End:
0001426A 4E75                       		rts	
0001426C                            ; ===========================================================================
0001426C                            
0001426C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001426C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014270 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014272 5200                       		addq.b	#1,d0		; is animation walking/running?
00014274 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014278 7200                       		moveq	#0,d1
0001427A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001427E 1428 0022                  		move.b	$22(a0),d2
00014282 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014286 6600                       		bne.s	loc_13A70	; if yes, branch
00014288 4600                       		not.b	d0		; reverse angle
0001428A                            
0001428A                            loc_13A70:
0001428A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001428E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014290 7203                       		moveq	#3,d1
00014292                            
00014292                            loc_13A78:
00014292 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014298 B302                       		eor.b	d1,d2
0001429A 8528 0001                  		or.b	d2,1(a0)
0001429E 0828 0005 0022             		btst	#5,$22(a0)
000142A4 6600 0000                  		bne.w	SAnim_Push
000142A8 E808                       		lsr.b	#4,d0		; divide angle by $10
000142AA 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000142AE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142B2 6A00                       		bpl.s	loc_13A9C
000142B4 4442                       		neg.w	d2
000142B6                            
000142B6                            loc_13A9C:
000142B6 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000142BC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000142C0 6400                       		bcc.s	loc_13AB4	; if yes, branch
000142C2 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000142C8 1200                       		move.b	d0,d1
000142CA E209                       		lsr.b	#1,d1
000142CC D001                       		add.b	d1,d0
000142CE                            
000142CE                            loc_13AB4:
000142CE D000                       		add.b	d0,d0
000142D0 1600                       		move.b	d0,d3
000142D2 4442                       		neg.w	d2
000142D4 0642 0800                  		addi.w	#$800,d2
000142D8 6A00                       		bpl.s	loc_13AC2
000142DA 7400                       		moveq	#0,d2
000142DC                            
000142DC                            loc_13AC2:
000142DC E04A                       		lsr.w	#8,d2
000142DE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142E2 6100 FF42                  		bsr.w	SAnim_Do2
000142E6 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000142EA 4E75                       		rts	
000142EC                            ; ===========================================================================
000142EC                            
000142EC                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000142EC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000142EE 6600                       		bne.s	SAnim_Push	; if not, branch
000142F0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142F4 6A00                       		bpl.s	loc_13ADE
000142F6 4442                       		neg.w	d2
000142F8                            
000142F8                            loc_13ADE:
000142F8 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000142FE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014302 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014304 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001430A                            
0001430A                            loc_13AF0:
0001430A 4442                       		neg.w	d2
0001430C 0642 0400                  		addi.w	#$400,d2
00014310 6A00                       		bpl.s	loc_13AFA
00014312 7400                       		moveq	#0,d2
00014314                            
00014314                            loc_13AFA:
00014314 E04A                       		lsr.w	#8,d2
00014316 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001431A 1228 0022                  		move.b	$22(a0),d1
0001431E 0201 0001                  		andi.b	#1,d1
00014322 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014328 8328 0001                  		or.b	d1,1(a0)
0001432C 6000 FEF8                  		bra.w	SAnim_Do2
00014330                            ; ===========================================================================
00014330                            
00014330                            SAnim_Push:				; XREF: SAnim_RollJump
00014330 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014334 6B00                       		bmi.s	loc_13B1E
00014336 4442                       		neg.w	d2
00014338                            
00014338                            loc_13B1E:
00014338 0642 0800                  		addi.w	#$800,d2
0001433C 6A00                       		bpl.s	loc_13B26
0001433E 7400                       		moveq	#0,d2
00014340                            
00014340                            loc_13B26:
00014340 EC4A                       		lsr.w	#6,d2
00014342 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014346 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001434C 1228 0022                  		move.b	$22(a0),d1
00014350 0201 0001                  		andi.b	#1,d1
00014354 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001435A 8328 0001                  		or.b	d1,1(a0)
0001435E 6000 FEC6                  		bra.w	SAnim_Do2
00014362                            ; End of function Sonic_Animate
00014362                            
00014362                            ; ===========================================================================
00014362                            SonicAniData:
00014362                            	include "_anim\Sonic.asm"
00014362                            ; ---------------------------------------------------------------------------
00014362                            ; Animation script - Sonic
00014362                            ; ---------------------------------------------------------------------------
00014362 0000                       		dc.w SonAni_Walk-SonicAniData
00014364 0000                       		dc.w SonAni_Run-SonicAniData
00014366 0000                       		dc.w SonAni_Roll-SonicAniData
00014368 0000                       		dc.w SonAni_Roll2-SonicAniData
0001436A 0000                       		dc.w SonAni_Push-SonicAniData
0001436C 0000                       		dc.w SonAni_Wait-SonicAniData
0001436E 0000                       		dc.w SonAni_Balance-SonicAniData
00014370 0000                       		dc.w SonAni_LookUp-SonicAniData
00014372 0000                       		dc.w SonAni_Duck-SonicAniData
00014374 0000                       		dc.w SonAni_Warp1-SonicAniData
00014376 0000                       		dc.w SonAni_Warp2-SonicAniData
00014378 0000                       		dc.w SonAni_Warp3-SonicAniData
0001437A 0000                       		dc.w SonAni_Warp4-SonicAniData
0001437C 0000                       		dc.w SonAni_Stop-SonicAniData
0001437E 0000                       		dc.w SonAni_Float1-SonicAniData
00014380 0000                       		dc.w SonAni_Float2-SonicAniData
00014382 0000                       		dc.w SonAni_Spring-SonicAniData
00014384 0000                       		dc.w SonAni_LZHang-SonicAniData
00014386 0000                       		dc.w SonAni_Leap1-SonicAniData
00014388 0000                       		dc.w SonAni_Leap2-SonicAniData
0001438A 0000                       		dc.w SonAni_Surf-SonicAniData
0001438C 0000                       		dc.w SonAni_Bubble-SonicAniData
0001438E 0000                       		dc.w SonAni_Death1-SonicAniData
00014390 0000                       		dc.w SonAni_Drown-SonicAniData
00014392 0000                       		dc.w SonAni_Death2-SonicAniData
00014394 0000                       		dc.w SonAni_Shrink-SonicAniData
00014396 0000                       		dc.w SonAni_Hurt-SonicAniData
00014398 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001439A 0000                       		dc.w SonAni_Blank-SonicAniData
0001439C 0000                       		dc.w SonAni_Float3-SonicAniData
0001439E 0000                       		dc.w SonAni_Float4-SonicAniData
000143A0 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000143AA FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000143B2 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000143BA FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000143C2 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000143CA 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000143E0 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000143E4 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000143E8 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000143EC 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000143F0 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000143F4 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000143F8 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000143FC 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014400 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014404 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001440C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014410 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014414 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001441A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014420 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014424 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001442C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014430 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014434 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014438 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014442 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014446 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001444A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001444E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014456 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001445A                            		even
0001445A                            		even
0001445A                            
0001445A                            ; ---------------------------------------------------------------------------
0001445A                            ; Sonic	pattern	loading	subroutine
0001445A                            ; ---------------------------------------------------------------------------
0001445A                            
0001445A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001445A                            Player_DPLC:
0001445A 0000 0000                  	dc.l	SonicDynPLC
0001445E 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014462                            	; add pointers for player dplc here
00014462                            Player_Art:
00014462 0000 0000                  	dc.l	Art_Sonic
00014466 0000 0000                  	dc.l	Art_Sonic ; gronic
0001446A                            	; add pointers for player art here
0001446A                            
0001446A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001446A 7000                       		moveq	#0,d0
0001446C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014470 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014474 6700                       		beq.s	locret_13C96
00014476 11C0 F766                  		move.b	d0,($FFFFF766).w
0001447A                            		
0001447A 323C 0000                  		move.w	#0,d1
0001447E 1238 FFE8                  		move.b	(v_character),d1
00014482 E549                       		lsl.w	#2,d1
00014484 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014488                            
00014488 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001448C                            		
0001448C D040                       		add.w	d0,d0
0001448E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014492 7200                       		moveq	#0,d1
00014494 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014496 5301                       		subq.b	#1,d1
00014498 6B00                       		bmi.s	locret_13C96
0001449A 47F8 C800                  		lea	($FFFFC800).w,a3
0001449E 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000144A4                            
000144A4                            SPLC_ReadEntry:
000144A4 303C 0000                  		move.w	#0,d0
000144A8 1038 FFE8                  		move.b	(v_character),d0
000144AC E548                       		lsl.w	#2,d0
000144AE 43FA FFB2                  		lea 	Player_Art(pc),a1
000144B2                            
000144B2 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000144B6                            
000144B6 7400                       		moveq	#0,d2
000144B8 141A                       		move.b	(a2)+,d2
000144BA 3002                       		move.w	d2,d0
000144BC E808                       		lsr.b	#4,d0
000144BE E14A                       		lsl.w	#8,d2
000144C0 141A                       		move.b	(a2)+,d2
000144C2 EB4A                       		lsl.w	#5,d2
000144C4 D3C2                       		adda.l	d2,a1
000144C6                            
000144C6                            SPLC_LoadTile:
000144C6 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000144CA 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000144CE 47EB 0020                  		lea	$20(a3),a3	; next tile
000144D2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000144D6                            
000144D6 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000144DA                            
000144DA                            locret_13C96:
000144DA 4E75                       		rts	
000144DC                            ; End of function LoadSonicDynPLC
000144DC                            
000144DC                            ; ===========================================================================
000144DC                            ; ---------------------------------------------------------------------------
000144DC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000144DC                            ; ---------------------------------------------------------------------------
000144DC                            
000144DC                            Obj0A:					; XREF: Obj_Index
000144DC 7000                       		moveq	#0,d0
000144DE 1028 0024                  		move.b	$24(a0),d0
000144E2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000144E6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000144EA                            ; ===========================================================================
000144EA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000144EE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000144F2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000144F6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000144FA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000144FC                            ; ===========================================================================
000144FC                            
000144FC                            Obj0A_Main:				; XREF: Obj0A_Index
000144FC 5428 0024                  		addq.b	#2,$24(a0)
00014500 217C 0001 3104 0004        		move.l	#Map_obj64,4(a0)
00014508 317C 8348 0002             		move.w	#$8348,2(a0)
0001450E 117C 0084 0001             		move.b	#$84,1(a0)
00014514 117C 0010 0019             		move.b	#$10,$19(a0)
0001451A 117C 0001 0018             		move.b	#1,$18(a0)
00014520 1028 0028                  		move.b	$28(a0),d0
00014524 6A00                       		bpl.s	loc_13D00
00014526 5028 0024                  		addq.b	#8,$24(a0)
0001452A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014532 317C 0440 0002             		move.w	#$440,2(a0)
00014538 0240 007F                  		andi.w	#$7F,d0
0001453C 1140 0033                  		move.b	d0,$33(a0)
00014540 6000 0000                  		bra.w	Obj0A_Countdown
00014544                            ; ===========================================================================
00014544                            
00014544                            loc_13D00:
00014544 1140 001C                  		move.b	d0,$1C(a0)
00014548 3168 0008 0030             		move.w	8(a0),$30(a0)
0001454E 317C FF78 0012             		move.w	#-$88,$12(a0)
00014554                            
00014554                            Obj0A_Animate:				; XREF: Obj0A_Index
00014554 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001455A 4EB9 0000 AE32             		jsr	AnimateSprite
00014560                            
00014560                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014560 3038 F646                  		move.w	($FFFFF646).w,d0
00014564 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014568 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001456A 117C 0006 0024             		move.b	#6,$24(a0)
00014570 5E28 001C                  		addq.b	#7,$1C(a0)
00014574 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001457A 6700                       		beq.s	Obj0A_Display
0001457C 6000                       		bra.s	Obj0A_Display
0001457E                            ; ===========================================================================
0001457E                            
0001457E                            Obj0A_Wobble:
0001457E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014582 6700                       		beq.s	loc_13D44
00014584 5868 0030                  		addq.w	#4,$30(a0)
00014588                            
00014588                            loc_13D44:
00014588 1028 0026                  		move.b	$26(a0),d0
0001458C 5228 0026                  		addq.b	#1,$26(a0)
00014590 0240 007F                  		andi.w	#$7F,d0
00014594 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001459A 1031 0000                  		move.b	(a1,d0.w),d0
0001459E 4880                       		ext.w	d0
000145A0 D068 0030                  		add.w	$30(a0),d0
000145A4 3140 0008                  		move.w	d0,8(a0)
000145A8 6100                       		bsr.s	Obj0A_ShowNumber
000145AA 4EBA 97A0                  		jsr	SpeedToPos
000145AE 4A28 0001                  		tst.b	1(a0)
000145B2 6A00                       		bpl.s	Obj0A_Delete
000145B4 4EFA 97BC                  		jmp	DisplaySprite
000145B8                            ; ===========================================================================
000145B8                            
000145B8                            Obj0A_Delete:
000145B8 4EFA 97F4                  		jmp	DeleteObject
000145BC                            ; ===========================================================================
000145BC                            
000145BC                            Obj0A_Display:				; XREF: Obj0A_Index
000145BC 6100                       		bsr.s	Obj0A_ShowNumber
000145BE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145C4 4EB9 0000 AE32             		jsr	AnimateSprite
000145CA 4EFA 97A6                  		jmp	DisplaySprite
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            Obj0A_Delete2:				; XREF: Obj0A_Index
000145CE 4EFA 97DE                  		jmp	DeleteObject
000145D2                            ; ===========================================================================
000145D2                            
000145D2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000145D2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000145D8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000145DA 5368 0038                  		subq.w	#1,$38(a0)
000145DE 6600                       		bne.s	Obj0A_Display2
000145E0 117C 000E 0024             		move.b	#$E,$24(a0)
000145E6 5E28 001C                  		addq.b	#7,$1C(a0)
000145EA 60D0                       		bra.s	Obj0A_Display
000145EC                            ; ===========================================================================
000145EC                            
000145EC                            Obj0A_Display2:
000145EC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145F2 4EB9 0000 AE32             		jsr	AnimateSprite
000145F8 4A28 0001                  		tst.b	1(a0)
000145FC 6A00                       		bpl.s	Obj0A_Delete3
000145FE 4EFA 9772                  		jmp	DisplaySprite
00014602                            ; ===========================================================================
00014602                            
00014602                            Obj0A_Delete3:
00014602 4EFA 97AA                  		jmp	DeleteObject
00014606                            ; ===========================================================================
00014606                            
00014606                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014606 4A68 0038                  		tst.w	$38(a0)
0001460A 6700                       		beq.s	locret_13E1A
0001460C 5368 0038                  		subq.w	#1,$38(a0)
00014610 6600                       		bne.s	locret_13E1A
00014612 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014618 6400                       		bcc.s	locret_13E1A
0001461A 317C 000F 0038             		move.w	#$F,$38(a0)
00014620 4268 0012                  		clr.w	$12(a0)
00014624 117C 0080 0001             		move.b	#$80,1(a0)
0001462A 3028 0008                  		move.w	8(a0),d0
0001462E 9078 F700                  		sub.w	($FFFFF700).w,d0
00014632 0640 0080                  		addi.w	#$80,d0
00014636 3140 0008                  		move.w	d0,8(a0)
0001463A 3028 000C                  		move.w	$C(a0),d0
0001463E 9078 F704                  		sub.w	($FFFFF704).w,d0
00014642 0640 0080                  		addi.w	#$80,d0
00014646 3140 000A                  		move.w	d0,$A(a0)
0001464A 117C 000C 0024             		move.b	#$C,$24(a0)
00014650                            
00014650                            locret_13E1A:
00014650 4E75                       		rts	
00014652                            ; ===========================================================================
00014652                            Obj0A_WobbleData:
00014652 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014663 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014674 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014685 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014695 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000146A2 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000146AF FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000146BC FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000146C9 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000146D2                            ; ===========================================================================
000146D2                            
000146D2                            Obj0A_Countdown:			; XREF: Obj0A_Index
000146D2 4A68 002C                  		tst.w	$2C(a0)
000146D6 6600 0000                  		bne.w	loc_13F86
000146DA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000146E0 6400 0000                  		bcc.w	locret_1408C
000146E4 0838 0006 D022             		btst	#6,($FFFFD022).w
000146EA 6700 0000                  		beq.w	locret_1408C
000146EE 5368 0038                  		subq.w	#1,$38(a0)
000146F2 6A00 0000                  		bpl.w	loc_13FAC
000146F6 317C 003B 0038             		move.w	#59,$38(a0)
000146FC 317C 0001 0036             		move.w	#1,$36(a0)
00014702 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014708 0240 0001                  		andi.w	#1,d0
0001470C 1140 0034                  		move.b	d0,$34(a0)
00014710 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014714 0C40 0019                  		cmpi.w	#$19,d0
00014718 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001471A 0C40 0014                  		cmpi.w	#$14,d0
0001471E 6700                       		beq.s	Obj0A_WarnSound
00014720 0C40 000F                  		cmpi.w	#$F,d0
00014724 6700                       		beq.s	Obj0A_WarnSound
00014726 0C40 000C                  		cmpi.w	#$C,d0
0001472A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001472C 6600                       		bne.s	loc_13F02
0001472E 303C 0092                  		move.w	#$92,d0
00014732 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
00014738                            
00014738                            loc_13F02:
00014738 5328 0032                  		subq.b	#1,$32(a0)
0001473C 6A00                       		bpl.s	Obj0A_ReduceAir
0001473E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014744 08E8 0007 0036             		bset	#7,$36(a0)
0001474A 6000                       		bra.s	Obj0A_ReduceAir
0001474C                            ; ===========================================================================
0001474C                            
0001474C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001474C 303C 00C2                  		move.w	#$C2,d0
00014750 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014756                            
00014756                            Obj0A_ReduceAir:
00014756 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001475A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001475E 6100 0000                  		bsr.w	ResumeMusic
00014762 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014768 303C 00B2                  		move.w	#$B2,d0
0001476C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014772 117C 000A 0034             		move.b	#$A,$34(a0)
00014778 317C 0001 0036             		move.w	#1,$36(a0)
0001477E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014784 2F08                       		move.l	a0,-(sp)
00014786 41F8 D000                  		lea	($FFFFD000).w,a0
0001478A 6100 F824                  		bsr.w	Sonic_ResetOnFloor
0001478E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014794 08E8 0001 0022             		bset	#1,$22(a0)
0001479A 08E8 0007 0002             		bset	#7,2(a0)
000147A0 317C 0000 0012             		move.w	#0,$12(a0)
000147A6 317C 0000 0010             		move.w	#0,$10(a0)
000147AC 317C 0000 0014             		move.w	#0,$14(a0)
000147B2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000147B8 205F                       		movea.l	(sp)+,a0
000147BA 4E75                       		rts	
000147BC                            ; ===========================================================================
000147BC                            
000147BC                            loc_13F86:
000147BC 5368 002C                  		subq.w	#1,$2C(a0)
000147C0 6600                       		bne.s	loc_13F94
000147C2 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000147C8 4E75                       		rts	
000147CA                            ; ===========================================================================
000147CA                            
000147CA                            loc_13F94:
000147CA 2F08                       		move.l	a0,-(sp)
000147CC 41F8 D000                  		lea	($FFFFD000).w,a0
000147D0 4EBA 957A                  		jsr	SpeedToPos
000147D4 0668 0010 0012             		addi.w	#$10,$12(a0)
000147DA 205F                       		movea.l	(sp)+,a0
000147DC 6000                       		bra.s	loc_13FAC
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000147DE 6000                       		bra.s	Obj0A_MakeItem
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            loc_13FAC:
000147E0 4A68 0036                  		tst.w	$36(a0)
000147E4 6700 0000                  		beq.w	locret_1408C
000147E8 5368 003A                  		subq.w	#1,$3A(a0)
000147EC 6A00 0000                  		bpl.w	locret_1408C
000147F0                            
000147F0                            Obj0A_MakeItem:
000147F0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000147F6 0240 000F                  		andi.w	#$F,d0
000147FA 3140 003A                  		move.w	d0,$3A(a0)
000147FE 4EBA 99F8                  		jsr	SingleObjLoad
00014802 6600 0000                  		bne.w	locret_1408C
00014806 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001480A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014810 7006                       		moveq	#6,d0
00014812 0838 0000 D022             		btst	#0,($FFFFD022).w
00014818 6700                       		beq.s	loc_13FF2
0001481A 4440                       		neg.w	d0
0001481C 137C 0040 0026             		move.b	#$40,$26(a1)
00014822                            
00014822                            loc_13FF2:
00014822 D169 0008                  		add.w	d0,8(a1)
00014826 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001482C 137C 0006 0028             		move.b	#6,$28(a1)
00014832 4A68 002C                  		tst.w	$2C(a0)
00014836 6700 0000                  		beq.w	loc_1403E
0001483A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014840 0668 0000 003A             		addi.w	#0,$3A(a0)
00014846 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001484A 0440 000C                  		subi.w	#$C,d0
0001484E 3340 000C                  		move.w	d0,$C(a1)
00014852 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014858 1340 0026                  		move.b	d0,$26(a1)
0001485C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014860 0200 0003                  		andi.b	#3,d0
00014864 6600                       		bne.s	loc_14082
00014866 137C 000E 0028             		move.b	#$E,$28(a1)
0001486C 6000                       		bra.s	loc_14082
0001486E                            ; ===========================================================================
0001486E                            
0001486E                            loc_1403E:
0001486E 0828 0007 0036             		btst	#7,$36(a0)
00014874 6700                       		beq.s	loc_14082
00014876 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001487A E24A                       		lsr.w	#1,d2
0001487C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014882 0240 0003                  		andi.w	#3,d0
00014886 6600                       		bne.s	loc_1406A
00014888 08E8 0006 0036             		bset	#6,$36(a0)
0001488E 6600                       		bne.s	loc_14082
00014890 1342 0028                  		move.b	d2,$28(a1)
00014894 337C 001C 0038             		move.w	#$1C,$38(a1)
0001489A                            
0001489A                            loc_1406A:
0001489A 4A28 0034                  		tst.b	$34(a0)
0001489E 6600                       		bne.s	loc_14082
000148A0 08E8 0006 0036             		bset	#6,$36(a0)
000148A6 6600                       		bne.s	loc_14082
000148A8 1342 0028                  		move.b	d2,$28(a1)
000148AC 337C 001C 0038             		move.w	#$1C,$38(a1)
000148B2                            
000148B2                            loc_14082:
000148B2 5328 0034                  		subq.b	#1,$34(a0)
000148B6 6A00                       		bpl.s	locret_1408C
000148B8 4268 0036                  		clr.w	$36(a0)
000148BC                            
000148BC                            locret_1408C:
000148BC 4E75                       		rts	
000148BE                            
000148BE                            ; ---------------------------------------------------------------------------
000148BE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000148BE                            ; ---------------------------------------------------------------------------
000148BE                            
000148BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148BE                            
000148BE                            
000148BE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000148BE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000148C4                             
000148C4                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000148C4                             
000148C4 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000148C8                             
000148C8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000148CE 6600                       		bne.s	Air_GetBgm2	; if not, branch
000148D0 43F9 0000 3BEE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000148D6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148D8                             
000148D8                            Air_GetBgm2:
000148D8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000148DE 6600                       		bne.s	Air_GetBgm3	; if not, branch
000148E0 43F9 0000 3BF6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000148E6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148E8                             
000148E8                            Air_GetBgm3:
000148E8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000148EE 6600                       		bne.s	Air_GetBgm4	; if not, branch
000148F0 43F9 0000 3BFC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000148F6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148F8                             
000148F8                            Air_GetBgm4:
000148F8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000148FE 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014900 43F9 0000 3C02             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014906                             
00014906                            Air_PlayMusic:
00014906 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001490A                             
0001490A                            loc_140A6:
0001490A 4EB9 0000 15BA             		jsr	(PlaySound).l
00014910                             
00014910                            ; NineKode ends here
00014910                            
00014910                            loc_140AC:
00014910 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014916 4238 D372                  		clr.b	($FFFFD372).w
0001491A 4E75                       		rts	
0001491C                            ; End of function ResumeMusic
0001491C                            
0001491C                            ; ===========================================================================
0001491C                            Ani_obj0A:
0001491C                            	include "_anim\obj0A.asm"
0001491C                            ; ---------------------------------------------------------------------------
0001491C                            ; Animation script - countdown numbers and bubbles (LZ)
0001491C                            ; ---------------------------------------------------------------------------
0001491C 0000                       		dc.w byte_140D6-Ani_obj0A
0001491E 0000                       		dc.w byte_140E0-Ani_obj0A
00014920 0000                       		dc.w byte_140EA-Ani_obj0A
00014922 0000                       		dc.w byte_140F4-Ani_obj0A
00014924 0000                       		dc.w byte_140FE-Ani_obj0A
00014926 0000                       		dc.w byte_14108-Ani_obj0A
00014928 0000                       		dc.w byte_14112-Ani_obj0A
0001492A 0000                       		dc.w byte_14118-Ani_obj0A
0001492C 0000                       		dc.w byte_14120-Ani_obj0A
0001492E 0000                       		dc.w byte_14128-Ani_obj0A
00014930 0000                       		dc.w byte_14130-Ani_obj0A
00014932 0000                       		dc.w byte_14138-Ani_obj0A
00014934 0000                       		dc.w byte_14140-Ani_obj0A
00014936 0000                       		dc.w byte_14148-Ani_obj0A
00014938 0000                       		dc.w byte_1414A-Ani_obj0A
0001493A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014944 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001494E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014958 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014962 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001496C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014976 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001497C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014984 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001498C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014994 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001499C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000149A4 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000149AC 0EFC                       byte_14148:	dc.b $E, $FC
000149AE 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000149B4                            		even
000149B4                            		even
000149B4                            
000149B4                            ; ---------------------------------------------------------------------------
000149B4                            ; Sprite mappings - drowning countdown numbers (LZ)
000149B4                            ; ---------------------------------------------------------------------------
000149B4                            Map_obj0A:
000149B4                            	include "_maps\obj0A.asm"
000149B4                            ; ---------------------------------------------------------------------------
000149B4                            ; Sprite mappings - drowning countdown numbers (LZ)
000149B4                            ; ---------------------------------------------------------------------------
000149B4 0000                       		dc.w byte_14152-Map_obj0A
000149B6 01                         byte_14152:	dc.b 1
000149B7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000149BC                            		even
000149BC                            		even
000149BC                            
000149BC                            ; ===========================================================================
000149BC                            ; ---------------------------------------------------------------------------
000149BC                            ; Object 38 - shield and invincibility stars
000149BC                            ; ---------------------------------------------------------------------------
000149BC                            
000149BC                            Obj38:					; XREF: Obj_Index
000149BC 7000                       		moveq	#0,d0
000149BE 1028 0024                  		move.b	$24(a0),d0
000149C2 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000149C6 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000149CA                            ; ===========================================================================
000149CA 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000149CC 0000                       		dc.w Obj38_Shield-Obj38_Index
000149CE 0000                       		dc.w Obj38_Stars-Obj38_Index
000149D0                            ; ===========================================================================
000149D0                            
000149D0                            Obj38_Main:				; XREF: Obj38_Index
000149D0 5428 0024                  		addq.b	#2,$24(a0)
000149D4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000149DC 117C 0004 0001             		move.b	#4,1(a0)
000149E2 117C 0001 0018             		move.b	#1,$18(a0)
000149E8 117C 0010 0019             		move.b	#$10,$19(a0)
000149EE 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000149F2 6600                       		bne.s	Obj38_DoStars	; if not, branch
000149F4 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000149FA 4E75                       		rts	
000149FC                            ; ===========================================================================
000149FC                            
000149FC                            Obj38_DoStars:
000149FC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014A00 317C 055C 0002             		move.w	#$55C,2(a0)
00014A06 4E75                       		rts	
00014A08                            ; ===========================================================================
00014A08                            
00014A08                            Obj38_Shield:				; XREF: Obj38_Index
00014A08 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A0C 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014A0E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014A12 6700                       		beq.s	Obj38_Delete	; if not, branch
00014A14 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A1A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A20 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A26 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A2C 4EB9 0000 AE32             		jsr	AnimateSprite
00014A32 4EFA 933E                  		jmp	DisplaySprite
00014A36                            ; ===========================================================================
00014A36                            
00014A36                            Obj38_RmvShield:
00014A36 4E75                       		rts	
00014A38                            ; ===========================================================================
00014A38                            
00014A38                            Obj38_Delete:
00014A38 4EFA 9374                  		jmp	DeleteObject
00014A3C                            ; ===========================================================================
00014A3C                            
00014A3C                            Obj38_Stars:				; XREF: Obj38_Index
00014A3C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A40 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014A42 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014A46 1228 001C                  		move.b	$1C(a0),d1
00014A4A 5301                       		subq.b	#1,d1
00014A4C 6000                       		bra.s	Obj38_StarTrail
00014A4E                            ; ===========================================================================
00014A4E E909                       		lsl.b	#4,d1
00014A50 5801                       		addq.b	#4,d1
00014A52 9001                       		sub.b	d1,d0
00014A54 1228 0030                  		move.b	$30(a0),d1
00014A58 9001                       		sub.b	d1,d0
00014A5A 5801                       		addq.b	#4,d1
00014A5C 0201 000F                  		andi.b	#$F,d1
00014A60 1141 0030                  		move.b	d1,$30(a0)
00014A64 6000                       		bra.s	Obj38_StarTrail2a
00014A66                            ; ===========================================================================
00014A66                            
00014A66                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014A66 E709                       		lsl.b	#3,d1
00014A68 1401                       		move.b	d1,d2
00014A6A D201                       		add.b	d1,d1
00014A6C D202                       		add.b	d2,d1
00014A6E 5801                       		addq.b	#4,d1
00014A70 9001                       		sub.b	d1,d0
00014A72 1228 0030                  		move.b	$30(a0),d1
00014A76 9001                       		sub.b	d1,d0
00014A78 5801                       		addq.b	#4,d1
00014A7A 0C01 0018                  		cmpi.b	#$18,d1
00014A7E 6500                       		bcs.s	Obj38_StarTrail2
00014A80 7200                       		moveq	#0,d1
00014A82                            
00014A82                            Obj38_StarTrail2:
00014A82 1141 0030                  		move.b	d1,$30(a0)
00014A86                            
00014A86                            Obj38_StarTrail2a:
00014A86 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014A8A 43F1 0000                  		lea	(a1,d0.w),a1
00014A8E 3159 0008                  		move.w	(a1)+,8(a0)
00014A92 3159 000C                  		move.w	(a1)+,$C(a0)
00014A96 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A9C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014AA2 4EB9 0000 AE32             		jsr	AnimateSprite
00014AA8 4EFA 92C8                  		jmp	DisplaySprite
00014AAC                            ; ===========================================================================
00014AAC                            
00014AAC                            Obj38_Delete2:				; XREF: Obj38_Stars
00014AAC 4EFA 9300                  		jmp	DeleteObject
00014AB0                            ; ===========================================================================
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            ; Object 4A - special stage entry from beta
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            
00014AB0                            Obj4A:					; XREF: Obj_Index
00014AB0 7000                       		moveq	#0,d0
00014AB2 1028 0024                  		move.b	$24(a0),d0
00014AB6 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014ABA 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014ABE                            ; ===========================================================================
00014ABE 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014AC0 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014AC2 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014AC4                            ; ===========================================================================
00014AC4                            
00014AC4                            Obj4A_Main:				; XREF: Obj4A_Index
00014AC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014AC8 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014ACA 4E75                       		rts	
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            Obj4A_Main2:
00014ACC 5428 0024                  		addq.b	#2,$24(a0)
00014AD0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014AD8 117C 0004 0001             		move.b	#4,1(a0)
00014ADE 117C 0001 0018             		move.b	#1,$18(a0)
00014AE4 117C 0038 0019             		move.b	#$38,$19(a0)
00014AEA 317C 0541 0002             		move.w	#$541,2(a0)
00014AF0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014AF6                            
00014AF6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014AF6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014AFC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B02 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B08 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014B0E 4EB9 0000 AE32             		jsr	AnimateSprite
00014B14 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014B1A 6600                       		bne.s	Obj4A_Display
00014B1C 4A38 D000                  		tst.b	($FFFFD000).w
00014B20 6700                       		beq.s	Obj4A_Display
00014B22 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014B28 303C 00A8                  		move.w	#$A8,d0
00014B2C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014B32                            
00014B32                            Obj4A_Display:
00014B32 4EFA 923E                  		jmp	DisplaySprite
00014B36                            ; ===========================================================================
00014B36                            
00014B36                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014B36 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014B3A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014B3C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014B42 4EFA 926A                  		jmp	DeleteObject
00014B46                            ; ===========================================================================
00014B46                            
00014B46                            Obj4A_Wait:
00014B46 4E75                       		rts	
00014B48                            ; ===========================================================================
00014B48                            ; ---------------------------------------------------------------------------
00014B48                            ; Object 08 - water splash (LZ)
00014B48                            ; ---------------------------------------------------------------------------
00014B48                            
00014B48                            Obj08:					; XREF: Obj_Index
00014B48 7000                       		moveq	#0,d0
00014B4A 1028 0024                  		move.b	$24(a0),d0
00014B4E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014B52 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014B56                            ; ===========================================================================
00014B56 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014B58 0000                       		dc.w Obj08_Display-Obj08_Index
00014B5A 0000                       		dc.w Obj08_Delete-Obj08_Index
00014B5C                            ; ===========================================================================
00014B5C                            
00014B5C                            Obj08_Main:				; XREF: Obj08_Index
00014B5C 5428 0024                  		addq.b	#2,$24(a0)
00014B60 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014B68 0028 0004 0001             		ori.b	#4,1(a0)
00014B6E 117C 0001 0018             		move.b	#1,$18(a0)
00014B74 117C 0010 0019             		move.b	#$10,$19(a0)
00014B7A 317C 4259 0002             		move.w	#$4259,2(a0)
00014B80 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014B86                            
00014B86                            Obj08_Display:				; XREF: Obj08_Index
00014B86 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014B8C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014B92 4EB9 0000 AE32             		jsr	AnimateSprite
00014B98 4EFA 91D8                  		jmp	DisplaySprite
00014B9C                            ; ===========================================================================
00014B9C                            
00014B9C                            Obj08_Delete:				; XREF: Obj08_Index
00014B9C 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014BA0                            ; ===========================================================================
00014BA0                            Ani_obj38:
00014BA0                            	include "_anim\obj38.asm"
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            ; Animation script - shield and invincibility stars
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0 0000                       		dc.w byte_14356-Ani_obj38
00014BA2 0000                       		dc.w byte_1435E-Ani_obj38
00014BA4 0000                       		dc.w byte_14364-Ani_obj38
00014BA6 0000                       		dc.w byte_1437E-Ani_obj38
00014BA8 0000                       		dc.w byte_14398-Ani_obj38
00014BAA 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014BB2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014BB8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014BC9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014BD2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014BE3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014BEC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014BFD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014C06                            		even
00014C06                            		even
00014C06                            
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            ; Sprite mappings - shield and invincibility stars
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            Map_obj38:
00014C06                            	include "_maps\obj38.asm"
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            ; Sprite mappings - shield and invincibility stars
00014C06                            ; ---------------------------------------------------------------------------
00014C06 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014C0A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014C0E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014C12 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014C16 04                         byte_143C2:	dc.b 4
00014C17 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C1C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C21 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014C26 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C2B 04                         byte_143D7:	dc.b 4
00014C2C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014C31 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014C36 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014C3B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014C40 04                         byte_143EC:	dc.b 4
00014C41 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C46 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C4B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C50 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C55 04                         byte_14401:	dc.b 4
00014C56 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C5B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C60 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C65 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C6A 04                         byte_14416:	dc.b 4
00014C6B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C70 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C75 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014C7A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C7F 04                         byte_1442B:	dc.b 4
00014C80 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014C85 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014C8A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014C8F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014C94 04                         byte_14440:	dc.b 4
00014C95 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014C9A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014C9F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014CA4 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014CAA 00                         		even
00014CAA 00                         		even
00014CAA                            
00014CAA                            Ani_obj4A:
00014CAA                            	include "_anim\obj4A.asm"
00014CAA                            ; ---------------------------------------------------------------------------
00014CAA                            ; Animation script - special stage entry effect from beta
00014CAA                            ; ---------------------------------------------------------------------------
00014CAA 0000                       		dc.w byte_14458-Ani_obj4A
00014CAC 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014CC0                            		even
00014CC0                            		even
00014CC0                            
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            ; Sprite mappings - special stage entry	from beta
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            Map_obj4A:
00014CC0                            	include "_maps\obj4A.asm"
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            ; Sprite mappings - special stage entry	from beta
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014CC4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014CC8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014CCC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014CD0 03                         byte_1447C:	dc.b 3
00014CD1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014CD6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014CDB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014CE0 03                         byte_1448C:	dc.b 3
00014CE1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014CE6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014CEB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014CF0 05                         byte_1449C:	dc.b 5
00014CF1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014CF6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014CFB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014D00 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014D05 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014D0A 09                         byte_144B6:	dc.b 9
00014D0B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014D10 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014D15 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014D1A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014D1F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014D24 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014D29 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D2E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014D33 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014D38 12                         byte_144E4:	dc.b $12
00014D39 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014D3E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014D43 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014D48 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014D4D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014D52 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014D57 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014D5C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014D61 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014D66 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014D6B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014D70 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014D75 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014D7A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014D7F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014D84 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014D89 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014D8E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014D93 11                         byte_1453F:	dc.b $11
00014D94 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014D99 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014D9E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014DA3 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014DA8 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014DAD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014DB2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014DB7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014DBC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014DC1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014DC6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014DCB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014DD0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014DD5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014DDA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014DDF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014DE4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014DE9 09                         byte_14595:	dc.b 9
00014DEA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014DEF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014DF4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014DF9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014DFE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014E03 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014E08 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014E0D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014E12 04                         		dc.b 4
00014E13 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014E18                            		even
00014E18                            		even
00014E18                            
00014E18                            Ani_obj08:
00014E18                            	include "_anim\obj08.asm"
00014E18                            ; ---------------------------------------------------------------------------
00014E18                            ; Animation script - water splash (LZ)
00014E18                            ; ---------------------------------------------------------------------------
00014E18 0000                       		dc.w byte_145C6-Ani_obj08
00014E1A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014E20                            		even
00014E20                            		even
00014E20                            
00014E20                            ; ---------------------------------------------------------------------------
00014E20                            ; Sprite mappings - water splash (LZ)
00014E20                            ; ---------------------------------------------------------------------------
00014E20                            Map_obj08:
00014E20                            	include "_maps\obj08.asm"
00014E20                            ; ---------------------------------------------------------------------------
00014E20                            ; Sprite mappings - water splash (LZ)
00014E20                            ; ---------------------------------------------------------------------------
00014E20 0000                       		dc.w byte_145D2-Map_obj08
00014E22 0000                       		dc.w byte_145DD-Map_obj08
00014E24 0000                       		dc.w byte_145E8-Map_obj08
00014E26 02                         byte_145D2:	dc.b 2
00014E27 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014E2C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014E31 02                         byte_145DD:	dc.b 2
00014E32 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014E37 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014E3C 01                         byte_145E8:	dc.b 1
00014E3D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014E42                            		even
00014E42                            		even
00014E42                            
00014E42                            ; ---------------------------------------------------------------------------
00014E42                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014E42                            ; ---------------------------------------------------------------------------
00014E42                            
00014E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E42                            
00014E42                            
00014E42                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E42 0828 0003 0022             		btst	#3,$22(a0)
00014E48 6700                       		beq.s	loc_14602
00014E4A 7000                       		moveq	#0,d0
00014E4C 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E50 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E54 4E75                       		rts	
00014E56                            ; ===========================================================================
00014E56                            
00014E56                            loc_14602:
00014E56 7003                       		moveq	#3,d0
00014E58 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E5C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E60 1028 0026                  		move.b	$26(a0),d0
00014E64 0600 0020                  		addi.b	#$20,d0
00014E68 6A00                       		bpl.s	loc_14624
00014E6A 1028 0026                  		move.b	$26(a0),d0
00014E6E 6A00                       		bpl.s	loc_1461E
00014E70 5300                       		subq.b	#1,d0
00014E72                            
00014E72                            loc_1461E:
00014E72 0600 0020                  		addi.b	#$20,d0
00014E76 6000                       		bra.s	loc_14630
00014E78                            ; ===========================================================================
00014E78                            
00014E78                            loc_14624:
00014E78 1028 0026                  		move.b	$26(a0),d0
00014E7C 6A00                       		bpl.s	loc_1462C
00014E7E 5200                       		addq.b	#1,d0
00014E80                            
00014E80                            loc_1462C:
00014E80 0600 001F                  		addi.b	#$1F,d0
00014E84                            
00014E84                            loc_14630:
00014E84 0200 00C0                  		andi.b	#$C0,d0
00014E88 0C00 0040                  		cmpi.b	#$40,d0
00014E8C 6700 0000                  		beq.w	Sonic_WalkVertL
00014E90 0C00 0080                  		cmpi.b	#$80,d0
00014E94 6700 0000                  		beq.w	Sonic_WalkCeiling
00014E98 0C00 00C0                  		cmpi.b	#$C0,d0
00014E9C 6700 0000                  		beq.w	Sonic_WalkVertR
00014EA0 3428 000C                  		move.w	$C(a0),d2
00014EA4 3628 0008                  		move.w	8(a0),d3
00014EA8 7000                       		moveq	#0,d0
00014EAA 1028 0016                  		move.b	$16(a0),d0
00014EAE 4880                       		ext.w	d0
00014EB0 D440                       		add.w	d0,d2
00014EB2 1028 0017                  		move.b	$17(a0),d0
00014EB6 4880                       		ext.w	d0
00014EB8 D640                       		add.w	d0,d3
00014EBA 49F8 F768                  		lea	($FFFFF768).w,a4
00014EBE 367C 0010                  		movea.w	#$10,a3
00014EC2 3C3C 0000                  		move.w	#0,d6
00014EC6 7A0D                       		moveq	#$D,d5
00014EC8 6100 0000                  		bsr.w	FindFloor
00014ECC 3F01                       		move.w	d1,-(sp)
00014ECE 3428 000C                  		move.w	$C(a0),d2
00014ED2 3628 0008                  		move.w	8(a0),d3
00014ED6 7000                       		moveq	#0,d0
00014ED8 1028 0016                  		move.b	$16(a0),d0
00014EDC 4880                       		ext.w	d0
00014EDE D440                       		add.w	d0,d2
00014EE0 1028 0017                  		move.b	$17(a0),d0
00014EE4 4880                       		ext.w	d0
00014EE6 4440                       		neg.w	d0
00014EE8 D640                       		add.w	d0,d3
00014EEA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EEE 367C 0010                  		movea.w	#$10,a3
00014EF2 3C3C 0000                  		move.w	#0,d6
00014EF6 7A0D                       		moveq	#$D,d5
00014EF8 6100 0000                  		bsr.w	FindFloor
00014EFC 301F                       		move.w	(sp)+,d0
00014EFE 6100 0000                  		bsr.w	Sonic_Angle
00014F02 4A41                       		tst.w	d1
00014F04 6700                       		beq.s	locret_146BE
00014F06 6A00                       		bpl.s	loc_146C0
00014F08 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F0C 6D00                       		blt.s	locret_146E6
00014F0E D368 000C                  		add.w	d1,$C(a0)
00014F12                            
00014F12                            locret_146BE:
00014F12 4E75                       		rts	
00014F14                            ; ===========================================================================
00014F14                            
00014F14                            loc_146C0:
00014F14 0C41 000E                  		cmpi.w	#$E,d1
00014F18 6E00                       		bgt.s	loc_146CC
00014F1A                            
00014F1A                            loc_146C6:
00014F1A D368 000C                  		add.w	d1,$C(a0)
00014F1E 4E75                       		rts	
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            loc_146CC:
00014F20 4A28 0038                  		tst.b	$38(a0)
00014F24 66F4                       		bne.s	loc_146C6
00014F26 08E8 0001 0022             		bset	#1,$22(a0)
00014F2C 08A8 0005 0022             		bclr	#5,$22(a0)
00014F32 117C 0001 001D             		move.b	#1,$1D(a0)
00014F38 4E75                       		rts	
00014F3A                            ; ===========================================================================
00014F3A                            
00014F3A                            locret_146E6:
00014F3A 4E75                       		rts	
00014F3C                            ; End of function Sonic_AnglePos
00014F3C                            
00014F3C                            ; ===========================================================================
00014F3C 2428 0008                  		move.l	8(a0),d2
00014F40 3028 0010                  		move.w	$10(a0),d0
00014F44 48C0                       		ext.l	d0
00014F46 E180                       		asl.l	#8,d0
00014F48 9480                       		sub.l	d0,d2
00014F4A 2142 0008                  		move.l	d2,8(a0)
00014F4E 303C 0038                  		move.w	#$38,d0
00014F52 48C0                       		ext.l	d0
00014F54 E180                       		asl.l	#8,d0
00014F56 9680                       		sub.l	d0,d3
00014F58 2143 000C                  		move.l	d3,$C(a0)
00014F5C 4E75                       		rts	
00014F5E                            ; ===========================================================================
00014F5E                            
00014F5E                            locret_1470A:
00014F5E 4E75                       		rts	
00014F60                            ; ===========================================================================
00014F60 2628 000C                  		move.l	$C(a0),d3
00014F64 3028 0012                  		move.w	$12(a0),d0
00014F68 0440 0038                  		subi.w	#$38,d0
00014F6C 3140 0012                  		move.w	d0,$12(a0)
00014F70 48C0                       		ext.l	d0
00014F72 E180                       		asl.l	#8,d0
00014F74 9680                       		sub.l	d0,d3
00014F76 2143 000C                  		move.l	d3,$C(a0)
00014F7A 4E75                       		rts	
00014F7C 4E75                       		rts	
00014F7E                            ; ===========================================================================
00014F7E 2428 0008                  		move.l	8(a0),d2
00014F82 2628 000C                  		move.l	$C(a0),d3
00014F86 3028 0010                  		move.w	$10(a0),d0
00014F8A 48C0                       		ext.l	d0
00014F8C E180                       		asl.l	#8,d0
00014F8E 9480                       		sub.l	d0,d2
00014F90 3028 0012                  		move.w	$12(a0),d0
00014F94 48C0                       		ext.l	d0
00014F96 E180                       		asl.l	#8,d0
00014F98 9680                       		sub.l	d0,d3
00014F9A 2142 0008                  		move.l	d2,8(a0)
00014F9E 2143 000C                  		move.l	d3,$C(a0)
00014FA2 4E75                       		rts	
00014FA4                            
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            
00014FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA4                            
00014FA4                            
00014FA4                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014FA4 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014FA8 B240                       		cmp.w	d0,d1
00014FAA 6F00                       		ble.s	loc_1475E
00014FAC 1438 F768                  		move.b	($FFFFF768).w,d2
00014FB0 3200                       		move.w	d0,d1
00014FB2                            
00014FB2                            loc_1475E:
00014FB2 0802 0000                  		btst	#0,d2
00014FB6 6600                       		bne.s	loc_1476A
00014FB8 1142 0026                  		move.b	d2,$26(a0)
00014FBC 4E75                       		rts	
00014FBE                            ; ===========================================================================
00014FBE                            
00014FBE                            loc_1476A:
00014FBE 1428 0026                  		move.b	$26(a0),d2
00014FC2 0602 0020                  		addi.b	#$20,d2
00014FC6 0202 00C0                  		andi.b	#$C0,d2
00014FCA 1142 0026                  		move.b	d2,$26(a0)
00014FCE 4E75                       		rts	
00014FD0                            ; End of function Sonic_Angle
00014FD0                            
00014FD0                            ; ---------------------------------------------------------------------------
00014FD0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014FD0                            ; ---------------------------------------------------------------------------
00014FD0                            
00014FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FD0                            
00014FD0                            
00014FD0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014FD0 3428 000C                  		move.w	$C(a0),d2
00014FD4 3628 0008                  		move.w	8(a0),d3
00014FD8 7000                       		moveq	#0,d0
00014FDA 1028 0017                  		move.b	$17(a0),d0
00014FDE 4880                       		ext.w	d0
00014FE0 4440                       		neg.w	d0
00014FE2 D440                       		add.w	d0,d2
00014FE4 1028 0016                  		move.b	$16(a0),d0
00014FE8 4880                       		ext.w	d0
00014FEA D640                       		add.w	d0,d3
00014FEC 49F8 F768                  		lea	($FFFFF768).w,a4
00014FF0 367C 0010                  		movea.w	#$10,a3
00014FF4 3C3C 0000                  		move.w	#0,d6
00014FF8 7A0D                       		moveq	#$D,d5
00014FFA 6100 0000                  		bsr.w	FindWall
00014FFE 3F01                       		move.w	d1,-(sp)
00015000 3428 000C                  		move.w	$C(a0),d2
00015004 3628 0008                  		move.w	8(a0),d3
00015008 7000                       		moveq	#0,d0
0001500A 1028 0017                  		move.b	$17(a0),d0
0001500E 4880                       		ext.w	d0
00015010 D440                       		add.w	d0,d2
00015012 1028 0016                  		move.b	$16(a0),d0
00015016 4880                       		ext.w	d0
00015018 D640                       		add.w	d0,d3
0001501A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001501E 367C 0010                  		movea.w	#$10,a3
00015022 3C3C 0000                  		move.w	#0,d6
00015026 7A0D                       		moveq	#$D,d5
00015028 6100 0000                  		bsr.w	FindWall
0001502C 301F                       		move.w	(sp)+,d0
0001502E 6100 FF74                  		bsr.w	Sonic_Angle
00015032 4A41                       		tst.w	d1
00015034 6700                       		beq.s	locret_147F0
00015036 6A00                       		bpl.s	loc_147F2
00015038 0C41 FFF2                  		cmpi.w	#-$E,d1
0001503C 6D00 FF20                  		blt.w	locret_1470A
00015040 D368 0008                  		add.w	d1,8(a0)
00015044                            
00015044                            locret_147F0:
00015044 4E75                       		rts	
00015046                            ; ===========================================================================
00015046                            
00015046                            loc_147F2:
00015046 0C41 000E                  		cmpi.w	#$E,d1
0001504A 6E00                       		bgt.s	loc_147FE
0001504C                            
0001504C                            loc_147F8:
0001504C D368 0008                  		add.w	d1,8(a0)
00015050 4E75                       		rts	
00015052                            ; ===========================================================================
00015052                            
00015052                            loc_147FE:
00015052 4A28 0038                  		tst.b	$38(a0)
00015056 66F4                       		bne.s	loc_147F8
00015058 08E8 0001 0022             		bset	#1,$22(a0)
0001505E 08A8 0005 0022             		bclr	#5,$22(a0)
00015064 117C 0001 001D             		move.b	#1,$1D(a0)
0001506A 4E75                       		rts	
0001506C                            ; End of function Sonic_WalkVertR
0001506C                            
0001506C                            ; ---------------------------------------------------------------------------
0001506C                            ; Subroutine allowing Sonic to walk upside-down
0001506C                            ; ---------------------------------------------------------------------------
0001506C                            
0001506C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001506C                            
0001506C                            
0001506C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001506C 3428 000C                  		move.w	$C(a0),d2
00015070 3628 0008                  		move.w	8(a0),d3
00015074 7000                       		moveq	#0,d0
00015076 1028 0016                  		move.b	$16(a0),d0
0001507A 4880                       		ext.w	d0
0001507C 9440                       		sub.w	d0,d2
0001507E 0A42 000F                  		eori.w	#$F,d2
00015082 1028 0017                  		move.b	$17(a0),d0
00015086 4880                       		ext.w	d0
00015088 D640                       		add.w	d0,d3
0001508A 49F8 F768                  		lea	($FFFFF768).w,a4
0001508E 367C FFF0                  		movea.w	#-$10,a3
00015092 3C3C 1000                  		move.w	#$1000,d6
00015096 7A0D                       		moveq	#$D,d5
00015098 6100 0000                  		bsr.w	FindFloor
0001509C 3F01                       		move.w	d1,-(sp)
0001509E 3428 000C                  		move.w	$C(a0),d2
000150A2 3628 0008                  		move.w	8(a0),d3
000150A6 7000                       		moveq	#0,d0
000150A8 1028 0016                  		move.b	$16(a0),d0
000150AC 4880                       		ext.w	d0
000150AE 9440                       		sub.w	d0,d2
000150B0 0A42 000F                  		eori.w	#$F,d2
000150B4 1028 0017                  		move.b	$17(a0),d0
000150B8 4880                       		ext.w	d0
000150BA 9640                       		sub.w	d0,d3
000150BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150C0 367C FFF0                  		movea.w	#-$10,a3
000150C4 3C3C 1000                  		move.w	#$1000,d6
000150C8 7A0D                       		moveq	#$D,d5
000150CA 6100 0000                  		bsr.w	FindFloor
000150CE 301F                       		move.w	(sp)+,d0
000150D0 6100 FED2                  		bsr.w	Sonic_Angle
000150D4 4A41                       		tst.w	d1
000150D6 6700                       		beq.s	locret_14892
000150D8 6A00                       		bpl.s	loc_14894
000150DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000150DE 6D00 FE5A                  		blt.w	locret_146E6
000150E2 9368 000C                  		sub.w	d1,$C(a0)
000150E6                            
000150E6                            locret_14892:
000150E6 4E75                       		rts	
000150E8                            ; ===========================================================================
000150E8                            
000150E8                            loc_14894:
000150E8 0C41 000E                  		cmpi.w	#$E,d1
000150EC 6E00                       		bgt.s	loc_148A0
000150EE                            
000150EE                            loc_1489A:
000150EE 9368 000C                  		sub.w	d1,$C(a0)
000150F2 4E75                       		rts	
000150F4                            ; ===========================================================================
000150F4                            
000150F4                            loc_148A0:
000150F4 4A28 0038                  		tst.b	$38(a0)
000150F8 66F4                       		bne.s	loc_1489A
000150FA 08E8 0001 0022             		bset	#1,$22(a0)
00015100 08A8 0005 0022             		bclr	#5,$22(a0)
00015106 117C 0001 001D             		move.b	#1,$1D(a0)
0001510C 4E75                       		rts	
0001510E                            ; End of function Sonic_WalkCeiling
0001510E                            
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            
0001510E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510E                            
0001510E                            
0001510E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001510E 3428 000C                  		move.w	$C(a0),d2
00015112 3628 0008                  		move.w	8(a0),d3
00015116 7000                       		moveq	#0,d0
00015118 1028 0017                  		move.b	$17(a0),d0
0001511C 4880                       		ext.w	d0
0001511E 9440                       		sub.w	d0,d2
00015120 1028 0016                  		move.b	$16(a0),d0
00015124 4880                       		ext.w	d0
00015126 9640                       		sub.w	d0,d3
00015128 0A43 000F                  		eori.w	#$F,d3
0001512C 49F8 F768                  		lea	($FFFFF768).w,a4
00015130 367C FFF0                  		movea.w	#-$10,a3
00015134 3C3C 0800                  		move.w	#$800,d6
00015138 7A0D                       		moveq	#$D,d5
0001513A 6100 0000                  		bsr.w	FindWall
0001513E 3F01                       		move.w	d1,-(sp)
00015140 3428 000C                  		move.w	$C(a0),d2
00015144 3628 0008                  		move.w	8(a0),d3
00015148 7000                       		moveq	#0,d0
0001514A 1028 0017                  		move.b	$17(a0),d0
0001514E 4880                       		ext.w	d0
00015150 D440                       		add.w	d0,d2
00015152 1028 0016                  		move.b	$16(a0),d0
00015156 4880                       		ext.w	d0
00015158 9640                       		sub.w	d0,d3
0001515A 0A43 000F                  		eori.w	#$F,d3
0001515E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015162 367C FFF0                  		movea.w	#-$10,a3
00015166 3C3C 0800                  		move.w	#$800,d6
0001516A 7A0D                       		moveq	#$D,d5
0001516C 6100 0000                  		bsr.w	FindWall
00015170 301F                       		move.w	(sp)+,d0
00015172 6100 FE30                  		bsr.w	Sonic_Angle
00015176 4A41                       		tst.w	d1
00015178 6700                       		beq.s	locret_14934
0001517A 6A00                       		bpl.s	loc_14936
0001517C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015180 6D00 FDDC                  		blt.w	locret_1470A
00015184 9368 0008                  		sub.w	d1,8(a0)
00015188                            
00015188                            locret_14934:
00015188 4E75                       		rts	
0001518A                            ; ===========================================================================
0001518A                            
0001518A                            loc_14936:
0001518A 0C41 000E                  		cmpi.w	#$E,d1
0001518E 6E00                       		bgt.s	loc_14942
00015190                            
00015190                            loc_1493C:
00015190 9368 0008                  		sub.w	d1,8(a0)
00015194 4E75                       		rts	
00015196                            ; ===========================================================================
00015196                            
00015196                            loc_14942:
00015196 4A28 0038                  		tst.b	$38(a0)
0001519A 66F4                       		bne.s	loc_1493C
0001519C 08E8 0001 0022             		bset	#1,$22(a0)
000151A2 08A8 0005 0022             		bclr	#5,$22(a0)
000151A8 117C 0001 001D             		move.b	#1,$1D(a0)
000151AE 4E75                       		rts	
000151B0                            ; End of function Sonic_WalkVertL
000151B0                            
000151B0                            ; ---------------------------------------------------------------------------
000151B0                            ; Subroutine to	find which tile	the object is standing on
000151B0                            ; ---------------------------------------------------------------------------
000151B0                            
000151B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151B0                            
000151B0                            
000151B0                            Floor_ChkTile:				; XREF: FindFloor; et al
000151B0 3002                       		move.w	d2,d0
000151B2 E248                       		lsr.w	#1,d0
000151B4 0240 0380                  		andi.w	#$380,d0
000151B8 3203                       		move.w	d3,d1
000151BA E049                       		lsr.w	#8,d1
000151BC 0241 007F                  		andi.w	#$7F,d1
000151C0 D041                       		add.w	d1,d0
000151C2 72FF                       		moveq	#-1,d1
000151C4 43F8 A400                  		lea	($FFFFA400).w,a1
000151C8 1231 0000                  		move.b	(a1,d0.w),d1
000151CC 6700                       		beq.s	loc_14996
000151CE 6B00                       		bmi.s	loc_1499A
000151D0 5301                       		subq.b	#1,d1
000151D2 4881                       		ext.w	d1
000151D4 EE59                       		ror.w	#7,d1
000151D6 3002                       		move.w	d2,d0
000151D8 D040                       		add.w	d0,d0
000151DA 0240 01E0                  		andi.w	#$1E0,d0
000151DE D240                       		add.w	d0,d1
000151E0 3003                       		move.w	d3,d0
000151E2 E648                       		lsr.w	#3,d0
000151E4 0240 001E                  		andi.w	#$1E,d0
000151E8 D240                       		add.w	d0,d1
000151EA                            
000151EA                            loc_14996:
000151EA 2241                       		movea.l	d1,a1
000151EC 4E75                       		rts	
000151EE                            ; ===========================================================================
000151EE                            
000151EE                            loc_1499A:
000151EE 0241 007F                  		andi.w	#$7F,d1
000151F2 0828 0006 0001             		btst	#6,1(a0)
000151F8 6700                       		beq.s	loc_149B2
000151FA 5241                       		addq.w	#1,d1
000151FC 0C41 0029                  		cmpi.w	#$29,d1
00015200 6600                       		bne.s	loc_149B2
00015202 323C 0051                  		move.w	#$51,d1
00015206                            
00015206                            loc_149B2:
00015206 5301                       		subq.b	#1,d1
00015208 EE59                       		ror.w	#7,d1
0001520A 3002                       		move.w	d2,d0
0001520C D040                       		add.w	d0,d0
0001520E 0240 01E0                  		andi.w	#$1E0,d0
00015212 D240                       		add.w	d0,d1
00015214 3003                       		move.w	d3,d0
00015216 E648                       		lsr.w	#3,d0
00015218 0240 001E                  		andi.w	#$1E,d0
0001521C D240                       		add.w	d0,d1
0001521E 2241                       		movea.l	d1,a1
00015220 4E75                       		rts	
00015222                            ; End of function Floor_ChkTile
00015222                            
00015222                            
00015222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015222                            
00015222                            
00015222                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015222 618C                       		bsr.s	Floor_ChkTile
00015224 3011                       		move.w	(a1),d0
00015226 3800                       		move.w	d0,d4
00015228 0240 07FF                  		andi.w	#$7FF,d0
0001522C 6700                       		beq.s	loc_149DE
0001522E 0B04                       		btst	d5,d4
00015230 6600                       		bne.s	loc_149EC
00015232                            
00015232                            loc_149DE:
00015232 D44B                       		add.w	a3,d2
00015234 6100 0000                  		bsr.w	FindFloor2
00015238 944B                       		sub.w	a3,d2
0001523A 0641 0010                  		addi.w	#$10,d1
0001523E 4E75                       		rts	
00015240                            ; ===========================================================================
00015240                            
00015240                            loc_149EC:
00015240 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015244 1032 0000                  		move.b	(a2,d0.w),d0
00015248 0240 00FF                  		andi.w	#$FF,d0
0001524C 67E4                       		beq.s	loc_149DE
0001524E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015254 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015258 E948                       		lsl.w	#4,d0
0001525A 3203                       		move.w	d3,d1
0001525C 0804 000B                  		btst	#$B,d4
00015260 6700                       		beq.s	loc_14A12
00015262 4641                       		not.w	d1
00015264 4414                       		neg.b	(a4)
00015266                            
00015266                            loc_14A12:
00015266 0804 000C                  		btst	#$C,d4
0001526A 6700                       		beq.s	loc_14A22
0001526C 0614 0040                  		addi.b	#$40,(a4)
00015270 4414                       		neg.b	(a4)
00015272 0414 0040                  		subi.b	#$40,(a4)
00015276                            
00015276                            loc_14A22:
00015276 0241 000F                  		andi.w	#$F,d1
0001527A D240                       		add.w	d0,d1
0001527C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015282 1032 1000                  		move.b	(a2,d1.w),d0
00015286 4880                       		ext.w	d0
00015288 BD44                       		eor.w	d6,d4
0001528A 0804 000C                  		btst	#$C,d4
0001528E 6700                       		beq.s	loc_14A3E
00015290 4440                       		neg.w	d0
00015292                            
00015292                            loc_14A3E:
00015292 4A40                       		tst.w	d0
00015294 679C                       		beq.s	loc_149DE
00015296 6B00                       		bmi.s	loc_14A5A
00015298 0C00 0010                  		cmpi.b	#$10,d0
0001529C 6700                       		beq.s	loc_14A66
0001529E 3202                       		move.w	d2,d1
000152A0 0241 000F                  		andi.w	#$F,d1
000152A4 D041                       		add.w	d1,d0
000152A6 323C 000F                  		move.w	#$F,d1
000152AA 9240                       		sub.w	d0,d1
000152AC 4E75                       		rts	
000152AE                            ; ===========================================================================
000152AE                            
000152AE                            loc_14A5A:
000152AE 3202                       		move.w	d2,d1
000152B0 0241 000F                  		andi.w	#$F,d1
000152B4 D041                       		add.w	d1,d0
000152B6 6A00 FF7A                  		bpl.w	loc_149DE
000152BA                            
000152BA                            loc_14A66:
000152BA 944B                       		sub.w	a3,d2
000152BC 6100 0000                  		bsr.w	FindFloor2
000152C0 D44B                       		add.w	a3,d2
000152C2 0441 0010                  		subi.w	#$10,d1
000152C6 4E75                       		rts	
000152C8                            ; End of function FindFloor
000152C8                            
000152C8                            
000152C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C8                            
000152C8                            
000152C8                            FindFloor2:				; XREF: FindFloor
000152C8 6100 FEE6                  		bsr.w	Floor_ChkTile
000152CC 3011                       		move.w	(a1),d0
000152CE 3800                       		move.w	d0,d4
000152D0 0240 07FF                  		andi.w	#$7FF,d0
000152D4 6700                       		beq.s	loc_14A86
000152D6 0B04                       		btst	d5,d4
000152D8 6600                       		bne.s	loc_14A94
000152DA                            
000152DA                            loc_14A86:
000152DA 323C 000F                  		move.w	#$F,d1
000152DE 3002                       		move.w	d2,d0
000152E0 0240 000F                  		andi.w	#$F,d0
000152E4 9240                       		sub.w	d0,d1
000152E6 4E75                       		rts	
000152E8                            ; ===========================================================================
000152E8                            
000152E8                            loc_14A94:
000152E8 2478 F796                  		movea.l	($FFFFF796).w,a2
000152EC 1032 0000                  		move.b	(a2,d0.w),d0
000152F0 0240 00FF                  		andi.w	#$FF,d0
000152F4 67E4                       		beq.s	loc_14A86
000152F6 45F9 0000 0000             		lea	(AngleMap).l,a2
000152FC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015300 E948                       		lsl.w	#4,d0
00015302 3203                       		move.w	d3,d1
00015304 0804 000B                  		btst	#$B,d4
00015308 6700                       		beq.s	loc_14ABA
0001530A 4641                       		not.w	d1
0001530C 4414                       		neg.b	(a4)
0001530E                            
0001530E                            loc_14ABA:
0001530E 0804 000C                  		btst	#$C,d4
00015312 6700                       		beq.s	loc_14ACA
00015314 0614 0040                  		addi.b	#$40,(a4)
00015318 4414                       		neg.b	(a4)
0001531A 0414 0040                  		subi.b	#$40,(a4)
0001531E                            
0001531E                            loc_14ACA:
0001531E 0241 000F                  		andi.w	#$F,d1
00015322 D240                       		add.w	d0,d1
00015324 45F9 0000 0000             		lea	(CollArray1).l,a2
0001532A 1032 1000                  		move.b	(a2,d1.w),d0
0001532E 4880                       		ext.w	d0
00015330 BD44                       		eor.w	d6,d4
00015332 0804 000C                  		btst	#$C,d4
00015336 6700                       		beq.s	loc_14AE6
00015338 4440                       		neg.w	d0
0001533A                            
0001533A                            loc_14AE6:
0001533A 4A40                       		tst.w	d0
0001533C 679C                       		beq.s	loc_14A86
0001533E 6B00                       		bmi.s	loc_14AFC
00015340 3202                       		move.w	d2,d1
00015342 0241 000F                  		andi.w	#$F,d1
00015346 D041                       		add.w	d1,d0
00015348 323C 000F                  		move.w	#$F,d1
0001534C 9240                       		sub.w	d0,d1
0001534E 4E75                       		rts	
00015350                            ; ===========================================================================
00015350                            
00015350                            loc_14AFC:
00015350 3202                       		move.w	d2,d1
00015352 0241 000F                  		andi.w	#$F,d1
00015356 D041                       		add.w	d1,d0
00015358 6A00 FF80                  		bpl.w	loc_14A86
0001535C 4641                       		not.w	d1
0001535E 4E75                       		rts	
00015360                            ; End of function FindFloor2
00015360                            
00015360                            
00015360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015360                            
00015360                            
00015360                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015360 6100 FE4E                  		bsr.w	Floor_ChkTile
00015364 3011                       		move.w	(a1),d0
00015366 3800                       		move.w	d0,d4
00015368 0240 07FF                  		andi.w	#$7FF,d0
0001536C 6700                       		beq.s	loc_14B1E
0001536E 0B04                       		btst	d5,d4
00015370 6600                       		bne.s	loc_14B2C
00015372                            
00015372                            loc_14B1E:
00015372 D64B                       		add.w	a3,d3
00015374 6100 0000                  		bsr.w	FindWall2
00015378 964B                       		sub.w	a3,d3
0001537A 0641 0010                  		addi.w	#$10,d1
0001537E 4E75                       		rts	
00015380                            ; ===========================================================================
00015380                            
00015380                            loc_14B2C:
00015380 2478 F796                  		movea.l	($FFFFF796).w,a2
00015384 1032 0000                  		move.b	(a2,d0.w),d0
00015388 0240 00FF                  		andi.w	#$FF,d0
0001538C 67E4                       		beq.s	loc_14B1E
0001538E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015394 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015398 E948                       		lsl.w	#4,d0
0001539A 3202                       		move.w	d2,d1
0001539C 0804 000C                  		btst	#$C,d4
000153A0 6700                       		beq.s	loc_14B5A
000153A2 4641                       		not.w	d1
000153A4 0614 0040                  		addi.b	#$40,(a4)
000153A8 4414                       		neg.b	(a4)
000153AA 0414 0040                  		subi.b	#$40,(a4)
000153AE                            
000153AE                            loc_14B5A:
000153AE 0804 000B                  		btst	#$B,d4
000153B2 6700                       		beq.s	loc_14B62
000153B4 4414                       		neg.b	(a4)
000153B6                            
000153B6                            loc_14B62:
000153B6 0241 000F                  		andi.w	#$F,d1
000153BA D240                       		add.w	d0,d1
000153BC 45F9 0000 0000             		lea	(CollArray2).l,a2
000153C2 1032 1000                  		move.b	(a2,d1.w),d0
000153C6 4880                       		ext.w	d0
000153C8 BD44                       		eor.w	d6,d4
000153CA 0804 000B                  		btst	#$B,d4
000153CE 6700                       		beq.s	loc_14B7E
000153D0 4440                       		neg.w	d0
000153D2                            
000153D2                            loc_14B7E:
000153D2 4A40                       		tst.w	d0
000153D4 679C                       		beq.s	loc_14B1E
000153D6 6B00                       		bmi.s	loc_14B9A
000153D8 0C00 0010                  		cmpi.b	#$10,d0
000153DC 6700                       		beq.s	loc_14BA6
000153DE 3203                       		move.w	d3,d1
000153E0 0241 000F                  		andi.w	#$F,d1
000153E4 D041                       		add.w	d1,d0
000153E6 323C 000F                  		move.w	#$F,d1
000153EA 9240                       		sub.w	d0,d1
000153EC 4E75                       		rts	
000153EE                            ; ===========================================================================
000153EE                            
000153EE                            loc_14B9A:
000153EE 3203                       		move.w	d3,d1
000153F0 0241 000F                  		andi.w	#$F,d1
000153F4 D041                       		add.w	d1,d0
000153F6 6A00 FF7A                  		bpl.w	loc_14B1E
000153FA                            
000153FA                            loc_14BA6:
000153FA 964B                       		sub.w	a3,d3
000153FC 6100 0000                  		bsr.w	FindWall2
00015400 D64B                       		add.w	a3,d3
00015402 0441 0010                  		subi.w	#$10,d1
00015406 4E75                       		rts	
00015408                            ; End of function FindWall
00015408                            
00015408                            
00015408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015408                            
00015408                            
00015408                            FindWall2:				; XREF: FindWall
00015408 6100 FDA6                  		bsr.w	Floor_ChkTile
0001540C 3011                       		move.w	(a1),d0
0001540E 3800                       		move.w	d0,d4
00015410 0240 07FF                  		andi.w	#$7FF,d0
00015414 6700                       		beq.s	loc_14BC6
00015416 0B04                       		btst	d5,d4
00015418 6600                       		bne.s	loc_14BD4
0001541A                            
0001541A                            loc_14BC6:
0001541A 323C 000F                  		move.w	#$F,d1
0001541E 3003                       		move.w	d3,d0
00015420 0240 000F                  		andi.w	#$F,d0
00015424 9240                       		sub.w	d0,d1
00015426 4E75                       		rts	
00015428                            ; ===========================================================================
00015428                            
00015428                            loc_14BD4:
00015428 2478 F796                  		movea.l	($FFFFF796).w,a2
0001542C 1032 0000                  		move.b	(a2,d0.w),d0
00015430 0240 00FF                  		andi.w	#$FF,d0
00015434 67E4                       		beq.s	loc_14BC6
00015436 45F9 0000 0000             		lea	(AngleMap).l,a2
0001543C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015440 E948                       		lsl.w	#4,d0
00015442 3202                       		move.w	d2,d1
00015444 0804 000C                  		btst	#$C,d4
00015448 6700                       		beq.s	loc_14C02
0001544A 4641                       		not.w	d1
0001544C 0614 0040                  		addi.b	#$40,(a4)
00015450 4414                       		neg.b	(a4)
00015452 0414 0040                  		subi.b	#$40,(a4)
00015456                            
00015456                            loc_14C02:
00015456 0804 000B                  		btst	#$B,d4
0001545A 6700                       		beq.s	loc_14C0A
0001545C 4414                       		neg.b	(a4)
0001545E                            
0001545E                            loc_14C0A:
0001545E 0241 000F                  		andi.w	#$F,d1
00015462 D240                       		add.w	d0,d1
00015464 45F9 0000 0000             		lea	(CollArray2).l,a2
0001546A 1032 1000                  		move.b	(a2,d1.w),d0
0001546E 4880                       		ext.w	d0
00015470 BD44                       		eor.w	d6,d4
00015472 0804 000B                  		btst	#$B,d4
00015476 6700                       		beq.s	loc_14C26
00015478 4440                       		neg.w	d0
0001547A                            
0001547A                            loc_14C26:
0001547A 4A40                       		tst.w	d0
0001547C 679C                       		beq.s	loc_14BC6
0001547E 6B00                       		bmi.s	loc_14C3C
00015480 3203                       		move.w	d3,d1
00015482 0241 000F                  		andi.w	#$F,d1
00015486 D041                       		add.w	d1,d0
00015488 323C 000F                  		move.w	#$F,d1
0001548C 9240                       		sub.w	d0,d1
0001548E 4E75                       		rts	
00015490                            ; ===========================================================================
00015490                            
00015490                            loc_14C3C:
00015490 3203                       		move.w	d3,d1
00015492 0241 000F                  		andi.w	#$F,d1
00015496 D041                       		add.w	d1,d0
00015498 6A00 FF80                  		bpl.w	loc_14BC6
0001549C 4641                       		not.w	d1
0001549E 4E75                       		rts	
000154A0                            ; End of function FindWall2
000154A0                            
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            ; Unused floor/wall subroutine - logs something	to do with collision
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            
000154A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A0                            
000154A0                            
000154A0                            FloorLog_Unk:				; XREF: Level
000154A0 4E75                       		rts	
000154A2                            
000154A2 43F9 0000 0000             		lea	(CollArray1).l,a1
000154A8 45F9 0000 0000             		lea	(CollArray1).l,a2
000154AE 363C 00FF                  		move.w	#$FF,d3
000154B2                            
000154B2                            loc_14C5E:
000154B2 7A10                       		moveq	#$10,d5
000154B4 343C 000F                  		move.w	#$F,d2
000154B8                            
000154B8                            loc_14C64:
000154B8 7800                       		moveq	#0,d4
000154BA 323C 000F                  		move.w	#$F,d1
000154BE                            
000154BE                            loc_14C6A:
000154BE 3019                       		move.w	(a1)+,d0
000154C0 EAA8                       		lsr.l	d5,d0
000154C2 D944                       		addx.w	d4,d4
000154C4 51C9 FFF8                  		dbf	d1,loc_14C6A
000154C8                            
000154C8 34C4                       		move.w	d4,(a2)+
000154CA 92FC 0020                  		suba.w	#$20,a1
000154CE 5345                       		subq.w	#1,d5
000154D0 51CA FFE6                  		dbf	d2,loc_14C64
000154D4                            
000154D4 D2FC 0020                  		adda.w	#$20,a1
000154D8 51CB FFD8                  		dbf	d3,loc_14C5E
000154DC                            
000154DC 43F9 0000 0000             		lea	(CollArray1).l,a1
000154E2 45F9 0000 0000             		lea	(CollArray2).l,a2
000154E8 6100                       		bsr.s	FloorLog_Unk2
000154EA 43F9 0000 0000             		lea	(CollArray1).l,a1
000154F0 45F9 0000 0000             		lea	(CollArray1).l,a2
000154F6                            
000154F6                            ; End of function FloorLog_Unk
000154F6                            
000154F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F6                            
000154F6                            
000154F6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000154F6 363C 0FFF                  		move.w	#$FFF,d3
000154FA                            
000154FA                            loc_14CA6:
000154FA 7400                       		moveq	#0,d2
000154FC 323C 000F                  		move.w	#$F,d1
00015500 3019                       		move.w	(a1)+,d0
00015502 6700                       		beq.s	loc_14CD4
00015504 6B00                       		bmi.s	loc_14CBE
00015506                            
00015506                            loc_14CB2:
00015506 E248                       		lsr.w	#1,d0
00015508 6400                       		bcc.s	loc_14CB8
0001550A 5202                       		addq.b	#1,d2
0001550C                            
0001550C                            loc_14CB8:
0001550C 51C9 FFF8                  		dbf	d1,loc_14CB2
00015510                            
00015510 6000                       		bra.s	loc_14CD6
00015512                            ; ===========================================================================
00015512                            
00015512                            loc_14CBE:
00015512 0C40 FFFF                  		cmpi.w	#-1,d0
00015516 6700                       		beq.s	loc_14CD0
00015518                            
00015518                            loc_14CC4:
00015518 E348                       		lsl.w	#1,d0
0001551A 6400                       		bcc.s	loc_14CCA
0001551C 5302                       		subq.b	#1,d2
0001551E                            
0001551E                            loc_14CCA:
0001551E 51C9 FFF8                  		dbf	d1,loc_14CC4
00015522                            
00015522 6000                       		bra.s	loc_14CD6
00015524                            ; ===========================================================================
00015524                            
00015524                            loc_14CD0:
00015524 303C 0010                  		move.w	#$10,d0
00015528                            
00015528                            loc_14CD4:
00015528 3400                       		move.w	d0,d2
0001552A                            
0001552A                            loc_14CD6:
0001552A 14C2                       		move.b	d2,(a2)+
0001552C 51CB FFCC                  		dbf	d3,loc_14CA6
00015530                            
00015530 4E75                       		rts	
00015532                            
00015532                            ; End of function FloorLog_Unk2
00015532                            
00015532                            
00015532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015532                            
00015532                            
00015532                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015532 2628 0008                  		move.l	8(a0),d3
00015536 2428 000C                  		move.l	$C(a0),d2
0001553A 3228 0010                  		move.w	$10(a0),d1
0001553E 48C1                       		ext.l	d1
00015540 E181                       		asl.l	#8,d1
00015542 D681                       		add.l	d1,d3
00015544 3228 0012                  		move.w	$12(a0),d1
00015548 48C1                       		ext.l	d1
0001554A E181                       		asl.l	#8,d1
0001554C D481                       		add.l	d1,d2
0001554E 4842                       		swap	d2
00015550 4843                       		swap	d3
00015552 11C0 F768                  		move.b	d0,($FFFFF768).w
00015556 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001555A 1200                       		move.b	d0,d1
0001555C 0600 0020                  		addi.b	#$20,d0
00015560 6A00                       		bpl.s	loc_14D1A
00015562 1001                       		move.b	d1,d0
00015564 6A00                       		bpl.s	loc_14D14
00015566 5300                       		subq.b	#1,d0
00015568                            
00015568                            loc_14D14:
00015568 0600 0020                  		addi.b	#$20,d0
0001556C 6000                       		bra.s	loc_14D24
0001556E                            ; ===========================================================================
0001556E                            
0001556E                            loc_14D1A:
0001556E 1001                       		move.b	d1,d0
00015570 6A00                       		bpl.s	loc_14D20
00015572 5200                       		addq.b	#1,d0
00015574                            
00015574                            loc_14D20:
00015574 0600 001F                  		addi.b	#$1F,d0
00015578                            
00015578                            loc_14D24:
00015578 0200 00C0                  		andi.b	#$C0,d0
0001557C 6700 0000                  		beq.w	loc_14DF0
00015580 0C00 0080                  		cmpi.b	#$80,d0
00015584 6700 0000                  		beq.w	loc_14F7C
00015588 0201 0038                  		andi.b	#$38,d1
0001558C 6600                       		bne.s	loc_14D3C
0001558E 5042                       		addq.w	#8,d2
00015590                            
00015590                            loc_14D3C:
00015590 0C00 0040                  		cmpi.b	#$40,d0
00015594 6700 0000                  		beq.w	loc_1504A
00015598 6000 0000                  		bra.w	loc_14EBC
0001559C                            
0001559C                            ; End of function Sonic_WalkSpeed
0001559C                            
0001559C                            
0001559C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001559C                            
0001559C                            
0001559C                            sub_14D48:				; XREF: Sonic_Jump
0001559C 11C0 F768                  		move.b	d0,($FFFFF768).w
000155A0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155A4 0600 0020                  		addi.b	#$20,d0
000155A8 0200 00C0                  		andi.b	#$C0,d0
000155AC 0C00 0040                  		cmpi.b	#$40,d0
000155B0 6700 0000                  		beq.w	loc_14FD6
000155B4 0C00 0080                  		cmpi.b	#$80,d0
000155B8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000155BC 0C00 00C0                  		cmpi.b	#$C0,d0
000155C0 6700 0000                  		beq.w	sub_14E50
000155C4                            
000155C4                            ; End of function sub_14D48
000155C4                            
000155C4                            ; ---------------------------------------------------------------------------
000155C4                            ; Subroutine to	make Sonic land	on the floor after jumping
000155C4                            ; ---------------------------------------------------------------------------
000155C4                            
000155C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155C4                            
000155C4                            
000155C4                            Sonic_HitFloor:				; XREF: Sonic_Floor
000155C4 3428 000C                  		move.w	$C(a0),d2
000155C8 3628 0008                  		move.w	8(a0),d3
000155CC 7000                       		moveq	#0,d0
000155CE 1028 0016                  		move.b	$16(a0),d0
000155D2 4880                       		ext.w	d0
000155D4 D440                       		add.w	d0,d2
000155D6 1028 0017                  		move.b	$17(a0),d0
000155DA 4880                       		ext.w	d0
000155DC D640                       		add.w	d0,d3
000155DE 49F8 F768                  		lea	($FFFFF768).w,a4
000155E2 367C 0010                  		movea.w	#$10,a3
000155E6 3C3C 0000                  		move.w	#0,d6
000155EA 7A0D                       		moveq	#$D,d5
000155EC 6100 FC34                  		bsr.w	FindFloor
000155F0 3F01                       		move.w	d1,-(sp)
000155F2 3428 000C                  		move.w	$C(a0),d2
000155F6 3628 0008                  		move.w	8(a0),d3
000155FA 7000                       		moveq	#0,d0
000155FC 1028 0016                  		move.b	$16(a0),d0
00015600 4880                       		ext.w	d0
00015602 D440                       		add.w	d0,d2
00015604 1028 0017                  		move.b	$17(a0),d0
00015608 4880                       		ext.w	d0
0001560A 9640                       		sub.w	d0,d3
0001560C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015610 367C 0010                  		movea.w	#$10,a3
00015614 3C3C 0000                  		move.w	#0,d6
00015618 7A0D                       		moveq	#$D,d5
0001561A 6100 FC06                  		bsr.w	FindFloor
0001561E 301F                       		move.w	(sp)+,d0
00015620 143C 0000                  		move.b	#0,d2
00015624                            
00015624                            loc_14DD0:
00015624 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015628 B240                       		cmp.w	d0,d1
0001562A 6F00                       		ble.s	loc_14DDE
0001562C 1638 F768                  		move.b	($FFFFF768).w,d3
00015630 C141                       		exg	d0,d1
00015632                            
00015632                            loc_14DDE:
00015632 0803 0000                  		btst	#0,d3
00015636 6700                       		beq.s	locret_14DE6
00015638 1602                       		move.b	d2,d3
0001563A                            
0001563A                            locret_14DE6:
0001563A 4E75                       		rts	
0001563C                            
0001563C                            ; End of function Sonic_HitFloor
0001563C                            
0001563C                            ; ===========================================================================
0001563C 3428 000C                  		move.w	$C(a0),d2
00015640 3628 0008                  		move.w	8(a0),d3
00015644                            
00015644                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015644 0642 000A                  		addi.w	#$A,d2
00015648 49F8 F768                  		lea	($FFFFF768).w,a4
0001564C 367C 0010                  		movea.w	#$10,a3
00015650 3C3C 0000                  		move.w	#0,d6
00015654 7A0E                       		moveq	#$E,d5
00015656 6100 FBCA                  		bsr.w	FindFloor
0001565A 143C 0000                  		move.b	#0,d2
0001565E                            
0001565E                            loc_14E0A:				; XREF: sub_14EB4
0001565E 1638 F768                  		move.b	($FFFFF768).w,d3
00015662 0803 0000                  		btst	#0,d3
00015666 6700                       		beq.s	locret_14E16
00015668 1602                       		move.b	d2,d3
0001566A                            
0001566A                            locret_14E16:
0001566A 4E75                       		rts	
0001566C                            
0001566C                            ; ---------------------------------------------------------------------------
0001566C                            ; Subroutine allowing objects to interact with the floor
0001566C                            ; ---------------------------------------------------------------------------
0001566C                            
0001566C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001566C                            
0001566C                            
0001566C                            ObjHitFloor:
0001566C 3628 0008                  		move.w	8(a0),d3
00015670                            
00015670                            ; End of function ObjHitFloor
00015670                            
00015670                            
00015670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015670                            
00015670                            
00015670                            ObjHitFloor2:
00015670 3428 000C                  		move.w	$C(a0),d2
00015674 7000                       		moveq	#0,d0
00015676 1028 0016                  		move.b	$16(a0),d0
0001567A 4880                       		ext.w	d0
0001567C D440                       		add.w	d0,d2
0001567E 49F8 F768                  		lea	($FFFFF768).w,a4
00015682 18BC 0000                  		move.b	#0,(a4)
00015686 367C 0010                  		movea.w	#$10,a3
0001568A 3C3C 0000                  		move.w	#0,d6
0001568E 7A0D                       		moveq	#$D,d5
00015690 6100 FB90                  		bsr.w	FindFloor
00015694 1638 F768                  		move.b	($FFFFF768).w,d3
00015698 0803 0000                  		btst	#0,d3
0001569C 6700                       		beq.s	locret_14E4E
0001569E 163C 0000                  		move.b	#0,d3
000156A2                            
000156A2                            locret_14E4E:
000156A2 4E75                       		rts	
000156A4                            ; End of function ObjHitFloor2
000156A4                            
000156A4                            
000156A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156A4                            
000156A4                            
000156A4                            sub_14E50:				; XREF: sub_14D48
000156A4 3428 000C                  		move.w	$C(a0),d2
000156A8 3628 0008                  		move.w	8(a0),d3
000156AC 7000                       		moveq	#0,d0
000156AE 1028 0017                  		move.b	$17(a0),d0
000156B2 4880                       		ext.w	d0
000156B4 9440                       		sub.w	d0,d2
000156B6 1028 0016                  		move.b	$16(a0),d0
000156BA 4880                       		ext.w	d0
000156BC D640                       		add.w	d0,d3
000156BE 49F8 F768                  		lea	($FFFFF768).w,a4
000156C2 367C 0010                  		movea.w	#$10,a3
000156C6 3C3C 0000                  		move.w	#0,d6
000156CA 7A0E                       		moveq	#$E,d5
000156CC 6100 FC92                  		bsr.w	FindWall
000156D0 3F01                       		move.w	d1,-(sp)
000156D2 3428 000C                  		move.w	$C(a0),d2
000156D6 3628 0008                  		move.w	8(a0),d3
000156DA 7000                       		moveq	#0,d0
000156DC 1028 0017                  		move.b	$17(a0),d0
000156E0 4880                       		ext.w	d0
000156E2 D440                       		add.w	d0,d2
000156E4 1028 0016                  		move.b	$16(a0),d0
000156E8 4880                       		ext.w	d0
000156EA D640                       		add.w	d0,d3
000156EC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156F0 367C 0010                  		movea.w	#$10,a3
000156F4 3C3C 0000                  		move.w	#0,d6
000156F8 7A0E                       		moveq	#$E,d5
000156FA 6100 FC64                  		bsr.w	FindWall
000156FE 301F                       		move.w	(sp)+,d0
00015700 143C 00C0                  		move.b	#-$40,d2
00015704 6000 FF1E                  		bra.w	loc_14DD0
00015708                            
00015708                            ; End of function sub_14E50
00015708                            
00015708                            
00015708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015708                            
00015708                            
00015708                            sub_14EB4:				; XREF: Sonic_Floor
00015708 3428 000C                  		move.w	$C(a0),d2
0001570C 3628 0008                  		move.w	8(a0),d3
00015710                            
00015710                            loc_14EBC:
00015710 0643 000A                  		addi.w	#$A,d3
00015714 49F8 F768                  		lea	($FFFFF768).w,a4
00015718 367C 0010                  		movea.w	#$10,a3
0001571C 3C3C 0000                  		move.w	#0,d6
00015720 7A0E                       		moveq	#$E,d5
00015722 6100 FC3C                  		bsr.w	FindWall
00015726 143C 00C0                  		move.b	#-$40,d2
0001572A 6000 FF32                  		bra.w	loc_14E0A
0001572E                            
0001572E                            ; End of function sub_14EB4
0001572E                            
0001572E                            ; ---------------------------------------------------------------------------
0001572E                            ; Subroutine to	detect when an object hits a wall to its right
0001572E                            ; ---------------------------------------------------------------------------
0001572E                            
0001572E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001572E                            
0001572E                            
0001572E                            ObjHitWallRight:
0001572E D668 0008                  		add.w	8(a0),d3
00015732 3428 000C                  		move.w	$C(a0),d2
00015736 49F8 F768                  		lea	($FFFFF768).w,a4
0001573A 18BC 0000                  		move.b	#0,(a4)
0001573E 367C 0010                  		movea.w	#$10,a3
00015742 3C3C 0000                  		move.w	#0,d6
00015746 7A0E                       		moveq	#$E,d5
00015748 6100 FC16                  		bsr.w	FindWall
0001574C 1638 F768                  		move.b	($FFFFF768).w,d3
00015750 0803 0000                  		btst	#0,d3
00015754 6700                       		beq.s	locret_14F06
00015756 163C 00C0                  		move.b	#-$40,d3
0001575A                            
0001575A                            locret_14F06:
0001575A 4E75                       		rts	
0001575C                            
0001575C                            ; End of function ObjHitWallRight
0001575C                            
0001575C                            ; ---------------------------------------------------------------------------
0001575C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001575C                            ; touches them
0001575C                            ; ---------------------------------------------------------------------------
0001575C                            
0001575C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001575C                            
0001575C                            
0001575C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001575C 3428 000C                  		move.w	$C(a0),d2
00015760 3628 0008                  		move.w	8(a0),d3
00015764 7000                       		moveq	#0,d0
00015766 1028 0016                  		move.b	$16(a0),d0
0001576A 4880                       		ext.w	d0
0001576C 9440                       		sub.w	d0,d2
0001576E 0A42 000F                  		eori.w	#$F,d2
00015772 1028 0017                  		move.b	$17(a0),d0
00015776 4880                       		ext.w	d0
00015778 D640                       		add.w	d0,d3
0001577A 49F8 F768                  		lea	($FFFFF768).w,a4
0001577E 367C FFF0                  		movea.w	#-$10,a3
00015782 3C3C 1000                  		move.w	#$1000,d6
00015786 7A0E                       		moveq	#$E,d5
00015788 6100 FA98                  		bsr.w	FindFloor
0001578C 3F01                       		move.w	d1,-(sp)
0001578E 3428 000C                  		move.w	$C(a0),d2
00015792 3628 0008                  		move.w	8(a0),d3
00015796 7000                       		moveq	#0,d0
00015798 1028 0016                  		move.b	$16(a0),d0
0001579C 4880                       		ext.w	d0
0001579E 9440                       		sub.w	d0,d2
000157A0 0A42 000F                  		eori.w	#$F,d2
000157A4 1028 0017                  		move.b	$17(a0),d0
000157A8 4880                       		ext.w	d0
000157AA 9640                       		sub.w	d0,d3
000157AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157B0 367C FFF0                  		movea.w	#-$10,a3
000157B4 3C3C 1000                  		move.w	#$1000,d6
000157B8 7A0E                       		moveq	#$E,d5
000157BA 6100 FA66                  		bsr.w	FindFloor
000157BE 301F                       		move.w	(sp)+,d0
000157C0 143C 0080                  		move.b	#-$80,d2
000157C4 6000 FE5E                  		bra.w	loc_14DD0
000157C8                            ; End of function Sonic_DontRunOnWalls
000157C8                            
000157C8                            ; ===========================================================================
000157C8 3428 000C                  		move.w	$C(a0),d2
000157CC 3628 0008                  		move.w	8(a0),d3
000157D0                            
000157D0                            loc_14F7C:
000157D0 0442 000A                  		subi.w	#$A,d2
000157D4 0A42 000F                  		eori.w	#$F,d2
000157D8 49F8 F768                  		lea	($FFFFF768).w,a4
000157DC 367C FFF0                  		movea.w	#-$10,a3
000157E0 3C3C 1000                  		move.w	#$1000,d6
000157E4 7A0E                       		moveq	#$E,d5
000157E6 6100 FA3A                  		bsr.w	FindFloor
000157EA 143C 0080                  		move.b	#-$80,d2
000157EE 6000 FE6E                  		bra.w	loc_14E0A
000157F2                            
000157F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157F2                            
000157F2                            
000157F2                            ObjHitCeiling:
000157F2 3428 000C                  		move.w	$C(a0),d2
000157F6 3628 0008                  		move.w	8(a0),d3
000157FA 7000                       		moveq	#0,d0
000157FC 1028 0016                  		move.b	$16(a0),d0
00015800 4880                       		ext.w	d0
00015802 9440                       		sub.w	d0,d2
00015804 0A42 000F                  		eori.w	#$F,d2
00015808 49F8 F768                  		lea	($FFFFF768).w,a4
0001580C 367C FFF0                  		movea.w	#-$10,a3
00015810 3C3C 1000                  		move.w	#$1000,d6
00015814 7A0E                       		moveq	#$E,d5
00015816 6100 FA0A                  		bsr.w	FindFloor
0001581A 1638 F768                  		move.b	($FFFFF768).w,d3
0001581E 0803 0000                  		btst	#0,d3
00015822 6700                       		beq.s	locret_14FD4
00015824 163C 0080                  		move.b	#-$80,d3
00015828                            
00015828                            locret_14FD4:
00015828 4E75                       		rts	
0001582A                            ; End of function ObjHitCeiling
0001582A                            
0001582A                            ; ===========================================================================
0001582A                            
0001582A                            loc_14FD6:				; XREF: sub_14D48
0001582A 3428 000C                  		move.w	$C(a0),d2
0001582E 3628 0008                  		move.w	8(a0),d3
00015832 7000                       		moveq	#0,d0
00015834 1028 0017                  		move.b	$17(a0),d0
00015838 4880                       		ext.w	d0
0001583A 9440                       		sub.w	d0,d2
0001583C 1028 0016                  		move.b	$16(a0),d0
00015840 4880                       		ext.w	d0
00015842 9640                       		sub.w	d0,d3
00015844 0A43 000F                  		eori.w	#$F,d3
00015848 49F8 F768                  		lea	($FFFFF768).w,a4
0001584C 367C FFF0                  		movea.w	#-$10,a3
00015850 3C3C 0800                  		move.w	#$800,d6
00015854 7A0E                       		moveq	#$E,d5
00015856 6100 FB08                  		bsr.w	FindWall
0001585A 3F01                       		move.w	d1,-(sp)
0001585C 3428 000C                  		move.w	$C(a0),d2
00015860 3628 0008                  		move.w	8(a0),d3
00015864 7000                       		moveq	#0,d0
00015866 1028 0017                  		move.b	$17(a0),d0
0001586A 4880                       		ext.w	d0
0001586C D440                       		add.w	d0,d2
0001586E 1028 0016                  		move.b	$16(a0),d0
00015872 4880                       		ext.w	d0
00015874 9640                       		sub.w	d0,d3
00015876 0A43 000F                  		eori.w	#$F,d3
0001587A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001587E 367C FFF0                  		movea.w	#-$10,a3
00015882 3C3C 0800                  		move.w	#$800,d6
00015886 7A0E                       		moveq	#$E,d5
00015888 6100 FAD6                  		bsr.w	FindWall
0001588C 301F                       		move.w	(sp)+,d0
0001588E 143C 0040                  		move.b	#$40,d2
00015892 6000 FD90                  		bra.w	loc_14DD0
00015896                            
00015896                            ; ---------------------------------------------------------------------------
00015896                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015896                            ; ---------------------------------------------------------------------------
00015896                            
00015896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015896                            
00015896                            
00015896                            Sonic_HitWall:				; XREF: Sonic_Floor
00015896 3428 000C                  		move.w	$C(a0),d2
0001589A 3628 0008                  		move.w	8(a0),d3
0001589E                            
0001589E                            loc_1504A:
0001589E 0443 000A                  		subi.w	#$A,d3
000158A2 0A43 000F                  		eori.w	#$F,d3
000158A6 49F8 F768                  		lea	($FFFFF768).w,a4
000158AA 367C FFF0                  		movea.w	#-$10,a3
000158AE 3C3C 0800                  		move.w	#$800,d6
000158B2 7A0E                       		moveq	#$E,d5
000158B4 6100 FAAA                  		bsr.w	FindWall
000158B8 143C 0040                  		move.b	#$40,d2
000158BC 6000 FDA0                  		bra.w	loc_14E0A
000158C0                            ; End of function Sonic_HitWall
000158C0                            
000158C0                            ; ---------------------------------------------------------------------------
000158C0                            ; Subroutine to	detect when an object hits a wall to its left
000158C0                            ; ---------------------------------------------------------------------------
000158C0                            
000158C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158C0                            
000158C0                            
000158C0                            ObjHitWallLeft:
000158C0 D668 0008                  		add.w	8(a0),d3
000158C4 3428 000C                  		move.w	$C(a0),d2
000158C8 49F8 F768                  		lea	($FFFFF768).w,a4
000158CC 18BC 0000                  		move.b	#0,(a4)
000158D0 367C FFF0                  		movea.w	#-$10,a3
000158D4 3C3C 0800                  		move.w	#$800,d6
000158D8 7A0E                       		moveq	#$E,d5
000158DA 6100 FA84                  		bsr.w	FindWall
000158DE 1638 F768                  		move.b	($FFFFF768).w,d3
000158E2 0803 0000                  		btst	#0,d3
000158E6 6700                       		beq.s	locret_15098
000158E8 163C 0040                  		move.b	#$40,d3
000158EC                            
000158EC                            locret_15098:
000158EC 4E75                       		rts	
000158EE                            ; End of function ObjHitWallLeft
000158EE                            
000158EE                            ; ===========================================================================
000158EE                            ; ---------------------------------------------------------------------------
000158EE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000158EE                            ; ---------------------------------------------------------------------------
000158EE                            
000158EE                            Obj66:					; XREF: Obj_Index
000158EE 7000                       		moveq	#0,d0
000158F0 1028 0024                  		move.b	$24(a0),d0
000158F4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000158F8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000158FC                            ; ===========================================================================
000158FC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000158FE 0000                       		dc.w Obj66_Action-Obj66_Index
00015900 0000                       		dc.w Obj66_Display-Obj66_Index
00015902 0000                       		dc.w Obj66_Release-Obj66_Index
00015904                            ; ===========================================================================
00015904                            
00015904                            Obj66_Main:				; XREF: Obj66_Index
00015904 5428 0024                  		addq.b	#2,$24(a0)
00015908 323C 0001                  		move.w	#1,d1
0001590C 2248                       		movea.l	a0,a1
0001590E 6000                       		bra.s	Obj66_MakeItem
00015910                            ; ===========================================================================
00015910                            
00015910                            Obj66_Loop:
00015910 6100 88E6                  		bsr.w	SingleObjLoad
00015914 6600                       		bne.s	loc_150FE
00015916 12BC 0066                  		move.b	#$66,0(a1)
0001591A 5829 0024                  		addq.b	#4,$24(a1)
0001591E 3368 0008 0008             		move.w	8(a0),8(a1)
00015924 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001592A 137C 0003 0018             		move.b	#3,$18(a1)
00015930 137C 0010 001A             		move.b	#$10,$1A(a1)
00015936                            
00015936                            Obj66_MakeItem:				; XREF: Obj66_Main
00015936 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001593E 337C 4348 0002             		move.w	#$4348,2(a1)
00015944 0029 0004 0001             		ori.b	#4,1(a1)
0001594A 137C 0038 0019             		move.b	#$38,$19(a1)
00015950                            
00015950                            loc_150FE:
00015950 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015954                            
00015954 117C 0030 0019             		move.b	#$30,$19(a0)
0001595A 117C 0004 0018             		move.b	#4,$18(a0)
00015960 317C 003C 0030             		move.w	#$3C,$30(a0)
00015966 117C 0001 0034             		move.b	#1,$34(a0)
0001596C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015972                            
00015972                            Obj66_Action:				; XREF: Obj66_Index
00015972 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015976 4A28 0001                  		tst.b	1(a0)
0001597A 6A00 0000                  		bpl.w	Obj66_Display
0001597E 323C 0030                  		move.w	#$30,d1
00015982 3401                       		move.w	d1,d2
00015984 3602                       		move.w	d2,d3
00015986 5243                       		addq.w	#1,d3
00015988 3828 0008                  		move.w	8(a0),d4
0001598C 6100 A7B4                  		bsr.w	SolidObject
00015990 0828 0005 0022             		btst	#5,$22(a0)
00015996 6700 0000                  		beq.w	Obj66_Display
0001599A 43F8 D000                  		lea	($FFFFD000).w,a1
0001599E 720E                       		moveq	#$E,d1
000159A0 3029 0008                  		move.w	8(a1),d0
000159A4 B068 0008                  		cmp.w	8(a0),d0
000159A8 6500                       		bcs.s	Obj66_GrabSonic
000159AA 7207                       		moveq	#7,d1
000159AC                            
000159AC                            Obj66_GrabSonic:
000159AC B228 001A                  		cmp.b	$1A(a0),d1
000159B0 6600                       		bne.s	Obj66_Display
000159B2 1141 0032                  		move.b	d1,$32(a0)
000159B6 5828 0024                  		addq.b	#4,$24(a0)
000159BA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000159C0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000159C6 337C 0800 0014             		move.w	#$800,$14(a1)
000159CC 337C 0000 0010             		move.w	#0,$10(a1)
000159D2 337C 0000 0012             		move.w	#0,$12(a1)
000159D8 08A8 0005 0022             		bclr	#5,$22(a0)
000159DE 08A9 0005 0022             		bclr	#5,$22(a1)
000159E4 08E9 0001 0022             		bset	#1,$22(a1)
000159EA 3429 0008                  		move.w	8(a1),d2
000159EE 3629 000C                  		move.w	$C(a1),d3
000159F2 6100 0000                  		bsr.w	Obj66_ChgPos
000159F6 D569 0008                  		add.w	d2,8(a1)
000159FA D769 000C                  		add.w	d3,$C(a1)
000159FE E0E9 0008                  		asr	8(a1)
00015A02 E0E9 000C                  		asr	$C(a1)
00015A06                            
00015A06                            Obj66_Display:				; XREF: Obj66_Index
00015A06 6000 A412                  		bra.w	MarkObjGone
00015A0A                            ; ===========================================================================
00015A0A                            
00015A0A                            Obj66_Release:				; XREF: Obj66_Index
00015A0A 1028 001A                  		move.b	$1A(a0),d0
00015A0E 0C00 0004                  		cmpi.b	#4,d0
00015A12 6700                       		beq.s	loc_151C8
00015A14 0C00 0007                  		cmpi.b	#7,d0
00015A18 6600                       		bne.s	loc_151F8
00015A1A                            
00015A1A                            loc_151C8:
00015A1A B028 0032                  		cmp.b	$32(a0),d0
00015A1E 6700                       		beq.s	loc_151F8
00015A20 43F8 D000                  		lea	($FFFFD000).w,a1
00015A24 337C 0000 0010             		move.w	#0,$10(a1)
00015A2A 337C 0800 0012             		move.w	#$800,$12(a1)
00015A30 0C00 0004                  		cmpi.b	#4,d0
00015A34 6700                       		beq.s	loc_151F0
00015A36 337C 0800 0010             		move.w	#$800,$10(a1)
00015A3C 337C 0800 0012             		move.w	#$800,$12(a1)
00015A42                            
00015A42                            loc_151F0:
00015A42 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015A46 5928 0024                  		subq.b	#4,$24(a0)
00015A4A                            
00015A4A                            loc_151F8:
00015A4A 6100                       		bsr.s	Obj66_ChkSwitch
00015A4C 6100                       		bsr.s	Obj66_ChgPos
00015A4E 6000 A3CA                  		bra.w	MarkObjGone
00015A52                            
00015A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A52                            
00015A52                            
00015A52                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015A52 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015A56 7000                       		moveq	#0,d0
00015A58 1028 0038                  		move.b	$38(a0),d0
00015A5C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015A62 6700                       		beq.s	loc_15224	; if not, branch
00015A64 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015A68 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015A6A 4428 0034                  		neg.b	$34(a0)
00015A6E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015A74 6000                       		bra.s	Obj66_Animate
00015A76                            ; ===========================================================================
00015A76                            
00015A76                            loc_15224:
00015A76 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015A7A                            
00015A7A                            Obj66_Animate:
00015A7A 5328 001E                  		subq.b	#1,$1E(a0)
00015A7E 6A00                       		bpl.s	locret_15246
00015A80 117C 0007 001E             		move.b	#7,$1E(a0)
00015A86 1228 0034                  		move.b	$34(a0),d1
00015A8A 1028 001A                  		move.b	$1A(a0),d0
00015A8E D001                       		add.b	d1,d0
00015A90 0200 000F                  		andi.b	#$F,d0
00015A94 1140 001A                  		move.b	d0,$1A(a0)
00015A98                            
00015A98                            locret_15246:
00015A98 4E75                       		rts	
00015A9A                            ; End of function Obj66_ChkSwitch
00015A9A                            
00015A9A                            
00015A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A9A                            
00015A9A                            
00015A9A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015A9A 43F8 D000                  		lea	($FFFFD000).w,a1
00015A9E 7000                       		moveq	#0,d0
00015AA0 1028 001A                  		move.b	$1A(a0),d0
00015AA4 D040                       		add.w	d0,d0
00015AA6 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015AAA 101A                       		move.b	(a2)+,d0
00015AAC 4880                       		ext.w	d0
00015AAE D068 0008                  		add.w	8(a0),d0
00015AB2 3340 0008                  		move.w	d0,8(a1)
00015AB6 101A                       		move.b	(a2)+,d0
00015AB8 4880                       		ext.w	d0
00015ABA D068 000C                  		add.w	$C(a0),d0
00015ABE 3340 000C                  		move.w	d0,$C(a1)
00015AC2 4E75                       		rts	
00015AC4                            ; End of function Obj66_ChgPos
00015AC4                            
00015AC4                            ; ===========================================================================
00015AC4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015AC8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015ACC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015AD0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015AD4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015AD8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015ADC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015AE0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4                            Map_obj66:
00015AE4                            	include "_maps\obj66.asm"
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015AE8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015AEC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015AF0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015AF4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015AF8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015AFC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015B00 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015B04 0000                       		dc.w byte_154A4-Map_obj66
00015B06 06                         byte_152B4:	dc.b 6
00015B07 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015B0C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015B11 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015B16 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015B1B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015B20 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015B25 06                         byte_152D3:	dc.b 6
00015B26 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015B2B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015B30 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015B35 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015B3A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015B3F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015B44 06                         byte_152F2:	dc.b 6
00015B45 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015B4A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015B4F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015B54 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015B59 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015B5E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015B63 06                         byte_15311:	dc.b 6
00015B64 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015B69 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015B6E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015B73 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015B78 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015B7D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015B82 06                         byte_15330:	dc.b 6
00015B83 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015B88 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015B8D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015B92 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015B97 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015B9C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015BA1 06                         byte_1534F:	dc.b 6
00015BA2 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015BA7 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015BAC 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015BB1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015BB6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015BBB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015BC0 06                         byte_1536E:	dc.b 6
00015BC1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015BC6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015BCB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015BD0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015BD5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015BDA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015BDF 06                         byte_1538D:	dc.b 6
00015BE0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015BE5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015BEA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015BEF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015BF4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015BF9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015BFE 06                         byte_153AC:	dc.b 6
00015BFF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015C04 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015C09 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015C0E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015C13 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015C18 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015C1D 06                         byte_153CB:	dc.b 6
00015C1E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015C23 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015C28 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015C2D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015C32 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015C37 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015C3C 06                         byte_153EA:	dc.b 6
00015C3D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015C42 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015C47 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015C4C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015C51 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015C56 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015C5B 06                         byte_15409:	dc.b 6
00015C5C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015C61 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015C66 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015C6B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015C70 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015C75 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015C7A 06                         byte_15428:	dc.b 6
00015C7B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015C80 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015C85 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015C8A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015C8F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015C94 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015C99 06                         byte_15447:	dc.b 6
00015C9A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015C9F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015CA4 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015CA9 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015CAE E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015CB3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015CB8 06                         byte_15466:	dc.b 6
00015CB9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015CBE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015CC3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015CC8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015CCD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015CD2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015CD7 06                         byte_15485:	dc.b 6
00015CD8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015CDD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015CE2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015CE7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015CEC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015CF1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015CF6 0C                         byte_154A4:	dc.b $C
00015CF7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015CFC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015D01 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015D06 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015D0B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015D10 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015D15 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015D1A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015D1F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015D24 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015D29 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015D2E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015D34 00                         		even
00015D34 00                         		even
00015D34                            
00015D34                            ; ===========================================================================
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            ; Object 67 - disc that	you run	around (SBZ)
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            
00015D34                            Obj67:					; XREF: Obj_Index
00015D34 7000                       		moveq	#0,d0
00015D36 1028 0024                  		move.b	$24(a0),d0
00015D3A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015D3E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015D42                            ; ===========================================================================
00015D42 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015D44 0000                       		dc.w Obj67_Action-Obj67_Index
00015D46                            ; ===========================================================================
00015D46                            
00015D46                            Obj67_Main:				; XREF: Obj67_Index
00015D46 5428 0024                  		addq.b	#2,$24(a0)
00015D4A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015D52 317C C344 0002             		move.w	#$C344,2(a0)
00015D58 117C 0004 0001             		move.b	#4,1(a0)
00015D5E 117C 0004 0018             		move.b	#4,$18(a0)
00015D64 117C 0008 0019             		move.b	#8,$19(a0)
00015D6A 3168 0008 0032             		move.w	8(a0),$32(a0)
00015D70 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015D76 117C 0018 0034             		move.b	#$18,$34(a0)
00015D7C 117C 0048 0038             		move.b	#$48,$38(a0)
00015D82 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D86 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D8A 6700                       		beq.s	loc_15546
00015D8C 117C 0010 0034             		move.b	#$10,$34(a0)
00015D92 117C 0038 0038             		move.b	#$38,$38(a0)
00015D98                            
00015D98                            loc_15546:
00015D98 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D9C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015DA0 4881                       		ext.w	d1
00015DA2 E741                       		asl.w	#3,d1
00015DA4 3141 0036                  		move.w	d1,$36(a0)
00015DA8 1028 0022                  		move.b	$22(a0),d0
00015DAC E418                       		ror.b	#2,d0
00015DAE 0200 00C0                  		andi.b	#-$40,d0
00015DB2 1140 0026                  		move.b	d0,$26(a0)
00015DB6                            
00015DB6                            Obj67_Action:				; XREF: Obj67_Index
00015DB6 6100 0000                  		bsr.w	Obj67_MoveSonic
00015DBA 6100 0000                  		bsr.w	Obj67_MoveSpot
00015DBE 6000 0000                  		bra.w	Obj67_ChkDel
00015DC2                            ; ===========================================================================
00015DC2                            
00015DC2                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015DC2 7400                       		moveq	#0,d2
00015DC4 1428 0038                  		move.b	$38(a0),d2
00015DC8 3602                       		move.w	d2,d3
00015DCA D643                       		add.w	d3,d3
00015DCC 43F8 D000                  		lea	($FFFFD000).w,a1
00015DD0 3029 0008                  		move.w	8(a1),d0
00015DD4 9068 0032                  		sub.w	$32(a0),d0
00015DD8 D042                       		add.w	d2,d0
00015DDA B043                       		cmp.w	d3,d0
00015DDC 6400                       		bcc.s	loc_155A8
00015DDE 3229 000C                  		move.w	$C(a1),d1
00015DE2 9268 0030                  		sub.w	$30(a0),d1
00015DE6 D242                       		add.w	d2,d1
00015DE8 B243                       		cmp.w	d3,d1
00015DEA 6400                       		bcc.s	loc_155A8
00015DEC 0829 0001 0022             		btst	#1,$22(a1)
00015DF2 6700                       		beq.s	loc_155B8
00015DF4 4228 003A                  		clr.b	$3A(a0)
00015DF8 4E75                       		rts	
00015DFA                            ; ===========================================================================
00015DFA                            
00015DFA                            loc_155A8:
00015DFA 4A28 003A                  		tst.b	$3A(a0)
00015DFE 6700                       		beq.s	locret_155B6
00015E00 4229 0038                  		clr.b	$38(a1)
00015E04 4228 003A                  		clr.b	$3A(a0)
00015E08                            
00015E08                            locret_155B6:
00015E08 4E75                       		rts	
00015E0A                            ; ===========================================================================
00015E0A                            
00015E0A                            loc_155B8:
00015E0A 4A28 003A                  		tst.b	$3A(a0)
00015E0E 6600                       		bne.s	loc_155E2
00015E10 117C 0001 003A             		move.b	#1,$3A(a0)
00015E16 0829 0002 0022             		btst	#2,$22(a1)
00015E1C 6600                       		bne.s	loc_155D0
00015E1E 4229 001C                  		clr.b	$1C(a1)
00015E22                            
00015E22                            loc_155D0:
00015E22 08A9 0005 0022             		bclr	#5,$22(a1)
00015E28 137C 0001 001D             		move.b	#1,$1D(a1)
00015E2E 137C 0001 0038             		move.b	#1,$38(a1)
00015E34                            
00015E34                            loc_155E2:
00015E34 3029 0014                  		move.w	$14(a1),d0
00015E38 4A68 0036                  		tst.w	$36(a0)
00015E3C 6A00                       		bpl.s	loc_15608
00015E3E 0C40 FC00                  		cmpi.w	#-$400,d0
00015E42 6F00                       		ble.s	loc_155FA
00015E44 337C FC00 0014             		move.w	#-$400,$14(a1)
00015E4A 4E75                       		rts	
00015E4C                            ; ===========================================================================
00015E4C                            
00015E4C                            loc_155FA:
00015E4C 0C40 F100                  		cmpi.w	#-$F00,d0
00015E50 6C00                       		bge.s	locret_15606
00015E52 337C F100 0014             		move.w	#-$F00,$14(a1)
00015E58                            
00015E58                            locret_15606:
00015E58 4E75                       		rts	
00015E5A                            ; ===========================================================================
00015E5A                            
00015E5A                            loc_15608:
00015E5A 0C40 0400                  		cmpi.w	#$400,d0
00015E5E 6C00                       		bge.s	loc_15616
00015E60 337C 0400 0014             		move.w	#$400,$14(a1)
00015E66 4E75                       		rts	
00015E68                            ; ===========================================================================
00015E68                            
00015E68                            loc_15616:
00015E68 0C40 0F00                  		cmpi.w	#$F00,d0
00015E6C 6F00                       		ble.s	locret_15622
00015E6E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015E74                            
00015E74                            locret_15622:
00015E74 4E75                       		rts	
00015E76                            ; ===========================================================================
00015E76                            
00015E76                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015E76 3028 0036                  		move.w	$36(a0),d0
00015E7A D168 0026                  		add.w	d0,$26(a0)
00015E7E 1028 0026                  		move.b	$26(a0),d0
00015E82 4EB9 0000 2C64             		jsr	(CalcSine).l
00015E88 3428 0030                  		move.w	$30(a0),d2
00015E8C 3628 0032                  		move.w	$32(a0),d3
00015E90 7800                       		moveq	#0,d4
00015E92 1828 0034                  		move.b	$34(a0),d4
00015E96 E14C                       		lsl.w	#8,d4
00015E98 2A04                       		move.l	d4,d5
00015E9A C9C0                       		muls.w	d0,d4
00015E9C 4844                       		swap	d4
00015E9E CBC1                       		muls.w	d1,d5
00015EA0 4845                       		swap	d5
00015EA2 D842                       		add.w	d2,d4
00015EA4 DA43                       		add.w	d3,d5
00015EA6 3144 000C                  		move.w	d4,$C(a0)
00015EAA 3145 0008                  		move.w	d5,8(a0)
00015EAE 4E75                       		rts	
00015EB0                            ; ===========================================================================
00015EB0                            
00015EB0                            Obj67_ChkDel:				; XREF: Obj67_Action
00015EB0 3028 0032                  		move.w	$32(a0),d0
00015EB4 0240 FF80                  		andi.w	#-$80,d0
00015EB8 3238 F700                  		move.w	($FFFFF700).w,d1
00015EBC 0441 0080                  		subi.w	#$80,d1
00015EC0 0241 FF80                  		andi.w	#-$80,d1
00015EC4 9041                       		sub.w	d1,d0
00015EC6 0C40 0280                  		cmpi.w	#$280,d0
00015ECA 6200                       		bhi.s	Obj67_Delete
00015ECC 4EF9 0000 DD72             		jmp	DisplaySprite
00015ED2                            ; ===========================================================================
00015ED2                            
00015ED2                            Obj67_Delete:
00015ED2 4EF9 0000 DDAE             		jmp	DeleteObject
00015ED8                            ; ===========================================================================
00015ED8                            ; ---------------------------------------------------------------------------
00015ED8                            ; Sprite mappings - disc that you run around (SBZ)
00015ED8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015ED8                            ; part of the level tiles.)
00015ED8                            ; ---------------------------------------------------------------------------
00015ED8                            Map_obj67:
00015ED8                            	include "_maps\obj67.asm"
00015ED8                            ; ---------------------------------------------------------------------------
00015ED8                            ; Sprite mappings - disc that you run around (SBZ)
00015ED8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015ED8                            ; part of the level tiles.)
00015ED8                            ; ---------------------------------------------------------------------------
00015ED8 0000                       		dc.w byte_15688-Map_obj67
00015EDA 01                         byte_15688:	dc.b 1
00015EDB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015EE0                            		even
00015EE0                            		even
00015EE0                            
00015EE0                            ; ===========================================================================
00015EE0                            ; ---------------------------------------------------------------------------
00015EE0                            ; Object 68 - conveyor belts (SBZ)
00015EE0                            ; ---------------------------------------------------------------------------
00015EE0                            
00015EE0                            Obj68:					; XREF: Obj_Index
00015EE0 7000                       		moveq	#0,d0
00015EE2 1028 0024                  		move.b	$24(a0),d0
00015EE6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015EEA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015EEE                            ; ===========================================================================
00015EEE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015EF0 0000                       		dc.w Obj68_Action-Obj68_Index
00015EF2                            ; ===========================================================================
00015EF2                            
00015EF2                            Obj68_Main:				; XREF: Obj68_Index
00015EF2 5428 0024                  		addq.b	#2,$24(a0)
00015EF6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015EFC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F00 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015F04 6700                       		beq.s	loc_156BA	; if zero, branch
00015F06 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015F0C                            
00015F0C                            loc_156BA:
00015F0C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F10 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015F14 4881                       		ext.w	d1
00015F16 E841                       		asr.w	#4,d1
00015F18 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015F1C                            
00015F1C                            Obj68_Action:				; XREF: Obj68_Index
00015F1C 6100                       		bsr.s	Obj68_MoveSonic
00015F1E 3028 0008                  		move.w	8(a0),d0
00015F22 0240 FF80                  		andi.w	#$FF80,d0
00015F26 3238 F700                  		move.w	($FFFFF700).w,d1
00015F2A 0441 0080                  		subi.w	#$80,d1
00015F2E 0241 FF80                  		andi.w	#$FF80,d1
00015F32 9041                       		sub.w	d1,d0
00015F34 0C40 0280                  		cmpi.w	#$280,d0
00015F38 6200                       		bhi.s	Obj68_Delete
00015F3A 4E75                       		rts	
00015F3C                            ; ===========================================================================
00015F3C                            
00015F3C                            Obj68_Delete:
00015F3C 4EF9 0000 DDAE             		jmp	DeleteObject
00015F42                            ; ===========================================================================
00015F42                            
00015F42                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015F42 7400                       		moveq	#0,d2
00015F44 1428 0038                  		move.b	$38(a0),d2
00015F48 3602                       		move.w	d2,d3
00015F4A D643                       		add.w	d3,d3
00015F4C 43F8 D000                  		lea	($FFFFD000).w,a1
00015F50 3029 0008                  		move.w	8(a1),d0
00015F54 9068 0008                  		sub.w	8(a0),d0
00015F58 D042                       		add.w	d2,d0
00015F5A B043                       		cmp.w	d3,d0
00015F5C 6400                       		bcc.s	locret_1572E
00015F5E 3229 000C                  		move.w	$C(a1),d1
00015F62 9268 000C                  		sub.w	$C(a0),d1
00015F66 0641 0030                  		addi.w	#$30,d1
00015F6A 0C41 0030                  		cmpi.w	#$30,d1
00015F6E 6400                       		bcc.s	locret_1572E
00015F70 0829 0001 0022             		btst	#1,$22(a1)
00015F76 6600                       		bne.s	locret_1572E
00015F78 3028 0036                  		move.w	$36(a0),d0
00015F7C D169 0008                  		add.w	d0,8(a1)
00015F80                            
00015F80                            locret_1572E:
00015F80 4E75                       		rts	
00015F82                            
00015F82                            ; ===========================================================================
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            
00015F82                            Obj69:					; XREF: Obj_Index
00015F82 7000                       		moveq	#0,d0
00015F84 1028 0024                  		move.b	$24(a0),d0
00015F88 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015F8C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015F90                            ; ===========================================================================
00015F90 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015F92 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015F94 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015F96                            ; ===========================================================================
00015F96                            
00015F96                            Obj69_Main:				; XREF: Obj69_Index
00015F96 5428 0024                  		addq.b	#2,$24(a0)
00015F9A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015FA2 317C 4492 0002             		move.w	#$4492,2(a0)
00015FA8 0028 0004 0001             		ori.b	#4,1(a0)
00015FAE 117C 0080 0019             		move.b	#$80,$19(a0)
00015FB4 7000                       		moveq	#0,d0
00015FB6 1028 0028                  		move.b	$28(a0),d0
00015FBA 0240 000F                  		andi.w	#$F,d0
00015FBE C0FC 003C                  		mulu.w	#$3C,d0
00015FC2 3140 0032                  		move.w	d0,$32(a0)
00015FC6 4A28 0028                  		tst.b	$28(a0)
00015FCA 6A00                       		bpl.s	Obj69_Trapdoor
00015FCC 5428 0024                  		addq.b	#2,$24(a0)
00015FD0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015FD8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015FDE 117C 0010 0019             		move.b	#$10,$19(a0)
00015FE4 117C 0002 001C             		move.b	#2,$1C(a0)
00015FEA 7000                       		moveq	#0,d0
00015FEC 1028 0028                  		move.b	$28(a0),d0	; get object type
00015FF0 3200                       		move.w	d0,d1
00015FF2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015FF6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015FFA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015FFE 3140 0032                  		move.w	d0,$32(a0)
00016002 0241 0070                  		andi.w	#$70,d1
00016006 0641 0010                  		addi.w	#$10,d1
0001600A E549                       		lsl.w	#2,d1
0001600C 5341                       		subq.w	#1,d1
0001600E 3141 0036                  		move.w	d1,$36(a0)
00016012 6000                       		bra.s	Obj69_Spinner
00016014                            ; ===========================================================================
00016014                            
00016014                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016014 5368 0030                  		subq.w	#1,$30(a0)
00016018 6A00                       		bpl.s	Obj69_Animate
0001601A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016020 0868 0000 001C             		bchg	#0,$1C(a0)
00016026 4A28 0001                  		tst.b	1(a0)
0001602A 6A00                       		bpl.s	Obj69_Animate
0001602C 303C 00BB                  		move.w	#$BB,d0
00016030 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00016036                            
00016036                            Obj69_Animate:
00016036 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001603C 4EB9 0000 AE32             		jsr	AnimateSprite
00016042 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016046 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016048 323C 004B                  		move.w	#$4B,d1
0001604C 343C 000C                  		move.w	#$C,d2
00016050 3602                       		move.w	d2,d3
00016052 5243                       		addq.w	#1,d3
00016054 3828 0008                  		move.w	8(a0),d4
00016058 6100 A0E8                  		bsr.w	SolidObject
0001605C 6000 9DBC                  		bra.w	MarkObjGone
00016060                            ; ===========================================================================
00016060                            
00016060                            Obj69_NotSolid:
00016060 0828 0003 0022             		btst	#3,$22(a0)
00016066 6700                       		beq.s	Obj69_Display
00016068 43F8 D000                  		lea	($FFFFD000).w,a1
0001606C 08A9 0003 0022             		bclr	#3,$22(a1)
00016072 08A8 0003 0022             		bclr	#3,$22(a0)
00016078 4228 0025                  		clr.b	$25(a0)
0001607C                            
0001607C                            Obj69_Display:
0001607C 6000 9D9C                  		bra.w	MarkObjGone
00016080                            ; ===========================================================================
00016080                            
00016080                            Obj69_Spinner:				; XREF: Obj69_Index
00016080 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016084 C068 0036                  		and.w	$36(a0),d0
00016088 6600                       		bne.s	Obj69_Delay
0001608A 117C 0001 0034             		move.b	#1,$34(a0)
00016090                            
00016090                            Obj69_Delay:
00016090 4A28 0034                  		tst.b	$34(a0)
00016094 6700                       		beq.s	Obj69_Animate2
00016096 5368 0030                  		subq.w	#1,$30(a0)
0001609A 6A00                       		bpl.s	Obj69_Animate2
0001609C 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160A2 4228 0034                  		clr.b	$34(a0)
000160A6 0868 0000 001C             		bchg	#0,$1C(a0)
000160AC                            
000160AC                            Obj69_Animate2:
000160AC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160B2 4EB9 0000 AE32             		jsr	AnimateSprite
000160B8 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000160BC 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000160BE 323C 001B                  		move.w	#$1B,d1
000160C2 343C 0007                  		move.w	#7,d2
000160C6 3602                       		move.w	d2,d3
000160C8 5243                       		addq.w	#1,d3
000160CA 3828 0008                  		move.w	8(a0),d4
000160CE 6100 A072                  		bsr.w	SolidObject
000160D2 6000 9D46                  		bra.w	MarkObjGone
000160D6                            ; ===========================================================================
000160D6                            
000160D6                            Obj69_NotSolid2:
000160D6 0828 0003 0022             		btst	#3,$22(a0)
000160DC 6700                       		beq.s	Obj69_Display2
000160DE 43F8 D000                  		lea	($FFFFD000).w,a1
000160E2 08A9 0003 0022             		bclr	#3,$22(a1)
000160E8 08A8 0003 0022             		bclr	#3,$22(a0)
000160EE 4228 0025                  		clr.b	$25(a0)
000160F2                            
000160F2                            Obj69_Display2:
000160F2 6000 9D26                  		bra.w	MarkObjGone
000160F6                            ; ===========================================================================
000160F6                            Ani_obj69:
000160F6                            	include "_anim\obj69.asm"
000160F6                            ; ---------------------------------------------------------------------------
000160F6                            ; Animation script - trapdoor (SBZ)
000160F6                            ; ---------------------------------------------------------------------------
000160F6 0000                       		dc.w byte_158AC-Ani_obj69
000160F8 0000                       		dc.w byte_158B2-Ani_obj69
000160FA 0000                       		dc.w byte_158B8-Ani_obj69
000160FC 0000                       		dc.w byte_158CC-Ani_obj69
000160FE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016104 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001610A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016117 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001611E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001612B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016132                            		even
00016132                            		even
00016132                            
00016132                            ; ---------------------------------------------------------------------------
00016132                            ; Sprite mappings - trapdoor (SBZ)
00016132                            ; ---------------------------------------------------------------------------
00016132                            Map_obj69:
00016132                            	include "_maps\obj69.asm"
00016132                            ; ---------------------------------------------------------------------------
00016132                            ; Sprite mappings - trapdoor (SBZ)
00016132                            ; ---------------------------------------------------------------------------
00016132 0000                       		dc.w byte_158E6-Map_obj69
00016134 0000                       		dc.w byte_158FB-Map_obj69
00016136 0000                       		dc.w byte_15924-Map_obj69
00016138 04                         byte_158E6:	dc.b 4
00016139 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001613E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016143 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016148 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001614D 08                         byte_158FB:	dc.b 8
0001614E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016153 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016158 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001615D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016162 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016167 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001616C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016171 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016176 04                         byte_15924:	dc.b 4
00016177 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001617C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016181 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016186 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001618C 00                         		even
0001618C 00                         		even
0001618C                            
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            ; Sprite mappings - spinning platforms (SBZ)
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            Map_obj69a:
0001618C                            	include "_maps\obj69a.asm"
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            ; Sprite mappings - spinning platforms (SBZ)
0001618C                            ; ---------------------------------------------------------------------------
0001618C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016190 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016194 0000                       		dc.w byte_15970-Map_obj69a
00016196 02                         byte_15944:	dc.b 2
00016197 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001619C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000161A1 02                         byte_1594F:	dc.b 2
000161A2 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000161A7 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000161AC 02                         byte_1595A:	dc.b 2
000161AD F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000161B2 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000161B7 02                         byte_15965:	dc.b 2
000161B8 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000161BD 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000161C2 02                         byte_15970:	dc.b 2
000161C3 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000161C8 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000161CE 00                         		even
000161CE 00                         		even
000161CE                            
000161CE                            ; ===========================================================================
000161CE                            ; ---------------------------------------------------------------------------
000161CE                            ; Object 6A - ground saws and pizza cutters (SBZ)
000161CE                            ; ---------------------------------------------------------------------------
000161CE                            
000161CE                            Obj6A:					; XREF: Obj_Index
000161CE 7000                       		moveq	#0,d0
000161D0 1028 0024                  		move.b	$24(a0),d0
000161D4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000161D8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000161DC                            ; ===========================================================================
000161DC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000161DE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000161E0                            ; ===========================================================================
000161E0                            
000161E0                            Obj6A_Main:				; XREF: Obj6A_Index
000161E0 5428 0024                  		addq.b	#2,$24(a0)
000161E4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000161EC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000161F2 117C 0004 0001             		move.b	#4,1(a0)
000161F8 117C 0004 0018             		move.b	#4,$18(a0)
000161FE 117C 0020 0019             		move.b	#$20,$19(a0)
00016204 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001620A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016210 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016216 6400                       		bcc.s	Obj6A_Action
00016218 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001621E                            
0001621E                            Obj6A_Action:				; XREF: Obj6A_Index
0001621E 7000                       		moveq	#0,d0
00016220 1028 0028                  		move.b	$28(a0),d0
00016224 0240 0007                  		andi.w	#7,d0
00016228 D040                       		add.w	d0,d0
0001622A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001622E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016232 3028 003A                  		move.w	$3A(a0),d0
00016236 0240 FF80                  		andi.w	#$FF80,d0
0001623A 3238 F700                  		move.w	($FFFFF700).w,d1
0001623E 0441 0080                  		subi.w	#$80,d1
00016242 0241 FF80                  		andi.w	#$FF80,d1
00016246 9041                       		sub.w	d1,d0
00016248 0C40 0280                  		cmpi.w	#$280,d0
0001624C 6200                       		bhi.s	Obj6A_Delete
0001624E 4EF9 0000 DD72             		jmp	DisplaySprite
00016254                            ; ===========================================================================
00016254                            
00016254                            Obj6A_Delete:
00016254 4EF9 0000 DDAE             		jmp	DeleteObject
0001625A                            ; ===========================================================================
0001625A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001625E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016262 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016264                            ; ===========================================================================
00016264                            
00016264                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016264 4E75                       		rts	
00016266                            ; ===========================================================================
00016266                            
00016266                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016266 323C 0060                  		move.w	#$60,d1
0001626A 7000                       		moveq	#0,d0
0001626C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016270 0828 0000 0022             		btst	#0,$22(a0)
00016276 6700                       		beq.s	Obj6A_Animate01
00016278 4440                       		neg.w	d0
0001627A D041                       		add.w	d1,d0
0001627C                            
0001627C                            Obj6A_Animate01:
0001627C 3228 003A                  		move.w	$3A(a0),d1
00016280 9240                       		sub.w	d0,d1
00016282 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016286 5328 001E                  		subq.b	#1,$1E(a0)
0001628A 6A00                       		bpl.s	loc_15A46
0001628C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016292 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016298                            
00016298                            loc_15A46:
00016298 4A28 0001                  		tst.b	1(a0)
0001629C 6A00                       		bpl.s	locret_15A60
0001629E 3038 FE04                  		move.w	($FFFFFE04).w,d0
000162A2 0240 000F                  		andi.w	#$F,d0
000162A6 6600                       		bne.s	locret_15A60
000162A8 303C 00B0                  		move.w	#$B0,d0
000162AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162B2                            
000162B2                            locret_15A60:
000162B2 4E75                       		rts	
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000162B4 323C 0030                  		move.w	#$30,d1
000162B8 7000                       		moveq	#0,d0
000162BA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162BE 0828 0000 0022             		btst	#0,$22(a0)
000162C4 6700                       		beq.s	Obj6A_Animate02
000162C6 4440                       		neg.w	d0
000162C8 0640 0080                  		addi.w	#$80,d0
000162CC                            
000162CC                            Obj6A_Animate02:
000162CC 3228 0038                  		move.w	$38(a0),d1
000162D0 9240                       		sub.w	d0,d1
000162D2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000162D6 5328 001E                  		subq.b	#1,$1E(a0)
000162DA 6A00                       		bpl.s	loc_15A96
000162DC 117C 0002 001E             		move.b	#2,$1E(a0)
000162E2 0868 0000 001A             		bchg	#0,$1A(a0)
000162E8                            
000162E8                            loc_15A96:
000162E8 4A28 0001                  		tst.b	1(a0)
000162EC 6A00                       		bpl.s	locret_15AB0
000162EE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162F2 0C00 0018                  		cmpi.b	#$18,d0
000162F6 6600                       		bne.s	locret_15AB0
000162F8 303C 00B0                  		move.w	#$B0,d0
000162FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016302                            
00016302                            locret_15AB0:
00016302 4E75                       		rts	
00016304                            ; ===========================================================================
00016304                            
00016304                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016304 4A28 003D                  		tst.b	$3D(a0)
00016308 6600                       		bne.s	Obj6A_Animate03
0001630A 3038 D008                  		move.w	($FFFFD008).w,d0
0001630E 0440 00C0                  		subi.w	#$C0,d0
00016312 6500                       		bcs.s	loc_15B02
00016314 9068 0008                  		sub.w	8(a0),d0
00016318 6500                       		bcs.s	loc_15B02
0001631A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001631E 0440 0080                  		subi.w	#$80,d0
00016322 B068 000C                  		cmp.w	$C(a0),d0
00016326 6400                       		bcc.s	locret_15B04
00016328 0640 0100                  		addi.w	#$100,d0
0001632C B068 000C                  		cmp.w	$C(a0),d0
00016330 6500                       		bcs.s	locret_15B04
00016332 117C 0001 003D             		move.b	#1,$3D(a0)
00016338 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001633E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016344 117C 0002 001A             		move.b	#2,$1A(a0)
0001634A 303C 00B0                  		move.w	#$B0,d0
0001634E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016354                            
00016354                            loc_15B02:
00016354 588F                       		addq.l	#4,sp
00016356                            
00016356                            locret_15B04:
00016356 4E75                       		rts	
00016358                            ; ===========================================================================
00016358                            
00016358                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016358 4EB9 0000 DD4C             		jsr	SpeedToPos
0001635E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016364 5328 001E                  		subq.b	#1,$1E(a0)
00016368 6A00                       		bpl.s	locret_15B24
0001636A 117C 0002 001E             		move.b	#2,$1E(a0)
00016370 0868 0000 001A             		bchg	#0,$1A(a0)
00016376                            
00016376                            locret_15B24:
00016376 4E75                       		rts	
00016378                            ; ===========================================================================
00016378                            
00016378                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016378 4A28 003D                  		tst.b	$3D(a0)
0001637C 6600                       		bne.s	Obj6A_Animate04
0001637E 3038 D008                  		move.w	($FFFFD008).w,d0
00016382 0640 00E0                  		addi.w	#$E0,d0
00016386 9068 0008                  		sub.w	8(a0),d0
0001638A 6400                       		bcc.s	loc_15B74
0001638C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016390 0440 0080                  		subi.w	#$80,d0
00016394 B068 000C                  		cmp.w	$C(a0),d0
00016398 6400                       		bcc.s	locret_15B76
0001639A 0640 0100                  		addi.w	#$100,d0
0001639E B068 000C                  		cmp.w	$C(a0),d0
000163A2 6500                       		bcs.s	locret_15B76
000163A4 117C 0001 003D             		move.b	#1,$3D(a0)
000163AA 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000163B0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163B6 117C 0002 001A             		move.b	#2,$1A(a0)
000163BC 303C 00B0                  		move.w	#$B0,d0
000163C0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163C6                            
000163C6                            loc_15B74:
000163C6 588F                       		addq.l	#4,sp
000163C8                            
000163C8                            locret_15B76:
000163C8 4E75                       		rts	
000163CA                            ; ===========================================================================
000163CA                            
000163CA                            Obj6A_Animate04:
000163CA 4EB9 0000 DD4C             		jsr	SpeedToPos
000163D0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000163D6 5328 001E                  		subq.b	#1,$1E(a0)
000163DA 6A00                       		bpl.s	locret_15B96
000163DC 117C 0002 001E             		move.b	#2,$1E(a0)
000163E2 0868 0000 001A             		bchg	#0,$1A(a0)
000163E8                            
000163E8                            locret_15B96:
000163E8 4E75                       		rts	
000163EA                            ; ===========================================================================
000163EA                            ; ---------------------------------------------------------------------------
000163EA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163EA                            ; ---------------------------------------------------------------------------
000163EA                            Map_obj6A:
000163EA                            	include "_maps\obj6A.asm"
000163EA                            ; ---------------------------------------------------------------------------
000163EA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163EA                            ; ---------------------------------------------------------------------------
000163EA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000163EE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000163F2 07                         byte_15BA0:	dc.b 7
000163F3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000163F8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000163FD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016402 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016407 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001640C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016411 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016416 07                         byte_15BC4:	dc.b 7
00016417 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001641C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016421 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016426 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001642B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016430 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016435 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001643A 04                         byte_15BE8:	dc.b 4
0001643B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016440 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016445 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001644A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001644F 04                         byte_15BFD:	dc.b 4
00016450 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016455 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001645A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001645F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016464                            		even
00016464                            		even
00016464                            
00016464                            ; ===========================================================================
00016464                            ; ---------------------------------------------------------------------------
00016464                            ; Object 6B - stomper (SBZ)
00016464                            ; ---------------------------------------------------------------------------
00016464                            
00016464                            Obj6B:					; XREF: Obj_Index
00016464 7000                       		moveq	#0,d0
00016466 1028 0024                  		move.b	$24(a0),d0
0001646A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001646E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016472                            ; ===========================================================================
00016472 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016474 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016476                            
00016476 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001647A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001647E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016482 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016486 8040 0005                  		dc.b  $80, $40,	  0,   5
0001648A                            ; ===========================================================================
0001648A                            
0001648A                            Obj6B_Main:				; XREF: Obj6B_Index
0001648A 5428 0024                  		addq.b	#2,$24(a0)
0001648E 7000                       		moveq	#0,d0
00016490 1028 0028                  		move.b	$28(a0),d0
00016494 E448                       		lsr.w	#2,d0
00016496 0240 001C                  		andi.w	#$1C,d0
0001649A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001649E 115B 0019                  		move.b	(a3)+,$19(a0)
000164A2 115B 0016                  		move.b	(a3)+,$16(a0)
000164A6 E448                       		lsr.w	#2,d0
000164A8 1140 001A                  		move.b	d0,$1A(a0)
000164AC 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000164B4 317C 22C0 0002             		move.w	#$22C0,2(a0)
000164BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000164C0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000164C2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000164C8 6700                       		beq.s	Obj6B_SBZ3
000164CA                            
000164CA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000164CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164CE 7000                       		moveq	#0,d0
000164D0 1028 0023                  		move.b	$23(a0),d0
000164D4 6700                       		beq.s	Obj6B_Delete
000164D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164DC                            
000164DC                            Obj6B_Delete:
000164DC 4EF9 0000 DDAE             		jmp	DeleteObject
000164E2                            ; ===========================================================================
000164E2                            
000164E2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000164E2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000164E8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000164EE 6600                       		bne.s	Obj6B_SBZ12
000164F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164F4 7000                       		moveq	#0,d0
000164F6 1028 0023                  		move.b	$23(a0),d0
000164FA 6700                       		beq.s	Obj6B_SBZ12
000164FC 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016502 6700                       		beq.s	Obj6B_SBZ12
00016504 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016508 60C0                       		bra.s	Obj6B_ChkGone
0001650A                            ; ===========================================================================
0001650A                            
0001650A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001650A 0028 0004 0001             		ori.b	#4,1(a0)
00016510 117C 0004 0018             		move.b	#4,$18(a0)
00016516 3168 0008 0034             		move.w	8(a0),$34(a0)
0001651C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016522 7000                       		moveq	#0,d0
00016524 101B                       		move.b	(a3)+,d0
00016526 3140 003C                  		move.w	d0,$3C(a0)
0001652A 7000                       		moveq	#0,d0
0001652C 1028 0028                  		move.b	$28(a0),d0
00016530 6A00                       		bpl.s	Obj6B_Action
00016532 0200 000F                  		andi.b	#$F,d0
00016536 1140 003E                  		move.b	d0,$3E(a0)
0001653A 1153 0028                  		move.b	(a3),$28(a0)
0001653E 0C13 0005                  		cmpi.b	#5,(a3)
00016542 6600                       		bne.s	Obj6B_ChkGone2
00016544 08E8 0004 0001             		bset	#4,1(a0)
0001654A                            
0001654A                            Obj6B_ChkGone2:
0001654A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001654E 7000                       		moveq	#0,d0
00016550 1028 0023                  		move.b	$23(a0),d0
00016554 6700                       		beq.s	Obj6B_Action
00016556 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001655C                            
0001655C                            Obj6B_Action:				; XREF: Obj6B_Index
0001655C 3F28 0008                  		move.w	8(a0),-(sp)
00016560 7000                       		moveq	#0,d0
00016562 1028 0028                  		move.b	$28(a0),d0
00016566 0240 000F                  		andi.w	#$F,d0
0001656A D040                       		add.w	d0,d0
0001656C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016570 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016574 381F                       		move.w	(sp)+,d4
00016576 4A28 0001                  		tst.b	1(a0)
0001657A 6A00                       		bpl.s	Obj6B_ChkDel
0001657C 7200                       		moveq	#0,d1
0001657E 1228 0019                  		move.b	$19(a0),d1
00016582 0641 000B                  		addi.w	#$B,d1
00016586 7400                       		moveq	#0,d2
00016588 1428 0016                  		move.b	$16(a0),d2
0001658C 3602                       		move.w	d2,d3
0001658E 5243                       		addq.w	#1,d3
00016590 6100 9BB0                  		bsr.w	SolidObject
00016594                            
00016594                            Obj6B_ChkDel:
00016594 3028 0034                  		move.w	$34(a0),d0
00016598 0240 FF80                  		andi.w	#$FF80,d0
0001659C 3238 F700                  		move.w	($FFFFF700).w,d1
000165A0 0441 0080                  		subi.w	#$80,d1
000165A4 0241 FF80                  		andi.w	#$FF80,d1
000165A8 9041                       		sub.w	d1,d0
000165AA 0C40 0280                  		cmpi.w	#$280,d0
000165AE 6200                       		bhi.s	loc_15D64
000165B0 4EF9 0000 DD72             		jmp	DisplaySprite
000165B6                            ; ===========================================================================
000165B6                            
000165B6                            loc_15D64:
000165B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000165BC 6600                       		bne.s	Obj6B_Delete2
000165BE 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165C6 7000                       		moveq	#0,d0
000165C8 1028 0023                  		move.b	$23(a0),d0
000165CC 6700                       		beq.s	Obj6B_Delete2
000165CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165D4                            
000165D4                            Obj6B_Delete2:
000165D4 4EF9 0000 DDAE             		jmp	DeleteObject
000165DA                            ; ===========================================================================
000165DA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000165DE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000165E2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000165E6                            ; ===========================================================================
000165E6                            
000165E6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000165E6 4E75                       		rts	
000165E8                            ; ===========================================================================
000165E8                            
000165E8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000165E8 4A28 0038                  		tst.b	$38(a0)
000165EC 6600                       		bne.s	loc_15DB4
000165EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165F2 7000                       		moveq	#0,d0
000165F4 1028 003E                  		move.b	$3E(a0),d0
000165F8 0832 0000 0000             		btst	#0,(a2,d0.w)
000165FE 6700                       		beq.s	loc_15DC2
00016600 117C 0001 0038             		move.b	#1,$38(a0)
00016606                            
00016606                            loc_15DB4:
00016606 3028 003C                  		move.w	$3C(a0),d0
0001660A B068 003A                  		cmp.w	$3A(a0),d0
0001660E 6700                       		beq.s	loc_15DE0
00016610 5468 003A                  		addq.w	#2,$3A(a0)
00016614                            
00016614                            loc_15DC2:
00016614 3028 003A                  		move.w	$3A(a0),d0
00016618 0828 0000 0022             		btst	#0,$22(a0)
0001661E 6700                       		beq.s	loc_15DD4
00016620 4440                       		neg.w	d0
00016622 0640 0080                  		addi.w	#$80,d0
00016626                            
00016626                            loc_15DD4:
00016626 3228 0034                  		move.w	$34(a0),d1
0001662A 9240                       		sub.w	d0,d1
0001662C 3141 0008                  		move.w	d1,8(a0)
00016630 4E75                       		rts	
00016632                            ; ===========================================================================
00016632                            
00016632                            loc_15DE0:
00016632 5228 0028                  		addq.b	#1,$28(a0)
00016636 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001663C 4228 0038                  		clr.b	$38(a0)
00016640 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016644 7000                       		moveq	#0,d0
00016646 1028 0023                  		move.b	$23(a0),d0
0001664A 67C8                       		beq.s	loc_15DC2
0001664C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016652 60C0                       		bra.s	loc_15DC2
00016654                            ; ===========================================================================
00016654                            
00016654                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016654 4A28 0038                  		tst.b	$38(a0)
00016658 6600                       		bne.s	loc_15E14
0001665A 5368 0036                  		subq.w	#1,$36(a0)
0001665E 6600                       		bne.s	loc_15E1E
00016660 117C 0001 0038             		move.b	#1,$38(a0)
00016666                            
00016666                            loc_15E14:
00016666 4A68 003A                  		tst.w	$3A(a0)
0001666A 6700                       		beq.s	loc_15E3C
0001666C 5568 003A                  		subq.w	#2,$3A(a0)
00016670                            
00016670                            loc_15E1E:
00016670 3028 003A                  		move.w	$3A(a0),d0
00016674 0828 0000 0022             		btst	#0,$22(a0)
0001667A 6700                       		beq.s	loc_15E30
0001667C 4440                       		neg.w	d0
0001667E 0640 0080                  		addi.w	#$80,d0
00016682                            
00016682                            loc_15E30:
00016682 3228 0034                  		move.w	$34(a0),d1
00016686 9240                       		sub.w	d0,d1
00016688 3141 0008                  		move.w	d1,8(a0)
0001668C 4E75                       		rts	
0001668E                            ; ===========================================================================
0001668E                            
0001668E                            loc_15E3C:
0001668E 5328 0028                  		subq.b	#1,$28(a0)
00016692 4228 0038                  		clr.b	$38(a0)
00016696 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001669A 7000                       		moveq	#0,d0
0001669C 1028 0023                  		move.b	$23(a0),d0
000166A0 67CE                       		beq.s	loc_15E1E
000166A2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000166A8 60C6                       		bra.s	loc_15E1E
000166AA                            ; ===========================================================================
000166AA                            
000166AA                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000166AA 4A28 0038                  		tst.b	$38(a0)
000166AE 6600                       		bne.s	loc_15E7C
000166B0 4A68 003A                  		tst.w	$3A(a0)
000166B4 6700                       		beq.s	loc_15E6A
000166B6 5368 003A                  		subq.w	#1,$3A(a0)
000166BA 6000                       		bra.s	loc_15E8E
000166BC                            ; ===========================================================================
000166BC                            
000166BC                            loc_15E6A:
000166BC 5368 0036                  		subq.w	#1,$36(a0)
000166C0 6A00                       		bpl.s	loc_15E8E
000166C2 317C 003C 0036             		move.w	#$3C,$36(a0)
000166C8 117C 0001 0038             		move.b	#1,$38(a0)
000166CE                            
000166CE                            loc_15E7C:
000166CE 5068 003A                  		addq.w	#8,$3A(a0)
000166D2 3028 003A                  		move.w	$3A(a0),d0
000166D6 B068 003C                  		cmp.w	$3C(a0),d0
000166DA 6600                       		bne.s	loc_15E8E
000166DC 4228 0038                  		clr.b	$38(a0)
000166E0                            
000166E0                            loc_15E8E:
000166E0 3028 003A                  		move.w	$3A(a0),d0
000166E4 0828 0000 0022             		btst	#0,$22(a0)
000166EA 6700                       		beq.s	loc_15EA0
000166EC 4440                       		neg.w	d0
000166EE 0640 0038                  		addi.w	#$38,d0
000166F2                            
000166F2                            loc_15EA0:
000166F2 3228 0030                  		move.w	$30(a0),d1
000166F6 D240                       		add.w	d0,d1
000166F8 3141 000C                  		move.w	d1,$C(a0)
000166FC 4E75                       		rts	
000166FE                            ; ===========================================================================
000166FE                            
000166FE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000166FE 4A28 0038                  		tst.b	$38(a0)
00016702 6600                       		bne.s	loc_15ED0
00016704 4A68 003A                  		tst.w	$3A(a0)
00016708 6700                       		beq.s	loc_15EBE
0001670A 5168 003A                  		subq.w	#8,$3A(a0)
0001670E 6000                       		bra.s	loc_15EF0
00016710                            ; ===========================================================================
00016710                            
00016710                            loc_15EBE:
00016710 5368 0036                  		subq.w	#1,$36(a0)
00016714 6A00                       		bpl.s	loc_15EF0
00016716 317C 003C 0036             		move.w	#$3C,$36(a0)
0001671C 117C 0001 0038             		move.b	#1,$38(a0)
00016722                            
00016722                            loc_15ED0:
00016722 3028 003A                  		move.w	$3A(a0),d0
00016726 B068 003C                  		cmp.w	$3C(a0),d0
0001672A 6700                       		beq.s	loc_15EE0
0001672C 5068 003A                  		addq.w	#8,$3A(a0)
00016730 6000                       		bra.s	loc_15EF0
00016732                            ; ===========================================================================
00016732                            
00016732                            loc_15EE0:
00016732 5368 0036                  		subq.w	#1,$36(a0)
00016736 6A00                       		bpl.s	loc_15EF0
00016738 317C 003C 0036             		move.w	#$3C,$36(a0)
0001673E 4228 0038                  		clr.b	$38(a0)
00016742                            
00016742                            loc_15EF0:
00016742 3028 003A                  		move.w	$3A(a0),d0
00016746 0828 0000 0022             		btst	#0,$22(a0)
0001674C 6700                       		beq.s	loc_15F02
0001674E 4440                       		neg.w	d0
00016750 0640 0038                  		addi.w	#$38,d0
00016754                            
00016754                            loc_15F02:
00016754 3228 0030                  		move.w	$30(a0),d1
00016758 D240                       		add.w	d0,d1
0001675A 3141 000C                  		move.w	d1,$C(a0)
0001675E 4E75                       		rts	
00016760                            ; ===========================================================================
00016760                            
00016760                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016760 4A28 0038                  		tst.b	$38(a0)
00016764 6600                       		bne.s	loc_15F3E
00016766 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001676A 7000                       		moveq	#0,d0
0001676C 1028 003E                  		move.b	$3E(a0),d0
00016770 0832 0000 0000             		btst	#0,(a2,d0.w)
00016776 6700                       		beq.s	locret_15F5C
00016778 117C 0001 0038             		move.b	#1,$38(a0)
0001677E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016782 7000                       		moveq	#0,d0
00016784 1028 0023                  		move.b	$23(a0),d0
00016788 6700                       		beq.s	loc_15F3E
0001678A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016790                            
00016790                            loc_15F3E:
00016790 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016798 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000167A0 3168 0008 0034             		move.w	8(a0),$34(a0)
000167A6 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000167AC 6700                       		beq.s	loc_15F5E
000167AE                            
000167AE                            locret_15F5C:
000167AE 4E75                       		rts	
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            loc_15F5E:
000167B0 4228 0028                  		clr.b	$28(a0)
000167B4 4228 0038                  		clr.b	$38(a0)
000167B8 4E75                       		rts	
000167BA                            ; ===========================================================================
000167BA                            ; ---------------------------------------------------------------------------
000167BA                            ; Sprite mappings - stomper and	platforms (SBZ)
000167BA                            ; ---------------------------------------------------------------------------
000167BA                            Map_obj6B:
000167BA                            	include "_maps\obj6B.asm"
000167BA                            ; ---------------------------------------------------------------------------
000167BA                            ; Sprite mappings - stomper and	platforms (SBZ)
000167BA                            ; ---------------------------------------------------------------------------
000167BA 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000167BE 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000167C2 0000                       		dc.w byte_15FB0-Map_obj6B
000167C4 04                         byte_15F72:	dc.b 4
000167C5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000167CA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000167CF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000167D4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000167D9 08                         byte_15F87:	dc.b 8
000167DA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000167DF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000167E4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000167E9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000167EE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000167F3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000167F8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000167FD 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016802 0E                         byte_15FB0:	dc.b $E
00016803 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016808 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001680D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016812 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016817 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001681C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016821 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016826 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001682B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016830 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016835 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001683A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001683F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016844 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001684A 00                         		even
0001684A 00                         		even
0001684A                            
0001684A                            ; ===========================================================================
0001684A                            ; ---------------------------------------------------------------------------
0001684A                            ; Object 6C - vanishing	platforms (SBZ)
0001684A                            ; ---------------------------------------------------------------------------
0001684A                            
0001684A                            Obj6C:					; XREF: Obj_Index
0001684A 7000                       		moveq	#0,d0
0001684C 1028 0024                  		move.b	$24(a0),d0
00016850 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016854 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016858                            ; ===========================================================================
00016858 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001685A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001685C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001685E 0000                       		dc.w loc_16068-Obj6C_Index
00016860                            ; ===========================================================================
00016860                            
00016860                            Obj6C_Main:				; XREF: Obj6C_Index
00016860 5C28 0024                  		addq.b	#6,$24(a0)
00016864 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001686C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016872 0028 0004 0001             		ori.b	#4,1(a0)
00016878 117C 0010 0019             		move.b	#$10,$19(a0)
0001687E 117C 0004 0018             		move.b	#4,$18(a0)
00016884 7000                       		moveq	#0,d0
00016886 1028 0028                  		move.b	$28(a0),d0	; get object type
0001688A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001688E 5240                       		addq.w	#1,d0		; add 1
00016890 EF48                       		lsl.w	#7,d0		; multiply by $80
00016892 3200                       		move.w	d0,d1
00016894 5340                       		subq.w	#1,d0
00016896 3140 0030                  		move.w	d0,$30(a0)
0001689A 3140 0032                  		move.w	d0,$32(a0)
0001689E 7000                       		moveq	#0,d0
000168A0 1028 0028                  		move.b	$28(a0),d0	; get object type
000168A4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000168A8 0641 0080                  		addi.w	#$80,d1
000168AC C0C1                       		mulu.w	d1,d0
000168AE E088                       		lsr.l	#8,d0
000168B0 3140 0036                  		move.w	d0,$36(a0)
000168B4 5341                       		subq.w	#1,d1
000168B6 3141 0038                  		move.w	d1,$38(a0)
000168BA                            
000168BA                            loc_16068:				; XREF: Obj6C_Index
000168BA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000168BE 9068 0036                  		sub.w	$36(a0),d0
000168C2 C068 0038                  		and.w	$38(a0),d0
000168C6 6600                       		bne.s	Obj6C_Animate
000168C8 5928 0024                  		subq.b	#4,$24(a0)
000168CC 6000                       		bra.s	Obj6C_Vanish
000168CE                            ; ===========================================================================
000168CE                            
000168CE                            Obj6C_Animate:
000168CE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000168D4 4EB9 0000 AE32             		jsr	AnimateSprite
000168DA 6000 953E                  		bra.w	MarkObjGone
000168DE                            ; ===========================================================================
000168DE                            
000168DE                            Obj6C_Vanish:				; XREF: Obj6C_Index
000168DE 5368 0030                  		subq.w	#1,$30(a0)
000168E2 6A00                       		bpl.s	loc_160AA
000168E4 317C 007F 0030             		move.w	#127,$30(a0)
000168EA 4A28 001C                  		tst.b	$1C(a0)
000168EE 6700                       		beq.s	loc_160A4
000168F0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000168F6                            
000168F6                            loc_160A4:
000168F6 0868 0000 001C             		bchg	#0,$1C(a0)
000168FC                            
000168FC                            loc_160AA:
000168FC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016902 4EB9 0000 AE32             		jsr	AnimateSprite
00016908 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001690E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016910 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016916 6600                       		bne.s	loc_160D6
00016918 7200                       		moveq	#0,d1
0001691A 1228 0019                  		move.b	$19(a0),d1
0001691E 4EB9 0000 79FC             		jsr	(PlatformObject).l
00016924 6000 94F4                  		bra.w	MarkObjGone
00016928                            ; ===========================================================================
00016928                            
00016928                            loc_160D6:
00016928 7200                       		moveq	#0,d1
0001692A 1228 0019                  		move.b	$19(a0),d1
0001692E 4EB9 0000 7B70             		jsr	(ExitPlatform).l
00016934 3428 0008                  		move.w	8(a0),d2
00016938 4EB9 0000 80DA             		jsr	(MvSonicOnPtfm2).l
0001693E 6000 94DA                  		bra.w	MarkObjGone
00016942                            ; ===========================================================================
00016942                            
00016942                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016942 0828 0003 0022             		btst	#3,$22(a0)
00016948 6700                       		beq.s	Obj6C_Display
0001694A 43F8 D000                  		lea	($FFFFD000).w,a1
0001694E 08A9 0003 0022             		bclr	#3,$22(a1)
00016954 08A8 0003 0022             		bclr	#3,$22(a0)
0001695A 117C 0002 0024             		move.b	#2,$24(a0)
00016960 4228 0025                  		clr.b	$25(a0)
00016964                            
00016964                            Obj6C_Display:
00016964 6000 94B4                  		bra.w	MarkObjGone
00016968                            ; ===========================================================================
00016968                            Ani_obj6C:
00016968                            	include "_anim\obj6C.asm"
00016968                            ; ---------------------------------------------------------------------------
00016968                            ; Animation script - vanishing platforms (SBZ)
00016968                            ; ---------------------------------------------------------------------------
00016968 0000                       		dc.w byte_1611A-Ani_obj6C
0001696A 0000                       		dc.w byte_16122-Ani_obj6C
0001696C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016974 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001697C                            		even
0001697C                            		even
0001697C                            
0001697C                            ; ---------------------------------------------------------------------------
0001697C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001697C                            ; ---------------------------------------------------------------------------
0001697C                            Map_obj6C:
0001697C                            	include "_maps\obj6C.asm"
0001697C                            ; ---------------------------------------------------------------------------
0001697C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001697C                            ; ---------------------------------------------------------------------------
0001697C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016980 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016984 01                         byte_16132:	dc.b 1
00016985 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001698A 01                         byte_16138:	dc.b 1
0001698B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016990 01                         byte_1613E:	dc.b 1
00016991 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016996 00                         byte_16144:	dc.b 0
00016998 00                         		even
00016998 00                         		even
00016998                            
00016998                            ; ===========================================================================
00016998                            ; ---------------------------------------------------------------------------
00016998                            ; Object 6E - electrocution orbs (SBZ)
00016998                            ; ---------------------------------------------------------------------------
00016998                            
00016998                            Obj6E:					; XREF: Obj_Index
00016998 7000                       		moveq	#0,d0
0001699A 1028 0024                  		move.b	$24(a0),d0
0001699E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000169A2 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000169A6                            ; ===========================================================================
000169A6 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000169A8 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000169AA                            ; ===========================================================================
000169AA                            
000169AA                            Obj6E_Main:				; XREF: Obj6E_Index
000169AA 5428 0024                  		addq.b	#2,$24(a0)
000169AE 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000169B6 317C 047E 0002             		move.w	#$47E,2(a0)
000169BC 0028 0004 0001             		ori.b	#4,1(a0)
000169C2 117C 0028 0019             		move.b	#$28,$19(a0)
000169C8 7000                       		moveq	#0,d0
000169CA 1028 0028                  		move.b	$28(a0),d0	; read object type
000169CE E948                       		lsl.w	#4,d0		; multiply by $10
000169D0 5340                       		subq.w	#1,d0
000169D2 3140 0034                  		move.w	d0,$34(a0)
000169D6                            
000169D6                            Obj6E_Shock:				; XREF: Obj6E_Index
000169D6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169DA C068 0034                  		and.w	$34(a0),d0
000169DE 6600                       		bne.s	Obj6E_Animate
000169E0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000169E6 4A28 0001                  		tst.b	1(a0)
000169EA 6A00                       		bpl.s	Obj6E_Animate
000169EC 303C 00B1                  		move.w	#$B1,d0
000169F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
000169F6                            
000169F6                            Obj6E_Animate:
000169F6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000169FC 4EB9 0000 AE32             		jsr	AnimateSprite
00016A02 117C 0000 0020             		move.b	#0,$20(a0)
00016A08 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016A0E 6600                       		bne.s	Obj6E_Display	; if not, branch
00016A10 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016A16                            
00016A16                            Obj6E_Display:
00016A16 6000 9402                  		bra.w	MarkObjGone
00016A1A                            ; ===========================================================================
00016A1A                            Ani_obj6E:
00016A1A                            	include "_anim\obj6E.asm"
00016A1A                            ; ---------------------------------------------------------------------------
00016A1A                            ; Animation script - electrocution orbs (SBZ)
00016A1A                            ; ---------------------------------------------------------------------------
00016A1A 0000                       		dc.w byte_161CC-Ani_obj6E
00016A1C 0000                       		dc.w byte_161D0-Ani_obj6E
00016A1E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016A22 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016A32                            		even
00016A32                            		even
00016A32                            
00016A32                            ; ---------------------------------------------------------------------------
00016A32                            ; Sprite mappings - electrocution orbs (SBZ)
00016A32                            ; ---------------------------------------------------------------------------
00016A32                            Map_obj6E:
00016A32                            	include "_maps\obj6E.asm"
00016A32                            Map_26ed:
00016A32 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016A34 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016A36 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016A38 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016A3A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016A3C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016A3E 01                         Map_26ed_C: 	dc.b $1
00016A3F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016A44 02                         Map_26ed_12: 	dc.b $2
00016A45 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A4A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A4F 06                         Map_26ed_1D: 	dc.b $6
00016A50 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A55 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A5A F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A5F F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A64 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A69 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A6E 08                         Map_26ed_3C: 	dc.b $8
00016A6F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A74 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A79 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A7E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A83 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A88 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A8D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A92 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A97 06                         Map_26ed_65: 	dc.b $6
00016A98 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A9D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AA2 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016AA7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AAC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016AB1 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AB6 04                         Map_26ed_84: 	dc.b $4
00016AB7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016ABC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AC1 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AC6 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016ACC 00                         	even
00016ACC 00                         	even
00016ACC                            
00016ACC                            ; ===========================================================================
00016ACC                            ; ---------------------------------------------------------------------------
00016ACC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016ACC                            ; ---------------------------------------------------------------------------
00016ACC                            
00016ACC                            Obj6F:					; XREF: Obj_Index
00016ACC 7000                       		moveq	#0,d0
00016ACE 1028 0024                  		move.b	$24(a0),d0
00016AD2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016AD6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016ADA 3028 0030                  		move.w	$30(a0),d0
00016ADE 0240 FF80                  		andi.w	#$FF80,d0
00016AE2 3238 F700                  		move.w	($FFFFF700).w,d1
00016AE6 0441 0080                  		subi.w	#$80,d1
00016AEA 0241 FF80                  		andi.w	#$FF80,d1
00016AEE 9041                       		sub.w	d1,d0
00016AF0 0C40 0280                  		cmpi.w	#$280,d0
00016AF4 6200                       		bhi.s	loc_1629A
00016AF6                            
00016AF6                            Obj6F_Display:
00016AF6 4EF9 0000 DD72             		jmp	DisplaySprite
00016AFC                            ; ===========================================================================
00016AFC                            
00016AFC                            loc_1629A:
00016AFC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016B02 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016B04 0C40 FF80                  		cmpi.w	#-$80,d0
00016B08 64EC                       		bcc.s	Obj6F_Display
00016B0A                            
00016B0A                            Obj6F_Act1or2:
00016B0A 1028 002F                  		move.b	$2F(a0),d0
00016B0E 6A00                       		bpl.s	Obj6F_Delete
00016B10 0240 007F                  		andi.w	#$7F,d0
00016B14 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B18 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016B1E                            
00016B1E                            Obj6F_Delete:
00016B1E 4EF9 0000 DDAE             		jmp	DeleteObject
00016B24                            ; ===========================================================================
00016B24 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016B26 0000                       		dc.w loc_163D8-Obj6F_Index
00016B28                            ; ===========================================================================
00016B28                            
00016B28                            Obj6F_Main:				; XREF: Obj6F_Index
00016B28 1028 0028                  		move.b	$28(a0),d0
00016B2C 6B00 0000                  		bmi.w	loc_16380
00016B30 5428 0024                  		addq.b	#2,$24(a0)
00016B34 217C 0001 618C 0004        		move.l	#Map_obj69a,4(a0)
00016B3C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016B42 117C 0010 0019             		move.b	#$10,$19(a0)
00016B48 0028 0004 0001             		ori.b	#4,1(a0)
00016B4E 117C 0004 0018             		move.b	#4,$18(a0)
00016B54 7000                       		moveq	#0,d0
00016B56 1028 0028                  		move.b	$28(a0),d0
00016B5A 3200                       		move.w	d0,d1
00016B5C E648                       		lsr.w	#3,d0
00016B5E 0240 001E                  		andi.w	#$1E,d0
00016B62 45FA 0000                  		lea	off_164A6(pc),a2
00016B66 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B6A 315A 0038                  		move.w	(a2)+,$38(a0)
00016B6E 315A 0030                  		move.w	(a2)+,$30(a0)
00016B72 214A 003C                  		move.l	a2,$3C(a0)
00016B76 0241 000F                  		andi.w	#$F,d1
00016B7A E549                       		lsl.w	#2,d1
00016B7C 1141 0038                  		move.b	d1,$38(a0)
00016B80 117C 0004 003A             		move.b	#4,$3A(a0)
00016B86 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016B8A 6700                       		beq.s	loc_16356
00016B8C 117C 0001 003B             		move.b	#1,$3B(a0)
00016B92 4428 003A                  		neg.b	$3A(a0)
00016B96 7200                       		moveq	#0,d1
00016B98 1228 0038                  		move.b	$38(a0),d1
00016B9C D228 003A                  		add.b	$3A(a0),d1
00016BA0 B228 0039                  		cmp.b	$39(a0),d1
00016BA4 6500                       		bcs.s	loc_16352
00016BA6 1001                       		move.b	d1,d0
00016BA8 7200                       		moveq	#0,d1
00016BAA 4A00                       		tst.b	d0
00016BAC 6A00                       		bpl.s	loc_16352
00016BAE 1228 0039                  		move.b	$39(a0),d1
00016BB2 5901                       		subq.b	#4,d1
00016BB4                            
00016BB4                            loc_16352:
00016BB4 1141 0038                  		move.b	d1,$38(a0)
00016BB8                            
00016BB8                            loc_16356:
00016BB8 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016BBE 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016BC4 4A41                       		tst.w	d1
00016BC6 6600                       		bne.s	loc_1636C
00016BC8 117C 0001 001C             		move.b	#1,$1C(a0)
00016BCE                            
00016BCE                            loc_1636C:
00016BCE 0C41 0008                  		cmpi.w	#8,d1
00016BD2 6600                       		bne.s	loc_16378
00016BD4 117C 0000 001C             		move.b	#0,$1C(a0)
00016BDA                            
00016BDA                            loc_16378:
00016BDA 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016BDE 6000 0000                  		bra.w	loc_163D8
00016BE2                            ; ===========================================================================
00016BE2                            
00016BE2                            loc_16380:				; XREF: Obj6F_Main
00016BE2 1140 002F                  		move.b	d0,$2F(a0)
00016BE6 0240 007F                  		andi.w	#$7F,d0
00016BEA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BEE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016BF4 6700                       		beq.s	loc_1639A
00016BF6 4EF9 0000 DDAE             		jmp	DeleteObject
00016BFC                            ; ===========================================================================
00016BFC                            
00016BFC                            loc_1639A:
00016BFC D040                       		add.w	d0,d0
00016BFE 0240 001E                  		andi.w	#$1E,d0
00016C02 0640 0080                  		addi.w	#$80,d0
00016C06 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016C0C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C10 321A                       		move.w	(a2)+,d1
00016C12 2248                       		movea.l	a0,a1
00016C14 6000                       		bra.s	Obj6F_LoadPform
00016C16                            ; ===========================================================================
00016C16                            
00016C16                            Obj6F_Loop:
00016C16 4EB9 0000 E1F8             		jsr	SingleObjLoad
00016C1C 6600                       		bne.s	loc_163D0
00016C1E                            
00016C1E                            Obj6F_LoadPform:			; XREF: loc_1639A
00016C1E 12BC 006F                  		move.b	#$6F,0(a1)
00016C22 335A 0008                  		move.w	(a2)+,8(a1)
00016C26 335A 000C                  		move.w	(a2)+,$C(a1)
00016C2A 301A                       		move.w	(a2)+,d0
00016C2C 1340 0028                  		move.b	d0,$28(a1)
00016C30                            
00016C30                            loc_163D0:
00016C30 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016C34                            
00016C34 588F                       		addq.l	#4,sp
00016C36 4E75                       		rts	
00016C38                            ; ===========================================================================
00016C38                            
00016C38                            loc_163D8:				; XREF: Obj6F_Index
00016C38 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016C3E 4EB9 0000 AE32             		jsr	AnimateSprite
00016C44 4A28 001A                  		tst.b	$1A(a0)
00016C48 6600                       		bne.s	loc_16404
00016C4A 3F28 0008                  		move.w	8(a0),-(sp)
00016C4E 6100 0000                  		bsr.w	loc_16424
00016C52 323C 001B                  		move.w	#$1B,d1
00016C56 343C 0007                  		move.w	#7,d2
00016C5A 3602                       		move.w	d2,d3
00016C5C 5243                       		addq.w	#1,d3
00016C5E 381F                       		move.w	(sp)+,d4
00016C60 6000 94E0                  		bra.w	SolidObject
00016C64                            ; ===========================================================================
00016C64                            
00016C64                            loc_16404:
00016C64 0828 0003 0022             		btst	#3,$22(a0)
00016C6A 6700                       		beq.s	loc_16420
00016C6C 43F8 D000                  		lea	($FFFFD000).w,a1
00016C70 08A9 0003 0022             		bclr	#3,$22(a1)
00016C76 08A8 0003 0022             		bclr	#3,$22(a0)
00016C7C 4228 0025                  		clr.b	$25(a0)
00016C80                            
00016C80                            loc_16420:
00016C80 6000 0002                  		bra.w	*+4
00016C84                            
00016C84                            loc_16424:
00016C84 3028 0008                  		move.w	8(a0),d0
00016C88 B068 0034                  		cmp.w	$34(a0),d0
00016C8C 6600                       		bne.s	loc_16484
00016C8E 3028 000C                  		move.w	$C(a0),d0
00016C92 B068 0036                  		cmp.w	$36(a0),d0
00016C96 6600                       		bne.s	loc_16484
00016C98 7200                       		moveq	#0,d1
00016C9A 1228 0038                  		move.b	$38(a0),d1
00016C9E D228 003A                  		add.b	$3A(a0),d1
00016CA2 B228 0039                  		cmp.b	$39(a0),d1
00016CA6 6500                       		bcs.s	loc_16456
00016CA8 1001                       		move.b	d1,d0
00016CAA 7200                       		moveq	#0,d1
00016CAC 4A00                       		tst.b	d0
00016CAE 6A00                       		bpl.s	loc_16456
00016CB0 1228 0039                  		move.b	$39(a0),d1
00016CB4 5901                       		subq.b	#4,d1
00016CB6                            
00016CB6                            loc_16456:
00016CB6 1141 0038                  		move.b	d1,$38(a0)
00016CBA 2268 003C                  		movea.l	$3C(a0),a1
00016CBE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016CC4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016CCA 4A41                       		tst.w	d1
00016CCC 6600                       		bne.s	loc_16474
00016CCE 117C 0001 001C             		move.b	#1,$1C(a0)
00016CD4                            
00016CD4                            loc_16474:
00016CD4 0C41 0008                  		cmpi.w	#8,d1
00016CD8 6600                       		bne.s	loc_16480
00016CDA 117C 0000 001C             		move.b	#0,$1C(a0)
00016CE0                            
00016CE0                            loc_16480:
00016CE0 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016CE4                            
00016CE4                            loc_16484:
00016CE4 4EF9 0000 DD4C             		jmp	SpeedToPos
00016CEA                            ; ===========================================================================
00016CEA                            Ani_obj6F:
00016CEA                            	include "_anim\obj6F.asm"
00016CEA                            ; ---------------------------------------------------------------------------
00016CEA                            ; Animation script - platform on conveyor belt (SBZ)
00016CEA                            ; ---------------------------------------------------------------------------
00016CEA 0000                       		dc.w byte_1648E-Ani_obj6F
00016CEC 0000                       		dc.w byte_164A2-Ani_obj6F
00016CEE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016CFB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016D02 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016D06 00                         		even
00016D06 00                         		even
00016D06                            
00016D06 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016D0C 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016D12 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016D26 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016D3A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016D4E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016D62 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016D76 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016D8A                            ; ===========================================================================
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A                            ; Object 70 - large girder block (SBZ)
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A                            
00016D8A                            Obj70:					; XREF: Obj_Index
00016D8A 7000                       		moveq	#0,d0
00016D8C 1028 0024                  		move.b	$24(a0),d0
00016D90 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016D94 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016D98                            ; ===========================================================================
00016D98 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016D9A 0000                       		dc.w Obj70_Action-Obj70_Index
00016D9C                            ; ===========================================================================
00016D9C                            
00016D9C                            Obj70_Main:				; XREF: Obj70_Index
00016D9C 5428 0024                  		addq.b	#2,$24(a0)
00016DA0 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016DA8 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016DAE 0028 0004 0001             		ori.b	#4,1(a0)
00016DB4 117C 0004 0018             		move.b	#4,$18(a0)
00016DBA 117C 0060 0019             		move.b	#$60,$19(a0)
00016DC0 117C 0018 0016             		move.b	#$18,$16(a0)
00016DC6 3168 0008 0032             		move.w	8(a0),$32(a0)
00016DCC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016DD2 6100 0000                  		bsr.w	Obj70_Move2
00016DD6                            
00016DD6                            Obj70_Action:				; XREF: Obj70_Index
00016DD6 3F28 0008                  		move.w	8(a0),-(sp)
00016DDA 4A68 003A                  		tst.w	$3A(a0)
00016DDE 6700                       		beq.s	Obj70_Move
00016DE0 5368 003A                  		subq.w	#1,$3A(a0)
00016DE4 6600                       		bne.s	Obj70_Solid
00016DE6                            
00016DE6                            Obj70_Move:
00016DE6 4EB9 0000 DD4C             		jsr	SpeedToPos
00016DEC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016DF0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016DF2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016DF6                            
00016DF6                            Obj70_Solid:
00016DF6 381F                       		move.w	(sp)+,d4
00016DF8 4A28 0001                  		tst.b	1(a0)
00016DFC 6A00                       		bpl.s	Obj70_ChkDel
00016DFE 7200                       		moveq	#0,d1
00016E00 1228 0019                  		move.b	$19(a0),d1
00016E04 0641 000B                  		addi.w	#$B,d1
00016E08 7400                       		moveq	#0,d2
00016E0A 1428 0016                  		move.b	$16(a0),d2
00016E0E 3602                       		move.w	d2,d3
00016E10 5243                       		addq.w	#1,d3
00016E12 6100 932E                  		bsr.w	SolidObject
00016E16                            
00016E16                            Obj70_ChkDel:
00016E16 3028 0032                  		move.w	$32(a0),d0
00016E1A 0240 FF80                  		andi.w	#$FF80,d0
00016E1E 3238 F700                  		move.w	($FFFFF700).w,d1
00016E22 0441 0080                  		subi.w	#$80,d1
00016E26 0241 FF80                  		andi.w	#$FF80,d1
00016E2A 9041                       		sub.w	d1,d0
00016E2C 0C40 0280                  		cmpi.w	#$280,d0
00016E30 6200                       		bhi.s	Obj70_Delete
00016E32 4EF9 0000 DD72             		jmp	DisplaySprite
00016E38                            ; ===========================================================================
00016E38                            
00016E38                            Obj70_Delete:
00016E38 4EF9 0000 DDAE             		jmp	DeleteObject
00016E3E                            ; ===========================================================================
00016E3E                            
00016E3E                            Obj70_Move2:				; XREF: Obj70_Main
00016E3E 1028 0038                  		move.b	$38(a0),d0
00016E42 0240 0018                  		andi.w	#$18,d0
00016E46 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016E4C 43F1 0000                  		lea	(a1,d0.w),a1
00016E50 3159 0010                  		move.w	(a1)+,$10(a0)
00016E54 3159 0012                  		move.w	(a1)+,$12(a0)
00016E58 3159 0034                  		move.w	(a1)+,$34(a0)
00016E5C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016E60 317C 0007 003A             		move.w	#7,$3A(a0)
00016E66 4E75                       		rts	
00016E68                            ; ===========================================================================
00016E68 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016E70 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016E78 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016E80 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016E88                            ; ---------------------------------------------------------------------------
00016E88                            ; Sprite mappings - large girder block (SBZ)
00016E88                            ; ---------------------------------------------------------------------------
00016E88                            Map_obj70:
00016E88                            	include "_maps\obj70.asm"
00016E88                            ; ---------------------------------------------------------------------------
00016E88                            ; Sprite mappings - large girder block (SBZ)
00016E88                            ; ---------------------------------------------------------------------------
00016E88 0000                       		dc.w byte_1662A-Map_obj70
00016E8A 0C                         byte_1662A:	dc.b $C
00016E8B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016E90 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016E95 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016E9A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016E9F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016EA4 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016EA9 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016EAE 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016EB3 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016EB8 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016EBD E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016EC2 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016EC8 00                         		even
00016EC8 00                         		even
00016EC8                            
00016EC8                            ; ===========================================================================
00016EC8                            ; ---------------------------------------------------------------------------
00016EC8                            ; Object 72 - teleporter (SBZ)
00016EC8                            ; ---------------------------------------------------------------------------
00016EC8                            
00016EC8                            Obj72:					; XREF: Obj_Index
00016EC8 7000                       		moveq	#0,d0
00016ECA 1028 0024                  		move.b	$24(a0),d0
00016ECE 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016ED2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016ED6 3028 0008                  		move.w	8(a0),d0
00016EDA 0240 FF80                  		andi.w	#$FF80,d0
00016EDE 3238 F700                  		move.w	($FFFFF700).w,d1
00016EE2 0441 0080                  		subi.w	#$80,d1
00016EE6 0241 FF80                  		andi.w	#$FF80,d1
00016EEA 9041                       		sub.w	d1,d0
00016EEC 0C40 0280                  		cmpi.w	#$280,d0
00016EF0 6200                       		bhi.s	Obj72_Delete
00016EF2 4E75                       		rts	
00016EF4                            ; ===========================================================================
00016EF4                            
00016EF4                            Obj72_Delete:
00016EF4 4EF9 0000 DDAE             		jmp	DeleteObject
00016EFA                            ; ===========================================================================
00016EFA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016EFC 0000                       		dc.w loc_166C8-Obj72_Index
00016EFE 0000                       		dc.w loc_1675E-Obj72_Index
00016F00 0000                       		dc.w loc_16798-Obj72_Index
00016F02                            ; ===========================================================================
00016F02                            
00016F02                            Obj72_Main:				; XREF: Obj72_Index
00016F02 5428 0024                  		addq.b	#2,$24(a0)
00016F06 1028 0028                  		move.b	$28(a0),d0
00016F0A D040                       		add.w	d0,d0
00016F0C 0240 001E                  		andi.w	#$1E,d0
00016F10 45FA 0000                  		lea	Obj72_Data(pc),a2
00016F14 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F18 315A 003A                  		move.w	(a2)+,$3A(a0)
00016F1C 214A 003C                  		move.l	a2,$3C(a0)
00016F20 315A 0036                  		move.w	(a2)+,$36(a0)
00016F24 315A 0038                  		move.w	(a2)+,$38(a0)
00016F28                            
00016F28                            loc_166C8:				; XREF: Obj72_Index
00016F28 43F8 D000                  		lea	($FFFFD000).w,a1
00016F2C 3029 0008                  		move.w	8(a1),d0
00016F30 9068 0008                  		sub.w	8(a0),d0
00016F34 0828 0000 0022             		btst	#0,$22(a0)
00016F3A 6700                       		beq.s	loc_166E0
00016F3C 0640 000F                  		addi.w	#$F,d0
00016F40                            
00016F40                            loc_166E0:
00016F40 0C40 0010                  		cmpi.w	#$10,d0
00016F44 6400                       		bcc.s	locret_1675C
00016F46 3229 000C                  		move.w	$C(a1),d1
00016F4A 9268 000C                  		sub.w	$C(a0),d1
00016F4E 0641 0020                  		addi.w	#$20,d1
00016F52 0C41 0040                  		cmpi.w	#$40,d1
00016F56 6400                       		bcc.s	locret_1675C
00016F58 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016F5C 6600                       		bne.s	locret_1675C
00016F5E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016F64 6600                       		bne.s	loc_1670E
00016F66 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016F6C 6500                       		bcs.s	locret_1675C
00016F6E                            
00016F6E                            loc_1670E:
00016F6E 5428 0024                  		addq.b	#2,$24(a0)
00016F72 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016F78 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016F7E 337C 0800 0014             		move.w	#$800,$14(a1)
00016F84 337C 0000 0010             		move.w	#0,$10(a1)
00016F8A 337C 0000 0012             		move.w	#0,$12(a1)
00016F90 08A8 0005 0022             		bclr	#5,$22(a0)
00016F96 08A9 0005 0022             		bclr	#5,$22(a1)
00016F9C 08E9 0001 0022             		bset	#1,$22(a1)
00016FA2 3368 0008 0008             		move.w	8(a0),8(a1)
00016FA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016FAE 4228 0032                  		clr.b	$32(a0)
00016FB2 303C 00BE                  		move.w	#$BE,d0
00016FB6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016FBC                            
00016FBC                            locret_1675C:
00016FBC 4E75                       		rts	
00016FBE                            ; ===========================================================================
00016FBE                            
00016FBE                            loc_1675E:				; XREF: Obj72_Index
00016FBE 43F8 D000                  		lea	($FFFFD000).w,a1
00016FC2 1028 0032                  		move.b	$32(a0),d0
00016FC6 5428 0032                  		addq.b	#2,$32(a0)
00016FCA 4EB9 0000 2C64             		jsr	(CalcSine).l
00016FD0 EA40                       		asr.w	#5,d0
00016FD2 3428 000C                  		move.w	$C(a0),d2
00016FD6 9440                       		sub.w	d0,d2
00016FD8 3342 000C                  		move.w	d2,$C(a1)
00016FDC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016FE2 6600                       		bne.s	locret_16796
00016FE4 6100 0000                  		bsr.w	sub_1681C
00016FE8 5428 0024                  		addq.b	#2,$24(a0)
00016FEC 303C 00BC                  		move.w	#$BC,d0
00016FF0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016FF6                            
00016FF6                            locret_16796:
00016FF6 4E75                       		rts	
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            loc_16798:				; XREF: Obj72_Index
00016FF8 588F                       		addq.l	#4,sp
00016FFA 43F8 D000                  		lea	($FFFFD000).w,a1
00016FFE 5328 002E                  		subq.b	#1,$2E(a0)
00017002 6A00                       		bpl.s	loc_167DA
00017004 3368 0036 0008             		move.w	$36(a0),8(a1)
0001700A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017010 7200                       		moveq	#0,d1
00017012 1228 003A                  		move.b	$3A(a0),d1
00017016 5801                       		addq.b	#4,d1
00017018 B228 003B                  		cmp.b	$3B(a0),d1
0001701C 6500                       		bcs.s	loc_167C2
0001701E 7200                       		moveq	#0,d1
00017020 6000                       		bra.s	loc_16800
00017022                            ; ===========================================================================
00017022                            
00017022                            loc_167C2:
00017022 1141 003A                  		move.b	d1,$3A(a0)
00017026 2468 003C                  		movea.l	$3C(a0),a2
0001702A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017030 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017036 6000 0000                  		bra.w	sub_1681C
0001703A                            ; ===========================================================================
0001703A                            
0001703A                            loc_167DA:
0001703A 2429 0008                  		move.l	8(a1),d2
0001703E 2629 000C                  		move.l	$C(a1),d3
00017042 3029 0010                  		move.w	$10(a1),d0
00017046 48C0                       		ext.l	d0
00017048 E180                       		asl.l	#8,d0
0001704A D480                       		add.l	d0,d2
0001704C 3029 0012                  		move.w	$12(a1),d0
00017050 48C0                       		ext.l	d0
00017052 E180                       		asl.l	#8,d0
00017054 D680                       		add.l	d0,d3
00017056 2342 0008                  		move.l	d2,8(a1)
0001705A 2343 000C                  		move.l	d3,$C(a1)
0001705E 4E75                       		rts	
00017060                            ; ===========================================================================
00017060                            
00017060                            loc_16800:
00017060 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017066 4228 0024                  		clr.b	$24(a0)
0001706A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001706E 337C 0000 0010             		move.w	#0,$10(a1)
00017074 337C 0200 0012             		move.w	#$200,$12(a1)
0001707A 4E75                       		rts	
0001707C                            
0001707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001707C                            
0001707C                            
0001707C                            sub_1681C:
0001707C 7000                       		moveq	#0,d0
0001707E 343C 1000                  		move.w	#$1000,d2
00017082 3028 0036                  		move.w	$36(a0),d0
00017086 9069 0008                  		sub.w	8(a1),d0
0001708A 6C00                       		bge.s	loc_16830
0001708C 4440                       		neg.w	d0
0001708E 4442                       		neg.w	d2
00017090                            
00017090                            loc_16830:
00017090 7200                       		moveq	#0,d1
00017092 363C 1000                  		move.w	#$1000,d3
00017096 3228 0038                  		move.w	$38(a0),d1
0001709A 9269 000C                  		sub.w	$C(a1),d1
0001709E 6C00                       		bge.s	loc_16844
000170A0 4441                       		neg.w	d1
000170A2 4443                       		neg.w	d3
000170A4                            
000170A4                            loc_16844:
000170A4 B240                       		cmp.w	d0,d1
000170A6 6500                       		bcs.s	loc_1687A
000170A8 7200                       		moveq	#0,d1
000170AA 3228 0038                  		move.w	$38(a0),d1
000170AE 9269 000C                  		sub.w	$C(a1),d1
000170B2 4841                       		swap	d1
000170B4 83C3                       		divs.w	d3,d1
000170B6 7000                       		moveq	#0,d0
000170B8 3028 0036                  		move.w	$36(a0),d0
000170BC 9069 0008                  		sub.w	8(a1),d0
000170C0 6700                       		beq.s	loc_16866
000170C2 4840                       		swap	d0
000170C4 81C1                       		divs.w	d1,d0
000170C6                            
000170C6                            loc_16866:
000170C6 3340 0010                  		move.w	d0,$10(a1)
000170CA 3343 0012                  		move.w	d3,$12(a1)
000170CE 4A41                       		tst.w	d1
000170D0 6A00                       		bpl.s	loc_16874
000170D2 4441                       		neg.w	d1
000170D4                            
000170D4                            loc_16874:
000170D4 3141 002E                  		move.w	d1,$2E(a0)
000170D8 4E75                       		rts	
000170DA                            ; ===========================================================================
000170DA                            
000170DA                            loc_1687A:
000170DA 7000                       		moveq	#0,d0
000170DC 3028 0036                  		move.w	$36(a0),d0
000170E0 9069 0008                  		sub.w	8(a1),d0
000170E4 4840                       		swap	d0
000170E6 81C2                       		divs.w	d2,d0
000170E8 7200                       		moveq	#0,d1
000170EA 3228 0038                  		move.w	$38(a0),d1
000170EE 9269 000C                  		sub.w	$C(a1),d1
000170F2 6700                       		beq.s	loc_16898
000170F4 4841                       		swap	d1
000170F6 83C0                       		divs.w	d0,d1
000170F8                            
000170F8                            loc_16898:
000170F8 3341 0012                  		move.w	d1,$12(a1)
000170FC 3342 0010                  		move.w	d2,$10(a1)
00017100 4A40                       		tst.w	d0
00017102 6A00                       		bpl.s	loc_168A6
00017104 4440                       		neg.w	d0
00017106                            
00017106                            loc_168A6:
00017106 3140 002E                  		move.w	d0,$2E(a0)
0001710A 4E75                       		rts	
0001710C                            ; End of function sub_1681C
0001710C                            
0001710C                            ; ===========================================================================
0001710C 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017112 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017118 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001711C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017122 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017128 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001712E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017134 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001713A 0884 0298 0894             		dc.w $884, $298, $894
00017140 0270 0894 0190             		dc.w $270, $894, $190
00017146 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001714C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017152 1184 0498 1158             		dc.w $1184, $498, $1158
00017158 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001715E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017164 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001716A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017170 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017176 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001717C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017182 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017188 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001718E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017194                            ; ===========================================================================
00017194                            ; ---------------------------------------------------------------------------
00017194                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017194                            ; ---------------------------------------------------------------------------
00017194                            
00017194                            Obj78:					; XREF: Obj_Index
00017194 7000                       		moveq	#0,d0
00017196 1028 0024                  		move.b	$24(a0),d0
0001719A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001719E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000171A2                            ; ===========================================================================
000171A2 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000171A4 0000                       		dc.w Obj78_Action-Obj78_Index
000171A6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000171A8 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000171AA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000171AC 0000                       		dc.w Obj78_Delete-Obj78_Index
000171AE 0000                       		dc.w loc_16CC0-Obj78_Index
000171B0                            ; ===========================================================================
000171B0                            
000171B0                            locret_16950:
000171B0 4E75                       		rts	
000171B2                            ; ===========================================================================
000171B2                            
000171B2                            Obj78_Main:				; XREF: Obj78_Index
000171B2 117C 0007 0016             		move.b	#7,$16(a0)
000171B8 117C 0008 0017             		move.b	#8,$17(a0)
000171BE 4EB9 0000 DD20             		jsr	ObjectFall
000171C4 4EBA E4A6                  		jsr	ObjHitFloor
000171C8 4A41                       		tst.w	d1
000171CA 6AE4                       		bpl.s	locret_16950
000171CC D368 000C                  		add.w	d1,$C(a0)
000171D0 4268 0012                  		clr.w	$12(a0)
000171D4 5428 0024                  		addq.b	#2,$24(a0)
000171D8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000171E0 317C 22B0 0002             		move.w	#$22B0,2(a0)
000171E6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000171EC 6700                       		beq.s	loc_16996
000171EE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000171F4                            
000171F4                            loc_16996:
000171F4 0228 0003 0001             		andi.b	#3,1(a0)
000171FA 0028 0004 0001             		ori.b	#4,1(a0)
00017200 1168 0001 0022             		move.b	1(a0),$22(a0)
00017206 117C 0004 0018             		move.b	#4,$18(a0)
0001720C 117C 0008 0019             		move.b	#8,$19(a0)
00017212 117C 000B 0020             		move.b	#$B,$20(a0)
00017218 3428 0008                  		move.w	8(a0),d2
0001721C 7A0C                       		moveq	#$C,d5
0001721E 0828 0000 0022             		btst	#0,$22(a0)
00017224 6700                       		beq.s	loc_169CA
00017226 4445                       		neg.w	d5
00017228                            
00017228                            loc_169CA:
00017228 1C3C 0004                  		move.b	#4,d6
0001722C 7600                       		moveq	#0,d3
0001722E 7804                       		moveq	#4,d4
00017230 2448                       		movea.l	a0,a2
00017232 7202                       		moveq	#2,d1
00017234                            
00017234                            Obj78_LoadBody:
00017234 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001723A 6600                       		bne.s	Obj78_QuitLoad
0001723C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017240 1346 0024                  		move.b	d6,$24(a1)
00017244 5406                       		addq.b	#2,d6
00017246 2368 0004 0004             		move.l	4(a0),4(a1)
0001724C 3368 0002 0002             		move.w	2(a0),2(a1)
00017252 137C 0005 0018             		move.b	#5,$18(a1)
00017258 137C 0008 0019             		move.b	#8,$19(a1)
0001725E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017264 D445                       		add.w	d5,d2
00017266 3342 0008                  		move.w	d2,8(a1)
0001726A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017270 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017276 1368 0022 0001             		move.b	$22(a0),1(a1)
0001727C 137C 0008 001A             		move.b	#8,$1A(a1)
00017282 234A 003C                  		move.l	a2,$3C(a1)
00017286 1344 003C                  		move.b	d4,$3C(a1)
0001728A 5804                       		addq.b	#4,d4
0001728C 2449                       		movea.l	a1,a2
0001728E                            
0001728E                            Obj78_QuitLoad:
0001728E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017292                            
00017292 117C 0007 002A             		move.b	#7,$2A(a0)
00017298 4228 003C                  		clr.b	$3C(a0)
0001729C                            
0001729C                            Obj78_Action:				; XREF: Obj78_Index
0001729C 4A28 0022                  		tst.b	$22(a0)
000172A0 6B00 0000                  		bmi.w	loc_16C96
000172A4 7000                       		moveq	#0,d0
000172A6 1028 0025                  		move.b	$25(a0),d0
000172AA 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000172AE 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000172B2 1228 002B                  		move.b	$2B(a0),d1
000172B6 6A00                       		bpl.s	Obj78_Display
000172B8 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000172BE 1028 0026                  		move.b	$26(a0),d0
000172C2 0240 007F                  		andi.w	#$7F,d0
000172C6 5828 0026                  		addq.b	#4,$26(a0)
000172CA 1031 0000                  		move.b	(a1,d0.w),d0
000172CE 6A00                       		bpl.s	Obj78_AniHead
000172D0 08A8 0007 002B             		bclr	#7,$2B(a0)
000172D6 6000                       		bra.s	Obj78_Display
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            Obj78_AniHead:
000172D8 0201 0010                  		andi.b	#$10,d1
000172DC D001                       		add.b	d1,d0
000172DE 1140 001A                  		move.b	d0,$1A(a0)
000172E2                            
000172E2                            Obj78_Display:
000172E2 3028 0008                  		move.w	8(a0),d0
000172E6 0240 FF80                  		andi.w	#$FF80,d0
000172EA 3238 F700                  		move.w	($FFFFF700).w,d1
000172EE 0441 0080                  		subi.w	#$80,d1
000172F2 0241 FF80                  		andi.w	#$FF80,d1
000172F6 9041                       		sub.w	d1,d0
000172F8 0C40 0280                  		cmpi.w	#$280,d0
000172FC 6200 0000                  		bhi.w	Obj78_ChkGone
00017300 4EF9 0000 DD72             		jmp	DisplaySprite
00017306                            ; ===========================================================================
00017306                            
00017306                            Obj78_ChkGone:
00017306 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001730A 7000                       		moveq	#0,d0
0001730C 1028 0023                  		move.b	$23(a0),d0
00017310 6700                       		beq.s	loc_16ABC
00017312 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017318                            
00017318                            loc_16ABC:
00017318 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001731E 4E75                       		rts	
00017320                            ; ===========================================================================
00017320                            
00017320                            Obj78_Delete:				; XREF: Obj78_Index
00017320 4EF9 0000 DDAE             		jmp	DeleteObject
00017326                            ; ===========================================================================
00017326 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017328 0000                       		dc.w loc_16B02-Obj78_Index2
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Obj78_Move:				; XREF: Obj78_Index2
0001732A 5328 002A                  		subq.b	#1,$2A(a0)
0001732E 6B00                       		bmi.s	Obj78_Move2
00017330 4E75                       		rts	
00017332                            ; ===========================================================================
00017332                            
00017332                            Obj78_Move2:
00017332 5428 0025                  		addq.b	#2,$25(a0)
00017336 117C 0010 002A             		move.b	#$10,$2A(a0)
0001733C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017342 317C 0040 0014             		move.w	#$40,$14(a0)
00017348 0868 0004 002B             		bchg	#4,$2B(a0)
0001734E 6600                       		bne.s	loc_16AFC
00017350 4268 0010                  		clr.w	$10(a0)
00017354 4468 0014                  		neg.w	$14(a0)
00017358                            
00017358                            loc_16AFC:
00017358 08E8 0007 002B             		bset	#7,$2B(a0)
0001735E                            
0001735E                            loc_16B02:				; XREF: Obj78_Index2
0001735E 5328 002A                  		subq.b	#1,$2A(a0)
00017362 6B00                       		bmi.s	loc_16B5E
00017364 2F28 0008                  		move.l	8(a0),-(sp)
00017368 2428 0008                  		move.l	8(a0),d2
0001736C 3028 0010                  		move.w	$10(a0),d0
00017370 0828 0000 0022             		btst	#0,$22(a0)
00017376 6700                       		beq.s	loc_16B1E
00017378 4440                       		neg.w	d0
0001737A                            
0001737A                            loc_16B1E:
0001737A 48C0                       		ext.l	d0
0001737C E180                       		asl.l	#8,d0
0001737E D480                       		add.l	d0,d2
00017380 2142 0008                  		move.l	d2,8(a0)
00017384 4EBA E2E6                  		jsr	ObjHitFloor
00017388 241F                       		move.l	(sp)+,d2
0001738A 0C41 FFF8                  		cmpi.w	#-8,d1
0001738E 6D00                       		blt.s	loc_16B70
00017390 0C41 000C                  		cmpi.w	#$C,d1
00017394 6C00                       		bge.s	loc_16B70
00017396 D368 000C                  		add.w	d1,$C(a0)
0001739A 4842                       		swap	d2
0001739C B468 0008                  		cmp.w	8(a0),d2
000173A0 6700                       		beq.s	locret_16B5C
000173A2 7000                       		moveq	#0,d0
000173A4 1028 003C                  		move.b	$3C(a0),d0
000173A8 5228 003C                  		addq.b	#1,$3C(a0)
000173AC 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173B2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173B6                            
000173B6                            locret_16B5C:
000173B6 4E75                       		rts	
000173B8                            ; ===========================================================================
000173B8                            
000173B8                            loc_16B5E:
000173B8 5528 0025                  		subq.b	#2,$25(a0)
000173BC 117C 0007 002A             		move.b	#7,$2A(a0)
000173C2 317C 0000 0010             		move.w	#0,$10(a0)
000173C8 4E75                       		rts	
000173CA                            ; ===========================================================================
000173CA                            
000173CA                            loc_16B70:
000173CA 2142 0008                  		move.l	d2,8(a0)
000173CE 0868 0000 0022             		bchg	#0,$22(a0)
000173D4 1168 0022 0001             		move.b	$22(a0),1(a0)
000173DA 7000                       		moveq	#0,d0
000173DC 1028 003C                  		move.b	$3C(a0),d0
000173E0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000173E6 5228 003C                  		addq.b	#1,$3C(a0)
000173EA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173F0 4E75                       		rts	
000173F2                            ; ===========================================================================
000173F2                            
000173F2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000173F2 2268 003C                  		movea.l	$3C(a0),a1
000173F6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000173FC 6A00                       		bpl.s	Obj78_BodySeg1
000173FE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017404 1028 0026                  		move.b	$26(a0),d0
00017408 0240 007F                  		andi.w	#$7F,d0
0001740C 5828 0026                  		addq.b	#4,$26(a0)
00017410 4A31 0004                  		tst.b	4(a1,d0.w)
00017414 6A00                       		bpl.s	Obj78_AniBody
00017416 5828 0026                  		addq.b	#4,$26(a0)
0001741A                            
0001741A                            Obj78_AniBody:
0001741A 1031 0000                  		move.b	(a1,d0.w),d0
0001741E 5000                       		addq.b	#8,d0
00017420 1140 001A                  		move.b	d0,$1A(a0)
00017424                            
00017424                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017424 2268 003C                  		movea.l	$3C(a0),a1
00017428 4A28 0022                  		tst.b	$22(a0)
0001742C 6B00 0000                  		bmi.w	loc_16C90
00017430 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017436 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001743C 6700 0000                  		beq.w	loc_16C64
00017440 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017446 3029 0010                  		move.w	$10(a1),d0
0001744A D069 0014                  		add.w	$14(a1),d0
0001744E 3140 0010                  		move.w	d0,$10(a0)
00017452 2428 0008                  		move.l	8(a0),d2
00017456 2602                       		move.l	d2,d3
00017458 3028 0010                  		move.w	$10(a0),d0
0001745C 0828 0000 0022             		btst	#0,$22(a0)
00017462 6700                       		beq.s	loc_16C0C
00017464 4440                       		neg.w	d0
00017466                            
00017466                            loc_16C0C:
00017466 48C0                       		ext.l	d0
00017468 E180                       		asl.l	#8,d0
0001746A D480                       		add.l	d0,d2
0001746C 2142 0008                  		move.l	d2,8(a0)
00017470 4843                       		swap	d3
00017472 B668 0008                  		cmp.w	8(a0),d3
00017476 6700                       		beq.s	loc_16C64
00017478 7000                       		moveq	#0,d0
0001747A 1028 003C                  		move.b	$3C(a0),d0
0001747E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017482 0C01 0080                  		cmpi.b	#-$80,d1
00017486 6600                       		bne.s	loc_16C50
00017488 4843                       		swap	d3
0001748A 2143 0008                  		move.l	d3,8(a0)
0001748E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017492 0868 0000 0022             		bchg	#0,$22(a0)
00017498 1168 0022 0001             		move.b	$22(a0),1(a0)
0001749E 5228 003C                  		addq.b	#1,$3C(a0)
000174A2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174A8 6000                       		bra.s	loc_16C64
000174AA                            ; ===========================================================================
000174AA                            
000174AA                            loc_16C50:
000174AA 4881                       		ext.w	d1
000174AC D368 000C                  		add.w	d1,$C(a0)
000174B0 5228 003C                  		addq.b	#1,$3C(a0)
000174B4 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174BA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174BE                            
000174BE                            loc_16C64:
000174BE 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000174C4 6700                       		beq.s	loc_16C90
000174C6 0C11 0027                  		cmpi.b	#$27,0(a1)
000174CA 6700                       		beq.s	loc_16C7C
000174CC 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000174D2 6600                       		bne.s	loc_16C82
000174D4                            
000174D4                            loc_16C7C:
000174D4 117C 000A 0024             		move.b	#$A,$24(a0)
000174DA                            
000174DA                            loc_16C82:
000174DA 4EF9 0000 DD72             		jmp	DisplaySprite
000174E0                            
000174E0                            ; ===========================================================================
000174E0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000174E8                            ; ===========================================================================
000174E8                            
000174E8                            loc_16C90:
000174E8 08E9 0007 0022             		bset	#7,$22(a1)
000174EE                            
000174EE                            loc_16C96:
000174EE 7000                       		moveq	#0,d0
000174F0 1028 0024                  		move.b	$24(a0),d0
000174F4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000174F8 0828 0000 0022             		btst	#0,$22(a0)
000174FE 6700                       		beq.s	loc_16CAA
00017500 4440                       		neg.w	d0
00017502                            
00017502                            loc_16CAA:
00017502 3140 0010                  		move.w	d0,$10(a0)
00017506 317C FC00 0012             		move.w	#-$400,$12(a0)
0001750C 117C 000C 0024             		move.b	#$C,$24(a0)
00017512 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017518                            
00017518                            loc_16CC0:				; XREF: Obj78_Index
00017518 4EB9 0000 DD20             		jsr	ObjectFall
0001751E 4A68 0012                  		tst.w	$12(a0)
00017522 6B00                       		bmi.s	loc_16CE0
00017524 4EBA E146                  		jsr	ObjHitFloor
00017528 4A41                       		tst.w	d1
0001752A 6A00                       		bpl.s	loc_16CE0
0001752C D368 000C                  		add.w	d1,$C(a0)
00017530 317C FC00 0012             		move.w	#-$400,$12(a0)
00017536                            
00017536                            loc_16CE0:
00017536 4A28 0001                  		tst.b	1(a0)
0001753A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001753E 4EF9 0000 DD72             		jmp	DisplaySprite
00017544                            ; ===========================================================================
00017544                            Ani_obj78:
00017544                            	include "_anim\obj78.asm"
00017544                            ; ---------------------------------------------------------------------------
00017544                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017544                            ; ---------------------------------------------------------------------------
00017544 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017554 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017564 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017574 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017584 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017594 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000175A4 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000175B4 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000175C4                            	even
000175C4                            	even
000175C4                            
000175C4                            ; ---------------------------------------------------------------------------
000175C4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175C4                            ; ---------------------------------------------------------------------------
000175C4                            Map_obj78:
000175C4                            	include "_maps\obj78.asm"
000175C4                            ; ---------------------------------------------------------------------------
000175C4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175C4                            ; ---------------------------------------------------------------------------
000175C4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000175C8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000175CC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000175D0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000175D4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000175D8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000175DC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000175E0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000175E4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000175E8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000175EC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000175F0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000175F4 01                         byte_16D9E:	dc.b 1
000175F5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000175FA 01                         byte_16DA4:	dc.b 1
000175FB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017600 01                         byte_16DAA:	dc.b 1
00017601 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017606 01                         byte_16DB0:	dc.b 1
00017607 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001760C 01                         byte_16DB6:	dc.b 1
0001760D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017612 01                         byte_16DBC:	dc.b 1
00017613 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017618 01                         byte_16DC2:	dc.b 1
00017619 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001761E 01                         byte_16DC8:	dc.b 1
0001761F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017624 01                         byte_16DCE:	dc.b 1
00017625 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001762A 01                         byte_16DD4:	dc.b 1
0001762B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017630 01                         byte_16DDA:	dc.b 1
00017631 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017636 01                         byte_16DE0:	dc.b 1
00017637 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001763C 01                         byte_16DE6:	dc.b 1
0001763D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017642 01                         byte_16DEC:	dc.b 1
00017643 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017648 01                         byte_16DF2:	dc.b 1
00017649 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001764E 01                         byte_16DF8:	dc.b 1
0001764F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017654 01                         byte_16DFE:	dc.b 1
00017655 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001765A 01                         byte_16E04:	dc.b 1
0001765B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017660 01                         byte_16E0A:	dc.b 1
00017661 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017666 01                         byte_16E10:	dc.b 1
00017667 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001766C 01                         byte_16E16:	dc.b 1
0001766D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017672 01                         byte_16E1C:	dc.b 1
00017673 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017678 01                         byte_16E22:	dc.b 1
00017679 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001767E 01                         byte_16E28:	dc.b 1
0001767F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017684                            		even
00017684                            		even
00017684                            
00017684                            ; ===========================================================================
00017684                            ; ---------------------------------------------------------------------------
00017684                            ; Object 79 - lamppost
00017684                            ; ---------------------------------------------------------------------------
00017684                            
00017684                            Obj79:					; XREF: Obj_Index
00017684 7000                       		moveq	#0,d0
00017686 1028 0024                  		move.b	$24(a0),d0
0001768A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001768E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017692 4EFA 8786                  		jmp	MarkObjGone
00017696                            ; ===========================================================================
00017696 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017698 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001769A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001769C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001769E                            ; ===========================================================================
0001769E                            
0001769E                            Obj79_Main:				; XREF: Obj79_Index
0001769E 5428 0024                  		addq.b	#2,$24(a0)
000176A2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000176AA 317C 07A0 0002             		move.w	#$7A0,2(a0)
000176B0 117C 0004 0001             		move.b	#4,1(a0)
000176B6 117C 0008 0019             		move.b	#8,$19(a0)
000176BC 117C 0005 0018             		move.b	#5,$18(a0)
000176C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176C6 7000                       		moveq	#0,d0
000176C8 1028 0023                  		move.b	$23(a0),d0
000176CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176D2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000176D8 6600                       		bne.s	Obj79_RedLamp
000176DA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000176DE 0201 007F                  		andi.b	#$7F,d1
000176E2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000176E6 0202 007F                  		andi.b	#$7F,d2
000176EA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000176EC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000176EE                            
000176EE                            Obj79_RedLamp:
000176EE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000176F4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000176FA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017700 4E75                       		rts	
00017702                            ; ===========================================================================
00017702                            
00017702                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017702 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017706 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001770A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001770E 6B00 0000                  		bmi.w	locret_16F90
00017712 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017716 0201 007F                  		andi.b	#$7F,d1
0001771A 1428 0028                  		move.b	$28(a0),d2
0001771E 0202 007F                  		andi.b	#$7F,d2
00017722 B202                       		cmp.b	d2,d1
00017724 6500                       		bcs.s	Obj79_HitLamp
00017726 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001772A 7000                       		moveq	#0,d0
0001772C 1028 0023                  		move.b	$23(a0),d0
00017730 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017736 117C 0004 0024             		move.b	#4,$24(a0)
0001773C 117C 0003 001A             		move.b	#3,$1A(a0)
00017742 6000 0000                  		bra.w	locret_16F90
00017746                            ; ===========================================================================
00017746                            
00017746                            Obj79_HitLamp:
00017746 3038 D008                  		move.w	($FFFFD008).w,d0
0001774A 9068 0008                  		sub.w	8(a0),d0
0001774E 5040                       		addq.w	#8,d0
00017750 0C40 0010                  		cmpi.w	#$10,d0
00017754 6400 0000                  		bcc.w	locret_16F90
00017758 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001775C 9068 000C                  		sub.w	$C(a0),d0
00017760 0640 0040                  		addi.w	#$40,d0
00017764 0C40 0068                  		cmpi.w	#$68,d0
00017768 6400                       		bcc.s	locret_16F90
0001776A 303C 00A1                  		move.w	#$A1,d0
0001776E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017774 5428 0024                  		addq.b	#2,$24(a0)
00017778 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001777E 6600                       		bne.s	loc_16F76
00017780 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017784 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001778A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017790 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017796 0469 0018 0032             		subi.w	#$18,$32(a1)
0001779C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000177A4 337C 07A0 0002             		move.w	#$7A0,2(a1)
000177AA 137C 0004 0001             		move.b	#4,1(a1)
000177B0 137C 0008 0019             		move.b	#8,$19(a1)
000177B6 137C 0004 0018             		move.b	#4,$18(a1)
000177BC 137C 0002 001A             		move.b	#2,$1A(a1)
000177C2 337C 0020 0036             		move.w	#$20,$36(a1)
000177C8                            
000177C8                            loc_16F76:
000177C8 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000177CE 6100 0000                  		bsr.w	Obj79_StoreInfo
000177D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177D6 7000                       		moveq	#0,d0
000177D8 1028 0023                  		move.b	$23(a0),d0
000177DC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177E2                            
000177E2                            locret_16F90:
000177E2 4E75                       		rts	
000177E4                            ; ===========================================================================
000177E4                            
000177E4                            Obj79_AfterHit:				; XREF: Obj79_Index
000177E4 4E75                       		rts	
000177E6                            ; ===========================================================================
000177E6                            
000177E6                            Obj79_Twirl:				; XREF: Obj79_Index
000177E6 5368 0036                  		subq.w	#1,$36(a0)
000177EA 6A00                       		bpl.s	loc_16FA0
000177EC 117C 0004 0024             		move.b	#4,$24(a0)
000177F2                            
000177F2                            loc_16FA0:
000177F2 1028 0026                  		move.b	$26(a0),d0
000177F6 0428 0010 0026             		subi.b	#$10,$26(a0)
000177FC 0400 0040                  		subi.b	#$40,d0
00017800 4EB9 0000 2C64             		jsr	(CalcSine).l
00017806 C3FC 0C00                  		muls.w	#$C00,d1
0001780A 4841                       		swap	d1
0001780C D268 0030                  		add.w	$30(a0),d1
00017810 3141 0008                  		move.w	d1,8(a0)
00017814 C1FC 0C00                  		muls.w	#$C00,d0
00017818 4840                       		swap	d0
0001781A D068 0032                  		add.w	$32(a0),d0
0001781E 3140 000C                  		move.w	d0,$C(a0)
00017822 4E75                       		rts	
00017824                            ; ===========================================================================
00017824                            ; ---------------------------------------------------------------------------
00017824                            ; Subroutine to	store information when you hit a lamppost
00017824                            ; ---------------------------------------------------------------------------
00017824                            
00017824                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017824 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001782A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017830 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017836 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001783C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017842 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017848 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001784E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017854 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001785A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017860 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017866 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001786C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017872 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017878 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001787E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017884 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001788A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017890 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017896 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001789C 4E75                       		rts	
0001789E                            
0001789E                            ; ---------------------------------------------------------------------------
0001789E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001789E                            ; ---------------------------------------------------------------------------
0001789E                            
0001789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001789E                            
0001789E                            
0001789E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001789E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000178A4 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000178AA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000178B0 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000178B6 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000178BC 4278 FE20                  		clr.w	($FFFFFE20).w
000178C0 4238 FE1B                  		clr.b	($FFFFFE1B).w
000178C4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000178CA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000178D0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000178D4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000178DA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000178E0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000178E6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000178EC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000178F2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000178F8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000178FE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017904 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001790A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017910 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017916 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001791C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017922 6600                       		bne.s	loc_170E4
00017924 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001792A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017930 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017936                            
00017936                            loc_170E4:
00017936 4A38 FE30                  		tst.b	($FFFFFE30).w
0001793A 6A00                       		bpl.s	locret_170F6
0001793C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017940 0440 00A0                  		subi.w	#$A0,d0
00017944 31C0 F728                  		move.w	d0,($FFFFF728).w
00017948                            
00017948                            locret_170F6:
00017948 4E75                       		rts	
0001794A                            ; End of function Obj79_LoadInfo
0001794A                            
0001794A                            ; ===========================================================================
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            ; Sprite mappings - lamppost
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            Map_obj79:
0001794A                            	include "_maps\obj79.asm"
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            ; Sprite mappings - lamppost
0001794A                            ; ---------------------------------------------------------------------------
0001794A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001794E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017952 06                         byte_17100:	dc.b 6
00017953 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017958 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001795D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017962 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017967 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001796C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017971 04                         byte_1711F:	dc.b 4
00017972 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017977 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001797C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017981 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017986 02                         byte_17134:	dc.b 2
00017987 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001798C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017991 06                         byte_1713F:	dc.b 6
00017992 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017997 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001799C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179A1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179A6 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000179AB D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000179B0                            		even
000179B0                            		even
000179B0                            
000179B0                            ; ===========================================================================
000179B0                            ; ---------------------------------------------------------------------------
000179B0                            ; Object 7D - hidden points at the end of a level
000179B0                            ; ---------------------------------------------------------------------------
000179B0                            
000179B0                            Obj7D:					; XREF: Obj_Index
000179B0 7000                       		moveq	#0,d0
000179B2 1028 0024                  		move.b	$24(a0),d0
000179B6 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000179BA 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000179BE                            ; ===========================================================================
000179BE 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000179C0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000179C2                            ; ===========================================================================
000179C2                            
000179C2                            Obj7D_Main:				; XREF: Obj7D_Index
000179C2 7410                       		moveq	#$10,d2
000179C4 3602                       		move.w	d2,d3
000179C6 D643                       		add.w	d3,d3
000179C8 43F8 D000                  		lea	($FFFFD000).w,a1
000179CC 3029 0008                  		move.w	8(a1),d0
000179D0 9068 0008                  		sub.w	8(a0),d0
000179D4 D042                       		add.w	d2,d0
000179D6 B043                       		cmp.w	d3,d0
000179D8 6400                       		bcc.s	Obj7D_ChkDel
000179DA 3229 000C                  		move.w	$C(a1),d1
000179DE 9268 000C                  		sub.w	$C(a0),d1
000179E2 D242                       		add.w	d2,d1
000179E4 B243                       		cmp.w	d3,d1
000179E6 6400                       		bcc.s	Obj7D_ChkDel
000179E8 4A78 FE08                  		tst.w	($FFFFFE08).w
000179EC 6600                       		bne.s	Obj7D_ChkDel
000179EE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000179F2 6600                       		bne.s	Obj7D_ChkDel
000179F4 5428 0024                  		addq.b	#2,$24(a0)
000179F8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017A00 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017A06 0028 0004 0001             		ori.b	#4,1(a0)
00017A0C 117C 0000 0018             		move.b	#0,$18(a0)
00017A12 117C 0010 0019             		move.b	#$10,$19(a0)
00017A18 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017A1E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017A24 303C 00C9                  		move.w	#$C9,d0
00017A28 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017A2E 7000                       		moveq	#0,d0
00017A30 1028 0028                  		move.b	$28(a0),d0
00017A34 D040                       		add.w	d0,d0
00017A36 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017A3A 4EB9 0000 0000             		jsr	AddPoints
00017A40                            
00017A40                            Obj7D_ChkDel:
00017A40 3028 0008                  		move.w	8(a0),d0
00017A44 0240 FF80                  		andi.w	#$FF80,d0
00017A48 3238 F700                  		move.w	($FFFFF700).w,d1
00017A4C 0441 0080                  		subi.w	#$80,d1
00017A50 0241 FF80                  		andi.w	#$FF80,d1
00017A54 9041                       		sub.w	d1,d0
00017A56 0C40 0280                  		cmpi.w	#$280,d0
00017A5A 6200                       		bhi.s	Obj7D_Delete
00017A5C 4E75                       		rts	
00017A5E                            ; ===========================================================================
00017A5E                            
00017A5E                            Obj7D_Delete:
00017A5E 4EF9 0000 DDAE             		jmp	DeleteObject
00017A64                            ; ===========================================================================
00017A64 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017A66 03E8                       		dc.w 1000
00017A68 0064                       		dc.w 100
00017A6A 0001                       		dc.w 1
00017A6C                            ; ===========================================================================
00017A6C                            
00017A6C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017A6C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017A70 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017A72 3028 0008                  		move.w	8(a0),d0
00017A76 0240 FF80                  		andi.w	#-$80,d0
00017A7A 3238 F700                  		move.w	($FFFFF700).w,d1
00017A7E 0441 0080                  		subi.w	#$80,d1
00017A82 0241 FF80                  		andi.w	#-$80,d1
00017A86 9041                       		sub.w	d1,d0
00017A88 0C40 0280                  		cmpi.w	#$280,d0
00017A8C 6200                       		bhi.s	Obj7D_Delete2
00017A8E 4EF9 0000 DD72             		jmp	DisplaySprite
00017A94                            ; ===========================================================================
00017A94                            
00017A94                            Obj7D_Delete2:
00017A94 4EF9 0000 DDAE             		jmp	DeleteObject
00017A9A                            ; ===========================================================================
00017A9A                            ; ---------------------------------------------------------------------------
00017A9A                            ; Sprite mappings - hidden points at the end of	a level
00017A9A                            ; ---------------------------------------------------------------------------
00017A9A                            Map_obj7D:
00017A9A                            	include "_maps\obj7D.asm"
00017A9A                            ; ---------------------------------------------------------------------------
00017A9A                            ; Sprite mappings - hidden points at the end of	a level
00017A9A                            ; ---------------------------------------------------------------------------
00017A9A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017A9E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017AA2 00                         byte_17250:	dc.b 0
00017AA3 01                         byte_17251:	dc.b 1
00017AA4 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017AA9 01                         byte_17257:	dc.b 1
00017AAA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017AAF 01                         byte_1725D:	dc.b 1
00017AB0 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017AB6 00                         		even
00017AB6 00                         		even
00017AB6                            
00017AB6                            ; ===========================================================================
00017AB6                            ; ---------------------------------------------------------------------------
00017AB6                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017AB6                            ; ---------------------------------------------------------------------------
00017AB6                            
00017AB6                            Obj8A:					; XREF: Obj_Index
00017AB6 7000                       		moveq	#0,d0
00017AB8 1028 0024                  		move.b	$24(a0),d0
00017ABC 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017AC0 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017AC4                            ; ===========================================================================
00017AC4 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017AC6 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8                            Obj8A_Main:				; XREF: Obj8A_Index
00017AC8 5428 0024                  		addq.b	#2,$24(a0)
00017ACC 317C 0120 0008             		move.w	#$120,8(a0)
00017AD2 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017AD8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017AE0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017AE6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017AEA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017AEE 117C 0000 0001             		move.b	#0,1(a0)
00017AF4 117C 0000 0018             		move.b	#0,$18(a0)
00017AFA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017B00 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B02 317C 00A6 0002             		move.w	#$A6,2(a0)
00017B08 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017B0E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017B12 6700                       		beq.s	Obj8A_Display	; if not, branch
00017B14 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017B1A 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B1C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017B22 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017B28 4EF9 0000 DDAE             		jmp	DeleteObject
00017B2E                            ; ===========================================================================
00017B2E                            
00017B2E                            Obj8A_Display:				; XREF: Obj8A_Index
00017B2E 4EF9 0000 DD72             		jmp	DisplaySprite
00017B34                            ; ===========================================================================
00017B34                            ; ---------------------------------------------------------------------------
00017B34                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017B34                            ; ---------------------------------------------------------------------------
00017B34                            Map_obj8A:
00017B34                            	include "_maps\obj8A.asm"
00017B34                            ; ================================================================================
00017B34                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017B34                            ; ================================================================================
00017B34                            
00017B34                            DATAV02AM357W0A:
00017B34 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017B38 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017B3C 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017B40 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017B44 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017B48 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017B4A 0E                         DATAV02AM357W0A_0: dc.b $E
00017B4B F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017B50 F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017B55 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017B5A F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017B5F F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017B64 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017B69 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017B6E F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017B73 F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017B78 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017B7D F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017B82 F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017B87 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017B8C F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017B91 10                         DATAV02AM357W0A_1: dc.b $10
00017B92 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017B97 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017B9C D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017BA1 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017BA6 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017BAB D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017BB0 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017BB5 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017BBA 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017BBF 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017BC4 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017BC9 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017BCE 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017BD3 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017BD8 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017BDD 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017BE2 0A                         DATAV02AM357W0A_2: dc.b $A
00017BE3 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017BE8 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017BED D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017BF2 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017BF7 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017BFC D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C01 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017C06 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017C0B 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C10 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C15 18                         DATAV02AM357W0A_3: dc.b $18
00017C16 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C1B D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017C20 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017C25 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017C2A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C2F D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017C34 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017C39 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017C3E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C43 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017C48 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017C4D D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017C52 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017C57 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017C5C D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017C61 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017C66 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017C6B 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017C70 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017C75 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017C7A 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017C7F 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017C84 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017C89 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017C8E 14                         DATAV02AM357W0A_4: dc.b $14
00017C8F D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017C94 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017C99 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017C9E D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017CA3 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017CA8 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017CAD 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017CB2 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017CB7 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017CBC 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017CC1 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017CC6 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017CCB 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017CD0 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017CD5 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017CDA 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017CDF 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017CE4 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017CE9 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017CEE 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017CF3 1A                         DATAV02AM357W0A_5: dc.b $1A
00017CF4 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017CF9 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017CFE D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D03 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017D08 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017D0D D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D12 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D17 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D1C D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017D21 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017D26 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017D2B D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017D30 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017D35 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017D3A 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017D3F 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017D44 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017D49 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017D4E 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017D53 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017D58 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017D5D 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017D62 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017D67 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017D6C 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017D71 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017D76 17                         DATAV02AM357W0A_6: dc.b $17
00017D77 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017D7C D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017D81 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017D86 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017D8B D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017D90 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017D95 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017D9A D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017D9F D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017DA4 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017DA9 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017DAE D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017DB3 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017DB8 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017DBD 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017DC2 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017DC7 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017DCC 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017DD1 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017DD6 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017DDB 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017DE0 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017DE5 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017DEA 1F                         DATAV02AM357W0A_7: dc.b $1F
00017DEB D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017DF0 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017DF5 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017DFA D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017DFF D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017E04 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E09 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017E0E D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E13 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E18 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E1D D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017E22 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017E27 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017E2C 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017E31 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017E36 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E3B 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E40 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017E45 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017E4A 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017E4F 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017E54 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017E59 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017E5E 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017E63 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017E68 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017E6D 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017E72 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017E77 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017E7C 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017E81 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017E86 0F                         DATAV02AM357W0A_8: dc.b $F
00017E87 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017E8C F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017E91 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017E96 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017E9B F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017EA0 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017EA5 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017EAA F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017EAF F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017EB4 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017EB9 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017EBE F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017EC3 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017EC8 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017ECD F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017ED2 08                         DATAV02AM357W0A_9: dc.b $8
00017ED3 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017ED8 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017EDD 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017EE2 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017EE7 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017EEC 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017EF1 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017EF6 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017EFB 20                         DATAV02AM357W0A_A: dc.b $20
00017EFC ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F01 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017F06 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017F0B ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F10 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F15 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F1A ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017F1F FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017F24 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017F29 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017F2E FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017F33 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017F38 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017F3D 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017F42 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017F47 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017F4C 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017F51 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017F56 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017F5B 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017F60 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017F65 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017F6A 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017F6F 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017F74 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017F79 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017F7E 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017F83 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017F88 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017F8D 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017F92 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017F97 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017F9C                            	even
00017F9C                            	even
00017F9C                            
00017F9C                            ; ===========================================================================
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            ; Object 3D - matthew boss - modified by GK89
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            
00017F9C                            Obj3D:					; XREF: Obj_Index
00017F9C 7000                       		moveq	#0,d0
00017F9E 1028 0024                  		move.b	$24(a0),d0
00017FA2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017FA6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017FAA                            ; ===========================================================================
00017FAA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017FAC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017FAE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017FB0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017FB2                            
00017FB2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017FB4 0401                       		dc.b 4,	1
00017FB6 0607                       		dc.b 6,	7
00017FB8                            ; ===========================================================================
00017FB8                            
00017FB8                            Obj3D_Main:				; XREF: Obj3D_Index
00017FB8 45F9 0001 7FB2             		lea	(Obj3D_ObjData).l,a2
00017FBE 2248                       		movea.l	a0,a1
00017FC0 7202                       		moveq	#2,d1
00017FC2 6000                       		bra.s	Obj3D_LoadBoss
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            Obj3D_Loop:
00017FC4 4EB9 0000 E20E             		jsr	SingleObjLoad2
00017FCA 6600                       		bne.s	loc_17772
00017FCC                            
00017FCC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017FCC 135A 0024                  		move.b	(a2)+,$24(a1)
00017FD0 12BC 003D                  		move.b	#$3D,0(a1)
00017FD4 3368 0008 0008             		move.w	8(a0),8(a1)
00017FDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FE0 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017FE8 337C 0400 0002             		move.w	#$400,2(a1)
00017FEE 137C 0004 0001             		move.b	#4,1(a1)
00017FF4 137C 0020 0019             		move.b	#$20,$19(a1)
00017FFA 137C 0003 0018             		move.b	#3,$18(a1)
00018000 135A 001C                  		move.b	(a2)+,$1C(a1)
00018004 2348 0034                  		move.l	a0,$34(a1)
00018008 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001800C                            
0001800C                            loc_17772:
0001800C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018012 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018018 117C 000F 0020             		move.b	#$F,$20(a0)
0001801E 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018024                            
00018024                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018024 7000                       		moveq	#0,d0
00018026 1028 0025                  		move.b	$25(a0),d0
0001802A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001802E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018032 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018038 4EB9 0000 AE32             		jsr	AnimateSprite
0001803E 1028 0022                  		move.b	$22(a0),d0
00018042 0200 0003                  		andi.b	#3,d0
00018046 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001804C 8128 0001                  		or.b	d0,1(a0)
00018050 4EF9 0000 DD72             		jmp	DisplaySprite
00018056                            ; ===========================================================================
00018056 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018058 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001805A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001805C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001805E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018060 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018062 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018064                            ; ===========================================================================
00018064                            
00018064                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018064 4EB9 0000 0000             		jsr    Obj3D_ShipMove
0001806A 6100 0000                  		bsr.w	BossMove
0001806E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018074 6600                       		bne.s	loc_177E6
00018076 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001807C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018080                            
00018080                            loc_177E6:
00018080 1028 003F                  		move.b	$3F(a0),d0
00018084 4EB9 0000 2C64             		jsr	(CalcSine).l
0001808A EC40                       		asr.w	#6,d0
0001808C D068 0038                  		add.w	$38(a0),d0
00018090 3140 000C                  		move.w	d0,$C(a0)
00018094 3168 0030 0008             		move.w	$30(a0),8(a0)
0001809A 5428 003F                  		addq.b	#2,$3F(a0)
0001809E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000180A4 6400                       		bcc.s	locret_1784A
000180A6 4A28 0022                  		tst.b	$22(a0)
000180AA 6B00                       		bmi.s	loc_1784C
000180AC 4A28 0020                  		tst.b	$20(a0)
000180B0 6600                       		bne.s	locret_1784A
000180B2 4A28 003E                  		tst.b	$3E(a0)
000180B6 6600                       		bne.s	Obj3D_ShipFlash
000180B8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000180BE 303C 00AC                  		move.w	#$AC,d0
000180C2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000180C8                            
000180C8                            Obj3D_ShipFlash:
000180C8 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000180CC 7000                       		moveq	#0,d0		; move 0 (black) to d0
000180CE 4A51                       		tst.w	(a1)
000180D0 6600                       		bne.s	loc_1783C
000180D2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000180D6                            
000180D6                            loc_1783C:
000180D6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000180D8 5328 003E                  		subq.b	#1,$3E(a0)
000180DC 6600                       		bne.s	locret_1784A
000180DE 117C 000F 0020             		move.b	#$F,$20(a0)
000180E4                            
000180E4                            locret_1784A:
000180E4 4E75                       		rts	
000180E6                            ; ===========================================================================
000180E6                            
000180E6                            loc_1784C:				; XREF: loc_177E6
000180E6 7064                       		moveq	#100,d0
000180E8 6100 0000                  		bsr.w	AddPoints
000180EC 117C 0008 0025             		move.b	#8,$25(a0)
000180F2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000180F8 4E75                       		rts	
000180FA                            
000180FA                            ; ---------------------------------------------------------------------------
000180FA                            ; Defeated boss	subroutine
000180FA                            ; ---------------------------------------------------------------------------
000180FA                            
000180FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180FA                            
000180FA                            
000180FA                            BossDefeated:
000180FA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000180FE 0200 0007                  		andi.b	#7,d0
00018102 6600                       		bne.s	locret_178A2
00018104 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001810A 6600                       		bne.s	locret_178A2
0001810C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018110 3368 0008 0008             		move.w	8(a0),8(a1)
00018116 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001811C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018122 3200                       		move.w	d0,d1
00018124 7200                       		moveq	#0,d1
00018126 1200                       		move.b	d0,d1
00018128 E409                       		lsr.b	#2,d1
0001812A 0441 0020                  		subi.w	#$20,d1
0001812E D369 0008                  		add.w	d1,8(a1)
00018132 E048                       		lsr.w	#8,d0
00018134 E608                       		lsr.b	#3,d0
00018136 D169 000C                  		add.w	d0,$C(a1)
0001813A                            
0001813A                            locret_178A2:
0001813A 4E75                       		rts	
0001813C                            ; End of function BossDefeated
0001813C                            
0001813C                            ; ---------------------------------------------------------------------------
0001813C                            ; Subroutine to	move a boss
0001813C                            ; ---------------------------------------------------------------------------
0001813C                            
0001813C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001813C                            
0001813C                            
0001813C                            BossMove:
0001813C 2428 0030                  		move.l	$30(a0),d2
00018140 2628 0038                  		move.l	$38(a0),d3
00018144 3028 0010                  		move.w	$10(a0),d0
00018148 48C0                       		ext.l	d0
0001814A E180                       		asl.l	#8,d0
0001814C D480                       		add.l	d0,d2
0001814E 3028 0012                  		move.w	$12(a0),d0
00018152 48C0                       		ext.l	d0
00018154 E180                       		asl.l	#8,d0
00018156 D680                       		add.l	d0,d3
00018158 2142 0030                  		move.l	d2,$30(a0)
0001815C 2143 0038                  		move.l	d3,$38(a0)
00018160 4E75                       		rts	
00018162                            ; End of function BossMove
00018162                            
00018162                            ; ===========================================================================
00018162                            
00018162                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018162 6100 FFD8                  		bsr.w	BossMove
00018166 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001816C 6600                       		bne.s	loc_17916
0001816E 317C 0000 0010             		move.w	#0,$10(a0)
00018174 317C 0000 0012             		move.w	#0,$12(a0)
0001817A 5428 0025                  		addq.b	#2,$25(a0)
0001817E 4EB9 0000 E20E             		jsr	SingleObjLoad2
00018184 6600                       		bne.s	loc_17910
00018186 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001818A 3368 0030 0008             		move.w	$30(a0),8(a1)
00018190 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018196 2348 0034                  		move.l	a0,$34(a1)
0001819A                            
0001819A                            loc_17910:
0001819A 317C 0077 003C             		move.w	#$77,$3C(a0)
000181A0                            
000181A0                            loc_17916:
000181A0 6000 FEDE                  		bra.w	loc_177E6
000181A4                            ; ===========================================================================
000181A4                            
000181A4                            Obj3D_ShipMove:				; XREF:  sonic follow move
000181A4 5368 003C                  		subq.w	#1,$3C(a0)
000181A8 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
000181AE 5428 0025                  		addq.b	#2,$25(a0)
000181B2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000181B8 3038 D008                  		move.w	($FFFFD008).w,d0	 
000181BC 9068 0008                  		sub.w	8(a0),d0		 
000181C0 6A00                       		bpl.s	Obj3D_left			 
000181C2 08A8 0000 0022             		bclr	#0,$22(a0)		 
000181C8 6000                       		bra.s	Obj3D_right		 
000181CA 08A8 0005 0022             		bclr	#5,$22(a0)
000181D0 4EB9 0000 0000              		jsr     loc_17950
000181D6 4E75                       		rts
000181D8                            ; ===========================================================================
000181D8                            
000181D8                            Obj3D_right:
000181D8 317C FF00 0010             		move.w	#-$100,$10(a0)	
000181DE 4E75                       		Rts
000181E0                            
000181E0                            Obj3D_left:
000181E0 317C 0100 0010             		move.w	#$100,$10(a0)	 
000181E6 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000181EC 6600                       		bne.s	RTSboss  	; if not, branch
000181EE 0868 0000 0022              		bchg	#0,$22(a0)
000181F4                            
000181F4                            RTSboss:	    
000181F4 4E75                       		rts
000181F6                             ; ===========================================================================
000181F6                            
000181F6                            Obj3D_UpStuff:
000181F6 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000181FA 9068 000C                  		sub.w	$C(a0),d0		 
000181FE 6A00                       		bpl.s	Obj3D_down			 
00018200 6000                        		bra.s	Obj3D_up		 
00018202 08A8 0005 0022             		bclr	#5,$22(a0)
00018208                             
00018208                            Obj3D_up:		
00018208 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001820E 4E75                        	    rts
00018210                            
00018210                            Obj3D_down:
00018210 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018216                            
00018216                            loc_17950:
00018216 6000 FE68                  		bra.w	loc_177E6
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001821A 5368 003C                  		subq.w	#1,$3C(a0)
0001821E 6B00                       		bmi.s	loc_17960
00018220 6100 FF1A                  		bsr.w	BossMove
00018224 6000                       		bra.s	loc_17976
00018226                            ; ===========================================================================
00018226                            
00018226                            loc_17960:
00018226 0868 0000 0022             		bchg	#0,$22(a0)
0001822C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018232 5528 0025                  		subq.b	#2,$25(a0)
00018236 317C 0000 0010             		move.w	#0,$10(a0)
0001823C                            
0001823C                            loc_17976:
0001823C 6000 FE42                  		bra.w	loc_177E6
00018240                            ; ===========================================================================
00018240                            
00018240                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018240 5368 003C                  		subq.w	#1,$3C(a0)
00018244 6B00                       		bmi.s	loc_17984
00018246 6000 FEB2                  		bra.w	BossDefeated
0001824A                            ; ===========================================================================
0001824A                            
0001824A                            loc_17984:
0001824A 08E8 0000 0022             		bset	#0,$22(a0)
00018250 08A8 0007 0022             		bclr	#7,$22(a0)
00018256 4268 0010                  		clr.w	$10(a0)
0001825A 5428 0025                  		addq.b	#2,$25(a0)
0001825E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018264 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018268 6600                       		bne.s	locret_179AA
0001826A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018270 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018276 6000 FE82                  		bra.w	BossDefeated
0001827A                            
0001827A                            locret_179AA:
0001827A 4E75                       		rts	
0001827C                            ; ===========================================================================
0001827C                            
0001827C                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001827C 4EB9 0000 DD20             		jsr ObjectFall		
00018282 5268 003C                  		addq.w	#1,$3C(a0)
00018286 6700                       		beq.s	loc_179BC
00018288 6A00                       		bpl.s	loc_179C2
0001828A 6000                       		bra.s	loc_179EE
0001828C                            ; ===========================================================================
0001828C                            
0001828C                            loc_179BC:
0001828C 4268 0012                  		clr.w	$12(a0)
00018290 6000                       		bra.s	loc_179EE
00018292                            ; ===========================================================================
00018292                            
00018292                            loc_179C2:
00018292 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018298 6500                       		bcs.s	loc_179DA
0001829A 6700                       		beq.s	loc_179E0
0001829C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000182A2 6500                       		bcs.s	loc_179EE
000182A4 5428 0025                  		addq.b	#2,$25(a0)
000182A8 6000                       		bra.s	loc_179EE
000182AA                            ; ===========================================================================
000182AA                            
000182AA                            loc_179DA:
000182AA 5168 0012                  		subq.w	#8,$12(a0)
000182AE 6000                       		bra.s	loc_179EE
000182B0 6000 FE48                  		bra.w	BossDefeated
000182B4                            ; ===========================================================================
000182B4                            
000182B4                            loc_179E0:
000182B4 4268 0012                  		clr.w	$12(a0)
000182B8 303C 0081                  		move.w	#$81,d0
000182BC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
000182C2                            
000182C2                            loc_179EE:
000182C2 6100 FE78                  		bsr.w	BossMove
000182C6 6000 FDB8                  		bra.w	loc_177E6
000182CA                            ; ===========================================================================
000182CA                            
000182CA                            loc_179F6:				; XREF: Obj3D_ShipIndex
000182CA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000182D0 6700                       		beq.s	loc_17A10
000182D2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000182D6 6000                       		bra.s	loc_17A16
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            loc_17A10:
000182D8 4A28 0001                  		tst.b	1(a0)
000182DC 6A00                       		bpl.s	Obj3D_ShipDel
000182DE                            
000182DE                            loc_17A16:
000182DE 6100 FE5C                  		bsr.w	BossMove
000182E2 6000 FD9C                  		bra.w	loc_177E6
000182E6                            ; ===========================================================================
000182E6                            
000182E6                            Obj3D_ShipDel:
000182E6 4EF9 0000 DDAE             		jmp	DeleteObject
000182EC                            ; ===========================================================================
000182EC                            
000182EC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000182EC 7000                       		moveq	#0,d0
000182EE 7201                       		moveq	#1,d1
000182F0 2268 0034                  		movea.l	$34(a0),a1
000182F4 1029 0025                  		move.b	$25(a1),d0
000182F8 5900                       		subq.b	#4,d0
000182FA 6600                       		bne.s	loc_17A3E
000182FC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018302 6600                       		bne.s	loc_17A46
00018304 7204                       		moveq	#4,d1
00018306                            
00018306                            loc_17A3E:
00018306 5D00                       		subq.b	#6,d0
00018308 6B00                       		bmi.s	loc_17A46
0001830A 720A                       		moveq	#$A,d1
0001830C 6000                       		bra.s	loc_17A5A
0001830E                            ; ===========================================================================
0001830E                            
0001830E                            loc_17A46:
0001830E 4A29 0020                  		tst.b	$20(a1)
00018312 6600                       		bne.s	loc_17A50
00018314 7205                       		moveq	#5,d1
00018316 6000                       		bra.s	loc_17A5A
00018318                            ; ===========================================================================
00018318                            
00018318                            loc_17A50:
00018318 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001831E 6500                       		bcs.s	loc_17A5A
00018320 7204                       		moveq	#4,d1
00018322                            
00018322                            loc_17A5A:
00018322 1141 001C                  		move.b	d1,$1C(a0)
00018326 5500                       		subq.b	#2,d0
00018328 6600                       		bne.s	Obj3D_FaceDisp
0001832A 117C 0006 001C             		move.b	#6,$1C(a0)
00018330 4A28 0001                  		tst.b	1(a0)
00018334 6A00                       		bpl.s	Obj3D_FaceDel
00018336                            
00018336                            Obj3D_FaceDisp:
00018336 6000                       		bra.s	Obj3D_Display
00018338                            ; ===========================================================================
00018338                            
00018338                            Obj3D_FaceDel:
00018338 4EF9 0000 DDAE             		jmp	DeleteObject
0001833E                            ; ===========================================================================
0001833E                            
0001833E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001833E 117C 0007 001C             		move.b	#7,$1C(a0)
00018344 2268 0034                  		movea.l	$34(a0),a1
00018348 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001834E 6600                       		bne.s	loc_17A96
00018350 117C 000B 001C             		move.b	#$B,$1C(a0)
00018356 4A28 0001                  		tst.b	1(a0)
0001835A 6A00                       		bpl.s	Obj3D_FlameDel
0001835C 6000                       		bra.s	Obj3D_FlameDisp
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_17A96:
0001835E 3029 0010                  		move.w	$10(a1),d0
00018362 6700                       		beq.s	Obj3D_FlameDisp
00018364 117C 0008 001C             		move.b	#8,$1C(a0)
0001836A                            
0001836A                            Obj3D_FlameDisp:
0001836A 6000                       		bra.s	Obj3D_Display
0001836C                            ; ===========================================================================
0001836C                            
0001836C                            Obj3D_FlameDel:
0001836C 4EF9 0000 DDAE             		jmp	DeleteObject
00018372                            ; ===========================================================================
00018372                            
00018372                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018372 2268 0034                  		movea.l	$34(a0),a1
00018376 3169 0008 0008             		move.w	8(a1),8(a0)
0001837C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018382 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018388 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001838E 4EB9 0000 AE32             		jsr	AnimateSprite
00018394 1028 0022                  		move.b	$22(a0),d0
00018398 0200 0003                  		andi.b	#3,d0
0001839C 0228 00FC 0001             		andi.b	#$FC,1(a0)
000183A2 8128 0001                  		or.b	d0,1(a0)
000183A6 4EF9 0000 DD72             		jmp	DisplaySprite
000183AC                            ; ===========================================================================
000183AC                            ; ---------------------------------------------------------------------------
000183AC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000183AC                            ; ---------------------------------------------------------------------------
000183AC                            
000183AC                            Obj48:					; XREF: Obj_Index
000183AC 7000                       		moveq	#0,d0
000183AE 1028 0024                  		move.b	$24(a0),d0
000183B2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000183B6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000183BA                            ; ===========================================================================
000183BA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000183BC 0000                       		dc.w Obj48_Base-Obj48_Index
000183BE 0000                       		dc.w Obj48_Display2-Obj48_Index
000183C0 0000                       		dc.w loc_17C68-Obj48_Index
000183C2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000183C4                            ; ===========================================================================
000183C4                            
000183C4                            Obj48_Main:				; XREF: Obj48_Index
000183C4 5428 0024                  		addq.b	#2,$24(a0)
000183C8 317C 4080 0026             		move.w	#$4080,$26(a0)
000183CE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000183D4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000183DC 317C 046C 0002             		move.w	#$46C,2(a0)
000183E2 45E8 0028                  		lea	$28(a0),a2
000183E6 14FC 0000                  		move.b	#0,(a2)+
000183EA 7205                       		moveq	#5,d1
000183EC 2248                       		movea.l	a0,a1
000183EE 6000                       		bra.s	loc_17B60
000183F0                            ; ===========================================================================
000183F0                            
000183F0                            Obj48_MakeLinks:
000183F0 4EB9 0000 E20E             		jsr	SingleObjLoad2
000183F6 6600                       		bne.s	Obj48_MakeBall
000183F8 3368 0008 0008             		move.w	8(a0),8(a1)
000183FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018404 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018408 137C 0006 0024             		move.b	#6,$24(a1)
0001840E 237C 0000 81F4 0004        		move.l	#Map_obj15,4(a1)
00018416 337C 0380 0002             		move.w	#$380,2(a1)
0001841C 137C 0001 001A             		move.b	#1,$1A(a1)
00018422 5228 0028                  		addq.b	#1,$28(a0)
00018426                            
00018426                            loc_17B60:				; XREF: Obj48_Main
00018426 3A09                       		move.w	a1,d5
00018428 0445 D000                  		subi.w	#$D000,d5
0001842C EC4D                       		lsr.w	#6,d5
0001842E 0245 007F                  		andi.w	#$7F,d5
00018432 14C5                       		move.b	d5,(a2)+
00018434 137C 0004 0001             		move.b	#4,1(a1)
0001843A 137C 0008 0019             		move.b	#8,$19(a1)
00018440 137C 0006 0018             		move.b	#6,$18(a1)
00018446 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001844C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018450                            
00018450                            Obj48_MakeBall:
00018450 137C 0008 0024             		move.b	#8,$24(a1)
00018456 237C 0000 87E4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001845E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018464 137C 0001 001A             		move.b	#1,$1A(a1)
0001846A 137C 0005 0018             		move.b	#5,$18(a1)
00018470 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018476 4E75                       		rts	
00018478                            ; ===========================================================================
00018478                            
00018478 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001847E                            
0001847E                            ; ===========================================================================
0001847E                            
0001847E                            Obj48_Base:				; XREF: Obj48_Index
0001847E 47F9 0001 8478             		lea	(Obj48_PosData).l,a3
00018484 45E8 0028                  		lea	$28(a0),a2
00018488 7C00                       		moveq	#0,d6
0001848A 1C1A                       		move.b	(a2)+,d6
0001848C                            
0001848C                            loc_17BC6:
0001848C 7800                       		moveq	#0,d4
0001848E 181A                       		move.b	(a2)+,d4
00018490 ED4C                       		lsl.w	#6,d4
00018492 0684 00FF D000             		addi.l	#$FFD000,d4
00018498 2244                       		movea.l	d4,a1
0001849A 101B                       		move.b	(a3)+,d0
0001849C B029 003C                  		cmp.b	$3C(a1),d0
000184A0 6700                       		beq.s	loc_17BE0
000184A2 5229 003C                  		addq.b	#1,$3C(a1)
000184A6                            
000184A6                            loc_17BE0:
000184A6 51CE FFE4                  		dbf	d6,loc_17BC6
000184AA                            
000184AA B029 003C                  		cmp.b	$3C(a1),d0
000184AE 6600                       		bne.s	loc_17BFA
000184B0 2268 0034                  		movea.l	$34(a0),a1
000184B4 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000184BA 6600                       		bne.s	loc_17BFA
000184BC 5428 0024                  		addq.b	#2,$24(a0)
000184C0                            
000184C0                            loc_17BFA:
000184C0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000184C6 6700                       		beq.s	Obj48_Display
000184C8 5268 0032                  		addq.w	#1,$32(a0)
000184CC                            
000184CC                            Obj48_Display:
000184CC 6100 0000                  		bsr.w	sub_17C2A
000184D0 1028 0026                  		move.b	$26(a0),d0
000184D4 4EB9 0000 8166             		jsr	(Obj15_Move2).l
000184DA 4EF9 0000 DD72             		jmp	DisplaySprite
000184E0                            ; ===========================================================================
000184E0                            
000184E0                            Obj48_Display2:				; XREF: Obj48_Index
000184E0 6100 0000                  		bsr.w	sub_17C2A
000184E4 4EB9 0000 8126             		jsr	(Obj48_Move).l
000184EA 4EF9 0000 DD72             		jmp	DisplaySprite
000184F0                            
000184F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184F0                            
000184F0                            
000184F0                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000184F0 2268 0034                  		movea.l	$34(a0),a1
000184F4 0628 0020 001B             		addi.b	#$20,$1B(a0)
000184FA 6400                       		bcc.s	loc_17C3C
000184FC 0868 0000 001A             		bchg	#0,$1A(a0)
00018502                            
00018502                            loc_17C3C:
00018502 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018508 3029 000C                  		move.w	$C(a1),d0
0001850C D068 0032                  		add.w	$32(a0),d0
00018510 3140 0038                  		move.w	d0,$38(a0)
00018514 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001851A 4A29 0022                  		tst.b	$22(a1)
0001851E 6A00                       		bpl.s	locret_17C66
00018520 10BC 003F                  		move.b	#$3F,0(a0)
00018524 117C 0000 0024             		move.b	#0,$24(a0)
0001852A                            
0001852A                            locret_17C66:
0001852A 4E75                       		rts	
0001852C                            ; End of function sub_17C2A
0001852C                            
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            loc_17C68:				; XREF: Obj48_Index
0001852C 2268 0034                  		movea.l	$34(a0),a1
00018530 4A29 0022                  		tst.b	$22(a1)
00018534 6A00                       		bpl.s	Obj48_Display3
00018536 10BC 003F                  		move.b	#$3F,0(a0)
0001853A 117C 0000 0024             		move.b	#0,$24(a0)
00018540                            
00018540                            Obj48_Display3:
00018540 4EF9 0000 DD72             		jmp	DisplaySprite
00018546                            ; ===========================================================================
00018546                            
00018546                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018546 7000                       		moveq	#0,d0
00018548 4A28 001A                  		tst.b	$1A(a0)
0001854C 6600                       		bne.s	Obj48_Vanish
0001854E 5200                       		addq.b	#1,d0
00018550                            
00018550                            Obj48_Vanish:
00018550 1140 001A                  		move.b	d0,$1A(a0)
00018554 2268 0034                  		movea.l	$34(a0),a1
00018558 4A29 0022                  		tst.b	$22(a1)
0001855C 6A00                       		bpl.s	Obj48_Display4
0001855E 117C 0000 0020             		move.b	#0,$20(a0)
00018564 6100 FB94                  		bsr.w	BossDefeated
00018568 5328 003C                  		subq.b	#1,$3C(a0)
0001856C 6A00                       		bpl.s	Obj48_Display4
0001856E 10BC 003F                  		move.b	#$3F,(a0)
00018572 117C 0000 0024             		move.b	#0,$24(a0)
00018578                            
00018578                            Obj48_Display4:
00018578 4EF9 0000 DD72             		jmp	DisplaySprite
0001857E                            ; ===========================================================================
0001857E                            Ani_Eggman:
0001857E                            	include "_anim\Eggman.asm"
0001857E                            ; ---------------------------------------------------------------------------
0001857E                            ; Animation script - Eggman (bosses)
0001857E                            ; ---------------------------------------------------------------------------
0001857E 0000                       		dc.w byte_17CD4-Ani_Eggman
00018580 0000                       		dc.w byte_17CD8-Ani_Eggman
00018582 0000                       		dc.w byte_17CDC-Ani_Eggman
00018584 0000                       		dc.w byte_17CE0-Ani_Eggman
00018586 0000                       		dc.w byte_17CE4-Ani_Eggman
00018588 0000                       		dc.w byte_17CE8-Ani_Eggman
0001858A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001858C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001858E 0000                       		dc.w byte_17CF4-Ani_Eggman
00018590 0000                       		dc.w byte_17CF8-Ani_Eggman
00018592 0000                       		dc.w byte_17CFC-Ani_Eggman
00018594 0000                       		dc.w byte_17D00-Ani_Eggman
00018596 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001859A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001859E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000185A2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000185A6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000185AA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000185AE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000185B2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000185B6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000185BA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000185BE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000185C2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000185CE                            		even
000185CE                            		even
000185CE                            Ani_TetoB:
000185CE                            	include "_anim\TetoB.asm"
000185CE                            ; ---------------------------------------------------------------------------
000185CE                            ; Animation script - Eggman (bosses)
000185CE                            ; ---------------------------------------------------------------------------
000185CE 0000                       		dc.w spin-Ani_TetoB
000185D0 0000                       		dc.w static-Ani_TetoB
000185D2 0000                       		dc.w static2-Ani_TetoB
000185D4 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000185DB 0500 FF                    static:	dc.b 5,	0, $FF
000185DE 0501 FF                    static2:	dc.b 5,	1, $FF
000185E2 00                         		even
000185E2 00                         		even
000185E2                            ; ---------------------------------------------------------------------------
000185E2                            ; Sprite mappings - Eggman (boss levels)
000185E2                            ; ---------------------------------------------------------------------------
000185E2                            Map_Eggman:
000185E2                            	include "_maps\Eggman.asm"
000185E2                            Map_dc7e:
000185E2 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000185E4 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000185E6 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000185E8 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000185EA 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000185EC 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000185EE 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000185F0 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000185F2 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000185F4 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000185F6 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000185F8 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000185FA 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000185FC 06                         Map_dc7e_1A: 	dc.b $6
000185FD EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018602 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018607 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001860C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018611 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018616 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001861B 02                         Map_dc7e_39: 	dc.b $2
0001861C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018621 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018626 02                         Map_dc7e_44: 	dc.b $2
00018627 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001862C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018631 03                         Map_dc7e_4F: 	dc.b $3
00018632 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018637 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001863C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018641 03                         Map_dc7e_5F: 	dc.b $3
00018642 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018647 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001864C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018651 03                         Map_dc7e_6F: 	dc.b $3
00018652 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018657 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001865C EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018661 03                         Map_dc7e_7F: 	dc.b $3
00018662 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018667 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001866C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018671 04                         Map_dc7e_8F: 	dc.b $4
00018672 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018677 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001867C EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018681 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018686 01                         Map_dc7e_A4: 	dc.b $1
00018687 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001868C 01                         Map_dc7e_AA: 	dc.b $1
0001868D 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018692 00                         Map_dc7e_B0: 	dc.b $0
00018693 02                         Map_dc7e_B1: 	dc.b $2
00018694 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018699 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001869E 02                         Map_dc7e_BC: 	dc.b $2
0001869F F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000186A4 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000186AA 00                         	even
000186AA 00                         	even
000186AA                            
000186AA                            ; ---------------------------------------------------------------------------
000186AA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000186AA                            ; ---------------------------------------------------------------------------
000186AA                            Map_BossItems:
000186AA                            	include "_maps\Boss items.asm"
000186AA                            ; ---------------------------------------------------------------------------
000186AA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000186AA                            ; ---------------------------------------------------------------------------
000186AA 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000186AE 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000186B2 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000186B6 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000186BA 01                         byte_17DE4:	dc.b 1
000186BB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186C0 02                         byte_17DEA:	dc.b 2
000186C1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000186C6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186CB 00                         		dc.b 0
000186CC 01                         byte_17DF6:	dc.b 1
000186CD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000186D2 01                         byte_17DFC:	dc.b 1
000186D3 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000186D8 01                         byte_17E02:	dc.b 1
000186D9 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000186DE 04                         byte_17E08:	dc.b 4
000186DF F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000186E4 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000186E9 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000186EE 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000186F3 00                         		dc.b 0
000186F4 02                         byte_17E1E:	dc.b 2
000186F5 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000186FA 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000186FF 00                         		dc.b 0
00018700 02                         byte_17E2A:	dc.b 2
00018701 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018706 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001870C 00                         		even
0001870C 00                         		even
0001870C                            
0001870C                            ; ===========================================================================
0001870C                            ; ---------------------------------------------------------------------------
0001870C                            ; Object 77 - Fatass teto boss fight in LZ -STDH
0001870C                            ; ---------------------------------------------------------------------------
0001870C                            
0001870C                            
0001870C                            obj77:					; XREF: Obj_Index
0001870C 7000                       		moveq	#0,d0
0001870E 1028 0024                  		move.b	$24(a0),d0
00018712 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018716 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001871A                            ; ===========================================================================
0001871A 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001871C 0000                       		dc.w obj77_ShipMain-obj77_Index
0001871E 0000                       		dc.w obj77_FaceMain-obj77_Index
00018720 0000                       		dc.w obj77_FlameMain-obj77_Index
00018722                            
00018722 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018724 0401                       		dc.b 4,	1
00018726 0607                       		dc.b 6,	7
00018728                            ; ===========================================================================
00018728                            
00018728                            obj77_Main:				; XREF: obj77_Index
00018728 45F9 0001 8722             		lea	(obj77_ObjData).l,a2
0001872E 2248                       		movea.l	a0,a1
00018730 7202                       		moveq	#2,d1
00018732 6000                       		bra.s	obj77_LoadBoss
00018734                            ; ===========================================================================
00018734                            
00018734                            obj77_Loop:
00018734 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001873A 6600                       		bne.s	loc2_17772
0001873C                            
0001873C                            obj77_LoadBoss:				; XREF: obj77_Main
0001873C 135A 0024                  		move.b	(a2)+,$24(a1)
00018740 12BC 0077                  		move.b	#$77,0(a1)
00018744 3368 0008 0008             		move.w	8(a0),8(a1)
0001874A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018750 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018758 337C 0400 0002             		move.w	#$400,2(a1)
0001875E 137C 0004 0001             		move.b	#4,1(a1)
00018764 137C 0020 0019             		move.b	#$20,$19(a1)
0001876A 137C 0003 0018             		move.b	#3,$18(a1)
00018770 135A 001C                  		move.b	(a2)+,$1C(a1)
00018774 2348 0034                  		move.l	a0,$34(a1)
00018778 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
0001877C                            
0001877C                            loc2_17772:
0001877C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018782 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018788 117C 000F 0020             		move.b	#$F,$20(a0)
0001878E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018794                            
00018794                            obj77_ShipMain:				; XREF: obj77_Index
00018794 7000                       		moveq	#0,d0
00018796 1028 0025                  		move.b	$25(a0),d0
0001879A 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001879E 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
000187A2 43F9 0001 85CE             		lea	(Ani_TetoB).l,a1
000187A8 4EB9 0000 AE32             		jsr	AnimateSprite
000187AE 1028 0022                  		move.b	$22(a0),d0
000187B2 0200 0003                  		andi.b	#3,d0
000187B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000187BC 8128 0001                  		or.b	d0,1(a0)
000187C0 4EF9 0000 DD72             		jmp	DisplaySprite
000187C6                            ; ===========================================================================
000187C6 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000187C8 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000187CA 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000187CC 0000                       		dc.w loc2_17954-obj77_ShipIndex
000187CE 0000                       		dc.w fatassruns-obj77_ShipIndex		
000187D0 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000187D2 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000187D4 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000187D6                            ; ===========================================================================
000187D6                            
000187D6                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000187D6                            	;	move.w	#$100,$12(a0)	; move ship down
000187D6 6100 F964                  		bsr.w	BossMove
000187DA 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000187E0 6600                       		bne.s	loc2_177E6
000187E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000187E8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000187EC                            
000187EC                            loc2_177E6:
000187EC                            ;		move.b	$3F(a0),d0
000187EC                            ;		jsr	(CalcSine).l
000187EC EC40                       		asr.w	#6,d0
000187EE D068 0038                  		add.w	$38(a0),d0
000187F2 3140 000C                  		move.w	d0,$C(a0)
000187F6 3168 0030 0008             		move.w	$30(a0),8(a0)
000187FC 5428 003F                  		addq.b	#2,$3F(a0)
00018800 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018806 6400                       		bcc.s	locret_1784A2
00018808 4A28 0022                  		tst.b	$22(a0)
0001880C 6B00                       		bmi.s	loc2_1784C
0001880E 4A28 0020                  		tst.b	$20(a0)
00018812 6600                       		bne.s	locret_1784A2
00018814 4A28 003E                  		tst.b	$3E(a0)
00018818 6600                       		bne.s	obj77_ShipFlash
0001881A 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018820 303C 00AC                  		move.w	#$AC,d0
00018824 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001882A                            
0001882A                            obj77_ShipFlash:
0001882A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001882E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018830 4A51                       		tst.w	(a1)
00018832 6600                       		bne.s	loc2_1783C
00018834 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018838                            
00018838                            loc2_1783C:
00018838 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001883A 5328 003E                  		subq.b	#1,$3E(a0)
0001883E 6600                       		bne.s	locret_1784A2
00018840 117C 000F 0020             		move.b	#$F,$20(a0)
00018846                            
00018846                            locret_1784A2:
00018846 4E75                       		rts	
00018848                            ; ===========================================================================
00018848                            
00018848                            loc2_1784C:				; XREF: loc2_177E6
00018848 7064                       		moveq	#100,d0
0001884A 6100 0000                  		bsr.w	AddPoints
0001884E 117C 000A 0025             		move.b	#$A,$25(a0)
00018854 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001885A 4E75                       		rts	
0001885C                            ; ===========================================================================
0001885C                            
0001885C                            obj77_MakeBall:				; XREF: obj77_ShipIndex
0001885C 317C FF00 0010             		move.w	#-$100,$10(a0)
00018862 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018868 6100 F8D2                  		bsr.w	BossMove
0001886C 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018872 6600                       		bne.s	loc2_17916
00018874 317C 0000 0010             		move.w	#0,$10(a0)
0001887A 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018880 317C 0000 0012             		move.w	#0,$12(a0)
00018886 5428 0025                  		addq.b	#2,$25(a0)
0001888A                            
0001888A                            loc2_17910:
0001888A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018890                            
00018890                            loc2_17916:
00018890 6000 FF5A                  		bra.w	loc2_177E6
00018894                            ; ===========================================================================
00018894                            
00018894                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018894 6100 F8A6                  		bsr.w	BossMove
00018898 5368 003C                  		subq.w	#1,$3C(a0)
0001889C 6A00                       		bpl.s	loc2_17950 ; if time remains go here
0001889E 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
000188A4 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
000188AA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
000188B0 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000188B6 6600                       		bne.s	loc2_17950 ; if not branch
000188B8                            
000188B8                            fatass_attack:
000188B8 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000188BE 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000188C4 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000188CA 6600                       		bne.s	loc2_17950    ; if not you know the drill
000188CC 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188D0 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188D6                            
000188D6                            loc2_17950:
000188D6 6000 FF14                  		bra.w	loc2_177E6
000188DA                            ; ===========================================================================
000188DA                            
000188DA                            loc2_17954:				; XREF: obj77_ShipIndex
000188DA 6100 F860                  		bsr.w	BossMove
000188DE 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000188E4                            		; i suck at programming
000188E4 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000188EA 6600                       		bne.s	loc2_17976    ; if not blah blah
000188EC 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188F2 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188F6 303C 00B9                  		move.w	#$B9,d0
000188FA 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
00018900                            
00018900                            Peartobombs:	
00018900 4EB9 0000 E20E                		jsr	SingleObjLoad2
00018906 6600                       		bne.s	secondone
00018908 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
0001890C 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018912 337C 0670 000C             		move.w	#$670,$C(a1)
00018918                            secondone:		
00018918 4EB9 0000 E20E                		jsr	SingleObjLoad2
0001891E 6600                       		bne.s	loc2_17976		
00018920 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018924 337C 1D20 0008             		move.w	#$1D20,8(a1)
0001892A 337C 0670 000C             		move.w	#$670,$C(a1)
00018930                            lastone:
00018930 4EB9 0000 E20E                		jsr	SingleObjLoad2
00018936 6600                       		bne.s	loc2_17976		
00018938 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
0001893C 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018942 337C 0670 000C             		move.w	#$670,$C(a1)
00018948                            		
00018948                            loc2_17976:
00018948 6000 FEA2                  		bra.w	loc2_177E6
0001894C                            		
0001894C                            ; ===========================================================================
0001894C                            Fatassruns:
0001894C 6100 F7EE                   		bsr.w	BossMove
00018950 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018956 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
0001895C 6600                       		bne.s	processstuff ; is not go here
0001895E 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018964 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
0001896A 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
0001896E 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018974 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
0001897A                            		
0001897A                            		
0001897A                            processstuff:
0001897A 6000 FE70                  		bra.w	loc2_177E6
0001897E                            ; ===========================================================================
0001897E                            
0001897E                            loc2_1797A:				; XREF: obj77_ShipIndex
0001897E 5368 003C                  		subq.w	#1,$3C(a0)
00018982 6B00                       		bmi.s	loc2_17984
00018984 6000 F774                  		bra.w	BossDefeated
00018988                            ; ===========================================================================
00018988                            
00018988                            loc2_17984:
00018988 08E8 0000 0022             		bset	#0,$22(a0)
0001898E 08A8 0007 0022             		bclr	#7,$22(a0)
00018994 4268 0010                  		clr.w	$10(a0)
00018998 5428 0025                  		addq.b	#2,$25(a0)
0001899C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000189A2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000189A6 6600                       		bne.s	locret_179AA2
000189A8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000189AE                            
000189AE                            locret_179AA2:
000189AE 4E75                       		rts	
000189B0                            ; ===========================================================================
000189B0                            
000189B0                            loc2_179AC:				; XREF: obj77_ShipIndex
000189B0 5268 003C                  		addq.w	#1,$3C(a0)
000189B4 6700                       		beq.s	loc2_179BC
000189B6 6A00                       		bpl.s	loc2_179C2
000189B8 0668 0018 0012             		addi.w	#$18,$12(a0)
000189BE 6000                       		bra.s	loc2_179EE
000189C0                            ; ===========================================================================
000189C0                            
000189C0                            loc2_179BC:
000189C0 4268 0012                  		clr.w	$12(a0)
000189C4 6000                       		bra.s	loc2_179EE
000189C6                            ; ===========================================================================
000189C6                            
000189C6                            loc2_179C2:
000189C6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000189CC 6500                       		bcs.s	loc2_179DA
000189CE 6700                       		beq.s	loc2_179E0
000189D0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000189D6 6500                       		bcs.s	loc2_179EE
000189D8 5428 0025                  		addq.b	#2,$25(a0)
000189DC 6000                       		bra.s	loc2_179EE
000189DE                            ; ===========================================================================
000189DE                            
000189DE                            loc2_179DA:
000189DE 5168 0012                  		subq.w	#8,$12(a0)
000189E2 6000                       		bra.s	loc2_179EE
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            loc2_179E0:
000189E4 4268 0012                  		clr.w	$12(a0)
000189E8 303C 0097                  		move.w	#$97,d0
000189EC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
000189F2                            
000189F2                            loc2_179EE:
000189F2 6100 F748                  		bsr.w	BossMove
000189F6 6000 FDF4                  		bra.w	loc2_177E6
000189FA                            ; ===========================================================================
000189FA                            
000189FA                            loc2_179F6:				; XREF: obj77_ShipIndex
000189FA 317C 0400 0010             		move.w	#$400,$10(a0)
00018A00 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A06 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018A0C 6700                       		beq.s	loc2_17A10
00018A0E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A12 6000                       		bra.s	loc2_17A16
00018A14                            ; ===========================================================================
00018A14                            
00018A14                            loc2_17A10:
00018A14 4A28 0001                  		tst.b	1(a0)
00018A18 6A00                       		bpl.s	obj77_ShipDel
00018A1A                            
00018A1A                            loc2_17A16:
00018A1A 6100 F720                  		bsr.w	BossMove
00018A1E 6000 FDCC                  		bra.w	loc2_177E6
00018A22                            ; ===========================================================================
00018A22                            
00018A22                            obj77_ShipDel:
00018A22 4EF9 0000 DDAE             		jmp	DeleteObject
00018A28                            ; ===========================================================================
00018A28                            
00018A28                            obj77_FaceMain:				; XREF: obj77_Index
00018A28 4E75                       		rts
00018A2A                            ; ===========================================================================
00018A2A                            
00018A2A                            obj77_FlameMain:			; XREF: obj77_Index
00018A2A 4E75                       		rts
00018A2C                            ; ===========================================================================
00018A2C                            
00018A2C                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018A2C 43F9 0001 85CE             		lea	(Ani_TetoB).l,a1
00018A32 4EB9 0000 AE32             		jsr	AnimateSprite
00018A38 4EF9 0000 DD72             		jmp	DisplaySprite
00018A3E                            ; ---------------------------------------------------------------------------
00018A3E                            ; Sprite mappings - Fatass teto boss
00018A3E                            ; ---------------------------------------------------------------------------
00018A3E                            Map_TetoBoss:
00018A3E                            	include "_maps\tetoboss.asm"
00018A3E                            Map_f09a:
00018A3E 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018A40 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018A42 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018A44 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018A46 03                         Map_f09a_8: 	dc.b $3
00018A47 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018A4C 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018A51 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018A56 06                         Map_f09a_18: 	dc.b $6
00018A57 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018A5C 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018A61 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018A66 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018A6B EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018A70 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018A75 03                         Map_f09a_37: 	dc.b $3
00018A76 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018A7B 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018A80 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018A85 06                         Map_f09a_47: 	dc.b $6
00018A86 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018A8B 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018A90 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018A95 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018A9A ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018A9F 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018AA4                            	even
00018AA4                            	even
00018AA4                            ; ===========================================================================
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            ; Object 73 - Eggman (MZ)
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            
00018AA4                            Obj73:					; XREF: Obj_Index
00018AA4 7000                       		moveq	#0,d0
00018AA6 1028 0024                  		move.b	$24(a0),d0
00018AAA 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018AAE 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018AB2                            ; ===========================================================================
00018AB2 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018AB4 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018AB6 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018AB8 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018ABA 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018ABC                            
00018ABC 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018ABF 0401 04                    		dc.b 4,	1, 4
00018AC2 0607 04                    		dc.b 6,	7, 4
00018AC5 0800 03                    		dc.b 8,	0, 3
00018AC8                            ; ===========================================================================
00018AC8                            
00018AC8                            Obj73_Main:				; XREF: Obj73_Index
00018AC8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018ACE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AD4 117C 000F 0020             		move.b	#$F,$20(a0)
00018ADA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018AE0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018AE4 2248                       		movea.l	a0,a1
00018AE6 7203                       		moveq	#3,d1
00018AE8 6000                       		bra.s	Obj73_LoadBoss
00018AEA                            ; ===========================================================================
00018AEA                            
00018AEA                            Obj73_Loop:
00018AEA 4EB9 0000 E20E             		jsr	SingleObjLoad2
00018AF0 6600                       		bne.s	Obj73_ShipMain
00018AF2 12BC 0073                  		move.b	#$73,0(a1)
00018AF6 3368 0008 0008             		move.w	8(a0),8(a1)
00018AFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B02                            
00018B02                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B02 08A8 0000 0022             		bclr	#0,$22(a0)
00018B08 4229 0025                  		clr.b	$25(a1)
00018B0C 135A 0024                  		move.b	(a2)+,$24(a1)
00018B10 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B14 135A 0018                  		move.b	(a2)+,$18(a1)
00018B18 237C 0001 85E2 0004        		move.l	#Map_Eggman,4(a1)
00018B20 337C 0400 0002             		move.w	#$400,2(a1)
00018B26 137C 0004 0001             		move.b	#4,1(a1)
00018B2C 137C 0020 0019             		move.b	#$20,$19(a1)
00018B32 2348 0034                  		move.l	a0,$34(a1)
00018B36 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018B3A                            
00018B3A                            Obj73_ShipMain:
00018B3A 7000                       		moveq	#0,d0
00018B3C 1028 0025                  		move.b	$25(a0),d0
00018B40 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018B44 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018B48 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
00018B4E 4EB9 0000 AE32             		jsr	AnimateSprite
00018B54 7003                       		moveq	#3,d0
00018B56 C028 0022                  		and.b	$22(a0),d0
00018B5A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B60 8128 0001                  		or.b	d0,1(a0)
00018B64 4EF9 0000 DD72             		jmp	DisplaySprite
00018B6A                            ; ===========================================================================
00018B6A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018B6C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018B6E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018B70 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018B72 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018B74                            ; ===========================================================================
00018B74                            
00018B74                            loc_18302:				; XREF: Obj73_ShipIndex
00018B74 1028 003F                  		move.b	$3F(a0),d0
00018B78 5428 003F                  		addq.b	#2,$3F(a0)
00018B7C 4EB9 0000 2C64             		jsr	(CalcSine).l
00018B82 E440                       		asr.w	#2,d0
00018B84 3140 0012                  		move.w	d0,$12(a0)
00018B88 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B8E 6100 F5AC                  		bsr.w	BossMove
00018B92 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B98 6600                       		bne.s	loc_18334
00018B9A 5428 0025                  		addq.b	#2,$25(a0)
00018B9E 4228 0028                  		clr.b	$28(a0)
00018BA2 42A8 0010                  		clr.l	$10(a0)
00018BA6                            
00018BA6                            loc_18334:
00018BA6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018BAC 1140 0034                  		move.b	d0,$34(a0)
00018BB0                            
00018BB0                            loc_1833E:
00018BB0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018BB6 3168 0030 0008             		move.w	$30(a0),8(a0)
00018BBC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018BC2 6400                       		bcc.s	locret_18390
00018BC4 4A28 0022                  		tst.b	$22(a0)
00018BC8 6B00                       		bmi.s	loc_18392
00018BCA 4A28 0020                  		tst.b	$20(a0)
00018BCE 6600                       		bne.s	locret_18390
00018BD0 4A28 003E                  		tst.b	$3E(a0)
00018BD4 6600                       		bne.s	loc_18374
00018BD6 117C 0028 003E             		move.b	#$28,$3E(a0)
00018BDC 303C 00AC                  		move.w	#$AC,d0
00018BE0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018BE6                            
00018BE6                            loc_18374:
00018BE6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018BEA 7000                       		moveq	#0,d0
00018BEC 4A51                       		tst.w	(a1)
00018BEE 6600                       		bne.s	loc_18382
00018BF0 303C 0EEE                  		move.w	#$EEE,d0
00018BF4                            
00018BF4                            loc_18382:
00018BF4 3280                       		move.w	d0,(a1)
00018BF6 5328 003E                  		subq.b	#1,$3E(a0)
00018BFA 6600                       		bne.s	locret_18390
00018BFC 117C 000F 0020             		move.b	#$F,$20(a0)
00018C02                            
00018C02                            locret_18390:
00018C02 4E75                       		rts	
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            loc_18392:				; XREF: loc_1833E
00018C04 7064                       		moveq	#100,d0
00018C06 6100 0000                  		bsr.w	AddPoints
00018C0A 117C 0004 0025             		move.b	#4,$25(a0)
00018C10 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C16 4268 0010                  		clr.w	$10(a0)
00018C1A 4E75                       		rts	
00018C1C                            ; ===========================================================================
00018C1C                            
00018C1C                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C1C 7000                       		moveq	#0,d0
00018C1E 1028 0028                  		move.b	$28(a0),d0
00018C22 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018C26 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018C2A 0228 0006 0028             		andi.b	#6,$28(a0)
00018C30 6000 FF7E                  		bra.w	loc_1833E
00018C34                            ; ===========================================================================
00018C34 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018C36 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C38 0000                       		dc.w loc_183CA-off_183C2
00018C3A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C3C                            ; ===========================================================================
00018C3C                            
00018C3C                            loc_183CA:				; XREF: off_183C2
00018C3C 4A68 0010                  		tst.w	$10(a0)
00018C40 6600                       		bne.s	loc_183FE
00018C42 7040                       		moveq	#$40,d0
00018C44 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C4A 6700                       		beq.s	loc_183E6
00018C4C 6500                       		bcs.s	loc_183DE
00018C4E 4440                       		neg.w	d0
00018C50                            
00018C50                            loc_183DE:
00018C50 3140 0012                  		move.w	d0,$12(a0)
00018C54 6000 F4E6                  		bra.w	BossMove
00018C58                            ; ===========================================================================
00018C58                            
00018C58                            loc_183E6:
00018C58 317C 0200 0010             		move.w	#$200,$10(a0)
00018C5E 317C 0100 0012             		move.w	#$100,$12(a0)
00018C64 0828 0000 0022             		btst	#0,$22(a0)
00018C6A 6600                       		bne.s	loc_183FE
00018C6C 4468 0010                  		neg.w	$10(a0)
00018C70                            
00018C70                            loc_183FE:
00018C70 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018C76 6400                       		bcc.s	Obj73_MakeLava
00018C78 6100 F4C2                  		bsr.w	BossMove
00018C7C 5968 0012                  		subq.w	#4,$12(a0)
00018C80                            
00018C80                            Obj73_MakeLava:
00018C80 5328 0034                  		subq.b	#1,$34(a0)
00018C84 6400                       		bcc.s	loc_1845C
00018C86 4EB9 0000 E1F8             		jsr	SingleObjLoad
00018C8C 6600                       		bne.s	loc_1844A
00018C8E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018C92 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018C98 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C9E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018CA4 80FC 0050                  		divu.w	#$50,d0
00018CA8 4840                       		swap	d0
00018CAA 0640 1878                  		addi.w	#$1878,d0
00018CAE 3340 0008                  		move.w	d0,8(a1)
00018CB2 EE09                       		lsr.b	#7,d1
00018CB4 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018CBA                            
00018CBA                            loc_1844A:
00018CBA 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018CC0 0200 001F                  		andi.b	#$1F,d0
00018CC4 0600 0040                  		addi.b	#$40,d0
00018CC8 1140 0034                  		move.b	d0,$34(a0)
00018CCC                            
00018CCC                            loc_1845C:
00018CCC 0828 0000 0022             		btst	#0,$22(a0)
00018CD2 6700                       		beq.s	loc_18474
00018CD4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018CDA 6D00                       		blt.s	locret_1849C
00018CDC 317C 1910 0030             		move.w	#$1910,$30(a0)
00018CE2 6000                       		bra.s	loc_18482
00018CE4                            ; ===========================================================================
00018CE4                            
00018CE4                            loc_18474:
00018CE4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018CEA 6E00                       		bgt.s	locret_1849C
00018CEC 317C 1830 0030             		move.w	#$1830,$30(a0)
00018CF2                            
00018CF2                            loc_18482:
00018CF2 4268 0010                  		clr.w	$10(a0)
00018CF6 317C FE80 0012             		move.w	#-$180,$12(a0)
00018CFC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D02 6400                       		bcc.s	loc_18498
00018D04 4468 0012                  		neg.w	$12(a0)
00018D08                            
00018D08                            loc_18498:
00018D08 5428 0028                  		addq.b	#2,$28(a0)
00018D0C                            
00018D0C                            locret_1849C:
00018D0C 4E75                       		rts	
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            Obj73_MakeLava2:			; XREF: off_183C2
00018D0E 6100 F42C                  		bsr.w	BossMove
00018D12 3028 0038                  		move.w	$38(a0),d0
00018D16 0440 022C                  		subi.w	#$22C,d0
00018D1A 6E00                       		bgt.s	locret_184F4
00018D1C 303C 022C                  		move.w	#$22C,d0
00018D20 4A68 0012                  		tst.w	$12(a0)
00018D24 6700                       		beq.s	loc_184EA
00018D26 4268 0012                  		clr.w	$12(a0)
00018D2A 317C 0050 003C             		move.w	#$50,$3C(a0)
00018D30 0868 0000 0022             		bchg	#0,$22(a0)
00018D36 4EB9 0000 E1F8             		jsr	SingleObjLoad
00018D3C 6600                       		bne.s	loc_184EA
00018D3E 3368 0030 0008             		move.w	$30(a0),8(a1)
00018D44 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018D4A 0669 0018 000C             		addi.w	#$18,$C(a1)
00018D50 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018D54 137C 0001 0028             		move.b	#1,$28(a1)
00018D5A                            
00018D5A                            loc_184EA:
00018D5A 5368 003C                  		subq.w	#1,$3C(a0)
00018D5E 6600                       		bne.s	locret_184F4
00018D60 5428 0028                  		addq.b	#2,$28(a0)
00018D64                            
00018D64                            locret_184F4:
00018D64 4E75                       		rts	
00018D66                            ; ===========================================================================
00018D66                            
00018D66                            loc_184F6:				; XREF: Obj73_ShipIndex
00018D66 5368 003C                  		subq.w	#1,$3C(a0)
00018D6A 6B00                       		bmi.s	loc_18500
00018D6C 6000 F38C                  		bra.w	BossDefeated
00018D70                            ; ===========================================================================
00018D70                            
00018D70                            loc_18500:
00018D70 08E8 0000 0022             		bset	#0,$22(a0)
00018D76 08A8 0007 0022             		bclr	#7,$22(a0)
00018D7C 4268 0010                  		clr.w	$10(a0)
00018D80 5428 0025                  		addq.b	#2,$25(a0)
00018D84 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D8A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D8E 6600                       		bne.s	locret_1852A
00018D90 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D96 4268 0012                  		clr.w	$12(a0)
00018D9A                            
00018D9A                            locret_1852A:
00018D9A 4E75                       		rts	
00018D9C                            ; ===========================================================================
00018D9C                            
00018D9C                            loc_1852C:				; XREF: Obj73_ShipIndex
00018D9C 5268 003C                  		addq.w	#1,$3C(a0)
00018DA0 6700                       		beq.s	loc_18544
00018DA2 6A00                       		bpl.s	loc_1854E
00018DA4 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018DAA 6400                       		bcc.s	loc_18544
00018DAC 0668 0018 0012             		addi.w	#$18,$12(a0)
00018DB2 6000                       		bra.s	loc_1857A
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            loc_18544:
00018DB4 4268 0012                  		clr.w	$12(a0)
00018DB8 4268 003C                  		clr.w	$3C(a0)
00018DBC 6000                       		bra.s	loc_1857A
00018DBE                            ; ===========================================================================
00018DBE                            
00018DBE                            loc_1854E:
00018DBE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018DC4 6500                       		bcs.s	loc_18566
00018DC6 6700                       		beq.s	loc_1856C
00018DC8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018DCE 6500                       		bcs.s	loc_1857A
00018DD0 5428 0025                  		addq.b	#2,$25(a0)
00018DD4 6000                       		bra.s	loc_1857A
00018DD6                            ; ===========================================================================
00018DD6                            
00018DD6                            loc_18566:
00018DD6 5168 0012                  		subq.w	#8,$12(a0)
00018DDA 6000                       		bra.s	loc_1857A
00018DDC                            ; ===========================================================================
00018DDC                            
00018DDC                            loc_1856C:
00018DDC 4268 0012                  		clr.w	$12(a0)
00018DE0 303C 0083                  		move.w	#$83,d0
00018DE4 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018DEA                            
00018DEA                            loc_1857A:
00018DEA 6100 F350                  		bsr.w	BossMove
00018DEE 6000 FDC0                  		bra.w	loc_1833E
00018DF2                            ; ===========================================================================
00018DF2                            
00018DF2                            loc_18582:				; XREF: Obj73_ShipIndex
00018DF2 317C 0500 0010             		move.w	#$500,$10(a0)
00018DF8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018DFE 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018E04 6400                       		bcc.s	loc_1859C
00018E06 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018E0A 6000                       		bra.s	loc_185A2
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            loc_1859C:
00018E0C 4A28 0001                  		tst.b	1(a0)
00018E10 6A00                       		bpl.s	Obj73_ShipDel
00018E12                            
00018E12                            loc_185A2:
00018E12 6100 F328                  		bsr.w	BossMove
00018E16 6000 FD98                  		bra.w	loc_1833E
00018E1A                            ; ===========================================================================
00018E1A                            
00018E1A                            Obj73_ShipDel:
00018E1A 4EF9 0000 DDAE             		jmp	DeleteObject
00018E20                            ; ===========================================================================
00018E20                            
00018E20                            Obj73_FaceMain:				; XREF: Obj73_Index
00018E20 7000                       		moveq	#0,d0
00018E22 7201                       		moveq	#1,d1
00018E24 2268 0034                  		movea.l	$34(a0),a1
00018E28 1029 0025                  		move.b	$25(a1),d0
00018E2C 5540                       		subq.w	#2,d0
00018E2E 6600                       		bne.s	loc_185D2
00018E30 0829 0001 0028             		btst	#1,$28(a1)
00018E36 6700                       		beq.s	loc_185DA
00018E38 4A69 0012                  		tst.w	$12(a1)
00018E3C 6600                       		bne.s	loc_185DA
00018E3E 7204                       		moveq	#4,d1
00018E40 6000                       		bra.s	loc_185EE
00018E42                            ; ===========================================================================
00018E42                            
00018E42                            loc_185D2:
00018E42 5500                       		subq.b	#2,d0
00018E44 6B00                       		bmi.s	loc_185DA
00018E46 720A                       		moveq	#$A,d1
00018E48 6000                       		bra.s	loc_185EE
00018E4A                            ; ===========================================================================
00018E4A                            
00018E4A                            loc_185DA:
00018E4A 4A29 0020                  		tst.b	$20(a1)
00018E4E 6600                       		bne.s	loc_185E4
00018E50 7205                       		moveq	#5,d1
00018E52 6000                       		bra.s	loc_185EE
00018E54                            ; ===========================================================================
00018E54                            
00018E54                            loc_185E4:
00018E54 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018E5A 6500                       		bcs.s	loc_185EE
00018E5C 7204                       		moveq	#4,d1
00018E5E                            
00018E5E                            loc_185EE:
00018E5E 1141 001C                  		move.b	d1,$1C(a0)
00018E62 5900                       		subq.b	#4,d0
00018E64 6600                       		bne.s	loc_18602
00018E66 117C 0006 001C             		move.b	#6,$1C(a0)
00018E6C 4A28 0001                  		tst.b	1(a0)
00018E70 6A00                       		bpl.s	Obj73_FaceDel
00018E72                            
00018E72                            loc_18602:
00018E72 6000                       		bra.s	Obj73_Display
00018E74                            ; ===========================================================================
00018E74                            
00018E74                            Obj73_FaceDel:
00018E74 4EF9 0000 DDAE             		jmp	DeleteObject
00018E7A                            ; ===========================================================================
00018E7A                            
00018E7A                            Obj73_FlameMain:			; XREF: Obj73_Index
00018E7A 117C 0007 001C             		move.b	#7,$1C(a0)
00018E80 2268 0034                  		movea.l	$34(a0),a1
00018E84 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E8A 6D00                       		blt.s	loc_1862A
00018E8C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E92 4A28 0001                  		tst.b	1(a0)
00018E96 6A00                       		bpl.s	Obj73_FlameDel
00018E98 6000                       		bra.s	loc_18636
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            loc_1862A:
00018E9A 4A69 0010                  		tst.w	$10(a1)
00018E9E 6700                       		beq.s	loc_18636
00018EA0 117C 0008 001C             		move.b	#8,$1C(a0)
00018EA6                            
00018EA6                            loc_18636:
00018EA6 6000                       		bra.s	Obj73_Display
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018EA8 4EF9 0000 DDAE             		jmp	DeleteObject
00018EAE                            ; ===========================================================================
00018EAE                            
00018EAE                            Obj73_Display:
00018EAE 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
00018EB4 4EB9 0000 AE32             		jsr	AnimateSprite
00018EBA                            
00018EBA                            loc_1864A:
00018EBA 2268 0034                  		movea.l	$34(a0),a1
00018EBE 3169 0008 0008             		move.w	8(a1),8(a0)
00018EC4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018ECA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018ED0 7003                       		moveq	#3,d0
00018ED2 C028 0022                  		and.b	$22(a0),d0
00018ED6 0228 00FC 0001             		andi.b	#-4,1(a0)
00018EDC 8128 0001                  		or.b	d0,1(a0)
00018EE0 4EF9 0000 DD72             		jmp	DisplaySprite
00018EE6                            ; ===========================================================================
00018EE6                            
00018EE6                            Obj73_TubeMain:				; XREF: Obj73_Index
00018EE6 2268 0034                  		movea.l	$34(a0),a1
00018EEA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EF0 6600                       		bne.s	loc_18688
00018EF2 4A28 0001                  		tst.b	1(a0)
00018EF6 6A00                       		bpl.s	Obj73_TubeDel
00018EF8                            
00018EF8                            loc_18688:
00018EF8 217C 0001 86AA 0004        		move.l	#Map_BossItems,4(a0)
00018F00 317C 246C 0002             		move.w	#$246C,2(a0)
00018F06 117C 0004 001A             		move.b	#4,$1A(a0)
00018F0C 60AC                       		bra.s	loc_1864A
00018F0E                            ; ===========================================================================
00018F0E                            
00018F0E                            Obj73_TubeDel:
00018F0E 4EF9 0000 DDAE             		jmp	DeleteObject
00018F14                            ; ===========================================================================
00018F14                            ; ---------------------------------------------------------------------------
00018F14                            ; Object 74 - lava that	Eggman drops (MZ)
00018F14                            ; ---------------------------------------------------------------------------
00018F14                            
00018F14                            Obj74:					; XREF: Obj_Index
00018F14 7000                       		moveq	#0,d0
00018F16 1028 0024                  		move.b	$24(a0),d0
00018F1A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018F1E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018F22 4EF9 0000 DD72             		jmp	DisplaySprite
00018F28                            ; ===========================================================================
00018F28 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018F2A 0000                       		dc.w Obj74_Action-Obj74_Index
00018F2C 0000                       		dc.w loc_18886-Obj74_Index
00018F2E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            Obj74_Main:				; XREF: Obj74_Index
00018F30 117C 0008 0016             		move.b	#8,$16(a0)
00018F36 117C 0008 0017             		move.b	#8,$17(a0)
00018F3C 217C 0000 BA30 0004        		move.l	#Map_obj14,4(a0)
00018F44 317C 0345 0002             		move.w	#$345,2(a0)
00018F4A 117C 0004 0001             		move.b	#4,1(a0)
00018F50 117C 0005 0018             		move.b	#5,$18(a0)
00018F56 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F5C 117C 0008 0019             		move.b	#8,$19(a0)
00018F62 5428 0024                  		addq.b	#2,$24(a0)
00018F66 4A28 0028                  		tst.b	$28(a0)
00018F6A 6600                       		bne.s	loc_1870A
00018F6C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F72 5428 0024                  		addq.b	#2,$24(a0)
00018F76 6000 0000                  		bra.w	loc_18886
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            loc_1870A:
00018F7A 117C 001E 0029             		move.b	#$1E,$29(a0)
00018F80 303C 00AE                  		move.w	#$AE,d0
00018F84 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018F8A                            
00018F8A                            Obj74_Action:				; XREF: Obj74_Index
00018F8A 7000                       		moveq	#0,d0
00018F8C 1028 0025                  		move.b	$25(a0),d0
00018F90 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018F94 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018F98 4EB9 0000 DD4C             		jsr	SpeedToPos
00018F9E 43F9 0000 EC2C             		lea	(Ani_obj14).l,a1
00018FA4 4EB9 0000 AE32             		jsr	AnimateSprite
00018FAA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018FB0 6200                       		bhi.s	Obj74_Delete
00018FB2 4E75                       		rts	
00018FB4                            ; ===========================================================================
00018FB4                            
00018FB4                            Obj74_Delete:
00018FB4 4EF9 0000 DDAE             		jmp	DeleteObject
00018FBA                            ; ===========================================================================
00018FBA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018FBC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018FBE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018FC0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018FC2                            ; ===========================================================================
00018FC2                            
00018FC2                            Obj74_Drop:				; XREF: Obj74_Index2
00018FC2 08E8 0001 0022             		bset	#1,$22(a0)
00018FC8 5328 0029                  		subq.b	#1,$29(a0)
00018FCC 6A00                       		bpl.s	locret_18780
00018FCE 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FD4 4228 0028                  		clr.b	$28(a0)
00018FD8 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FDE 08A8 0001 0022             		bclr	#1,$22(a0)
00018FE4 6100 C686                  		bsr.w	ObjHitFloor
00018FE8 4A41                       		tst.w	d1
00018FEA 6A00                       		bpl.s	locret_18780
00018FEC 5428 0025                  		addq.b	#2,$25(a0)
00018FF0                            
00018FF0                            locret_18780:
00018FF0 4E75                       		rts	
00018FF2                            ; ===========================================================================
00018FF2                            
00018FF2                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018FF2 5568 000C                  		subq.w	#2,$C(a0)
00018FF6 08E8 0007 0002             		bset	#7,2(a0)
00018FFC 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019002 4268 0012                  		clr.w	$12(a0)
00019006 3168 0008 0030             		move.w	8(a0),$30(a0)
0001900C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019012 117C 0003 0029             		move.b	#3,$29(a0)
00019018 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001901E 6600                       		bne.s	loc_187CA
00019020 47D1                       		lea	(a1),a3
00019022 45D0                       		lea	(a0),a2
00019024 7003                       		moveq	#3,d0
00019026                            
00019026                            Obj74_Loop:
00019026 26DA                       		move.l	(a2)+,(a3)+
00019028 26DA                       		move.l	(a2)+,(a3)+
0001902A 26DA                       		move.l	(a2)+,(a3)+
0001902C 26DA                       		move.l	(a2)+,(a3)+
0001902E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019032                            
00019032 4469 0010                  		neg.w	$10(a1)
00019036 5429 0025                  		addq.b	#2,$25(a1)
0001903A                            
0001903A                            loc_187CA:
0001903A 5428 0025                  		addq.b	#2,$25(a0)
0001903E 4E75                       		rts	
00019040                            
00019040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019040                            
00019040                            
00019040                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019040 4EB9 0000 E20E             		jsr	SingleObjLoad2
00019046 6600                       		bne.s	locret_187EE
00019048 3368 0008 0008             		move.w	8(a0),8(a1)
0001904E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019054 12BC 0074                  		move.b	#$74,(a1)
00019058 337C 0067 0028             		move.w	#$67,$28(a1)
0001905E                            
0001905E                            locret_187EE:
0001905E 4E75                       		rts	
00019060                            ; End of function Obj74_Duplicate2
00019060                            
00019060                            ; ===========================================================================
00019060                            
00019060                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019060 6100 C60A                  		bsr.w	ObjHitFloor
00019064 4A41                       		tst.w	d1
00019066 6A00                       		bpl.s	loc_18826
00019068 3028 0008                  		move.w	8(a0),d0
0001906C 0C40 1940                  		cmpi.w	#$1940,d0
00019070 6E00                       		bgt.s	loc_1882C
00019072 3228 0030                  		move.w	$30(a0),d1
00019076 B240                       		cmp.w	d0,d1
00019078 6700                       		beq.s	loc_1881E
0001907A 0240 0010                  		andi.w	#$10,d0
0001907E 0241 0010                  		andi.w	#$10,d1
00019082 B240                       		cmp.w	d0,d1
00019084 6700                       		beq.s	loc_1881E
00019086 61B8                       		bsr.s	Obj74_Duplicate2
00019088 3168 0008 0032             		move.w	8(a0),$32(a0)
0001908E                            
0001908E                            loc_1881E:
0001908E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019094 4E75                       		rts	
00019096                            ; ===========================================================================
00019096                            
00019096                            loc_18826:
00019096 5428 0025                  		addq.b	#2,$25(a0)
0001909A 4E75                       		rts	
0001909C                            ; ===========================================================================
0001909C                            
0001909C                            loc_1882C:
0001909C 5428 0024                  		addq.b	#2,$24(a0)
000190A0 4E75                       		rts	
000190A2                            ; ===========================================================================
000190A2                            
000190A2                            Obj74_FallEdge:				; XREF: Obj74_Index2
000190A2 08A8 0001 0022             		bclr	#1,$22(a0)
000190A8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000190AE 3028 0008                  		move.w	8(a0),d0
000190B2 9068 0032                  		sub.w	$32(a0),d0
000190B6 6A00                       		bpl.s	loc_1884A
000190B8 4440                       		neg.w	d0
000190BA                            
000190BA                            loc_1884A:
000190BA 0C40 0012                  		cmpi.w	#$12,d0
000190BE 6600                       		bne.s	loc_18856
000190C0 08A8 0007 0002             		bclr	#7,2(a0)
000190C6                            
000190C6                            loc_18856:
000190C6 6100 C5A4                  		bsr.w	ObjHitFloor
000190CA 4A41                       		tst.w	d1
000190CC 6A00                       		bpl.s	locret_1887E
000190CE 5328 0029                  		subq.b	#1,$29(a0)
000190D2 6700                       		beq.s	Obj74_Delete2
000190D4 4268 0012                  		clr.w	$12(a0)
000190D8 3168 0032 0008             		move.w	$32(a0),8(a0)
000190DE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000190E4 08E8 0007 0002             		bset	#7,2(a0)
000190EA 5528 0025                  		subq.b	#2,$25(a0)
000190EE                            
000190EE                            locret_1887E:
000190EE 4E75                       		rts	
000190F0                            ; ===========================================================================
000190F0                            
000190F0                            Obj74_Delete2:
000190F0 4EF9 0000 DDAE             		jmp	DeleteObject
000190F6                            ; ===========================================================================
000190F6                            
000190F6                            loc_18886:				; XREF: Obj74_Index
000190F6 08E8 0007 0002             		bset	#7,2(a0)
000190FC 5328 0029                  		subq.b	#1,$29(a0)
00019100 6600                       		bne.s	Obj74_Animate
00019102 117C 0001 001C             		move.b	#1,$1C(a0)
00019108 5968 000C                  		subq.w	#4,$C(a0)
0001910C 4228 0020                  		clr.b	$20(a0)
00019110                            
00019110                            Obj74_Animate:
00019110 43F9 0000 EC2C             		lea	(Ani_obj14).l,a1
00019116 4EF9 0000 AE32             		jmp	AnimateSprite
0001911C                            ; ===========================================================================
0001911C                            
0001911C                            Obj74_Delete3:				; XREF: Obj74_Index
0001911C 4EF9 0000 DDAE             		jmp	DeleteObject
00019122                            ; ===========================================================================
00019122                            
00019122                            Obj7A_Delete:
00019122 4EF9 0000 DDAE             		jmp	DeleteObject
00019128                            ; ===========================================================================
00019128                            ; ---------------------------------------------------------------------------
00019128                            ; Object 7A - Eggman (SLZ)
00019128                            ; ---------------------------------------------------------------------------
00019128                            
00019128                            Obj7A:					; XREF: Obj_Index
00019128 7000                       		moveq	#0,d0
0001912A 1028 0024                  		move.b	$24(a0),d0
0001912E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019132 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019136                            ; ===========================================================================
00019136 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019138 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001913A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001913C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001913E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019140                            
00019140 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019143 0401 04                    		dc.b 4,	1, 4
00019146 0607 04                    		dc.b 6,	7, 4
00019149 0800 03                    		dc.b 8,	0, 3
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            Obj7A_Main:				; XREF: Obj7A_Index
0001914C 317C 2188 0008             		move.w	#$2188,8(a0)
00019152 317C 0228 000C             		move.w	#$228,$C(a0)
00019158 3168 0008 0030             		move.w	8(a0),$30(a0)
0001915E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019164 117C 000F 0020             		move.b	#$F,$20(a0)
0001916A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019170 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019174 2248                       		movea.l	a0,a1
00019176 7203                       		moveq	#3,d1
00019178 6000                       		bra.s	Obj7A_LoadBoss
0001917A                            ; ===========================================================================
0001917A                            
0001917A                            Obj7A_Loop:
0001917A 4EB9 0000 E20E             		jsr	SingleObjLoad2
00019180 6600                       		bne.s	loc_1895C
00019182 12BC 007A                  		move.b	#$7A,0(a1)
00019186 3368 0008 0008             		move.w	8(a0),8(a1)
0001918C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019192                            
00019192                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019192 08A8 0000 0022             		bclr	#0,$22(a0)
00019198 4229 0025                  		clr.b	$25(a1)
0001919C 135A 0024                  		move.b	(a2)+,$24(a1)
000191A0 135A 001C                  		move.b	(a2)+,$1C(a1)
000191A4 135A 0018                  		move.b	(a2)+,$18(a1)
000191A8 237C 0001 85E2 0004        		move.l	#Map_Eggman,4(a1)
000191B0 337C 0400 0002             		move.w	#$400,2(a1)
000191B6 137C 0004 0001             		move.b	#4,1(a1)
000191BC 137C 0020 0019             		move.b	#$20,$19(a1)
000191C2 2348 0034                  		move.l	a0,$34(a1)
000191C6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000191CA                            
000191CA                            loc_1895C:
000191CA 43F8 D040                  		lea	($FFFFD040).w,a1
000191CE 45E8 002A                  		lea	$2A(a0),a2
000191D2 705E                       		moveq	#$5E,d0
000191D4 723E                       		moveq	#$3E,d1
000191D6                            
000191D6                            loc_18968:
000191D6 B011                       		cmp.b	(a1),d0
000191D8 6600                       		bne.s	loc_18974
000191DA 4A29 0028                  		tst.b	$28(a1)
000191DE 6700                       		beq.s	loc_18974
000191E0 34C9                       		move.w	a1,(a2)+
000191E2                            
000191E2                            loc_18974:
000191E2 D2FC 0040                  		adda.w	#$40,a1
000191E6 51C9 FFEE                  		dbf	d1,loc_18968
000191EA                            
000191EA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000191EA 7000                       		moveq	#0,d0
000191EC 1028 0025                  		move.b	$25(a0),d0
000191F0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000191F4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000191F8 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
000191FE 4EB9 0000 AE32             		jsr	AnimateSprite
00019204 7003                       		moveq	#3,d0
00019206 C028 0022                  		and.b	$22(a0),d0
0001920A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019210 8128 0001                  		or.b	d0,1(a0)
00019214 4EF9 0000 DD72             		jmp	DisplaySprite
0001921A                            ; ===========================================================================
0001921A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001921C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001921E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019220 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019222 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019224 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019226                            ; ===========================================================================
00019226                            
00019226                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019226 317C FF00 0010             		move.w	#-$100,$10(a0)
0001922C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019232 6400                       		bcc.s	loc_189CA
00019234 5428 0025                  		addq.b	#2,$25(a0)
00019238                            
00019238                            loc_189CA:
00019238 6100 EF02                  		bsr.w	BossMove
0001923C 1028 003F                  		move.b	$3F(a0),d0
00019240 5428 003F                  		addq.b	#2,$3F(a0)
00019244 4EB9 0000 2C64             		jsr	(CalcSine).l
0001924A EC40                       		asr.w	#6,d0
0001924C D068 0038                  		add.w	$38(a0),d0
00019250 3140 000C                  		move.w	d0,$C(a0)
00019254 3168 0030 0008             		move.w	$30(a0),8(a0)
0001925A 6000                       		bra.s	loc_189FE
0001925C                            ; ===========================================================================
0001925C                            
0001925C                            loc_189EE:
0001925C 6100 EEDE                  		bsr.w	BossMove
00019260 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019266 3168 0030 0008             		move.w	$30(a0),8(a0)
0001926C                            
0001926C                            loc_189FE:
0001926C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019272 6400                       		bcc.s	locret_18A44
00019274 4A28 0022                  		tst.b	$22(a0)
00019278 6B00                       		bmi.s	loc_18A46
0001927A 4A28 0020                  		tst.b	$20(a0)
0001927E 6600                       		bne.s	locret_18A44
00019280 4A28 003E                  		tst.b	$3E(a0)
00019284 6600                       		bne.s	loc_18A28
00019286 117C 0020 003E             		move.b	#$20,$3E(a0)
0001928C 303C 00AC                  		move.w	#$AC,d0
00019290 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019296                            
00019296                            loc_18A28:
00019296 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001929A 7000                       		moveq	#0,d0
0001929C 4A51                       		tst.w	(a1)
0001929E 6600                       		bne.s	loc_18A36
000192A0 303C 0EEE                  		move.w	#$EEE,d0
000192A4                            
000192A4                            loc_18A36:
000192A4 3280                       		move.w	d0,(a1)
000192A6 5328 003E                  		subq.b	#1,$3E(a0)
000192AA 6600                       		bne.s	locret_18A44
000192AC 117C 000F 0020             		move.b	#$F,$20(a0)
000192B2                            
000192B2                            locret_18A44:
000192B2 4E75                       		rts	
000192B4                            ; ===========================================================================
000192B4                            
000192B4                            loc_18A46:
000192B4 7064                       		moveq	#100,d0
000192B6 6100 0000                  		bsr.w	AddPoints
000192BA 117C 0006 0025             		move.b	#6,$25(a0)
000192C0 117C 0078 003C             		move.b	#$78,$3C(a0)
000192C6 4268 0010                  		clr.w	$10(a0)
000192CA 4E75                       		rts	
000192CC                            ; ===========================================================================
000192CC                            
000192CC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000192CC 3028 0030                  		move.w	$30(a0),d0
000192D0 317C 0200 0010             		move.w	#$200,$10(a0)
000192D6 0828 0000 0022             		btst	#0,$22(a0)
000192DC 6600                       		bne.s	loc_18A7C
000192DE 4468 0010                  		neg.w	$10(a0)
000192E2 0C40 2008                  		cmpi.w	#$2008,d0
000192E6 6E00                       		bgt.s	loc_18A88
000192E8 6000                       		bra.s	loc_18A82
000192EA                            ; ===========================================================================
000192EA                            
000192EA                            loc_18A7C:
000192EA 0C40 2138                  		cmpi.w	#$2138,d0
000192EE 6D00                       		blt.s	loc_18A88
000192F0                            
000192F0                            loc_18A82:
000192F0 0868 0000 0022             		bchg	#0,$22(a0)
000192F6                            
000192F6                            loc_18A88:
000192F6 3028 0008                  		move.w	8(a0),d0
000192FA 72FF                       		moveq	#-1,d1
000192FC 7402                       		moveq	#2,d2
000192FE 45E8 002A                  		lea	$2A(a0),a2
00019302 7828                       		moveq	#$28,d4
00019304 4A68 0010                  		tst.w	$10(a0)
00019308 6A00                       		bpl.s	loc_18A9E
0001930A 4444                       		neg.w	d4
0001930C                            
0001930C                            loc_18A9E:
0001930C 321A                       		move.w	(a2)+,d1
0001930E 2641                       		movea.l	d1,a3
00019310 082B 0003 0022             		btst	#3,$22(a3)
00019316 6600                       		bne.s	loc_18AB4
00019318 362B 0008                  		move.w	8(a3),d3
0001931C D644                       		add.w	d4,d3
0001931E 9640                       		sub.w	d0,d3
00019320 6700                       		beq.s	loc_18AC0
00019322                            
00019322                            loc_18AB4:
00019322 51CA FFE8                  		dbf	d2,loc_18A9E
00019326                            
00019326 1142 0028                  		move.b	d2,$28(a0)
0001932A 6000 FF0C                  		bra.w	loc_189CA
0001932E                            ; ===========================================================================
0001932E                            
0001932E                            loc_18AC0:
0001932E 1142 0028                  		move.b	d2,$28(a0)
00019332 5428 0025                  		addq.b	#2,$25(a0)
00019336 117C 0028 003C             		move.b	#$28,$3C(a0)
0001933C 6000 FEFA                  		bra.w	loc_189CA
00019340                            ; ===========================================================================
00019340                            
00019340                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019340 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019346 6600                       		bne.s	loc_18B36
00019348 70FF                       		moveq	#-1,d0
0001934A 1028 0028                  		move.b	$28(a0),d0
0001934E 4880                       		ext.w	d0
00019350 6B00                       		bmi.s	loc_18B40
00019352 5540                       		subq.w	#2,d0
00019354 4440                       		neg.w	d0
00019356 D040                       		add.w	d0,d0
00019358 43E8 002A                  		lea	$2A(a0),a1
0001935C 3031 0000                  		move.w	(a1,d0.w),d0
00019360 2440                       		movea.l	d0,a2
00019362 43F8 D040                  		lea	($FFFFD040).w,a1
00019366 723E                       		moveq	#$3E,d1
00019368                            
00019368                            loc_18AFA:
00019368 B0A9 003C                  		cmp.l	$3C(a1),d0
0001936C 6700                       		beq.s	loc_18B40
0001936E D2FC 0040                  		adda.w	#$40,a1
00019372 51C9 FFF4                  		dbf	d1,loc_18AFA
00019376                            
00019376 2F08                       		move.l	a0,-(sp)
00019378 41D2                       		lea	(a2),a0
0001937A 4EB9 0000 E20E             		jsr	SingleObjLoad2
00019380 205F                       		movea.l	(sp)+,a0
00019382 6600                       		bne.s	loc_18B40
00019384 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019388 3368 0008 0008             		move.w	8(a0),8(a1)
0001938E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019394 0669 0020 000C             		addi.w	#$20,$C(a1)
0001939A 136A 0022 0022             		move.b	$22(a2),$22(a1)
000193A0 234A 003C                  		move.l	a2,$3C(a1)
000193A4                            
000193A4                            loc_18B36:
000193A4 5328 003C                  		subq.b	#1,$3C(a0)
000193A8 6700                       		beq.s	loc_18B40
000193AA 6000 FEC0                  		bra.w	loc_189FE
000193AE                            ; ===========================================================================
000193AE                            
000193AE                            loc_18B40:
000193AE 5528 0025                  		subq.b	#2,$25(a0)
000193B2 6000 FE84                  		bra.w	loc_189CA
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            loc_18B48:				; XREF: Obj7A_ShipIndex
000193B6 5328 003C                  		subq.b	#1,$3C(a0)
000193BA 6B00                       		bmi.s	loc_18B52
000193BC 6000 ED3C                  		bra.w	BossDefeated
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            loc_18B52:
000193C0 5428 0025                  		addq.b	#2,$25(a0)
000193C4 4268 0012                  		clr.w	$12(a0)
000193C8 08E8 0000 0022             		bset	#0,$22(a0)
000193CE 08A8 0007 0022             		bclr	#7,$22(a0)
000193D4 4268 0010                  		clr.w	$10(a0)
000193D8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000193DE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000193E2 6600                       		bne.s	loc_18B7C
000193E4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000193EA                            
000193EA                            loc_18B7C:
000193EA 6000 FE80                  		bra.w	loc_189FE
000193EE                            ; ===========================================================================
000193EE                            
000193EE                            loc_18B80:				; XREF: Obj7A_ShipIndex
000193EE 5228 003C                  		addq.b	#1,$3C(a0)
000193F2 6700                       		beq.s	loc_18B90
000193F4 6A00                       		bpl.s	loc_18B96
000193F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000193FC 6000                       		bra.s	loc_18BC2
000193FE                            ; ===========================================================================
000193FE                            
000193FE                            loc_18B90:
000193FE 4268 0012                  		clr.w	$12(a0)
00019402 6000                       		bra.s	loc_18BC2
00019404                            ; ===========================================================================
00019404                            
00019404                            loc_18B96:
00019404 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001940A 6500                       		bcs.s	loc_18BAE
0001940C 6700                       		beq.s	loc_18BB4
0001940E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019414 6500                       		bcs.s	loc_18BC2
00019416 5428 0025                  		addq.b	#2,$25(a0)
0001941A 6000                       		bra.s	loc_18BC2
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            loc_18BAE:
0001941C 5168 0012                  		subq.w	#8,$12(a0)
00019420 6000                       		bra.s	loc_18BC2
00019422                            ; ===========================================================================
00019422                            
00019422                            loc_18BB4:
00019422 4268 0012                  		clr.w	$12(a0)
00019426 303C 0084                  		move.w	#$84,d0
0001942A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
00019430                            
00019430                            loc_18BC2:
00019430 6000 FE2A                  		bra.w	loc_189EE
00019434                            ; ===========================================================================
00019434                            
00019434                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019434 317C 0400 0010             		move.w	#$400,$10(a0)
0001943A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019440 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019446 6400                       		bcc.s	loc_18BE0
00019448 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001944C 6000                       		bra.s	loc_18BE8
0001944E                            ; ===========================================================================
0001944E                            
0001944E                            loc_18BE0:
0001944E 4A28 0001                  		tst.b	1(a0)
00019452 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019456                            
00019456                            loc_18BE8:
00019456 6100 ECE4                  		bsr.w	BossMove
0001945A 6000 FDDC                  		bra.w	loc_189CA
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001945E 7000                       		moveq	#0,d0
00019460 7201                       		moveq	#1,d1
00019462 2268 0034                  		movea.l	$34(a0),a1
00019466 1029 0025                  		move.b	$25(a1),d0
0001946A 0C00 0006                  		cmpi.b	#6,d0
0001946E 6B00                       		bmi.s	loc_18C06
00019470 720A                       		moveq	#$A,d1
00019472 6000                       		bra.s	loc_18C1A
00019474                            ; ===========================================================================
00019474                            
00019474                            loc_18C06:
00019474 4A29 0020                  		tst.b	$20(a1)
00019478 6600                       		bne.s	loc_18C10
0001947A 7205                       		moveq	#5,d1
0001947C 6000                       		bra.s	loc_18C1A
0001947E                            ; ===========================================================================
0001947E                            
0001947E                            loc_18C10:
0001947E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019484 6500                       		bcs.s	loc_18C1A
00019486 7204                       		moveq	#4,d1
00019488                            
00019488                            loc_18C1A:
00019488 1141 001C                  		move.b	d1,$1C(a0)
0001948C 0C00 000A                  		cmpi.b	#$A,d0
00019490 6600                       		bne.s	loc_18C32
00019492 117C 0006 001C             		move.b	#6,$1C(a0)
00019498 4A28 0001                  		tst.b	1(a0)
0001949C 6A00 FC84                  		bpl.w	Obj7A_Delete
000194A0                            
000194A0                            loc_18C32:
000194A0 6000                       		bra.s	loc_18C6C
000194A2                            ; ===========================================================================
000194A2                            
000194A2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000194A2 117C 0008 001C             		move.b	#8,$1C(a0)
000194A8 2268 0034                  		movea.l	$34(a0),a1
000194AC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000194B2 6600                       		bne.s	loc_18C56
000194B4 4A28 0001                  		tst.b	1(a0)
000194B8 6A00 FC68                  		bpl.w	Obj7A_Delete
000194BC 117C 000B 001C             		move.b	#$B,$1C(a0)
000194C2 6000                       		bra.s	loc_18C6C
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            loc_18C56:
000194C4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000194CA 6E00                       		bgt.s	loc_18C6C
000194CC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000194D2 6D00                       		blt.s	loc_18C6C
000194D4 117C 0007 001C             		move.b	#7,$1C(a0)
000194DA                            
000194DA                            loc_18C6C:
000194DA 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
000194E0 4EB9 0000 AE32             		jsr	AnimateSprite
000194E6                            
000194E6                            loc_18C78:
000194E6 2268 0034                  		movea.l	$34(a0),a1
000194EA 3169 0008 0008             		move.w	8(a1),8(a0)
000194F0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194F6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194FC 7003                       		moveq	#3,d0
000194FE C028 0022                  		and.b	$22(a0),d0
00019502 0228 00FC 0001             		andi.b	#-4,1(a0)
00019508 8128 0001                  		or.b	d0,1(a0)
0001950C 4EF9 0000 DD72             		jmp	DisplaySprite
00019512                            ; ===========================================================================
00019512                            
00019512                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019512 2268 0034                  		movea.l	$34(a0),a1
00019516 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001951C 6600                       		bne.s	loc_18CB8
0001951E 4A28 0001                  		tst.b	1(a0)
00019522 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019526                            
00019526                            loc_18CB8:
00019526 217C 0001 86AA 0004        		move.l	#Map_BossItems,4(a0)
0001952E 317C 246C 0002             		move.w	#$246C,2(a0)
00019534 117C 0003 001A             		move.b	#3,$1A(a0)
0001953A 60AA                       		bra.s	loc_18C78
0001953C                            ; ===========================================================================
0001953C                            ; ---------------------------------------------------------------------------
0001953C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001953C                            ; ---------------------------------------------------------------------------
0001953C                            
0001953C                            Obj7B:					; XREF: Obj_Index
0001953C 7000                       		moveq	#0,d0
0001953E 1028 0024                  		move.b	$24(a0),d0
00019542 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019546 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001954A 3028 0030                  		move.w	$30(a0),d0
0001954E 0240 FF80                  		andi.w	#$FF80,d0
00019552 3238 F700                  		move.w	($FFFFF700).w,d1
00019556 0441 0080                  		subi.w	#$80,d1
0001955A 0241 FF80                  		andi.w	#$FF80,d1
0001955E 9041                       		sub.w	d1,d0
00019560 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019564 0C40 0280                  		cmpi.w	#$280,d0
00019568 6200 FBB8                  		bhi.w	Obj7A_Delete
0001956C 4EF9 0000 DD72             		jmp	DisplaySprite
00019572                            ; ===========================================================================
00019572 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019574 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019576 0000                       		dc.w loc_18DC6-Obj7B_Index
00019578 0000                       		dc.w loc_18EAA-Obj7B_Index
0001957A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001957C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001957E                            ; ===========================================================================
0001957E                            
0001957E                            Obj7B_Main:				; XREF: Obj7B_Index
0001957E 217C 0001 2138 0004        		move.l	#Map_obj5Ea,4(a0)
00019586 317C 0518 0002             		move.w	#$518,2(a0)
0001958C 117C 0001 001A             		move.b	#1,$1A(a0)
00019592 0028 0004 0001             		ori.b	#4,1(a0)
00019598 117C 0004 0018             		move.b	#4,$18(a0)
0001959E 117C 008B 0020             		move.b	#$8B,$20(a0)
000195A4 117C 000C 0019             		move.b	#$C,$19(a0)
000195AA 2268 003C                  		movea.l	$3C(a0),a1
000195AE 3169 0008 0030             		move.w	8(a1),$30(a0)
000195B4 3169 000C 0034             		move.w	$C(a1),$34(a0)
000195BA 08E8 0000 0022             		bset	#0,$22(a0)
000195C0 3028 0008                  		move.w	8(a0),d0
000195C4 B069 0008                  		cmp.w	8(a1),d0
000195C8 6E00                       		bgt.s	loc_18D68
000195CA 08A8 0000 0022             		bclr	#0,$22(a0)
000195D0 117C 0002 003A             		move.b	#2,$3A(a0)
000195D6                            
000195D6                            loc_18D68:
000195D6 5428 0024                  		addq.b	#2,$24(a0)
000195DA                            
000195DA                            Obj7B_Fall:				; XREF: Obj7B_Index
000195DA 4EB9 0000 DD20             		jsr	ObjectFall
000195E0 2268 003C                  		movea.l	$3C(a0),a1
000195E4 45F9 0000 0000             		lea	(word_19018).l,a2
000195EA 7000                       		moveq	#0,d0
000195EC 1029 001A                  		move.b	$1A(a1),d0
000195F0 3228 0008                  		move.w	8(a0),d1
000195F4 9268 0030                  		sub.w	$30(a0),d1
000195F8 6400                       		bcc.s	loc_18D8E
000195FA 5440                       		addq.w	#2,d0
000195FC                            
000195FC                            loc_18D8E:
000195FC D040                       		add.w	d0,d0
000195FE 3228 0034                  		move.w	$34(a0),d1
00019602 D272 0000                  		add.w	(a2,d0.w),d1
00019606 B268 000C                  		cmp.w	$C(a0),d1
0001960A 6E00                       		bgt.s	locret_18DC4
0001960C 2268 003C                  		movea.l	$3C(a0),a1
00019610 7202                       		moveq	#2,d1
00019612 0828 0000 0022             		btst	#0,$22(a0)
00019618 6700                       		beq.s	loc_18DAE
0001961A 7200                       		moveq	#0,d1
0001961C                            
0001961C                            loc_18DAE:
0001961C 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019622 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019628 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001962E 6000 0000                  		bra.w	loc_18FA2
00019632                            ; ===========================================================================
00019632                            
00019632                            locret_18DC4:
00019632 4E75                       		rts	
00019634                            ; ===========================================================================
00019634                            
00019634                            loc_18DC6:				; XREF: Obj7B_Index
00019634 2268 003C                  		movea.l	$3C(a0),a1
00019638 7000                       		moveq	#0,d0
0001963A 1028 003A                  		move.b	$3A(a0),d0
0001963E 9029 003A                  		sub.b	$3A(a1),d0
00019642 6700                       		beq.s	loc_18E2A
00019644 6400                       		bcc.s	loc_18DDA
00019646 4400                       		neg.b	d0
00019648                            
00019648                            loc_18DDA:
00019648 323C F7E8                  		move.w	#-$818,d1
0001964C 343C FEEC                  		move.w	#-$114,d2
00019650 0C00 0001                  		cmpi.b	#1,d0
00019654 6700                       		beq.s	loc_18E00
00019656 323C F6A0                  		move.w	#-$960,d1
0001965A 343C FF0C                  		move.w	#-$F4,d2
0001965E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019664 6D00                       		blt.s	loc_18E00
00019666 323C F5E0                  		move.w	#-$A20,d1
0001966A 343C FF80                  		move.w	#-$80,d2
0001966E                            
0001966E                            loc_18E00:
0001966E 3141 0012                  		move.w	d1,$12(a0)
00019672 3142 0010                  		move.w	d2,$10(a0)
00019676 3028 0008                  		move.w	8(a0),d0
0001967A 9068 0030                  		sub.w	$30(a0),d0
0001967E 6400                       		bcc.s	loc_18E16
00019680 4468 0010                  		neg.w	$10(a0)
00019684                            
00019684                            loc_18E16:
00019684 117C 0001 001A             		move.b	#1,$1A(a0)
0001968A 317C 0020 0028             		move.w	#$20,$28(a0)
00019690 5428 0024                  		addq.b	#2,$24(a0)
00019694 6000 0000                  		bra.w	loc_18EAA
00019698                            ; ===========================================================================
00019698                            
00019698                            loc_18E2A:				; XREF: loc_18DC6
00019698 45F9 0000 0000             		lea	(word_19018).l,a2
0001969E 7000                       		moveq	#0,d0
000196A0 1029 001A                  		move.b	$1A(a1),d0
000196A4 343C 0028                  		move.w	#$28,d2
000196A8 3228 0008                  		move.w	8(a0),d1
000196AC 9268 0030                  		sub.w	$30(a0),d1
000196B0 6400                       		bcc.s	loc_18E48
000196B2 4442                       		neg.w	d2
000196B4 5440                       		addq.w	#2,d0
000196B6                            
000196B6                            loc_18E48:
000196B6 D040                       		add.w	d0,d0
000196B8 3228 0034                  		move.w	$34(a0),d1
000196BC D272 0000                  		add.w	(a2,d0.w),d1
000196C0 3141 000C                  		move.w	d1,$C(a0)
000196C4 D468 0030                  		add.w	$30(a0),d2
000196C8 3142 0008                  		move.w	d2,8(a0)
000196CC 4268 000E                  		clr.w	$E(a0)
000196D0 4268 000A                  		clr.w	$A(a0)
000196D4 5368 0028                  		subq.w	#1,$28(a0)
000196D8 6600                       		bne.s	loc_18E7A
000196DA 317C 0020 0028             		move.w	#$20,$28(a0)
000196E0 117C 0008 0024             		move.b	#8,$24(a0)
000196E6 4E75                       		rts	
000196E8                            ; ===========================================================================
000196E8                            
000196E8                            loc_18E7A:
000196E8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000196EE 6600                       		bne.s	loc_18E88
000196F0 117C 0005 001F             		move.b	#5,$1F(a0)
000196F6                            
000196F6                            loc_18E88:
000196F6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000196FC 6600                       		bne.s	loc_18E96
000196FE 117C 0002 001F             		move.b	#2,$1F(a0)
00019704                            
00019704                            loc_18E96:
00019704 5328 001E                  		subq.b	#1,$1E(a0)
00019708 6E00                       		bgt.s	locret_18EA8
0001970A 0868 0000 001A             		bchg	#0,$1A(a0)
00019710 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019716                            
00019716                            locret_18EA8:
00019716 4E75                       		rts	
00019718                            ; ===========================================================================
00019718                            
00019718                            loc_18EAA:				; XREF: Obj7B_Index
00019718 43F8 D040                  		lea	($FFFFD040).w,a1
0001971C 707A                       		moveq	#$7A,d0
0001971E 7240                       		moveq	#$40,d1
00019720 743E                       		moveq	#$3E,d2
00019722                            
00019722                            loc_18EB4:
00019722 B011                       		cmp.b	(a1),d0
00019724 6700                       		beq.s	loc_18EC0
00019726 D2C1                       		adda.w	d1,a1
00019728 51CA FFF8                  		dbf	d2,loc_18EB4
0001972C                            
0001972C 6000                       		bra.s	loc_18F38
0001972E                            ; ===========================================================================
0001972E                            
0001972E                            loc_18EC0:
0001972E 3029 0008                  		move.w	8(a1),d0
00019732 3229 000C                  		move.w	$C(a1),d1
00019736 3428 0008                  		move.w	8(a0),d2
0001973A 3628 000C                  		move.w	$C(a0),d3
0001973E 45FA 0000                  		lea	byte_19022(pc),a2
00019742 47FA 0000                  		lea	byte_19026(pc),a3
00019746 181A                       		move.b	(a2)+,d4
00019748 4884                       		ext.w	d4
0001974A D044                       		add.w	d4,d0
0001974C 181B                       		move.b	(a3)+,d4
0001974E 4884                       		ext.w	d4
00019750 D444                       		add.w	d4,d2
00019752 B440                       		cmp.w	d0,d2
00019754 6500                       		bcs.s	loc_18F38
00019756 181A                       		move.b	(a2)+,d4
00019758 4884                       		ext.w	d4
0001975A D044                       		add.w	d4,d0
0001975C 181B                       		move.b	(a3)+,d4
0001975E 4884                       		ext.w	d4
00019760 D444                       		add.w	d4,d2
00019762 B042                       		cmp.w	d2,d0
00019764 6500                       		bcs.s	loc_18F38
00019766 181A                       		move.b	(a2)+,d4
00019768 4884                       		ext.w	d4
0001976A D244                       		add.w	d4,d1
0001976C 181B                       		move.b	(a3)+,d4
0001976E 4884                       		ext.w	d4
00019770 D644                       		add.w	d4,d3
00019772 B641                       		cmp.w	d1,d3
00019774 6500                       		bcs.s	loc_18F38
00019776 181A                       		move.b	(a2)+,d4
00019778 4884                       		ext.w	d4
0001977A D244                       		add.w	d4,d1
0001977C 181B                       		move.b	(a3)+,d4
0001977E 4884                       		ext.w	d4
00019780 D644                       		add.w	d4,d3
00019782 B243                       		cmp.w	d3,d1
00019784 6500                       		bcs.s	loc_18F38
00019786 5428 0024                  		addq.b	#2,$24(a0)
0001978A 4268 0028                  		clr.w	$28(a0)
0001978E 4229 0020                  		clr.b	$20(a1)
00019792 5329 0021                  		subq.b	#1,$21(a1)
00019796 6600                       		bne.s	loc_18F38
00019798 08E9 0007 0022             		bset	#7,$22(a1)
0001979E 4268 0010                  		clr.w	$10(a0)
000197A2 4268 0012                  		clr.w	$12(a0)
000197A6                            
000197A6                            loc_18F38:
000197A6 4A68 0012                  		tst.w	$12(a0)
000197AA 6A00                       		bpl.s	loc_18F5C
000197AC 4EB9 0000 DD20             		jsr	ObjectFall
000197B2 3028 0034                  		move.w	$34(a0),d0
000197B6 0440 002F                  		subi.w	#$2F,d0
000197BA B068 000C                  		cmp.w	$C(a0),d0
000197BE 6E00                       		bgt.s	loc_18F58
000197C0 4EB9 0000 DD20             		jsr	ObjectFall
000197C6                            
000197C6                            loc_18F58:
000197C6 6000 FF20                  		bra.w	loc_18E7A
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            loc_18F5C:
000197CA 4EB9 0000 DD20             		jsr	ObjectFall
000197D0 2268 003C                  		movea.l	$3C(a0),a1
000197D4 45F9 0000 0000             		lea	(word_19018).l,a2
000197DA 7000                       		moveq	#0,d0
000197DC 1029 001A                  		move.b	$1A(a1),d0
000197E0 3228 0008                  		move.w	8(a0),d1
000197E4 9268 0030                  		sub.w	$30(a0),d1
000197E8 6400                       		bcc.s	loc_18F7E
000197EA 5440                       		addq.w	#2,d0
000197EC                            
000197EC                            loc_18F7E:
000197EC D040                       		add.w	d0,d0
000197EE 3228 0034                  		move.w	$34(a0),d1
000197F2 D272 0000                  		add.w	(a2,d0.w),d1
000197F6 B268 000C                  		cmp.w	$C(a0),d1
000197FA 6ECA                       		bgt.s	loc_18F58
000197FC 2268 003C                  		movea.l	$3C(a0),a1
00019800 7202                       		moveq	#2,d1
00019802 4A68 0010                  		tst.w	$10(a0)
00019806 6B00                       		bmi.s	loc_18F9C
00019808 7200                       		moveq	#0,d1
0001980A                            
0001980A                            loc_18F9C:
0001980A 317C 0000 0028             		move.w	#0,$28(a0)
00019810                            
00019810                            loc_18FA2:
00019810 1341 003A                  		move.b	d1,$3A(a1)
00019814 1141 003A                  		move.b	d1,$3A(a0)
00019818 B229 001A                  		cmp.b	$1A(a1),d1
0001981C 6700                       		beq.s	loc_19008
0001981E 08A9 0003 0022             		bclr	#3,$22(a1)
00019824 6700                       		beq.s	loc_19008
00019826 4229 0025                  		clr.b	$25(a1)
0001982A 137C 0002 0024             		move.b	#2,$24(a1)
00019830 45F8 D000                  		lea	($FFFFD000).w,a2
00019834 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001983A 446A 0012                  		neg.w	$12(a2)
0001983E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019844 6600                       		bne.s	loc_18FDC
00019846 E0EA 0012                  		asr	$12(a2)
0001984A                            
0001984A                            loc_18FDC:
0001984A 08EA 0001 0022             		bset	#1,$22(a2)
00019850 08AA 0003 0022             		bclr	#3,$22(a2)
00019856 422A 003C                  		clr.b	$3C(a2)
0001985A 2F08                       		move.l	a0,-(sp)
0001985C 41D2                       		lea	(a2),a0
0001985E 4EBA A356                  		jsr	Obj01_ChkRoll
00019862 205F                       		movea.l	(sp)+,a0
00019864 157C 0002 0024             		move.b	#2,$24(a2)
0001986A 303C 00CC                  		move.w	#$CC,d0
0001986E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019874                            
00019874                            loc_19008:
00019874 4268 0010                  		clr.w	$10(a0)
00019878 4268 0012                  		clr.w	$12(a0)
0001987C 5428 0024                  		addq.b	#2,$24(a0)
00019880 6000 FE66                  		bra.w	loc_18E7A
00019884                            ; ===========================================================================
00019884 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001988E                            		even
0001988E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019892                            		even
00019892 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019896                            		even
00019896                            ; ===========================================================================
00019896                            
00019896                            Obj7B_Explode:				; XREF: Obj7B_Index
00019896 10BC 003F                  		move.b	#$3F,(a0)
0001989A 4228 0024                  		clr.b	$24(a0)
0001989E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000198A4 6700                       		beq.s	Obj7B_MakeFrag
000198A6 4E75                       		rts	
000198A8                            ; ===========================================================================
000198A8                            
000198A8                            Obj7B_MakeFrag:
000198A8 3168 0034 000C             		move.w	$34(a0),$C(a0)
000198AE 7203                       		moveq	#3,d1
000198B0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000198B4                            
000198B4                            Obj7B_Loop:
000198B4 4EB9 0000 E1F8             		jsr	SingleObjLoad
000198BA 6600                       		bne.s	loc_1909A
000198BC 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000198C0 137C 000A 0024             		move.b	#$A,$24(a1)
000198C6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000198CE 137C 0003 0018             		move.b	#3,$18(a1)
000198D4 337C 0518 0002             		move.w	#$518,2(a1)
000198DA 3368 0008 0008             		move.w	8(a0),8(a1)
000198E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198E6 335A 0010                  		move.w	(a2)+,$10(a1)
000198EA 335A 0012                  		move.w	(a2)+,$12(a1)
000198EE 137C 0098 0020             		move.b	#$98,$20(a1)
000198F4 0029 0004 0001             		ori.b	#4,1(a1)
000198FA 08E9 0007 0001             		bset	#7,1(a1)
00019900 137C 000C 0019             		move.b	#$C,$19(a1)
00019906                            
00019906                            loc_1909A:
00019906 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001990A                            
0001990A 4E75                       		rts	
0001990C                            ; ===========================================================================
0001990C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019910 FF60 FDC0                  		dc.w $FF60, $FDC0
00019914 0100 FCC0                  		dc.w $100, $FCC0
00019918 00A0 FDC0                  		dc.w $A0, $FDC0
0001991C                            ; ===========================================================================
0001991C                            
0001991C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001991C 4EB9 0000 DD4C             		jsr	SpeedToPos
00019922 3168 0008 0030             		move.w	8(a0),$30(a0)
00019928 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001992E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019934 7004                       		moveq	#4,d0
00019936 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001993A E448                       		lsr.w	#2,d0
0001993C 1140 001A                  		move.b	d0,$1A(a0)
00019940 4A28 0001                  		tst.b	1(a0)
00019944 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019948 4E75                       		rts	
0001994A                            ; ===========================================================================
0001994A                            ; ---------------------------------------------------------------------------
0001994A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001994A                            ; ---------------------------------------------------------------------------
0001994A                            Map_obj7B:
0001994A                            	include "_maps\obj7B.asm"
0001994A                            ; ---------------------------------------------------------------------------
0001994A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001994A                            ; ---------------------------------------------------------------------------
0001994A 0000                       		dc.w byte_190E2-Map_obj7B
0001994C 0000                       		dc.w byte_190E8-Map_obj7B
0001994E 01                         byte_190E2:	dc.b 1
0001994F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019954 01                         byte_190E8:	dc.b 1
00019955 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001995A                            		even
0001995A                            		even
0001995A                            
0001995A                            ; ===========================================================================
0001995A                            ; ---------------------------------------------------------------------------
0001995A                            ; Object 75 - Eggman (SYZ)
0001995A                            ; ---------------------------------------------------------------------------
0001995A                            
0001995A                            Obj75:					; XREF: Obj_Index
0001995A 7000                       		moveq	#0,d0
0001995C 1028 0024                  		move.b	$24(a0),d0
00019960 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019964 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019968                            ; ===========================================================================
00019968 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001996A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001996C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001996E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019970 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019972                            
00019972 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019975 0401 05                    		dc.b 4,	1, 5
00019978 0607 05                    		dc.b 6,	7, 5
0001997B 0800 05                    		dc.b 8,	0, 5
0001997E                            ; ===========================================================================
0001997E                            
0001997E                            Obj75_Main:				; XREF: Obj75_Index
0001997E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019984 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001998A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019990 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019996 117C 000F 0020             		move.b	#$F,$20(a0)
0001999C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000199A2 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000199A6 2248                       		movea.l	a0,a1
000199A8 7203                       		moveq	#3,d1
000199AA 6000                       		bra.s	Obj75_LoadBoss
000199AC                            ; ===========================================================================
000199AC                            
000199AC                            Obj75_Loop:
000199AC 4EB9 0000 E20E             		jsr	SingleObjLoad2
000199B2 6600                       		bne.s	Obj75_ShipMain
000199B4 12BC 0075                  		move.b	#$75,(a1)
000199B8 3368 0008 0008             		move.w	8(a0),8(a1)
000199BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000199C4                            
000199C4                            Obj75_LoadBoss:				; XREF: Obj75_Main
000199C4 08A8 0000 0022             		bclr	#0,$22(a0)
000199CA 4229 0025                  		clr.b	$25(a1)
000199CE 135A 0024                  		move.b	(a2)+,$24(a1)
000199D2 135A 001C                  		move.b	(a2)+,$1C(a1)
000199D6 135A 0018                  		move.b	(a2)+,$18(a1)
000199DA 237C 0001 85E2 0004        		move.l	#Map_Eggman,4(a1)
000199E2 337C 0400 0002             		move.w	#$400,2(a1)
000199E8 137C 0004 0001             		move.b	#4,1(a1)
000199EE 137C 0020 0019             		move.b	#$20,$19(a1)
000199F4 2348 0034                  		move.l	a0,$34(a1)
000199F8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000199FC                            
000199FC                            Obj75_ShipMain:				; XREF: Obj75_Index
000199FC 7000                       		moveq	#0,d0
000199FE 1028 0025                  		move.b	$25(a0),d0
00019A02 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019A06 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019A0A 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
00019A10 4EB9 0000 AE32             		jsr	AnimateSprite
00019A16 7003                       		moveq	#3,d0
00019A18 C028 0022                  		and.b	$22(a0),d0
00019A1C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A22 8128 0001                  		or.b	d0,1(a0)
00019A26 4EF9 0000 DD72             		jmp	DisplaySprite
00019A2C                            ; ===========================================================================
00019A2C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019A30 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019A34 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019A38                            ; ===========================================================================
00019A38                            
00019A38                            loc_191CC:				; XREF: Obj75_ShipIndex
00019A38 317C FF00 0010             		move.w	#-$100,$10(a0)
00019A3E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019A44 6400                       		bcc.s	loc_191DE
00019A46 5428 0025                  		addq.b	#2,$25(a0)
00019A4A                            
00019A4A                            loc_191DE:
00019A4A 1028 003F                  		move.b	$3F(a0),d0
00019A4E 5428 003F                  		addq.b	#2,$3F(a0)
00019A52 4EB9 0000 2C64             		jsr	(CalcSine).l
00019A58 E440                       		asr.w	#2,d0
00019A5A 3140 0012                  		move.w	d0,$12(a0)
00019A5E                            
00019A5E                            loc_191F2:
00019A5E 6100 E6DC                  		bsr.w	BossMove
00019A62 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A68 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A6E                            
00019A6E                            loc_19202:
00019A6E 3028 0008                  		move.w	8(a0),d0
00019A72 0440 2C00                  		subi.w	#$2C00,d0
00019A76 EA48                       		lsr.w	#5,d0
00019A78 1140 0034                  		move.b	d0,$34(a0)
00019A7C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019A82 6400                       		bcc.s	locret_19256
00019A84 4A28 0022                  		tst.b	$22(a0)
00019A88 6B00                       		bmi.s	loc_19258
00019A8A 4A28 0020                  		tst.b	$20(a0)
00019A8E 6600                       		bne.s	locret_19256
00019A90 4A28 003E                  		tst.b	$3E(a0)
00019A94 6600                       		bne.s	loc_1923A
00019A96 117C 0020 003E             		move.b	#$20,$3E(a0)
00019A9C 303C 00AC                  		move.w	#$AC,d0
00019AA0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019AA6                            
00019AA6                            loc_1923A:
00019AA6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019AAA 7000                       		moveq	#0,d0
00019AAC 4A51                       		tst.w	(a1)
00019AAE 6600                       		bne.s	loc_19248
00019AB0 303C 0EEE                  		move.w	#$EEE,d0
00019AB4                            
00019AB4                            loc_19248:
00019AB4 3280                       		move.w	d0,(a1)
00019AB6 5328 003E                  		subq.b	#1,$3E(a0)
00019ABA 6600                       		bne.s	locret_19256
00019ABC 117C 000F 0020             		move.b	#$F,$20(a0)
00019AC2                            
00019AC2                            locret_19256:
00019AC2 4E75                       		rts	
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            loc_19258:				; XREF: loc_19202
00019AC4 7064                       		moveq	#100,d0
00019AC6 6100 0000                  		bsr.w	AddPoints
00019ACA 117C 0006 0025             		move.b	#6,$25(a0)
00019AD0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019AD6 4268 0010                  		clr.w	$10(a0)
00019ADA 4E75                       		rts	
00019ADC                            ; ===========================================================================
00019ADC                            
00019ADC                            loc_19270:				; XREF: Obj75_ShipIndex
00019ADC 3028 0030                  		move.w	$30(a0),d0
00019AE0 317C 0140 0010             		move.w	#$140,$10(a0)
00019AE6 0828 0000 0022             		btst	#0,$22(a0)
00019AEC 6600                       		bne.s	loc_1928E
00019AEE 4468 0010                  		neg.w	$10(a0)
00019AF2 0C40 2C08                  		cmpi.w	#$2C08,d0
00019AF6 6E00                       		bgt.s	loc_1929E
00019AF8 6000                       		bra.s	loc_19294
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            loc_1928E:
00019AFA 0C40 2D38                  		cmpi.w	#$2D38,d0
00019AFE 6D00                       		blt.s	loc_1929E
00019B00                            
00019B00                            loc_19294:
00019B00 0868 0000 0022             		bchg	#0,$22(a0)
00019B06 4228 003D                  		clr.b	$3D(a0)
00019B0A                            
00019B0A                            loc_1929E:
00019B0A 0440 2C10                  		subi.w	#$2C10,d0
00019B0E 0240 001F                  		andi.w	#$1F,d0
00019B12 0440 001F                  		subi.w	#$1F,d0
00019B16 6A00                       		bpl.s	loc_192AE
00019B18 4440                       		neg.w	d0
00019B1A                            
00019B1A                            loc_192AE:
00019B1A 5340                       		subq.w	#1,d0
00019B1C 6E00                       		bgt.s	loc_192E8
00019B1E 4A28 003D                  		tst.b	$3D(a0)
00019B22 6600                       		bne.s	loc_192E8
00019B24 3238 D008                  		move.w	($FFFFD008).w,d1
00019B28 0441 2C00                  		subi.w	#$2C00,d1
00019B2C EA41                       		asr.w	#5,d1
00019B2E B228 0034                  		cmp.b	$34(a0),d1
00019B32 6600                       		bne.s	loc_192E8
00019B34 7000                       		moveq	#0,d0
00019B36 1028 0034                  		move.b	$34(a0),d0
00019B3A EB40                       		asl.w	#5,d0
00019B3C 0640 2C10                  		addi.w	#$2C10,d0
00019B40 3140 0030                  		move.w	d0,$30(a0)
00019B44 6100 0000                  		bsr.w	Obj75_FindBlocks
00019B48 5428 0025                  		addq.b	#2,$25(a0)
00019B4C 4268 0028                  		clr.w	$28(a0)
00019B50 4268 0010                  		clr.w	$10(a0)
00019B54                            
00019B54                            loc_192E8:
00019B54 6000 FEF4                  		bra.w	loc_191DE
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            loc_192EC:				; XREF: Obj75_ShipIndex
00019B58 7000                       		moveq	#0,d0
00019B5A 1028 0028                  		move.b	$28(a0),d0
00019B5E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019B62 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019B66                            ; ===========================================================================
00019B66 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019B68 0000                       		dc.w loc_19348-off_192FA
00019B6A 0000                       		dc.w loc_1938E-off_192FA
00019B6C 0000                       		dc.w loc_193D0-off_192FA
00019B6E                            ; ===========================================================================
00019B6E                            
00019B6E                            loc_19302:				; XREF: off_192FA
00019B6E 317C 0180 0012             		move.w	#$180,$12(a0)
00019B74 3028 0038                  		move.w	$38(a0),d0
00019B78 0C40 0556                  		cmpi.w	#$556,d0
00019B7C 6500                       		bcs.s	loc_19344
00019B7E 317C 0556 0038             		move.w	#$556,$38(a0)
00019B84 4268 003C                  		clr.w	$3C(a0)
00019B88 70FF                       		moveq	#-1,d0
00019B8A 3028 0036                  		move.w	$36(a0),d0
00019B8E 6700                       		beq.s	loc_1933C
00019B90 2240                       		movea.l	d0,a1
00019B92 137C 00FF 0029             		move.b	#-1,$29(a1)
00019B98 117C 00FF 0029             		move.b	#-1,$29(a0)
00019B9E 2348 0034                  		move.l	a0,$34(a1)
00019BA2 317C 0032 003C             		move.w	#$32,$3C(a0)
00019BA8                            
00019BA8                            loc_1933C:
00019BA8 4268 0012                  		clr.w	$12(a0)
00019BAC 5428 0028                  		addq.b	#2,$28(a0)
00019BB0                            
00019BB0                            loc_19344:
00019BB0 6000 FEAC                  		bra.w	loc_191F2
00019BB4                            ; ===========================================================================
00019BB4                            
00019BB4                            loc_19348:				; XREF: off_192FA
00019BB4 5368 003C                  		subq.w	#1,$3C(a0)
00019BB8 6A00                       		bpl.s	loc_19366
00019BBA 5428 0028                  		addq.b	#2,$28(a0)
00019BBE 317C F800 0012             		move.w	#-$800,$12(a0)
00019BC4 4A68 0036                  		tst.w	$36(a0)
00019BC8 6600                       		bne.s	loc_19362
00019BCA E0E8 0012                  		asr	$12(a0)
00019BCE                            
00019BCE                            loc_19362:
00019BCE 7000                       		moveq	#0,d0
00019BD0 6000                       		bra.s	loc_1937C
00019BD2                            ; ===========================================================================
00019BD2                            
00019BD2                            loc_19366:
00019BD2 7000                       		moveq	#0,d0
00019BD4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019BDA 6E00                       		bgt.s	loc_1937C
00019BDC 7002                       		moveq	#2,d0
00019BDE 0828 0001 003D             		btst	#1,$3D(a0)
00019BE4 6700                       		beq.s	loc_1937C
00019BE6 4440                       		neg.w	d0
00019BE8                            
00019BE8                            loc_1937C:
00019BE8 D068 0038                  		add.w	$38(a0),d0
00019BEC 3140 000C                  		move.w	d0,$C(a0)
00019BF0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BF6 6000 FE76                  		bra.w	loc_19202
00019BFA                            ; ===========================================================================
00019BFA                            
00019BFA                            loc_1938E:				; XREF: off_192FA
00019BFA 303C 04DA                  		move.w	#$4DA,d0
00019BFE 4A68 0036                  		tst.w	$36(a0)
00019C02 6700                       		beq.s	loc_1939C
00019C04 0440 0018                  		subi.w	#$18,d0
00019C08                            
00019C08                            loc_1939C:
00019C08 B068 0038                  		cmp.w	$38(a0),d0
00019C0C 6D00                       		blt.s	loc_193BE
00019C0E 317C 0008 003C             		move.w	#8,$3C(a0)
00019C14 4A68 0036                  		tst.w	$36(a0)
00019C18 6700                       		beq.s	loc_193B4
00019C1A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019C20                            
00019C20                            loc_193B4:
00019C20 5428 0028                  		addq.b	#2,$28(a0)
00019C24 4268 0012                  		clr.w	$12(a0)
00019C28 6000                       		bra.s	loc_193CC
00019C2A                            ; ===========================================================================
00019C2A                            
00019C2A                            loc_193BE:
00019C2A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019C30 6C00                       		bge.s	loc_193CC
00019C32 0668 000C 0012             		addi.w	#$C,$12(a0)
00019C38                            
00019C38                            loc_193CC:
00019C38 6000 FE24                  		bra.w	loc_191F2
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            loc_193D0:				; XREF: off_192FA
00019C3C 5368 003C                  		subq.w	#1,$3C(a0)
00019C40 6E00                       		bgt.s	loc_19406
00019C42 6B00                       		bmi.s	loc_193EE
00019C44 70FF                       		moveq	#-1,d0
00019C46 3028 0036                  		move.w	$36(a0),d0
00019C4A 6700                       		beq.s	loc_193E8
00019C4C 2240                       		movea.l	d0,a1
00019C4E 137C 000A 0029             		move.b	#$A,$29(a1)
00019C54                            
00019C54                            loc_193E8:
00019C54 4268 0036                  		clr.w	$36(a0)
00019C58 6000                       		bra.s	loc_19406
00019C5A                            ; ===========================================================================
00019C5A                            
00019C5A                            loc_193EE:
00019C5A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019C60 6600                       		bne.s	loc_19406
00019C62 4228 0029                  		clr.b	$29(a0)
00019C66 5528 0025                  		subq.b	#2,$25(a0)
00019C6A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019C70 6000                       		bra.s	loc_19446
00019C72                            ; ===========================================================================
00019C72                            
00019C72                            loc_19406:
00019C72 7001                       		moveq	#1,d0
00019C74 4A68 0036                  		tst.w	$36(a0)
00019C78 6700                       		beq.s	loc_19410
00019C7A 7002                       		moveq	#2,d0
00019C7C                            
00019C7C                            loc_19410:
00019C7C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019C82 6700                       		beq.s	loc_19424
00019C84 6D00                       		blt.s	loc_1941C
00019C86 4440                       		neg.w	d0
00019C88                            
00019C88                            loc_1941C:
00019C88 4A68 0036                  		tst.w	$36(a0)
00019C8C D168 0038                  		add.w	d0,$38(a0)
00019C90                            
00019C90                            loc_19424:
00019C90 7000                       		moveq	#0,d0
00019C92 4A68 0036                  		tst.w	$36(a0)
00019C96 6700                       		beq.s	loc_19438
00019C98 7002                       		moveq	#2,d0
00019C9A 0828 0000 003D             		btst	#0,$3D(a0)
00019CA0 6700                       		beq.s	loc_19438
00019CA2 4440                       		neg.w	d0
00019CA4                            
00019CA4                            loc_19438:
00019CA4 D068 0038                  		add.w	$38(a0),d0
00019CA8 3140 000C                  		move.w	d0,$C(a0)
00019CAC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CB2                            
00019CB2                            loc_19446:
00019CB2 6000 FDBA                  		bra.w	loc_19202
00019CB6                            
00019CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CB6                            
00019CB6                            
00019CB6                            Obj75_FindBlocks:			; XREF: loc_192AE
00019CB6 4268 0036                  		clr.w	$36(a0)
00019CBA 43F8 D040                  		lea	($FFFFD040).w,a1
00019CBE 703E                       		moveq	#$3E,d0
00019CC0 7276                       		moveq	#$76,d1
00019CC2 1428 0034                  		move.b	$34(a0),d2
00019CC6                            
00019CC6                            Obj75_FindLoop:
00019CC6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019CC8 6600                       		bne.s	loc_1946A	; if not, branch
00019CCA B429 0028                  		cmp.b	$28(a1),d2
00019CCE 6600                       		bne.s	loc_1946A
00019CD0 3149 0036                  		move.w	a1,$36(a0)
00019CD4 6000                       		bra.s	locret_19472
00019CD6                            ; ===========================================================================
00019CD6                            
00019CD6                            loc_1946A:
00019CD6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019CDA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019CDE                            
00019CDE                            locret_19472:
00019CDE 4E75                       		rts	
00019CE0                            ; End of function Obj75_FindBlocks
00019CE0                            
00019CE0                            ; ===========================================================================
00019CE0                            
00019CE0                            loc_19474:				; XREF: Obj75_ShipIndex
00019CE0 5368 003C                  		subq.w	#1,$3C(a0)
00019CE4 6B00                       		bmi.s	loc_1947E
00019CE6 6000 E412                  		bra.w	BossDefeated
00019CEA                            ; ===========================================================================
00019CEA                            
00019CEA                            loc_1947E:
00019CEA 5428 0025                  		addq.b	#2,$25(a0)
00019CEE 4268 0012                  		clr.w	$12(a0)
00019CF2 08E8 0000 0022             		bset	#0,$22(a0)
00019CF8 08A8 0007 0022             		bclr	#7,$22(a0)
00019CFE 4268 0010                  		clr.w	$10(a0)
00019D02 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019D08 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019D0C 6600                       		bne.s	loc_194A8
00019D0E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D14                            
00019D14                            loc_194A8:
00019D14 6000 FD58                  		bra.w	loc_19202
00019D18                            ; ===========================================================================
00019D18                            
00019D18                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D18 5268 003C                  		addq.w	#1,$3C(a0)
00019D1C 6700                       		beq.s	loc_194BC
00019D1E 6A00                       		bpl.s	loc_194C2
00019D20 0668 0018 0012             		addi.w	#$18,$12(a0)
00019D26 6000                       		bra.s	loc_194EE
00019D28                            ; ===========================================================================
00019D28                            
00019D28                            loc_194BC:
00019D28 4268 0012                  		clr.w	$12(a0)
00019D2C 6000                       		bra.s	loc_194EE
00019D2E                            ; ===========================================================================
00019D2E                            
00019D2E                            loc_194C2:
00019D2E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019D34 6500                       		bcs.s	loc_194DA
00019D36 6700                       		beq.s	loc_194E0
00019D38 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019D3E 6500                       		bcs.s	loc_194EE
00019D40 5428 0025                  		addq.b	#2,$25(a0)
00019D44 6000                       		bra.s	loc_194EE
00019D46                            ; ===========================================================================
00019D46                            
00019D46                            loc_194DA:
00019D46 5168 0012                  		subq.w	#8,$12(a0)
00019D4A 6000                       		bra.s	loc_194EE
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            loc_194E0:
00019D4C 4268 0012                  		clr.w	$12(a0)
00019D50 303C 0085                  		move.w	#$85,d0
00019D54 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019D5A                            
00019D5A                            loc_194EE:
00019D5A 6000 FD02                  		bra.w	loc_191F2
00019D5E                            ; ===========================================================================
00019D5E                            
00019D5E                            loc_194F2:				; XREF: Obj75_ShipIndex
00019D5E 317C 0400 0010             		move.w	#$400,$10(a0)
00019D64 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019D6A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019D70 6400                       		bcc.s	loc_1950C
00019D72 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019D76 6000                       		bra.s	loc_19512
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            loc_1950C:
00019D78 4A28 0001                  		tst.b	1(a0)
00019D7C 6A00                       		bpl.s	Obj75_ShipDelete
00019D7E                            
00019D7E                            loc_19512:
00019D7E 6100 E3BC                  		bsr.w	BossMove
00019D82 6000 FCC6                  		bra.w	loc_191DE
00019D86                            ; ===========================================================================
00019D86                            
00019D86                            Obj75_ShipDelete:
00019D86 4EF9 0000 DDAE             		jmp	DeleteObject
00019D8C                            ; ===========================================================================
00019D8C                            
00019D8C                            Obj75_FaceMain:				; XREF: Obj75_Index
00019D8C 7201                       		moveq	#1,d1
00019D8E 2268 0034                  		movea.l	$34(a0),a1
00019D92 7000                       		moveq	#0,d0
00019D94 1029 0025                  		move.b	$25(a1),d0
00019D98 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019D9C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019DA0 1141 001C                  		move.b	d1,$1C(a0)
00019DA4 1010                       		move.b	(a0),d0
00019DA6 B011                       		cmp.b	(a1),d0
00019DA8 6600                       		bne.s	Obj75_FaceDelete
00019DAA 6000                       		bra.s	loc_195BE
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            Obj75_FaceDelete:
00019DAC 4EF9 0000 DDAE             		jmp	DeleteObject
00019DB2                            ; ===========================================================================
00019DB2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019DB6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019DBA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019DBE                            ; ===========================================================================
00019DBE                            
00019DBE                            loc_19552:				; XREF: off_19546
00019DBE 720A                       		moveq	#$A,d1
00019DC0 4E75                       		rts	
00019DC2                            ; ===========================================================================
00019DC2                            
00019DC2                            loc_19556:				; XREF: off_19546
00019DC2 7206                       		moveq	#6,d1
00019DC4 4E75                       		rts	
00019DC6                            ; ===========================================================================
00019DC6                            
00019DC6                            loc_1955A:				; XREF: off_19546
00019DC6 7000                       		moveq	#0,d0
00019DC8 1029 0028                  		move.b	$28(a1),d0
00019DCC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019DD0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019DD4                            ; ===========================================================================
00019DD4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019DD8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019DDC                            ; ===========================================================================
00019DDC                            
00019DDC                            loc_19570:				; XREF: off_19568
00019DDC 6000                       		bra.s	loc_19574
00019DDE                            ; ===========================================================================
00019DDE                            
00019DDE                            loc_19572:				; XREF: off_19568
00019DDE 7206                       		moveq	#6,d1
00019DE0                            
00019DE0                            loc_19574:				; XREF: off_19546
00019DE0 4A29 0020                  		tst.b	$20(a1)
00019DE4 6600                       		bne.s	loc_1957E
00019DE6 7205                       		moveq	#5,d1
00019DE8 4E75                       		rts	
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            loc_1957E:
00019DEA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019DF0 6500                       		bcs.s	locret_19588
00019DF2 7204                       		moveq	#4,d1
00019DF4                            
00019DF4                            locret_19588:
00019DF4 4E75                       		rts	
00019DF6                            ; ===========================================================================
00019DF6                            
00019DF6                            Obj75_FlameMain:			; XREF: Obj75_Index
00019DF6 117C 0007 001C             		move.b	#7,$1C(a0)
00019DFC 2268 0034                  		movea.l	$34(a0),a1
00019E00 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E06 6600                       		bne.s	loc_195AA
00019E08 117C 000B 001C             		move.b	#$B,$1C(a0)
00019E0E 4A28 0001                  		tst.b	1(a0)
00019E12 6A00                       		bpl.s	Obj75_FlameDelete
00019E14 6000                       		bra.s	loc_195B6
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_195AA:
00019E16 4A69 0010                  		tst.w	$10(a1)
00019E1A 6700                       		beq.s	loc_195B6
00019E1C 117C 0008 001C             		move.b	#8,$1C(a0)
00019E22                            
00019E22                            loc_195B6:
00019E22 6000                       		bra.s	loc_195BE
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            Obj75_FlameDelete:
00019E24 4EF9 0000 DDAE             		jmp	DeleteObject
00019E2A                            ; ===========================================================================
00019E2A                            
00019E2A                            loc_195BE:
00019E2A 43F9 0001 857E             		lea	(Ani_Eggman).l,a1
00019E30 4EB9 0000 AE32             		jsr	AnimateSprite
00019E36 2268 0034                  		movea.l	$34(a0),a1
00019E3A 3169 0008 0008             		move.w	8(a1),8(a0)
00019E40 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E46                            
00019E46                            loc_195DA:
00019E46 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019E4C 7003                       		moveq	#3,d0
00019E4E C028 0022                  		and.b	$22(a0),d0
00019E52 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E58 8128 0001                  		or.b	d0,1(a0)
00019E5C 4EF9 0000 DD72             		jmp	DisplaySprite
00019E62                            ; ===========================================================================
00019E62                            
00019E62                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019E62 217C 0001 86AA 0004        		move.l	#Map_BossItems,4(a0)
00019E6A 317C 246C 0002             		move.w	#$246C,2(a0)
00019E70 117C 0005 001A             		move.b	#5,$1A(a0)
00019E76 2268 0034                  		movea.l	$34(a0),a1
00019E7A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E80 6600                       		bne.s	loc_1961C
00019E82 4A28 0001                  		tst.b	1(a0)
00019E86 6A00                       		bpl.s	Obj75_SpikeDelete
00019E88                            
00019E88                            loc_1961C:
00019E88 3169 0008 0008             		move.w	8(a1),8(a0)
00019E8E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E94 3028 003C                  		move.w	$3C(a0),d0
00019E98 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019E9E 6600                       		bne.s	loc_19652
00019EA0 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019EA6 6700                       		beq.s	loc_1964C
00019EA8 4A29 0028                  		tst.b	$28(a1)
00019EAC 6600                       		bne.s	loc_19658
00019EAE 0C40 0094                  		cmpi.w	#$94,d0
00019EB2 6C00                       		bge.s	loc_19658
00019EB4 5E40                       		addq.w	#7,d0
00019EB6 6000                       		bra.s	loc_19658
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_1964C:
00019EB8 4A69 003C                  		tst.w	$3C(a1)
00019EBC 6A00                       		bpl.s	loc_19658
00019EBE                            
00019EBE                            loc_19652:
00019EBE 4A40                       		tst.w	d0
00019EC0 6F00                       		ble.s	loc_19658
00019EC2 5B40                       		subq.w	#5,d0
00019EC4                            
00019EC4                            loc_19658:
00019EC4 3140 003C                  		move.w	d0,$3C(a0)
00019EC8 E440                       		asr.w	#2,d0
00019ECA D168 000C                  		add.w	d0,$C(a0)
00019ECE 117C 0008 0019             		move.b	#8,$19(a0)
00019ED4 117C 000C 0016             		move.b	#$C,$16(a0)
00019EDA 4228 0020                  		clr.b	$20(a0)
00019EDE 2268 0034                  		movea.l	$34(a0),a1
00019EE2 4A29 0020                  		tst.b	$20(a1)
00019EE6 6700                       		beq.s	loc_19688
00019EE8 4A29 0029                  		tst.b	$29(a1)
00019EEC 6600                       		bne.s	loc_19688
00019EEE 117C 0084 0020             		move.b	#$84,$20(a0)
00019EF4                            
00019EF4                            loc_19688:
00019EF4 6000 FF50                  		bra.w	loc_195DA
00019EF8                            ; ===========================================================================
00019EF8                            
00019EF8                            Obj75_SpikeDelete:
00019EF8 4EF9 0000 DDAE             		jmp	DeleteObject
00019EFE                            ; ===========================================================================
00019EFE                            ; ---------------------------------------------------------------------------
00019EFE                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019EFE                            ; ---------------------------------------------------------------------------
00019EFE                            
00019EFE                            Obj76:					; XREF: Obj_Index
00019EFE 7000                       		moveq	#0,d0
00019F00 1028 0024                  		move.b	$24(a0),d0
00019F04 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019F08 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019F0C                            ; ===========================================================================
00019F0C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019F0E 0000                       		dc.w Obj76_Action-Obj76_Index
00019F10 0000                       		dc.w loc_19762-Obj76_Index
00019F12                            ; ===========================================================================
00019F12                            
00019F12                            Obj76_Main:				; XREF: Obj76_Index
00019F12 7800                       		moveq	#0,d4
00019F14 3A3C 2C10                  		move.w	#$2C10,d5
00019F18 7C09                       		moveq	#9,d6
00019F1A 43D0                       		lea	(a0),a1
00019F1C 6000                       		bra.s	Obj76_MakeBlock
00019F1E                            ; ===========================================================================
00019F1E                            
00019F1E                            Obj76_Loop:
00019F1E 4EB9 0000 E1F8             		jsr	SingleObjLoad
00019F24 6600                       		bne.s	Obj76_ExitLoop
00019F26                            
00019F26                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019F26 12BC 0076                  		move.b	#$76,(a1)
00019F2A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019F32 337C 4000 0002             		move.w	#$4000,2(a1)
00019F38 137C 0004 0001             		move.b	#4,1(a1)
00019F3E 137C 0010 0019             		move.b	#$10,$19(a1)
00019F44 137C 0010 0016             		move.b	#$10,$16(a1)
00019F4A 137C 0003 0018             		move.b	#3,$18(a1)
00019F50 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019F54 337C 0582 000C             		move.w	#$582,$C(a1)
00019F5A 3344 0028                  		move.w	d4,$28(a1)
00019F5E 0644 0101                  		addi.w	#$101,d4
00019F62 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019F66 5429 0024                  		addq.b	#2,$24(a1)
00019F6A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019F6E                            
00019F6E                            Obj76_ExitLoop:
00019F6E 4E75                       		rts	
00019F70                            ; ===========================================================================
00019F70                            
00019F70                            Obj76_Action:				; XREF: Obj76_Index
00019F70 1028 0029                  		move.b	$29(a0),d0
00019F74 B028 0028                  		cmp.b	$28(a0),d0
00019F78 6700                       		beq.s	Obj76_Solid
00019F7A 4A00                       		tst.b	d0
00019F7C 6B00                       		bmi.s	loc_19718
00019F7E                            
00019F7E                            loc_19712:
00019F7E 6100 0000                  		bsr.w	Obj76_Break
00019F82 6000                       		bra.s	Obj76_Display
00019F84                            ; ===========================================================================
00019F84                            
00019F84                            loc_19718:
00019F84 2268 0034                  		movea.l	$34(a0),a1
00019F88 4A29 0021                  		tst.b	$21(a1)
00019F8C 67F0                       		beq.s	loc_19712
00019F8E 3169 0008 0008             		move.w	8(a1),8(a0)
00019F94 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F9A 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019FA0 B2C8                       		cmpa.w	a0,a1
00019FA2 6500                       		bcs.s	Obj76_Display
00019FA4 3029 0012                  		move.w	$12(a1),d0
00019FA8 48C0                       		ext.l	d0
00019FAA E080                       		asr.l	#8,d0
00019FAC D168 000C                  		add.w	d0,$C(a0)
00019FB0 6000                       		bra.s	Obj76_Display
00019FB2                            ; ===========================================================================
00019FB2                            
00019FB2                            Obj76_Solid:				; XREF: Obj76_Action
00019FB2 323C 001B                  		move.w	#$1B,d1
00019FB6 343C 0010                  		move.w	#$10,d2
00019FBA 363C 0011                  		move.w	#$11,d3
00019FBE 3828 0008                  		move.w	8(a0),d4
00019FC2 4EB9 0001 0142             		jsr	SolidObject
00019FC8                            
00019FC8                            Obj76_Display:				; XREF: Obj76_Action
00019FC8 4EF9 0000 DD72             		jmp	DisplaySprite
00019FCE                            ; ===========================================================================
00019FCE                            
00019FCE                            loc_19762:				; XREF: Obj76_Index
00019FCE 4A28 0001                  		tst.b	1(a0)
00019FD2 6A00                       		bpl.s	Obj76_Delete
00019FD4 4EB9 0000 DD20             		jsr	ObjectFall
00019FDA 4EF9 0000 DD72             		jmp	DisplaySprite
00019FE0                            ; ===========================================================================
00019FE0                            
00019FE0                            Obj76_Delete:
00019FE0 4EF9 0000 DDAE             		jmp	DeleteObject
00019FE6                            
00019FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019FE6                            
00019FE6                            
00019FE6                            Obj76_Break:				; XREF: Obj76_Action
00019FE6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019FEA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019FEE 7801                       		moveq	#1,d4
00019FF0 7203                       		moveq	#3,d1
00019FF2 7438                       		moveq	#$38,d2
00019FF4 5428 0024                  		addq.b	#2,$24(a0)
00019FF8 117C 0008 0019             		move.b	#8,$19(a0)
00019FFE 117C 0008 0016             		move.b	#8,$16(a0)
0001A004 43D0                       		lea	(a0),a1
0001A006 6000                       		bra.s	Obj76_MakeFrag
0001A008                            ; ===========================================================================
0001A008                            
0001A008                            Obj76_LoopFrag:
0001A008 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001A00E 6600                       		bne.s	loc_197D4
0001A010                            
0001A010                            Obj76_MakeFrag:
0001A010 45D0                       		lea	(a0),a2
0001A012 47D1                       		lea	(a1),a3
0001A014 7603                       		moveq	#3,d3
0001A016                            
0001A016                            loc_197AA:
0001A016 26DA                       		move.l	(a2)+,(a3)+
0001A018 26DA                       		move.l	(a2)+,(a3)+
0001A01A 26DA                       		move.l	(a2)+,(a3)+
0001A01C 26DA                       		move.l	(a2)+,(a3)+
0001A01E 51CB FFF6                  		dbf	d3,loc_197AA
0001A022                            
0001A022 335C 0010                  		move.w	(a4)+,$10(a1)
0001A026 335C 0012                  		move.w	(a4)+,$12(a1)
0001A02A 361D                       		move.w	(a5)+,d3
0001A02C D769 0008                  		add.w	d3,8(a1)
0001A030 361D                       		move.w	(a5)+,d3
0001A032 D769 000C                  		add.w	d3,$C(a1)
0001A036 1344 001A                  		move.b	d4,$1A(a1)
0001A03A 5244                       		addq.w	#1,d4
0001A03C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A040                            
0001A040                            loc_197D4:
0001A040 303C 00CB                  		move.w	#$CB,d0
0001A044 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A04A                            ; End of function Obj76_Break
0001A04A                            
0001A04A                            ; ===========================================================================
0001A04A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A04E 0180 FE00                  		dc.w $180, $FE00
0001A052 FF00 FF00                  		dc.w $FF00, $FF00
0001A056 0100 FF00                  		dc.w $100, $FF00
0001A05A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A05E 0010 0000                  		dc.w $10, 0
0001A062 0000 0010                  		dc.w 0,	$10
0001A066 0010 0010                  		dc.w $10, $10
0001A06A                            ; ---------------------------------------------------------------------------
0001A06A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A06A                            ; ---------------------------------------------------------------------------
0001A06A                            Map_obj76:
0001A06A                            	include "_maps\obj76.asm"
0001A06A                            ; ---------------------------------------------------------------------------
0001A06A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A06A                            ; ---------------------------------------------------------------------------
0001A06A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A06E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A072 0000                       		dc.w byte_19826-Map_obj76
0001A074 02                         byte_19808:	dc.b 2
0001A075 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A07A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A07F 00                         		dc.b 0
0001A080 01                         byte_19814:	dc.b 1
0001A081 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A086 01                         byte_1981A:	dc.b 1
0001A087 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A08C 01                         byte_19820:	dc.b 1
0001A08D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A092 01                         byte_19826:	dc.b 1
0001A093 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A098                            		even
0001A098                            		even
0001A098                            
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A098 4EF9 0000 DDAE             		jmp	DeleteObject
0001A09E                            ; ===========================================================================
0001A09E                            ; ---------------------------------------------------------------------------
0001A09E                            ; Object 82 - Eggman (SBZ2)
0001A09E                            ; ---------------------------------------------------------------------------
0001A09E                            
0001A09E                            Obj82:					; XREF: Obj_Index
0001A09E 7000                       		moveq	#0,d0
0001A0A0 1028 0024                  		move.b	$24(a0),d0
0001A0A4 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A0A8 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A0AC                            ; ===========================================================================
0001A0AC 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A0AE 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A0B0 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A0B2                            
0001A0B2 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A0B5 0400 03                    		dc.b 4,	0, 3
0001A0B8                            ; ===========================================================================
0001A0B8                            
0001A0B8                            Obj82_Main:				; XREF: Obj82_Index
0001A0B8 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A0BC 317C 2160 0008             		move.w	#$2160,8(a0)
0001A0C2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A0C8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0CE 117C 0010 0021             		move.b	#$10,$21(a0)
0001A0D4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0DA 4228 0025                  		clr.b	$25(a0)
0001A0DE 115A 0024                  		move.b	(a2)+,$24(a0)
0001A0E2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A0E6 115A 0018                  		move.b	(a2)+,$18(a0)
0001A0EA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A0F2 317C 0400 0002             		move.w	#$400,2(a0)
0001A0F8 117C 0004 0001             		move.b	#4,1(a0)
0001A0FE 08E8 0007 0001             		bset	#7,1(a0)
0001A104 117C 0020 0019             		move.b	#$20,$19(a0)
0001A10A 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001A110 6600                       		bne.s	Obj82_Eggman
0001A112 2348 0034                  		move.l	a0,$34(a1)
0001A116 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A11A 337C 2130 0008             		move.w	#$2130,8(a1)
0001A120 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A126 4228 0025                  		clr.b	$25(a0)
0001A12A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A12E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A132 135A 0018                  		move.b	(a2)+,$18(a1)
0001A136 237C 0000 C566 0004        		move.l	#Map_obj32,4(a1)
0001A13E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A144 137C 0004 0001             		move.b	#4,1(a1)
0001A14A 08E9 0007 0001             		bset	#7,1(a1)
0001A150 137C 0010 0019             		move.b	#$10,$19(a1)
0001A156 137C 0000 001A             		move.b	#0,$1A(a1)
0001A15C                            
0001A15C                            Obj82_Eggman:				; XREF: Obj82_Index
0001A15C 7000                       		moveq	#0,d0
0001A15E 1028 0025                  		move.b	$25(a0),d0
0001A162 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A166 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A16A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A16E 4EB9 0000 AE32             		jsr	AnimateSprite
0001A174 4EF9 0000 DD72             		jmp	DisplaySprite
0001A17A                            ; ===========================================================================
0001A17A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A17C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A17E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A180 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A182                            ; ===========================================================================
0001A182                            
0001A182                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A182 3028 0008                  		move.w	8(a0),d0
0001A186 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A18A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A18E 6400                       		bcc.s	loc_19934	; if not, branch
0001A190 5428 0025                  		addq.b	#2,$25(a0)
0001A194 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A19A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A1A0                            
0001A1A0                            loc_19934:				; XREF: Obj82_EggIndex
0001A1A0 4EF9 0000 DD4C             		jmp	SpeedToPos
0001A1A6                            ; ===========================================================================
0001A1A6                            
0001A1A6                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A1A6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A1AA 6600                       		bne.s	loc_19954	; if time remains, branch
0001A1AC 5428 0025                  		addq.b	#2,$25(a0)
0001A1B0 117C 0002 001C             		move.b	#2,$1C(a0)
0001A1B6 5868 000C                  		addq.w	#4,$C(a0)
0001A1BA 317C 000F 003C             		move.w	#15,$3C(a0)
0001A1C0                            
0001A1C0                            loc_19954:
0001A1C0 60DE                       		bra.s	loc_19934
0001A1C2                            ; ===========================================================================
0001A1C2                            
0001A1C2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A1C2 5368 003C                  		subq.w	#1,$3C(a0)
0001A1C6 6E00                       		bgt.s	loc_199D0
0001A1C8 6600                       		bne.s	loc_1996A
0001A1CA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A1D0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A1D6                            
0001A1D6                            loc_1996A:
0001A1D6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A1DC 6E00                       		bgt.s	loc_19976
0001A1DE 4268 0010                  		clr.w	$10(a0)
0001A1E2                            
0001A1E2                            loc_19976:
0001A1E2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A1E8 4A68 0012                  		tst.w	$12(a0)
0001A1EC 6B00                       		bmi.s	Obj82_FindBlocks
0001A1EE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A1F4 6500                       		bcs.s	Obj82_FindBlocks
0001A1F6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A1FC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A202 6500                       		bcs.s	Obj82_FindBlocks
0001A204 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A20A 4268 0012                  		clr.w	$12(a0)
0001A20E                            
0001A20E                            Obj82_FindBlocks:
0001A20E 3028 0010                  		move.w	$10(a0),d0
0001A212 8068 0012                  		or.w	$12(a0),d0
0001A216 6600                       		bne.s	loc_199D0
0001A218 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A21C 703E                       		moveq	#$3E,d0
0001A21E 7240                       		moveq	#$40,d1
0001A220                            
0001A220                            Obj82_FindLoop:	
0001A220 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A222 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A226 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A22A                            
0001A22A 6600                       		bne.s	loc_199D0
0001A22C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A232 5428 0025                  		addq.b	#2,$25(a0)
0001A236 117C 0001 001C             		move.b	#1,$1C(a0)
0001A23C                            
0001A23C                            loc_199D0:
0001A23C 6000 FF62                  		bra.w	loc_19934
0001A240                            ; ===========================================================================
0001A240                            
0001A240                            Obj82_Switch:				; XREF: Obj82_Index
0001A240 7000                       		moveq	#0,d0
0001A242 1028 0025                  		move.b	$25(a0),d0
0001A246 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A24A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A24E                            ; ===========================================================================
0001A24E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A250 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A252                            ; ===========================================================================
0001A252                            
0001A252                            loc_199E6:				; XREF: Obj82_SwIndex
0001A252 2268 0034                  		movea.l	$34(a0),a1
0001A256 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A25C 6600                       		bne.s	Obj82_SwDisplay
0001A25E 117C 0001 001A             		move.b	#1,$1A(a0)
0001A264 5428 0025                  		addq.b	#2,$25(a0)
0001A268                            
0001A268                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A268 4EF9 0000 DD72             		jmp	DisplaySprite
0001A26E                            ; ===========================================================================
0001A26E                            Ani_obj82:
0001A26E                            	include "_anim\obj82.asm"
0001A26E                            ; ---------------------------------------------------------------------------
0001A26E                            ; Animation script - Eggman (SBZ2)
0001A26E                            ; ---------------------------------------------------------------------------
0001A26E 0000                       		dc.w byte_19A10-Ani_obj82
0001A270 0000                       		dc.w byte_19A14-Ani_obj82
0001A272 0000                       		dc.w byte_19A18-Ani_obj82
0001A274 0000                       		dc.w byte_19A20-Ani_obj82
0001A276 0000                       		dc.w byte_19A24-Ani_obj82
0001A278 0000                       		dc.w byte_19A2A-Ani_obj82
0001A27A 0000                       		dc.w byte_19A30-Ani_obj82
0001A27C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A280 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A284 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A28C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A290 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A296 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A29C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A2A0                            		even
0001A2A0                            		even
0001A2A0                            
0001A2A0                            ; ---------------------------------------------------------------------------
0001A2A0                            ; Sprite mappings - Eggman (SBZ2)
0001A2A0                            ; ---------------------------------------------------------------------------
0001A2A0                            Map_obj82:
0001A2A0                            	include "_maps\obj82.asm"
0001A2A0                            ; ================================================================================
0001A2A0                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A2A0                            ; ================================================================================
0001A2A0                            
0001A2A0                            DATAA16Z12RYSAF:
0001A2A0 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A2A4 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A2A8 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A2AC 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A2B0 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A2B4 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A2B6 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A2B7 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2BC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2C1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2C6 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A2C7 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A2CC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2D1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2D6 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2DB 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A2DC E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A2E1 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A2E6 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A2EB FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A2F0 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A2F1 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A2F6 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A2FB F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A300 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A301 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A306 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A30B 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A310 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A315 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A316 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A31B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A320 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A325 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A32A 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A32B E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A330 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A335 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A33A 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A33F F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A344 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A349 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A34E 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A34F 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A354 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A359 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A35E F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A363 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A364 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A369 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A36E 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A373 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A378 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A37D 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A37E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A383 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A388 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A38D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A392 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A397 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A39C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A3A1 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A3A6 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A3A7 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A3AC F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A3B1 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A3B6                            	even
0001A3B6                            	even
0001A3B6                            
0001A3B6                            ; ===========================================================================
0001A3B6                            ; ---------------------------------------------------------------------------
0001A3B6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A3B6                            ; ---------------------------------------------------------------------------
0001A3B6                            
0001A3B6                            Obj83:					; XREF: Obj_Index
0001A3B6 7000                       		moveq	#0,d0
0001A3B8 1028 0024                  		move.b	$24(a0),d0
0001A3BC 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A3C0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A3C4                            ; ===========================================================================
0001A3C4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A3C6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A3C8 0000                       		dc.w loc_19C36-Obj83_Index
0001A3CA 0000                       		dc.w loc_19C62-Obj83_Index
0001A3CC 0000                       		dc.w loc_19C72-Obj83_Index
0001A3CE 0000                       		dc.w loc_19C80-Obj83_Index
0001A3D0                            ; ===========================================================================
0001A3D0                            
0001A3D0                            Obj83_Main:				; XREF: Obj83_Index
0001A3D0 317C 2080 0008             		move.w	#$2080,8(a0)
0001A3D6 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A3DC 117C 0080 0019             		move.b	#$80,$19(a0)
0001A3E2 117C 0010 0016             		move.b	#$10,$16(a0)
0001A3E8 117C 0004 0001             		move.b	#4,1(a0)
0001A3EE 08E8 0007 0001             		bset	#7,1(a0)
0001A3F4 7800                       		moveq	#0,d4
0001A3F6 3A3C 2010                  		move.w	#$2010,d5
0001A3FA 7C07                       		moveq	#7,d6
0001A3FC 45E8 0030                  		lea	$30(a0),a2
0001A400                            
0001A400                            Obj83_MakeBlock:
0001A400 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001A406 6600                       		bne.s	Obj83_ExitMake
0001A408 34C9                       		move.w	a1,(a2)+
0001A40A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A40E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A416 337C 4518 0002             		move.w	#$4518,2(a1)
0001A41C 137C 0004 0001             		move.b	#4,1(a1)
0001A422 137C 0010 0019             		move.b	#$10,$19(a1)
0001A428 137C 0010 0016             		move.b	#$10,$16(a1)
0001A42E 137C 0003 0018             		move.b	#3,$18(a1)
0001A434 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A438 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A43E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A442 137C 0008 0024             		move.b	#8,$24(a1)
0001A448 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A44C                            
0001A44C                            Obj83_ExitMake:
0001A44C 5428 0024                  		addq.b	#2,$24(a0)
0001A450 4E75                       		rts	
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A452 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A458 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A45A 4228 001A                  		clr.b	$1A(a0)
0001A45E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A462                            
0001A462                            Obj83_Solid:
0001A462 7000                       		moveq	#0,d0
0001A464 1028 001A                  		move.b	$1A(a0),d0
0001A468 4400                       		neg.b	d0
0001A46A 4880                       		ext.w	d0
0001A46C 5040                       		addq.w	#8,d0
0001A46E E940                       		asl.w	#4,d0
0001A470 383C 2100                  		move.w	#$2100,d4
0001A474 9840                       		sub.w	d0,d4
0001A476 1140 0019                  		move.b	d0,$19(a0)
0001A47A 3144 0008                  		move.w	d4,8(a0)
0001A47E 720B                       		moveq	#$B,d1
0001A480 D240                       		add.w	d0,d1
0001A482 7410                       		moveq	#$10,d2
0001A484 7611                       		moveq	#$11,d3
0001A486 4EF9 0001 0142             		jmp	SolidObject
0001A48C                            ; ===========================================================================
0001A48C                            
0001A48C                            loc_19C36:				; XREF: Obj83_Index
0001A48C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A492 6400                       		bcc.s	Obj83_Solid2
0001A494 70FF                       		moveq	#-1,d0
0001A496 1028 001A                  		move.b	$1A(a0),d0
0001A49A 4880                       		ext.w	d0
0001A49C D040                       		add.w	d0,d0
0001A49E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A4A2 2240                       		movea.l	d0,a1
0001A4A4 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A4AA 5228 001A                  		addq.b	#1,$1A(a0)
0001A4AE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A4B4 6700                       		beq.s	loc_19C62
0001A4B6                            
0001A4B6                            Obj83_Solid2:
0001A4B6 60AA                       		bra.s	Obj83_Solid
0001A4B8                            ; ===========================================================================
0001A4B8                            
0001A4B8                            loc_19C62:				; XREF: Obj83_Index
0001A4B8 08A8 0003 0022             		bclr	#3,$22(a0)
0001A4BE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A4C4 6000 FBD2                  		bra.w	loc_1982C
0001A4C8                            ; ===========================================================================
0001A4C8                            
0001A4C8                            loc_19C72:				; XREF: Obj83_Index
0001A4C8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4CE 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A4D0 4EF9 0000 DD72             		jmp	DisplaySprite
0001A4D6                            ; ===========================================================================
0001A4D6                            
0001A4D6                            loc_19C80:				; XREF: Obj83_Index
0001A4D6 4A28 0001                  		tst.b	1(a0)
0001A4DA 6A00 FBBC                  		bpl.w	loc_1982C
0001A4DE 4EB9 0000 DD20             		jsr	ObjectFall
0001A4E4 4EF9 0000 DD72             		jmp	DisplaySprite
0001A4EA                            ; ===========================================================================
0001A4EA                            
0001A4EA                            Obj83_Break:				; XREF: loc_19C72
0001A4EA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A4EE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A4F2 7801                       		moveq	#1,d4
0001A4F4 7203                       		moveq	#3,d1
0001A4F6 7438                       		moveq	#$38,d2
0001A4F8 5428 0024                  		addq.b	#2,$24(a0)
0001A4FC 117C 0008 0019             		move.b	#8,$19(a0)
0001A502 117C 0008 0016             		move.b	#8,$16(a0)
0001A508 43D0                       		lea	(a0),a1
0001A50A 6000                       		bra.s	Obj83_MakeFrag
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            Obj83_LoopFrag:
0001A50C 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001A512 6600                       		bne.s	Obj83_BreakSnd
0001A514                            
0001A514                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A514 45D0                       		lea	(a0),a2
0001A516 47D1                       		lea	(a1),a3
0001A518 7603                       		moveq	#3,d3
0001A51A                            
0001A51A                            loc_19CC4:
0001A51A 26DA                       		move.l	(a2)+,(a3)+
0001A51C 26DA                       		move.l	(a2)+,(a3)+
0001A51E 26DA                       		move.l	(a2)+,(a3)+
0001A520 26DA                       		move.l	(a2)+,(a3)+
0001A522 51CB FFF6                  		dbf	d3,loc_19CC4
0001A526                            
0001A526 335C 0012                  		move.w	(a4)+,$12(a1)
0001A52A 361D                       		move.w	(a5)+,d3
0001A52C D769 0008                  		add.w	d3,8(a1)
0001A530 361D                       		move.w	(a5)+,d3
0001A532 D769 000C                  		add.w	d3,$C(a1)
0001A536 1344 001A                  		move.b	d4,$1A(a1)
0001A53A 5244                       		addq.w	#1,d4
0001A53C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A540                            
0001A540                            Obj83_BreakSnd:
0001A540 303C 00CB                  		move.w	#$CB,d0
0001A544 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A54A 4EF9 0000 DD72             		jmp	DisplaySprite
0001A550                            ; ===========================================================================
0001A550 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A554 0120 00C0                  		dc.w $120, $C0
0001A558 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A55C 0010 0000                  		dc.w $10, 0
0001A560 0000 0010                  		dc.w 0,	$10
0001A564 0010 0010                  		dc.w $10, $10
0001A568                            ; ---------------------------------------------------------------------------
0001A568                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A568                            ; ---------------------------------------------------------------------------
0001A568                            Map_obj83:
0001A568                            	include "_maps\obj83.asm"
0001A568                            ; ---------------------------------------------------------------------------
0001A568                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A568                            ; ---------------------------------------------------------------------------
0001A568 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A56C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A570 0000                       		dc.w byte_19D46-Map_obj83
0001A572 01                         byte_19D1C:	dc.b 1
0001A573 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A578 02                         byte_19D22:	dc.b 2
0001A579 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A57E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A583 00                         		dc.b 0
0001A584 02                         byte_19D2E:	dc.b 2
0001A585 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A58A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A58F 00                         		dc.b 0
0001A590 02                         byte_19D3A:	dc.b 2
0001A591 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A596 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A59B 00                         		dc.b 0
0001A59C 02                         byte_19D46:	dc.b 2
0001A59D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A5A2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A5A8 00                         		even
0001A5A8 00                         		even
0001A5A8                            
0001A5A8                            ; ===========================================================================
0001A5A8                            ; ---------------------------------------------------------------------------
0001A5A8                            ; Object 85 - Eggman (FZ)
0001A5A8                            ; ---------------------------------------------------------------------------
0001A5A8                            
0001A5A8                            Obj85_Delete:
0001A5A8 4EF9 0000 DDAE             		jmp	DeleteObject
0001A5AE                            ; ===========================================================================
0001A5AE                            
0001A5AE                            Obj85:					; XREF: Obj_Index
0001A5AE 7000                       		moveq	#0,d0
0001A5B0 1028 0024                  		move.b	$24(a0),d0
0001A5B4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A5B8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A5BC                            ; ===========================================================================
0001A5BC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A5BE 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A5C0 0000                       		dc.w loc_1A38E-Obj85_Index
0001A5C2 0000                       		dc.w loc_1A346-Obj85_Index
0001A5C4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A5C6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A5C8 0000                       		dc.w loc_1A264-Obj85_Index
0001A5CA                            
0001A5CA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A5D0 0001 A2A0                  		dc.l Map_obj82		; mappings pointer
0001A5D4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A5DA 0000 0000                  		dc.l Map_obj84
0001A5DE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A5E4 0000 0000                  		dc.l Map_FZBoss
0001A5E8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A5EE 0001 A2A0                  		dc.l Map_obj82
0001A5F2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5F8 0001 85E2                  		dc.l Map_Eggman
0001A5FC 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A602 0001 85E2                  		dc.l Map_Eggman
0001A606                            
0001A606 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A60B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A610 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A615 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A61A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A61F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A624                            ; ===========================================================================
0001A624                            
0001A624                            Obj85_Main:				; XREF: Obj85_Index
0001A624 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A628 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A62C 2248                       		movea.l	a0,a1
0001A62E 7205                       		moveq	#5,d1
0001A630 6000                       		bra.s	Obj85_LoadBoss
0001A632                            ; ===========================================================================
0001A632                            
0001A632                            Obj85_Loop:
0001A632 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001A638 6600                       		bne.s	loc_19E20
0001A63A                            
0001A63A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A63A 12BC 0085                  		move.b	#$85,(a1)
0001A63E 335A 0008                  		move.w	(a2)+,8(a1)
0001A642 335A 000C                  		move.w	(a2)+,$C(a1)
0001A646 335A 0002                  		move.w	(a2)+,2(a1)
0001A64A 235A 0004                  		move.l	(a2)+,4(a1)
0001A64E 135B 0024                  		move.b	(a3)+,$24(a1)
0001A652 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A656 135B 0018                  		move.b	(a3)+,$18(a1)
0001A65A 135B 0017                  		move.b	(a3)+,$17(a1)
0001A65E 135B 0016                  		move.b	(a3)+,$16(a1)
0001A662 137C 0004 0001             		move.b	#4,1(a1)
0001A668 08E8 0007 0001             		bset	#7,1(a0)
0001A66E 2348 0034                  		move.l	a0,$34(a1)
0001A672 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A676                            
0001A676                            loc_19E20:
0001A676 45E8 0036                  		lea	$36(a0),a2
0001A67A 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001A680 6600                       		bne.s	loc_19E5A
0001A682 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A686 3489                       		move.w	a1,(a2)
0001A688 2348 0034                  		move.l	a0,$34(a1)
0001A68C 45E8 0038                  		lea	$38(a0),a2
0001A690 7400                       		moveq	#0,d2
0001A692 7203                       		moveq	#3,d1
0001A694                            
0001A694                            loc_19E3E:
0001A694 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001A69A 6600                       		bne.s	loc_19E5A
0001A69C 34C9                       		move.w	a1,(a2)+
0001A69E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A6A2 2348 0034                  		move.l	a0,$34(a1)
0001A6A6 1342 0028                  		move.b	d2,$28(a1)
0001A6AA 5442                       		addq.w	#2,d2
0001A6AC 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A6B0                            
0001A6B0                            loc_19E5A:
0001A6B0 317C 0000 0034             		move.w	#0,$34(a0)
0001A6B6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A6BC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6C2                            
0001A6C2                            Obj85_Eggman:				; XREF: Obj85_Index
0001A6C2 7000                       		moveq	#0,d0
0001A6C4 1028 0034                  		move.b	$34(a0),d0
0001A6C8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A6CC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A6D0 4EF9 0000 DD72             		jmp	DisplaySprite
0001A6D6                            ; ===========================================================================
0001A6D6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A6DA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A6DE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A6E2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A6E6                            ; ===========================================================================
0001A6E6                            
0001A6E6                            loc_19E90:				; XREF: off_19E80
0001A6E6 4AB8 F680                  		tst.l	($FFFFF680).w
0001A6EA 6600                       		bne.s	loc_19EA2
0001A6EC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A6F2 6500                       		bcs.s	loc_19EA2
0001A6F4 5428 0034                  		addq.b	#2,$34(a0)
0001A6F8                            
0001A6F8                            loc_19EA2:
0001A6F8 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A6FC 4E75                       		rts	
0001A6FE                            ; ===========================================================================
0001A6FE                            
0001A6FE                            loc_19EA8:				; XREF: off_19E80
0001A6FE 4A68 0030                  		tst.w	$30(a0)
0001A702 6A00                       		bpl.s	loc_19F10
0001A704 4268 0030                  		clr.w	$30(a0)
0001A708 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A70E 0240 000C                  		andi.w	#$C,d0
0001A712 3200                       		move.w	d0,d1
0001A714 5441                       		addq.w	#2,d1
0001A716 4A80                       		tst.l	d0
0001A718 6A00                       		bpl.s	loc_19EC6
0001A71A C141                       		exg	d1,d0
0001A71C                            
0001A71C                            loc_19EC6:
0001A71C 43FA 0000                  		lea	word_19FD6(pc),a1
0001A720 3031 0000                  		move.w	(a1,d0.w),d0
0001A724 3231 1000                  		move.w	(a1,d1.w),d1
0001A728 3140 0030                  		move.w	d0,$30(a0)
0001A72C 74FF                       		moveq	#-1,d2
0001A72E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A732 2242                       		movea.l	d2,a1
0001A734 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A73A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A740 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A744 2242                       		movea.l	d2,a1
0001A746 137C 0001 0029             		move.b	#1,$29(a1)
0001A74C 337C 0000 0030             		move.w	#0,$30(a1)
0001A752 317C 0001 0032             		move.w	#1,$32(a0)
0001A758 4228 0035                  		clr.b	$35(a0)
0001A75C 303C 00B7                  		move.w	#$B7,d0
0001A760 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A766                            
0001A766                            loc_19F10:
0001A766 4A68 0032                  		tst.w	$32(a0)
0001A76A 6B00 0000                  		bmi.w	loc_19FA6
0001A76E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A774 3038 D008                  		move.w	($FFFFD008).w,d0
0001A778 9068 0008                  		sub.w	8(a0),d0
0001A77C 6500                       		bcs.s	loc_19F2E
0001A77E 08E8 0000 0022             		bset	#0,$22(a0)
0001A784                            
0001A784                            loc_19F2E:
0001A784 323C 002B                  		move.w	#$2B,d1
0001A788 343C 0014                  		move.w	#$14,d2
0001A78C 363C 0014                  		move.w	#$14,d3
0001A790 3828 0008                  		move.w	8(a0),d4
0001A794 4EB9 0001 0142             		jsr	SolidObject
0001A79A 4A44                       		tst.w	d4
0001A79C 6E00                       		bgt.s	loc_19F50
0001A79E                            
0001A79E                            loc_19F48:
0001A79E 4A28 0035                  		tst.b	$35(a0)
0001A7A2 6600                       		bne.s	loc_19F88
0001A7A4 6000                       		bra.s	loc_19F96
0001A7A6                            ; ===========================================================================
0001A7A6                            
0001A7A6                            loc_19F50:
0001A7A6 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A7AA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A7B0 66EC                       		bne.s	loc_19F48
0001A7B2 303C 0300                  		move.w	#$300,d0
0001A7B6 0828 0000 0022             		btst	#0,$22(a0)
0001A7BC 6600                       		bne.s	loc_19F6A
0001A7BE 4440                       		neg.w	d0
0001A7C0                            
0001A7C0                            loc_19F6A:
0001A7C0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A7C4 4A28 0035                  		tst.b	$35(a0)
0001A7C8 6600                       		bne.s	loc_19F88
0001A7CA 5328 0021                  		subq.b	#1,$21(a0)
0001A7CE 117C 0064 0035             		move.b	#$64,$35(a0)
0001A7D4 303C 00AC                  		move.w	#$AC,d0
0001A7D8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7DE                            
0001A7DE                            loc_19F88:
0001A7DE 5328 0035                  		subq.b	#1,$35(a0)
0001A7E2 6700                       		beq.s	loc_19F96
0001A7E4 117C 0003 001C             		move.b	#3,$1C(a0)
0001A7EA 6000                       		bra.s	loc_19F9C
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_19F96:
0001A7EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7F2                            
0001A7F2                            loc_19F9C:
0001A7F2 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A7F6 4EF9 0000 AE32             		jmp	AnimateSprite
0001A7FC                            ; ===========================================================================
0001A7FC                            
0001A7FC                            loc_19FA6:
0001A7FC 4A28 0021                  		tst.b	$21(a0)
0001A800 6700                       		beq.s	loc_19FBC
0001A802 5428 0034                  		addq.b	#2,$34(a0)
0001A806 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A80C 4268 0032                  		clr.w	$32(a0)
0001A810 4E75                       		rts	
0001A812                            ; ===========================================================================
0001A812                            
0001A812                            loc_19FBC:
0001A812 117C 0006 0034             		move.b	#6,$34(a0)
0001A818 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A81E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A824 117C 0014 0016             		move.b	#$14,$16(a0)
0001A82A 4E75                       		rts	
0001A82C                            ; ===========================================================================
0001A82C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A83C                            ; ===========================================================================
0001A83C                            
0001A83C                            loc_19FE6:				; XREF: off_19E80
0001A83C 70FF                       		moveq	#-1,d0
0001A83E 3028 0036                  		move.w	$36(a0),d0
0001A842 2240                       		movea.l	d0,a1
0001A844 4A68 0030                  		tst.w	$30(a0)
0001A848 6A00                       		bpl.s	loc_1A000
0001A84A 4268 0030                  		clr.w	$30(a0)
0001A84E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A854 6100                       		bsr.s	loc_1A020
0001A856                            
0001A856                            loc_1A000:
0001A856 700F                       		moveq	#$F,d0
0001A858 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A85C 6600                       		bne.s	loc_1A00A
0001A85E 6100                       		bsr.s	loc_1A020
0001A860                            
0001A860                            loc_1A00A:
0001A860 4A68 0032                  		tst.w	$32(a0)
0001A864 6700                       		beq.s	locret_1A01E
0001A866 5528 0034                  		subq.b	#2,$34(a0)
0001A86A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A870 4268 0032                  		clr.w	$32(a0)
0001A874                            
0001A874                            locret_1A01E:
0001A874 4E75                       		rts	
0001A876                            ; ===========================================================================
0001A876                            
0001A876                            loc_1A020:
0001A876 303C 00B1                  		move.w	#$B1,d0
0001A87A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_1A02A:				; XREF: off_19E80
0001A880 117C 0030 0017             		move.b	#$30,$17(a0)
0001A886 08E8 0000 0022             		bset	#0,$22(a0)
0001A88C 4EB9 0000 DD4C             		jsr	SpeedToPos
0001A892 117C 0006 001A             		move.b	#6,$1A(a0)
0001A898 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A89E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A8A4 6500                       		bcs.s	loc_1A070
0001A8A6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A8AC 5428 0034                  		addq.b	#2,$34(a0)
0001A8B0 117C 0020 0017             		move.b	#$20,$17(a0)
0001A8B6 317C 0100 0010             		move.w	#$100,$10(a0)
0001A8BC 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A8C2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A8C6                            
0001A8C6                            loc_1A070:
0001A8C6 6000 0000                  		bra.w	loc_1A166
0001A8CA                            ; ===========================================================================
0001A8CA                            
0001A8CA                            loc_1A074:				; XREF: off_19E80
0001A8CA 08E8 0000 0022             		bset	#0,$22(a0)
0001A8D0 117C 0004 001C             		move.b	#4,$1C(a0)
0001A8D6 4EB9 0000 DD4C             		jsr	SpeedToPos
0001A8DC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A8E2 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A8E8 6500                       		bcs.s	loc_1A09A
0001A8EA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A8F0                            
0001A8F0                            loc_1A09A:
0001A8F0 317C 0400 0010             		move.w	#$400,$10(a0)
0001A8F6 3028 0008                  		move.w	8(a0),d0
0001A8FA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A8FE 6A00                       		bpl.s	loc_1A0B4
0001A900 317C 0500 0010             		move.w	#$500,$10(a0)
0001A906 6000 0000                  		bra.w	loc_1A0F2
0001A90A                            ; ===========================================================================
0001A90A                            
0001A90A                            loc_1A0B4:
0001A90A 0440 0070                  		subi.w	#$70,d0
0001A90E 6500                       		bcs.s	loc_1A0F2
0001A910 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A916 5140                       		subq.w	#8,d0
0001A918 6500                       		bcs.s	loc_1A0F2
0001A91A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A920 5140                       		subq.w	#8,d0
0001A922 6500                       		bcs.s	loc_1A0F2
0001A924 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A92A 5140                       		subq.w	#8,d0
0001A92C 6500                       		bcs.s	loc_1A0F2
0001A92E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A934 5140                       		subq.w	#8,d0
0001A936 6500                       		bcs.s	loc_1A0F2
0001A938 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A93E 0440 0038                  		subi.w	#$38,d0
0001A942 6500                       		bcs.s	loc_1A0F2
0001A944 4268 0010                  		clr.w	$10(a0)
0001A948                            
0001A948                            loc_1A0F2:
0001A948 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A94E 6500                       		bcs.s	loc_1A110
0001A950 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A956 317C 0240 0010             		move.w	#$240,$10(a0)
0001A95C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A962 5428 0034                  		addq.b	#2,$34(a0)
0001A966                            
0001A966                            loc_1A110:
0001A966 6000                       		bra.s	loc_1A15C
0001A968                            ; ===========================================================================
0001A968                            
0001A968                            loc_1A112:				; XREF: off_19E80
0001A968 4EB9 0000 DD4C             		jsr	SpeedToPos
0001A96E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A974 6500                       		bcs.s	loc_1A124
0001A976 4268 0010                  		clr.w	$10(a0)
0001A97A                            
0001A97A                            loc_1A124:
0001A97A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A980 4A68 0012                  		tst.w	$12(a0)
0001A984 6B00                       		bmi.s	loc_1A142
0001A986 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A98C 6500                       		bcs.s	loc_1A142
0001A98E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A994 4268 0012                  		clr.w	$12(a0)
0001A998                            
0001A998                            loc_1A142:
0001A998 3028 0010                  		move.w	$10(a0),d0
0001A99C 8068 0012                  		or.w	$12(a0),d0
0001A9A0 6600                       		bne.s	loc_1A15C
0001A9A2 5428 0034                  		addq.b	#2,$34(a0)
0001A9A6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A9AC 117C 0001 0021             		move.b	#1,$21(a0)
0001A9B2                            
0001A9B2                            loc_1A15C:
0001A9B2 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A9B6 4EB9 0000 AE32             		jsr	AnimateSprite
0001A9BC                            
0001A9BC                            loc_1A166:
0001A9BC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A9C2 6C00                       		bge.s	loc_1A172
0001A9C4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A9C8                            
0001A9C8                            loc_1A172:
0001A9C8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A9CE 6C00                       		bge.s	locret_1A190
0001A9D0 323C 001B                  		move.w	#$1B,d1
0001A9D4 343C 0070                  		move.w	#$70,d2
0001A9D8 363C 0071                  		move.w	#$71,d3
0001A9DC 3828 0008                  		move.w	8(a0),d4
0001A9E0 4EF9 0001 0142             		jmp	SolidObject
0001A9E6                            ; ===========================================================================
0001A9E6                            
0001A9E6                            locret_1A190:
0001A9E6 4E75                       		rts	
0001A9E8                            ; ===========================================================================
0001A9E8                            
0001A9E8                            loc_1A192:				; XREF: off_19E80
0001A9E8 217C 0001 85E2 0004        		move.l	#Map_Eggman,4(a0)
0001A9F0 317C 0400 0002             		move.w	#$400,2(a0)
0001A9F6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9FC 08E8 0000 0022             		bset	#0,$22(a0)
0001AA02 4EB9 0000 DD4C             		jsr	SpeedToPos
0001AA08 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AA0E 6400                       		bcc.s	loc_1A1D0
0001AA10 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA16 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA1C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA22 5428 0034                  		addq.b	#2,$34(a0)
0001AA26                            
0001AA26                            loc_1A1D0:
0001AA26 6000 FF8A                  		bra.w	loc_1A15C
0001AA2A                            ; ===========================================================================
0001AA2A                            
0001AA2A                            loc_1A1D4:				; XREF: off_19E80
0001AA2A 08E8 0000 0022             		bset	#0,$22(a0)
0001AA30 4EB9 0000 DD4C             		jsr	SpeedToPos
0001AA36 4A68 0030                  		tst.w	$30(a0)
0001AA3A 6600                       		bne.s	loc_1A1FC
0001AA3C 4A28 0020                  		tst.b	$20(a0)
0001AA40 6600                       		bne.s	loc_1A216
0001AA42 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AA48 303C 00AC                  		move.w	#$AC,d0
0001AA4C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA52                            
0001AA52                            loc_1A1FC:
0001AA52 5368 0030                  		subq.w	#1,$30(a0)
0001AA56 6600                       		bne.s	loc_1A216
0001AA58 4A28 0022                  		tst.b	$22(a0)
0001AA5C 6A00                       		bpl.s	loc_1A210
0001AA5E 317C 0060 0012             		move.w	#$60,$12(a0)
0001AA64 6000                       		bra.s	loc_1A216
0001AA66                            ; ===========================================================================
0001AA66                            
0001AA66                            loc_1A210:
0001AA66 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA6C                            
0001AA6C                            loc_1A216:
0001AA6C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AA72 6D00                       		blt.s	loc_1A23A
0001AA74 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AA7A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AA80 4278 D014                  		clr.w	($FFFFD014).w
0001AA84 4A68 0012                  		tst.w	$12(a0)
0001AA88 6A00                       		bpl.s	loc_1A248
0001AA8A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AA90                            
0001AA90                            loc_1A23A:
0001AA90 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AA96 6D00                       		blt.s	loc_1A248
0001AA98 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AA9E                            
0001AA9E                            loc_1A248:
0001AA9E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AAA4 6500                       		bcs.s	loc_1A260
0001AAA6 4A28 0001                  		tst.b	1(a0)
0001AAAA 6B00                       		bmi.s	loc_1A260
0001AAAC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AAB2 6000 FAF4                  		bra.w	Obj85_Delete
0001AAB6                            ; ===========================================================================
0001AAB6                            
0001AAB6                            loc_1A260:
0001AAB6 6000 FEFA                  		bra.w	loc_1A15C
0001AABA                            ; ===========================================================================
0001AABA                            
0001AABA                            loc_1A264:				; XREF: Obj85_Index
0001AABA 2268 0034                  		movea.l	$34(a0),a1
0001AABE 1011                       		move.b	(a1),d0
0001AAC0 B010                       		cmp.b	(a0),d0
0001AAC2 6600 FAE4                  		bne.w	Obj85_Delete
0001AAC6 117C 0007 001C             		move.b	#7,$1C(a0)
0001AACC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AAD2 6C00                       		bge.s	loc_1A280
0001AAD4 6000                       		bra.s	loc_1A2A6
0001AAD6                            ; ===========================================================================
0001AAD6                            
0001AAD6                            loc_1A280:
0001AAD6 4A69 0010                  		tst.w	$10(a1)
0001AADA 6700                       		beq.s	loc_1A28C
0001AADC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AAE2                            
0001AAE2                            loc_1A28C:
0001AAE2 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AAE6 4EB9 0000 AE32             		jsr	AnimateSprite
0001AAEC                            
0001AAEC                            loc_1A296:
0001AAEC 2268 0034                  		movea.l	$34(a0),a1
0001AAF0 3169 0008 0008             		move.w	8(a1),8(a0)
0001AAF6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AAFC                            
0001AAFC                            loc_1A2A6:
0001AAFC 2268 0034                  		movea.l	$34(a0),a1
0001AB00 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AB06 7003                       		moveq	#3,d0
0001AB08 C028 0022                  		and.b	$22(a0),d0
0001AB0C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB12 8128 0001                  		or.b	d0,1(a0)
0001AB16 4EF9 0000 DD72             		jmp	DisplaySprite
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            loc_1A2C6:				; XREF: Obj85_Index
0001AB1C 2268 0034                  		movea.l	$34(a0),a1
0001AB20 1011                       		move.b	(a1),d0
0001AB22 B010                       		cmp.b	(a0),d0
0001AB24 6600 FA82                  		bne.w	Obj85_Delete
0001AB28 0CA9 0001 85E2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB30 6700                       		beq.s	loc_1A2E4
0001AB32 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AB38 60C2                       		bra.s	loc_1A2A6
0001AB3A                            ; ===========================================================================
0001AB3A                            
0001AB3A                            loc_1A2E4:
0001AB3A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB40 4A29 0021                  		tst.b	$21(a1)
0001AB44 6F00                       		ble.s	loc_1A312
0001AB46 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB4C 217C 0001 85E2 0004        		move.l	#Map_Eggman,4(a0)
0001AB54 317C 0400 0002             		move.w	#$400,2(a0)
0001AB5A 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AB5E 4EB9 0000 AE32             		jsr	AnimateSprite
0001AB64 6000 FF86                  		bra.w	loc_1A296
0001AB68                            ; ===========================================================================
0001AB68                            
0001AB68                            loc_1A312:
0001AB68 4A28 0001                  		tst.b	1(a0)
0001AB6C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AB70 6100 D588                  		bsr.w	BossDefeated
0001AB74 117C 0002 0018             		move.b	#2,$18(a0)
0001AB7A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB80 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AB88 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AB8E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AB92 4EB9 0000 AE32             		jsr	AnimateSprite
0001AB98 6000 FF52                  		bra.w	loc_1A296
0001AB9C                            ; ===========================================================================
0001AB9C                            
0001AB9C                            loc_1A346:				; XREF: Obj85_Index
0001AB9C 08E8 0000 0022             		bset	#0,$22(a0)
0001ABA2 2268 0034                  		movea.l	$34(a0),a1
0001ABA6 0CA9 0001 85E2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABAE 6700                       		beq.s	loc_1A35E
0001ABB0 6000 FF4A                  		bra.w	loc_1A2A6
0001ABB4                            ; ===========================================================================
0001ABB4                            
0001ABB4                            loc_1A35E:
0001ABB4 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABBA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABC0 4A28 001E                  		tst.b	$1E(a0)
0001ABC4 6600                       		bne.s	loc_1A376
0001ABC6 117C 0014 001E             		move.b	#$14,$1E(a0)
0001ABCC                            
0001ABCC                            loc_1A376:
0001ABCC 5328 001E                  		subq.b	#1,$1E(a0)
0001ABD0 6E00                       		bgt.s	loc_1A38A
0001ABD2 5228 001A                  		addq.b	#1,$1A(a0)
0001ABD6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001ABDC 6E00 F9CA                  		bgt.w	Obj85_Delete
0001ABE0                            
0001ABE0                            loc_1A38A:
0001ABE0 6000 FF0A                  		bra.w	loc_1A296
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            loc_1A38E:				; XREF: Obj85_Index
0001ABE4 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ABEA 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABEE 9068 0008                  		sub.w	8(a0),d0
0001ABF2 6500                       		bcs.s	loc_1A3A6
0001ABF4 4A28 0001                  		tst.b	1(a0)
0001ABF8 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ABFC                            
0001ABFC                            loc_1A3A6:
0001ABFC 4EF9 0000 DD72             		jmp	DisplaySprite
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            loc_1A3AC:				; XREF: Obj85_Index
0001AC02 117C 0000 001A             		move.b	#0,$1A(a0)
0001AC08 08E8 0000 0022             		bset	#0,$22(a0)
0001AC0E 2268 0034                  		movea.l	$34(a0),a1
0001AC12 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC18 6600                       		bne.s	loc_1A3D0
0001AC1A 0CA9 0001 85E2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC22 6700 F984                  		beq.w	Obj85_Delete
0001AC26                            
0001AC26                            loc_1A3D0:
0001AC26 6000 FED4                  		bra.w	loc_1A2A6
0001AC2A                            ; ===========================================================================
0001AC2A                            Ani_obj85:
0001AC2A                            	include "_anim\obj85.asm"
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            ; Animation script - Eggman (FZ)
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AC2C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AC30                            		even
0001AC30                            		even
0001AC30                            
0001AC30                            Map_Eggman2:
0001AC30                            	include "_maps\Eggman2.asm"
0001AC30                            ; ---------------------------------------------------------------------------
0001AC30                            ; Sprite mappings - Eggman (FZ)
0001AC30                            ; ---------------------------------------------------------------------------
0001AC30 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AC32 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AC34 06                         byte_1A3DE:	dc.b 6
0001AC35 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AC3A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AC3F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC44 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC49 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC4E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC53 06                         byte_1A3FD:	dc.b 6
0001AC54 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AC59 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AC5E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC63 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC68 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC6D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC72                            		even
0001AC72                            		even
0001AC72                            
0001AC72                            Map_FZBoss:
0001AC72                            	include "_maps\FZ boss.asm"
0001AC72                            ; ---------------------------------------------------------------------------
0001AC72                            ; Sprite mappings - boss (FZ)
0001AC72                            ; ---------------------------------------------------------------------------
0001AC72 0000                       		dc.w byte_1A422-Map_FZBoss
0001AC74 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AC76 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AC78 02                         byte_1A422:	dc.b 2
0001AC79 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AC7E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AC83 03                         byte_1A42D:	dc.b 3
0001AC84 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AC89 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AC8E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AC93 02                         byte_1A43D:	dc.b 2
0001AC94 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AC99 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AC9E                            		even
0001AC9E                            		even
0001AC9E                            
0001AC9E                            ; ===========================================================================
0001AC9E                            
0001AC9E                            Obj84_Delete:
0001AC9E 4EF9 0000 DDAE             		jmp	DeleteObject
0001ACA4                            ; ===========================================================================
0001ACA4                            ; ---------------------------------------------------------------------------
0001ACA4                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001ACA4                            ; ---------------------------------------------------------------------------
0001ACA4                            
0001ACA4                            Obj84:					; XREF: Obj_Index
0001ACA4 7000                       		moveq	#0,d0
0001ACA6 1028 0024                  		move.b	$24(a0),d0
0001ACAA 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001ACAE 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001ACB2                            ; ===========================================================================
0001ACB2 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001ACB4 0000                       		dc.w loc_1A4CE-Obj84_Index
0001ACB6 0000                       		dc.w loc_1A57E-Obj84_Index
0001ACB8                            
0001ACB8 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001ACBC 2550 0620                  		dc.w $2550, $620
0001ACC0 2490 04C0                  		dc.w $2490, $4C0
0001ACC4 2510 04C0                  		dc.w $2510, $4C0
0001ACC8                            ; ===========================================================================
0001ACC8                            
0001ACC8                            Obj84_Main:				; XREF: Obj84_Index
0001ACC8 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ACCC 7000                       		moveq	#0,d0
0001ACCE 1028 0028                  		move.b	$28(a0),d0
0001ACD2 D040                       		add.w	d0,d0
0001ACD4 D2C0                       		adda.w	d0,a1
0001ACD6 117C 0004 0001             		move.b	#4,1(a0)
0001ACDC 08E8 0007 0001             		bset	#7,1(a0)
0001ACE2 08E8 0004 0001             		bset	#4,1(a0)
0001ACE8 317C 0300 0002             		move.w	#$300,2(a0)
0001ACEE 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ACF6 3159 0008                  		move.w	(a1)+,8(a0)
0001ACFA 3151 000C                  		move.w	(a1),$C(a0)
0001ACFE 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD02 117C 0020 0016             		move.b	#$20,$16(a0)
0001AD08 117C 0060 0017             		move.b	#$60,$17(a0)
0001AD0E 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD14 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD1A 117C 0003 0018             		move.b	#3,$18(a0)
0001AD20 5428 0024                  		addq.b	#2,$24(a0)
0001AD24                            
0001AD24                            loc_1A4CE:				; XREF: Obj84_Index
0001AD24 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD2A 6F00                       		ble.s	loc_1A4DC
0001AD2C 08E8 0001 0001             		bset	#1,1(a0)
0001AD32                            
0001AD32                            loc_1A4DC:
0001AD32 42A8 003C                  		clr.l	$3C(a0)
0001AD36 4A28 0029                  		tst.b	$29(a0)
0001AD3A 6700                       		beq.s	loc_1A4EA
0001AD3C 5428 0024                  		addq.b	#2,$24(a0)
0001AD40                            
0001AD40                            loc_1A4EA:
0001AD40 2028 003C                  		move.l	$3C(a0),d0
0001AD44 2228 0038                  		move.l	$38(a0),d1
0001AD48 D280                       		add.l	d0,d1
0001AD4A 4841                       		swap	d1
0001AD4C 3141 000C                  		move.w	d1,$C(a0)
0001AD50 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AD56 6600                       		bne.s	loc_1A524
0001AD58 4A68 0030                  		tst.w	$30(a0)
0001AD5C 6A00                       		bpl.s	loc_1A524
0001AD5E 70F6                       		moveq	#-$A,d0
0001AD60 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD66 6F00                       		ble.s	loc_1A514
0001AD68 700E                       		moveq	#$E,d0
0001AD6A                            
0001AD6A                            loc_1A514:
0001AD6A D240                       		add.w	d0,d1
0001AD6C 2268 0034                  		movea.l	$34(a0),a1
0001AD70 3341 000C                  		move.w	d1,$C(a1)
0001AD74 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD7A                            
0001AD7A                            loc_1A524:
0001AD7A 323C 002B                  		move.w	#$2B,d1
0001AD7E 343C 0060                  		move.w	#$60,d2
0001AD82 363C 0061                  		move.w	#$61,d3
0001AD86 3828 0008                  		move.w	8(a0),d4
0001AD8A 4EB9 0001 0142             		jsr	SolidObject
0001AD90 7000                       		moveq	#0,d0
0001AD92 3228 003C                  		move.w	$3C(a0),d1
0001AD96 6A00                       		bpl.s	loc_1A550
0001AD98 4441                       		neg.w	d1
0001AD9A 5141                       		subq.w	#8,d1
0001AD9C 6500                       		bcs.s	loc_1A55C
0001AD9E 5200                       		addq.b	#1,d0
0001ADA0 E841                       		asr.w	#4,d1
0001ADA2 D041                       		add.w	d1,d0
0001ADA4 6000                       		bra.s	loc_1A55C
0001ADA6                            ; ===========================================================================
0001ADA6                            
0001ADA6                            loc_1A550:
0001ADA6 0441 0027                  		subi.w	#$27,d1
0001ADAA 6500                       		bcs.s	loc_1A55C
0001ADAC 5200                       		addq.b	#1,d0
0001ADAE E841                       		asr.w	#4,d1
0001ADB0 D041                       		add.w	d1,d0
0001ADB2                            
0001ADB2                            loc_1A55C:
0001ADB2 1140 001A                  		move.b	d0,$1A(a0)
0001ADB6 3038 D008                  		move.w	($FFFFD008).w,d0
0001ADBA 9068 0008                  		sub.w	8(a0),d0
0001ADBE 6B00                       		bmi.s	loc_1A578
0001ADC0 0440 0140                  		subi.w	#$140,d0
0001ADC4 6B00                       		bmi.s	loc_1A578
0001ADC6 4A28 0001                  		tst.b	1(a0)
0001ADCA 6A00 FED2                  		bpl.w	Obj84_Delete
0001ADCE                            
0001ADCE                            loc_1A578:
0001ADCE 4EF9 0000 DD72             		jmp	DisplaySprite
0001ADD4                            ; ===========================================================================
0001ADD4                            
0001ADD4                            loc_1A57E:				; XREF: Obj84_Index
0001ADD4 7000                       		moveq	#0,d0
0001ADD6 1028 0028                  		move.b	$28(a0),d0
0001ADDA 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001ADDE 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001ADE2 6000 FF5C                  		bra.w	loc_1A4EA
0001ADE6                            ; ===========================================================================
0001ADE6 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ADE8 0000                       		dc.w loc_1A598-off_1A590
0001ADEA 0000                       		dc.w loc_1A604-off_1A590
0001ADEC 0000                       		dc.w loc_1A604-off_1A590
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE                            loc_1A598:				; XREF: off_1A590
0001ADEE 4A28 0029                  		tst.b	$29(a0)
0001ADF2 6600                       		bne.s	loc_1A5D4
0001ADF4 2268 0034                  		movea.l	$34(a0),a1
0001ADF8 4A29 0021                  		tst.b	$21(a1)
0001ADFC 6600                       		bne.s	loc_1A5B4
0001ADFE 6100 D2FA                  		bsr.w	BossDefeated
0001AE02 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AE0A                            
0001AE0A                            loc_1A5B4:
0001AE0A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE12 6400                       		bcc.s	locret_1A602
0001AE14 42A8 003C                  		clr.l	$3C(a0)
0001AE18 2268 0034                  		movea.l	$34(a0),a1
0001AE1C 5369 0032                  		subq.w	#1,$32(a1)
0001AE20 4269 0030                  		clr.w	$30(a1)
0001AE24 5528 0024                  		subq.b	#2,$24(a0)
0001AE28 4E75                       		rts	
0001AE2A                            ; ===========================================================================
0001AE2A                            
0001AE2A                            loc_1A5D4:
0001AE2A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AE30 6C00                       		bge.s	loc_1A5E4
0001AE32 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AE3A                            
0001AE3A                            loc_1A5E4:
0001AE3A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AE42 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AE48 6E00                       		bgt.s	locret_1A602
0001AE4A 4268 003E                  		clr.w	$3E(a0)
0001AE4E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AE54 4228 0029                  		clr.b	$29(a0)
0001AE58                            
0001AE58                            locret_1A602:
0001AE58 4E75                       		rts	
0001AE5A                            ; ===========================================================================
0001AE5A                            
0001AE5A                            loc_1A604:				; XREF: off_1A590
0001AE5A 08E8 0001 0001             		bset	#1,1(a0)
0001AE60 4A28 0029                  		tst.b	$29(a0)
0001AE64 6600                       		bne.s	loc_1A646
0001AE66 2268 0034                  		movea.l	$34(a0),a1
0001AE6A 4A29 0021                  		tst.b	$21(a1)
0001AE6E 6600                       		bne.s	loc_1A626
0001AE70 6100 D288                  		bsr.w	BossDefeated
0001AE74 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AE7C                            
0001AE7C                            loc_1A626:
0001AE7C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AE84 6400                       		bcc.s	locret_1A674
0001AE86 42A8 003C                  		clr.l	$3C(a0)
0001AE8A 2268 0034                  		movea.l	$34(a0),a1
0001AE8E 5369 0032                  		subq.w	#1,$32(a1)
0001AE92 4269 0030                  		clr.w	$30(a1)
0001AE96 5528 0024                  		subq.b	#2,$24(a0)
0001AE9A 4E75                       		rts	
0001AE9C                            ; ===========================================================================
0001AE9C                            
0001AE9C                            loc_1A646:
0001AE9C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AEA2 6D00                       		blt.s	loc_1A656
0001AEA4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AEAC                            
0001AEAC                            loc_1A656:
0001AEAC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AEB4 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AEBA 6D00                       		blt.s	locret_1A674
0001AEBC 4268 003E                  		clr.w	$3E(a0)
0001AEC0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AEC6 4228 0029                  		clr.b	$29(a0)
0001AECA                            
0001AECA                            locret_1A674:
0001AECA 4E75                       		rts	
0001AECC                            ; ===========================================================================
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            Map_obj84:
0001AECC                            	include "_maps\obj84.asm"
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AED0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AED4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AED8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AEDC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AEE0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AEE4 06                         byte_1A68E:	dc.b 6
0001AEE5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEEA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEEF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEF4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEF9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEFE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF03 08                         byte_1A6AD:	dc.b 8
0001AF04 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF09 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF0E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF13 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF18 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF1D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF22 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF27 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF2C 0A                         byte_1A6D6:	dc.b $A
0001AF2D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF32 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF37 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF3C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF41 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF46 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF4B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF50 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF55 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF5A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF5F 0C                         byte_1A709:	dc.b $C
0001AF60 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF65 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF6A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF6F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF74 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF79 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF7E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF83 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF88 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF8D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF92 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF97 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF9C 0D                         byte_1A746:	dc.b $D
0001AF9D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFA2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFA7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFAC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFB1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFB6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFBB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFC0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFC5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFCA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFCF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFD4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AFD9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AFDE 0E                         byte_1A788:	dc.b $E
0001AFDF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFE4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFE9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFEE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFF3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFF8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFFD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B002 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B007 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B00C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B011 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B016 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B01B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B020 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B025 02                         byte_1A7CF:	dc.b 2
0001B026 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B02B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B030                            		even
0001B030                            		even
0001B030                            
0001B030                            ; ===========================================================================
0001B030                            ; ---------------------------------------------------------------------------
0001B030                            ; Object 86 - energy balls (FZ)
0001B030                            ; ---------------------------------------------------------------------------
0001B030                            
0001B030                            Obj86:					; XREF: Obj_Index
0001B030 7000                       		moveq	#0,d0
0001B032 1028 0024                  		move.b	$24(a0),d0
0001B036 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B03A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B03E                            ; ===========================================================================
0001B03E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B040 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B042 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B044 0000                       		dc.w loc_1A962-Obj86_Index
0001B046 0000                       		dc.w loc_1A982-Obj86_Index
0001B048                            ; ===========================================================================
0001B048                            
0001B048                            Obj86_Main:				; XREF: Obj86_Index
0001B048 317C 2588 0008             		move.w	#$2588,8(a0)
0001B04E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B054 317C 0300 0002             		move.w	#$300,2(a0)
0001B05A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B062 117C 0000 001C             		move.b	#0,$1C(a0)
0001B068 117C 0003 0018             		move.b	#3,$18(a0)
0001B06E 117C 0008 0017             		move.b	#8,$17(a0)
0001B074 117C 0008 0016             		move.b	#8,$16(a0)
0001B07A 117C 0004 0001             		move.b	#4,1(a0)
0001B080 08E8 0007 0001             		bset	#7,1(a0)
0001B086 5428 0024                  		addq.b	#2,$24(a0)
0001B08A                            
0001B08A                            Obj86_Generator:			; XREF: Obj86_Index
0001B08A 2268 0034                  		movea.l	$34(a0),a1
0001B08E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B094 6600                       		bne.s	loc_1A850
0001B096 10BC 003F                  		move.b	#$3F,(a0)
0001B09A 117C 0000 0024             		move.b	#0,$24(a0)
0001B0A0 4EF9 0000 DD72             		jmp	DisplaySprite
0001B0A6                            ; ===========================================================================
0001B0A6                            
0001B0A6                            loc_1A850:
0001B0A6 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0AC 4A28 0029                  		tst.b	$29(a0)
0001B0B0 6700                       		beq.s	loc_1A86C
0001B0B2 5428 0024                  		addq.b	#2,$24(a0)
0001B0B6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0BC 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B0C2                            
0001B0C2                            loc_1A86C:
0001B0C2 323C 0013                  		move.w	#$13,d1
0001B0C6 343C 0008                  		move.w	#8,d2
0001B0CA 363C 0011                  		move.w	#$11,d3
0001B0CE 3828 0008                  		move.w	8(a0),d4
0001B0D2 4EB9 0001 0142             		jsr	SolidObject
0001B0D8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0DC 9068 0008                  		sub.w	8(a0),d0
0001B0E0 6B00                       		bmi.s	loc_1A89A
0001B0E2 0440 0140                  		subi.w	#$140,d0
0001B0E6 6B00                       		bmi.s	loc_1A89A
0001B0E8 4A28 0001                  		tst.b	1(a0)
0001B0EC 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B0F0                            
0001B0F0                            loc_1A89A:
0001B0F0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B0F4 4EB9 0000 AE32             		jsr	AnimateSprite
0001B0FA 4EF9 0000 DD72             		jmp	DisplaySprite
0001B100                            ; ===========================================================================
0001B100                            
0001B100                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B100 4A28 0029                  		tst.b	$29(a0)
0001B104 6700 0000                  		beq.w	loc_1A954
0001B108 4228 0029                  		clr.b	$29(a0)
0001B10C D068 0030                  		add.w	$30(a0),d0
0001B110 0240 001E                  		andi.w	#$1E,d0
0001B114 D4C0                       		adda.w	d0,a2
0001B116 5868 0030                  		addq.w	#4,$30(a0)
0001B11A 4268 0032                  		clr.w	$32(a0)
0001B11E 7403                       		moveq	#3,d2
0001B120                            
0001B120                            Obj86_Loop:
0001B120 4EB9 0000 E20E             		jsr	SingleObjLoad2
0001B126 6600 0000                  		bne.w	loc_1A954
0001B12A 12BC 0086                  		move.b	#$86,(a1)
0001B12E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B134 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B13A 137C 0008 0024             		move.b	#8,$24(a1)
0001B140 337C 2300 0002             		move.w	#$2300,2(a1)
0001B146 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B14E 137C 000C 0016             		move.b	#$C,$16(a1)
0001B154 137C 000C 0017             		move.b	#$C,$17(a1)
0001B15A 137C 0000 0020             		move.b	#0,$20(a1)
0001B160 137C 0003 0018             		move.b	#3,$18(a1)
0001B166 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B16C 137C 0004 0001             		move.b	#4,1(a1)
0001B172 08E9 0007 0001             		bset	#7,1(a1)
0001B178 2348 0034                  		move.l	a0,$34(a1)
0001B17C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B182 3228 0032                  		move.w	$32(a0),d1
0001B186 C3FC FFB1                  		muls.w	#-$4F,d1
0001B18A 0641 2578                  		addi.w	#$2578,d1
0001B18E 0240 001F                  		andi.w	#$1F,d0
0001B192 0440 0010                  		subi.w	#$10,d0
0001B196 D041                       		add.w	d1,d0
0001B198 3340 0030                  		move.w	d0,$30(a1)
0001B19C 5268 0032                  		addq.w	#1,$32(a0)
0001B1A0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B1A6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B1AA                            
0001B1AA                            loc_1A954:
0001B1AA 4A68 0032                  		tst.w	$32(a0)
0001B1AE 6600                       		bne.s	loc_1A95E
0001B1B0 5428 0024                  		addq.b	#2,$24(a0)
0001B1B4                            
0001B1B4                            loc_1A95E:
0001B1B4 6000 FF0C                  		bra.w	loc_1A86C
0001B1B8                            ; ===========================================================================
0001B1B8                            
0001B1B8                            loc_1A962:				; XREF: Obj86_Index
0001B1B8 117C 0002 001C             		move.b	#2,$1C(a0)
0001B1BE 4A68 0038                  		tst.w	$38(a0)
0001B1C2 6600                       		bne.s	loc_1A97E
0001B1C4 117C 0002 0024             		move.b	#2,$24(a0)
0001B1CA 2268 0034                  		movea.l	$34(a0),a1
0001B1CE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B1D4                            
0001B1D4                            loc_1A97E:
0001B1D4 6000 FEEC                  		bra.w	loc_1A86C
0001B1D8                            ; ===========================================================================
0001B1D8                            
0001B1D8                            loc_1A982:				; XREF: Obj86_Index
0001B1D8 7000                       		moveq	#0,d0
0001B1DA 1028 0025                  		move.b	$25(a0),d0
0001B1DE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B1E2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B1E6 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B1EA 4EB9 0000 AE32             		jsr	AnimateSprite
0001B1F0 4EF9 0000 DD72             		jmp	DisplaySprite
0001B1F6                            ; ===========================================================================
0001B1F6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B1F8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B1FA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B1FC                            ; ===========================================================================
0001B1FC                            
0001B1FC                            loc_1A9A6:				; XREF: Obj86_Index2
0001B1FC 3028 0030                  		move.w	$30(a0),d0
0001B200 9068 0008                  		sub.w	8(a0),d0
0001B204 E940                       		asl.w	#4,d0
0001B206 3140 0010                  		move.w	d0,$10(a0)
0001B20A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B210 5428 0025                  		addq.b	#2,$25(a0)
0001B214 4E75                       		rts	
0001B216                            ; ===========================================================================
0001B216                            
0001B216                            loc_1A9C0:				; XREF: Obj86_Index2
0001B216 4A68 0010                  		tst.w	$10(a0)
0001B21A 6700                       		beq.s	loc_1A9E6
0001B21C 4EB9 0000 DD4C             		jsr	SpeedToPos
0001B222 3028 0008                  		move.w	8(a0),d0
0001B226 9068 0030                  		sub.w	$30(a0),d0
0001B22A 6400                       		bcc.s	loc_1A9E6
0001B22C 4268 0010                  		clr.w	$10(a0)
0001B230 D168 0008                  		add.w	d0,8(a0)
0001B234 2268 0034                  		movea.l	$34(a0),a1
0001B238 5369 0032                  		subq.w	#1,$32(a1)
0001B23C                            
0001B23C                            loc_1A9E6:
0001B23C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B242 5368 0028                  		subq.w	#1,$28(a0)
0001B246 6600                       		bne.s	locret_1AA1C
0001B248 5428 0025                  		addq.b	#2,$25(a0)
0001B24C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B252 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B258 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B25E 7000                       		moveq	#0,d0
0001B260 3038 D008                  		move.w	($FFFFD008).w,d0
0001B264 9068 0008                  		sub.w	8(a0),d0
0001B268 3140 0010                  		move.w	d0,$10(a0)
0001B26C 317C 0140 0012             		move.w	#$140,$12(a0)
0001B272                            
0001B272                            locret_1AA1C:
0001B272 4E75                       		rts	
0001B274                            ; ===========================================================================
0001B274                            
0001B274                            loc_1AA1E:				; XREF: Obj86_Index2
0001B274 4EB9 0000 DD4C             		jsr	SpeedToPos
0001B27A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B280 6400                       		bcc.s	loc_1AA34
0001B282 5368 0028                  		subq.w	#1,$28(a0)
0001B286 6700                       		beq.s	loc_1AA34
0001B288 4E75                       		rts	
0001B28A                            ; ===========================================================================
0001B28A                            
0001B28A                            loc_1AA34:
0001B28A 2268 0034                  		movea.l	$34(a0),a1
0001B28E 5369 0038                  		subq.w	#1,$38(a1)
0001B292 6000 FA0A                  		bra.w	Obj84_Delete
0001B296                            ; ===========================================================================
0001B296                            Ani_obj86:
0001B296                            	include "_anim\obj86.asm"
0001B296                            ; ---------------------------------------------------------------------------
0001B296                            ; Animation script - energy ball launcher (FZ)
0001B296                            ; ---------------------------------------------------------------------------
0001B296 0000                       		dc.w byte_1AA46-Ani_obj86
0001B298 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B29A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B29C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B2A0 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B2A6 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B2AC                            		even
0001B2AC                            		even
0001B2AC                            
0001B2AC                            ; ---------------------------------------------------------------------------
0001B2AC                            ; Sprite mappings - energy ball	launcher (FZ)
0001B2AC                            ; ---------------------------------------------------------------------------
0001B2AC                            Map_obj86:
0001B2AC                            	include "_maps\obj86.asm"
0001B2AC                            ; ---------------------------------------------------------------------------
0001B2AC                            ; Sprite mappings - energy ball	launcher (FZ)
0001B2AC                            ; ---------------------------------------------------------------------------
0001B2AC 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B2B0 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B2B4 01                         byte_1AA5E:	dc.b 1
0001B2B5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B2BA 01                         byte_1AA64:	dc.b 1
0001B2BB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B2C0 01                         byte_1AA6A:	dc.b 1
0001B2C1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B2C6 01                         byte_1AA70:	dc.b 1
0001B2C7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B2CC                            		even
0001B2CC                            		even
0001B2CC                            
0001B2CC                            Ani_obj86a:
0001B2CC                            	include "_anim\obj86a.asm"
0001B2CC                            ; ---------------------------------------------------------------------------
0001B2CC                            ; Animation script - energy balls (FZ)
0001B2CC                            ; ---------------------------------------------------------------------------
0001B2CC 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B2CE 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B2D0 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B2DF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B2EE 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B2F2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B2FC                            		even
0001B2FC                            		even
0001B2FC                            
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            ; Sprite mappings - energy balls (FZ)
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            Map_obj86a:
0001B2FC                            	include "_maps\obj86a.asm"
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            ; Sprite mappings - energy balls (FZ)
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B300 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B304 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B308 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B30C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B310 0000                       		dc.w byte_1AB20-Map_obj86a
0001B312 02                         byte_1AABC:	dc.b 2
0001B313 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B318 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B31D 02                         byte_1AAC7:	dc.b 2
0001B31E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B323 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B328 02                         byte_1AAD2:	dc.b 2
0001B329 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B32E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B333 02                         byte_1AADD:	dc.b 2
0001B334 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B339 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B33E 02                         byte_1AAE8:	dc.b 2
0001B33F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B344 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B349 02                         byte_1AAF3:	dc.b 2
0001B34A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B34F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B354 01                         byte_1AAFE:	dc.b 1
0001B355 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B35A 01                         byte_1AB04:	dc.b 1
0001B35B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B360 02                         byte_1AB0A:	dc.b 2
0001B361 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B366 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B36B 02                         byte_1AB15:	dc.b 2
0001B36C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B371 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B376 00                         byte_1AB20:	dc.b 0
0001B378 00                         		even
0001B378 00                         		even
0001B378                            
0001B378                            ; ===========================================================================
0001B378                            ; ---------------------------------------------------------------------------
0001B378                            ; Object 3E - prison capsule
0001B378                            ; ---------------------------------------------------------------------------
0001B378                            
0001B378                            Obj3E:					; XREF: Obj_Index
0001B378 7000                       		moveq	#0,d0
0001B37A 1028 0024                  		move.b	$24(a0),d0
0001B37E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B382 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B386 3028 0008                  		move.w	8(a0),d0
0001B38A 0240 FF80                  		andi.w	#$FF80,d0
0001B38E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B392 0441 0080                  		subi.w	#$80,d1
0001B396 0241 FF80                  		andi.w	#$FF80,d1
0001B39A 9041                       		sub.w	d1,d0
0001B39C 0C40 0280                  		cmpi.w	#$280,d0
0001B3A0 6200                       		bhi.s	Obj3E_Delete
0001B3A2 4EF9 0000 DD72             		jmp	DisplaySprite
0001B3A8                            ; ===========================================================================
0001B3A8                            
0001B3A8                            Obj3E_Delete:
0001B3A8 4EF9 0000 DDAE             		jmp	DeleteObject
0001B3AE                            ; ===========================================================================
0001B3AE 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B3B0 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B3B2 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B3B4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3B6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3B8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3BA 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B3BC 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B3BE                            
0001B3BE 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B3C2 040C 0501                  		dc.b 4,	$C, 5, 1
0001B3C6 0610 0403                  		dc.b 6,	$10, 4,	3
0001B3CA 0810 0305                  		dc.b 8,	$10, 3,	5
0001B3CE                            ; ===========================================================================
0001B3CE                            
0001B3CE                            Obj3E_Main:				; XREF: Obj3E_Index
0001B3CE 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B3D6 317C 049D 0002             		move.w	#$49D,2(a0)
0001B3DC 117C 0004 0001             		move.b	#4,1(a0)
0001B3E2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B3E8 7000                       		moveq	#0,d0
0001B3EA 1028 0028                  		move.b	$28(a0),d0
0001B3EE E548                       		lsl.w	#2,d0
0001B3F0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B3F4 1159 0024                  		move.b	(a1)+,$24(a0)
0001B3F8 1159 0019                  		move.b	(a1)+,$19(a0)
0001B3FC 1159 0018                  		move.b	(a1)+,$18(a0)
0001B400 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B404 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B408 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B40A 117C 0006 0020             		move.b	#6,$20(a0)
0001B410 117C 0008 0021             		move.b	#8,$21(a0)
0001B416                            
0001B416                            Obj3E_Not02:
0001B416 4E75                       		rts	
0001B418                            ; ===========================================================================
0001B418                            
0001B418                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B418 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B41E 6700                       		beq.s	Obj3E_ChkOpened
0001B420 323C 002B                  		move.w	#$2B,d1
0001B424 343C 0018                  		move.w	#$18,d2
0001B428 363C 0018                  		move.w	#$18,d3
0001B42C 3828 0008                  		move.w	8(a0),d4
0001B430 4EF9 0001 0142             		jmp	SolidObject
0001B436                            ; ===========================================================================
0001B436                            
0001B436                            Obj3E_ChkOpened:
0001B436 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B43A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B43C 4228 0025                  		clr.b	$25(a0)
0001B440 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B446 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B44C                            
0001B44C                            Obj3E_DoOpen:
0001B44C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B452 4E75                       		rts	
0001B454                            ; ===========================================================================
0001B454                            
0001B454                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B454 323C 0017                  		move.w	#$17,d1
0001B458 343C 0008                  		move.w	#8,d2
0001B45C 363C 0008                  		move.w	#8,d3
0001B460 3828 0008                  		move.w	8(a0),d4
0001B464 4EB9 0001 0142             		jsr	SolidObject
0001B46A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B470 4EB9 0000 AE32             		jsr	AnimateSprite
0001B476 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B47C 4A28 0025                  		tst.b	$25(a0)
0001B480 6700                       		beq.s	locret_1AC60
0001B482 5068 000C                  		addq.w	#8,$C(a0)
0001B486 117C 000A 0024             		move.b	#$A,$24(a0)
0001B48C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B492 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B496 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B49A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B4A0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B4A6 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B4A8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B4AE 6000                       		bra.s	Obj3E_ContinueCode
0001B4B0                            
0001B4B0                            Obj3E_MoveLeft:
0001B4B0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B4B6                            
0001B4B6                            Obj3E_ContinueCode:
0001B4B6 4228 0025                  		clr.b	$25(a0)
0001B4BA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4C0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4C6                            
0001B4C6                            locret_1AC60:
0001B4C6 4E75                       		rts	
0001B4C8                            ; ===========================================================================
0001B4C8                            
0001B4C8                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B4C8 7007                       		moveq	#7,d0
0001B4CA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B4CE 6600                       		bne.s	loc_1ACA0
0001B4D0 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001B4D6 6600                       		bne.s	loc_1ACA0
0001B4D8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B4DC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4E8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B4EE 7200                       		moveq	#0,d1
0001B4F0 1200                       		move.b	d0,d1
0001B4F2 E409                       		lsr.b	#2,d1
0001B4F4 0441 0020                  		subi.w	#$20,d1
0001B4F8 D369 0008                  		add.w	d1,8(a1)
0001B4FC E048                       		lsr.w	#8,d0
0001B4FE E608                       		lsr.b	#3,d0
0001B500 D169 000C                  		add.w	d0,$C(a1)
0001B504                            
0001B504                            loc_1ACA0:
0001B504 5368 001E                  		subq.w	#1,$1E(a0)
0001B508 6700                       		beq.s	Obj3E_MakeAnimal
0001B50A 4E75                       		rts	
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            Obj3E_MakeAnimal:
0001B50C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B512 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B518 117C 0006 001A             		move.b	#6,$1A(a0)
0001B51E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B524 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B52A 7C07                       		moveq	#7,d6
0001B52C 3A3C 009A                  		move.w	#$9A,d5
0001B530 78E4                       		moveq	#-$1C,d4
0001B532                            
0001B532                            Obj3E_Loop:
0001B532 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001B538 6600                       		bne.s	locret_1ACF8
0001B53A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B53E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B544 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B54A D969 0008                  		add.w	d4,8(a1)
0001B54E 5E44                       		addq.w	#7,d4
0001B550 3345 0036                  		move.w	d5,$36(a1)
0001B554 5145                       		subq.w	#8,d5
0001B556 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B55A                            
0001B55A                            locret_1ACF8:
0001B55A 4E75                       		rts	
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B55C 7007                       		moveq	#7,d0
0001B55E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B562 6600                       		bne.s	loc_1AD38
0001B564 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001B56A 6600                       		bne.s	loc_1AD38
0001B56C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B570 3368 0008 0008             		move.w	8(a0),8(a1)
0001B576 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B57C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B582 0240 001F                  		andi.w	#$1F,d0
0001B586 5D40                       		subq.w	#6,d0
0001B588 4A41                       		tst.w	d1
0001B58A 6A00                       		bpl.s	loc_1AD2E
0001B58C 4440                       		neg.w	d0
0001B58E                            
0001B58E                            loc_1AD2E:
0001B58E D169 0008                  		add.w	d0,8(a1)
0001B592 337C 000C 0036             		move.w	#$C,$36(a1)
0001B598                            
0001B598                            loc_1AD38:
0001B598 5368 001E                  		subq.w	#1,$1E(a0)
0001B59C 6600                       		bne.s	locret_1AD48
0001B59E 5428 0024                  		addq.b	#2,$24(a0)
0001B5A2 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B5A8                            
0001B5A8                            locret_1AD48:
0001B5A8 4E75                       		rts	
0001B5AA                            ; ===========================================================================
0001B5AA                            
0001B5AA                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B5AA 703E                       		moveq	#$3E,d0
0001B5AC 7228                       		moveq	#$28,d1
0001B5AE 7440                       		moveq	#$40,d2
0001B5B0 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B5B4                            
0001B5B4                            Obj3E_FindObj28:
0001B5B4 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B5B6 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B5B8 D2C2                       		adda.w	d2,a1		; next object RAM
0001B5BA 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B5BE                            
0001B5BE 4EB9 0000 F3FE             		jsr	GotThroughAct
0001B5C4 4EF9 0000 DDAE             		jmp	DeleteObject
0001B5CA                            ; ===========================================================================
0001B5CA                            
0001B5CA                            Obj3E_Obj28Found:
0001B5CA 4E75                       		rts	
0001B5CC                            ; ===========================================================================
0001B5CC                            Ani_obj3E:
0001B5CC                            	include "_anim\obj3E.asm"
0001B5CC                            ; ---------------------------------------------------------------------------
0001B5CC                            ; Animation script - prison capsule
0001B5CC                            ; ---------------------------------------------------------------------------
0001B5CC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5CE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5D0 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B5D4                            		even
0001B5D4                            		even
0001B5D4                            
0001B5D4                            ; ---------------------------------------------------------------------------
0001B5D4                            ; Sprite mappings - prison capsule
0001B5D4                            ; ---------------------------------------------------------------------------
0001B5D4                            Map_obj3E:
0001B5D4                            	include "_maps\obj3E.asm"
0001B5D4                            ; ---------------------------------------------------------------------------
0001B5D4                            ; Sprite mappings - prison capsule
0001B5D4                            ; ---------------------------------------------------------------------------
0001B5D4 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B5D8 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B5DC 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B5E0 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B5E2 07                         byte_1AD82:	dc.b 7
0001B5E3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B5E8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B5ED E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B5F2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B5F7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B5FC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B601 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B606 01                         byte_1ADA6:	dc.b 1
0001B607 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B60C 06                         byte_1ADAC:	dc.b 6
0001B60D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B612 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B617 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B61C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B621 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B626 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B62B 01                         byte_1ADCB:	dc.b 1
0001B62C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B631 02                         byte_1ADD1:	dc.b 2
0001B632 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B637 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B63C 01                         byte_1ADDC:	dc.b 1
0001B63D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B642 00                         byte_1ADE2:	dc.b 0
0001B644 00                         		even
0001B644 00                         		even
0001B644                            
0001B644                            ; ---------------------------------------------------------------------------
0001B644                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B644                            ; ---------------------------------------------------------------------------
0001B644                            
0001B644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B644                            
0001B644                            
0001B644                            TouchResponse:				; XREF: Obj01
0001B644 4E71                       		nop	
0001B646 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B64A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B64E 5142                       		subq.w	#8,d2
0001B650 7A00                       		moveq	#0,d5
0001B652 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B656 5705                       		subq.b	#3,d5
0001B658 9645                       		sub.w	d5,d3
0001B65A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B660 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B662 0643 000C                  		addi.w	#$C,d3
0001B666 7A0A                       		moveq	#$A,d5
0001B668                            
0001B668                            Touch_NoDuck:
0001B668 383C 0010                  		move.w	#$10,d4
0001B66C DA45                       		add.w	d5,d5
0001B66E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B672 3C3C 005F                  		move.w	#$5F,d6
0001B676                            
0001B676                            Touch_Loop:
0001B676 4A29 0001                  		tst.b	1(a1)
0001B67A 6A00                       		bpl.s	Touch_NextObj
0001B67C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B680 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B682                            
0001B682                            Touch_NextObj:
0001B682 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B686 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B68A                            
0001B68A 7000                       		moveq	#0,d0
0001B68C 4E75                       		rts	
0001B68E                            ; ===========================================================================
0001B68E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B690 0C14                       		dc.b   $C, $14
0001B692 140C                       		dc.b  $14,  $C
0001B694 0410                       		dc.b	4, $10
0001B696 0C12                       		dc.b   $C, $12
0001B698 1010                       		dc.b  $10, $10
0001B69A 0606                       		dc.b	6,   6
0001B69C 180C                       		dc.b  $18,  $C
0001B69E 0C10                       		dc.b   $C, $10
0001B6A0 100C                       		dc.b  $10,  $C
0001B6A2 0808                       		dc.b	8,   8
0001B6A4 1410                       		dc.b  $14, $10
0001B6A6 1408                       		dc.b  $14,   8
0001B6A8 0E0E                       		dc.b   $E,  $E
0001B6AA 1818                       		dc.b  $18, $18
0001B6AC 2810                       		dc.b  $28, $10
0001B6AE 1018                       		dc.b  $10, $18
0001B6B0 0810                       		dc.b	8, $10
0001B6B2 2070                       		dc.b  $20, $70
0001B6B4 4020                       		dc.b  $40, $20
0001B6B6 8020                       		dc.b  $80, $20
0001B6B8 2020                       		dc.b  $20, $20
0001B6BA 0808                       		dc.b	8,   8
0001B6BC 0404                       		dc.b	4,   4
0001B6BE 2008                       		dc.b  $20,   8
0001B6C0 0C0C                       		dc.b   $C,  $C
0001B6C2 0804                       		dc.b	8,   4
0001B6C4 1804                       		dc.b  $18,   4
0001B6C6 2804                       		dc.b  $28,   4
0001B6C8 0408                       		dc.b	4,   8
0001B6CA 0418                       		dc.b	4, $18
0001B6CC 0428                       		dc.b	4, $28
0001B6CE 0420                       		dc.b	4, $20
0001B6D0 1818                       		dc.b  $18, $18
0001B6D2 0C18                       		dc.b   $C, $18
0001B6D4 4808                       		dc.b  $48,   8
0001B6D6                            ; ===========================================================================
0001B6D6                            
0001B6D6                            Touch_Height:				; XREF: TouchResponse
0001B6D6 0240 003F                  		andi.w	#$3F,d0
0001B6DA D040                       		add.w	d0,d0
0001B6DC 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B6E0 7200                       		moveq	#0,d1
0001B6E2 121A                       		move.b	(a2)+,d1
0001B6E4 3029 0008                  		move.w	8(a1),d0
0001B6E8 9041                       		sub.w	d1,d0
0001B6EA 9042                       		sub.w	d2,d0
0001B6EC 6400                       		bcc.s	loc_1AE98
0001B6EE D241                       		add.w	d1,d1
0001B6F0 D041                       		add.w	d1,d0
0001B6F2 6500                       		bcs.s	Touch_Width
0001B6F4 6000 FF8C                  		bra.w	Touch_NextObj
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            loc_1AE98:
0001B6F8 B044                       		cmp.w	d4,d0
0001B6FA 6200 FF86                  		bhi.w	Touch_NextObj
0001B6FE                            
0001B6FE                            Touch_Width:
0001B6FE 7200                       		moveq	#0,d1
0001B700 121A                       		move.b	(a2)+,d1
0001B702 3029 000C                  		move.w	$C(a1),d0
0001B706 9041                       		sub.w	d1,d0
0001B708 9043                       		sub.w	d3,d0
0001B70A 6400                       		bcc.s	loc_1AEB6
0001B70C D241                       		add.w	d1,d1
0001B70E D240                       		add.w	d0,d1
0001B710 6500                       		bcs.s	Touch_ChkValue
0001B712 6000 FF6E                  		bra.w	Touch_NextObj
0001B716                            ; ===========================================================================
0001B716                            
0001B716                            loc_1AEB6:
0001B716 B045                       		cmp.w	d5,d0
0001B718 6200 FF68                  		bhi.w	Touch_NextObj
0001B71C                            
0001B71C                            Touch_ChkValue:
0001B71C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B720 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B724 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B728 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B72C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B730 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B732 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B736                            
0001B736                            ; touch	response is $40-$7F
0001B736                            
0001B736 1029 0020                  		move.b	$20(a1),d0
0001B73A 0200 003F                  		andi.b	#$3F,d0
0001B73E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B742 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B744 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B74A 6400 0000                  		bcc.w	locret_1AEF2
0001B74E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B752                            
0001B752                            locret_1AEF2:
0001B752 4E75                       		rts	
0001B754                            ; ===========================================================================
0001B754                            
0001B754                            Touch_Monitor:
0001B754 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B758 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B75A 3028 000C                  		move.w	$C(a0),d0
0001B75E 0440 0010                  		subi.w	#$10,d0
0001B762 B069 000C                  		cmp.w	$C(a1),d0
0001B766 6500                       		bcs.s	locret_1AF2E
0001B768 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B76C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B772 4A29 0025                  		tst.b	$25(a1)
0001B776 6600                       		bne.s	locret_1AF2E
0001B778 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B77C 4E75                       		rts	
0001B77E                            ; ===========================================================================
0001B77E                            
0001B77E                            loc_1AF1E:
0001B77E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B784 6600                       		bne.s	locret_1AF2E
0001B786 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B78A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B78E                            
0001B78E                            locret_1AF2E:
0001B78E 4E75                       		rts	
0001B790                            ; ===========================================================================
0001B790                            
0001B790                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B790 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B794 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B796 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B79C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B7A0                            
0001B7A0                            loc_1AF40:
0001B7A0 4A29 0021                  		tst.b	$21(a1)
0001B7A4 6700                       		beq.s	Touch_KillEnemy
0001B7A6 4468 0010                  		neg.w	$10(a0)
0001B7AA 4468 0012                  		neg.w	$12(a0)
0001B7AE E0E8 0010                  		asr	$10(a0)
0001B7B2 E0E8 0012                  		asr	$12(a0)
0001B7B6 137C 0000 0020             		move.b	#0,$20(a1)
0001B7BC 5329 0021                  		subq.b	#1,$21(a1)
0001B7C0 6600                       		bne.s	locret_1AF68
0001B7C2 08E9 0007 0022             		bset	#7,$22(a1)
0001B7C8                            
0001B7C8                            locret_1AF68:
0001B7C8 4E75                       		rts	
0001B7CA                            ; ===========================================================================
0001B7CA                            
0001B7CA                            Touch_KillEnemy:
0001B7CA 08E9 0007 0022             		bset	#7,$22(a1)
0001B7D0 7000                       		moveq	#0,d0
0001B7D2 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B7D6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B7DA 0C40 0006                  		cmpi.w	#6,d0
0001B7DE 6500                       		bcs.s	loc_1AF82
0001B7E0 7006                       		moveq	#6,d0
0001B7E2                            
0001B7E2                            loc_1AF82:
0001B7E2 3340 003E                  		move.w	d0,$3E(a1)
0001B7E6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B7EA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B7F0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B7F2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B7F6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B7FC                            
0001B7FC                            loc_1AF9C:
0001B7FC 6100 0000                  		bsr.w	AddPoints
0001B800 7400                       		moveq	#0,d2	; GMZ
0001B802 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B804 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B806                            
0001B806                            TouchKE_Explode:
0001B806 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B80A 137C 0000 0024             		move.b	#0,$24(a1)
0001B810 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B814                            
0001B814                            TouchKE_NextExplosion:
0001B814 5802                       		addq.b	#4,d2
0001B816 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001B81C 6600                       		bne.s	TouchKE_NoExplosion
0001B81E 336A 0008 0008             		move.w	8(a2),8(a1)
0001B824 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B82A 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B82E                            
0001B82E                            TouchKE_NoExplosion:
0001B82E 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B830 4A68 0012                  		tst.w	$12(a0)
0001B834 6B00                       		bmi.s	loc_1AFC2
0001B836 3028 000C                  		move.w	$C(a0),d0
0001B83A B069 000C                  		cmp.w	$C(a1),d0
0001B83E 6400                       		bcc.s	loc_1AFCA
0001B840 4468 0012                  		neg.w	$12(a0)
0001B844 4E75                       		rts	
0001B846                            ; ===========================================================================
0001B846                            
0001B846                            loc_1AFC2:
0001B846 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B84C 4E75                       		rts	
0001B84E                            ; ===========================================================================
0001B84E                            
0001B84E                            loc_1AFCA:
0001B84E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B854 4E75                       		rts	
0001B856                            ; ===========================================================================
0001B856 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B85E                            ; ===========================================================================
0001B85E                            
0001B85E                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B85E 08E9 0007 0022             		bset	#7,$22(a1)
0001B864                            
0001B864                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B864 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B868 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B86A                            
0001B86A                            loc_1AFE6:				; XREF: Touch_Hurt
0001B86A 70FF                       		moveq	#-1,d0
0001B86C 4E75                       		rts	
0001B86E                            ; ===========================================================================
0001B86E                            
0001B86E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B86E 4E71                       		nop	
0001B870 4A68 0030                  		tst.w	$30(a0)
0001B874 66F4                       		bne.s	loc_1AFE6
0001B876 2449                       		movea.l	a1,a2
0001B878                            
0001B878                            ; End of function TouchResponse
0001B878                            ; continue straight to HurtSonic
0001B878                            
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            ; Hurting Sonic	subroutine
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            
0001B878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B878                            
0001B878                            
0001B878                            HurtSonic:
0001B878 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B87C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B87E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B882 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B886 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001B88C 6600                       		bne.s	Hurt_Shield
0001B88E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B892 3368 0008 0008             		move.w	8(a0),8(a1)
0001B898 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B89E                            
0001B89E                            Hurt_Shield:
0001B89E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B8A4 117C 0004 0024             		move.b	#4,$24(a0)
0001B8AA 6100 8704                  		bsr.w	Sonic_ResetOnFloor
0001B8AE 08E8 0001 0022             		bset	#1,$22(a0)
0001B8B4 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B8BA 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B8C0 0828 0006 0022             		btst	#6,$22(a0)
0001B8C6 6700                       		beq.s	Hurt_Reverse
0001B8C8 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B8CE 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B8D4                            
0001B8D4                            Hurt_Reverse:
0001B8D4 3028 0008                  		move.w	8(a0),d0
0001B8D8 B06A 0008                  		cmp.w	8(a2),d0
0001B8DC 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B8DE 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B8E2                            
0001B8E2                            Hurt_ChkSpikes:
0001B8E2 317C 0000 0014             		move.w	#0,$14(a0)
0001B8E8 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B8EE 317C 0078 0030             		move.w	#$78,$30(a0)
0001B8F4 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B8F8 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B8FC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8FE 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B902 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B904 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B908                            
0001B908                            Hurt_Sound:
0001B908 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B90E 70FF                       		moveq	#-1,d0
0001B910 4E75                       		rts	
0001B912                            ; ===========================================================================
0001B912                            
0001B912                            Hurt_NoRings:
0001B912 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B916 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B91A                            ; End of function HurtSonic
0001B91A                            
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A                            ; Subroutine to	kill Sonic
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A                            
0001B91A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B91A                            
0001B91A                            
0001B91A                            KillSonic:
0001B91A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B91E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B920 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B926 117C 0006 0024             		move.b	#6,$24(a0)
0001B92C 6100 8682                  		bsr.w	Sonic_ResetOnFloor
0001B930 08E8 0001 0022             		bset	#1,$22(a0)
0001B936 317C F900 0012             		move.w	#-$700,$12(a0)
0001B93C 317C 0000 0010             		move.w	#0,$10(a0)
0001B942 317C 0000 0014             		move.w	#0,$14(a0)
0001B948 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B94E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B954 08E8 0007 0002             		bset	#7,2(a0)
0001B95A 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B95E 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B962 6600                       		bne.s	Kill_Sound
0001B964 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B968                            
0001B968                            Kill_Sound:
0001B968 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B96E                            
0001B96E                            Kill_NoDeath:
0001B96E 70FF                       		moveq	#-1,d0
0001B970 4E75                       		rts	
0001B972                            ; End of function KillSonic
0001B972                            
0001B972                            
0001B972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B972                            
0001B972                            
0001B972                            Touch_Special:				; XREF: Touch_ChkValue
0001B972 1229 0020                  		move.b	$20(a1),d1
0001B976 0201 003F                  		andi.b	#$3F,d1
0001B97A 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B97E 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B980 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B984 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B986 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B98A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B98C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B990 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B992 4E75                       		rts	
0001B994                            ; ===========================================================================
0001B994                            
0001B994                            Touch_CatKiller:			; XREF: Touch_Special
0001B994 6000 FEC8                  		bra.w	loc_1AFDA
0001B998                            ; ===========================================================================
0001B998                            
0001B998                            Touch_Yadrin:				; XREF: Touch_Special
0001B998 9A40                       		sub.w	d0,d5
0001B99A 0C45 0008                  		cmpi.w	#8,d5
0001B99E 6400                       		bcc.s	loc_1B144
0001B9A0 3029 0008                  		move.w	8(a1),d0
0001B9A4 5940                       		subq.w	#4,d0
0001B9A6 0829 0000 0022             		btst	#0,$22(a1)
0001B9AC 6700                       		beq.s	loc_1B130
0001B9AE 0440 0010                  		subi.w	#$10,d0
0001B9B2                            
0001B9B2                            loc_1B130:
0001B9B2 9042                       		sub.w	d2,d0
0001B9B4 6400                       		bcc.s	loc_1B13C
0001B9B6 0640 0018                  		addi.w	#$18,d0
0001B9BA 6500                       		bcs.s	loc_1B140
0001B9BC 6000                       		bra.s	loc_1B144
0001B9BE                            ; ===========================================================================
0001B9BE                            
0001B9BE                            loc_1B13C:
0001B9BE B044                       		cmp.w	d4,d0
0001B9C0 6200                       		bhi.s	loc_1B144
0001B9C2                            
0001B9C2                            loc_1B140:
0001B9C2 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B9C6                            ; ===========================================================================
0001B9C6                            
0001B9C6                            loc_1B144:
0001B9C6 6000 FDC8                  		bra.w	Touch_Enemy
0001B9CA                            ; ===========================================================================
0001B9CA                            
0001B9CA                            Touch_D7orE1:				; XREF: Touch_Special
0001B9CA 5229 0021                  		addq.b	#1,$21(a1)
0001B9CE 4E75                       		rts	
0001B9D0                            ; End of function Touch_Special
0001B9D0                            
0001B9D0                            ; ---------------------------------------------------------------------------
0001B9D0                            ; Subroutine to	show the special stage layout
0001B9D0                            ; ---------------------------------------------------------------------------
0001B9D0                            
0001B9D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9D0                            
0001B9D0                            
0001B9D0                            SS_ShowLayout:				; XREF: SpecialStage
0001B9D0 6100 0000                  		bsr.w	SS_AniWallsRings
0001B9D4 6100 0000                  		bsr.w	SS_AniItems
0001B9D8 3F05                       		move.w	d5,-(sp)
0001B9DA 43F8 8000                  		lea	($FFFF8000).w,a1
0001B9DE 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9E2 0200 00FC                  		andi.b	#$FC,d0
0001B9E6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B9EC 3800                       		move.w	d0,d4
0001B9EE 3A01                       		move.w	d1,d5
0001B9F0 C9FC 0018                  		muls.w	#$18,d4
0001B9F4 CBFC 0018                  		muls.w	#$18,d5
0001B9F8 7400                       		moveq	#0,d2
0001B9FA 3438 F700                  		move.w	($FFFFF700).w,d2
0001B9FE 84FC 0018                  		divu.w	#$18,d2
0001BA02 4842                       		swap	d2
0001BA04 4442                       		neg.w	d2
0001BA06 0642 FF4C                  		addi.w	#-$B4,d2
0001BA0A 7600                       		moveq	#0,d3
0001BA0C 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA10 86FC 0018                  		divu.w	#$18,d3
0001BA14 4843                       		swap	d3
0001BA16 4443                       		neg.w	d3
0001BA18 0643 FF4C                  		addi.w	#-$B4,d3
0001BA1C 3E3C 000F                  		move.w	#$F,d7
0001BA20                            
0001BA20                            loc_1B19E:
0001BA20 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BA24 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BA28 4440                       		neg.w	d0
0001BA2A C3C2                       		muls.w	d2,d1
0001BA2C C1C3                       		muls.w	d3,d0
0001BA2E 2C00                       		move.l	d0,d6
0001BA30 DC81                       		add.l	d1,d6
0001BA32 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BA36 C1C2                       		muls.w	d2,d0
0001BA38 C3C3                       		muls.w	d3,d1
0001BA3A D280                       		add.l	d0,d1
0001BA3C 2406                       		move.l	d6,d2
0001BA3E 3C3C 000F                  		move.w	#$F,d6
0001BA42                            
0001BA42                            loc_1B1C0:
0001BA42 2002                       		move.l	d2,d0
0001BA44 E080                       		asr.l	#8,d0
0001BA46 32C0                       		move.w	d0,(a1)+
0001BA48 2001                       		move.l	d1,d0
0001BA4A E080                       		asr.l	#8,d0
0001BA4C 32C0                       		move.w	d0,(a1)+
0001BA4E D485                       		add.l	d5,d2
0001BA50 D284                       		add.l	d4,d1
0001BA52 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BA56                            
0001BA56 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BA5A 0643 0018                  		addi.w	#$18,d3
0001BA5E 51CF FFC0                  		dbf	d7,loc_1B19E
0001BA62                            
0001BA62 3A1F                       		move.w	(sp)+,d5
0001BA64 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BA6A 7000                       		moveq	#0,d0
0001BA6C 3038 F704                  		move.w	($FFFFF704).w,d0
0001BA70 80FC 0018                  		divu.w	#$18,d0
0001BA74 C0FC 0080                  		mulu.w	#$80,d0
0001BA78 D1C0                       		adda.l	d0,a0
0001BA7A 7000                       		moveq	#0,d0
0001BA7C 3038 F700                  		move.w	($FFFFF700).w,d0
0001BA80 80FC 0018                  		divu.w	#$18,d0
0001BA84 D0C0                       		adda.w	d0,a0
0001BA86 49F8 8000                  		lea	($FFFF8000).w,a4
0001BA8A 3E3C 000F                  		move.w	#$F,d7
0001BA8E                            
0001BA8E                            loc_1B20C:
0001BA8E 3C3C 000F                  		move.w	#$F,d6
0001BA92                            
0001BA92                            loc_1B210:
0001BA92 7000                       		moveq	#0,d0
0001BA94 1018                       		move.b	(a0)+,d0
0001BA96 6700                       		beq.s	loc_1B268
0001BA98 0C00 004E                  		cmpi.b	#$4E,d0
0001BA9C 6200                       		bhi.s	loc_1B268
0001BA9E 3614                       		move.w	(a4),d3
0001BAA0 0643 0120                  		addi.w	#$120,d3
0001BAA4 0C43 0070                  		cmpi.w	#$70,d3
0001BAA8 6500                       		bcs.s	loc_1B268
0001BAAA 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BAAE 6400                       		bcc.s	loc_1B268
0001BAB0 342C 0002                  		move.w	2(a4),d2
0001BAB4 0642 00F0                  		addi.w	#$F0,d2
0001BAB8 0C42 0070                  		cmpi.w	#$70,d2
0001BABC 6500                       		bcs.s	loc_1B268
0001BABE 0C42 0170                  		cmpi.w	#$170,d2
0001BAC2 6400                       		bcc.s	loc_1B268
0001BAC4 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BACA E748                       		lsl.w	#3,d0
0001BACC 4BF5 0000                  		lea	(a5,d0.w),a5
0001BAD0 225D                       		movea.l	(a5)+,a1
0001BAD2 321D                       		move.w	(a5)+,d1
0001BAD4 D241                       		add.w	d1,d1
0001BAD6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BADA 365D                       		movea.w	(a5)+,a3
0001BADC 7200                       		moveq	#0,d1
0001BADE 1219                       		move.b	(a1)+,d1
0001BAE0 5301                       		subq.b	#1,d1
0001BAE2 6B00                       		bmi.s	loc_1B268
0001BAE4 4EB9 0000 DED0             		jsr	sub_D762
0001BAEA                            
0001BAEA                            loc_1B268:
0001BAEA 584C                       		addq.w	#4,a4
0001BAEC 51CE FFA4                  		dbf	d6,loc_1B210
0001BAF0                            
0001BAF0 41E8 0070                  		lea	$70(a0),a0
0001BAF4 51CF FF98                  		dbf	d7,loc_1B20C
0001BAF8                            
0001BAF8 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BAFC 0C05 0050                  		cmpi.b	#$50,d5
0001BB00 6700                       		beq.s	loc_1B288
0001BB02 24BC 0000 0000             		move.l	#0,(a2)
0001BB08 4E75                       		rts	
0001BB0A                            ; ===========================================================================
0001BB0A                            
0001BB0A                            loc_1B288:
0001BB0A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB10 4E75                       		rts	
0001BB12                            ; End of function SS_ShowLayout
0001BB12                            
0001BB12                            ; ---------------------------------------------------------------------------
0001BB12                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB12                            ; ---------------------------------------------------------------------------
0001BB12                            
0001BB12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB12                            
0001BB12                            
0001BB12                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB12 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB18 7000                       		moveq	#0,d0
0001BB1A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB1E E408                       		lsr.b	#2,d0
0001BB20 0240 000F                  		andi.w	#$F,d0
0001BB24 7223                       		moveq	#$23,d1
0001BB26                            
0001BB26                            loc_1B2A4:
0001BB26 3280                       		move.w	d0,(a1)
0001BB28 5049                       		addq.w	#8,a1
0001BB2A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BB2E                            
0001BB2E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BB34 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BB38 6A00                       		bpl.s	loc_1B2C8
0001BB3A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BB40 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BB44 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BB4A                            
0001BB4A                            loc_1B2C8:
0001BB4A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BB50 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BB54 6A00                       		bpl.s	loc_1B2E4
0001BB56 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BB5C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BB60 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BB66                            
0001BB66                            loc_1B2E4:
0001BB66 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BB6A 1340 0138                  		move.b	d0,$138(a1)
0001BB6E 1340 0160                  		move.b	d0,$160(a1)
0001BB72 1340 0148                  		move.b	d0,$148(a1)
0001BB76 1340 0150                  		move.b	d0,$150(a1)
0001BB7A 1340 01D8                  		move.b	d0,$1D8(a1)
0001BB7E 1340 01E0                  		move.b	d0,$1E0(a1)
0001BB82 1340 01E8                  		move.b	d0,$1E8(a1)
0001BB86 1340 01F0                  		move.b	d0,$1F0(a1)
0001BB8A 1340 01F8                  		move.b	d0,$1F8(a1)
0001BB8E 1340 0200                  		move.b	d0,$200(a1)
0001BB92 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BB96 6A00                       		bpl.s	loc_1B326
0001BB98 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BB9E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BBA2 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BBA8                            
0001BBA8                            loc_1B326:
0001BBA8 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BBAC 1340 0168                  		move.b	d0,$168(a1)
0001BBB0 1340 0170                  		move.b	d0,$170(a1)
0001BBB4 1340 0178                  		move.b	d0,$178(a1)
0001BBB8 1340 0180                  		move.b	d0,$180(a1)
0001BBBC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BBC0 6A00                       		bpl.s	loc_1B350
0001BBC2 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BBC8 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BBCC 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BBD2                            
0001BBD2                            loc_1B350:
0001BBD2 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BBD8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BBDE 7000                       		moveq	#0,d0
0001BBE0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BBE4 D040                       		add.w	d0,d0
0001BBE6 41F0 0000                  		lea	(a0,d0.w),a0
0001BBEA 3290                       		move.w	(a0),(a1)
0001BBEC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBF2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBF8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBFE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC04 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC0A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC10 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC16 D0FC 0020                  		adda.w	#$20,a0
0001BC1A D2FC 0048                  		adda.w	#$48,a1
0001BC1E 3290                       		move.w	(a0),(a1)
0001BC20 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC26 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC2C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC32 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC38 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC3E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC44 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC4A D0FC 0020                  		adda.w	#$20,a0
0001BC4E D2FC 0048                  		adda.w	#$48,a1
0001BC52 3290                       		move.w	(a0),(a1)
0001BC54 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC5A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC60 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC66 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC6C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC72 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC78 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC7E D0FC 0020                  		adda.w	#$20,a0
0001BC82 D2FC 0048                  		adda.w	#$48,a1
0001BC86 3290                       		move.w	(a0),(a1)
0001BC88 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC8E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC94 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC9A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCA0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCA6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCAC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCB2 D0FC 0020                  		adda.w	#$20,a0
0001BCB6 D2FC 0048                  		adda.w	#$48,a1
0001BCBA 4E75                       		rts	
0001BCBC                            ; End of function SS_AniWallsRings
0001BCBC                            
0001BCBC                            ; ===========================================================================
0001BCBC 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCCC 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCDC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCEC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCFC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD0C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD1C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD2C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD3C                            ; ---------------------------------------------------------------------------
0001BD3C                            ; Subroutine to	remove items when you collect them in the special stage
0001BD3C                            ; ---------------------------------------------------------------------------
0001BD3C                            
0001BD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD3C                            
0001BD3C                            
0001BD3C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BD3C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BD42 303C 001F                  		move.w	#$1F,d0
0001BD46                            
0001BD46                            loc_1B4C4:
0001BD46 4A12                       		tst.b	(a2)
0001BD48 6700                       		beq.s	locret_1B4CE
0001BD4A 504A                       		addq.w	#8,a2
0001BD4C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BD50                            
0001BD50                            locret_1B4CE:
0001BD50 4E75                       		rts	
0001BD52                            ; End of function SS_RemoveCollectedItem
0001BD52                            
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Subroutine to	animate	special	stage items when you touch them
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            
0001BD52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD52                            
0001BD52                            
0001BD52                            SS_AniItems:				; XREF: SS_ShowLayout
0001BD52 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BD58 3E3C 001F                  		move.w	#$1F,d7
0001BD5C                            
0001BD5C                            loc_1B4DA:
0001BD5C 7000                       		moveq	#0,d0
0001BD5E 1010                       		move.b	(a0),d0
0001BD60 6700                       		beq.s	loc_1B4E8
0001BD62 E548                       		lsl.w	#2,d0
0001BD64 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BD68 4E91                       		jsr	(a1)
0001BD6A                            
0001BD6A                            loc_1B4E8:
0001BD6A 5048                       		addq.w	#8,a0
0001BD6C                            
0001BD6C                            loc_1B4EA:
0001BD6C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BD70                            
0001BD70 4E75                       		rts	
0001BD72                            ; End of function SS_AniItems
0001BD72                            
0001BD72                            ; ===========================================================================
0001BD72 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BD76 0000 0000                  		dc.l SS_AniBumper
0001BD7A 0000 0000                  		dc.l SS_Ani1Up
0001BD7E 0000 0000                  		dc.l SS_AniReverse
0001BD82 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BD86 0000 0000                  		dc.l SS_AniGlassBlock
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BD8A 5328 0002                  		subq.b	#1,2(a0)
0001BD8E 6A00                       		bpl.s	locret_1B530
0001BD90 117C 0005 0002             		move.b	#5,2(a0)
0001BD96 7000                       		moveq	#0,d0
0001BD98 1028 0003                  		move.b	3(a0),d0
0001BD9C 5228 0003                  		addq.b	#1,3(a0)
0001BDA0 2268 0004                  		movea.l	4(a0),a1
0001BDA4 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BDA8 1280                       		move.b	d0,(a1)
0001BDAA 6600                       		bne.s	locret_1B530
0001BDAC 4290                       		clr.l	(a0)
0001BDAE 42A8 0004                  		clr.l	4(a0)
0001BDB2                            
0001BDB2                            locret_1B530:
0001BDB2 4E75                       		rts	
0001BDB4                            ; ===========================================================================
0001BDB4 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BDBA                            ; ===========================================================================
0001BDBA                            
0001BDBA                            SS_AniBumper:				; XREF: SS_AniIndex
0001BDBA 5328 0002                  		subq.b	#1,2(a0)
0001BDBE 6A00                       		bpl.s	locret_1B566
0001BDC0 117C 0007 0002             		move.b	#7,2(a0)
0001BDC6 7000                       		moveq	#0,d0
0001BDC8 1028 0003                  		move.b	3(a0),d0
0001BDCC 5228 0003                  		addq.b	#1,3(a0)
0001BDD0 2268 0004                  		movea.l	4(a0),a1
0001BDD4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BDD8 6600                       		bne.s	loc_1B564
0001BDDA 4290                       		clr.l	(a0)
0001BDDC 42A8 0004                  		clr.l	4(a0)
0001BDE0 12BC 0025                  		move.b	#$25,(a1)
0001BDE4 4E75                       		rts	
0001BDE6                            ; ===========================================================================
0001BDE6                            
0001BDE6                            loc_1B564:
0001BDE6 1280                       		move.b	d0,(a1)
0001BDE8                            
0001BDE8                            locret_1B566:
0001BDE8 4E75                       		rts	
0001BDEA                            ; ===========================================================================
0001BDEA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BDF0 5328 0002                  		subq.b	#1,2(a0)
0001BDF4 6A00                       		bpl.s	locret_1B596
0001BDF6 117C 0005 0002             		move.b	#5,2(a0)
0001BDFC 7000                       		moveq	#0,d0
0001BDFE 1028 0003                  		move.b	3(a0),d0
0001BE02 5228 0003                  		addq.b	#1,3(a0)
0001BE06 2268 0004                  		movea.l	4(a0),a1
0001BE0A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BE0E 1280                       		move.b	d0,(a1)
0001BE10 6600                       		bne.s	locret_1B596
0001BE12 4290                       		clr.l	(a0)
0001BE14 42A8 0004                  		clr.l	4(a0)
0001BE18                            
0001BE18                            locret_1B596:
0001BE18 4E75                       		rts	
0001BE1A                            ; ===========================================================================
0001BE1A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BE20                            ; ===========================================================================
0001BE20                            
0001BE20                            SS_AniReverse:				; XREF: SS_AniIndex
0001BE20 5328 0002                  		subq.b	#1,2(a0)
0001BE24 6A00                       		bpl.s	locret_1B5CC
0001BE26 117C 0007 0002             		move.b	#7,2(a0)
0001BE2C 7000                       		moveq	#0,d0
0001BE2E 1028 0003                  		move.b	3(a0),d0
0001BE32 5228 0003                  		addq.b	#1,3(a0)
0001BE36 2268 0004                  		movea.l	4(a0),a1
0001BE3A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BE3E 6600                       		bne.s	loc_1B5CA
0001BE40 4290                       		clr.l	(a0)
0001BE42 42A8 0004                  		clr.l	4(a0)
0001BE46 12BC 002B                  		move.b	#$2B,(a1)
0001BE4A 4E75                       		rts	
0001BE4C                            ; ===========================================================================
0001BE4C                            
0001BE4C                            loc_1B5CA:
0001BE4C 1280                       		move.b	d0,(a1)
0001BE4E                            
0001BE4E                            locret_1B5CC:
0001BE4E 4E75                       		rts	
0001BE50                            ; ===========================================================================
0001BE50 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BE56                            ; ===========================================================================
0001BE56                            
0001BE56                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BE56 5328 0002                  		subq.b	#1,2(a0)
0001BE5A 6A00                       		bpl.s	locret_1B60C
0001BE5C 117C 0005 0002             		move.b	#5,2(a0)
0001BE62 7000                       		moveq	#0,d0
0001BE64 1028 0003                  		move.b	3(a0),d0
0001BE68 5228 0003                  		addq.b	#1,3(a0)
0001BE6C 2268 0004                  		movea.l	4(a0),a1
0001BE70 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BE74 1280                       		move.b	d0,(a1)
0001BE76 6600                       		bne.s	locret_1B60C
0001BE78 4290                       		clr.l	(a0)
0001BE7A 42A8 0004                  		clr.l	4(a0)
0001BE7E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BE84 303C 00A8                  		move.w	#$A8,d0
0001BE88 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BE8E                            
0001BE8E                            locret_1B60C:
0001BE8E 4E75                       		rts	
0001BE90                            ; ===========================================================================
0001BE90 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BE96                            ; ===========================================================================
0001BE96                            
0001BE96                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BE96 5328 0002                  		subq.b	#1,2(a0)
0001BE9A 6A00                       		bpl.s	locret_1B640
0001BE9C 117C 0001 0002             		move.b	#1,2(a0)
0001BEA2 7000                       		moveq	#0,d0
0001BEA4 1028 0003                  		move.b	3(a0),d0
0001BEA8 5228 0003                  		addq.b	#1,3(a0)
0001BEAC 2268 0004                  		movea.l	4(a0),a1
0001BEB0 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BEB4 1280                       		move.b	d0,(a1)
0001BEB6 6600                       		bne.s	locret_1B640
0001BEB8 12A8 0004                  		move.b	4(a0),(a1)
0001BEBC 4290                       		clr.l	(a0)
0001BEBE 42A8 0004                  		clr.l	4(a0)
0001BEC2                            
0001BEC2                            locret_1B640:
0001BEC2 4E75                       		rts	
0001BEC4                            ; ===========================================================================
0001BEC4 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE                            ; Special stage	layout pointers
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE                            SS_LayoutIndex:
0001BECE                            	include "_inc\Special stage layout pointers.asm"
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE                            ; Special stage	layout pointers
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE 0000 0000                  	dc.l SS_1
0001BED2 0000 0000                  	dc.l SS_2
0001BED6 0000 0000                  	dc.l SS_3
0001BEDA 0000 0000                  	dc.l SS_4
0001BEDE 0000 0000                  	dc.l SS_5
0001BEE2 0000 0000                  	dc.l SS_6
0001BEE6                            	even
0001BEE6                            	even
0001BEE6                            
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            ; Special stage	start locations
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BEFE                            		even
0001BEFE                            
0001BEFE                            ; ---------------------------------------------------------------------------
0001BEFE                            ; Subroutine to	load special stage layout
0001BEFE                            ; ---------------------------------------------------------------------------
0001BEFE                            
0001BEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEFE                            
0001BEFE                            
0001BEFE                            SS_Load:				; XREF: SpecialStage
0001BEFE 7000                       		moveq	#0,d0
0001BF00 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BF04 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BF08 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BF0E 6500                       		bcs.s	SS_ChkEmldNum
0001BF10 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF16                            
0001BF16                            SS_ChkEmldNum:
0001BF16 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF1C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BF1E 7200                       		moveq	#0,d1
0001BF20 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BF24 5301                       		subq.b	#1,d1
0001BF26 6500                       		bcs.s	SS_LoadData
0001BF28 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BF2C                            
0001BF2C                            SS_ChkEmldLoop:	
0001BF2C B033 1000                  		cmp.b	(a3,d1.w),d0
0001BF30 6600                       		bne.s	SS_ChkEmldRepeat
0001BF32 60CA                       		bra.s	SS_Load
0001BF34                            ; ===========================================================================
0001BF34                            
0001BF34                            SS_ChkEmldRepeat:
0001BF34 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BF38                            
0001BF38                            SS_LoadData:
0001BF38 E548                       		lsl.w	#2,d0
0001BF3A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BF3E 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BF42 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BF46 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BF4A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BF50 303C 0000                  		move.w	#0,d0
0001BF54 4EB9 0000 1942             		jsr	(EniDec).l
0001BF5A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BF60 303C 0FFF                  		move.w	#$FFF,d0
0001BF64                            
0001BF64                            SS_ClrRAM3:
0001BF64 4299                       		clr.l	(a1)+
0001BF66 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BF6A                            
0001BF6A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BF70 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BF76 723F                       		moveq	#$3F,d1
0001BF78                            
0001BF78                            loc_1B6F6:
0001BF78 743F                       		moveq	#$3F,d2
0001BF7A                            
0001BF7A                            loc_1B6F8:
0001BF7A 12D8                       		move.b	(a0)+,(a1)+
0001BF7C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BF80                            
0001BF80 43E9 0040                  		lea	$40(a1),a1
0001BF84 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BF88                            
0001BF88 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BF8E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BF94 724D                       		moveq	#$4D,d1
0001BF96                            
0001BF96                            loc_1B714:
0001BF96 22D8                       		move.l	(a0)+,(a1)+
0001BF98 32FC 0000                  		move.w	#0,(a1)+
0001BF9C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BFA2 32D8                       		move.w	(a0)+,(a1)+
0001BFA4 51C9 FFF0                  		dbf	d1,loc_1B714
0001BFA8                            
0001BFA8 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BFAE 323C 003F                  		move.w	#$3F,d1
0001BFB2                            
0001BFB2                            loc_1B730:
0001BFB2                            
0001BFB2 4299                       		clr.l	(a1)+
0001BFB4 51C9 FFFC                  		dbf	d1,loc_1B730
0001BFB8                            
0001BFB8 4E75                       		rts	
0001BFBA                            ; End of function SS_Load
0001BFBA                            
0001BFBA                            ; ===========================================================================
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA                            ; Special stage	mappings and VRAM pointers
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA                            SS_MapIndex:
0001BFBA                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA                            ; Special stage	mappings and VRAM pointers
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BFBE 0142                       	dc.w $142		; VRAM setting
0001BFC0 0000 0000                  	dc.l Map_SSWalls
0001BFC4 0142                       	dc.w $142
0001BFC6 0000 0000                  	dc.l Map_SSWalls
0001BFCA 0142                       	dc.w $142
0001BFCC 0000 0000                  	dc.l Map_SSWalls
0001BFD0 0142                       	dc.w $142
0001BFD2 0000 0000                  	dc.l Map_SSWalls
0001BFD6 0142                       	dc.w $142
0001BFD8 0000 0000                  	dc.l Map_SSWalls
0001BFDC 0142                       	dc.w $142
0001BFDE 0000 0000                  	dc.l Map_SSWalls
0001BFE2 0142                       	dc.w $142
0001BFE4 0000 0000                  	dc.l Map_SSWalls
0001BFE8 0142                       	dc.w $142
0001BFEA 0000 0000                  	dc.l Map_SSWalls
0001BFEE 0142                       	dc.w $142
0001BFF0 0000 0000                  	dc.l Map_SSWalls
0001BFF4 2142                       	dc.w $2142
0001BFF6 0000 0000                  	dc.l Map_SSWalls
0001BFFA 2142                       	dc.w $2142
0001BFFC 0000 0000                  	dc.l Map_SSWalls
0001C000 2142                       	dc.w $2142
0001C002 0000 0000                  	dc.l Map_SSWalls
0001C006 2142                       	dc.w $2142
0001C008 0000 0000                  	dc.l Map_SSWalls
0001C00C 2142                       	dc.w $2142
0001C00E 0000 0000                  	dc.l Map_SSWalls
0001C012 2142                       	dc.w $2142
0001C014 0000 0000                  	dc.l Map_SSWalls
0001C018 2142                       	dc.w $2142
0001C01A 0000 0000                  	dc.l Map_SSWalls
0001C01E 2142                       	dc.w $2142
0001C020 0000 0000                  	dc.l Map_SSWalls
0001C024 2142                       	dc.w $2142
0001C026 0000 0000                  	dc.l Map_SSWalls
0001C02A 4142                       	dc.w $4142
0001C02C 0000 0000                  	dc.l Map_SSWalls
0001C030 4142                       	dc.w $4142
0001C032 0000 0000                  	dc.l Map_SSWalls
0001C036 4142                       	dc.w $4142
0001C038 0000 0000                  	dc.l Map_SSWalls
0001C03C 4142                       	dc.w $4142
0001C03E 0000 0000                  	dc.l Map_SSWalls
0001C042 4142                       	dc.w $4142
0001C044 0000 0000                  	dc.l Map_SSWalls
0001C048 4142                       	dc.w $4142
0001C04A 0000 0000                  	dc.l Map_SSWalls
0001C04E 4142                       	dc.w $4142
0001C050 0000 0000                  	dc.l Map_SSWalls
0001C054 4142                       	dc.w $4142
0001C056 0000 0000                  	dc.l Map_SSWalls
0001C05A 4142                       	dc.w $4142
0001C05C 0000 0000                  	dc.l Map_SSWalls
0001C060 6142                       	dc.w $6142
0001C062 0000 0000                  	dc.l Map_SSWalls
0001C066 6142                       	dc.w $6142
0001C068 0000 0000                  	dc.l Map_SSWalls
0001C06C 6142                       	dc.w $6142
0001C06E 0000 0000                  	dc.l Map_SSWalls
0001C072 6142                       	dc.w $6142
0001C074 0000 0000                  	dc.l Map_SSWalls
0001C078 6142                       	dc.w $6142
0001C07A 0000 0000                  	dc.l Map_SSWalls
0001C07E 6142                       	dc.w $6142
0001C080 0000 0000                  	dc.l Map_SSWalls
0001C084 6142                       	dc.w $6142
0001C086 0000 0000                  	dc.l Map_SSWalls
0001C08A 6142                       	dc.w $6142
0001C08C 0000 0000                  	dc.l Map_SSWalls
0001C090 6142                       	dc.w $6142
0001C092 0000 F266                  	dc.l Map_obj47
0001C096 023B                       	dc.w $23B
0001C098 0000 0000                  	dc.l Map_SS_R
0001C09C 0570                       	dc.w $570
0001C09E 0000 0000                  	dc.l Map_SS_R
0001C0A2 0251                       	dc.w $251
0001C0A4 0000 0000                  	dc.l Map_SS_R
0001C0A8 0370                       	dc.w $370
0001C0AA 0000 0000                  	dc.l Map_SS_Up
0001C0AE 0263                       	dc.w $263
0001C0B0 0000 0000                  	dc.l Map_SS_Down
0001C0B4 0263                       	dc.w $263
0001C0B6 0000 0000                  	dc.l Map_SS_R
0001C0BA 22F0                       	dc.w $22F0
0001C0BC 0000 0000                  	dc.l Map_SS_Glass
0001C0C0 0470                       	dc.w $470
0001C0C2 0000 0000                  	dc.l Map_SS_Glass
0001C0C6 05F0                       	dc.w $5F0
0001C0C8 0000 0000                  	dc.l Map_SS_Glass
0001C0CC 65F0                       	dc.w $65F0
0001C0CE 0000 0000                  	dc.l Map_SS_Glass
0001C0D2 25F0                       	dc.w $25F0
0001C0D4 0000 0000                  	dc.l Map_SS_Glass
0001C0D8 45F0                       	dc.w $45F0
0001C0DA 0000 0000                  	dc.l Map_SS_R
0001C0DE 02F0                       	dc.w $2F0
0001C0E0 0100 F266                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C0E4 023B                       	dc.w $23B
0001C0E6 0200 F266                  	dc.l Map_obj47+$2000000
0001C0EA 023B                       	dc.w $23B
0001C0EC 0000 0000                  	dc.l Map_SS_R
0001C0F0 0797                       	dc.w $797
0001C0F2 0000 0000                  	dc.l Map_SS_R
0001C0F6 07A0                       	dc.w $7A0
0001C0F8 0000 0000                  	dc.l Map_SS_R
0001C0FC 07A9                       	dc.w $7A9
0001C0FE 0000 0000                  	dc.l Map_SS_R
0001C102 0797                       	dc.w $797
0001C104 0000 0000                  	dc.l Map_SS_R
0001C108 07A0                       	dc.w $7A0
0001C10A 0000 0000                  	dc.l Map_SS_R
0001C10E 07A9                       	dc.w $7A9
0001C110 0000 A5D0                  	dc.l Map_obj25
0001C114 27B2                       	dc.w $27B2
0001C116 0000 0000                  	dc.l Map_SS_Chaos3
0001C11A 0770                       	dc.w $770
0001C11C 0000 0000                  	dc.l Map_SS_Chaos3
0001C120 2770                       	dc.w $2770
0001C122 0000 0000                  	dc.l Map_SS_Chaos3
0001C126 4770                       	dc.w $4770
0001C128 0000 0000                  	dc.l Map_SS_Chaos3
0001C12C 6770                       	dc.w $6770
0001C12E 0000 0000                  	dc.l Map_SS_Chaos1
0001C132 0770                       	dc.w $770
0001C134 0000 0000                  	dc.l Map_SS_Chaos2
0001C138 0770                       	dc.w $770
0001C13A 0000 0000                  	dc.l Map_SS_R
0001C13E 04F0                       	dc.w $4F0
0001C140 0400 A5D0                  	dc.l Map_obj25+$4000000
0001C144 27B2                       	dc.w $27B2
0001C146 0500 A5D0                  	dc.l Map_obj25+$5000000
0001C14A 27B2                       	dc.w $27B2
0001C14C 0600 A5D0                  	dc.l Map_obj25+$6000000
0001C150 27B2                       	dc.w $27B2
0001C152 0700 A5D0                  	dc.l Map_obj25+$7000000
0001C156 27B2                       	dc.w $27B2
0001C158 0000 0000                  	dc.l Map_SS_Glass
0001C15C 23F0                       	dc.w $23F0
0001C15E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C162 23F0                       	dc.w $23F0
0001C164 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C168 23F0                       	dc.w $23F0
0001C16A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C16E 23F0                       	dc.w $23F0
0001C170 0000 0000                  	dc.l Map_SS_R+$2000000
0001C174 04F0                       	dc.w $4F0
0001C176 0000 0000                  	dc.l Map_SS_Glass
0001C17A 05F0                       	dc.w $5F0
0001C17C 0000 0000                  	dc.l Map_SS_Glass
0001C180 65F0                       	dc.w $65F0
0001C182 0000 0000                  	dc.l Map_SS_Glass
0001C186 25F0                       	dc.w $25F0
0001C188 0000 0000                  	dc.l Map_SS_Glass
0001C18C 45F0                       	dc.w $45F0
0001C18C 45F0                       	dc.w $45F0
0001C18E                            
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Sprite mappings - special stage "R" block
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            Map_SS_R:
0001C18E                            	include "_maps\SSRblock.asm"
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Sprite mappings - special stage "R" block
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C192 0000                       		dc.w byte_1B91E-Map_SS_R
0001C194 01                         byte_1B912:	dc.b 1
0001C195 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C19A 01                         byte_1B918:	dc.b 1
0001C19B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C1A0 00                         byte_1B91E:	dc.b 0
0001C1A2 00                         		even
0001C1A2 00                         		even
0001C1A2                            
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2                            Map_SS_Glass:
0001C1A2                            	include "_maps\SSglassblock.asm"
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C1A2                            ; ---------------------------------------------------------------------------
0001C1A2 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C1A6 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C1AA 01                         byte_1B928:	dc.b 1
0001C1AB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1B0 01                         byte_1B92E:	dc.b 1
0001C1B1 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C1B6 01                         byte_1B934:	dc.b 1
0001C1B7 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C1BC 01                         byte_1B93A:	dc.b 1
0001C1BD F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C1C2                            		even
0001C1C2                            		even
0001C1C2                            
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            ; Sprite mappings - special stage "UP" block
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            Map_SS_Up:
0001C1C2                            	include "_maps\SSUPblock.asm"
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            ; Sprite mappings - special stage "UP" block
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2 0000                       		dc.w byte_1B944-Map_SS_Up
0001C1C4 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C1C6 01                         byte_1B944:	dc.b 1
0001C1C7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1CC 01                         byte_1B94A:	dc.b 1
0001C1CD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1D2                            		even
0001C1D2                            		even
0001C1D2                            
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2                            ; Sprite mappings - special stage "DOWN" block
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2                            Map_SS_Down:
0001C1D2                            	include "_maps\SSDOWNblock.asm"
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2                            ; Sprite mappings - special stage "DOWN" block
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2 0000                       		dc.w byte_1B954-Map_SS_Down
0001C1D4 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C1D6 01                         byte_1B954:	dc.b 1
0001C1D7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C1DC 01                         byte_1B95A:	dc.b 1
0001C1DD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1E2                            		even
0001C1E2                            		even
0001C1E2                            
0001C1E2                            ; ---------------------------------------------------------------------------
0001C1E2                            ; Sprite mappings - special stage chaos	emeralds
0001C1E2                            ; ---------------------------------------------------------------------------
0001C1E2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C1E4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C1E6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C1E8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C1EA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C1EC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C1EE 01                         byte_1B96C:	dc.b 1
0001C1EF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C1F4 01                         byte_1B972:	dc.b 1
0001C1F5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C1FA 01                         byte_1B978:	dc.b 1
0001C1FB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C200 01                         byte_1B97E:	dc.b 1
0001C201 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C206                            		even
0001C206                            ; ===========================================================================
0001C206                            ; ---------------------------------------------------------------------------
0001C206                            ; Object 09 - Sonic (special stage)
0001C206                            ; ---------------------------------------------------------------------------
0001C206                            
0001C206                            Obj09:					; XREF: Obj_Index
0001C206 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C20A 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C20C 6100 0000                  		bsr.w	SS_FixCamera
0001C210 6000 0000                  		bra.w	DebugMode
0001C214                            ; ===========================================================================
0001C214                            
0001C214                            Obj09_Normal:
0001C214 7000                       		moveq	#0,d0
0001C216 1028 0024                  		move.b	$24(a0),d0
0001C21A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C21E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C222                            ; ===========================================================================
0001C222 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C224 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C226 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C228 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C22A                            ; ===========================================================================
0001C22A                            
0001C22A                            Obj09_Main:				; XREF: Obj09_Index
0001C22A 5428 0024                  		addq.b	#2,$24(a0)
0001C22E 117C 000E 0016             		move.b	#$E,$16(a0)
0001C234 117C 0007 0017             		move.b	#7,$17(a0)
0001C23A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C242 317C 0780 0002             		move.w	#$780,2(a0)
0001C248 117C 0004 0001             		move.b	#4,1(a0)
0001C24E 117C 0000 0018             		move.b	#0,$18(a0)
0001C254 117C 0002 001C             		move.b	#2,$1C(a0)
0001C25A 08E8 0002 0022             		bset	#2,$22(a0)
0001C260 08E8 0001 0022             		bset	#1,$22(a0)
0001C266                            
0001C266                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C266 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C26A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C26C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C272 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C274 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C27A                            
0001C27A                            Obj09_NoDebug:
0001C27A 117C 0000 0030             		move.b	#0,$30(a0)
0001C280 7000                       		moveq	#0,d0
0001C282 1028 0022                  		move.b	$22(a0),d0
0001C286 0240 0002                  		andi.w	#2,d0
0001C28A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C28E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C292 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C296 4EF9 0000 DD72             		jmp	DisplaySprite
0001C29C                            ; ===========================================================================
0001C29C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C29E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C2A0                            ; ===========================================================================
0001C2A0                            
0001C2A0                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C2A0 6100 0000                  		bsr.w	Obj09_Jump
0001C2A4 6100 0000                  		bsr.w	Obj09_Move
0001C2A8 6100 0000                  		bsr.w	Obj09_Fall
0001C2AC 6000                       		bra.s	Obj09_Display
0001C2AE                            ; ===========================================================================
0001C2AE                            
0001C2AE                            Obj09_InAir:				; XREF: Obj09_Modes
0001C2AE 6100 0000                  		bsr.w	nullsub_2
0001C2B2 6100 0000                  		bsr.w	Obj09_Move
0001C2B6 6100 0000                  		bsr.w	Obj09_Fall
0001C2BA                            
0001C2BA                            Obj09_Display:				; XREF: Obj09_OnWall
0001C2BA 6100 0000                  		bsr.w	Obj09_ChkItems
0001C2BE 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C2C2 4EB9 0000 DD4C             		jsr	SpeedToPos
0001C2C8 6100 0000                  		bsr.w	SS_FixCamera
0001C2CC 3038 F780                  		move.w	($FFFFF780).w,d0
0001C2D0 D078 F782                  		add.w	($FFFFF782).w,d0
0001C2D4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C2D8 4EB9 0001 41D4             		jsr	Sonic_Animate
0001C2DE 4E75                       		rts	
0001C2E0                            
0001C2E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2E0                            
0001C2E0                            
0001C2E0                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C2E0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C2E6 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C2E8 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C2EC                            
0001C2EC                            Obj09_ChkRight:
0001C2EC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C2F2 6700                       		beq.s	loc_1BA78	; if not, branch
0001C2F4 6100 0000                  		bsr.w	Obj09_MoveRight
0001C2F8                            
0001C2F8                            loc_1BA78:
0001C2F8 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2FC 0200 000C                  		andi.b	#$C,d0
0001C300 6600                       		bne.s	loc_1BAA8
0001C302 3028 0014                  		move.w	$14(a0),d0
0001C306 6700                       		beq.s	loc_1BAA8
0001C308 6B00                       		bmi.s	loc_1BA9A
0001C30A 0440 000C                  		subi.w	#$C,d0
0001C30E 6400                       		bcc.s	loc_1BA94
0001C310 303C 0000                  		move.w	#0,d0
0001C314                            
0001C314                            loc_1BA94:
0001C314 3140 0014                  		move.w	d0,$14(a0)
0001C318 6000                       		bra.s	loc_1BAA8
0001C31A                            ; ===========================================================================
0001C31A                            
0001C31A                            loc_1BA9A:
0001C31A 0640 000C                  		addi.w	#$C,d0
0001C31E 6400                       		bcc.s	loc_1BAA4
0001C320 303C 0000                  		move.w	#0,d0
0001C324                            
0001C324                            loc_1BAA4:
0001C324 3140 0014                  		move.w	d0,$14(a0)
0001C328                            
0001C328                            loc_1BAA8:
0001C328 1038 F780                  		move.b	($FFFFF780).w,d0
0001C32C 0600 0020                  		addi.b	#$20,d0
0001C330 0200 00C0                  		andi.b	#$C0,d0
0001C334 4400                       		neg.b	d0
0001C336 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C33C C3E8 0014                  		muls.w	$14(a0),d1
0001C340 D3A8 0008                  		add.l	d1,8(a0)
0001C344 C1E8 0014                  		muls.w	$14(a0),d0
0001C348 D1A8 000C                  		add.l	d0,$C(a0)
0001C34C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C350 2428 000C                  		move.l	$C(a0),d2
0001C354 2628 0008                  		move.l	8(a0),d3
0001C358 6100 0000                  		bsr.w	sub_1BCE8
0001C35C 6700                       		beq.s	loc_1BAF2
0001C35E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C362 93A8 0008                  		sub.l	d1,8(a0)
0001C366 91A8 000C                  		sub.l	d0,$C(a0)
0001C36A 317C 0000 0014             		move.w	#0,$14(a0)
0001C370 4E75                       		rts	
0001C372                            ; ===========================================================================
0001C372                            
0001C372                            loc_1BAF2:
0001C372 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C376 4E75                       		rts	
0001C378                            ; End of function Obj09_Move
0001C378                            
0001C378                            
0001C378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C378                            
0001C378                            
0001C378                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C378 08E8 0000 0022             		bset	#0,$22(a0)
0001C37E 3028 0014                  		move.w	$14(a0),d0
0001C382 6700                       		beq.s	loc_1BB06
0001C384 6A00                       		bpl.s	loc_1BB1A
0001C386                            
0001C386                            loc_1BB06:
0001C386 0440 000C                  		subi.w	#$C,d0
0001C38A 0C40 F800                  		cmpi.w	#-$800,d0
0001C38E 6E00                       		bgt.s	loc_1BB14
0001C390 303C F800                  		move.w	#-$800,d0
0001C394                            
0001C394                            loc_1BB14:
0001C394 3140 0014                  		move.w	d0,$14(a0)
0001C398 4E75                       		rts	
0001C39A                            ; ===========================================================================
0001C39A                            
0001C39A                            loc_1BB1A:
0001C39A 0440 0040                  		subi.w	#$40,d0
0001C39E 6400                       		bcc.s	loc_1BB22
0001C3A0 4E71                       		nop	
0001C3A2                            
0001C3A2                            loc_1BB22:
0001C3A2 3140 0014                  		move.w	d0,$14(a0)
0001C3A6 4E75                       		rts	
0001C3A8                            ; End of function Obj09_MoveLeft
0001C3A8                            
0001C3A8                            
0001C3A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3A8                            
0001C3A8                            
0001C3A8                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C3A8 08A8 0000 0022             		bclr	#0,$22(a0)
0001C3AE 3028 0014                  		move.w	$14(a0),d0
0001C3B2 6B00                       		bmi.s	loc_1BB48
0001C3B4 0640 000C                  		addi.w	#$C,d0
0001C3B8 0C40 0800                  		cmpi.w	#$800,d0
0001C3BC 6D00                       		blt.s	loc_1BB42
0001C3BE 303C 0800                  		move.w	#$800,d0
0001C3C2                            
0001C3C2                            loc_1BB42:
0001C3C2 3140 0014                  		move.w	d0,$14(a0)
0001C3C6 6000                       		bra.s	locret_1BB54
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            loc_1BB48:
0001C3C8 0640 0040                  		addi.w	#$40,d0
0001C3CC 6400                       		bcc.s	loc_1BB50
0001C3CE 4E71                       		nop	
0001C3D0                            
0001C3D0                            loc_1BB50:
0001C3D0 3140 0014                  		move.w	d0,$14(a0)
0001C3D4                            
0001C3D4                            locret_1BB54:
0001C3D4 4E75                       		rts	
0001C3D6                            ; End of function Obj09_MoveRight
0001C3D6                            
0001C3D6                            
0001C3D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3D6                            
0001C3D6                            
0001C3D6                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C3D6 1038 F603                  		move.b	($FFFFF603).w,d0
0001C3DA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C3DE 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C3E0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3E4 0200 00FC                  		andi.b	#$FC,d0
0001C3E8 4400                       		neg.b	d0
0001C3EA 0400 0040                  		subi.b	#$40,d0
0001C3EE 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C3F4 C3FC 0680                  		muls.w	#$680,d1
0001C3F8 E081                       		asr.l	#8,d1
0001C3FA 3141 0010                  		move.w	d1,$10(a0)
0001C3FE C1FC 0680                  		muls.w	#$680,d0
0001C402 E080                       		asr.l	#8,d0
0001C404 3140 0012                  		move.w	d0,$12(a0)
0001C408 08E8 0001 0022             		bset	#1,$22(a0)
0001C40E 303C 00A0                  		move.w	#$A0,d0
0001C412 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C418                            
0001C418                            Obj09_NoJump:
0001C418 4E75                       		rts	
0001C41A                            ; End of function Obj09_Jump
0001C41A                            
0001C41A                            
0001C41A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C41A                            
0001C41A                            
0001C41A                            nullsub_2:				; XREF: Obj09_InAir
0001C41A 4E75                       		rts	
0001C41C                            ; End of function nullsub_2
0001C41C                            
0001C41C                            ; ===========================================================================
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C                            ; unused subroutine to limit Sonic's upward vertical speed
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C 323C FC00                  		move.w	#-$400,d1
0001C420 B268 0012                  		cmp.w	$12(a0),d1
0001C424 6F00                       		ble.s	locret_1BBB4
0001C426 1038 F602                  		move.b	($FFFFF602).w,d0
0001C42A 0200 0070                  		andi.b	#$70,d0
0001C42E 6600                       		bne.s	locret_1BBB4
0001C430 3141 0012                  		move.w	d1,$12(a0)
0001C434                            
0001C434                            locret_1BBB4:
0001C434 4E75                       		rts	
0001C436                            ; ---------------------------------------------------------------------------
0001C436                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C436                            ; ---------------------------------------------------------------------------
0001C436                            
0001C436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C436                            
0001C436                            
0001C436                            SS_FixCamera:				; XREF: Obj09
0001C436 3428 000C                  		move.w	$C(a0),d2
0001C43A 3628 0008                  		move.w	8(a0),d3
0001C43E 3038 F700                  		move.w	($FFFFF700).w,d0
0001C442 0443 00A0                  		subi.w	#$A0,d3
0001C446 6500                       		bcs.s	loc_1BBCE
0001C448 9043                       		sub.w	d3,d0
0001C44A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C44E                            
0001C44E                            loc_1BBCE:
0001C44E 3038 F704                  		move.w	($FFFFF704).w,d0
0001C452 0442 0070                  		subi.w	#$70,d2
0001C456 6500                       		bcs.s	locret_1BBDE
0001C458 9042                       		sub.w	d2,d0
0001C45A 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C45E                            
0001C45E                            locret_1BBDE:
0001C45E 4E75                       		rts	
0001C460                            ; End of function SS_FixCamera
0001C460                            
0001C460                            ; ===========================================================================
0001C460                            
0001C460                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C460 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C466 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C46C 6600                       		bne.s	loc_1BBF4
0001C46E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C474                            
0001C474                            loc_1BBF4:
0001C474 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C47A 6D00                       		blt.s	loc_1BC12
0001C47C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C482 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C488 5428 0024                  		addq.b	#2,$24(a0)
0001C48C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C492                            
0001C492                            loc_1BC12:
0001C492 3038 F780                  		move.w	($FFFFF780).w,d0
0001C496 D078 F782                  		add.w	($FFFFF782).w,d0
0001C49A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C49E 4EB9 0001 41D4             		jsr	Sonic_Animate
0001C4A4 4EB9 0001 446A             		jsr	LoadSonicDynPLC
0001C4AA 6100 FF8A                  		bsr.w	SS_FixCamera
0001C4AE 4EF9 0000 DD72             		jmp	DisplaySprite
0001C4B4                            ; ===========================================================================
0001C4B4                            
0001C4B4                            Obj09_Exit2:				; XREF: Obj09_Index
0001C4B4 5368 0038                  		subq.w	#1,$38(a0)
0001C4B8 6600                       		bne.s	loc_1BC40
0001C4BA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4C0                            
0001C4C0                            loc_1BC40:
0001C4C0 4EB9 0001 41D4             		jsr	Sonic_Animate
0001C4C6 4EB9 0001 446A             		jsr	LoadSonicDynPLC
0001C4CC 6100 FF68                  		bsr.w	SS_FixCamera
0001C4D0 4EF9 0000 DD72             		jmp	DisplaySprite
0001C4D6                            
0001C4D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4D6                            
0001C4D6                            
0001C4D6                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C4D6 2428 000C                  		move.l	$C(a0),d2
0001C4DA 2628 0008                  		move.l	8(a0),d3
0001C4DE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C4E2 0200 00FC                  		andi.b	#$FC,d0
0001C4E6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C4EC 3828 0010                  		move.w	$10(a0),d4
0001C4F0 48C4                       		ext.l	d4
0001C4F2 E184                       		asl.l	#8,d4
0001C4F4 C1FC 002A                  		muls.w	#$2A,d0
0001C4F8 D084                       		add.l	d4,d0
0001C4FA 3828 0012                  		move.w	$12(a0),d4
0001C4FE 48C4                       		ext.l	d4
0001C500 E184                       		asl.l	#8,d4
0001C502 C3FC 002A                  		muls.w	#$2A,d1
0001C506 D284                       		add.l	d4,d1
0001C508 D680                       		add.l	d0,d3
0001C50A 6100 0000                  		bsr.w	sub_1BCE8
0001C50E 6700                       		beq.s	loc_1BCB0
0001C510 9680                       		sub.l	d0,d3
0001C512 7000                       		moveq	#0,d0
0001C514 3140 0010                  		move.w	d0,$10(a0)
0001C518 08A8 0001 0022             		bclr	#1,$22(a0)
0001C51E D481                       		add.l	d1,d2
0001C520 6100 0000                  		bsr.w	sub_1BCE8
0001C524 6700                       		beq.s	loc_1BCC6
0001C526 9481                       		sub.l	d1,d2
0001C528 7200                       		moveq	#0,d1
0001C52A 3141 0012                  		move.w	d1,$12(a0)
0001C52E 4E75                       		rts	
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            loc_1BCB0:
0001C530 D481                       		add.l	d1,d2
0001C532 6100 0000                  		bsr.w	sub_1BCE8
0001C536 6700                       		beq.s	loc_1BCD4
0001C538 9481                       		sub.l	d1,d2
0001C53A 7200                       		moveq	#0,d1
0001C53C 3141 0012                  		move.w	d1,$12(a0)
0001C540 08A8 0001 0022             		bclr	#1,$22(a0)
0001C546                            
0001C546                            loc_1BCC6:
0001C546 E080                       		asr.l	#8,d0
0001C548 E081                       		asr.l	#8,d1
0001C54A 3140 0010                  		move.w	d0,$10(a0)
0001C54E 3141 0012                  		move.w	d1,$12(a0)
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            loc_1BCD4:
0001C554 E080                       		asr.l	#8,d0
0001C556 E081                       		asr.l	#8,d1
0001C558 3140 0010                  		move.w	d0,$10(a0)
0001C55C 3141 0012                  		move.w	d1,$12(a0)
0001C560 08E8 0001 0022             		bset	#1,$22(a0)
0001C566 4E75                       		rts	
0001C568                            ; End of function Obj09_Fall
0001C568                            
0001C568                            
0001C568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C568                            
0001C568                            
0001C568                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C568 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C56E 7800                       		moveq	#0,d4
0001C570 4842                       		swap	d2
0001C572 3802                       		move.w	d2,d4
0001C574 4842                       		swap	d2
0001C576 0644 0044                  		addi.w	#$44,d4
0001C57A 88FC 0018                  		divu.w	#$18,d4
0001C57E C8FC 0080                  		mulu.w	#$80,d4
0001C582 D3C4                       		adda.l	d4,a1
0001C584 7800                       		moveq	#0,d4
0001C586 4843                       		swap	d3
0001C588 3803                       		move.w	d3,d4
0001C58A 4843                       		swap	d3
0001C58C 0644 0014                  		addi.w	#$14,d4
0001C590 88FC 0018                  		divu.w	#$18,d4
0001C594 D2C4                       		adda.w	d4,a1
0001C596 7A00                       		moveq	#0,d5
0001C598 1819                       		move.b	(a1)+,d4
0001C59A 6100                       		bsr.s	sub_1BD30
0001C59C 1819                       		move.b	(a1)+,d4
0001C59E 6100                       		bsr.s	sub_1BD30
0001C5A0 D2FC 007E                  		adda.w	#$7E,a1
0001C5A4 1819                       		move.b	(a1)+,d4
0001C5A6 6100                       		bsr.s	sub_1BD30
0001C5A8 1819                       		move.b	(a1)+,d4
0001C5AA 6100                       		bsr.s	sub_1BD30
0001C5AC 4A05                       		tst.b	d5
0001C5AE 4E75                       		rts	
0001C5B0                            ; End of function sub_1BCE8
0001C5B0                            
0001C5B0                            
0001C5B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5B0                            
0001C5B0                            
0001C5B0                            sub_1BD30:				; XREF: sub_1BCE8
0001C5B0 6700                       		beq.s	locret_1BD44
0001C5B2 0C04 0028                  		cmpi.b	#$28,d4
0001C5B6 6700                       		beq.s	locret_1BD44
0001C5B8 0C04 003A                  		cmpi.b	#$3A,d4
0001C5BC 6500                       		bcs.s	loc_1BD46
0001C5BE 0C04 004B                  		cmpi.b	#$4B,d4
0001C5C2 6400                       		bcc.s	loc_1BD46
0001C5C4                            
0001C5C4                            locret_1BD44:
0001C5C4 4E75                       		rts	
0001C5C6                            ; ===========================================================================
0001C5C6                            
0001C5C6                            loc_1BD46:
0001C5C6 1144 0030                  		move.b	d4,$30(a0)
0001C5CA 2149 0032                  		move.l	a1,$32(a0)
0001C5CE 7AFF                       		moveq	#-1,d5
0001C5D0 4E75                       		rts	
0001C5D2                            ; End of function sub_1BD30
0001C5D2                            
0001C5D2                            
0001C5D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5D2                            
0001C5D2                            
0001C5D2                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C5D2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5D8 7800                       		moveq	#0,d4
0001C5DA 3828 000C                  		move.w	$C(a0),d4
0001C5DE 0644 0050                  		addi.w	#$50,d4
0001C5E2 88FC 0018                  		divu.w	#$18,d4
0001C5E6 C8FC 0080                  		mulu.w	#$80,d4
0001C5EA D3C4                       		adda.l	d4,a1
0001C5EC 7800                       		moveq	#0,d4
0001C5EE 3828 0008                  		move.w	8(a0),d4
0001C5F2 0644 0020                  		addi.w	#$20,d4
0001C5F6 88FC 0018                  		divu.w	#$18,d4
0001C5FA D2C4                       		adda.w	d4,a1
0001C5FC 1811                       		move.b	(a1),d4
0001C5FE 6600                       		bne.s	Obj09_ChkCont
0001C600 4A28 003A                  		tst.b	$3A(a0)
0001C604 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C608 7800                       		moveq	#0,d4
0001C60A 4E75                       		rts	
0001C60C                            ; ===========================================================================
0001C60C                            
0001C60C                            Obj09_ChkCont:
0001C60C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C610 6600                       		bne.s	Obj09_Chk1Up
0001C612 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C616 6600                       		bne.s	Obj09_GetCont
0001C618 14BC 0001                  		move.b	#1,(a2)
0001C61C 2549 0004                  		move.l	a1,4(a2)
0001C620                            
0001C620                            Obj09_GetCont:
0001C620 4EB9 0000 A2B8             		jsr	CollectRing
0001C626 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C62C 6500                       		bcs.s	Obj09_NoCont
0001C62E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C634 6600                       		bne.s	Obj09_NoCont
0001C636 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C63A 303C 00BF                  		move.w	#$BF,d0
0001C63E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C644                            
0001C644                            Obj09_NoCont:
0001C644 7800                       		moveq	#0,d4
0001C646 4E75                       		rts	
0001C648                            ; ===========================================================================
0001C648                            
0001C648                            Obj09_Chk1Up:
0001C648 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C64C 6600                       		bne.s	Obj09_ChkEmer
0001C64E 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C652 6600                       		bne.s	Obj09_Get1Up
0001C654 14BC 0003                  		move.b	#3,(a2)
0001C658 2549 0004                  		move.l	a1,4(a2)
0001C65C                            
0001C65C                            Obj09_Get1Up:
0001C65C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C660 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C664 303C 0088                  		move.w	#$88,d0
0001C668 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C66E 7800                       		moveq	#0,d4
0001C670 4E75                       		rts	
0001C672                            ; ===========================================================================
0001C672                            
0001C672                            Obj09_ChkEmer:
0001C672 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C676 6500                       		bcs.s	Obj09_ChkGhost
0001C678 0C04 0040                  		cmpi.b	#$40,d4
0001C67C 6200                       		bhi.s	Obj09_ChkGhost
0001C67E 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C682 6600                       		bne.s	Obj09_GetEmer
0001C684 14BC 0005                  		move.b	#5,(a2)
0001C688 2549 0004                  		move.l	a1,4(a2)
0001C68C                            
0001C68C                            Obj09_GetEmer:
0001C68C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C692 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C694 0404 003B                  		subi.b	#$3B,d4
0001C698 7000                       		moveq	#0,d0
0001C69A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C69E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C6A2 1584 0000                  		move.b	d4,(a2,d0.w)
0001C6A6 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C6AA                            
0001C6AA                            Obj09_NoEmer:
0001C6AA 303C 0093                  		move.w	#$93,d0
0001C6AE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C6B4 7800                       		moveq	#0,d4
0001C6B6 4E75                       		rts	
0001C6B8                            ; ===========================================================================
0001C6B8                            
0001C6B8                            Obj09_ChkGhost:
0001C6B8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C6BC 6600                       		bne.s	Obj09_ChkGhostTag
0001C6BE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C6C4                            
0001C6C4                            Obj09_ChkGhostTag:
0001C6C4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C6C8 6600                       		bne.s	Obj09_NoGhost
0001C6CA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C6D0 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C6D2 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C6D8                            
0001C6D8                            Obj09_NoGhost:
0001C6D8 78FF                       		moveq	#-1,d4
0001C6DA 4E75                       		rts	
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            Obj09_MakeGhostSolid:
0001C6DC 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C6E2 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C6E4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C6EA 723F                       		moveq	#$3F,d1
0001C6EC                            
0001C6EC                            Obj09_GhostLoop2:
0001C6EC 743F                       		moveq	#$3F,d2
0001C6EE                            
0001C6EE                            Obj09_GhostLoop:
0001C6EE 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C6F2 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C6F4 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C6F8                            
0001C6F8                            Obj09_NoReplace:
0001C6F8 5249                       		addq.w	#1,a1
0001C6FA 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C6FE 43E9 0040                  		lea	$40(a1),a1
0001C702 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C706                            
0001C706                            Obj09_GhostNotSolid:
0001C706 4228 003A                  		clr.b	$3A(a0)
0001C70A 7800                       		moveq	#0,d4
0001C70C 4E75                       		rts	
0001C70E                            ; End of function Obj09_ChkItems
0001C70E                            
0001C70E                            
0001C70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C70E                            
0001C70E                            
0001C70E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C70E 1028 0030                  		move.b	$30(a0),d0
0001C712 6600                       		bne.s	Obj09_ChkBumper
0001C714 5328 0036                  		subq.b	#1,$36(a0)
0001C718 6A00                       		bpl.s	loc_1BEA0
0001C71A 117C 0000 0036             		move.b	#0,$36(a0)
0001C720                            
0001C720                            loc_1BEA0:
0001C720 5328 0037                  		subq.b	#1,$37(a0)
0001C724 6A00                       		bpl.s	locret_1BEAC
0001C726 117C 0000 0037             		move.b	#0,$37(a0)
0001C72C                            
0001C72C                            locret_1BEAC:
0001C72C 4E75                       		rts	
0001C72E                            ; ===========================================================================
0001C72E                            
0001C72E                            Obj09_ChkBumper:
0001C72E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C732 6600                       		bne.s	Obj09_GOAL
0001C734 2228 0032                  		move.l	$32(a0),d1
0001C738 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C73E 3401                       		move.w	d1,d2
0001C740 0241 007F                  		andi.w	#$7F,d1
0001C744 C2FC 0018                  		mulu.w	#$18,d1
0001C748 0441 0014                  		subi.w	#$14,d1
0001C74C EE4A                       		lsr.w	#7,d2
0001C74E 0242 007F                  		andi.w	#$7F,d2
0001C752 C4FC 0018                  		mulu.w	#$18,d2
0001C756 0442 0044                  		subi.w	#$44,d2
0001C75A 9268 0008                  		sub.w	8(a0),d1
0001C75E 9468 000C                  		sub.w	$C(a0),d2
0001C762 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C768 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C76E C3FC F900                  		muls.w	#-$700,d1
0001C772 E081                       		asr.l	#8,d1
0001C774 3141 0010                  		move.w	d1,$10(a0)
0001C778 C1FC F900                  		muls.w	#-$700,d0
0001C77C E080                       		asr.l	#8,d0
0001C77E 3140 0012                  		move.w	d0,$12(a0)
0001C782 08E8 0001 0022             		bset	#1,$22(a0)
0001C788 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C78C 6600                       		bne.s	Obj09_BumpSnd
0001C78E 14BC 0002                  		move.b	#2,(a2)
0001C792 2028 0032                  		move.l	$32(a0),d0
0001C796 5380                       		subq.l	#1,d0
0001C798 2540 0004                  		move.l	d0,4(a2)
0001C79C                            
0001C79C                            Obj09_BumpSnd:
0001C79C 303C 00B4                  		move.w	#$B4,d0
0001C7A0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C7A6                            ; ===========================================================================
0001C7A6                            
0001C7A6                            Obj09_GOAL:
0001C7A6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C7AA 6600                       		bne.s	Obj09_UPblock
0001C7AC 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C7B0 303C 00A8                  		move.w	#$A8,d0		; change item
0001C7B4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C7BA 4E75                       		rts	
0001C7BC                            ; ===========================================================================
0001C7BC                            
0001C7BC                            Obj09_UPblock:
0001C7BC 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C7C0 6600                       		bne.s	Obj09_DOWNblock
0001C7C2 4A28 0036                  		tst.b	$36(a0)
0001C7C6 6600 0000                  		bne.w	Obj09_NoGlass
0001C7CA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7D0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7D6 6700                       		beq.s	Obj09_UPsnd
0001C7D8 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C7DC 2268 0032                  		movea.l	$32(a0),a1
0001C7E0 5389                       		subq.l	#1,a1
0001C7E2 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C7E6                            
0001C7E6                            Obj09_UPsnd:
0001C7E6 303C 00A9                  		move.w	#$A9,d0
0001C7EA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C7F0                            ; ===========================================================================
0001C7F0                            
0001C7F0                            Obj09_DOWNblock:
0001C7F0 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C7F4 6600                       		bne.s	Obj09_Rblock
0001C7F6 4A28 0036                  		tst.b	$36(a0)
0001C7FA 6600 0000                  		bne.w	Obj09_NoGlass
0001C7FE 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C804 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C80A 6600                       		bne.s	Obj09_DOWNsnd
0001C80C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C810 2268 0032                  		movea.l	$32(a0),a1
0001C814 5389                       		subq.l	#1,a1
0001C816 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C81A                            
0001C81A                            Obj09_DOWNsnd:
0001C81A 303C 00A9                  		move.w	#$A9,d0
0001C81E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            Obj09_Rblock:
0001C824 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C828 6600                       		bne.s	Obj09_ChkGlass
0001C82A 4A28 0037                  		tst.b	$37(a0)
0001C82E 6600 0000                  		bne.w	Obj09_NoGlass
0001C832 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C838 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C83C 6600                       		bne.s	Obj09_RevStage
0001C83E 14BC 0004                  		move.b	#4,(a2)
0001C842 2028 0032                  		move.l	$32(a0),d0
0001C846 5380                       		subq.l	#1,d0
0001C848 2540 0004                  		move.l	d0,4(a2)
0001C84C                            
0001C84C                            Obj09_RevStage:
0001C84C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C850 303C 00A9                  		move.w	#$A9,d0
0001C854 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C85A                            ; ===========================================================================
0001C85A                            
0001C85A                            Obj09_ChkGlass:
0001C85A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C85E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C860 0C00 002E                  		cmpi.b	#$2E,d0
0001C864 6700                       		beq.s	Obj09_Glass
0001C866 0C00 002F                  		cmpi.b	#$2F,d0
0001C86A 6700                       		beq.s	Obj09_Glass
0001C86C 0C00 0030                  		cmpi.b	#$30,d0
0001C870 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C872                            
0001C872                            Obj09_Glass:
0001C872 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C876 6600                       		bne.s	Obj09_GlassSnd
0001C878 14BC 0006                  		move.b	#6,(a2)
0001C87C 2268 0032                  		movea.l	$32(a0),a1
0001C880 5389                       		subq.l	#1,a1
0001C882 2549 0004                  		move.l	a1,4(a2)
0001C886 1011                       		move.b	(a1),d0
0001C888 5200                       		addq.b	#1,d0		; change glass type when touched
0001C88A 0C00 0030                  		cmpi.b	#$30,d0
0001C88E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C890 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C892                            
0001C892                            Obj09_GlassUpdate:
0001C892 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C896                            
0001C896                            Obj09_GlassSnd:
0001C896 303C 00BA                  		move.w	#$BA,d0
0001C89A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            Obj09_NoGlass:
0001C8A0 4E75                       		rts	
0001C8A2                            ; End of function Obj09_ChkItems2
0001C8A2                            
0001C8A2                            ; ===========================================================================
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            ; Object 10 - blank
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            
0001C8A2                            Obj10:					; XREF: Obj_Index
0001C8A2 4E75                       		rts	
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4                            ; Subroutine to	animate	level graphics
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4                            
0001C8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A4                            
0001C8A4                            
0001C8A4                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C8A4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C8A8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C8AA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C8B0 6100 0000                  		bsr.w	AniArt_GiantRing
0001C8B4 7000                       		moveq	#0,d0
0001C8B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C8BA D040                       		add.w	d0,d0
0001C8BC 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C8C0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C8C4                            ; ===========================================================================
0001C8C4                            
0001C8C4                            AniArt_Pause:
0001C8C4 4E75                       		rts	
0001C8C6                            ; End of function AniArt_Load
0001C8C6                            
0001C8C6                            ; ===========================================================================
0001C8C6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8CA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8CE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C8D2 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C8D4                            ; ===========================================================================
0001C8D4                            ; ---------------------------------------------------------------------------
0001C8D4                            ; Animated pattern routine - Green Hill
0001C8D4                            ; ---------------------------------------------------------------------------
0001C8D4                            
0001C8D4                            AniArt_GHZ:				; XREF: AniArt_Index
0001C8D4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C8D8 6A00                       		bpl.s	loc_1C08A
0001C8DA 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C8E0 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C8E6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C8EA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C8EE 0240 0001                  		andi.w	#1,d0
0001C8F2 6700                       		beq.s	loc_1C078
0001C8F4 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C8F8                            
0001C8F8                            loc_1C078:
0001C8F8 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C902 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C906 6000 0000                  		bra.w	LoadTiles
0001C90A                            ; ===========================================================================
0001C90A                            
0001C90A                            loc_1C08A:
0001C90A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C90E 6A00                       		bpl.s	loc_1C0C0
0001C910 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C916 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C91C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C920 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C924 0240 0001                  		andi.w	#1,d0
0001C928 6700                       		beq.s	loc_1C0AE
0001C92A 43E9 0200                  		lea	$200(a1),a1
0001C92E                            
0001C92E                            loc_1C0AE:
0001C92E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C938 323C 000F                  		move.w	#$F,d1
0001C93C 6000 0000                  		bra.w	LoadTiles
0001C940                            ; ===========================================================================
0001C940                            
0001C940                            loc_1C0C0:
0001C940 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C944 6A00                       		bpl.s	locret_1C10C
0001C946 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C94C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C950 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C954 0240 0003                  		andi.w	#3,d0
0001C958 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C95C 0800 0000                  		btst	#0,d0
0001C960 6600                       		bne.s	loc_1C0E8
0001C962 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C968                            
0001C968                            loc_1C0E8:
0001C968 EF48                       		lsl.w	#7,d0
0001C96A 3200                       		move.w	d0,d1
0001C96C D040                       		add.w	d0,d0
0001C96E D041                       		add.w	d1,d0
0001C970 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C97A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C980 43F1 0000                  		lea	(a1,d0.w),a1
0001C984 323C 000B                  		move.w	#$B,d1
0001C988 6100 0000                  		bsr.w	LoadTiles
0001C98C                            
0001C98C                            locret_1C10C:
0001C98C 4E75                       		rts	
0001C98E                            ; ===========================================================================
0001C98E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C992                            ; ===========================================================================
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            ; Animated pattern routine - Marble
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            
0001C992                            AniArt_MZ:				; XREF: AniArt_Index
0001C992 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C996 6A00                       		bpl.s	loc_1C150
0001C998 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C99E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C9A4 7000                       		moveq	#0,d0
0001C9A6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9AA 5200                       		addq.b	#1,d0
0001C9AC 0C00 0003                  		cmpi.b	#3,d0
0001C9B0 6600                       		bne.s	loc_1C134
0001C9B2 7000                       		moveq	#0,d0
0001C9B4                            
0001C9B4                            loc_1C134:
0001C9B4 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C9B8 C0FC 0100                  		mulu.w	#$100,d0
0001C9BC D2C0                       		adda.w	d0,a1
0001C9BE 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C9C8 323C 0007                  		move.w	#7,d1
0001C9CC 6100 0000                  		bsr.w	LoadTiles
0001C9D0                            
0001C9D0                            loc_1C150:
0001C9D0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9D4 6A00                       		bpl.s	loc_1C1AE
0001C9D6 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C9DC 7000                       		moveq	#0,d0
0001C9DE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9E2 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C9E8 EE58                       		ror.w	#7,d0
0001C9EA D8C0                       		adda.w	d0,a4
0001C9EC 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C9F6 7600                       		moveq	#0,d3
0001C9F8 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C9FC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA00 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CA04 343C 0003                  		move.w	#3,d2
0001CA08                            
0001CA08                            loc_1C188:
0001CA08 3003                       		move.w	d3,d0
0001CA0A D040                       		add.w	d0,d0
0001CA0C 0240 001E                  		andi.w	#$1E,d0
0001CA10 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA16 3033 0000                  		move.w	(a3,d0.w),d0
0001CA1A 47F3 0000                  		lea	(a3,d0.w),a3
0001CA1E 224C                       		movea.l	a4,a1
0001CA20 323C 001F                  		move.w	#$1F,d1
0001CA24 4E93                       		jsr	(a3)
0001CA26 5843                       		addq.w	#4,d3
0001CA28 51CA FFDE                  		dbf	d2,loc_1C188
0001CA2C 4E75                       		rts	
0001CA2E                            ; ===========================================================================
0001CA2E                            
0001CA2E                            loc_1C1AE:
0001CA2E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA32 6A00 0000                  		bpl.w	locret_1C1EA
0001CA36 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA3C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CA42 7000                       		moveq	#0,d0
0001CA44 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA48 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA4C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CA52 C0FC 00C0                  		mulu.w	#$C0,d0
0001CA56 D2C0                       		adda.w	d0,a1
0001CA58 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CA62 323C 0005                  		move.w	#5,d1
0001CA66 6000 0000                  		bra.w	LoadTiles
0001CA6A                            ; ===========================================================================
0001CA6A                            
0001CA6A                            locret_1C1EA:
0001CA6A 4E75                       		rts	
0001CA6C                            ; ===========================================================================
0001CA6C                            ; ---------------------------------------------------------------------------
0001CA6C                            ; Animated pattern routine - Scrap Brain
0001CA6C                            ; ---------------------------------------------------------------------------
0001CA6C                            
0001CA6C                            AniArt_SBZ:				; XREF: AniArt_Index
0001CA6C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CA70 6700                       		beq.s	loc_1C1F8
0001CA72 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CA76 6000                       		bra.s	loc_1C250
0001CA78                            ; ===========================================================================
0001CA78                            
0001CA78                            loc_1C1F8:
0001CA78 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA7C 6A00                       		bpl.s	loc_1C250
0001CA7E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CA84 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CA8A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CA94 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA98 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CA9C 0240 0007                  		andi.w	#7,d0
0001CAA0 6700                       		beq.s	loc_1C234
0001CAA2 5340                       		subq.w	#1,d0
0001CAA4 C0FC 0180                  		mulu.w	#$180,d0
0001CAA8 43F1 0000                  		lea	(a1,d0.w),a1
0001CAAC 323C 000B                  		move.w	#$B,d1
0001CAB0 6000 0000                  		bra.w	LoadTiles
0001CAB4                            ; ===========================================================================
0001CAB4                            
0001CAB4                            loc_1C234:
0001CAB4 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CABA                            
0001CABA                            loc_1C23A:
0001CABA 323C 0005                  		move.w	#5,d1
0001CABE 6100 0000                  		bsr.w	LoadTiles
0001CAC2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CAC8 323C 0005                  		move.w	#5,d1
0001CACC 6000 0000                  		bra.w	LoadTiles
0001CAD0                            ; ===========================================================================
0001CAD0                            
0001CAD0                            loc_1C250:
0001CAD0 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CAD4 6700                       		beq.s	loc_1C25C
0001CAD6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CADA 6000                       		bra.s	locret_1C2A0
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1C25C:
0001CADC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CAE0 6A00                       		bpl.s	locret_1C2A0
0001CAE2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CAE8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CAEE 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CAF8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CAFC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB00 0240 0007                  		andi.w	#7,d0
0001CB04 6700                       		beq.s	loc_1C298
0001CB06 5340                       		subq.w	#1,d0
0001CB08 C0FC 0180                  		mulu.w	#$180,d0
0001CB0C 43F1 0000                  		lea	(a1,d0.w),a1
0001CB10 323C 000B                  		move.w	#$B,d1
0001CB14 6000 0000                  		bra.w	LoadTiles
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            loc_1C298:
0001CB18 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB1E 609A                       		bra.s	loc_1C23A
0001CB20                            ; ===========================================================================
0001CB20                            
0001CB20                            locret_1C2A0:
0001CB20 4E75                       		rts	
0001CB22                            ; ===========================================================================
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            ; Animated pattern routine - ending sequence
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            
0001CB22                            AniArt_Ending:				; XREF: AniArt_Index
0001CB22 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB26 6A00                       		bpl.s	loc_1C2F4
0001CB28 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB2E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB34 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB38 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB3C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB40 0240 0001                  		andi.w	#1,d0
0001CB44 6700                       		beq.s	loc_1C2CE
0001CB46 43E9 0200                  		lea	$200(a1),a1
0001CB4A 45EA 0200                  		lea	$200(a2),a2
0001CB4E                            
0001CB4E                            loc_1C2CE:
0001CB4E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB58 323C 000F                  		move.w	#$F,d1
0001CB5C 6100 0000                  		bsr.w	LoadTiles
0001CB60 224A                       		movea.l	a2,a1
0001CB62 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CB6C 323C 000F                  		move.w	#$F,d1
0001CB70 6000 0000                  		bra.w	LoadTiles
0001CB74                            ; ===========================================================================
0001CB74                            
0001CB74                            loc_1C2F4:
0001CB74 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB78 6A00                       		bpl.s	loc_1C33C
0001CB7A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB80 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB84 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB88 0240 0007                  		andi.w	#7,d0
0001CB8C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CB90 EF48                       		lsl.w	#7,d0
0001CB92 3200                       		move.w	d0,d1
0001CB94 D040                       		add.w	d0,d0
0001CB96 D041                       		add.w	d1,d0
0001CB98 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBA2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBA8 43F1 0000                  		lea	(a1,d0.w),a1
0001CBAC 323C 000B                  		move.w	#$B,d1
0001CBB0 6000 0000                  		bra.w	LoadTiles
0001CBB4                            ; ===========================================================================
0001CBB4 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            loc_1C33C:
0001CBBC 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CBC0 6A00                       		bpl.s	loc_1C37A
0001CBC2 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CBC8 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CBCC 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CBD0 0240 0003                  		andi.w	#3,d0
0001CBD4 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CBD8 E148                       		lsl.w	#8,d0
0001CBDA D040                       		add.w	d0,d0
0001CBDC 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CBE6 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CBEA 43F1 0000                  		lea	(a1,d0.w),a1
0001CBEE 323C 000F                  		move.w	#$F,d1
0001CBF2 6000 0000                  		bra.w	LoadTiles
0001CBF6                            ; ===========================================================================
0001CBF6 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CBFA                            ; ===========================================================================
0001CBFA                            
0001CBFA                            loc_1C37A:
0001CBFA 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CBFE 6A00                       		bpl.s	locret_1C3B4
0001CC00 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CC06 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CC0A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CC0E 0240 0003                  		andi.w	#3,d0
0001CC12 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC16 E148                       		lsl.w	#8,d0
0001CC18 D040                       		add.w	d0,d0
0001CC1A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC24 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC28 43F1 0000                  		lea	(a1,d0.w),a1
0001CC2C 323C 000F                  		move.w	#$F,d1
0001CC30 6000 0000                  		bra.w	LoadTiles
0001CC34                            ; ===========================================================================
0001CC34                            
0001CC34                            locret_1C3B4:
0001CC34 4E75                       		rts	
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            AniArt_none:				; XREF: AniArt_Index
0001CC36 4E75                       		rts	
0001CC38                            
0001CC38                            ; ---------------------------------------------------------------------------
0001CC38                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC38                            ; ---------------------------------------------------------------------------
0001CC38                            
0001CC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC38                            
0001CC38                            
0001CC38                            LoadTiles:
0001CC38 2C99                       		move.l	(a1)+,(a6)
0001CC3A 2C99                       		move.l	(a1)+,(a6)
0001CC3C 2C99                       		move.l	(a1)+,(a6)
0001CC3E 2C99                       		move.l	(a1)+,(a6)
0001CC40 2C99                       		move.l	(a1)+,(a6)
0001CC42 2C99                       		move.l	(a1)+,(a6)
0001CC44 2C99                       		move.l	(a1)+,(a6)
0001CC46 2C99                       		move.l	(a1)+,(a6)
0001CC48 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC4C 4E75                       		rts	
0001CC4E                            ; End of function LoadTiles
0001CC4E                            
0001CC4E                            ; ===========================================================================
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E                            ; Animated pattern routine - more Marble Zone
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CC52 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CC56 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CC5A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CC5E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CC62 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CC66 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CC6A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CC6E                            ; ===========================================================================
0001CC6E                            
0001CC6E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CC6E 2C91                       		move.l	(a1),(a6)
0001CC70 43E9 0010                  		lea	$10(a1),a1
0001CC74 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CC78 4E75                       		rts	
0001CC7A                            ; ===========================================================================
0001CC7A                            
0001CC7A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CC7A 2029 0002                  		move.l	2(a1),d0
0001CC7E 1029 0001                  		move.b	1(a1),d0
0001CC82 E098                       		ror.l	#8,d0
0001CC84 2C80                       		move.l	d0,(a6)
0001CC86 43E9 0010                  		lea	$10(a1),a1
0001CC8A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CC8E 4E75                       		rts	
0001CC90                            ; ===========================================================================
0001CC90                            
0001CC90                            loc_1C410:				; XREF: AniArt_MZextra
0001CC90 2CA9 0002                  		move.l	2(a1),(a6)
0001CC94 43E9 0010                  		lea	$10(a1),a1
0001CC98 51C9 FFF6                  		dbf	d1,loc_1C410
0001CC9C 4E75                       		rts	
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_1C41E:				; XREF: AniArt_MZextra
0001CC9E 2029 0004                  		move.l	4(a1),d0
0001CCA2 1029 0003                  		move.b	3(a1),d0
0001CCA6 E098                       		ror.l	#8,d0
0001CCA8 2C80                       		move.l	d0,(a6)
0001CCAA 43E9 0010                  		lea	$10(a1),a1
0001CCAE 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CCB2 4E75                       		rts	
0001CCB4                            ; ===========================================================================
0001CCB4                            
0001CCB4                            loc_1C434:				; XREF: AniArt_MZextra
0001CCB4 2CA9 0004                  		move.l	4(a1),(a6)
0001CCB8 43E9 0010                  		lea	$10(a1),a1
0001CCBC 51C9 FFF6                  		dbf	d1,loc_1C434
0001CCC0 4E75                       		rts	
0001CCC2                            ; ===========================================================================
0001CCC2                            
0001CCC2                            loc_1C442:				; XREF: AniArt_MZextra
0001CCC2 2029 0006                  		move.l	6(a1),d0
0001CCC6 1029 0005                  		move.b	5(a1),d0
0001CCCA E098                       		ror.l	#8,d0
0001CCCC 2C80                       		move.l	d0,(a6)
0001CCCE 43E9 0010                  		lea	$10(a1),a1
0001CCD2 51C9 FFEE                  		dbf	d1,loc_1C442
0001CCD6 4E75                       		rts	
0001CCD8                            ; ===========================================================================
0001CCD8                            
0001CCD8                            loc_1C458:				; XREF: AniArt_MZextra
0001CCD8 2CA9 0006                  		move.l	6(a1),(a6)
0001CCDC 43E9 0010                  		lea	$10(a1),a1
0001CCE0 51C9 FFF6                  		dbf	d1,loc_1C458
0001CCE4 4E75                       		rts	
0001CCE6                            ; ===========================================================================
0001CCE6                            
0001CCE6                            loc_1C466:				; XREF: AniArt_MZextra
0001CCE6 2029 0008                  		move.l	8(a1),d0
0001CCEA 1029 0007                  		move.b	7(a1),d0
0001CCEE E098                       		ror.l	#8,d0
0001CCF0 2C80                       		move.l	d0,(a6)
0001CCF2 43E9 0010                  		lea	$10(a1),a1
0001CCF6 51C9 FFEE                  		dbf	d1,loc_1C466
0001CCFA 4E75                       		rts	
0001CCFC                            ; ===========================================================================
0001CCFC                            
0001CCFC                            loc_1C47C:				; XREF: AniArt_MZextra
0001CCFC 2CA9 0008                  		move.l	8(a1),(a6)
0001CD00 43E9 0010                  		lea	$10(a1),a1
0001CD04 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CD08 4E75                       		rts	
0001CD0A                            ; ===========================================================================
0001CD0A                            
0001CD0A                            loc_1C48A:				; XREF: AniArt_MZextra
0001CD0A 2029 000A                  		move.l	$A(a1),d0
0001CD0E 1029 0009                  		move.b	9(a1),d0
0001CD12 E098                       		ror.l	#8,d0
0001CD14 2C80                       		move.l	d0,(a6)
0001CD16 43E9 0010                  		lea	$10(a1),a1
0001CD1A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD1E 4E75                       		rts	
0001CD20                            ; ===========================================================================
0001CD20                            
0001CD20                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD20 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD24 43E9 0010                  		lea	$10(a1),a1
0001CD28 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD2C 4E75                       		rts	
0001CD2E                            ; ===========================================================================
0001CD2E                            
0001CD2E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD2E 2029 000C                  		move.l	$C(a1),d0
0001CD32 1029 000B                  		move.b	$B(a1),d0
0001CD36 E098                       		ror.l	#8,d0
0001CD38 2C80                       		move.l	d0,(a6)
0001CD3A 43E9 0010                  		lea	$10(a1),a1
0001CD3E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CD42 4E75                       		rts	
0001CD44                            ; ===========================================================================
0001CD44                            
0001CD44                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CD44 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD48 43E9 0010                  		lea	$10(a1),a1
0001CD4C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            
0001CD52                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CD52 2029 000C                  		move.l	$C(a1),d0
0001CD56 E198                       		rol.l	#8,d0
0001CD58 1011                       		move.b	0(a1),d0
0001CD5A 2C80                       		move.l	d0,(a6)
0001CD5C 43E9 0010                  		lea	$10(a1),a1
0001CD60 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CD64 4E75                       		rts	
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CD66 3CA9 000E                  		move.w	$E(a1),(a6)
0001CD6A 3C91                       		move.w	0(a1),(a6)
0001CD6C 43E9 0010                  		lea	$10(a1),a1
0001CD70 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CD74 4E75                       		rts	
0001CD76                            ; ===========================================================================
0001CD76                            
0001CD76                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CD76 2011                       		move.l	0(a1),d0
0001CD78 1029 000F                  		move.b	$F(a1),d0
0001CD7C E098                       		ror.l	#8,d0
0001CD7E 2C80                       		move.l	d0,(a6)
0001CD80 43E9 0010                  		lea	$10(a1),a1
0001CD84 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CD88 4E75                       		rts	
0001CD8A                            
0001CD8A                            ; ---------------------------------------------------------------------------
0001CD8A                            ; Animated pattern routine - giant ring
0001CD8A                            ; ---------------------------------------------------------------------------
0001CD8A                            
0001CD8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD8A                            
0001CD8A                            
0001CD8A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CD8A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CD8E 6600                       		bne.s	loc_1C518
0001CD90 4E75                       		rts	
0001CD92                            ; ===========================================================================
0001CD92                            
0001CD92                            loc_1C518:
0001CD92 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CD98 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CD9E 7000                       		moveq	#0,d0
0001CDA0 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CDA4 43F1 0000                  		lea	(a1,d0.w),a1
0001CDA8 0640 8000                  		addi.w	#$8000,d0
0001CDAC E588                       		lsl.l	#2,d0
0001CDAE E448                       		lsr.w	#2,d0
0001CDB0 0040 4000                  		ori.w	#$4000,d0
0001CDB4 4840                       		swap	d0
0001CDB6 2D40 0004                  		move.l	d0,4(a6)
0001CDBA 323C 000D                  		move.w	#$D,d1
0001CDBE 6000 FE78                  		bra.w	LoadTiles
0001CDC2                            ; End of function AniArt_GiantRing
0001CDC2                            
0001CDC2                            ; ===========================================================================
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            ; Object 21 - SCORE, TIME, RINGS
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            
0001CDC2                            Obj21:					; XREF: Obj_Index
0001CDC2 7000                       		moveq	#0,d0
0001CDC4 1028 0024                  		move.b	$24(a0),d0
0001CDC8 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CDCC 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CDD0                            ; ===========================================================================
0001CDD0 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CDD2 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CDD4                            ; ===========================================================================
0001CDD4                            
0001CDD4                            Obj21_Main:				; XREF: Obj21_Main
0001CDD4 5428 0024                  		addq.b	#2,$24(a0)
0001CDD8 317C 0090 0008             		move.w	#$90,8(a0)
0001CDDE 317C 0108 000A             		move.w	#$108,$A(a0)
0001CDE4 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CDEC 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CDF2 117C 0000 0001             		move.b	#0,1(a0)
0001CDF8 117C 0000 0018             		move.b	#0,$18(a0)
0001CDFE                            
0001CDFE                            Obj21_Flash:				; XREF: Obj21_Main
0001CDFE 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE02 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CE04 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CE08 4EF9 0000 DD72             		jmp	DisplaySprite
0001CE0E                            ; ===========================================================================
0001CE0E                            
0001CE0E                            Obj21_Flash2:
0001CE0E 7000                       		moveq	#0,d0
0001CE10 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE16 6600                       		bne.s	Obj21_Display
0001CE18 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE1A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE20 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE22 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE24                            
0001CE24                            Obj21_Display:
0001CE24 1140 001A                  		move.b	d0,$1A(a0)
0001CE28 4EF9 0000 DD72             		jmp	DisplaySprite
0001CE2E                            ; ===========================================================================
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            Map_obj21:
0001CE2E                            	include "_maps\obj21.asm"
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE32 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE36 0A                         byte_1C5BC:	dc.b $A
0001CE37 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE3C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE41 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE46 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE4B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE50 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE55 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE5A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE5F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE64 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE69 00                         		dc.b 0
0001CE6A 0A                         byte_1C5F0:	dc.b $A
0001CE6B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE70 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE75 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE7A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE7F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE84 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE89 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE8E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE93 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE98 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE9D 00                         		dc.b 0
0001CE9E 0A                         byte_1C624:	dc.b $A
0001CE9F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEA4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEA9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEAE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CEB3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEB8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEBD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEC2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEC7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CECC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CED1 00                         		dc.b 0
0001CED2 0A                         byte_1C658:	dc.b $A
0001CED3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CED8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEDD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEE2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CEE7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEEC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEF1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEF6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEFB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF00 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF06 00                         		even
0001CF06 00                         		even
0001CF06                            
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06                            ; Add points subroutine
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06                            
0001CF06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF06                            
0001CF06                            
0001CF06                            AddPoints:
0001CF06 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CF0C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF10 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF14 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF16 223C 000F 423F             		move.l	#999999,d1
0001CF1C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF1E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF22 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF24 2481                       		move.l	d1,(a2)
0001CF26                            
0001CF26                            loc_1C6AC:
0001CF26 2013                       		move.l	(a3),d0
0001CF28 B092                       		cmp.l	(a2),d0
0001CF2A 6500 0000                  		bcs.w	locret_1C6B6
0001CF2E 2480                       		move.l	d0,(a2)
0001CF30                            
0001CF30                            locret_1C6B6:
0001CF30 4E75                       		rts	
0001CF32                            ; End of function AddPoints
0001CF32                            
0001CF32                            ; ---------------------------------------------------------------------------
0001CF32                            ; Subroutine to	update the HUD
0001CF32                            ; ---------------------------------------------------------------------------
0001CF32                            
0001CF32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF32                            
0001CF32                            
0001CF32                            HudUpdate:
0001CF32 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF36 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CF3A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CF3E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CF40 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CF44 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF4A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF4E 6100 0000                  		bsr.w	Hud_Score
0001CF52                            
0001CF52                            Hud_ChkRings:
0001CF52 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF56 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CF58 6A00                       		bpl.s	loc_1C6E4
0001CF5A 6100 0000                  		bsr.w	Hud_LoadZero
0001CF5E                            
0001CF5E                            loc_1C6E4:
0001CF5E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF62 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF68 7200                       		moveq	#0,d1
0001CF6A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF6E 6100 0000                  		bsr.w	Hud_Rings
0001CF72                            
0001CF72                            Hud_ChkTime:
0001CF72 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CF76 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CF78 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CF7C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CF7E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CF82 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CF88 6700                       		beq.s	TimeOver	; if yes, branch
0001CF8A 5221                       		addq.b	#1,-(a1)
0001CF8C 0C11 003C                  		cmpi.b	#60,(a1)
0001CF90 6500                       		bcs.s	Hud_ChkLives
0001CF92 12BC 0000                  		move.b	#0,(a1)
0001CF96 5221                       		addq.b	#1,-(a1)
0001CF98 0C11 003C                  		cmpi.b	#60,(a1)
0001CF9C 6500                       		bcs.s	loc_1C734
0001CF9E 12BC 0000                  		move.b	#0,(a1)
0001CFA2 5221                       		addq.b	#1,-(a1)
0001CFA4 0C11 0009                  		cmpi.b	#9,(a1)
0001CFA8 6500                       		bcs.s	loc_1C734
0001CFAA 12BC 0009                  		move.b	#9,(a1)
0001CFAE                            
0001CFAE                            loc_1C734:
0001CFAE 203C 5E40 0003             		move.l	#$5E400003,d0
0001CFB4 7200                       		moveq	#0,d1
0001CFB6 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CFBA 6100 0000                  		bsr.w	Hud_Mins
0001CFBE 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CFC4 7200                       		moveq	#0,d1
0001CFC6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CFCA 6100 0000                  		bsr.w	Hud_Secs
0001CFCE                            
0001CFCE                            Hud_ChkLives:
0001CFCE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CFD2 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CFD4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CFD8 6100 0000                  		bsr.w	Hud_Lives
0001CFDC                            
0001CFDC                            Hud_ChkBonus:
0001CFDC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CFE0 6700                       		beq.s	Hud_End		; if not, branch
0001CFE2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CFE6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CFF0 7200                       		moveq	#0,d1
0001CFF2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CFF6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFFA 7200                       		moveq	#0,d1
0001CFFC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D000 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D004                            
0001D004                            Hud_End:
0001D004 4E75                       		rts	
0001D006                            ; ===========================================================================
0001D006                            
0001D006                            TimeOver:				; XREF: Hud_ChkTime
0001D006 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D00A 41F8 D000                  		lea	($FFFFD000).w,a0
0001D00E 2448                       		movea.l	a0,a2
0001D010 6100 E908                  		bsr.w	KillSonic
0001D014 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D01A 4E75                       		rts	
0001D01C                            ; ===========================================================================
0001D01C                            
0001D01C                            HudDebug:				; XREF: HudUpdate
0001D01C 6100 0000                  		bsr.w	HudDb_XY
0001D020 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D024 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D026 6A00                       		bpl.s	HudDb_Rings
0001D028 6100 0000                  		bsr.w	Hud_LoadZero
0001D02C                            
0001D02C                            HudDb_Rings:
0001D02C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D030 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D036 7200                       		moveq	#0,d1
0001D038 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D03C 6100 0000                  		bsr.w	Hud_Rings
0001D040                            
0001D040                            HudDb_ObjCount:
0001D040 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D046 7200                       		moveq	#0,d1
0001D048 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D04C 6100 0000                  		bsr.w	Hud_Secs
0001D050 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D054 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D056 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D05A 6100 0000                  		bsr.w	Hud_Lives
0001D05E                            
0001D05E                            HudDb_ChkBonus:
0001D05E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D062 6700                       		beq.s	HudDb_End	; if not, branch
0001D064 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D068 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D072 7200                       		moveq	#0,d1
0001D074 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D078 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D07C 7200                       		moveq	#0,d1
0001D07E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D082 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D086                            
0001D086                            HudDb_End:
0001D086 4E75                       		rts	
0001D088                            ; End of function HudUpdate
0001D088                            
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            ; Subroutine to	load "0" on the	HUD
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            
0001D088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D088                            
0001D088                            
0001D088                            Hud_LoadZero:				; XREF: HudUpdate
0001D088 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D092 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D096 343C 0002                  		move.w	#2,d2
0001D09A 6000                       		bra.s	loc_1C83E
0001D09C                            ; End of function Hud_LoadZero
0001D09C                            
0001D09C                            ; ---------------------------------------------------------------------------
0001D09C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D09C                            ; ---------------------------------------------------------------------------
0001D09C                            
0001D09C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D09C                            
0001D09C                            
0001D09C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D09C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D0A2 6100 0000                  		bsr.w	Hud_Lives
0001D0A6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D0B0 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D0B4 343C 000E                  		move.w	#$E,d2
0001D0B8                            
0001D0B8                            loc_1C83E:				; XREF: Hud_LoadZero
0001D0B8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0BC                            
0001D0BC                            loc_1C842:
0001D0BC 323C 000F                  		move.w	#$F,d1
0001D0C0 101A                       		move.b	(a2)+,d0
0001D0C2 6B00                       		bmi.s	loc_1C85E
0001D0C4 4880                       		ext.w	d0
0001D0C6 EB48                       		lsl.w	#5,d0
0001D0C8 47F1 0000                  		lea	(a1,d0.w),a3
0001D0CC                            
0001D0CC                            loc_1C852:
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE 51C9 FFFC                  		dbf	d1,loc_1C852
0001D0D2                            
0001D0D2                            loc_1C858:
0001D0D2 51CA FFE8                  		dbf	d2,loc_1C842
0001D0D6                            
0001D0D6 4E75                       		rts	
0001D0D8                            ; ===========================================================================
0001D0D8                            
0001D0D8                            loc_1C85E:
0001D0D8 2CBC 0000 0000             		move.l	#0,(a6)
0001D0DE 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D0E2                            
0001D0E2 60EE                       		bra.s	loc_1C858
0001D0E4                            ; End of function Hud_Base
0001D0E4                            
0001D0E4                            ; ===========================================================================
0001D0E4 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D0F0 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D0F4                            ; ---------------------------------------------------------------------------
0001D0F4                            ; Subroutine to	load debug mode	numbers	patterns
0001D0F4                            ; ---------------------------------------------------------------------------
0001D0F4                            
0001D0F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0F4                            
0001D0F4                            
0001D0F4                            HudDb_XY:				; XREF: HudDebug
0001D0F4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D0FE 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D102 4841                       		swap	d1
0001D104 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D108 6100                       		bsr.s	HudDb_XY2
0001D10A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D10E 4841                       		swap	d1
0001D110 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D114                            ; End of function HudDb_XY
0001D114                            
0001D114                            
0001D114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D114                            
0001D114                            
0001D114                            HudDb_XY2:
0001D114 7C07                       		moveq	#7,d6
0001D116 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D11C                            
0001D11C                            HudDb_XYLoop:
0001D11C E959                       		rol.w	#4,d1
0001D11E 3401                       		move.w	d1,d2
0001D120 0242 000F                  		andi.w	#$F,d2
0001D124 0C42 000A                  		cmpi.w	#$A,d2
0001D128 6500                       		bcs.s	loc_1C8B2
0001D12A 5E42                       		addq.w	#7,d2
0001D12C                            
0001D12C                            loc_1C8B2:
0001D12C EB4A                       		lsl.w	#5,d2
0001D12E 47F1 2000                  		lea	(a1,d2.w),a3
0001D132 2C9B                       		move.l	(a3)+,(a6)
0001D134 2C9B                       		move.l	(a3)+,(a6)
0001D136 2C9B                       		move.l	(a3)+,(a6)
0001D138 2C9B                       		move.l	(a3)+,(a6)
0001D13A 2C9B                       		move.l	(a3)+,(a6)
0001D13C 2C9B                       		move.l	(a3)+,(a6)
0001D13E 2C9B                       		move.l	(a3)+,(a6)
0001D140 2C9B                       		move.l	(a3)+,(a6)
0001D142 4841                       		swap	d1
0001D144 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D148                            
0001D148 4E75                       		rts	
0001D14A                            ; End of function HudDb_XY2
0001D14A                            
0001D14A                            ; ---------------------------------------------------------------------------
0001D14A                            ; Subroutine to	load rings numbers patterns
0001D14A                            ; ---------------------------------------------------------------------------
0001D14A                            
0001D14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D14A                            
0001D14A                            
0001D14A                            Hud_Rings:				; XREF: HudUpdate
0001D14A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D150 7C02                       		moveq	#2,d6
0001D152 6000                       		bra.s	Hud_LoadArt
0001D154                            ; End of function Hud_Rings
0001D154                            
0001D154                            ; ---------------------------------------------------------------------------
0001D154                            ; Subroutine to	load score numbers patterns
0001D154                            ; ---------------------------------------------------------------------------
0001D154                            
0001D154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D154                            
0001D154                            
0001D154                            Hud_Score:				; XREF: HudUpdate
0001D154 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D15A 7C05                       		moveq	#5,d6
0001D15C                            
0001D15C                            Hud_LoadArt:
0001D15C 7800                       		moveq	#0,d4
0001D15E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D162                            
0001D162                            Hud_ScoreLoop:
0001D162 7400                       		moveq	#0,d2
0001D164 261A                       		move.l	(a2)+,d3
0001D166                            
0001D166                            loc_1C8EC:
0001D166 9283                       		sub.l	d3,d1
0001D168 6500                       		bcs.s	loc_1C8F4
0001D16A 5242                       		addq.w	#1,d2
0001D16C 60F8                       		bra.s	loc_1C8EC
0001D16E                            ; ===========================================================================
0001D16E                            
0001D16E                            loc_1C8F4:
0001D16E D283                       		add.l	d3,d1
0001D170 4A42                       		tst.w	d2
0001D172 6700                       		beq.s	loc_1C8FE
0001D174 383C 0001                  		move.w	#1,d4
0001D178                            
0001D178                            loc_1C8FE:
0001D178 4A44                       		tst.w	d4
0001D17A 6700                       		beq.s	loc_1C92C
0001D17C ED4A                       		lsl.w	#6,d2
0001D17E 2D40 0004                  		move.l	d0,4(a6)
0001D182 47F1 2000                  		lea	(a1,d2.w),a3
0001D186 2C9B                       		move.l	(a3)+,(a6)
0001D188 2C9B                       		move.l	(a3)+,(a6)
0001D18A 2C9B                       		move.l	(a3)+,(a6)
0001D18C 2C9B                       		move.l	(a3)+,(a6)
0001D18E 2C9B                       		move.l	(a3)+,(a6)
0001D190 2C9B                       		move.l	(a3)+,(a6)
0001D192 2C9B                       		move.l	(a3)+,(a6)
0001D194 2C9B                       		move.l	(a3)+,(a6)
0001D196 2C9B                       		move.l	(a3)+,(a6)
0001D198 2C9B                       		move.l	(a3)+,(a6)
0001D19A 2C9B                       		move.l	(a3)+,(a6)
0001D19C 2C9B                       		move.l	(a3)+,(a6)
0001D19E 2C9B                       		move.l	(a3)+,(a6)
0001D1A0 2C9B                       		move.l	(a3)+,(a6)
0001D1A2 2C9B                       		move.l	(a3)+,(a6)
0001D1A4 2C9B                       		move.l	(a3)+,(a6)
0001D1A6                            
0001D1A6                            loc_1C92C:
0001D1A6 0680 0040 0000             		addi.l	#$400000,d0
0001D1AC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D1B0                            
0001D1B0 4E75                       		rts	
0001D1B2                            ; End of function Hud_Score
0001D1B2                            
0001D1B2                            ; ---------------------------------------------------------------------------
0001D1B2                            ; Subroutine to	load countdown numbers on the continue screen
0001D1B2                            ; ---------------------------------------------------------------------------
0001D1B2                            
0001D1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1B2                            
0001D1B2                            
0001D1B2                            ContScrCounter:				; XREF: ContinueScreen
0001D1B2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D1BC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D1C2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D1C8 7C01                       		moveq	#1,d6
0001D1CA 7800                       		moveq	#0,d4
0001D1CC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D1D0                            
0001D1D0                            ContScr_Loop:
0001D1D0 7400                       		moveq	#0,d2
0001D1D2 261A                       		move.l	(a2)+,d3
0001D1D4                            
0001D1D4                            loc_1C95A:
0001D1D4 9283                       		sub.l	d3,d1
0001D1D6 6500                       		bcs.s	loc_1C962
0001D1D8 5242                       		addq.w	#1,d2
0001D1DA 60F8                       		bra.s	loc_1C95A
0001D1DC                            ; ===========================================================================
0001D1DC                            
0001D1DC                            loc_1C962:
0001D1DC D283                       		add.l	d3,d1
0001D1DE ED4A                       		lsl.w	#6,d2
0001D1E0 47F1 2000                  		lea	(a1,d2.w),a3
0001D1E4 2C9B                       		move.l	(a3)+,(a6)
0001D1E6 2C9B                       		move.l	(a3)+,(a6)
0001D1E8 2C9B                       		move.l	(a3)+,(a6)
0001D1EA 2C9B                       		move.l	(a3)+,(a6)
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 2C9B                       		move.l	(a3)+,(a6)
0001D1F2 2C9B                       		move.l	(a3)+,(a6)
0001D1F4 2C9B                       		move.l	(a3)+,(a6)
0001D1F6 2C9B                       		move.l	(a3)+,(a6)
0001D1F8 2C9B                       		move.l	(a3)+,(a6)
0001D1FA 2C9B                       		move.l	(a3)+,(a6)
0001D1FC 2C9B                       		move.l	(a3)+,(a6)
0001D1FE 2C9B                       		move.l	(a3)+,(a6)
0001D200 2C9B                       		move.l	(a3)+,(a6)
0001D202 2C9B                       		move.l	(a3)+,(a6)
0001D204 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D208                            
0001D208 4E75                       		rts	
0001D20A                            ; End of function ContScrCounter
0001D20A                            
0001D20A                            ; ===========================================================================
0001D20A                            ; ---------------------------------------------------------------------------
0001D20A                            ; HUD counter sizes
0001D20A                            ; ---------------------------------------------------------------------------
0001D20A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D20E 0000 2710                  Hud_10000:	dc.l 10000
0001D212 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D216 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D21A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D21E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D222                            
0001D222                            ; ---------------------------------------------------------------------------
0001D222                            ; Subroutine to	load time numbers patterns
0001D222                            ; ---------------------------------------------------------------------------
0001D222                            
0001D222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D222                            
0001D222                            
0001D222                            Hud_Mins:				; XREF: Hud_ChkTime
0001D222 45F9 0001 D21E             		lea	(Hud_1).l,a2
0001D228 7C00                       		moveq	#0,d6
0001D22A 6000                       		bra.s	loc_1C9BA
0001D22C                            ; End of function Hud_Mins
0001D22C                            
0001D22C                            
0001D22C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D22C                            
0001D22C                            
0001D22C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D22C 45F9 0001 D21A             		lea	(Hud_10).l,a2
0001D232 7C01                       		moveq	#1,d6
0001D234                            
0001D234                            loc_1C9BA:
0001D234 7800                       		moveq	#0,d4
0001D236 43FA 0000                  		lea	Art_Hud(pc),a1
0001D23A                            
0001D23A                            Hud_TimeLoop:
0001D23A 7400                       		moveq	#0,d2
0001D23C 261A                       		move.l	(a2)+,d3
0001D23E                            
0001D23E                            loc_1C9C4:
0001D23E 9283                       		sub.l	d3,d1
0001D240 6500                       		bcs.s	loc_1C9CC
0001D242 5242                       		addq.w	#1,d2
0001D244 60F8                       		bra.s	loc_1C9C4
0001D246                            ; ===========================================================================
0001D246                            
0001D246                            loc_1C9CC:
0001D246 D283                       		add.l	d3,d1
0001D248 4A42                       		tst.w	d2
0001D24A 6700                       		beq.s	loc_1C9D6
0001D24C 383C 0001                  		move.w	#1,d4
0001D250                            
0001D250                            loc_1C9D6:
0001D250 ED4A                       		lsl.w	#6,d2
0001D252 2D40 0004                  		move.l	d0,4(a6)
0001D256 47F1 2000                  		lea	(a1,d2.w),a3
0001D25A 2C9B                       		move.l	(a3)+,(a6)
0001D25C 2C9B                       		move.l	(a3)+,(a6)
0001D25E 2C9B                       		move.l	(a3)+,(a6)
0001D260 2C9B                       		move.l	(a3)+,(a6)
0001D262 2C9B                       		move.l	(a3)+,(a6)
0001D264 2C9B                       		move.l	(a3)+,(a6)
0001D266 2C9B                       		move.l	(a3)+,(a6)
0001D268 2C9B                       		move.l	(a3)+,(a6)
0001D26A 2C9B                       		move.l	(a3)+,(a6)
0001D26C 2C9B                       		move.l	(a3)+,(a6)
0001D26E 2C9B                       		move.l	(a3)+,(a6)
0001D270 2C9B                       		move.l	(a3)+,(a6)
0001D272 2C9B                       		move.l	(a3)+,(a6)
0001D274 2C9B                       		move.l	(a3)+,(a6)
0001D276 2C9B                       		move.l	(a3)+,(a6)
0001D278 2C9B                       		move.l	(a3)+,(a6)
0001D27A 0680 0040 0000             		addi.l	#$400000,d0
0001D280 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D284                            
0001D284 4E75                       		rts	
0001D286                            ; End of function Hud_Secs
0001D286                            
0001D286                            ; ---------------------------------------------------------------------------
0001D286                            ; Subroutine to	load time/ring bonus numbers patterns
0001D286                            ; ---------------------------------------------------------------------------
0001D286                            
0001D286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D286                            
0001D286                            
0001D286                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D286 45F9 0001 D212             		lea	(Hud_1000).l,a2
0001D28C 7C03                       		moveq	#3,d6
0001D28E 7800                       		moveq	#0,d4
0001D290 43FA 0000                  		lea	Art_Hud(pc),a1
0001D294                            
0001D294                            Hud_BonusLoop:
0001D294 7400                       		moveq	#0,d2
0001D296 261A                       		move.l	(a2)+,d3
0001D298                            
0001D298                            loc_1CA1E:
0001D298 9283                       		sub.l	d3,d1
0001D29A 6500                       		bcs.s	loc_1CA26
0001D29C 5242                       		addq.w	#1,d2
0001D29E 60F8                       		bra.s	loc_1CA1E
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_1CA26:
0001D2A0 D283                       		add.l	d3,d1
0001D2A2 4A42                       		tst.w	d2
0001D2A4 6700                       		beq.s	loc_1CA30
0001D2A6 383C 0001                  		move.w	#1,d4
0001D2AA                            
0001D2AA                            loc_1CA30:
0001D2AA 4A44                       		tst.w	d4
0001D2AC 6700                       		beq.s	Hud_ClrBonus
0001D2AE ED4A                       		lsl.w	#6,d2
0001D2B0 47F1 2000                  		lea	(a1,d2.w),a3
0001D2B4 2C9B                       		move.l	(a3)+,(a6)
0001D2B6 2C9B                       		move.l	(a3)+,(a6)
0001D2B8 2C9B                       		move.l	(a3)+,(a6)
0001D2BA 2C9B                       		move.l	(a3)+,(a6)
0001D2BC 2C9B                       		move.l	(a3)+,(a6)
0001D2BE 2C9B                       		move.l	(a3)+,(a6)
0001D2C0 2C9B                       		move.l	(a3)+,(a6)
0001D2C2 2C9B                       		move.l	(a3)+,(a6)
0001D2C4 2C9B                       		move.l	(a3)+,(a6)
0001D2C6 2C9B                       		move.l	(a3)+,(a6)
0001D2C8 2C9B                       		move.l	(a3)+,(a6)
0001D2CA 2C9B                       		move.l	(a3)+,(a6)
0001D2CC 2C9B                       		move.l	(a3)+,(a6)
0001D2CE 2C9B                       		move.l	(a3)+,(a6)
0001D2D0 2C9B                       		move.l	(a3)+,(a6)
0001D2D2 2C9B                       		move.l	(a3)+,(a6)
0001D2D4                            
0001D2D4                            loc_1CA5A:
0001D2D4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D2D8                            
0001D2D8 4E75                       		rts	
0001D2DA                            ; ===========================================================================
0001D2DA                            
0001D2DA                            Hud_ClrBonus:
0001D2DA 7A0F                       		moveq	#$F,d5
0001D2DC                            
0001D2DC                            Hud_ClrBonusLoop:
0001D2DC 2CBC 0000 0000             		move.l	#0,(a6)
0001D2E2 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D2E6                            
0001D2E6 60EC                       		bra.s	loc_1CA5A
0001D2E8                            ; End of function Hud_TimeRingBonus
0001D2E8                            
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            
0001D2E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2E8                            
0001D2E8                            
0001D2E8                            Hud_Lives:				; XREF: Hud_ChkLives
0001D2E8 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D2EE 7200                       		moveq	#0,d1
0001D2F0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D2F4 45F9 0001 D21A             		lea	(Hud_10).l,a2
0001D2FA 7C01                       		moveq	#1,d6
0001D2FC 7800                       		moveq	#0,d4
0001D2FE 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D302                            
0001D302                            Hud_LivesLoop:
0001D302 2D40 0004                  		move.l	d0,4(a6)
0001D306 7400                       		moveq	#0,d2
0001D308 261A                       		move.l	(a2)+,d3
0001D30A                            
0001D30A                            loc_1CA90:
0001D30A 9283                       		sub.l	d3,d1
0001D30C 6500                       		bcs.s	loc_1CA98
0001D30E 5242                       		addq.w	#1,d2
0001D310 60F8                       		bra.s	loc_1CA90
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            loc_1CA98:
0001D312 D283                       		add.l	d3,d1
0001D314 4A42                       		tst.w	d2
0001D316 6700                       		beq.s	loc_1CAA2
0001D318 383C 0001                  		move.w	#1,d4
0001D31C                            
0001D31C                            loc_1CAA2:
0001D31C 4A44                       		tst.w	d4
0001D31E 6700                       		beq.s	Hud_ClrLives
0001D320                            
0001D320                            loc_1CAA6:
0001D320 EB4A                       		lsl.w	#5,d2
0001D322 47F1 2000                  		lea	(a1,d2.w),a3
0001D326 2C9B                       		move.l	(a3)+,(a6)
0001D328 2C9B                       		move.l	(a3)+,(a6)
0001D32A 2C9B                       		move.l	(a3)+,(a6)
0001D32C 2C9B                       		move.l	(a3)+,(a6)
0001D32E 2C9B                       		move.l	(a3)+,(a6)
0001D330 2C9B                       		move.l	(a3)+,(a6)
0001D332 2C9B                       		move.l	(a3)+,(a6)
0001D334 2C9B                       		move.l	(a3)+,(a6)
0001D336                            
0001D336                            loc_1CABC:
0001D336 0680 0040 0000             		addi.l	#$400000,d0
0001D33C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D340                            
0001D340 4E75                       		rts	
0001D342                            ; ===========================================================================
0001D342                            
0001D342                            Hud_ClrLives:
0001D342 4A46                       		tst.w	d6
0001D344 67DA                       		beq.s	loc_1CAA6
0001D346 7A07                       		moveq	#7,d5
0001D348                            
0001D348                            Hud_ClrLivesLoop:
0001D348 2CBC 0000 0000             		move.l	#0,(a6)
0001D34E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D352 60E2                       		bra.s	loc_1CABC
0001D354                            ; End of function Hud_Lives
0001D354                            
0001D354                            ; ===========================================================================
0001D354                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D654                            		even
0001D654                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D794                            		even
0001D794                            ; ===========================================================================
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            ; When debug mode is currently in use
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            
0001D794                            DebugMode:				; XREF: Obj01; Obj09
0001D794 7000                       		moveq	#0,d0
0001D796 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D79A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D79E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D7A2                            ; ===========================================================================
0001D7A2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D7A4 0000                       		dc.w Debug_Skip-Debug_Index
0001D7A6                            ; ===========================================================================
0001D7A6                            
0001D7A6                            Debug_Main:				; XREF: Debug_Index
0001D7A6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D7AA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D7B0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D7B6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D7BC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D7C2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D7C8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D7CE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D7D4 117C 0000 001A             		move.b	#0,$1A(a0)
0001D7DA 117C 0000 001C             		move.b	#0,$1C(a0)
0001D7E0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D7E6 6600                       		bne.s	Debug_Zone	; if not, branch
0001D7E8 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D7EE 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D7F4 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D7F6 6000                       		bra.s	Debug_UseList
0001D7F8                            ; ===========================================================================
0001D7F8                            
0001D7F8                            Debug_Zone:
0001D7F8 7000                       		moveq	#0,d0
0001D7FA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D7FE                            
0001D7FE                            Debug_UseList:
0001D7FE 45F9 0000 0000             		lea	(DebugList).l,a2
0001D804 D040                       		add.w	d0,d0
0001D806 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D80A 3C1A                       		move.w	(a2)+,d6
0001D80C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D810 6200                       		bhi.s	loc_1CF9E
0001D812 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D818                            
0001D818                            loc_1CF9E:
0001D818 6100 0000                  		bsr.w	Debug_ShowItem
0001D81C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D822 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D828                            
0001D828                            Debug_Skip:				; XREF: Debug_Index
0001D828 7006                       		moveq	#6,d0
0001D82A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D830 6700                       		beq.s	loc_1CFBE
0001D832 7000                       		moveq	#0,d0
0001D834 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D838                            
0001D838                            loc_1CFBE:
0001D838 45F9 0000 0000             		lea	(DebugList).l,a2
0001D83E D040                       		add.w	d0,d0
0001D840 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D844 3C1A                       		move.w	(a2)+,d6
0001D846 6100 0000                  		bsr.w	Debug_Control
0001D84A 4EF9 0000 DD72             		jmp	DisplaySprite
0001D850                            
0001D850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D850                            
0001D850                            
0001D850                            Debug_Control:
0001D850 7800                       		moveq	#0,d4
0001D852 323C 0001                  		move.w	#1,d1
0001D856 1838 F605                  		move.b	($FFFFF605).w,d4
0001D85A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D85E 6600                       		bne.s	loc_1D018	; if yes, branch
0001D860 1038 F604                  		move.b	($FFFFF604).w,d0
0001D864 0240 000F                  		andi.w	#$F,d0
0001D868 6600                       		bne.s	loc_1D000
0001D86A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D870 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D876 6000 0000                  		bra.w	Debug_BackItem
0001D87A                            ; ===========================================================================
0001D87A                            
0001D87A                            loc_1D000:
0001D87A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D87E 6600                       		bne.s	loc_1D01C
0001D880 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D886 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D88A 6600                       		bne.s	loc_1D018
0001D88C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D892                            
0001D892                            loc_1D018:
0001D892 1838 F604                  		move.b	($FFFFF604).w,d4
0001D896                            
0001D896                            loc_1D01C:
0001D896 7200                       		moveq	#0,d1
0001D898 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D89C 5241                       		addq.w	#1,d1
0001D89E 4841                       		swap	d1
0001D8A0 E881                       		asr.l	#4,d1
0001D8A2 2428 000C                  		move.l	$C(a0),d2
0001D8A6 2628 0008                  		move.l	8(a0),d3
0001D8AA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D8AE 6700                       		beq.s	loc_1D03C	; if not, branch
0001D8B0 9481                       		sub.l	d1,d2
0001D8B2 6400                       		bcc.s	loc_1D03C
0001D8B4 7400                       		moveq	#0,d2
0001D8B6                            
0001D8B6                            loc_1D03C:
0001D8B6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D8BA 6700                       		beq.s	loc_1D052	; if not, branch
0001D8BC D481                       		add.l	d1,d2
0001D8BE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D8C4 6500                       		bcs.s	loc_1D052
0001D8C6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D8CC                            
0001D8CC                            loc_1D052:
0001D8CC 0804 0002                  		btst	#2,d4
0001D8D0 6700                       		beq.s	loc_1D05E
0001D8D2 9681                       		sub.l	d1,d3
0001D8D4 6400                       		bcc.s	loc_1D05E
0001D8D6 7600                       		moveq	#0,d3
0001D8D8                            
0001D8D8                            loc_1D05E:
0001D8D8 0804 0003                  		btst	#3,d4
0001D8DC 6700                       		beq.s	loc_1D066
0001D8DE D681                       		add.l	d1,d3
0001D8E0                            
0001D8E0                            loc_1D066:
0001D8E0 2142 000C                  		move.l	d2,$C(a0)
0001D8E4 2143 0008                  		move.l	d3,8(a0)
0001D8E8                            
0001D8E8                            Debug_BackItem:
0001D8E8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D8EE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8F0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D8F6 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D8F8 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D8FC 6400                       		bcc.s	Debug_NoLoop
0001D8FE DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D902 6000                       		bra.s	Debug_NoLoop
0001D904                            ; ===========================================================================
0001D904                            
0001D904                            Debug_NextItem:
0001D904 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D90A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D90C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D910 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D914 6200                       		bhi.s	Debug_NoLoop
0001D916 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D91C                            
0001D91C                            Debug_NoLoop:
0001D91C 6000 0000                  		bra.w	Debug_ShowItem
0001D920                            ; ===========================================================================
0001D920                            
0001D920                            Debug_MakeItem:
0001D920 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D926 6700                       		beq.s	Debug_Exit	; if not, branch
0001D928 4EB9 0000 E1F8             		jsr	SingleObjLoad
0001D92E 6600                       		bne.s	Debug_Exit
0001D930 3368 0008 0008             		move.w	8(a0),8(a1)
0001D936 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D93C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D940 1368 0001 0001             		move.b	1(a0),1(a1)
0001D946 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D94C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D952 7000                       		moveq	#0,d0
0001D954 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D958 E748                       		lsl.w	#3,d0
0001D95A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D960 4E75                       		rts	
0001D962                            ; ===========================================================================
0001D962                            
0001D962                            Debug_Exit:
0001D962 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D968 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D96A 7000                       		moveq	#0,d0
0001D96C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D970 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D978 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D97E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D982 3140 000A                  		move.w	d0,$A(a0)
0001D986 3140 000E                  		move.w	d0,$E(a0)
0001D98A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D990 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D996 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D99C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D99E 4278 F780                  		clr.w	($FFFFF780).w
0001D9A2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D9A8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9B0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9B6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D9BC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D9C2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D9C8                            
0001D9C8                            Debug_DoNothing:
0001D9C8 4E75                       		rts	
0001D9CA                            ; End of function Debug_Control
0001D9CA                            
0001D9CA                            
0001D9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9CA                            
0001D9CA                            
0001D9CA                            Debug_ShowItem:				; XREF: Debug_Main
0001D9CA 7000                       		moveq	#0,d0
0001D9CC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9D0 E748                       		lsl.w	#3,d0
0001D9D2 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D9D8 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D9DE 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D9E4 4E75                       		rts	
0001D9E6                            ; End of function Debug_ShowItem
0001D9E6                            
0001D9E6                            ; ===========================================================================
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            ; Debug	list pointers
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            DebugList:
0001D9E6                            	include "_inc\Debug list pointers.asm"
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            ; Debug	list pointers
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6 0000                       	dc.w Debug_GHZ-DebugList
0001D9E8 0000                       	dc.w Debug_LZ-DebugList
0001D9EA 0000                       	dc.w Debug_MZ-DebugList
0001D9EC 0000                       	dc.w Debug_SLZ-DebugList
0001D9EE 0000                       	dc.w Debug_SYZ-DebugList
0001D9F0 0000                       	dc.w Debug_SBZ-DebugList
0001D9F2 0000                       	dc.w Debug_Ending-DebugList
0001D9F2 0000                       	dc.w Debug_Ending-DebugList
0001D9F4                            
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            ; Debug	list - Green Hill
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            Debug_GHZ:
0001D9F4                            	include "_inc\Debug list - GHZ.asm"
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            ; Debug	list - Green Hill
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4 0010                       	dc.w $10			; number of items in list
0001D9F6 2500 A5D0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D9FA 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D9FE 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DA02 0000 0680                  	dc.b 0,	0, 6, $80
0001DA06 1F00 9DC8                  	dc.l Map_obj1F+$1F000000
0001DA0A 0000 0400                  	dc.b 0,	0, 4, 0
0001DA0E 2200 A084                  	dc.l Map_obj22+$22000000
0001DA12 0000 0444                  	dc.b 0,	0, 4, $44
0001DA16 2B00 B24A                  	dc.l Map_obj2B+$2B000000
0001DA1A 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA1E 3600 D75A                  	dc.l Map_obj36+$36000000
0001DA22 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA26 1800 86E4                  	dc.l Map_obj18+$18000000
0001DA2A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA2E 3B00 D880                  	dc.l Map_obj3B+$3B000000
0001DA32 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA36 4000 FF0C                  	dc.l Map_obj40+$40000000
0001DA3A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DA3E 4100 E486                  	dc.l Map_obj41+$41000000
0001DA42 0000 0523                  	dc.b 0,	0, 5, $23
0001DA46 4200 E6AC                  	dc.l Map_obj42+$42000000
0001DA4A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA4E 4400 E9BA                  	dc.l Map_obj44+$44000000
0001DA52 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DA56 1900 87E4                  	dc.l Map_obj48+$19000000
0001DA5A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DA5E 7901 794A                  	dc.l Map_obj79+$79000000
0001DA62 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA66 4B00 A610                  	dc.l Map_obj4B+$4B000000
0001DA6A 0000 2400                  	dc.b 0,	0, $24,	0
0001DA6E 7D01 7A9A                  	dc.l Map_obj7D+$7D000000
0001DA72 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DA76                            	even
0001DA76                            	even
0001DA76                            
0001DA76                            ; ---------------------------------------------------------------------------
0001DA76                            ; Debug	list - Labyrinth
0001DA76                            ; ---------------------------------------------------------------------------
0001DA76                            Debug_LZ:
0001DA76                            	include "_inc\Debug list - LZ.asm"
0001DA76                            ; ---------------------------------------------------------------------------
0001DA76                            ; Debug	list - Labyrinth
0001DA76                            ; ---------------------------------------------------------------------------
0001DA76 0019                       	dc.w $19
0001DA78 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DA7C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA80 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DA84 0000 0680                  	dc.b 0,	0, 6, $80
0001DA88 4100 E486                  	dc.l Map_obj41+$41000000
0001DA8C 0000 0523                  	dc.b 0,	0, 5, $23
0001DA90 2C00 B2FA                  	dc.l Map_obj2C+$2C000000
0001DA94 0800 2486                  	dc.b 8,	0, $24,	$86
0001DA98 2D00 B4EE                  	dc.l Map_obj2D+$2D000000
0001DA9C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DAA0 1601 26E0                  	dc.l Map_obj16+$16000000
0001DAA4 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DAA8 1601 26E0                  	dc.l Map_obj16+$16000000
0001DAAC 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DAB0 3300 C9A6                  	dc.l Map_obj33+$33000000
0001DAB4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DAB8 3200 C566                  	dc.l Map_obj32+$32000000
0001DABC 0000 0513                  	dc.b 0,	0, 5, $13
0001DAC0 3600 D75A                  	dc.l Map_obj36+$36000000
0001DAC4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAC8 5201 0802                  	dc.l Map_obj52a+$52000000
0001DACC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DAD0 6101 2908                  	dc.l Map_obj61+$61000000
0001DAD4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DAD8 6101 2908                  	dc.l Map_obj61+$61000000
0001DADC 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DAE0 6101 2908                  	dc.l Map_obj61+$61000000
0001DAE4 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DAE8 6201 2A5C                  	dc.l Map_obj62+$62000000
0001DAEC 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DAF0 6101 2908                  	dc.l Map_obj61+$61000000
0001DAF4 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DAF8 6101 2908                  	dc.l Map_obj61+$61000000
0001DAFC 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB00 6301 2DBE                  	dc.l Map_obj63+$63000000
0001DB04 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DB08 6001 262A                  	dc.l Map_obj60+$60000000
0001DB0C 0000 0467                  	dc.b 0,	0, 4, $67
0001DB10 6401 3104                  	dc.l Map_obj64+$64000000
0001DB14 8413 8348                  	dc.b $84, $13, $83, $48
0001DB18 6501 328C                  	dc.l Map_obj65+$65000000
0001DB1C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB20 6501 328C                  	dc.l Map_obj65+$65000000
0001DB24 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB28 0B01 1A7A                  	dc.l Map_obj0B+$B000000
0001DB2C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB30 0C01 1B4A                  	dc.l Map_obj0C+$C000000
0001DB34 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB38 7901 794A                  	dc.l Map_obj79+$79000000
0001DB3C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB40                            	even
0001DB40                            	even
0001DB40                            
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            ; Debug	list - Marble
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            Debug_MZ:
0001DB40                            	include "_inc\Debug list - MZ.asm"
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            ; Debug	list - Marble
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40 0012                       	dc.w $12
0001DB42 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DB46 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB4A 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DB4E 0000 0680                  	dc.b 0,	0, 6, $80
0001DB52 2200 A084                  	dc.l Map_obj22+$22000000
0001DB56 0000 0444                  	dc.b 0,	0, 4, $44
0001DB5A 3600 D75A                  	dc.l Map_obj36+$36000000
0001DB5E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB62 4100 E486                  	dc.l Map_obj41+$41000000
0001DB66 0000 0523                  	dc.b 0,	0, 5, $23
0001DB6A 1300 BA30                  	dc.l Map_obj14+$13000000
0001DB6E 0000 0345                  	dc.b 0,	0, 3, $45
0001DB72 4600 F06C                  	dc.l Map_obj46+$46000000
0001DB76 0000 4000                  	dc.b 0,	0, $40,	0
0001DB7A 4C00 F9B8                  	dc.l Map_obj4C+$4C000000
0001DB7E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB82 4E00 FC9C                  	dc.l Map_obj4E+$4E000000
0001DB86 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB8A 3300 C9A6                  	dc.l Map_obj33+$33000000
0001DB8E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB92 5001 009A                  	dc.l Map_obj50+$50000000
0001DB96 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB9A 5101 0536                  	dc.l Map_obj51+$51000000
0001DB9E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBA2 5201 07AC                  	dc.l Map_obj52+$52000000
0001DBA6 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DBAA 5300 8D7C                  	dc.l Map_obj53+$53000000
0001DBAE 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DBB2 5400 F97E                  	dc.l Map_obj54+$54000000
0001DBB6 0000 8680                  	dc.b 0,	0, $86,	$80
0001DBBA 5501 09A0                  	dc.l Map_obj55+$55000000
0001DBBE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DBC2 7801 75C4                  	dc.l Map_obj78+$78000000
0001DBC6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DBCA 7901 794A                  	dc.l Map_obj79+$79000000
0001DBCE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBD2                            	even
0001DBD2                            	even
0001DBD2                            
0001DBD2                            ; ---------------------------------------------------------------------------
0001DBD2                            ; Debug	list - Star Light
0001DBD2                            ; ---------------------------------------------------------------------------
0001DBD2                            Debug_SLZ:
0001DBD2                            	include "_inc\Debug list - SLZ.asm"
0001DBD2                            ; ---------------------------------------------------------------------------
0001DBD2                            ; Debug	list - Star Light
0001DBD2                            ; ---------------------------------------------------------------------------
0001DBD2 000F                       	dc.w $F
0001DBD4 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DBD8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBDC 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DBE0 0000 0680                  	dc.b 0,	0, 6, $80
0001DBE4 5901 14A2                  	dc.l Map_obj59+$59000000
0001DBE8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBEC 5300 8D7C                  	dc.l Map_obj53+$53000000
0001DBF0 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DBF4 1800 8742                  	dc.l Map_obj18b+$18000000
0001DBF8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBFC 5A01 15DC                  	dc.l Map_obj5A+$5A000000
0001DC00 0000 4000                  	dc.b 0,	0, $40,	0
0001DC04 5B01 1794                  	dc.l Map_obj5B+$5B000000
0001DC08 0000 4000                  	dc.b 0,	0, $40,	0
0001DC0C 5D01 1D64                  	dc.l Map_obj5D+$5D000000
0001DC10 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC14 5E01 20F6                  	dc.l Map_obj5E+$5E000000
0001DC18 0000 0374                  	dc.b 0,	0, 3, $74
0001DC1C 4100 E486                  	dc.l Map_obj41+$41000000
0001DC20 0000 0523                  	dc.b 0,	0, 5, $23
0001DC24 1300 BA30                  	dc.l Map_obj14+$13000000
0001DC28 0000 0480                  	dc.b 0,	0, 4, $80
0001DC2C 1C00 8E8C                  	dc.l Map_obj1C+$1C000000
0001DC30 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC34 5F01 2374                  	dc.l Map_obj5F+$5F000000
0001DC38 0000 0400                  	dc.b 0,	0, 4, 0
0001DC3C 6001 262A                  	dc.l Map_obj60+$60000000
0001DC40 0000 2429                  	dc.b 0,	0, $24,	$29
0001DC44 7901 794A                  	dc.l Map_obj79+$79000000
0001DC48 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC4C                            	even
0001DC4C                            	even
0001DC4C                            
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C                            ; Debug	list - Spring Yard
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C                            Debug_SYZ:
0001DC4C                            	include "_inc\Debug list - SYZ.asm"
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C                            ; Debug	list - Spring Yard
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C 000F                       	dc.w $F
0001DC4E 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DC52 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC56 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DC5A 0000 0680                  	dc.b 0,	0, 6, $80
0001DC5E 3600 D75A                  	dc.l Map_obj36+$36000000
0001DC62 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC66 4100 E486                  	dc.l Map_obj41+$41000000
0001DC6A 0000 0523                  	dc.b 0,	0, 5, $23
0001DC6E 4300 E90C                  	dc.l Map_obj43+$43000000
0001DC72 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC76 1200 F0EA                  	dc.l Map_obj12+$12000000
0001DC7A 0000 0000                  	dc.b 0,	0, 0, 0
0001DC7E 4700 F266                  	dc.l Map_obj47+$47000000
0001DC82 0000 0380                  	dc.b 0,	0, 3, $80
0001DC86 1F00 9DC8                  	dc.l Map_obj1F+$1F000000
0001DC8A 0000 0400                  	dc.b 0,	0, 4, 0
0001DC8E 2200 A084                  	dc.l Map_obj22+$22000000
0001DC92 0000 0444                  	dc.b 0,	0, 4, $44
0001DC96 5001 009A                  	dc.l Map_obj50+$50000000
0001DC9A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC9E 1800 8730                  	dc.l Map_obj18a+$18000000
0001DCA2 0000 4000                  	dc.b 0,	0, $40,	0
0001DCA6 5601 0E62                  	dc.l Map_obj56+$56000000
0001DCAA 0000 4000                  	dc.b 0,	0, $40,	0
0001DCAE 3200 C566                  	dc.l Map_obj32+$32000000
0001DCB2 0000 0513                  	dc.b 0,	0, 5, $13
0001DCB6 7801 75C4                  	dc.l Map_obj78+$78000000
0001DCBA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCBE 7901 794A                  	dc.l Map_obj79+$79000000
0001DCC2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCC6                            	even
0001DCC6                            	even
0001DCC6                            
0001DCC6                            ; ---------------------------------------------------------------------------
0001DCC6                            ; Debug	list - Scrap Brain
0001DCC6                            ; ---------------------------------------------------------------------------
0001DCC6                            Debug_SBZ:
0001DCC6                            	include "_inc\Debug list - SBZ.asm"
0001DCC6                            ; ---------------------------------------------------------------------------
0001DCC6                            ; Debug	list - Scrap Brain
0001DCC6                            ; ---------------------------------------------------------------------------
0001DCC6 001D                       	dc.w $1D
0001DCC8 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DCCC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCD0 2600 ABD6                  	dc.l Map_obj26+$26000000
0001DCD4 0000 0680                  	dc.b 0,	0, 6, $80
0001DCD8 5F01 2374                  	dc.l Map_obj5F+$5F000000
0001DCDC 0000 0400                  	dc.b 0,	0, 4, 0
0001DCE0 6001 262A                  	dc.l Map_obj60+$60000000
0001DCE4 0000 0429                  	dc.b 0,	0, 4, $29
0001DCE8 7801 75C4                  	dc.l Map_obj78+$78000000
0001DCEC 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DCF0 1501 11FE                  	dc.l Map_obj15b+$15000000
0001DCF4 0702 4391                  	dc.b 7,	2, $43,	$91
0001DCF8 6701 5ED8                  	dc.l Map_obj67+$67000000
0001DCFC E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD00 5201 07AC                  	dc.l Map_obj52+$52000000
0001DD04 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DD08 3200 C566                  	dc.l Map_obj32+$32000000
0001DD0C 0000 0513                  	dc.b 0,	0, 5, $13
0001DD10 6901 6132                  	dc.l Map_obj69+$69000000
0001DD14 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD18 6901 618C                  	dc.l Map_obj69a+$69000000
0001DD1C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD20 6A01 63EA                  	dc.l Map_obj6A+$6A000000
0001DD24 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD28 5300 8D7C                  	dc.l Map_obj53+$53000000
0001DD2C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD30 5201 07AC                  	dc.l Map_obj52+$52000000
0001DD34 3903 4460                  	dc.b $39, 3, $44, $60
0001DD38 6B01 67BA                  	dc.l Map_obj6B+$6B000000
0001DD3C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DD40 2A00 9022                  	dc.l Map_obj2A+$2A000000
0001DD44 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD48 6B01 67BA                  	dc.l Map_obj6B+$6B000000
0001DD4C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DD50 6A01 63EA                  	dc.l Map_obj6A+$6A000000
0001DD54 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DD58 6B01 67BA                  	dc.l Map_obj6B+$6B000000
0001DD5C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DD60 6A01 63EA                  	dc.l Map_obj6A+$6A000000
0001DD64 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DD68 6B01 67BA                  	dc.l Map_obj6B+$6B000000
0001DD6C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DD70 6C01 697C                  	dc.l Map_obj6C+$6C000000
0001DD74 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DD78 6D00 ED5C                  	dc.l Map_obj6D+$6D000000
0001DD7C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DD80 6D00 ED5C                  	dc.l Map_obj6D+$6D000000
0001DD84 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DD88 6E01 6A32                  	dc.l Map_obj6E+$6E000000
0001DD8C 0400 047E                  	dc.b 4,	0, 4, $7E
0001DD90 7001 6E88                  	dc.l Map_obj70+$70000000
0001DD94 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DD98 7101 1C0A                  	dc.l Map_obj71+$71000000
0001DD9C 1100 8680                  	dc.b $11, 0, $86, $80
0001DDA0 1E00 94E0                  	dc.l Map_obj1E+$1E000000
0001DDA4 0400 2302                  	dc.b 4,	0, $23,	2
0001DDA8 7901 794A                  	dc.l Map_obj79+$79000000
0001DDAC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDB0                            	even
0001DDB0                            	even
0001DDB0                            
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Debug	list - ending sequence / special stage
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            Debug_Ending:
0001DDB0                            	include "_inc\Debug list - Ending and SS.asm"
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Debug	list - ending sequence / special stage
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0 000D                       	dc.w $D
0001DDB2 2500 A5D0                  	dc.l Map_obj25+$25000000
0001DDB6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDBA 4700 F266                  	dc.l Map_obj47+$47000000
0001DDBE 0000 0380                  	dc.b 0,	0, 3, $80
0001DDC2 2800 9AFA                  	dc.l Map_obj28a+$28000000
0001DDC6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DDCA 2800 9AFA                  	dc.l Map_obj28a+$28000000
0001DDCE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DDD2 2800 9AFA                  	dc.l Map_obj28a+$28000000
0001DDD6 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DDDA 2800 9AE2                  	dc.l Map_obj28+$28000000
0001DDDE 0D00 0553                  	dc.b $D, 0, 5, $53
0001DDE2 2800 9AE2                  	dc.l Map_obj28+$28000000
0001DDE6 0E00 0553                  	dc.b $E, 0, 5, $53
0001DDEA 2800 9AE2                  	dc.l Map_obj28+$28000000
0001DDEE 0F00 0573                  	dc.b $F, 0, 5, $73
0001DDF2 2800 9AE2                  	dc.l Map_obj28+$28000000
0001DDF6 1000 0573                  	dc.b $10, 0, 5,	$73
0001DDFA 2800 9AFA                  	dc.l Map_obj28a+$28000000
0001DDFE 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE02 2800 9B12                  	dc.l Map_obj28b+$28000000
0001DE06 1200 0593                  	dc.b $12, 0, 5,	$93
0001DE0A 2800 9AFA                  	dc.l Map_obj28a+$28000000
0001DE0E 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE12 2800 9B12                  	dc.l Map_obj28b+$28000000
0001DE16 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE1A                            	even
0001DE1A                            	even
0001DE1A                            
0001DE1A                            ; ---------------------------------------------------------------------------
0001DE1A                            ; Main level load blocks
0001DE1A                            ; ---------------------------------------------------------------------------
0001DE1A                            MainLoadBlocks:
0001DE1A                            	include "_inc\Main level load blocks.asm"
0001DE1A                            ; ---------------------------------------------------------------------------
0001DE1A                            ; Main level load blocks
0001DE1A                            ;
0001DE1A                            ; ===FORMAT===
0001DE1A                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE1A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE1A                            ; 256x256 mappings
0001DE1A                            ; blank, music (unused), pal index (unused), pal index
0001DE1A                            ; ---------------------------------------------------------------------------
0001DE1A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE1E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE22 0000 0000                  	dc.l Blk256_GHZ
0001DE26 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE2A 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE2E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE32 0000 0000                  	dc.l Blk256_LZ
0001DE36 0082 0505                  	dc.b 0,	$82, 5,	5
0001DE3A 0000 0000                  	dc.l Nem_MZ+$8000000
0001DE3E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DE42 0000 0000                  	dc.l Blk256_MZ
0001DE46 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE4A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE4E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DE52 0000 0000                  	dc.l Blk256_SLZ
0001DE56 0084 0707                  	dc.b 0,	$84, 7,	7
0001DE5A 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DE5E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DE62 0000 0000                  	dc.l Blk256_SYZ
0001DE66 0085 0808                  	dc.b 0,	$85, 8,	8
0001DE6A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DE6E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DE72 0000 0000                  	dc.l Blk256_SBZ
0001DE76 0086 0909                  	dc.b 0,	$86, 9,	9
0001DE7A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DE7E 0000 0000                  	dc.l Blk16_GHZ
0001DE82 0000 0000                  	dc.l Blk256_GHZ
0001DE86 0086 1313                  	dc.b 0,	$86, $13, $13
0001DE8A                            	even
0001DE8A                            	even
0001DE8A                            
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ; Pattern load cues
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ArtLoadCues:
0001DE8A                            	include "_inc\Pattern load cues.asm"
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ; Pattern load cues - index
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DE8E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DE92 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DE96 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DE9A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DE9E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DEA2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DEA6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DEAA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DEAE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DEB2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DEB6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DEBA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DEBE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DEC2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DEC6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DECA 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DECC                            ; ---------------------------------------------------------------------------
0001DECC                            ; Pattern load cues - standard block 1
0001DECC                            ; ---------------------------------------------------------------------------
0001DECC 0004                       PLC_Main:	dc.w 4
0001DECE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DED2 F400                       		dc.w $F400
0001DED4 0000 0000                  		dc.l Nem_Hud		; HUD
0001DED8 D940                       		dc.w $D940
0001DEDA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DEDE FA80                       		dc.w $FA80
0001DEE0 0000 0000                  		dc.l Nem_Ring		; rings
0001DEE4 F640                       		dc.w $F640
0001DEE6 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DEEA F2E0                       		dc.w $F2E0
0001DEEC                            ; ---------------------------------------------------------------------------
0001DEEC                            ; Pattern load cues - standard block 2
0001DEEC                            ; ---------------------------------------------------------------------------
0001DEEC 0002                       PLC_Main2:	dc.w 2
0001DEEE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DEF2 D000                       		dc.w $D000
0001DEF4 0000 0000                  		dc.l Nem_Shield		; shield
0001DEF8 A820                       		dc.w $A820
0001DEFA 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DEFE AB80                       		dc.w $AB80
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00                            ; Pattern load cues - explosion
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00 0000                       PLC_Explode:	dc.w 0
0001DF02 0000 0000                  		dc.l Nem_Explode	; explosion
0001DF06 B400                       		dc.w $B400
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Pattern load cues - game/time	over
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08 0000                       PLC_GameOver:	dc.w 0
0001DF0A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DF0E ABC0                       		dc.w $ABC0
0001DF10                            ; ---------------------------------------------------------------------------
0001DF10                            ; Pattern load cues - Green Hill
0001DF10                            ; ---------------------------------------------------------------------------
0001DF10 000B                       PLC_GHZ:	dc.w $B
0001DF12 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF16 0000                       		dc.w 0
0001DF18 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF1C 39A0                       		dc.w $39A0
0001DF1E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF22 6B00                       		dc.w $6B00
0001DF24 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF28 7A00                       		dc.w $7A00
0001DF2A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF2E 8000                       		dc.w $8000
0001DF30 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF34 8880                       		dc.w $8880
0001DF36 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DF3A 8F60                       		dc.w $8F60
0001DF3C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DF40 9360                       		dc.w $9360
0001DF42 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DF46 9E00                       		dc.w $9E00
0001DF48 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF4C A360                       		dc.w $A360
0001DF4E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF52 A460                       		dc.w $A460
0001DF54 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF58 A660                       		dc.w $A660
0001DF5A 0005                       PLC_GHZ2:	dc.w 5
0001DF5C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF60 7000                       		dc.w $7000
0001DF62 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DF66 71C0                       		dc.w $71C0
0001DF68 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DF6C 7300                       		dc.w $7300
0001DF6E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DF72 7540                       		dc.w $7540
0001DF74 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DF78 A1E0                       		dc.w $A1E0
0001DF7A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DF7E 6980                       		dc.w $6980
0001DF80                            ; ---------------------------------------------------------------------------
0001DF80                            ; Pattern load cues - Labyrinth
0001DF80                            ; ---------------------------------------------------------------------------
0001DF80 000B                       PLC_LZ:		dc.w $B
0001DF82 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DF86 0000                       		dc.w 0
0001DF88 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DF8C 3C00                       		dc.w $3C00
0001DF8E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DF92 3E00                       		dc.w $3E00
0001DF94 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DF98 4B20                       		dc.w $4B20
0001DF9A 0000 0000                  		dc.l Nem_Water		; water	surface
0001DF9E 6000                       		dc.w $6000
0001DFA0 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DFA4 6200                       		dc.w $6200
0001DFA6 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DFAA 6500                       		dc.w $6500
0001DFAC 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DFB0 6900                       		dc.w $6900
0001DFB2 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DFB6 7780                       		dc.w $7780
0001DFB8 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DFBC 7880                       		dc.w $7880
0001DFBE 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DFC2 7980                       		dc.w $7980
0001DFC4 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DFC8 94C0                       		dc.w $94C0
0001DFCA 000C                       PLC_LZ2:	dc.w $C
0001DFCC 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DFD0 7BC0                       		dc.w $7BC0
0001DFD2 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DFD6 7CC0                       		dc.w $7CC0
0001DFD8 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DFDC 7EC0                       		dc.w $7EC0
0001DFDE 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DFE2 5D20                       		dc.w $5D20
0001DFE4 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DFE8 8800                       		dc.w $8800
0001DFEA 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DFEE 89E0                       		dc.w $89E0
0001DFF0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DFF4 8CE0                       		dc.w $8CE0
0001DFF6 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DFFA 90C0                       		dc.w $90C0
0001DFFC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E000 A1E0                       		dc.w $A1E0
0001E002 0000 0000                  		dc.l Nem_Cork		; cork block
0001E006 A000                       		dc.w $A000
0001E008 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E00C A360                       		dc.w $A360
0001E00E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E012 A460                       		dc.w $A460
0001E014 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E018 A660                       		dc.w $A660
0001E01A                            ; ---------------------------------------------------------------------------
0001E01A                            ; Pattern load cues - Marble
0001E01A                            ; ---------------------------------------------------------------------------
0001E01A 0009                       PLC_MZ:		dc.w 9
0001E01C 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E020 0000                       		dc.w 0
0001E022 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E026 6000                       		dc.w $6000
0001E028 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E02C 68A0                       		dc.w $68A0
0001E02E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E032 7000                       		dc.w $7000
0001E034 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E038 71C0                       		dc.w $71C0
0001E03A 0000 0000                  		dc.l Nem_Lava		; lava
0001E03E 7500                       		dc.w $7500
0001E040 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E044 8880                       		dc.w $8880
0001E046 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E04A 8F60                       		dc.w $8F60
0001E04C 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E050 9700                       		dc.w $9700
0001E052 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E056 9FE0                       		dc.w $9FE0
0001E058 0004                       PLC_MZ2:	dc.w 4
0001E05A 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E05E A260                       		dc.w $A260
0001E060 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E064 A360                       		dc.w $A360
0001E066 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E06A A460                       		dc.w $A460
0001E06C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E070 A660                       		dc.w $A660
0001E072 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E076 5700                       		dc.w $5700
0001E078                            ; ---------------------------------------------------------------------------
0001E078                            ; Pattern load cues - Star Light
0001E078                            ; ---------------------------------------------------------------------------
0001E078 0008                       PLC_SLZ:	dc.w 8
0001E07A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E07E 0000                       		dc.w 0
0001E080 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E084 8000                       		dc.w $8000
0001E086 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E08A 8520                       		dc.w $8520
0001E08C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E090 9000                       		dc.w $9000
0001E092 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E096 9C00                       		dc.w $9C00
0001E098 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E09C A260                       		dc.w $A260
0001E09E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0A2 A360                       		dc.w $A360
0001E0A4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0A8 A460                       		dc.w $A460
0001E0AA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0AE A660                       		dc.w $A660
0001E0B0 0005                       PLC_SLZ2:	dc.w 5
0001E0B2 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E0B6 6E80                       		dc.w $6E80
0001E0B8 0000 0000                  		dc.l Nem_Fan		; fan
0001E0BC 7400                       		dc.w $7400
0001E0BE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E0C2 7980                       		dc.w $7980
0001E0C4 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E0C8 7B80                       		dc.w $7B80
0001E0CA 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E0CE 9B00                       		dc.w $9B00
0001E0D0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E0D4 9E00                       		dc.w $9E00
0001E0D6                            ; ---------------------------------------------------------------------------
0001E0D6                            ; Pattern load cues - Spring Yard
0001E0D6                            ; ---------------------------------------------------------------------------
0001E0D6 0004                       PLC_SYZ:	dc.w 4
0001E0D8 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E0DC 0000                       		dc.w 0
0001E0DE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E0E2 8000                       		dc.w $8000
0001E0E4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0E8 8880                       		dc.w $8880
0001E0EA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0EE 8F60                       		dc.w $8F60
0001E0F0 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E0F4 9700                       		dc.w $9700
0001E0F6 0007                       PLC_SYZ2:	dc.w 7
0001E0F8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0FC 7000                       		dc.w $7000
0001E0FE 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E102 72C0                       		dc.w $72C0
0001E104 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E108 7740                       		dc.w $7740
0001E10A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E10E 9FE0                       		dc.w $9FE0
0001E110 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E114 A1E0                       		dc.w $A1E0
0001E116 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E11A A360                       		dc.w $A360
0001E11C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E120 A460                       		dc.w $A460
0001E122 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E126 A660                       		dc.w $A660
0001E128                            ; ---------------------------------------------------------------------------
0001E128                            ; Pattern load cues - Scrap Brain
0001E128                            ; ---------------------------------------------------------------------------
0001E128 000B                       PLC_SBZ:	dc.w $B
0001E12A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E12E 0000                       		dc.w 0
0001E130 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E134 5800                       		dc.w $5800
0001E136 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E13A 5D00                       		dc.w $5D00
0001E13C 0000 0000                  		dc.l Nem_Girder		; girder
0001E140 5E00                       		dc.w $5E00
0001E142 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E146 6040                       		dc.w $6040
0001E148 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E14C 6880                       		dc.w $6880
0001E14E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E152 6900                       		dc.w $6900
0001E154 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E158 7220                       		dc.w $7220
0001E15A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E15E 76A0                       		dc.w $76A0
0001E160 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E164 7B20                       		dc.w $7B20
0001E166 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E16A 7EA0                       		dc.w $7EA0
0001E16C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E170 9860                       		dc.w $9860
0001E172 000C                       PLC_SBZ2:	dc.w $C
0001E174 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E178 5600                       		dc.w $5600
0001E17A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E17E 8000                       		dc.w $8000
0001E180 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E184 8520                       		dc.w $8520
0001E186 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E18A 8C00                       		dc.w $8C00
0001E18C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E190 8DE0                       		dc.w $8DE0
0001E192 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E196 8FC0                       		dc.w $8FC0
0001E198 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E19C 9240                       		dc.w $9240
0001E19E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1A2 7F20                       		dc.w $7F20
0001E1A4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E1A8 9BE0                       		dc.w $9BE0
0001E1AA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1AE A1E0                       		dc.w $A1E0
0001E1B0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1B4 A360                       		dc.w $A360
0001E1B6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1BA A460                       		dc.w $A460
0001E1BC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1C0 A660                       		dc.w $A660
0001E1C2                            ; ---------------------------------------------------------------------------
0001E1C2                            ; Pattern load cues - title card
0001E1C2                            ; ---------------------------------------------------------------------------
0001E1C2 0000                       PLC_TitleCard:	dc.w 0
0001E1C4 0000 0000                  		dc.l Nem_TitleCard
0001E1C8 B000                       		dc.w $B000
0001E1CA                            ; ---------------------------------------------------------------------------
0001E1CA                            ; Pattern load cues - act 3 boss
0001E1CA                            ; ---------------------------------------------------------------------------
0001E1CA 0005                       PLC_Boss:	dc.w 5
0001E1CC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E1D0 8000                       		dc.w $8000
0001E1D2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E1D6 8D80                       		dc.w $8D80
0001E1D8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E1DC 93A0                       		dc.w $93A0
0001E1DE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E1E2 A300                       		dc.w $A300
0001E1E4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E1E8 A300                       		dc.w $A300
0001E1EA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E1EE A540                       		dc.w $A540
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0                            ; Pattern load cues - act 1/2 signpost
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0 0002                       PLC_Signpost:	dc.w 2
0001E1F2 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E1F6 D000                       		dc.w $D000
0001E1F8 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E1FC 96C0                       		dc.w $96C0
0001E1FE 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E202 8C40                       		dc.w $8C40
0001E204                            ; ---------------------------------------------------------------------------
0001E204                            ; Pattern load cues - beta special stage warp effect
0001E204                            ; ---------------------------------------------------------------------------
0001E204 0000                       PLC_Warp:	dc.w 0
0001E206 0000 0000                  		dc.l Nem_Warp
0001E20A A820                       		dc.w $A820
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C                            ; Pattern load cues - special stage
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C 0010                       PLC_SpeStage:	dc.w $10
0001E20E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E212 0000                       		dc.w 0
0001E214 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E218 0A20                       		dc.w $A20
0001E21A 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E21E 2840                       		dc.w $2840
0001E220 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E224 4760                       		dc.w $4760
0001E226 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E22A 4A20                       		dc.w $4A20
0001E22C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E230 4C60                       		dc.w $4C60
0001E232 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E236 5E00                       		dc.w $5E00
0001E238 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E23C 6E00                       		dc.w $6E00
0001E23E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E242 7E00                       		dc.w $7E00
0001E244 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E248 8E00                       		dc.w $8E00
0001E24A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E24E 9E00                       		dc.w $9E00
0001E250 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E254 AE00                       		dc.w $AE00
0001E256 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E25A BE00                       		dc.w $BE00
0001E25C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E260 EE00                       		dc.w $EE00
0001E262 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E266 F2E0                       		dc.w $F2E0
0001E268 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E26C F400                       		dc.w $F400
0001E26E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E272 F520                       		dc.w $F520
0001E274 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E278 F2E0                       		dc.w $F2E0
0001E27A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E27E F400                       		dc.w $F400
0001E280 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E284 F520                       		dc.w $F520
0001E286                            ; ---------------------------------------------------------------------------
0001E286                            ; Pattern load cues - GHZ animals
0001E286                            ; ---------------------------------------------------------------------------
0001E286 0001                       PLC_GHZAnimals:	dc.w 1
0001E288 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E28C B000                       		dc.w $B000
0001E28E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E292 B240                       		dc.w $B240
0001E294                            ; ---------------------------------------------------------------------------
0001E294                            ; Pattern load cues - LZ animals
0001E294                            ; ---------------------------------------------------------------------------
0001E294 0001                       PLC_LZAnimals:	dc.w 1
0001E296 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E29A B000                       		dc.w $B000
0001E29C 0000 0000                  		dc.l Nem_Seal		; seal
0001E2A0 B240                       		dc.w $B240
0001E2A2                            ; ---------------------------------------------------------------------------
0001E2A2                            ; Pattern load cues - MZ animals
0001E2A2                            ; ---------------------------------------------------------------------------
0001E2A2 0001                       PLC_MZAnimals:	dc.w 1
0001E2A4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E2A8 B000                       		dc.w $B000
0001E2AA 0000 0000                  		dc.l Nem_Seal		; seal
0001E2AE B240                       		dc.w $B240
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0                            ; Pattern load cues - SLZ animals
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0 0001                       PLC_SLZAnimals:	dc.w 1
0001E2B2 0000 0000                  		dc.l Nem_Pig		; pig
0001E2B6 B000                       		dc.w $B000
0001E2B8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2BC B240                       		dc.w $B240
0001E2BE                            ; ---------------------------------------------------------------------------
0001E2BE                            ; Pattern load cues - SYZ animals
0001E2BE                            ; ---------------------------------------------------------------------------
0001E2BE 0001                       PLC_SYZAnimals:	dc.w 1
0001E2C0 0000 0000                  		dc.l Nem_Pig		; pig
0001E2C4 B000                       		dc.w $B000
0001E2C6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2CA B240                       		dc.w $B240
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC                            ; Pattern load cues - SBZ animals
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC 0001                       PLC_SBZAnimals:	dc.w 1
0001E2CE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2D2 B000                       		dc.w $B000
0001E2D4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2D8 B240                       		dc.w $B240
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA                            ; Pattern load cues - special stage results screen
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA 0001                       PLC_SpeStResult:dc.w 1
0001E2DC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E2E0 A820                       		dc.w $A820
0001E2E2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E2E6 AA20                       		dc.w $AA20
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8                            ; Pattern load cues - ending sequence
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8 000E                       PLC_Ending:	dc.w $E
0001E2EA 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2EE 0000                       		dc.w 0
0001E2F0 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2F4 39A0                       		dc.w $39A0
0001E2F6 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2FA 6B00                       		dc.w $6B00
0001E2FC 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E300 7400                       		dc.w $7400
0001E302 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E306 78A0                       		dc.w $78A0
0001E308 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E30C 7C20                       		dc.w $7C20
0001E30E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E312 A480                       		dc.w $A480
0001E314 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E318 AA60                       		dc.w $AA60
0001E31A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E31E ACA0                       		dc.w $ACA0
0001E320 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E324 AE60                       		dc.w $AE60
0001E326 0000 0000                  		dc.l Nem_Seal		; seal
0001E32A B0A0                       		dc.w $B0A0
0001E32C 0000 0000                  		dc.l Nem_Pig		; pig
0001E330 B260                       		dc.w $B260
0001E332 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E336 B4A0                       		dc.w $B4A0
0001E338 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E33C B660                       		dc.w $B660
0001E33E 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E342 B8A0                       		dc.w $B8A0
0001E344                            ; ---------------------------------------------------------------------------
0001E344                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E344                            ; ---------------------------------------------------------------------------
0001E344 0002                       PLC_TryAgain:	dc.w 2
0001E346 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E34A 78A0                       		dc.w $78A0
0001E34C 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E350 7C20                       		dc.w $7C20
0001E352 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E356 B400                       		dc.w $B400
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            ; Pattern load cues - Eggman on SBZ 2
0001E358                            ; ---------------------------------------------------------------------------
0001E358 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E35A 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E35E A300                       		dc.w $A300
0001E360 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E364 8000                       		dc.w $8000
0001E366 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E36A 9400                       		dc.w $9400
0001E36C                            ; ---------------------------------------------------------------------------
0001E36C                            ; Pattern load cues - final boss
0001E36C                            ; ---------------------------------------------------------------------------
0001E36C 0004                       PLC_FZBoss:	dc.w 4
0001E36E 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E372 7400                       		dc.w $7400
0001E374 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E378 6000                       		dc.w $6000
0001E37A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E37E 8000                       		dc.w $8000
0001E380 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E384 8E00                       		dc.w $8E00
0001E386 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E38A A540                       		dc.w $A540
0001E38C                            ; ---------------------------------------------------------------------------
0001E38C                            ; Pattern load cues - Teto boss
0001E38C                            ; ---------------------------------------------------------------------------
0001E38C 0002                       PLC_TetoBoss:	dc.w 2
0001E38E 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E392 8000                       		dc.w $8000
0001E394 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E398 93A0                       		dc.w $93A0
0001E39A 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E39E 9000                       		dc.w $9000
0001E3A0                            		even
0001E3A0                            		even
0001E3A0                            
0001E3A0                            		incbin	misc\padding.bin
0001E48E                            		even
0001E48E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E8DE                            		even
0001E8DE                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E970                            		even
0001E970                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EAB2                            		even
0001EAB2                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB00                            		even
0001EB00                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC14                            		even
0001EC14                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FADE                            		even
0001FADE                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023BE4                            		even
00023BE4                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C18                            		even
00023C18                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023CD6                            		even
00023CD6                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002417E                            		even
0002417E                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000241DC                            		even
000241DC                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024DE2                            		even
00024DE2                            ; ---------------------------------------------------------------------------
00024DE2                            ; Sprite mappings - Sonic
00024DE2                            ; ---------------------------------------------------------------------------
00024DE2                            Map_Sonic:
00024DE2                            	include "_maps\Sonic.asm"
00024DE2                            Map_6d2d:
00024DE2 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024DE4 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024DE6 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024DE8 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024DEA 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024DEC 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024DEE 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024DF0 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024DF2 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024DF4 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024DF6 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024DF8 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024DFA 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024DFC 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024DFE 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024E00 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024E02 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024E04 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024E06 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024E08 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024E0A 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024E0C 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024E0E 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024E10 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024E12 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024E14 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024E16 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024E18 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024E1A 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024E1C 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024E1E 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024E20 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024E22 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024E24 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024E26 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024E28 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024E2A 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024E2C 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024E2E 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024E30 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024E32 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024E34 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024E36 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024E38 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024E3A 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024E3C 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024E3E 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024E40 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024E42 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024E44 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024E46 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024E48 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024E4A 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024E4C 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024E4E 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024E50 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024E52 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024E54 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024E56 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024E58 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024E5A 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024E5C 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024E5E 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024E60 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024E62 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024E64 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024E66 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024E68 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024E6A 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024E6C 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024E6E 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024E70 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024E72 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024E74 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024E76 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024E78 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024E7A 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024E7C 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024E7E 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024E80 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024E82 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024E84 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024E86 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024E88 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024E8A 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024E8C 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024E8E 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024E90 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024E92 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024E94 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024E96 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024E98 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024E9A 00                         Map_6d2d_B8: 	dc.b $0
00024E9B 02                         Map_6d2d_B9: 	dc.b $2
00024E9C ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024EA1 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024EA6 03                         Map_6d2d_C4: 	dc.b $3
00024EA7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EAC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EB1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EB6 03                         Map_6d2d_D4: 	dc.b $3
00024EB7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EBC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EC1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EC6 03                         Map_6d2d_E4: 	dc.b $3
00024EC7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024ECC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024ED1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024ED6 03                         Map_6d2d_F4: 	dc.b $3
00024ED7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024EDC 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024EE1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EE6 04                         Map_6d2d_104: 	dc.b $4
00024EE7 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024EEC FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024EF1 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024EF6 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024EFB 02                         Map_6d2d_119: 	dc.b $2
00024EFC EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F01 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024F06 02                         Map_6d2d_124: 	dc.b $2
00024F07 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024F0C FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024F11 04                         Map_6d2d_12F: 	dc.b $4
00024F12 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F17 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F1C FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F21 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F26 02                         Map_6d2d_144: 	dc.b $2
00024F27 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F2C EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024F31 03                         Map_6d2d_14F: 	dc.b $3
00024F32 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024F37 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024F3C 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024F41 05                         Map_6d2d_15F: 	dc.b $5
00024F42 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F47 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024F4C FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024F51 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024F56 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024F5B 06                         Map_6d2d_179: 	dc.b $6
00024F5C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F61 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024F66 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024F6B 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024F70 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024F75 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024F7A 04                         Map_6d2d_198: 	dc.b $4
00024F7B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024F80 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024F85 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024F8A 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024F8F 05                         Map_6d2d_1AD: 	dc.b $5
00024F90 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F95 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024F9A FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024F9F 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024FA4 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024FA9 04                         Map_6d2d_1C7: 	dc.b $4
00024FAA EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FAF EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FB4 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024FB9 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024FBE 05                         Map_6d2d_1DC: 	dc.b $5
00024FBF ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FC4 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FC9 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024FCE FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024FD3 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024FD8 04                         Map_6d2d_1F6: 	dc.b $4
00024FD9 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024FDE EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024FE3 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024FE8 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024FED 02                         Map_6d2d_20B: 	dc.b $2
00024FEE F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024FF3 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024FF8 02                         Map_6d2d_216: 	dc.b $2
00024FF9 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024FFE F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025003 04                         Map_6d2d_221: 	dc.b $4
00025004 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00025009 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
0002500E FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025013 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025018 02                         Map_6d2d_236: 	dc.b $2
00025019 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002501E F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025023 03                         Map_6d2d_241: 	dc.b $3
00025024 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025029 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002502E F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025033 06                         Map_6d2d_251: 	dc.b $6
00025034 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025039 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002503E F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025043 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025048 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002504D FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025052 06                         Map_6d2d_270: 	dc.b $6
00025053 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025058 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002505D EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025062 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025067 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002506C 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025071 04                         Map_6d2d_28F: 	dc.b $4
00025072 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025077 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002507C EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025081 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025086 05                         Map_6d2d_2A4: 	dc.b $5
00025087 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002508C ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025091 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025096 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002509B 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000250A0 04                         Map_6d2d_2BE: 	dc.b $4
000250A1 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250A6 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000250AB EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000250B0 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000250B5 05                         Map_6d2d_2D3: 	dc.b $5
000250B6 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250BB EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000250C0 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000250C5 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250CA 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000250CF 02                         Map_6d2d_2ED: 	dc.b $2
000250D0 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250D5 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250DA 02                         Map_6d2d_2F8: 	dc.b $2
000250DB EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250E0 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250E5 02                         Map_6d2d_303: 	dc.b $2
000250E6 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250EB FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250F0 02                         Map_6d2d_30E: 	dc.b $2
000250F1 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250F6 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250FB 04                         Map_6d2d_319: 	dc.b $4
000250FC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025101 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025106 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002510B FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025110 03                         Map_6d2d_32E: 	dc.b $3
00025111 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025116 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002511B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025120 04                         Map_6d2d_33E: 	dc.b $4
00025121 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025126 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002512B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025130 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025135 03                         Map_6d2d_353: 	dc.b $3
00025136 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002513B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025140 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025145 02                         Map_6d2d_363: 	dc.b $2
00025146 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002514B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025150 02                         Map_6d2d_36E: 	dc.b $2
00025151 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025156 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002515B 02                         Map_6d2d_379: 	dc.b $2
0002515C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025161 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025166 02                         Map_6d2d_384: 	dc.b $2
00025167 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002516C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025171 04                         Map_6d2d_38F: 	dc.b $4
00025172 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025177 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002517C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025181 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025186 02                         Map_6d2d_3A4: 	dc.b $2
00025187 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002518C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025191 04                         Map_6d2d_3AF: 	dc.b $4
00025192 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025197 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002519C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251A1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251A6 02                         Map_6d2d_3C4: 	dc.b $2
000251A7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251AC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251B1 01                         Map_6d2d_3CF: 	dc.b $1
000251B2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251B7 01                         Map_6d2d_3D5: 	dc.b $1
000251B8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251BD 01                         Map_6d2d_3DB: 	dc.b $1
000251BE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251C3 01                         Map_6d2d_3E1: 	dc.b $1
000251C4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251C9 01                         Map_6d2d_3E7: 	dc.b $1
000251CA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251CF 02                         Map_6d2d_3ED: 	dc.b $2
000251D0 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000251D5 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000251DA 01                         Map_6d2d_3F8: 	dc.b $1
000251DB F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251E0 02                         Map_6d2d_3FE: 	dc.b $2
000251E1 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000251E6 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000251EB 01                         Map_6d2d_409: 	dc.b $1
000251EC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251F1 02                         Map_6d2d_40F: 	dc.b $2
000251F2 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251F7 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000251FC 04                         Map_6d2d_41A: 	dc.b $4
000251FD ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025202 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025207 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002520C 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025211 06                         Map_6d2d_42F: 	dc.b $6
00025212 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025217 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002521C 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025221 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025226 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002522B F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025230 02                         Map_6d2d_44E: 	dc.b $2
00025231 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025236 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002523B 02                         Map_6d2d_459: 	dc.b $2
0002523C 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025241 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025246 04                         Map_6d2d_464: 	dc.b $4
00025247 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002524C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025251 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025256 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002525B 02                         Map_6d2d_479: 	dc.b $2
0002525C F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025261 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025266 03                         Map_6d2d_484: 	dc.b $3
00025267 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002526C FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025271 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025276 04                         Map_6d2d_494: 	dc.b $4
00025277 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002527C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025281 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025286 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002528B 03                         Map_6d2d_4A9: 	dc.b $3
0002528C E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025291 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025296 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002529B 04                         Map_6d2d_4B9: 	dc.b $4
0002529C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252A1 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252A6 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252AB F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252B0 04                         Map_6d2d_4CE: 	dc.b $4
000252B1 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252B6 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252BB F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252C0 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252C5 05                         Map_6d2d_4E3: 	dc.b $5
000252C6 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252CB F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000252D0 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252D5 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252DA 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252DF 05                         Map_6d2d_4FD: 	dc.b $5
000252E0 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252E5 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000252EA 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252EF 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252F4 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252F9 02                         Map_6d2d_517: 	dc.b $2
000252FA ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000252FF 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025304 03                         Map_6d2d_522: 	dc.b $3
00025305 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002530A 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002530F 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025314 02                         Map_6d2d_532: 	dc.b $2
00025315 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002531A 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002531F 03                         Map_6d2d_53D: 	dc.b $3
00025320 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025325 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002532A 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002532F 02                         Map_6d2d_54D: 	dc.b $2
00025330 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025335 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002533A 03                         Map_6d2d_558: 	dc.b $3
0002533B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025340 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025345 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002534A 03                         Map_6d2d_568: 	dc.b $3
0002534B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025350 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025355 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002535A 05                         Map_6d2d_578: 	dc.b $5
0002535B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025360 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025365 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002536A 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002536F 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025374 05                         Map_6d2d_592: 	dc.b $5
00025375 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002537A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002537F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025384 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025389 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002538E 02                         Map_6d2d_5AC: 	dc.b $2
0002538F EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025394 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025399 03                         Map_6d2d_5B7: 	dc.b $3
0002539A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002539F F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000253A4 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000253A9 01                         Map_6d2d_5C7: 	dc.b $1
000253AA F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000253AF 01                         Map_6d2d_5CD: 	dc.b $1
000253B0 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000253B5 01                         Map_6d2d_5D3: 	dc.b $1
000253B6 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000253BB 04                         Map_6d2d_5D9: 	dc.b $4
000253BC F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000253C1 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000253C6 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000253CB 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000253D0 03                         Map_6d2d_5EE: 	dc.b $3
000253D1 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000253D6 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000253DB 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000253E0 03                         Map_6d2d_5FE: 	dc.b $3
000253E1 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000253E6 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000253EB 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000253F0 03                         Map_6d2d_60E: 	dc.b $3
000253F1 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000253F6 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000253FB 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025400 02                         Map_6d2d_61E: 	dc.b $2
00025401 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025406 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002540B 02                         Map_6d2d_629: 	dc.b $2
0002540C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025411 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025416 03                         Map_6d2d_634: 	dc.b $3
00025417 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002541C 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025421 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025426 02                         Map_6d2d_644: 	dc.b $2
00025427 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002542C EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025431 04                         Map_6d2d_64F: 	dc.b $4
00025432 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025437 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002543C F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025441 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025446                            	even
00025446                            	even
00025446                            
00025446                            ; ---------------------------------------------------------------------------
00025446                            ; Uncompressed graphics	loading	array for Sonic
00025446                            ; ---------------------------------------------------------------------------
00025446                            SonicDynPLC:
00025446                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025446                            DPLC_2d5b:
00025446 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025448 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
0002544A 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
0002544C 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002544E 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
00025450 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
00025452 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025454 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025456 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025458 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
0002545A 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
0002545C 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002545E 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
00025460 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
00025462 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025464 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025466 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025468 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
0002546A 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
0002546C 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002546E 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
00025470 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
00025472 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025474 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025476 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025478 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
0002547A 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
0002547C 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002547E 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
00025480 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
00025482 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025484 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025486 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025488 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
0002548A 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
0002548C 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002548E 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025490 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
00025492 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025494 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025496 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025498 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
0002549A 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
0002549C 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002549E 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
000254A0 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
000254A2 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
000254A4 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
000254A6 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
000254A8 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
000254AA 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
000254AC 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
000254AE 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
000254B0 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
000254B2 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
000254B4 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
000254B6 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
000254B8 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
000254BA 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
000254BC 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
000254BE 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
000254C0 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
000254C2 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
000254C4 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
000254C6 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
000254C8 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
000254CA 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
000254CC 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
000254CE 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
000254D0 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
000254D2 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
000254D4 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
000254D6 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
000254D8 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
000254DA 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
000254DC 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
000254DE 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
000254E0 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
000254E2 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
000254EA 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
000254EC 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000254EE 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000254F0 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000254F2 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000254F4 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000254F6 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000254F8 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000254FA 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000254FC 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000254FE 00                         DPLC_2d5b_B8: 	dc.b $0
000254FF 02                         DPLC_2d5b_B9: 	dc.b $2
00025500 F000                       	dc.b $F0, $0
00025502 1010                       	dc.b $10, $10
00025504 03                         DPLC_2d5b_BE: 	dc.b $3
00025505 5012                       	dc.b $50, $12
00025507 5018                       	dc.b $50, $18
00025509 201E                       	dc.b $20, $1E
0002550B 03                         DPLC_2d5b_C5: 	dc.b $3
0002550C 5021                       	dc.b $50, $21
0002550E 5018                       	dc.b $50, $18
00025510 201E                       	dc.b $20, $1E
00025512 03                         DPLC_2d5b_CC: 	dc.b $3
00025513 5021                       	dc.b $50, $21
00025515 5018                       	dc.b $50, $18
00025517 2027                       	dc.b $20, $27
00025519 03                         DPLC_2d5b_D3: 	dc.b $3
0002551A 802A                       	dc.b $80, $2A
0002551C 2033                       	dc.b $20, $33
0002551E 2036                       	dc.b $20, $36
00025520 04                         DPLC_2d5b_DA: 	dc.b $4
00025521 7039                       	dc.b $70, $39
00025523 5041                       	dc.b $50, $41
00025525 5047                       	dc.b $50, $47
00025527 104D                       	dc.b $10, $4D
00025529 02                         DPLC_2d5b_E3: 	dc.b $2
0002552A 7039                       	dc.b $70, $39
0002552C B04F                       	dc.b $B0, $4F
0002552E 02                         DPLC_2d5b_E8: 	dc.b $2
0002552F 505B                       	dc.b $50, $5B
00025531 8061                       	dc.b $80, $61
00025533 04                         DPLC_2d5b_ED: 	dc.b $4
00025534 505B                       	dc.b $50, $5B
00025536 506A                       	dc.b $50, $6A
00025538 5070                       	dc.b $50, $70
0002553A 1076                       	dc.b $10, $76
0002553C 02                         DPLC_2d5b_F6: 	dc.b $2
0002553D F4F0                       	dc.b $F4, $F0
0002553F 1500                       	dc.b $15, $0
00025541 03                         DPLC_2d5b_FB: 	dc.b $3
00025542 7039                       	dc.b $70, $39
00025544 3078                       	dc.b $30, $78
00025546 507C                       	dc.b $50, $7C
00025548 05                         DPLC_2d5b_102: 	dc.b $5
00025549 5082                       	dc.b $50, $82
0002554B 5088                       	dc.b $50, $88
0002554D 208E                       	dc.b $20, $8E
0002554F 5091                       	dc.b $50, $91
00025551 0097                       	dc.b $0, $97
00025553 06                         DPLC_2d5b_10D: 	dc.b $6
00025554 5082                       	dc.b $50, $82
00025556 1098                       	dc.b $10, $98
00025558 309A                       	dc.b $30, $9A
0002555A 509E                       	dc.b $50, $9E
0002555C 30A4                       	dc.b $30, $A4
0002555E 00A8                       	dc.b $0, $A8
00025560 04                         DPLC_2d5b_11A: 	dc.b $4
00025561 50A9                       	dc.b $50, $A9
00025563 10AF                       	dc.b $10, $AF
00025565 70B1                       	dc.b $70, $B1
00025567 20B9                       	dc.b $20, $B9
00025569 05                         DPLC_2d5b_123: 	dc.b $5
0002556A 50BC                       	dc.b $50, $BC
0002556C 30C2                       	dc.b $30, $C2
0002556E 70C6                       	dc.b $70, $C6
00025570 20CE                       	dc.b $20, $CE
00025572 10D1                       	dc.b $10, $D1
00025574 04                         DPLC_2d5b_12E: 	dc.b $4
00025575 50BC                       	dc.b $50, $BC
00025577 10D3                       	dc.b $10, $D3
00025579 70D5                       	dc.b $70, $D5
0002557B 20DD                       	dc.b $20, $DD
0002557D 05                         DPLC_2d5b_137: 	dc.b $5
0002557E 5082                       	dc.b $50, $82
00025580 1098                       	dc.b $10, $98
00025582 008E                       	dc.b $0, $8E
00025584 70E0                       	dc.b $70, $E0
00025586 20E8                       	dc.b $20, $E8
00025588 04                         DPLC_2d5b_142: 	dc.b $4
00025589 70EB                       	dc.b $70, $EB
0002558B 50F3                       	dc.b $50, $F3
0002558D 10F9                       	dc.b $10, $F9
0002558F 50FB                       	dc.b $50, $FB
00025591 02                         DPLC_2d5b_14B: 	dc.b $2
00025592 70EB                       	dc.b $70, $EB
00025594 B101                       	dc.b $B1, $1
00025596 02                         DPLC_2d5b_150: 	dc.b $2
00025597 510D                       	dc.b $51, $D
00025599 8113                       	dc.b $81, $13
0002559B 04                         DPLC_2d5b_155: 	dc.b $4
0002559C 510D                       	dc.b $51, $D
0002559E 511C                       	dc.b $51, $1C
000255A0 1122                       	dc.b $11, $22
000255A2 5124                       	dc.b $51, $24
000255A4 02                         DPLC_2d5b_15E: 	dc.b $2
000255A5 510D                       	dc.b $51, $D
000255A7 B12A                       	dc.b $B1, $2A
000255A9 03                         DPLC_2d5b_163: 	dc.b $3
000255AA 70EB                       	dc.b $70, $EB
000255AC 0101                       	dc.b $1, $1
000255AE 8136                       	dc.b $81, $36
000255B0 06                         DPLC_2d5b_16A: 	dc.b $6
000255B1 513F                       	dc.b $51, $3F
000255B3 1145                       	dc.b $11, $45
000255B5 1147                       	dc.b $11, $47
000255B7 8149                       	dc.b $81, $49
000255B9 0152                       	dc.b $1, $52
000255BB 0153                       	dc.b $1, $53
000255BD 06                         DPLC_2d5b_177: 	dc.b $6
000255BE 513F                       	dc.b $51, $3F
000255C0 2154                       	dc.b $21, $54
000255C2 1157                       	dc.b $11, $57
000255C4 1159                       	dc.b $11, $59
000255C6 815B                       	dc.b $81, $5B
000255C8 0152                       	dc.b $1, $52
000255CA 04                         DPLC_2d5b_184: 	dc.b $4
000255CB 5164                       	dc.b $51, $64
000255CD 116A                       	dc.b $11, $6A
000255CF 816C                       	dc.b $81, $6C
000255D1 1175                       	dc.b $11, $75
000255D3 05                         DPLC_2d5b_18D: 	dc.b $5
000255D4 5177                       	dc.b $51, $77
000255D6 217D                       	dc.b $21, $7D
000255D8 1180                       	dc.b $11, $80
000255DA 7182                       	dc.b $71, $82
000255DC 218A                       	dc.b $21, $8A
000255DE 04                         DPLC_2d5b_198: 	dc.b $4
000255DF 5177                       	dc.b $51, $77
000255E1 118D                       	dc.b $11, $8D
000255E3 818F                       	dc.b $81, $8F
000255E5 1198                       	dc.b $11, $98
000255E7 05                         DPLC_2d5b_1A1: 	dc.b $5
000255E8 513F                       	dc.b $51, $3F
000255EA 819A                       	dc.b $81, $9A
000255EC 1159                       	dc.b $11, $59
000255EE 11A3                       	dc.b $11, $A3
000255F0 0152                       	dc.b $1, $52
000255F2 02                         DPLC_2d5b_1AC: 	dc.b $2
000255F3 51A5                       	dc.b $51, $A5
000255F5 B1AB                       	dc.b $B1, $AB
000255F7 02                         DPLC_2d5b_1B1: 	dc.b $2
000255F8 505B                       	dc.b $50, $5B
000255FA B1B7                       	dc.b $B1, $B7
000255FC 02                         DPLC_2d5b_1B6: 	dc.b $2
000255FD 51A5                       	dc.b $51, $A5
000255FF B1C3                       	dc.b $B1, $C3
00025601 02                         DPLC_2d5b_1BB: 	dc.b $2
00025602 505B                       	dc.b $50, $5B
00025604 B1CF                       	dc.b $B1, $CF
00025606 04                         DPLC_2d5b_1C0: 	dc.b $4
00025607 51DB                       	dc.b $51, $DB
00025609 11E1                       	dc.b $11, $E1
0002560B B1E3                       	dc.b $B1, $E3
0002560D 01EF                       	dc.b $1, $EF
0002560F 03                         DPLC_2d5b_1C9: 	dc.b $3
00025610 51F0                       	dc.b $51, $F0
00025612 11F6                       	dc.b $11, $F6
00025614 B1F8                       	dc.b $B1, $F8
00025616 04                         DPLC_2d5b_1D0: 	dc.b $4
00025617 51DB                       	dc.b $51, $DB
00025619 1204                       	dc.b $12, $4
0002561B B206                       	dc.b $B2, $6
0002561D 01EF                       	dc.b $1, $EF
0002561F 03                         DPLC_2d5b_1D9: 	dc.b $3
00025620 51F0                       	dc.b $51, $F0
00025622 11F6                       	dc.b $11, $F6
00025624 B212                       	dc.b $B2, $12
00025626 02                         DPLC_2d5b_1E0: 	dc.b $2
00025627 521E                       	dc.b $52, $1E
00025629 B224                       	dc.b $B2, $24
0002562B 02                         DPLC_2d5b_1E5: 	dc.b $2
0002562C 510D                       	dc.b $51, $D
0002562E B230                       	dc.b $B2, $30
00025630 02                         DPLC_2d5b_1EA: 	dc.b $2
00025631 521E                       	dc.b $52, $1E
00025633 B23C                       	dc.b $B2, $3C
00025635 02                         DPLC_2d5b_1EF: 	dc.b $2
00025636 510D                       	dc.b $51, $D
00025638 B248                       	dc.b $B2, $48
0002563A 04                         DPLC_2d5b_1F4: 	dc.b $4
0002563B 5254                       	dc.b $52, $54
0002563D 125A                       	dc.b $12, $5A
0002563F B25C                       	dc.b $B2, $5C
00025641 0268                       	dc.b $2, $68
00025643 02                         DPLC_2d5b_1FD: 	dc.b $2
00025644 7269                       	dc.b $72, $69
00025646 B271                       	dc.b $B2, $71
00025648 04                         DPLC_2d5b_202: 	dc.b $4
00025649 5254                       	dc.b $52, $54
0002564B 127D                       	dc.b $12, $7D
0002564D B27F                       	dc.b $B2, $7F
0002564F 0268                       	dc.b $2, $68
00025651 02                         DPLC_2d5b_20B: 	dc.b $2
00025652 7269                       	dc.b $72, $69
00025654 B28B                       	dc.b $B2, $8B
00025656 01                         DPLC_2d5b_210: 	dc.b $1
00025657 F297                       	dc.b $F2, $97
00025659 01                         DPLC_2d5b_213: 	dc.b $1
0002565A F2A7                       	dc.b $F2, $A7
0002565C 01                         DPLC_2d5b_216: 	dc.b $1
0002565D F2B7                       	dc.b $F2, $B7
0002565F 01                         DPLC_2d5b_219: 	dc.b $1
00025660 F2C7                       	dc.b $F2, $C7
00025662 01                         DPLC_2d5b_21C: 	dc.b $1
00025663 F2D7                       	dc.b $F2, $D7
00025665 02                         DPLC_2d5b_21F: 	dc.b $2
00025666 B2E7                       	dc.b $B2, $E7
00025668 22F3                       	dc.b $22, $F3
0002566A 01                         DPLC_2d5b_224: 	dc.b $1
0002566B F2F6                       	dc.b $F2, $F6
0002566D 02                         DPLC_2d5b_227: 	dc.b $2
0002566E B306                       	dc.b $B3, $6
00025670 2312                       	dc.b $23, $12
00025672 01                         DPLC_2d5b_22C: 	dc.b $1
00025673 F315                       	dc.b $F3, $15
00025675 02                         DPLC_2d5b_22F: 	dc.b $2
00025676 5325                       	dc.b $53, $25
00025678 B32B                       	dc.b $B3, $2B
0002567A 04                         DPLC_2d5b_234: 	dc.b $4
0002567B 5337                       	dc.b $53, $37
0002567D 733D                       	dc.b $73, $3D
0002567F 1345                       	dc.b $13, $45
00025681 0347                       	dc.b $3, $47
00025683 02                         DPLC_2d5b_23D: 	dc.b $2
00025684 D348                       	dc.b $D3, $48
00025686 34EC                       	dc.b $34, $EC
00025688 02                         DPLC_2d5b_242: 	dc.b $2
00025689 F528                       	dc.b $F5, $28
0002568B 0538                       	dc.b $5, $38
0002568D 02                         DPLC_2d5b_247: 	dc.b $2
0002568E F539                       	dc.b $F5, $39
00025690 0549                       	dc.b $5, $49
00025692 02                         DPLC_2d5b_24C: 	dc.b $2
00025693 E356                       	dc.b $E3, $56
00025695 054A                       	dc.b $5, $4A
00025697 01                         DPLC_2d5b_251: 	dc.b $1
00025698 8365                       	dc.b $83, $65
0002569A 03                         DPLC_2d5b_254: 	dc.b $3
0002569B 736E                       	dc.b $73, $6E
0002569D 0376                       	dc.b $3, $76
0002569F 3377                       	dc.b $33, $77
000256A1 02                         DPLC_2d5b_25B: 	dc.b $2
000256A2 E37B                       	dc.b $E3, $7B
000256A4 054A                       	dc.b $5, $4A
000256A6 03                         DPLC_2d5b_260: 	dc.b $3
000256A7 B38A                       	dc.b $B3, $8A
000256A9 1396                       	dc.b $13, $96
000256AB 0398                       	dc.b $3, $98
000256AD 04                         DPLC_2d5b_267: 	dc.b $4
000256AE B399                       	dc.b $B3, $99
000256B0 33A5                       	dc.b $33, $A5
000256B2 03A9                       	dc.b $3, $A9
000256B4 03AA                       	dc.b $3, $AA
000256B6 04                         DPLC_2d5b_270: 	dc.b $4
000256B7 B3AB                       	dc.b $B3, $AB
000256B9 33B7                       	dc.b $33, $B7
000256BB 03BB                       	dc.b $3, $BB
000256BD 03BC                       	dc.b $3, $BC
000256BF 05                         DPLC_2d5b_279: 	dc.b $5
000256C0 83BD                       	dc.b $83, $BD
000256C2 13C6                       	dc.b $13, $C6
000256C4 53C8                       	dc.b $53, $C8
000256C6 13CE                       	dc.b $13, $CE
000256C8 03D0                       	dc.b $3, $D0
000256CA 05                         DPLC_2d5b_284: 	dc.b $5
000256CB 83D1                       	dc.b $83, $D1
000256CD 13DA                       	dc.b $13, $DA
000256CF 53C8                       	dc.b $53, $C8
000256D1 13CE                       	dc.b $13, $CE
000256D3 03D0                       	dc.b $3, $D0
000256D5 02                         DPLC_2d5b_28F: 	dc.b $2
000256D6 83DC                       	dc.b $83, $DC
000256D8 73E5                       	dc.b $73, $E5
000256DA 03                         DPLC_2d5b_294: 	dc.b $3
000256DB 83ED                       	dc.b $83, $ED
000256DD 23F6                       	dc.b $23, $F6
000256DF 13F9                       	dc.b $13, $F9
000256E1 02                         DPLC_2d5b_29B: 	dc.b $2
000256E2 83FB                       	dc.b $83, $FB
000256E4 7404                       	dc.b $74, $4
000256E6 03                         DPLC_2d5b_2A0: 	dc.b $3
000256E7 83ED                       	dc.b $83, $ED
000256E9 240C                       	dc.b $24, $C
000256EB 140F                       	dc.b $14, $F
000256ED 02                         DPLC_2d5b_2A7: 	dc.b $2
000256EE 5411                       	dc.b $54, $11
000256F0 B417                       	dc.b $B4, $17
000256F2 03                         DPLC_2d5b_2AC: 	dc.b $3
000256F3 8423                       	dc.b $84, $23
000256F5 342C                       	dc.b $34, $2C
000256F7 0430                       	dc.b $4, $30
000256F9 03                         DPLC_2d5b_2B3: 	dc.b $3
000256FA 7431                       	dc.b $74, $31
000256FC 1439                       	dc.b $14, $39
000256FE B43B                       	dc.b $B4, $3B
00025700 05                         DPLC_2d5b_2BA: 	dc.b $5
00025701 7447                       	dc.b $74, $47
00025703 144F                       	dc.b $14, $4F
00025705 5451                       	dc.b $54, $51
00025707 3457                       	dc.b $34, $57
00025709 045B                       	dc.b $4, $5B
0002570B 05                         DPLC_2d5b_2C5: 	dc.b $5
0002570C 745C                       	dc.b $74, $5C
0002570E 144F                       	dc.b $14, $4F
00025710 5464                       	dc.b $54, $64
00025712 3457                       	dc.b $34, $57
00025714 045B                       	dc.b $4, $5B
00025716 02                         DPLC_2d5b_2D0: 	dc.b $2
00025717 246A                       	dc.b $24, $6A
00025719 F46D                       	dc.b $F4, $6D
0002571B 03                         DPLC_2d5b_2D5: 	dc.b $3
0002571C 247D                       	dc.b $24, $7D
0002571E B480                       	dc.b $B4, $80
00025720 248C                       	dc.b $24, $8C
00025722 01                         DPLC_2d5b_2DC: 	dc.b $1
00025723 B48F                       	dc.b $B4, $8F
00025725 01                         DPLC_2d5b_2DF: 	dc.b $1
00025726 549B                       	dc.b $54, $9B
00025728 01                         DPLC_2d5b_2E2: 	dc.b $1
00025729 14A1                       	dc.b $14, $A1
0002572B 02                         DPLC_2d5b_2E5: 	dc.b $2
0002572C E356                       	dc.b $E3, $56
0002572E 054A                       	dc.b $5, $4A
00025730 03                         DPLC_2d5b_2EA: 	dc.b $3
00025731 736E                       	dc.b $73, $6E
00025733 0376                       	dc.b $3, $76
00025735 3377                       	dc.b $33, $77
00025737 03                         DPLC_2d5b_2F1: 	dc.b $3
00025738 B4A3                       	dc.b $B4, $A3
0002573A 14AF                       	dc.b $14, $AF
0002573C 34B1                       	dc.b $34, $B1
0002573E 03                         DPLC_2d5b_2F8: 	dc.b $3
0002573F 54B5                       	dc.b $54, $B5
00025741 B4BB                       	dc.b $B4, $BB
00025743 1074                       	dc.b $10, $74
00025745 02                         DPLC_2d5b_2FF: 	dc.b $2
00025746 F4C7                       	dc.b $F4, $C7
00025748 24D7                       	dc.b $24, $D7
0002574A 02                         DPLC_2d5b_304: 	dc.b $2
0002574B F4DA                       	dc.b $F4, $DA
0002574D 14EA                       	dc.b $14, $EA
0002574F 02                         DPLC_2d5b_309: 	dc.b $2
00025750 F502                       	dc.b $F5, $2
00025752 2512                       	dc.b $25, $12
00025754 02                         DPLC_2d5b_30E: 	dc.b $2
00025755 F515                       	dc.b $F5, $15
00025757 2525                       	dc.b $25, $25
00025759 02                         DPLC_2d5b_313: 	dc.b $2
0002575A F54B                       	dc.b $F5, $4B
0002575C 755B                       	dc.b $75, $5B
0002575E                            	even
0002575E                            	even
0002575E                            
0002575E                            ; ---------------------------------------------------------------------------
0002575E                            ; Uncompressed graphics	- Sonic
0002575E                            ; ---------------------------------------------------------------------------
0002575E                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003037E                            		even
0003037E                            ; ---------------------------------------------------------------------------
0003037E                            ; Compressed graphics - various
0003037E                            ; ---------------------------------------------------------------------------
0003037E                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030482                            		even
00030482                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000304BC                            		even
000304BC                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030652                            		even
00030652                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003079A                            		even
0003079A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000308A4                            		even
000308A4                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000308F6                            		even
000308F6                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030B3E                            		even
00030B3E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030CC4                            		even
00030CC4                            ; ---------------------------------------------------------------------------
00030CC4                            ; Sprite mappings - walls of the special stage
00030CC4                            ; ---------------------------------------------------------------------------
00030CC4                            Map_SSWalls:
00030CC4                            	include "_maps\SSwalls.asm"
00030CC4                            ; ---------------------------------------------------------------------------
00030CC4                            ; Sprite mappings - walls of the special stage
00030CC4                            ; ---------------------------------------------------------------------------
00030CC4 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030CC8 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030CCC 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030CD0 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030CD4 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030CD8 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030CDC 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030CE0 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030CE4 01                         byte_2C584:	dc.b 1
00030CE5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030CEA 01                         byte_2C58A:	dc.b 1
00030CEB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030CF0 01                         byte_2C590:	dc.b 1
00030CF1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030CF6 01                         byte_2C596:	dc.b 1
00030CF7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030CFC 01                         byte_2C59C:	dc.b 1
00030CFD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030D02 01                         byte_2C5A2:	dc.b 1
00030D03 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030D08 01                         byte_2C5A8:	dc.b 1
00030D09 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030D0E 01                         byte_2C5AE:	dc.b 1
00030D0F F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030D14 01                         byte_2C5B4:	dc.b 1
00030D15 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030D1A 01                         byte_2C5BA:	dc.b 1
00030D1B F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030D20 01                         byte_2C5C0:	dc.b 1
00030D21 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030D26 01                         byte_2C5C6:	dc.b 1
00030D27 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030D2C 01                         byte_2C5CC:	dc.b 1
00030D2D F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030D32 01                         byte_2C5D2:	dc.b 1
00030D33 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030D38 01                         byte_2C5D8:	dc.b 1
00030D39 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030D3E 01                         byte_2C5DE:	dc.b 1
00030D3F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030D44                            		even
00030D44                            		even
00030D44                            ; ---------------------------------------------------------------------------
00030D44                            ; Compressed graphics - special stage
00030D44                            ; ---------------------------------------------------------------------------
00030D44                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003167C                            		even
0003167C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000317CA                            		even
000317CA                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032C5C                            		even
00032C5C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032F5C                            		even
00032F5C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033450                            		even
00033450                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003353E                            		even
0003353E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003360E                            		even
0003360E                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033704                            		even
00033704                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033762                            		even
00033762                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000337F4                            		even
000337F4                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000338B6                            		even
000338B6                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033984                            		even
00033984                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033A50                            		even
00033A50                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033B18                            		even
00033B18                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033BE2                            		even
00033BE2                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033CB2                            		even
00033CB2                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033EA6                            		even
00033EA6                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003400E                            		even
0003400E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000340BE                            		even
000340BE                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034198                            		even
00034198                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003421C                            		even
0003421C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003439A                            		even
0003439A                            ; ---------------------------------------------------------------------------
0003439A                            ; Compressed graphics - GHZ stuff
0003439A                            ; ---------------------------------------------------------------------------
0003439A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000343E4                            		even
000343E4                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000344FE                            		even
000344FE                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000345EA                            		even
000345EA                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034632                            		even
00034632                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000347D0                            		even
000347D0                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003484C                            		even
0003484C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034A60                            		even
00034A60                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034B8C                            		even
00034B8C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034CBA                            		even
00034CBA                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034D58                            		even
00034D58                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034DB8                            		even
00034DB8                            ; ---------------------------------------------------------------------------
00034DB8                            ; Compressed graphics - LZ stuff
00034DB8                            ; ---------------------------------------------------------------------------
00034DB8                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034EDC                            		even
00034EDC                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000356D0                            		even
000356D0                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035850                            		even
00035850                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000359BA                            		even
000359BA                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036010                            		even
00036010                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000360C6                            		even
000360C6                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036168                            		even
00036168                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000362C4                            		even
000362C4                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036328                            		even
00036328                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003647A                            		even
0003647A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003695C                            		even
0003695C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036ACC                            		even
00036ACC                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036D84                            		even
00036D84                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036EBC                            		even
00036EBC                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036FE6                            		even
00036FE6                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000370F6                            		even
000370F6                            ; ---------------------------------------------------------------------------
000370F6                            ; Compressed graphics - MZ stuff
000370F6                            ; ---------------------------------------------------------------------------
000370F6                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037384                            		even
00037384                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037442                            		even
00037442                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000374FA                            		even
000374FA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003754E                            		even
0003754E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037820 00                         		even
00037820                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038136                            		even
00038136                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003829A                            		even
0003829A                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038322                            		even
00038322                            ; ---------------------------------------------------------------------------
00038322                            ; Compressed graphics - SLZ stuff
00038322                            ; ---------------------------------------------------------------------------
00038322                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003855E                            		even
0003855E                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000386A4                            		even
000386A4                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000388E8                            		even
000388E8                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003894A                            		even
0003894A                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038A2C                            		even
00038A2C                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038C0E                            		even
00038C0E                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038D1A                            		even
00038D1A                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038DBE                            		even
00038DBE                            ; ---------------------------------------------------------------------------
00038DBE                            ; Compressed graphics - SYZ stuff
00038DBE                            ; ---------------------------------------------------------------------------
00038DBE                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038F28                            		even
00038F28                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038F8A                            		even
00038F8A                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003906C                            		even
0003906C                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000392FA                            		even
000392FA                            ; ---------------------------------------------------------------------------
000392FA                            ; Compressed graphics - SBZ stuff
000392FA                            ; ---------------------------------------------------------------------------
000392FA                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003934E                            		even
0003934E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000395EA                            		even
000395EA                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000397EE                            		even
000397EE                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003998C                            		even
0003998C                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039CBC                            		even
00039CBC                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039E9A                            		even
00039E9A                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039EF2                            		even
00039EF2                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A0BC 00                         		even
0003A0BC                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A1BA                            		even
0003A1BA                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A346                            		even
0003A346                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A396                            		even
0003A396                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A3EE                            		even
0003A3EE                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A4EA                            		even
0003A4EA                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A600                            		even
0003A600                            ; ---------------------------------------------------------------------------
0003A600                            ; Compressed graphics - enemies
0003A600                            ; ---------------------------------------------------------------------------
0003A600                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A9C0                            		even
0003A9C0                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AB6A 00                         		even
0003AB6A                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AF2C 00                         		even
0003AF2C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B114                            		even
0003B114                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B2CC 00                         		even
0003B2CC                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B416                            		even
0003B416                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B6A0                            		even
0003B6A0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BCC4                            		even
0003BCC4                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BEBA                            		even
0003BEBA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C4D8                            		even
0003C4D8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C8D8 00                         		even
0003C8D8                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CBD4                            		even
0003CBD4                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CE1C                            		even
0003CE1C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D0B4                            		even
0003D0B4                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D292                            		even
0003D292                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D420                            		even
0003D420                            ; ---------------------------------------------------------------------------
0003D420                            ; Compressed graphics - various
0003D420                            ; ---------------------------------------------------------------------------
0003D420                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DA2E                            		even
0003DA2E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DB24                            		even
0003DB24                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DC2A                            		even
0003DC2A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DD1E                            		even
0003DD1E                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E262                            		even
0003E262                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E8C8                            		even
0003E8C8                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E978                            		even
0003E978                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EB0A                            		even
0003EB0A                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EC0C                            		even
0003EC0C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ECE8                            		even
0003ECE8                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F164                            		even
0003F164                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F224                            		even
0003F224                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F398                            		even
0003F398                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F69A                            		even
0003F69A                            ; ---------------------------------------------------------------------------
0003F69A                            ; Compressed graphics - continue screen
0003F69A                            ; ---------------------------------------------------------------------------
0003F69A                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F94A                            		even
0003F94A                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB84                            		even
0003FB84                            ; ---------------------------------------------------------------------------
0003FB84                            ; Compressed graphics - animals
0003FB84                            ; ---------------------------------------------------------------------------
0003FB84                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FCDC                            		even
0003FCDC                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FE38                            		even
0003FE38                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FFB4                            		even
0003FFB4                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000400D0                            		even
000400D0                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040206                            		even
00040206                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040340                            		even
00040340                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004049C                            		even
0004049C                            ; ---------------------------------------------------------------------------
0004049C                            ; Compressed graphics - primary patterns and block mappings
0004049C                            ; ---------------------------------------------------------------------------
0004049C                            Blk16_GHZ:	incbin	map16\ghz.bin
00040DB0                            		even
00040DB0                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000426BE                            		even
000426BE                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043A3E                            		even
00043A3E                            Blk256_GHZ:	incbin	map256\ghz.bin
00045D3C                            		even
00045D3C                            Blk16_LZ:	incbin	map16\lz.bin
00046476                            		even
00046476                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048878                            		even
00048878                            Blk256_LZ:	incbin	map256\lz.bin
0004B1F8                            		even
0004B1F8                            Blk16_MZ:	incbin	map16\mz.bin
0004B954                            		even
0004B954                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E1DC                            		even
0004E1DC                            Blk256_MZ:	incbin	map256\mz.bin
0004F960                            		even
0004F960                            Blk16_SLZ:	incbin	map16\slz.bin
0005002A                            		even
0005002A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F7E                            		even
00051F7E                            Blk256_SLZ:	incbin	map256\slz.bin
000525F8                            		even
000525F8                            Blk16_SYZ:	incbin	map16\syz.bin
0005321E                            		even
0005321E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000577B0                            		even
000577B0                            Blk256_SYZ:	incbin	map256\syz.bin
0005980C                            		even
0005980C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A754                            		even
0005A754                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D118                            		even
0005D118                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FC0E                            		even
0005FC0E                            ; ---------------------------------------------------------------------------
0005FC0E                            ; Compressed graphics - bosses and ending sequence
0005FC0E                            ; ---------------------------------------------------------------------------
0005FC0E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060428 00                         		even
00060428                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060A76                            		even
00060A76                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060AF0                            		even
00060AF0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060DDA                            		even
00060DDA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006165E                            		even
0006165E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000623B4 00                         		even
000623B4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062B1C                            		even
00062B1C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006309C                            		even
0006309C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000631BC                            		even
000631BC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000633BA                            		even
000633BA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064598                            		even
00064598                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064EDC                            		even
00064EDC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000652B2                            		even
000652B2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065842                            		even
00065842                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065ACA                            		even
00065ACA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000660B8 00                         		even
000660B8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00066340                            		even
00066340                            		incbin	misc\padding2.bin
00066444                            		even
00066444                            ; ---------------------------------------------------------------------------
00066444                            ; Collision data
00066444                            ; ---------------------------------------------------------------------------
00066444                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066544                            		even
00066544                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067544                            		even
00067544                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068544                            		even
00068544                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000686FC 00                         		even
000686FC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068864                            		even
00068864                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000689F4                            		even
000689F4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068BE8                            		even
00068BE8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068DEE                            		even
00068DEE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006908C                            		even
0006908C                            ; ---------------------------------------------------------------------------
0006908C                            ; Special layouts
0006908C                            ; ---------------------------------------------------------------------------
0006908C                            SS_1:		incbin	sslayout\1.bin
00069306                            		even
00069306                            SS_2:		incbin	sslayout\2.bin
00069718                            		even
00069718                            SS_3:		incbin	sslayout\3.bin
00069A74                            		even
00069A74                            SS_4:		incbin	sslayout\4.bin
00069F4E                            		even
00069F4E                            SS_5:		incbin	sslayout\5.bin
0006A420                            		even
0006A420                            SS_6:		incbin	sslayout\6.bin
0006A730                            		even
0006A730                            ; ---------------------------------------------------------------------------
0006A730                            ; Animated uncompressed graphics
0006A730                            ; ---------------------------------------------------------------------------
0006A730                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A930                            		even
0006A930                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006AD30                            		even
0006AD30                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B1B0                            		even
0006B1B0                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B4B0                            		even
0006B4B0                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BAB0                            		even
0006BAB0                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BDB0                            		even
0006BDB0                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C830                            		even
0006C830                            
0006C830                            ; ---------------------------------------------------------------------------
0006C830                            ; Level	layout index
0006C830                            ; ---------------------------------------------------------------------------
0006C830 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C836 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C83C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C842 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C848 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C84E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C854 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C85A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C860 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C866 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C86C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C872 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C878 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C87E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C884 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C88A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C890 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C896 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C89C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C8A2 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C8A8 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C8AE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C8B4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C8BA 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C8C0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8C6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8CC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8D2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8D8                            
0006C8D8                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C9CA                            		even
0006C9CA 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C9CE                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CA96                            		even
0006CA96 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CA9A                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CBBC                            		even
0006CBBC                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CBDE                            		even
0006CBDE 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CBE2 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CBE6                            
0006CBE6                            Level_LZ1:	incbin	levels\lz1.bin
0006CCE8                            		even
0006CCE8                            Level_LZbg:	incbin	levels\lzbg.bin
0006CDEA                            		even
0006CDEA 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CDEE                            Level_LZ2:	incbin	levels\lz2.bin
0006CE88                            		even
0006CE88 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CE8C                            Level_LZ3:	incbin	levels\lz3.bin
0006CFA6                            		even
0006CFA6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006CFAA                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D064                            		even
0006D064 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D068                            
0006D068                            Level_MZ1:	incbin	levels\mz1.bin
0006D106                            		even
0006D106                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D180                            		even
0006D180                            Level_MZ2:	incbin	levels\mz2.bin
0006D224                            		even
0006D224                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D2B6                            		even
0006D2B6 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D2BA                            Level_MZ3:	incbin	levels\mz3.bin
0006D39C                            		even
0006D39C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D440 00                         		even
0006D440 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D444 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D448                            
0006D448                            Level_SLZ1:	incbin	levels\slz1.bin
0006D55A                            		even
0006D55A                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D574                            		even
0006D574                            Level_SLZ2:	incbin	levels\slz2.bin
0006D664                            		even
0006D664                            Level_SLZ3:	incbin	levels\slz3.bin
0006D77E                            		even
0006D77E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D782                            
0006D782                            Level_SYZ1:	incbin	levels\syz1.bin
0006D83E 00                         		even
0006D83E                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D878                            		even
0006D878 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D87C                            Level_SYZ2:	incbin	levels\syz2.bin
0006D980                            		even
0006D980 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D984                            Level_SYZ3:	incbin	levels\syz3.bin
0006DADE 00                         		even
0006DADE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DAE2 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DAE6                            
0006DAE6                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DC08                            		even
0006DC08                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DC46                            		even
0006DC46                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DD88                            		even
0006DD88                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DEF2                            		even
0006DEF2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DEF6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DEFA                            Level_End:	incbin	levels\ending.bin
0006DF2A 00                         		even
0006DF2A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DF2E                            
0006DF2E                            ; ---------------------------------------------------------------------------
0006DF2E                            ; Animated uncompressed giant ring graphics
0006DF2E                            ; ---------------------------------------------------------------------------
0006DF2E                            Art_BigRing:	incbin	artunc\bigring.bin
0006EB6E                            		even
0006EB6E                            
0006EB6E                            		incbin	misc\padding3.bin
0006EC0A                            		even
0006EC0A                            
0006EC0A                            ; ---------------------------------------------------------------------------
0006EC0A                            ; Sprite locations index
0006EC0A                            ; ---------------------------------------------------------------------------
0006EC0A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC0E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC12 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC16 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC22 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC26 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC32 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC36 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC42 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC46 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC52 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC56 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC62 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC66 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC6A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC6E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC72 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC76 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC7A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC7E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006EC82 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006EC86 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC8A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC8E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006EC92 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006EC96 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC9A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006ECA0                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F4EC                            		even
0006F4EC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F5A0                            		even
0006F5A0                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006FFE4                            		even
0006FFE4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007038C                            		even
0007038C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000706C2                            		even
000706C2                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070BD8                            		even
00070BD8                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00071070                            		even
00071070                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000710A2                            		even
000710A2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000710D4                            		even
000710D4                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00071106                            		even
00071106                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071138                            		even
00071138                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00071182                            		even
00071182                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000711C0                            		even
000711C0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007152C                            		even
0007152C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000719D6                            		even
000719D6                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071F4C                            		even
00071F4C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071F76                            		even
00071F76                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000723DE                            		even
000723DE                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000729C0                            		even
000729C0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00073032                            		even
00073032                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007359C                            		even
0007359C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073BA2                            		even
00073BA2                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000742E0                            		even
000742E0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000749BE                            		even
000749BE                            ObjPos_FZ:	incbin	objpos\fz.bin
000749D0                            		even
000749D0                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074A02                            		even
00074A02                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074A34                            		even
00074A34                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074A66                            		even
00074A66                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074A98                            		even
00074A98                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074ACA                            		even
00074ACA                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074B02                            		even
00074B02                            ObjPos_End:	incbin	objpos\ending.bin
00074C5E                            		even
00074C5E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074C64                            ; ---------------------------------------------------------------------------
00074C64                            		incbin	misc\padding4.bin
0007528E                            		even
0007528E                            
0007528E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00075292 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00075296 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007529A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007529E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000752A2 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000752A6                            ; ---------------------------------------------------------------------------
000752A6                            ; PSG instruments used in music
000752A6                            ; ---------------------------------------------------------------------------
000752A6 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000752B2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000752BE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000752CA                            PSG1:		incbin	sound\psg1.bin
000752E1                            PSG2:		incbin	sound\psg2.bin
000752E8                            PSG3:		incbin	sound\psg3.bin
000752F9                            PSG4:		incbin	sound\psg4.bin
00075304                            PSG6:		incbin	sound\psg6.bin
00075313                            PSG5:		incbin	sound\psg5.bin
0007533D                            PSG7:		incbin	sound\psg7.bin
00075359                            PSG8:		incbin	sound\psg8.bin
00075381                            PSG9:		incbin	sound\psg9.bin
00075392                            
00075392 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007539A                            ; ---------------------------------------------------------------------------
0007539A                            ; Music	Pointers
0007539A                            ; ---------------------------------------------------------------------------
0007539A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000753A2 0000 0000 0000 0000        		dc.l Music83, Music84
000753AA 0000 0000 0000 0000        		dc.l Music85, Music86
000753B2 0000 0000 0000 0000        		dc.l Music87, Music88
000753BA 0000 0000 0000 0000        		dc.l Music89, Music8A
000753C2 0000 0000 0000 0000        		dc.l Music8B, Music8C
000753CA 0000 0000 0000 0000        		dc.l Music8D, Music8E
000753D2 0000 0000 0000 0000        		dc.l Music8F, Music90
000753DA 0000 0000 0000 0000        		dc.l Music91, Music92
000753E2 0000 0000 0000 0000        		dc.l Music93, Music94
000753EA 0000 0000 0000 0000        		dc.l Music95, Music96
000753F2 0000 0000 0000 0000        		dc.l Music97, Music98
000753FA 0000 0000 0000 0000        		dc.l Music99, Music9A
00075402 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007540A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075412 0000 0000                  		dc.l Music9F
00075416                            ; ---------------------------------------------------------------------------
00075416                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075416                            ; ---------------------------------------------------------------------------
00075416 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075426 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075436 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075446 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075456 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075466 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075476 9090 9090                  		dc.b $90, $90, $90, $90
0007547A                            
0007547A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007547A                            
0007547A                            
0007547A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007547A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00075482 4E71                       		nop	
00075484 4E71                       		nop	
00075486 4E71                       		nop	
00075488                            
00075488                            loc_71B5A:
00075488 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075490 66F6                       		bne.s	loc_71B5A
00075492                            
00075492 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007549A 6700                       		beq.s	loc_71B82
0007549C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000754A4 4E71                       		nop	
000754A6 4E71                       		nop	
000754A8 4E71                       		nop	
000754AA 4E71                       		nop	
000754AC 4E71                       		nop	
000754AE 60CA                       		bra.s	sub_71B4C
000754B0                            ; ===========================================================================
000754B0                            
000754B0                            loc_71B82:
000754B0 4DF9 00FF F000             		lea	($FFF000).l,a6
000754B6 422E 000E                  		clr.b	$E(a6)
000754BA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000754BE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000754C2 532E 0001                  		subq.b	#1,1(a6)
000754C6 6600                       		bne.s	loc_71B9E
000754C8 4EBA 0000                  		jsr	sub_7260C(pc)
000754CC                            
000754CC                            loc_71B9E:
000754CC 102E 0004                  		move.b	4(a6),d0
000754D0 6700                       		beq.s	loc_71BA8
000754D2 4EBA 0000                  		jsr	sub_72504(pc)
000754D6                            
000754D6                            loc_71BA8:
000754D6 4A2E 0024                  		tst.b	$24(a6)
000754DA 6700                       		beq.s	loc_71BB2
000754DC 4EBA 0000                  		jsr	sub_7267C(pc)
000754E0                            
000754E0                            loc_71BB2:
000754E0 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000754E4 6700                       		beq.s	loc_71BBC	; if not, branch
000754E6 4EBA 0000                  		jsr	Sound_Play(pc)
000754EA                            
000754EA                            loc_71BBC:
000754EA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000754F0 6700                       		beq.s	loc_71BC8
000754F2 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000754F6                            
000754F6                            loc_71BC8:
000754F6 4BEE 0040                  		lea	$40(a6),a5
000754FA 4A15                       		tst.b	(a5)
000754FC 6A00                       		bpl.s	loc_71BD4
000754FE 4EBA 0000                  		jsr	sub_71C4E(pc)
00075502                            
00075502                            loc_71BD4:
00075502 422E 0008                  		clr.b	8(a6)
00075506 7E05                       		moveq	#5,d7
00075508                            
00075508                            loc_71BDA:
00075508 DAFC 0030                  		adda.w	#$30,a5
0007550C 4A15                       		tst.b	(a5)
0007550E 6A00                       		bpl.s	loc_71BE6
00075510 4EBA 0000                  		jsr	sub_71CCA(pc)
00075514                            
00075514                            loc_71BE6:
00075514 51CF FFF2                  		dbf	d7,loc_71BDA
00075518                            
00075518 7E02                       		moveq	#2,d7
0007551A                            
0007551A                            loc_71BEC:
0007551A DAFC 0030                  		adda.w	#$30,a5
0007551E 4A15                       		tst.b	(a5)
00075520 6A00                       		bpl.s	loc_71BF8
00075522 4EBA 0000                  		jsr	sub_72850(pc)
00075526                            
00075526                            loc_71BF8:
00075526 51CF FFF2                  		dbf	d7,loc_71BEC
0007552A                            
0007552A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075530 7E02                       		moveq	#2,d7
00075532                            
00075532                            loc_71C04:
00075532 DAFC 0030                  		adda.w	#$30,a5
00075536 4A15                       		tst.b	(a5)
00075538 6A00                       		bpl.s	loc_71C10
0007553A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007553E                            
0007553E                            loc_71C10:
0007553E 51CF FFF2                  		dbf	d7,loc_71C04
00075542                            
00075542 7E02                       		moveq	#2,d7
00075544                            
00075544                            loc_71C16:
00075544 DAFC 0030                  		adda.w	#$30,a5
00075548 4A15                       		tst.b	(a5)
0007554A 6A00                       		bpl.s	loc_71C22
0007554C 4EBA 0000                  		jsr	sub_72850(pc)
00075550                            
00075550                            loc_71C22:
00075550 51CF FFF2                  		dbf	d7,loc_71C16
00075554 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007555A DAFC 0030                  		adda.w	#$30,a5
0007555E 4A15                       		tst.b	(a5)
00075560 6A00                       		bpl.s	loc_71C38
00075562 4EBA 0000                  		jsr	sub_71CCA(pc)
00075566                            
00075566                            loc_71C38:
00075566 DAFC 0030                  		adda.w	#$30,a5
0007556A 4A15                       		tst.b	(a5)
0007556C 6A00                       		bpl.s	loc_71C44
0007556E 4EBA 0000                  		jsr	sub_72850(pc)
00075572                            
00075572                            loc_71C44:
00075572 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007557A 4E75                       		rts	
0007557C                            ; End of function sub_71B4C
0007557C                            
0007557C                            
0007557C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007557C                            
0007557C                            
0007557C                            sub_71C4E:				; XREF: sub_71B4C
0007557C 532D 000E                  		subq.b	#1,$E(a5)
00075580 6600                       		bne.s	locret_71CAA
00075582 1D7C 0080 0008             		move.b	#$80,8(a6)
00075588 286D 0004                  		movea.l	4(a5),a4
0007558C                            
0007558C                            loc_71C5E:
0007558C 7A00                       		moveq	#0,d5
0007558E 1A1C                       		move.b	(a4)+,d5
00075590 0C05 00E0                  		cmpi.b	#-$20,d5
00075594 6500                       		bcs.s	loc_71C6E
00075596 4EBA 0000                  		jsr	sub_72A5A(pc)
0007559A 60F0                       		bra.s	loc_71C5E
0007559C                            ; ===========================================================================
0007559C                            
0007559C                            loc_71C6E:
0007559C 4A05                       		tst.b	d5
0007559E 6A00                       		bpl.s	loc_71C84
000755A0 1B45 0010                  		move.b	d5,$10(a5)
000755A4 1A1C                       		move.b	(a4)+,d5
000755A6 6A00                       		bpl.s	loc_71C84
000755A8 534C                       		subq.w	#1,a4
000755AA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000755B0 6000                       		bra.s	loc_71C88
000755B2                            ; ===========================================================================
000755B2                            
000755B2                            loc_71C84:
000755B2 4EBA 0000                  		jsr	sub_71D40(pc)
000755B6                            
000755B6                            loc_71C88:
000755B6 2B4C 0004                  		move.l	a4,4(a5)
000755BA 0815 0002                  		btst	#2,(a5)
000755BE 6600                       		bne.s	locret_71CAA
000755C0 7000                       		moveq	#0,d0
000755C2 102D 0010                  		move.b	$10(a5),d0
000755C6 0C00 0080                  		cmpi.b	#$80,d0
000755CA 6700                       		beq.s	locret_71CAA
000755CC 0800 0003                  		btst	#3,d0
000755D0 6600                       		bne.s	loc_71CAC
000755D2 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000755D8                            
000755D8                            locret_71CAA:
000755D8 4E75                       		rts	
000755DA                            ; ===========================================================================
000755DA                            
000755DA                            loc_71CAC:
000755DA 0400 0088                  		subi.b	#$88,d0
000755DE 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000755E2 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000755E8 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000755F0 4E75                       		rts	
000755F2                            ; End of function sub_71C4E
000755F2                            
000755F2                            ; ===========================================================================
000755F2 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000755F8                            
000755F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755F8                            
000755F8                            
000755F8                            sub_71CCA:				; XREF: sub_71B4C
000755F8 532D 000E                  		subq.b	#1,$E(a5)
000755FC 6600                       		bne.s	loc_71CE0
000755FE 0895 0004                  		bclr	#4,(a5)
00075602 4EBA 0000                  		jsr	sub_71CEC(pc)
00075606 4EBA 0000                  		jsr	sub_71E18(pc)
0007560A 6000 0000                  		bra.w	loc_726E2
0007560E                            ; ===========================================================================
0007560E                            
0007560E                            loc_71CE0:
0007560E 4EBA 0000                  		jsr	sub_71D9E(pc)
00075612 4EBA 0000                  		jsr	sub_71DC6(pc)
00075616 6000 0000                  		bra.w	loc_71E24
0007561A                            ; End of function sub_71CCA
0007561A                            
0007561A                            
0007561A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007561A                            
0007561A                            
0007561A                            sub_71CEC:				; XREF: sub_71CCA
0007561A 286D 0004                  		movea.l	4(a5),a4
0007561E 0895 0001                  		bclr	#1,(a5)
00075622                            
00075622                            loc_71CF4:
00075622 7A00                       		moveq	#0,d5
00075624 1A1C                       		move.b	(a4)+,d5
00075626 0C05 00E0                  		cmpi.b	#-$20,d5
0007562A 6500                       		bcs.s	loc_71D04
0007562C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075630 60F0                       		bra.s	loc_71CF4
00075632                            ; ===========================================================================
00075632                            
00075632                            loc_71D04:
00075632 4EBA 0000                  		jsr	sub_726FE(pc)
00075636 4A05                       		tst.b	d5
00075638 6A00                       		bpl.s	loc_71D1A
0007563A 4EBA 0000                  		jsr	sub_71D22(pc)
0007563E 1A1C                       		move.b	(a4)+,d5
00075640 6A00                       		bpl.s	loc_71D1A
00075642 534C                       		subq.w	#1,a4
00075644 6000 0000                  		bra.w	sub_71D60
00075648                            ; ===========================================================================
00075648                            
00075648                            loc_71D1A:
00075648 4EBA 0000                  		jsr	sub_71D40(pc)
0007564C 6000 0000                  		bra.w	sub_71D60
00075650                            ; End of function sub_71CEC
00075650                            
00075650                            
00075650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075650                            
00075650                            
00075650                            sub_71D22:				; XREF: sub_71CEC
00075650 0405 0080                  		subi.b	#$80,d5
00075654 6700                       		beq.s	loc_71D58
00075656 DA2D 0008                  		add.b	8(a5),d5
0007565A 0245 007F                  		andi.w	#$7F,d5
0007565E E34D                       		lsl.w	#1,d5
00075660 41FA 0000                  		lea	word_72790(pc),a0
00075664 3C30 5000                  		move.w	(a0,d5.w),d6
00075668 3B46 0010                  		move.w	d6,$10(a5)
0007566C 4E75                       		rts	
0007566E                            ; End of function sub_71D22
0007566E                            
0007566E                            
0007566E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007566E                            
0007566E                            
0007566E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007566E 1005                       		move.b	d5,d0
00075670 122D 0002                  		move.b	2(a5),d1
00075674                            
00075674                            loc_71D46:
00075674 5301                       		subq.b	#1,d1
00075676 6700                       		beq.s	loc_71D4E
00075678 D005                       		add.b	d5,d0
0007567A 60F8                       		bra.s	loc_71D46
0007567C                            ; ===========================================================================
0007567C                            
0007567C                            loc_71D4E:
0007567C 1B40 000F                  		move.b	d0,$F(a5)
00075680 1B40 000E                  		move.b	d0,$E(a5)
00075684 4E75                       		rts	
00075686                            ; End of function sub_71D40
00075686                            
00075686                            ; ===========================================================================
00075686                            
00075686                            loc_71D58:				; XREF: sub_71D22
00075686 08D5 0001                  		bset	#1,(a5)
0007568A 426D 0010                  		clr.w	$10(a5)
0007568E                            
0007568E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007568E                            
0007568E                            
0007568E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007568E 2B4C 0004                  		move.l	a4,4(a5)
00075692 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075698 0815 0004                  		btst	#4,(a5)
0007569C 6600                       		bne.s	locret_71D9C
0007569E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000756A4 422D 000C                  		clr.b	$C(a5)
000756A8 0815 0003                  		btst	#3,(a5)
000756AC 6700                       		beq.s	locret_71D9C
000756AE 206D 0014                  		movea.l	$14(a5),a0
000756B2 1B58 0018                  		move.b	(a0)+,$18(a5)
000756B6 1B58 0019                  		move.b	(a0)+,$19(a5)
000756BA 1B58 001A                  		move.b	(a0)+,$1A(a5)
000756BE 1018                       		move.b	(a0)+,d0
000756C0 E208                       		lsr.b	#1,d0
000756C2 1B40 001B                  		move.b	d0,$1B(a5)
000756C6 426D 001C                  		clr.w	$1C(a5)
000756CA                            
000756CA                            locret_71D9C:
000756CA 4E75                       		rts	
000756CC                            ; End of function sub_71D60
000756CC                            
000756CC                            
000756CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756CC                            
000756CC                            
000756CC                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000756CC 4A2D 0012                  		tst.b	$12(a5)
000756D0 6700                       		beq.s	locret_71DC4
000756D2 532D 0012                  		subq.b	#1,$12(a5)
000756D6 6600                       		bne.s	locret_71DC4
000756D8 08D5 0001                  		bset	#1,(a5)
000756DC 4A2D 0001                  		tst.b	1(a5)
000756E0 6B00 0000                  		bmi.w	loc_71DBE
000756E4 4EBA 0000                  		jsr	sub_726FE(pc)
000756E8 584F                       		addq.w	#4,sp
000756EA 4E75                       		rts	
000756EC                            ; ===========================================================================
000756EC                            
000756EC                            loc_71DBE:
000756EC 4EBA 0000                  		jsr	sub_729A0(pc)
000756F0 584F                       		addq.w	#4,sp
000756F2                            
000756F2                            locret_71DC4:
000756F2 4E75                       		rts	
000756F4                            ; End of function sub_71D9E
000756F4                            
000756F4                            
000756F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756F4                            
000756F4                            
000756F4                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000756F4 584F                       		addq.w	#4,sp
000756F6 0815 0003                  		btst	#3,(a5)
000756FA 6700                       		beq.s	locret_71E16
000756FC 4A2D 0018                  		tst.b	$18(a5)
00075700 6700                       		beq.s	loc_71DDA
00075702 532D 0018                  		subq.b	#1,$18(a5)
00075706 4E75                       		rts	
00075708                            ; ===========================================================================
00075708                            
00075708                            loc_71DDA:
00075708 532D 0019                  		subq.b	#1,$19(a5)
0007570C 6700                       		beq.s	loc_71DE2
0007570E 4E75                       		rts	
00075710                            ; ===========================================================================
00075710                            
00075710                            loc_71DE2:
00075710 206D 0014                  		movea.l	$14(a5),a0
00075714 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007571A 4A2D 001B                  		tst.b	$1B(a5)
0007571E 6600                       		bne.s	loc_71DFE
00075720 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075726 442D 001A                  		neg.b	$1A(a5)
0007572A 4E75                       		rts	
0007572C                            ; ===========================================================================
0007572C                            
0007572C                            loc_71DFE:
0007572C 532D 001B                  		subq.b	#1,$1B(a5)
00075730 1C2D 001A                  		move.b	$1A(a5),d6
00075734 4886                       		ext.w	d6
00075736 DC6D 001C                  		add.w	$1C(a5),d6
0007573A 3B46 001C                  		move.w	d6,$1C(a5)
0007573E DC6D 0010                  		add.w	$10(a5),d6
00075742 594F                       		subq.w	#4,sp
00075744                            
00075744                            locret_71E16:
00075744 4E75                       		rts	
00075746                            ; End of function sub_71DC6
00075746                            
00075746                            
00075746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075746                            
00075746                            
00075746                            sub_71E18:				; XREF: sub_71CCA
00075746 0815 0001                  		btst	#1,(a5)
0007574A 6600                       		bne.s	locret_71E48
0007574C 3C2D 0010                  		move.w	$10(a5),d6
00075750 6700                       		beq.s	loc_71E4A
00075752                            
00075752                            loc_71E24:				; XREF: sub_71CCA
00075752 102D 001E                  		move.b	$1E(a5),d0
00075756 4880                       		ext.w	d0
00075758 DC40                       		add.w	d0,d6
0007575A 0815 0002                  		btst	#2,(a5)
0007575E 6600                       		bne.s	locret_71E48
00075760 3206                       		move.w	d6,d1
00075762 E049                       		lsr.w	#8,d1
00075764 103C 00A4                  		move.b	#-$5C,d0
00075768 4EBA 0000                  		jsr	sub_72722(pc)
0007576C 1206                       		move.b	d6,d1
0007576E 103C 00A0                  		move.b	#-$60,d0
00075772 4EBA 0000                  		jsr	sub_72722(pc)
00075776                            
00075776                            locret_71E48:
00075776 4E75                       		rts	
00075778                            ; ===========================================================================
00075778                            
00075778                            loc_71E4A:
00075778 08D5 0001                  		bset	#1,(a5)
0007577C 4E75                       		rts	
0007577E                            ; End of function sub_71E18
0007577E                            
0007577E                            ; ===========================================================================
0007577E                            
0007577E                            loc_71E50:				; XREF: sub_71B4C
0007577E 6B00                       		bmi.s	loc_71E94
00075780 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075786 6700 0000                  		beq.w	loc_71EFE
0007578A 1D7C 0002 0003             		move.b	#2,3(a6)
00075790 7602                       		moveq	#2,d3
00075792 103C 00B4                  		move.b	#-$4C,d0
00075796 7200                       		moveq	#0,d1
00075798                            
00075798                            loc_71E6A:
00075798 4EBA 0000                  		jsr	sub_7272E(pc)
0007579C 4EBA 0000                  		jsr	sub_72764(pc)
000757A0 5200                       		addq.b	#1,d0
000757A2 51CB FFF4                  		dbf	d3,loc_71E6A
000757A6                            
000757A6 7602                       		moveq	#2,d3
000757A8 7028                       		moveq	#$28,d0
000757AA                            
000757AA                            loc_71E7C:
000757AA 1203                       		move.b	d3,d1
000757AC 4EBA 0000                  		jsr	sub_7272E(pc)
000757B0 5801                       		addq.b	#4,d1
000757B2 4EBA 0000                  		jsr	sub_7272E(pc)
000757B6 51CB FFF2                  		dbf	d3,loc_71E7C
000757BA                            
000757BA 4EBA 0000                  		jsr	sub_729B6(pc)
000757BE 6000 FDB2                  		bra.w	loc_71C44
000757C2                            ; ===========================================================================
000757C2                            
000757C2                            loc_71E94:				; XREF: loc_71E50
000757C2 422E 0003                  		clr.b	3(a6)
000757C6 7630                       		moveq	#$30,d3
000757C8 4BEE 0040                  		lea	$40(a6),a5
000757CC 7806                       		moveq	#6,d4
000757CE                            
000757CE                            loc_71EA0:
000757CE 0815 0007                  		btst	#7,(a5)
000757D2 6700                       		beq.s	loc_71EB8
000757D4 0815 0002                  		btst	#2,(a5)
000757D8 6600                       		bne.s	loc_71EB8
000757DA 103C 00B4                  		move.b	#-$4C,d0
000757DE 122D 000A                  		move.b	$A(a5),d1
000757E2 4EBA 0000                  		jsr	sub_72722(pc)
000757E6                            
000757E6                            loc_71EB8:
000757E6 DAC3                       		adda.w	d3,a5
000757E8 51CC FFE4                  		dbf	d4,loc_71EA0
000757EC                            
000757EC 4BEE 0220                  		lea	$220(a6),a5
000757F0 7802                       		moveq	#2,d4
000757F2                            
000757F2                            loc_71EC4:
000757F2 0815 0007                  		btst	#7,(a5)
000757F6 6700                       		beq.s	loc_71EDC
000757F8 0815 0002                  		btst	#2,(a5)
000757FC 6600                       		bne.s	loc_71EDC
000757FE 103C 00B4                  		move.b	#-$4C,d0
00075802 122D 000A                  		move.b	$A(a5),d1
00075806 4EBA 0000                  		jsr	sub_72722(pc)
0007580A                            
0007580A                            loc_71EDC:
0007580A DAC3                       		adda.w	d3,a5
0007580C 51CC FFE4                  		dbf	d4,loc_71EC4
00075810                            
00075810 4BEE 0340                  		lea	$340(a6),a5
00075814 0815 0007                  		btst	#7,(a5)
00075818 6700                       		beq.s	loc_71EFE
0007581A 0815 0002                  		btst	#2,(a5)
0007581E 6600                       		bne.s	loc_71EFE
00075820 103C 00B4                  		move.b	#-$4C,d0
00075824 122D 000A                  		move.b	$A(a5),d1
00075828 4EBA 0000                  		jsr	sub_72722(pc)
0007582C                            
0007582C                            loc_71EFE:
0007582C 6000 FD44                  		bra.w	loc_71C44
00075830                            
00075830                            ; ---------------------------------------------------------------------------
00075830                            ; Subroutine to	play a sound or	music track
00075830                            ; ---------------------------------------------------------------------------
00075830                            
00075830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075830                            
00075830                            
00075830                            Sound_Play:				; XREF: sub_71B4C
00075830 2079 0007 528E             		movea.l	(Go_SoundTypes).l,a0
00075836 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007583A 1616                       		move.b	0(a6),d3
0007583C 7802                       		moveq	#2,d4
0007583E                            
0007583E                            loc_71F12:
0007583E 1011                       		move.b	(a1),d0		; move track number to d0
00075840 1200                       		move.b	d0,d1
00075842 4219                       		clr.b	(a1)+
00075844 0400 0081                  		subi.b	#$81,d0
00075848 6500                       		bcs.s	loc_71F3E
0007584A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075850 6700                       		beq.s	loc_71F2C
00075852 1D41 000A                  		move.b	d1,$A(a6)
00075856 6000                       		bra.s	loc_71F3E
00075858                            ; ===========================================================================
00075858                            
00075858                            loc_71F2C:
00075858 0240 007F                  		andi.w	#$7F,d0
0007585C 1430 0000                  		move.b	(a0,d0.w),d2
00075860 B403                       		cmp.b	d3,d2
00075862 6500                       		bcs.s	loc_71F3E
00075864 1602                       		move.b	d2,d3
00075866 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007586A                            
0007586A                            loc_71F3E:
0007586A 51CC FFD2                  		dbf	d4,loc_71F12
0007586E                            
0007586E 4A03                       		tst.b	d3
00075870 6B00                       		bmi.s	locret_71F4A
00075872 1C83                       		move.b	d3,0(a6)
00075874                            
00075874                            locret_71F4A:
00075874 4E75                       		rts	
00075876                            ; End of function Sound_Play
00075876                            
00075876                            
00075876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075876                            
00075876                            
00075876                            Sound_ChkValue:				; XREF: sub_71B4C
00075876 7E00                       		moveq	#0,d7
00075878 1E2E 0009                  		move.b	9(a6),d7
0007587C 6700 0000                  		beq.w	Sound_E4
00075880 6A00                       		bpl.s	locret_71F8C
00075882 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075888 0C07 009F                  		cmpi.b	#$9F,d7
0007588C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075890 0C07 00A0                  		cmpi.b	#$A0,d7
00075894 6500 0000                  		bcs.w	locret_71F8C
00075898 0C07 00CF                  		cmpi.b	#$CF,d7
0007589C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000758A0 0C07 00D0                  		cmpi.b	#$D0,d7
000758A4 6500 0000                  		bcs.w	locret_71F8C
000758A8 0C07 00E0                  		cmpi.b	#$E0,d7
000758AC 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000758B0 0C07 00E5                  		cmpi.b	#$E5,d7
000758B4 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000758B6                            
000758B6                            locret_71F8C:
000758B6 4E75                       		rts	
000758B8                            ; ===========================================================================
000758B8                            
000758B8                            Sound_E0toE5				; XREF: Sound_ChkValue
000758B8 0407 00E0                  		subi.b	#$E0,d7
000758BC E54F                       		lsl.w	#2,d7
000758BE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000758C2                            ; ===========================================================================
000758C2                            
000758C2                            Sound_ExIndex:
000758C2 6000 0000                  		bra.w	Sound_E0
000758C6                            ; ===========================================================================
000758C6 6000 0000                  		bra.w	Sound_E1
000758CA                            ; ===========================================================================
000758CA 6000 0000                  		bra.w	Sound_E2
000758CE                            ; ===========================================================================
000758CE 6000 0000                  		bra.w	Sound_E3
000758D2                            ; ===========================================================================
000758D2 6000 0000                  		bra.w	Sound_E4
000758D6                            ; ===========================================================================
000758D6 6000 0000                  		bra.w	Sound_E5
000758DA                            ; ===========================================================================
000758DA                            ; ---------------------------------------------------------------------------
000758DA                            ; Play "Say-gaa" PCM sound
000758DA                            ; ---------------------------------------------------------------------------
000758DA                            
000758DA                            Sound_E1:				  
000758DA 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000758E0 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000758E6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000758EE                            PlayPCM_Loop:	  
000758EE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000758F4 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000758F8 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000758FC 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000758FE 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075900 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075904 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007590A 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007590E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075914 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075916 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075918                            return_PlayPCM: 
00075918 584F                       		addq.w	#4,sp 
0007591A 4E75                       		rts
0007591C                            		
0007591C                            ; ---------------------------------------------------------------------------
0007591C                            ; Play you are an idiot pcm sound
0007591C                            ; since the sfx already crashes the game forever load it here :V
0007591C                            ; ---------------------------------------------------------------------------
0007591C                            
0007591C                            Sound_E5: 
0007591C 4EB8 14E8                  		jsr	ClearScreen
00075920                            		;control port on a5
00075920 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075926 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007592C 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075930 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075934 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075938                            		
00075938 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007593C                            		
0007593C 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075942 41F9 0002 41DC             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075948 4EB8 1664                  		jsr	NemDec
0007594C 43F9 00FF 0000             		lea	($FF0000).l,a1
00075952 41F9 0002 417E             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075958 303C 0000                  		move.w	#0,d0
0007595C 4EB8 1942                  		jsr	EniDec
00075960 43F9 00FF 0000             		lea	($FF0000).l,a1
00075966 203C 4304 0003             		move.l	#$43040003,d0
0007596C 7223                       		moveq	#35,d1
0007596E 740D                       		moveq	#13,d2
00075970 4EB8 1644                  		jsr	ShowVDPGraphics
00075974 7014                       		moveq	#20,d0
00075976 4EB8 2302                  		jsr	PalLoad2	; load pallet
0007597A                            		
0007597A                            Sound_E5_StartPCM:
0007597A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075980 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075986 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007598E                            PlayPCM_LoopE5:	  
0007598E                            
0007598E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075994                            		
00075994 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075998                            		
00075998 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007599C 0200 000F                  		andi.b	#$F,d0
000759A0 6700                       		beq.s	SfxE5SwapPalette
000759A2                            		
000759A2 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000759A6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000759AA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000759AC 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
000759AE 60DE                       		bra.s	PlayPCM_LoopE5
000759B0                            		
000759B0                            SfxE5SwapPalette:
000759B0                            		
000759B0 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000759B6                            		
000759B6                            		
000759B6 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000759BC 6700                       		beq.s	@not_black
000759BE 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000759C4 6000                       		bra.s	@merge
000759C6                            	@not_black:
000759C6 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000759CC                            	@merge:
000759CC 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000759D0 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000759D4 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000759DA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000759DE                            		
000759DE 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000759E2 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000759E6 60A6                       		bra.s	PlayPCM_LoopE5
000759E8                            		
000759E8                            ; ===========================================================================
000759E8                            ; ---------------------------------------------------------------------------
000759E8                            ; Play music track $81-$9F
000759E8                            ; ---------------------------------------------------------------------------
000759E8                            
000759E8                            Sound_81to9F:				; XREF: Sound_ChkValue
000759E8 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000759EC 6600                       		bne.s	loc_72024	; if not, branch
000759EE 4A2E 0027                  		tst.b	$27(a6)
000759F2 6600 0000                  		bne.w	loc_721B6
000759F6 4BEE 0040                  		lea	$40(a6),a5
000759FA 7009                       		moveq	#9,d0
000759FC                            
000759FC                            loc_71FE6:
000759FC 0895 0002                  		bclr	#2,(a5)
00075A00 DAFC 0030                  		adda.w	#$30,a5
00075A04 51C8 FFF6                  		dbf	d0,loc_71FE6
00075A08                            
00075A08 4BEE 0220                  		lea	$220(a6),a5
00075A0C 7005                       		moveq	#5,d0
00075A0E                            
00075A0E                            loc_71FF8:
00075A0E 0895 0007                  		bclr	#7,(a5)
00075A12 DAFC 0030                  		adda.w	#$30,a5
00075A16 51C8 FFF6                  		dbf	d0,loc_71FF8
00075A1A 4216                       		clr.b	0(a6)
00075A1C 204E                       		movea.l	a6,a0
00075A1E 43EE 03A0                  		lea	$3A0(a6),a1
00075A22 303C 0087                  		move.w	#$87,d0
00075A26                            
00075A26                            loc_72012:
00075A26 22D8                       		move.l	(a0)+,(a1)+
00075A28 51C8 FFFC                  		dbf	d0,loc_72012
00075A2C                            
00075A2C 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075A32 4216                       		clr.b	0(a6)
00075A34 6000                       		bra.s	loc_7202C
00075A36                            ; ===========================================================================
00075A36                            
00075A36                            loc_72024:
00075A36 422E 0027                  		clr.b	$27(a6)
00075A3A 422E 0026                  		clr.b	$26(a6)
00075A3E                            
00075A3E                            loc_7202C:
00075A3E 4EBA 0000                  		jsr	sub_725CA(pc)
00075A42 2879 0007 529E             		movea.l	(off_719A0).l,a4
00075A48 0407 0081                  		subi.b	#$81,d7
00075A4C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075A52 2879 0007 5296             		movea.l	(Go_MusicIndex).l,a4
00075A58 E54F                       		lsl.w	#2,d7
00075A5A 2874 7000                  		movea.l	(a4,d7.w),a4
00075A5E 7000                       		moveq	#0,d0
00075A60 3014                       		move.w	(a4),d0
00075A62 D08C                       		add.l	a4,d0
00075A64 2D40 0018                  		move.l	d0,$18(a6)
00075A68 102C 0005                  		move.b	5(a4),d0
00075A6C 1D40 0028                  		move.b	d0,$28(a6)
00075A70 4A2E 002A                  		tst.b	$2A(a6)
00075A74 6700                       		beq.s	loc_72068
00075A76 102E 0029                  		move.b	$29(a6),d0
00075A7A                            
00075A7A                            loc_72068:
00075A7A 1D40 0002                  		move.b	d0,2(a6)
00075A7E 1D40 0001                  		move.b	d0,1(a6)
00075A82 7200                       		moveq	#0,d1
00075A84 264C                       		movea.l	a4,a3
00075A86 5C4C                       		addq.w	#6,a4
00075A88 7E00                       		moveq	#0,d7
00075A8A 1E2B 0002                  		move.b	2(a3),d7
00075A8E 6700 0000                  		beq.w	loc_72114
00075A92 5307                       		subq.b	#1,d7
00075A94 123C 00C0                  		move.b	#-$40,d1
00075A98 182B 0004                  		move.b	4(a3),d4
00075A9C 7C30                       		moveq	#$30,d6
00075A9E 1A3C 0001                  		move.b	#1,d5
00075AA2 43EE 0040                  		lea	$40(a6),a1
00075AA6 45FA 0000                  		lea	byte_721BA(pc),a2
00075AAA                            
00075AAA                            loc_72098:
00075AAA 08D1 0007                  		bset	#7,(a1)
00075AAE 135A 0001                  		move.b	(a2)+,1(a1)
00075AB2 1344 0002                  		move.b	d4,2(a1)
00075AB6 1346 000D                  		move.b	d6,$D(a1)
00075ABA 1341 000A                  		move.b	d1,$A(a1)
00075ABE 1345 000E                  		move.b	d5,$E(a1)
00075AC2 7000                       		moveq	#0,d0
00075AC4 301C                       		move.w	(a4)+,d0
00075AC6 D08B                       		add.l	a3,d0
00075AC8 2340 0004                  		move.l	d0,4(a1)
00075ACC 335C 0008                  		move.w	(a4)+,8(a1)
00075AD0 D2C6                       		adda.w	d6,a1
00075AD2 51CF FFD6                  		dbf	d7,loc_72098
00075AD6 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075ADC 6600                       		bne.s	loc_720D8
00075ADE 702B                       		moveq	#$2B,d0
00075AE0 7200                       		moveq	#0,d1
00075AE2 4EBA 0000                  		jsr	sub_7272E(pc)
00075AE6 6000 0000                  		bra.w	loc_72114
00075AEA                            ; ===========================================================================
00075AEA                            
00075AEA                            loc_720D8:
00075AEA 7028                       		moveq	#$28,d0
00075AEC 7206                       		moveq	#6,d1
00075AEE 4EBA 0000                  		jsr	sub_7272E(pc)
00075AF2 103C 0042                  		move.b	#$42,d0
00075AF6 727F                       		moveq	#$7F,d1
00075AF8 4EBA 0000                  		jsr	sub_72764(pc)
00075AFC 103C 004A                  		move.b	#$4A,d0
00075B00 727F                       		moveq	#$7F,d1
00075B02 4EBA 0000                  		jsr	sub_72764(pc)
00075B06 103C 0046                  		move.b	#$46,d0
00075B0A 727F                       		moveq	#$7F,d1
00075B0C 4EBA 0000                  		jsr	sub_72764(pc)
00075B10 103C 004E                  		move.b	#$4E,d0
00075B14 727F                       		moveq	#$7F,d1
00075B16 4EBA 0000                  		jsr	sub_72764(pc)
00075B1A 103C 00B6                  		move.b	#-$4A,d0
00075B1E 123C 00C0                  		move.b	#-$40,d1
00075B22 4EBA 0000                  		jsr	sub_72764(pc)
00075B26                            
00075B26                            loc_72114:
00075B26 7E00                       		moveq	#0,d7
00075B28 1E2B 0003                  		move.b	3(a3),d7
00075B2C 6700                       		beq.s	loc_72154
00075B2E 5307                       		subq.b	#1,d7
00075B30 43EE 0190                  		lea	$190(a6),a1
00075B34 45FA 0000                  		lea	byte_721C2(pc),a2
00075B38                            
00075B38                            loc_72126:
00075B38 08D1 0007                  		bset	#7,(a1)
00075B3C 135A 0001                  		move.b	(a2)+,1(a1)
00075B40 1344 0002                  		move.b	d4,2(a1)
00075B44 1346 000D                  		move.b	d6,$D(a1)
00075B48 1345 000E                  		move.b	d5,$E(a1)
00075B4C 7000                       		moveq	#0,d0
00075B4E 301C                       		move.w	(a4)+,d0
00075B50 D08B                       		add.l	a3,d0
00075B52 2340 0004                  		move.l	d0,4(a1)
00075B56 335C 0008                  		move.w	(a4)+,8(a1)
00075B5A 101C                       		move.b	(a4)+,d0
00075B5C 135C 000B                  		move.b	(a4)+,$B(a1)
00075B60 D2C6                       		adda.w	d6,a1
00075B62 51CF FFD4                  		dbf	d7,loc_72126
00075B66                            
00075B66                            loc_72154:
00075B66 43EE 0220                  		lea	$220(a6),a1
00075B6A 7E05                       		moveq	#5,d7
00075B6C                            
00075B6C                            loc_7215A:
00075B6C 4A11                       		tst.b	(a1)
00075B6E 6A00 0000                  		bpl.w	loc_7217C
00075B72 7000                       		moveq	#0,d0
00075B74 1029 0001                  		move.b	1(a1),d0
00075B78 6B00                       		bmi.s	loc_7216E
00075B7A 5500                       		subq.b	#2,d0
00075B7C E508                       		lsl.b	#2,d0
00075B7E 6000                       		bra.s	loc_72170
00075B80                            ; ===========================================================================
00075B80                            
00075B80                            loc_7216E:
00075B80 E608                       		lsr.b	#3,d0
00075B82                            
00075B82                            loc_72170:
00075B82 41FA 0000                  		lea	dword_722CC(pc),a0
00075B86 2070 0000                  		movea.l	(a0,d0.w),a0
00075B8A 08D0 0002                  		bset	#2,(a0)
00075B8E                            
00075B8E                            loc_7217C:
00075B8E D2C6                       		adda.w	d6,a1
00075B90 51CF FFDA                  		dbf	d7,loc_7215A
00075B94                            
00075B94 4A6E 0340                  		tst.w	$340(a6)
00075B98 6A00                       		bpl.s	loc_7218E
00075B9A 08EE 0002 0100             		bset	#2,$100(a6)
00075BA0                            
00075BA0                            loc_7218E:
00075BA0 4A6E 0370                  		tst.w	$370(a6)
00075BA4 6A00                       		bpl.s	loc_7219A
00075BA6 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075BAC                            
00075BAC                            loc_7219A:
00075BAC 4BEE 0070                  		lea	$70(a6),a5
00075BB0 7805                       		moveq	#5,d4
00075BB2                            
00075BB2                            loc_721A0:
00075BB2 4EBA 0000                  		jsr	sub_726FE(pc)
00075BB6 DAC6                       		adda.w	d6,a5
00075BB8 51CC FFF8                  		dbf	d4,loc_721A0
00075BBC 7802                       		moveq	#2,d4
00075BBE                            
00075BBE                            loc_721AC:
00075BBE 4EBA 0000                  		jsr	sub_729A0(pc)
00075BC2 DAC6                       		adda.w	d6,a5
00075BC4 51CC FFF8                  		dbf	d4,loc_721AC
00075BC8                            
00075BC8                            loc_721B6:
00075BC8 584F                       		addq.w	#4,sp
00075BCA 4E75                       		rts	
00075BCC                            ; ===========================================================================
00075BCC 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075BD4                            		even
00075BD4 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075BD8                            		even
00075BD8                            ; ===========================================================================
00075BD8                            ; ---------------------------------------------------------------------------
00075BD8                            ; Play normal sound effect
00075BD8                            ; ---------------------------------------------------------------------------
00075BD8                            
00075BD8                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075BD8 4A2E 0027                  		tst.b	$27(a6)
00075BDC 6600 0000                  		bne.w	loc_722C6
00075BE0 4A2E 0004                  		tst.b	4(a6)
00075BE4 6600 0000                  		bne.w	loc_722C6
00075BE8 4A2E 0024                  		tst.b	$24(a6)
00075BEC 6600 0000                  		bne.w	loc_722C6
00075BF0 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075BF4 6600                       		bne.s	Sound_notB5	; if not, branch
00075BF6 4A2E 002B                  		tst.b	$2B(a6)
00075BFA 6600                       		bne.s	loc_721EE
00075BFC 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075C00                            
00075C00                            loc_721EE:
00075C00 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075C06                            
00075C06                            Sound_notB5:
00075C06 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075C0A 6600                       		bne.s	Sound_notA7	; if not, branch
00075C0C 4A2E 002C                  		tst.b	$2C(a6)
00075C10 6600 0000                  		bne.w	locret_722C4
00075C14 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075C1A                            
00075C1A                            Sound_notA7:
00075C1A 2079 0007 529A             		movea.l	(Go_SoundIndex).l,a0
00075C20 0407 00A0                  		subi.b	#$A0,d7
00075C24 E54F                       		lsl.w	#2,d7
00075C26 2670 7000                  		movea.l	(a0,d7.w),a3
00075C2A 224B                       		movea.l	a3,a1
00075C2C 7200                       		moveq	#0,d1
00075C2E 3219                       		move.w	(a1)+,d1
00075C30 D28B                       		add.l	a3,d1
00075C32 1A19                       		move.b	(a1)+,d5
00075C34 1E19                       		move.b	(a1)+,d7
00075C36 5307                       		subq.b	#1,d7
00075C38 7C30                       		moveq	#$30,d6
00075C3A                            
00075C3A                            loc_72228:
00075C3A 7600                       		moveq	#0,d3
00075C3C 1629 0001                  		move.b	1(a1),d3
00075C40 1803                       		move.b	d3,d4
00075C42 6B00                       		bmi.s	loc_72244
00075C44 5543                       		subq.w	#2,d3
00075C46 E54B                       		lsl.w	#2,d3
00075C48 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C4C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C50 08D5 0002                  		bset	#2,(a5)
00075C54 6000                       		bra.s	loc_7226E
00075C56                            ; ===========================================================================
00075C56                            
00075C56                            loc_72244:
00075C56 E64B                       		lsr.w	#3,d3
00075C58 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C5C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C60 08D5 0002                  		bset	#2,(a5)
00075C64 0C04 00C0                  		cmpi.b	#$C0,d4
00075C68 6600                       		bne.s	loc_7226E
00075C6A 1004                       		move.b	d4,d0
00075C6C 0000 001F                  		ori.b	#$1F,d0
00075C70 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C76 0840 0005                  		bchg	#5,d0
00075C7A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C80                            
00075C80                            loc_7226E:
00075C80 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075C84 244D                       		movea.l	a5,a2
00075C86 700B                       		moveq	#$B,d0
00075C88                            
00075C88                            loc_72276:
00075C88 429A                       		clr.l	(a2)+
00075C8A 51C8 FFFC                  		dbf	d0,loc_72276
00075C8E                            
00075C8E 3A99                       		move.w	(a1)+,(a5)
00075C90 1B45 0002                  		move.b	d5,2(a5)
00075C94 7000                       		moveq	#0,d0
00075C96 3019                       		move.w	(a1)+,d0
00075C98 D08B                       		add.l	a3,d0
00075C9A 2B40 0004                  		move.l	d0,4(a5)
00075C9E 3B59 0008                  		move.w	(a1)+,8(a5)
00075CA2 1B7C 0001 000E             		move.b	#1,$E(a5)
00075CA8 1B46 000D                  		move.b	d6,$D(a5)
00075CAC 4A04                       		tst.b	d4
00075CAE 6B00                       		bmi.s	loc_722A8
00075CB0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075CB6 2B41 0020                  		move.l	d1,$20(a5)
00075CBA                            
00075CBA                            loc_722A8:
00075CBA 51CF FF7E                  		dbf	d7,loc_72228
00075CBE                            
00075CBE 4A2E 0250                  		tst.b	$250(a6)
00075CC2 6A00                       		bpl.s	loc_722B8
00075CC4 08EE 0002 0340             		bset	#2,$340(a6)
00075CCA                            
00075CCA                            loc_722B8:
00075CCA 4A2E 0310                  		tst.b	$310(a6)
00075CCE 6A00                       		bpl.s	locret_722C4
00075CD0 08EE 0002 0370             		bset	#2,$370(a6)
00075CD6                            
00075CD6                            locret_722C4:
00075CD6 4E75                       		rts	
00075CD8                            ; ===========================================================================
00075CD8                            
00075CD8                            loc_722C6:
00075CD8 4216                       		clr.b	0(a6)
00075CDA 4E75                       		rts	
00075CDC                            ; ===========================================================================
00075CDC 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075CE0 0000 0000                  		dc.l 0
00075CE4 00FF F100                  		dc.l $FFF100
00075CE8 00FF F130                  		dc.l $FFF130
00075CEC 00FF F190                  		dc.l $FFF190
00075CF0 00FF F1C0                  		dc.l $FFF1C0
00075CF4 00FF F1F0                  		dc.l $FFF1F0
00075CF8 00FF F1F0                  		dc.l $FFF1F0
00075CFC 00FF F220                  dword_722EC:	dc.l $FFF220
00075D00 0000 0000                  		dc.l 0
00075D04 00FF F250                  		dc.l $FFF250
00075D08 00FF F280                  		dc.l $FFF280
00075D0C 00FF F2B0                  		dc.l $FFF2B0
00075D10 00FF F2E0                  		dc.l $FFF2E0
00075D14 00FF F310                  		dc.l $FFF310
00075D18 00FF F310                  		dc.l $FFF310
00075D1C                            ; ===========================================================================
00075D1C                            ; ---------------------------------------------------------------------------
00075D1C                            ; Play GHZ waterfall sound
00075D1C                            ; ---------------------------------------------------------------------------
00075D1C                            
00075D1C                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075D1C 4A2E 0027                  		tst.b	$27(a6)
00075D20 6600 0000                  		bne.w	locret_723C6
00075D24 4A2E 0004                  		tst.b	4(a6)
00075D28 6600 0000                  		bne.w	locret_723C6
00075D2C 4A2E 0024                  		tst.b	$24(a6)
00075D30 6600 0000                  		bne.w	locret_723C6
00075D34 2079 0007 5292             		movea.l	(Go_SoundD0).l,a0
00075D3A 0407 00D0                  		subi.b	#$D0,d7
00075D3E E54F                       		lsl.w	#2,d7
00075D40 2670 7000                  		movea.l	(a0,d7.w),a3
00075D44 224B                       		movea.l	a3,a1
00075D46 7000                       		moveq	#0,d0
00075D48 3019                       		move.w	(a1)+,d0
00075D4A D08B                       		add.l	a3,d0
00075D4C 2D40 0020                  		move.l	d0,$20(a6)
00075D50 1A19                       		move.b	(a1)+,d5
00075D52 1E19                       		move.b	(a1)+,d7
00075D54 5307                       		subq.b	#1,d7
00075D56 7C30                       		moveq	#$30,d6
00075D58                            
00075D58                            loc_72348:
00075D58 1829 0001                  		move.b	1(a1),d4
00075D5C 6B00                       		bmi.s	loc_7235A
00075D5E 08EE 0002 0100             		bset	#2,$100(a6)
00075D64 4BEE 0340                  		lea	$340(a6),a5
00075D68 6000                       		bra.s	loc_72364
00075D6A                            ; ===========================================================================
00075D6A                            
00075D6A                            loc_7235A:
00075D6A 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075D70 4BEE 0370                  		lea	$370(a6),a5
00075D74                            
00075D74                            loc_72364:
00075D74 244D                       		movea.l	a5,a2
00075D76 700B                       		moveq	#$B,d0
00075D78                            
00075D78                            loc_72368:
00075D78 429A                       		clr.l	(a2)+
00075D7A 51C8 FFFC                  		dbf	d0,loc_72368
00075D7E                            
00075D7E 3A99                       		move.w	(a1)+,(a5)
00075D80 1B45 0002                  		move.b	d5,2(a5)
00075D84 7000                       		moveq	#0,d0
00075D86 3019                       		move.w	(a1)+,d0
00075D88 D08B                       		add.l	a3,d0
00075D8A 2B40 0004                  		move.l	d0,4(a5)
00075D8E 3B59 0008                  		move.w	(a1)+,8(a5)
00075D92 1B7C 0001 000E             		move.b	#1,$E(a5)
00075D98 1B46 000D                  		move.b	d6,$D(a5)
00075D9C 4A04                       		tst.b	d4
00075D9E 6B00                       		bmi.s	loc_72396
00075DA0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075DA6                            
00075DA6                            loc_72396:
00075DA6 51CF FFB0                  		dbf	d7,loc_72348
00075DAA                            
00075DAA 4A2E 0250                  		tst.b	$250(a6)
00075DAE 6A00                       		bpl.s	loc_723A6
00075DB0 08EE 0002 0340             		bset	#2,$340(a6)
00075DB6                            
00075DB6                            loc_723A6:
00075DB6 4A2E 0310                  		tst.b	$310(a6)
00075DBA 6A00                       		bpl.s	locret_723C6
00075DBC 08EE 0002 0370             		bset	#2,$370(a6)
00075DC2 0004 001F                  		ori.b	#$1F,d4
00075DC6 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DCC 0844 0005                  		bchg	#5,d4
00075DD0 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DD6                            
00075DD6                            locret_723C6:
00075DD6 4E75                       		rts	
00075DD8                            ; End of function Sound_ChkValue
00075DD8                            
00075DD8                            ; ===========================================================================
00075DD8 00FF F100                  		dc.l $FFF100
00075DDC 00FF F1F0                  		dc.l $FFF1F0
00075DE0 00FF F250                  		dc.l $FFF250
00075DE4 00FF F310                  		dc.l $FFF310
00075DE8 00FF F340                  		dc.l $FFF340
00075DEC 00FF F370                  		dc.l $FFF370
00075DF0                            
00075DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DF0                            
00075DF0                            
00075DF0                            Snd_FadeOut1:				; XREF: Sound_E0
00075DF0 4216                       		clr.b	0(a6)
00075DF2 4BEE 0220                  		lea	$220(a6),a5
00075DF6 7E05                       		moveq	#5,d7
00075DF8                            
00075DF8                            loc_723EA:
00075DF8 4A15                       		tst.b	(a5)
00075DFA 6A00 0000                  		bpl.w	loc_72472
00075DFE 0895 0007                  		bclr	#7,(a5)
00075E02 7600                       		moveq	#0,d3
00075E04 162D 0001                  		move.b	1(a5),d3
00075E08 6B00                       		bmi.s	loc_7243C
00075E0A 4EBA 0000                  		jsr	sub_726FE(pc)
00075E0E 0C03 0004                  		cmpi.b	#4,d3
00075E12 6600                       		bne.s	loc_72416
00075E14 4A2E 0340                  		tst.b	$340(a6)
00075E18 6A00                       		bpl.s	loc_72416
00075E1A 4BEE 0340                  		lea	$340(a6),a5
00075E1E 226E 0020                  		movea.l	$20(a6),a1
00075E22 6000                       		bra.s	loc_72428
00075E24                            ; ===========================================================================
00075E24                            
00075E24                            loc_72416:
00075E24 5503                       		subq.b	#2,d3
00075E26 E50B                       		lsl.b	#2,d3
00075E28 41FA FEB2                  		lea	dword_722CC(pc),a0
00075E2C 264D                       		movea.l	a5,a3
00075E2E 2A70 3000                  		movea.l	(a0,d3.w),a5
00075E32 226E 0018                  		movea.l	$18(a6),a1
00075E36                            
00075E36                            loc_72428:
00075E36 0895 0002                  		bclr	#2,(a5)
00075E3A 08D5 0001                  		bset	#1,(a5)
00075E3E 102D 000B                  		move.b	$B(a5),d0
00075E42 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E46 2A4B                       		movea.l	a3,a5
00075E48 6000                       		bra.s	loc_72472
00075E4A                            ; ===========================================================================
00075E4A                            
00075E4A                            loc_7243C:
00075E4A 4EBA 0000                  		jsr	sub_729A0(pc)
00075E4E 41EE 0370                  		lea	$370(a6),a0
00075E52 0C03 00E0                  		cmpi.b	#$E0,d3
00075E56 6700                       		beq.s	loc_7245A
00075E58 0C03 00C0                  		cmpi.b	#$C0,d3
00075E5C 6700                       		beq.s	loc_7245A
00075E5E E60B                       		lsr.b	#3,d3
00075E60 41FA FE7A                  		lea	dword_722CC(pc),a0
00075E64 2070 3000                  		movea.l	(a0,d3.w),a0
00075E68                            
00075E68                            loc_7245A:
00075E68 0890 0002                  		bclr	#2,(a0)
00075E6C 08D0 0001                  		bset	#1,(a0)
00075E70 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075E76 6600                       		bne.s	loc_72472
00075E78 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075E80                            
00075E80                            loc_72472:
00075E80 DAFC 0030                  		adda.w	#$30,a5
00075E84 51CF FF72                  		dbf	d7,loc_723EA
00075E88                            
00075E88 4E75                       		rts	
00075E8A                            ; End of function Snd_FadeOut1
00075E8A                            
00075E8A                            
00075E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E8A                            
00075E8A                            
00075E8A                            Snd_FadeOut2:				; XREF: Sound_E0
00075E8A 4BEE 0340                  		lea	$340(a6),a5
00075E8E 4A15                       		tst.b	(a5)
00075E90 6A00                       		bpl.s	loc_724AE
00075E92 0895 0007                  		bclr	#7,(a5)
00075E96 0815 0002                  		btst	#2,(a5)
00075E9A 6600                       		bne.s	loc_724AE
00075E9C 4EBA 0000                  		jsr	loc_7270A(pc)
00075EA0 4BEE 0100                  		lea	$100(a6),a5
00075EA4 0895 0002                  		bclr	#2,(a5)
00075EA8 08D5 0001                  		bset	#1,(a5)
00075EAC 4A15                       		tst.b	(a5)
00075EAE 6A00                       		bpl.s	loc_724AE
00075EB0 226E 0018                  		movea.l	$18(a6),a1
00075EB4 102D 000B                  		move.b	$B(a5),d0
00075EB8 4EBA 0000                  		jsr	sub_72C4E(pc)
00075EBC                            
00075EBC                            loc_724AE:
00075EBC 4BEE 0370                  		lea	$370(a6),a5
00075EC0 4A15                       		tst.b	(a5)
00075EC2 6A00                       		bpl.s	locret_724E4
00075EC4 0895 0007                  		bclr	#7,(a5)
00075EC8 0815 0002                  		btst	#2,(a5)
00075ECC 6600                       		bne.s	locret_724E4
00075ECE 4EBA 0000                  		jsr	loc_729A6(pc)
00075ED2 4BEE 01F0                  		lea	$1F0(a6),a5
00075ED6 0895 0002                  		bclr	#2,(a5)
00075EDA 08D5 0001                  		bset	#1,(a5)
00075EDE 4A15                       		tst.b	(a5)
00075EE0 6A00                       		bpl.s	locret_724E4
00075EE2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075EE8 6600                       		bne.s	locret_724E4
00075EEA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075EF2                            
00075EF2                            locret_724E4:
00075EF2 4E75                       		rts	
00075EF4                            ; End of function Snd_FadeOut2
00075EF4                            
00075EF4                            ; ===========================================================================
00075EF4                            ; ---------------------------------------------------------------------------
00075EF4                            ; Fade out music
00075EF4                            ; ---------------------------------------------------------------------------
00075EF4                            
00075EF4                            Sound_E0:				; XREF: Sound_ExIndex
00075EF4 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075EF8 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075EFC 1D7C 0003 0006             		move.b	#3,6(a6)
00075F02 1D7C 0028 0004             		move.b	#$28,4(a6)
00075F08 422E 0040                  		clr.b	$40(a6)
00075F0C 422E 002A                  		clr.b	$2A(a6)
00075F10 4E75                       		rts	
00075F12                            
00075F12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F12                            
00075F12                            
00075F12                            sub_72504:				; XREF: sub_71B4C
00075F12 102E 0006                  		move.b	6(a6),d0
00075F16 6700                       		beq.s	loc_72510
00075F18 532E 0006                  		subq.b	#1,6(a6)
00075F1C 4E75                       		rts	
00075F1E                            ; ===========================================================================
00075F1E                            
00075F1E                            loc_72510:
00075F1E 532E 0004                  		subq.b	#1,4(a6)
00075F22 6700 0000                  		beq.w	Sound_E4
00075F26 1D7C 0003 0006             		move.b	#3,6(a6)
00075F2C 4BEE 0070                  		lea	$70(a6),a5
00075F30 7E05                       		moveq	#5,d7
00075F32                            
00075F32                            loc_72524:
00075F32 4A15                       		tst.b	(a5)
00075F34 6A00                       		bpl.s	loc_72538
00075F36 522D 0009                  		addq.b	#1,9(a5)
00075F3A 6A00                       		bpl.s	loc_72534
00075F3C 0895 0007                  		bclr	#7,(a5)
00075F40 6000                       		bra.s	loc_72538
00075F42                            ; ===========================================================================
00075F42                            
00075F42                            loc_72534:
00075F42 4EBA 0000                  		jsr	sub_72CB4(pc)
00075F46                            
00075F46                            loc_72538:
00075F46 DAFC 0030                  		adda.w	#$30,a5
00075F4A 51CF FFE6                  		dbf	d7,loc_72524
00075F4E                            
00075F4E 7E02                       		moveq	#2,d7
00075F50                            
00075F50                            loc_72542:
00075F50 4A15                       		tst.b	(a5)
00075F52 6A00                       		bpl.s	loc_72560
00075F54 522D 0009                  		addq.b	#1,9(a5)
00075F58 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075F5E 6500                       		bcs.s	loc_72558
00075F60 0895 0007                  		bclr	#7,(a5)
00075F64 6000                       		bra.s	loc_72560
00075F66                            ; ===========================================================================
00075F66                            
00075F66                            loc_72558:
00075F66 1C2D 0009                  		move.b	9(a5),d6
00075F6A 4EBA 0000                  		jsr	sub_7296A(pc)
00075F6E                            
00075F6E                            loc_72560:
00075F6E DAFC 0030                  		adda.w	#$30,a5
00075F72 51CF FFDC                  		dbf	d7,loc_72542
00075F76                            
00075F76 4E75                       		rts	
00075F78                            ; End of function sub_72504
00075F78                            
00075F78                            
00075F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F78                            
00075F78                            
00075F78                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075F78 7602                       		moveq	#2,d3
00075F7A 7028                       		moveq	#$28,d0
00075F7C                            
00075F7C                            loc_7256E:
00075F7C 1203                       		move.b	d3,d1
00075F7E 4EBA 0000                  		jsr	sub_7272E(pc)
00075F82 5801                       		addq.b	#4,d1
00075F84 4EBA 0000                  		jsr	sub_7272E(pc)
00075F88 51CB FFF2                  		dbf	d3,loc_7256E
00075F8C                            
00075F8C 7040                       		moveq	#$40,d0
00075F8E 727F                       		moveq	#$7F,d1
00075F90 7802                       		moveq	#2,d4
00075F92                            
00075F92                            loc_72584:
00075F92 7603                       		moveq	#3,d3
00075F94                            
00075F94                            loc_72586:
00075F94 4EBA 0000                  		jsr	sub_7272E(pc)
00075F98 4EBA 0000                  		jsr	sub_72764(pc)
00075F9C 5840                       		addq.w	#4,d0
00075F9E 51CB FFF4                  		dbf	d3,loc_72586
00075FA2                            
00075FA2 0400 000F                  		subi.b	#$F,d0
00075FA6 51CC FFEA                  		dbf	d4,loc_72584
00075FAA                            
00075FAA 4E75                       		rts	
00075FAC                            ; End of function sub_7256A
00075FAC                            
00075FAC                            ; ===========================================================================
00075FAC                            ; ---------------------------------------------------------------------------
00075FAC                            ; Stop music
00075FAC                            ; ---------------------------------------------------------------------------
00075FAC                            
00075FAC                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075FAC 702B                       		moveq	#$2B,d0
00075FAE 123C 0080                  		move.b	#$80,d1
00075FB2 4EBA 0000                  		jsr	sub_7272E(pc)
00075FB6 7027                       		moveq	#$27,d0
00075FB8 7200                       		moveq	#0,d1
00075FBA 4EBA 0000                  		jsr	sub_7272E(pc)
00075FBE 204E                       		movea.l	a6,a0
00075FC0 303C 00E3                  		move.w	#$E3,d0
00075FC4                            
00075FC4                            loc_725B6:
00075FC4 4298                       		clr.l	(a0)+
00075FC6 51C8 FFFC                  		dbf	d0,loc_725B6
00075FCA                            
00075FCA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00075FD0 4EBA FFA6                  		jsr	sub_7256A(pc)
00075FD4 6000 0000                  		bra.w	sub_729B6
00075FD8                            
00075FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FD8                            
00075FD8                            
00075FD8                            sub_725CA:				; XREF: Sound_ChkValue
00075FD8 204E                       		movea.l	a6,a0
00075FDA 1216                       		move.b	0(a6),d1
00075FDC 142E 0027                  		move.b	$27(a6),d2
00075FE0 162E 002A                  		move.b	$2A(a6),d3
00075FE4 182E 0026                  		move.b	$26(a6),d4
00075FE8 3A2E 000A                  		move.w	$A(a6),d5
00075FEC 303C 0087                  		move.w	#$87,d0
00075FF0                            
00075FF0                            loc_725E4:
00075FF0 4298                       		clr.l	(a0)+
00075FF2 51C8 FFFC                  		dbf	d0,loc_725E4
00075FF6                            
00075FF6 1C81                       		move.b	d1,0(a6)
00075FF8 1D42 0027                  		move.b	d2,$27(a6)
00075FFC 1D43 002A                  		move.b	d3,$2A(a6)
00076000 1D44 0026                  		move.b	d4,$26(a6)
00076004 3D45 000A                  		move.w	d5,$A(a6)
00076008 1D7C 0080 0009             		move.b	#$80,9(a6)
0007600E 4EBA FF68                  		jsr	sub_7256A(pc)
00076012 6000 0000                  		bra.w	sub_729B6
00076016                            ; End of function sub_725CA
00076016                            
00076016                            
00076016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076016                            
00076016                            
00076016                            sub_7260C:				; XREF: sub_71B4C
00076016 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007601C 41EE 004E                  		lea	$4E(a6),a0
00076020 7030                       		moveq	#$30,d0
00076022 7209                       		moveq	#9,d1
00076024                            
00076024                            loc_7261A:
00076024 5210                       		addq.b	#1,(a0)
00076026 D0C0                       		adda.w	d0,a0
00076028 51C9 FFFA                  		dbf	d1,loc_7261A
0007602C                            
0007602C 4E75                       		rts	
0007602E                            ; End of function sub_7260C
0007602E                            
0007602E                            ; ===========================================================================
0007602E                            ; ---------------------------------------------------------------------------
0007602E                            ; Speed	up music
0007602E                            ; ---------------------------------------------------------------------------
0007602E                            
0007602E                            Sound_E2:				; XREF: Sound_ExIndex
0007602E 4A2E 0027                  		tst.b	$27(a6)
00076032 6600                       		bne.s	loc_7263E
00076034 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007603A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00076040 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00076046 4E75                       		rts	
00076048                            ; ===========================================================================
00076048                            
00076048                            loc_7263E:
00076048 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007604E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00076054 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007605A 4E75                       		rts	
0007605C                            ; ===========================================================================
0007605C                            ; ---------------------------------------------------------------------------
0007605C                            ; Change music back to normal speed
0007605C                            ; ---------------------------------------------------------------------------
0007605C                            
0007605C                            Sound_E3:				; XREF: Sound_ExIndex
0007605C 4A2E 0027                  		tst.b	$27(a6)
00076060 6600                       		bne.s	loc_7266A
00076062 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076068 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007606E 422E 002A                  		clr.b	$2A(a6)
00076072 4E75                       		rts	
00076074                            ; ===========================================================================
00076074                            
00076074                            loc_7266A:
00076074 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007607A 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00076080 422E 03CA                  		clr.b	$3CA(a6)
00076084 4E75                       		rts	
00076086                            
00076086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076086                            
00076086                            
00076086                            sub_7267C:				; XREF: sub_71B4C
00076086 4A2E 0025                  		tst.b	$25(a6)
0007608A 6700                       		beq.s	loc_72688
0007608C 532E 0025                  		subq.b	#1,$25(a6)
00076090 4E75                       		rts	
00076092                            ; ===========================================================================
00076092                            
00076092                            loc_72688:
00076092 4A2E 0026                  		tst.b	$26(a6)
00076096 6700                       		beq.s	loc_726D6
00076098 532E 0026                  		subq.b	#1,$26(a6)
0007609C 1D7C 0002 0025             		move.b	#2,$25(a6)
000760A2 4BEE 0070                  		lea	$70(a6),a5
000760A6 7E05                       		moveq	#5,d7
000760A8                            
000760A8                            loc_7269E:
000760A8 4A15                       		tst.b	(a5)
000760AA 6A00                       		bpl.s	loc_726AA
000760AC 532D 0009                  		subq.b	#1,9(a5)
000760B0 4EBA 0000                  		jsr	sub_72CB4(pc)
000760B4                            
000760B4                            loc_726AA:
000760B4 DAFC 0030                  		adda.w	#$30,a5
000760B8 51CF FFEE                  		dbf	d7,loc_7269E
000760BC 7E02                       		moveq	#2,d7
000760BE                            
000760BE                            loc_726B4:
000760BE 4A15                       		tst.b	(a5)
000760C0 6A00                       		bpl.s	loc_726CC
000760C2 532D 0009                  		subq.b	#1,9(a5)
000760C6 1C2D 0009                  		move.b	9(a5),d6
000760CA 0C06 0010                  		cmpi.b	#$10,d6
000760CE 6500                       		bcs.s	loc_726C8
000760D0 7C0F                       		moveq	#$F,d6
000760D2                            
000760D2                            loc_726C8:
000760D2 4EBA 0000                  		jsr	sub_7296A(pc)
000760D6                            
000760D6                            loc_726CC:
000760D6 DAFC 0030                  		adda.w	#$30,a5
000760DA 51CF FFE2                  		dbf	d7,loc_726B4
000760DE 4E75                       		rts	
000760E0                            ; ===========================================================================
000760E0                            
000760E0                            loc_726D6:
000760E0 08AE 0002 0040             		bclr	#2,$40(a6)
000760E6 422E 0024                  		clr.b	$24(a6)
000760EA 4E75                       		rts	
000760EC                            ; End of function sub_7267C
000760EC                            
000760EC                            ; ===========================================================================
000760EC                            
000760EC                            loc_726E2:				; XREF: sub_71CCA
000760EC 0815 0001                  		btst	#1,(a5)
000760F0 6600                       		bne.s	locret_726FC
000760F2 0815 0002                  		btst	#2,(a5)
000760F6 6600                       		bne.s	locret_726FC
000760F8 7028                       		moveq	#$28,d0
000760FA 122D 0001                  		move.b	1(a5),d1
000760FE 0001 00F0                  		ori.b	#-$10,d1
00076102 6000 0000                  		bra.w	sub_7272E
00076106                            ; ===========================================================================
00076106                            
00076106                            locret_726FC:
00076106 4E75                       		rts	
00076108                            
00076108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076108                            
00076108                            
00076108                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00076108 0815 0004                  		btst	#4,(a5)
0007610C 6600                       		bne.s	locret_72714
0007610E 0815 0002                  		btst	#2,(a5)
00076112 6600                       		bne.s	locret_72714
00076114                            
00076114                            loc_7270A:				; XREF: Snd_FadeOut2
00076114 7028                       		moveq	#$28,d0
00076116 122D 0001                  		move.b	1(a5),d1
0007611A 6000 0000                  		bra.w	sub_7272E
0007611E                            ; ===========================================================================
0007611E                            
0007611E                            locret_72714:
0007611E 4E75                       		rts	
00076120                            ; End of function sub_726FE
00076120                            
00076120                            ; ===========================================================================
00076120                            
00076120                            loc_72716:				; XREF: sub_72A5A
00076120 0815 0002                  		btst	#2,(a5)
00076124 6600                       		bne.s	locret_72720
00076126 6000 0000                  		bra.w	sub_72722
0007612A                            ; ===========================================================================
0007612A                            
0007612A                            locret_72720:
0007612A 4E75                       		rts	
0007612C                            
0007612C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007612C                            
0007612C                            
0007612C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007612C 082D 0002 0001             		btst	#2,1(a5)
00076132 6600                       		bne.s	loc_7275A
00076134 D02D 0001                  		add.b	1(a5),d0
00076138                            ; End of function sub_72722
00076138                            
00076138                            
00076138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076138                            
00076138                            
00076138                            sub_7272E:				; XREF: loc_71E6A
00076138 1439 00A0 4000             		move.b	($A04000).l,d2
0007613E 0802 0007                  		btst	#7,d2
00076142 66F4                       		bne.s	sub_7272E
00076144 13C0 00A0 4000             		move.b	d0,($A04000).l
0007614A 4E71                       		nop	
0007614C 4E71                       		nop	
0007614E 4E71                       		nop	
00076150                            
00076150                            loc_72746:
00076150 1439 00A0 4000             		move.b	($A04000).l,d2
00076156 0802 0007                  		btst	#7,d2
0007615A 66F4                       		bne.s	loc_72746
0007615C                            
0007615C 13C1 00A0 4001             		move.b	d1,($A04001).l
00076162 4E75                       		rts	
00076164                            ; End of function sub_7272E
00076164                            
00076164                            ; ===========================================================================
00076164                            
00076164                            loc_7275A:				; XREF: sub_72722
00076164 142D 0001                  		move.b	1(a5),d2
00076168 0882 0002                  		bclr	#2,d2
0007616C D002                       		add.b	d2,d0
0007616E                            
0007616E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007616E                            
0007616E                            
0007616E                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007616E 1439 00A0 4000             		move.b	($A04000).l,d2
00076174 0802 0007                  		btst	#7,d2
00076178 66F4                       		bne.s	sub_72764
0007617A 13C0 00A0 4002             		move.b	d0,($A04002).l
00076180 4E71                       		nop	
00076182 4E71                       		nop	
00076184 4E71                       		nop	
00076186                            
00076186                            loc_7277C:
00076186 1439 00A0 4000             		move.b	($A04000).l,d2
0007618C 0802 0007                  		btst	#7,d2
00076190 66F4                       		bne.s	loc_7277C
00076192                            
00076192 13C1 00A0 4003             		move.b	d1,($A04003).l
00076198 4E75                       		rts	
0007619A                            ; End of function sub_72764
0007619A                            
0007619A                            ; ===========================================================================
0007619A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000761AC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000761BE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000761CE 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000761DE 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000761EE 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000761FE 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007620E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007621E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007622E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007623E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007624E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007625A                            
0007625A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007625A                            
0007625A                            
0007625A                            sub_72850:				; XREF: sub_71B4C
0007625A 532D 000E                  		subq.b	#1,$E(a5)
0007625E 6600                       		bne.s	loc_72866
00076260 0895 0004                  		bclr	#4,(a5)
00076264 4EBA 0000                  		jsr	sub_72878(pc)
00076268 4EBA 0000                  		jsr	sub_728DC(pc)
0007626C 6000 0000                  		bra.w	loc_7292E
00076270                            ; ===========================================================================
00076270                            
00076270                            loc_72866:
00076270 4EBA F45A                  		jsr	sub_71D9E(pc)
00076274 4EBA 0000                  		jsr	sub_72926(pc)
00076278 4EBA F47A                  		jsr	sub_71DC6(pc)
0007627C 4EBA 0000                  		jsr	sub_728E2(pc)
00076280 4E75                       		rts	
00076282                            ; End of function sub_72850
00076282                            
00076282                            
00076282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076282                            
00076282                            
00076282                            sub_72878:				; XREF: sub_72850
00076282 0895 0001                  		bclr	#1,(a5)
00076286 286D 0004                  		movea.l	4(a5),a4
0007628A                            
0007628A                            loc_72880:
0007628A 7A00                       		moveq	#0,d5
0007628C 1A1C                       		move.b	(a4)+,d5
0007628E 0C05 00E0                  		cmpi.b	#$E0,d5
00076292 6500                       		bcs.s	loc_72890
00076294 4EBA 0000                  		jsr	sub_72A5A(pc)
00076298 60F0                       		bra.s	loc_72880
0007629A                            ; ===========================================================================
0007629A                            
0007629A                            loc_72890:
0007629A 4A05                       		tst.b	d5
0007629C 6A00                       		bpl.s	loc_728A4
0007629E 4EBA 0000                  		jsr	sub_728AC(pc)
000762A2 1A1C                       		move.b	(a4)+,d5
000762A4 4A05                       		tst.b	d5
000762A6 6A00                       		bpl.s	loc_728A4
000762A8 534C                       		subq.w	#1,a4
000762AA 6000 F3E2                  		bra.w	sub_71D60
000762AE                            ; ===========================================================================
000762AE                            
000762AE                            loc_728A4:
000762AE 4EBA F3BE                  		jsr	sub_71D40(pc)
000762B2 6000 F3DA                  		bra.w	sub_71D60
000762B6                            ; End of function sub_72878
000762B6                            
000762B6                            
000762B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762B6                            
000762B6                            
000762B6                            sub_728AC:				; XREF: sub_72878
000762B6 0405 0081                  		subi.b	#$81,d5
000762BA 6500                       		bcs.s	loc_728CA
000762BC DA2D 0008                  		add.b	8(a5),d5
000762C0 0245 007F                  		andi.w	#$7F,d5
000762C4 E34D                       		lsl.w	#1,d5
000762C6 41FA 0000                  		lea	word_729CE(pc),a0
000762CA 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000762D0 6000 F3BC                  		bra.w	sub_71D60
000762D4                            ; ===========================================================================
000762D4                            
000762D4                            loc_728CA:
000762D4 08D5 0001                  		bset	#1,(a5)
000762D8 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000762DE 4EBA F3AE                  		jsr	sub_71D60(pc)
000762E2 6000 0000                  		bra.w	sub_729A0
000762E6                            ; End of function sub_728AC
000762E6                            
000762E6                            
000762E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762E6                            
000762E6                            
000762E6                            sub_728DC:				; XREF: sub_72850
000762E6 3C2D 0010                  		move.w	$10(a5),d6
000762EA 6B00                       		bmi.s	loc_72920
000762EC                            ; End of function sub_728DC
000762EC                            
000762EC                            
000762EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762EC                            
000762EC                            
000762EC                            sub_728E2:				; XREF: sub_72850
000762EC 102D 001E                  		move.b	$1E(a5),d0
000762F0 4880                       		ext.w	d0
000762F2 DC40                       		add.w	d0,d6
000762F4 0815 0002                  		btst	#2,(a5)
000762F8 6600                       		bne.s	locret_7291E
000762FA 0815 0001                  		btst	#1,(a5)
000762FE 6600                       		bne.s	locret_7291E
00076300 102D 0001                  		move.b	1(a5),d0
00076304 0C00 00E0                  		cmpi.b	#$E0,d0
00076308 6600                       		bne.s	loc_72904
0007630A 103C 00C0                  		move.b	#$C0,d0
0007630E                            
0007630E                            loc_72904:
0007630E 3206                       		move.w	d6,d1
00076310 0201 000F                  		andi.b	#$F,d1
00076314 8001                       		or.b	d1,d0
00076316 E84E                       		lsr.w	#4,d6
00076318 0206 003F                  		andi.b	#$3F,d6
0007631C 13C0 00C0 0011             		move.b	d0,($C00011).l
00076322 13C6 00C0 0011             		move.b	d6,($C00011).l
00076328                            
00076328                            locret_7291E:
00076328 4E75                       		rts	
0007632A                            ; End of function sub_728E2
0007632A                            
0007632A                            ; ===========================================================================
0007632A                            
0007632A                            loc_72920:				; XREF: sub_728DC
0007632A 08D5 0001                  		bset	#1,(a5)
0007632E 4E75                       		rts	
00076330                            
00076330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076330                            
00076330                            
00076330                            sub_72926:				; XREF: sub_72850
00076330 4A2D 000B                  		tst.b	$B(a5)
00076334 6700 0000                  		beq.w	locret_7298A
00076338                            
00076338                            loc_7292E:				; XREF: sub_72850
00076338 1C2D 0009                  		move.b	9(a5),d6
0007633C 7000                       		moveq	#0,d0
0007633E 102D 000B                  		move.b	$B(a5),d0
00076342 6700                       		beq.s	sub_7296A
00076344 2079 0007 52A2             		movea.l	(Go_PSGIndex).l,a0
0007634A 5340                       		subq.w	#1,d0
0007634C E548                       		lsl.w	#2,d0
0007634E 2070 0000                  		movea.l	(a0,d0.w),a0
00076352 102D 000C                  		move.b	$C(a5),d0
00076356 1030 0000                  		move.b	(a0,d0.w),d0
0007635A 522D 000C                  		addq.b	#1,$C(a5)
0007635E 0800 0007                  		btst	#7,d0
00076362 6700                       		beq.s	loc_72960
00076364 0C00 0080                  		cmpi.b	#$80,d0
00076368 6700                       		beq.s	loc_7299A
0007636A                            
0007636A                            loc_72960:
0007636A DC40                       		add.w	d0,d6
0007636C 0C06 0010                  		cmpi.b	#$10,d6
00076370 6500                       		bcs.s	sub_7296A
00076372 7C0F                       		moveq	#$F,d6
00076374                            ; End of function sub_72926
00076374                            
00076374                            
00076374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076374                            
00076374                            
00076374                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00076374 0815 0001                  		btst	#1,(a5)
00076378 6600                       		bne.s	locret_7298A
0007637A 0815 0002                  		btst	#2,(a5)
0007637E 6600                       		bne.s	locret_7298A
00076380 0815 0004                  		btst	#4,(a5)
00076384 6600                       		bne.s	loc_7298C
00076386                            
00076386                            loc_7297C:
00076386 8C2D 0001                  		or.b	1(a5),d6
0007638A 0606 0010                  		addi.b	#$10,d6
0007638E 13C6 00C0 0011             		move.b	d6,($C00011).l
00076394                            
00076394                            locret_7298A:
00076394 4E75                       		rts	
00076396                            ; ===========================================================================
00076396                            
00076396                            loc_7298C:
00076396 4A2D 0013                  		tst.b	$13(a5)
0007639A 67EA                       		beq.s	loc_7297C
0007639C 4A2D 0012                  		tst.b	$12(a5)
000763A0 66E4                       		bne.s	loc_7297C
000763A2 4E75                       		rts	
000763A4                            ; End of function sub_7296A
000763A4                            
000763A4                            ; ===========================================================================
000763A4                            
000763A4                            loc_7299A:				; XREF: sub_72926
000763A4 532D 000C                  		subq.b	#1,$C(a5)
000763A8 4E75                       		rts	
000763AA                            
000763AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763AA                            
000763AA                            
000763AA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000763AA 0815 0002                  		btst	#2,(a5)
000763AE 6600                       		bne.s	locret_729B4
000763B0                            
000763B0                            loc_729A6:				; XREF: Snd_FadeOut2
000763B0 102D 0001                  		move.b	1(a5),d0
000763B4 0000 001F                  		ori.b	#$1F,d0
000763B8 13C0 00C0 0011             		move.b	d0,($C00011).l
000763BE                            
000763BE                            locret_729B4:
000763BE 4E75                       		rts	
000763C0                            ; End of function sub_729A0
000763C0                            
000763C0                            
000763C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763C0                            
000763C0                            
000763C0                            sub_729B6:				; XREF: loc_71E7C
000763C0 41F9 00C0 0011             		lea	($C00011).l,a0
000763C6 10BC 009F                  		move.b	#$9F,(a0)
000763CA 10BC 00BF                  		move.b	#$BF,(a0)
000763CE 10BC 00DF                  		move.b	#$DF,(a0)
000763D2 10BC 00FF                  		move.b	#$FF,(a0)
000763D6 4E75                       		rts	
000763D8                            ; End of function sub_729B6
000763D8                            
000763D8                            ; ===========================================================================
000763D8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000763EA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000763FC 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076410 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076424 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076438 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007644C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076460 0011 0000                  		dc.w $11, 0
00076464                            
00076464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076464                            
00076464                            
00076464                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076464 0445 00E0                  		subi.w	#$E0,d5
00076468 E54D                       		lsl.w	#2,d5
0007646A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007646E                            ; End of function sub_72A5A
0007646E                            
0007646E                            ; ===========================================================================
0007646E                            
0007646E                            loc_72A64:
0007646E 6000 0000                  		bra.w	loc_72ACC
00076472                            ; ===========================================================================
00076472 6000 0000                  		bra.w	loc_72AEC
00076476                            ; ===========================================================================
00076476 6000 0000                  		bra.w	loc_72AF2
0007647A                            ; ===========================================================================
0007647A 6000 0000                  		bra.w	loc_72AF8
0007647E                            ; ===========================================================================
0007647E 6000 0000                  		bra.w	loc_72B14
00076482                            ; ===========================================================================
00076482 6000 0000                  		bra.w	loc_72B9E
00076486                            ; ===========================================================================
00076486 6000 0000                  		bra.w	loc_72BA4
0007648A                            ; ===========================================================================
0007648A 6000 0000                  		bra.w	loc_72BAE
0007648E                            ; ===========================================================================
0007648E 6000 0000                  		bra.w	loc_72BB4
00076492                            ; ===========================================================================
00076492 6000 0000                  		bra.w	loc_72BBE
00076496                            ; ===========================================================================
00076496 6000 0000                  		bra.w	loc_72BC6
0007649A                            ; ===========================================================================
0007649A 6000 0000                  		bra.w	loc_72BD0
0007649E                            ; ===========================================================================
0007649E 6000 0000                  		bra.w	loc_72BE6
000764A2                            ; ===========================================================================
000764A2 6000 0000                  		bra.w	loc_72BEE
000764A6                            ; ===========================================================================
000764A6 6000 0000                  		bra.w	loc_72BF4
000764AA                            ; ===========================================================================
000764AA 6000 0000                  		bra.w	loc_72C26
000764AE                            ; ===========================================================================
000764AE 6000 0000                  		bra.w	loc_72D30
000764B2                            ; ===========================================================================
000764B2 6000 0000                  		bra.w	loc_72D52
000764B6                            ; ===========================================================================
000764B6 6000 0000                  		bra.w	loc_72D58
000764BA                            ; ===========================================================================
000764BA 6000 0000                  		bra.w	loc_72E06
000764BE                            ; ===========================================================================
000764BE 6000 0000                  		bra.w	loc_72E20
000764C2                            ; ===========================================================================
000764C2 6000 0000                  		bra.w	loc_72E26
000764C6                            ; ===========================================================================
000764C6 6000 0000                  		bra.w	loc_72E2C
000764CA                            ; ===========================================================================
000764CA 6000 0000                  		bra.w	loc_72E38
000764CE                            ; ===========================================================================
000764CE 6000 0000                  		bra.w	loc_72E52
000764D2                            ; ===========================================================================
000764D2 6000 0000                  		bra.w	loc_72E64
000764D6                            ; ===========================================================================
000764D6                            
000764D6                            loc_72ACC:				; XREF: loc_72A64
000764D6 121C                       		move.b	(a4)+,d1
000764D8 4A2D 0001                  		tst.b	1(a5)
000764DC 6B00                       		bmi.s	locret_72AEA
000764DE 102D 000A                  		move.b	$A(a5),d0
000764E2 0200 0037                  		andi.b	#$37,d0
000764E6 8200                       		or.b	d0,d1
000764E8 1B41 000A                  		move.b	d1,$A(a5)
000764EC 103C 00B4                  		move.b	#$B4,d0
000764F0 6000 FC2E                  		bra.w	loc_72716
000764F4                            ; ===========================================================================
000764F4                            
000764F4                            locret_72AEA:
000764F4 4E75                       		rts	
000764F6                            ; ===========================================================================
000764F6                            
000764F6                            loc_72AEC:				; XREF: loc_72A64
000764F6 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000764FA 4E75                       		rts	
000764FC                            ; ===========================================================================
000764FC                            
000764FC                            loc_72AF2:				; XREF: loc_72A64
000764FC 1D5C 0007                  		move.b	(a4)+,7(a6)
00076500 4E75                       		rts	
00076502                            ; ===========================================================================
00076502                            
00076502                            loc_72AF8:				; XREF: loc_72A64
00076502 7000                       		moveq	#0,d0
00076504 102D 000D                  		move.b	$D(a5),d0
00076508 2875 0000                  		movea.l	(a5,d0.w),a4
0007650C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076514 544C                       		addq.w	#2,a4
00076516 5800                       		addq.b	#4,d0
00076518 1B40 000D                  		move.b	d0,$D(a5)
0007651C 4E75                       		rts	
0007651E                            ; ===========================================================================
0007651E                            
0007651E                            loc_72B14:				; XREF: loc_72A64
0007651E 204E                       		movea.l	a6,a0
00076520 43EE 03A0                  		lea	$3A0(a6),a1
00076524 303C 0087                  		move.w	#$87,d0
00076528                            
00076528                            loc_72B1E:
00076528 20D9                       		move.l	(a1)+,(a0)+
0007652A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007652E                            
0007652E 08EE 0002 0040             		bset	#2,$40(a6)
00076534 264D                       		movea.l	a5,a3
00076536 1C3C 0028                  		move.b	#$28,d6
0007653A 9C2E 0026                  		sub.b	$26(a6),d6
0007653E 7E05                       		moveq	#5,d7
00076540 4BEE 0070                  		lea	$70(a6),a5
00076544                            
00076544                            loc_72B3A:
00076544 0815 0007                  		btst	#7,(a5)
00076548 6700                       		beq.s	loc_72B5C
0007654A 08D5 0001                  		bset	#1,(a5)
0007654E DD2D 0009                  		add.b	d6,9(a5)
00076552 0815 0002                  		btst	#2,(a5)
00076556 6600                       		bne.s	loc_72B5C
00076558 7000                       		moveq	#0,d0
0007655A 102D 000B                  		move.b	$B(a5),d0
0007655E 226E 0018                  		movea.l	$18(a6),a1
00076562 4EBA 0000                  		jsr	sub_72C4E(pc)
00076566                            
00076566                            loc_72B5C:
00076566 DAFC 0030                  		adda.w	#$30,a5
0007656A 51CF FFD8                  		dbf	d7,loc_72B3A
0007656E                            
0007656E 7E02                       		moveq	#2,d7
00076570                            
00076570                            loc_72B66:
00076570 0815 0007                  		btst	#7,(a5)
00076574 6700                       		beq.s	loc_72B78
00076576 08D5 0001                  		bset	#1,(a5)
0007657A 4EBA FE2E                  		jsr	sub_729A0(pc)
0007657E DD2D 0009                  		add.b	d6,9(a5)
00076582                            
00076582                            loc_72B78:
00076582 DAFC 0030                  		adda.w	#$30,a5
00076586 51CF FFE8                  		dbf	d7,loc_72B66
0007658A 2A4B                       		movea.l	a3,a5
0007658C 1D7C 0080 0024             		move.b	#$80,$24(a6)
00076592 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076598 422E 0027                  		clr.b	$27(a6)
0007659C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000765A4 504F                       		addq.w	#8,sp
000765A6 4E75                       		rts	
000765A8                            ; ===========================================================================
000765A8                            
000765A8                            loc_72B9E:				; XREF: loc_72A64
000765A8 1B5C 0002                  		move.b	(a4)+,2(a5)
000765AC 4E75                       		rts	
000765AE                            ; ===========================================================================
000765AE                            
000765AE                            loc_72BA4:				; XREF: loc_72A64
000765AE 101C                       		move.b	(a4)+,d0
000765B0 D12D 0009                  		add.b	d0,9(a5)
000765B4 6000 0000                  		bra.w	sub_72CB4
000765B8                            ; ===========================================================================
000765B8                            
000765B8                            loc_72BAE:				; XREF: loc_72A64
000765B8 08D5 0004                  		bset	#4,(a5)
000765BC 4E75                       		rts	
000765BE                            ; ===========================================================================
000765BE                            
000765BE                            loc_72BB4:				; XREF: loc_72A64
000765BE 1B54 0012                  		move.b	(a4),$12(a5)
000765C2 1B5C 0013                  		move.b	(a4)+,$13(a5)
000765C6 4E75                       		rts	
000765C8                            ; ===========================================================================
000765C8                            
000765C8                            loc_72BBE:				; XREF: loc_72A64
000765C8 101C                       		move.b	(a4)+,d0
000765CA D12D 0008                  		add.b	d0,8(a5)
000765CE 4E75                       		rts	
000765D0                            ; ===========================================================================
000765D0                            
000765D0                            loc_72BC6:				; XREF: loc_72A64
000765D0 1D54 0002                  		move.b	(a4),2(a6)
000765D4 1D5C 0001                  		move.b	(a4)+,1(a6)
000765D8 4E75                       		rts	
000765DA                            ; ===========================================================================
000765DA                            
000765DA                            loc_72BD0:				; XREF: loc_72A64
000765DA 41EE 0040                  		lea	$40(a6),a0
000765DE 101C                       		move.b	(a4)+,d0
000765E0 7230                       		moveq	#$30,d1
000765E2 7409                       		moveq	#9,d2
000765E4                            
000765E4                            loc_72BDA:
000765E4 1140 0002                  		move.b	d0,2(a0)
000765E8 D0C1                       		adda.w	d1,a0
000765EA 51CA FFF8                  		dbf	d2,loc_72BDA
000765EE                            
000765EE 4E75                       		rts	
000765F0                            ; ===========================================================================
000765F0                            
000765F0                            loc_72BE6:				; XREF: loc_72A64
000765F0 101C                       		move.b	(a4)+,d0
000765F2 D12D 0009                  		add.b	d0,9(a5)
000765F6 4E75                       		rts	
000765F8                            ; ===========================================================================
000765F8                            
000765F8                            loc_72BEE:				; XREF: loc_72A64
000765F8 422E 002C                  		clr.b	$2C(a6)
000765FC 4E75                       		rts	
000765FE                            ; ===========================================================================
000765FE                            
000765FE                            loc_72BF4:				; XREF: loc_72A64
000765FE 0895 0007                  		bclr	#7,(a5)
00076602 0895 0004                  		bclr	#4,(a5)
00076606 4EBA FB00                  		jsr	sub_726FE(pc)
0007660A 4A2E 0250                  		tst.b	$250(a6)
0007660E 6B00                       		bmi.s	loc_72C22
00076610 264D                       		movea.l	a5,a3
00076612 4BEE 0100                  		lea	$100(a6),a5
00076616 226E 0018                  		movea.l	$18(a6),a1
0007661A 0895 0002                  		bclr	#2,(a5)
0007661E 08D5 0001                  		bset	#1,(a5)
00076622 102D 000B                  		move.b	$B(a5),d0
00076626 4EBA 0000                  		jsr	sub_72C4E(pc)
0007662A 2A4B                       		movea.l	a3,a5
0007662C                            
0007662C                            loc_72C22:
0007662C 504F                       		addq.w	#8,sp
0007662E 4E75                       		rts	
00076630                            ; ===========================================================================
00076630                            
00076630                            loc_72C26:				; XREF: loc_72A64
00076630 7000                       		moveq	#0,d0
00076632 101C                       		move.b	(a4)+,d0
00076634 1B40 000B                  		move.b	d0,$B(a5)
00076638 0815 0002                  		btst	#2,(a5)
0007663C 6600 0000                  		bne.w	locret_72CAA
00076640 226E 0018                  		movea.l	$18(a6),a1
00076644 4A2E 000E                  		tst.b	$E(a6)
00076648 6700                       		beq.s	sub_72C4E
0007664A 226D 0020                  		movea.l	$20(a5),a1
0007664E 4A2E 000E                  		tst.b	$E(a6)
00076652 6B00                       		bmi.s	sub_72C4E
00076654 226E 0020                  		movea.l	$20(a6),a1
00076658                            
00076658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076658                            
00076658                            
00076658                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076658 5340                       		subq.w	#1,d0
0007665A 6B00                       		bmi.s	loc_72C5C
0007665C 323C 0019                  		move.w	#$19,d1
00076660                            
00076660                            loc_72C56:
00076660 D2C1                       		adda.w	d1,a1
00076662 51C8 FFFC                  		dbf	d0,loc_72C56
00076666                            
00076666                            loc_72C5C:
00076666 1219                       		move.b	(a1)+,d1
00076668 1B41 001F                  		move.b	d1,$1F(a5)
0007666C 1801                       		move.b	d1,d4
0007666E 103C 00B0                  		move.b	#$B0,d0
00076672 4EBA FAB8                  		jsr	sub_72722(pc)
00076676 45FA 0000                  		lea	byte_72D18(pc),a2
0007667A 7613                       		moveq	#$13,d3
0007667C                            
0007667C                            loc_72C72:
0007667C 101A                       		move.b	(a2)+,d0
0007667E 1219                       		move.b	(a1)+,d1
00076680 4EBA FAAA                  		jsr	sub_72722(pc)
00076684 51CB FFF6                  		dbf	d3,loc_72C72
00076688 7A03                       		moveq	#3,d5
0007668A 0244 0007                  		andi.w	#7,d4
0007668E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076692 162D 0009                  		move.b	9(a5),d3
00076696                            
00076696                            loc_72C8C:
00076696 101A                       		move.b	(a2)+,d0
00076698 1219                       		move.b	(a1)+,d1
0007669A E20C                       		lsr.b	#1,d4
0007669C 6400                       		bcc.s	loc_72C96
0007669E D203                       		add.b	d3,d1
000766A0                            
000766A0                            loc_72C96:
000766A0 4EBA FA8A                  		jsr	sub_72722(pc)
000766A4 51CD FFF0                  		dbf	d5,loc_72C8C
000766A8 103C 00B4                  		move.b	#$B4,d0
000766AC 122D 000A                  		move.b	$A(a5),d1
000766B0 4EBA FA7A                  		jsr	sub_72722(pc)
000766B4                            
000766B4                            locret_72CAA:
000766B4 4E75                       		rts	
000766B6                            ; End of function sub_72C4E
000766B6                            
000766B6                            ; ===========================================================================
000766B6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000766BE                            
000766BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766BE                            
000766BE                            
000766BE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000766BE 0815 0002                  		btst	#2,(a5)
000766C2 6600                       		bne.s	locret_72D16
000766C4 7000                       		moveq	#0,d0
000766C6 102D 000B                  		move.b	$B(a5),d0
000766CA 226E 0018                  		movea.l	$18(a6),a1
000766CE 4A2E 000E                  		tst.b	$E(a6)
000766D2 6700                       		beq.s	loc_72CD8
000766D4 226E 0020                  		movea.l	$20(a6),a1
000766D8 4A2E 000E                  		tst.b	$E(a6)
000766DC 6B00                       		bmi.s	loc_72CD8
000766DE 226E 0020                  		movea.l	$20(a6),a1
000766E2                            
000766E2                            loc_72CD8:
000766E2 5340                       		subq.w	#1,d0
000766E4 6B00                       		bmi.s	loc_72CE6
000766E6 323C 0019                  		move.w	#$19,d1
000766EA                            
000766EA                            loc_72CE0:
000766EA D2C1                       		adda.w	d1,a1
000766EC 51C8 FFFC                  		dbf	d0,loc_72CE0
000766F0                            
000766F0                            loc_72CE6:
000766F0 D2FC 0015                  		adda.w	#$15,a1
000766F4 45FA 0000                  		lea	byte_72D2C(pc),a2
000766F8 102D 001F                  		move.b	$1F(a5),d0
000766FC 0240 0007                  		andi.w	#7,d0
00076700 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076704 162D 0009                  		move.b	9(a5),d3
00076708 6B00                       		bmi.s	locret_72D16
0007670A 7A03                       		moveq	#3,d5
0007670C                            
0007670C                            loc_72D02:
0007670C 101A                       		move.b	(a2)+,d0
0007670E 1219                       		move.b	(a1)+,d1
00076710 E20C                       		lsr.b	#1,d4
00076712 6400                       		bcc.s	loc_72D12
00076714 D203                       		add.b	d3,d1
00076716 6500                       		bcs.s	loc_72D12
00076718 4EBA FA12                  		jsr	sub_72722(pc)
0007671C                            
0007671C                            loc_72D12:
0007671C 51CD FFEE                  		dbf	d5,loc_72D02
00076720                            
00076720                            locret_72D16:
00076720 4E75                       		rts	
00076722                            ; End of function sub_72CB4
00076722                            
00076722                            ; ===========================================================================
00076722 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007672C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076736 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007673A                            ; ===========================================================================
0007673A                            
0007673A                            loc_72D30:				; XREF: loc_72A64
0007673A 08D5 0003                  		bset	#3,(a5)
0007673E 2B4C 0014                  		move.l	a4,$14(a5)
00076742 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076746 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007674A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007674E 101C                       		move.b	(a4)+,d0
00076750 E208                       		lsr.b	#1,d0
00076752 1B40 001B                  		move.b	d0,$1B(a5)
00076756 426D 001C                  		clr.w	$1C(a5)
0007675A 4E75                       		rts	
0007675C                            ; ===========================================================================
0007675C                            
0007675C                            loc_72D52:				; XREF: loc_72A64
0007675C 08D5 0003                  		bset	#3,(a5)
00076760 4E75                       		rts	
00076762                            ; ===========================================================================
00076762                            
00076762                            loc_72D58:				; XREF: loc_72A64
00076762 0895 0007                  		bclr	#7,(a5)
00076766 0895 0004                  		bclr	#4,(a5)
0007676A 4A2D 0001                  		tst.b	1(a5)
0007676E 6B00                       		bmi.s	loc_72D74
00076770 4A2E 0008                  		tst.b	8(a6)
00076774 6B00 0000                  		bmi.w	loc_72E02
00076778 4EBA F98E                  		jsr	sub_726FE(pc)
0007677C 6000                       		bra.s	loc_72D78
0007677E                            ; ===========================================================================
0007677E                            
0007677E                            loc_72D74:
0007677E 4EBA FC2A                  		jsr	sub_729A0(pc)
00076782                            
00076782                            loc_72D78:
00076782 4A2E 000E                  		tst.b	$E(a6)
00076786 6A00 0000                  		bpl.w	loc_72E02
0007678A 4216                       		clr.b	0(a6)
0007678C 7000                       		moveq	#0,d0
0007678E 102D 0001                  		move.b	1(a5),d0
00076792 6B00                       		bmi.s	loc_72DCC
00076794 41FA F546                  		lea	dword_722CC(pc),a0
00076798 264D                       		movea.l	a5,a3
0007679A 0C00 0004                  		cmpi.b	#4,d0
0007679E 6600                       		bne.s	loc_72DA8
000767A0 4A2E 0340                  		tst.b	$340(a6)
000767A4 6A00                       		bpl.s	loc_72DA8
000767A6 4BEE 0340                  		lea	$340(a6),a5
000767AA 226E 0020                  		movea.l	$20(a6),a1
000767AE 6000                       		bra.s	loc_72DB8
000767B0                            ; ===========================================================================
000767B0                            
000767B0                            loc_72DA8:
000767B0 5500                       		subq.b	#2,d0
000767B2 E508                       		lsl.b	#2,d0
000767B4 2A70 0000                  		movea.l	(a0,d0.w),a5
000767B8 4A15                       		tst.b	(a5)
000767BA 6A00                       		bpl.s	loc_72DC8
000767BC 226E 0018                  		movea.l	$18(a6),a1
000767C0                            
000767C0                            loc_72DB8:
000767C0 0895 0002                  		bclr	#2,(a5)
000767C4 08D5 0001                  		bset	#1,(a5)
000767C8 102D 000B                  		move.b	$B(a5),d0
000767CC 4EBA FE8A                  		jsr	sub_72C4E(pc)
000767D0                            
000767D0                            loc_72DC8:
000767D0 2A4B                       		movea.l	a3,a5
000767D2 6000                       		bra.s	loc_72E02
000767D4                            ; ===========================================================================
000767D4                            
000767D4                            loc_72DCC:
000767D4 41EE 0370                  		lea	$370(a6),a0
000767D8 4A10                       		tst.b	(a0)
000767DA 6A00                       		bpl.s	loc_72DE0
000767DC 0C00 00E0                  		cmpi.b	#$E0,d0
000767E0 6700                       		beq.s	loc_72DEA
000767E2 0C00 00C0                  		cmpi.b	#$C0,d0
000767E6 6700                       		beq.s	loc_72DEA
000767E8                            
000767E8                            loc_72DE0:
000767E8 41FA F4F2                  		lea	dword_722CC(pc),a0
000767EC E608                       		lsr.b	#3,d0
000767EE 2070 0000                  		movea.l	(a0,d0.w),a0
000767F2                            
000767F2                            loc_72DEA:
000767F2 0890 0002                  		bclr	#2,(a0)
000767F6 08D0 0001                  		bset	#1,(a0)
000767FA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076800 6600                       		bne.s	loc_72E02
00076802 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007680A                            
0007680A                            loc_72E02:
0007680A 504F                       		addq.w	#8,sp
0007680C 4E75                       		rts	
0007680E                            ; ===========================================================================
0007680E                            
0007680E                            loc_72E06:				; XREF: loc_72A64
0007680E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076814 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076818 0815 0002                  		btst	#2,(a5)
0007681C 6600                       		bne.s	locret_72E1E
0007681E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076826                            
00076826                            locret_72E1E:
00076826 4E75                       		rts	
00076828                            ; ===========================================================================
00076828                            
00076828                            loc_72E20:				; XREF: loc_72A64
00076828 0895 0003                  		bclr	#3,(a5)
0007682C 4E75                       		rts	
0007682E                            ; ===========================================================================
0007682E                            
0007682E                            loc_72E26:				; XREF: loc_72A64
0007682E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076832 4E75                       		rts	
00076834                            ; ===========================================================================
00076834                            
00076834                            loc_72E2C:				; XREF: loc_72A64
00076834 101C                       		move.b	(a4)+,d0
00076836 E148                       		lsl.w	#8,d0
00076838 101C                       		move.b	(a4)+,d0
0007683A D8C0                       		adda.w	d0,a4
0007683C 534C                       		subq.w	#1,a4
0007683E 4E75                       		rts	
00076840                            ; ===========================================================================
00076840                            
00076840                            loc_72E38:				; XREF: loc_72A64
00076840 7000                       		moveq	#0,d0
00076842 101C                       		move.b	(a4)+,d0
00076844 121C                       		move.b	(a4)+,d1
00076846 4A35 0024                  		tst.b	$24(a5,d0.w)
0007684A 6600                       		bne.s	loc_72E48
0007684C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076850                            
00076850                            loc_72E48:
00076850 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076854 66DE                       		bne.s	loc_72E2C
00076856 544C                       		addq.w	#2,a4
00076858 4E75                       		rts	
0007685A                            ; ===========================================================================
0007685A                            
0007685A                            loc_72E52:				; XREF: loc_72A64
0007685A 7000                       		moveq	#0,d0
0007685C 102D 000D                  		move.b	$D(a5),d0
00076860 5900                       		subq.b	#4,d0
00076862 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076866 1B40 000D                  		move.b	d0,$D(a5)
0007686A 60C8                       		bra.s	loc_72E2C
0007686C                            ; ===========================================================================
0007686C                            
0007686C                            loc_72E64:				; XREF: loc_72A64
0007686C 103C 0088                  		move.b	#$88,d0
00076870 123C 000F                  		move.b	#$F,d1
00076874 4EBA F8C2                  		jsr	sub_7272E(pc)
00076878 103C 008C                  		move.b	#$8C,d0
0007687C 123C 000F                  		move.b	#$F,d1
00076880 6000 F8B6                  		bra.w	sub_7272E
00076884                            ; ===========================================================================
00076884                            Kos_Z80:	incbin	sound\z80_1.bin
00076934 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076936 21                         		dc.b $21
00076937 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076939                            		incbin	sound\z80_2.bin
00077FE4                            		even
00077FE4                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E7E4                            		even
0007E7E4                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00088082                            		even
00088082                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00088610                            		even
00088610                            Music84:	include	sound\music84.asm ; Star Light Act 1
00088610                            music84_Header:
00088610 =00000001                  smpsHeaderStartSong = 1
00088610 0000                       	smpsHeaderVoice     music84_Voices
00088612 0603                       	smpsHeaderChan      $06, $03
00088614 0205                       	smpsHeaderTempo     $02, $05
00088616                            
0008861A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008861E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00088622 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00088626 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008862A 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008862E 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00088634 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008863A 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00088640                            
00088640                            ; FM1 Data
00088640                            music84_FM1:
00088640 E0C0                       	smpsPan             panCenter, $00
00088644 E107                       	smpsAlterNote       $07
00088646 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008864A E106                       	smpsAlterNote       $06
0008864C 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00088650 E10B                       	smpsAlterNote       $0B
00088652 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00088658 E10C                       	smpsAlterNote       $0C
0008865A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008865D E10B                       	smpsAlterNote       $0B
0008865F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088662 E109                       	smpsAlterNote       $09
00088664 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00088669 E108                       	smpsAlterNote       $08
0008866B 8001                       	dc.b	nRst, $01
0008866D E10B                       	smpsAlterNote       $0B
0008866F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00088675 E107                       	smpsAlterNote       $07
00088677 9B03                       	dc.b	nD2, $03
00088679                            
00088679                            music84_Jump04:
00088679 E107                       	smpsAlterNote       $07
0008867B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008867F E10B                       	smpsAlterNote       $0B
00088681 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088685 E107                       	smpsAlterNote       $07
00088687 9B03                       	dc.b	nD2, $03
00088689 E11A                       	smpsAlterNote       $1A
0008868B A301                       	dc.b	nBb2, $01
0008868D E1F2                       	smpsAlterNote       $F2
0008868F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088692 E1FF                       	smpsAlterNote       $FF
00088694 E701                       	dc.b	smpsNoAttack, $01
00088696 E111                       	smpsAlterNote       $11
00088698 E701                       	dc.b	smpsNoAttack, $01
0008869A E106                       	smpsAlterNote       $06
0008869C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008869F E107                       	smpsAlterNote       $07
000886A1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000886A5 E108                       	smpsAlterNote       $08
000886A7 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000886AF E109                       	smpsAlterNote       $09
000886B1 A003                       	dc.b	nG2, $03
000886B3 E10C                       	smpsAlterNote       $0C
000886B5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000886B9 E1FD                       	smpsAlterNote       $FD
000886BB A401                       	dc.b	nB2, $01
000886BD E109                       	smpsAlterNote       $09
000886BF E701                       	dc.b	smpsNoAttack, $01
000886C1 E106                       	smpsAlterNote       $06
000886C3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886C6 E109                       	smpsAlterNote       $09
000886C8 A007                       	dc.b	nG2, $07
000886CA E108                       	smpsAlterNote       $08
000886CC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000886D0 E107                       	smpsAlterNote       $07
000886D2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000886D8 E10B                       	smpsAlterNote       $0B
000886DA A203 8001                  	dc.b	nA2, $03, nRst, $01
000886DE E107                       	smpsAlterNote       $07
000886E0 9B03                       	dc.b	nD2, $03
000886E2 E11A                       	smpsAlterNote       $1A
000886E4 A301                       	dc.b	nBb2, $01
000886E6 E1F9                       	smpsAlterNote       $F9
000886E8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000886EB E107                       	smpsAlterNote       $07
000886ED E701                       	dc.b	smpsNoAttack, $01
000886EF E111                       	smpsAlterNote       $11
000886F1 E701                       	dc.b	smpsNoAttack, $01
000886F3 E106                       	smpsAlterNote       $06
000886F5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000886FA E107                       	smpsAlterNote       $07
000886FC 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088704 E1EC                       	smpsAlterNote       $EC
00088706 A101                       	dc.b	nAb2, $01
00088708 E108                       	smpsAlterNote       $08
0008870A E701                       	dc.b	smpsNoAttack, $01
0008870C E116                       	smpsAlterNote       $16
0008870E E701                       	dc.b	smpsNoAttack, $01
00088710 E1F5                       	smpsAlterNote       $F5
00088712 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088715 E10B                       	smpsAlterNote       $0B
00088717 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008871B E107                       	smpsAlterNote       $07
0008871D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088723 E109                       	smpsAlterNote       $09
00088725 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088729 E10B                       	smpsAlterNote       $0B
0008872B 9603                       	dc.b	nA1, $03
0008872D E107                       	smpsAlterNote       $07
0008872F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088735 E10B                       	smpsAlterNote       $0B
00088737 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008873B E107                       	smpsAlterNote       $07
0008873D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088741 E11A                       	smpsAlterNote       $1A
00088743 A301                       	dc.b	nBb2, $01
00088745 E1F9                       	smpsAlterNote       $F9
00088747 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008874A E107                       	smpsAlterNote       $07
0008874C E701                       	dc.b	smpsNoAttack, $01
0008874E E1FB                       	smpsAlterNote       $FB
00088750 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088753 E106                       	smpsAlterNote       $06
00088755 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088759 E107                       	smpsAlterNote       $07
0008875B 9B03                       	dc.b	nD2, $03
0008875D E108                       	smpsAlterNote       $08
0008875F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088765 E109                       	smpsAlterNote       $09
00088767 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008876B E10C                       	smpsAlterNote       $0C
0008876D A303                       	dc.b	nBb2, $03
0008876F E1F0                       	smpsAlterNote       $F0
00088771 A401                       	dc.b	nB2, $01
00088773 E1FD                       	smpsAlterNote       $FD
00088775 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008877A E106                       	smpsAlterNote       $06
0008877C 8001                       	dc.b	nRst, $01
0008877E E109                       	smpsAlterNote       $09
00088780 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088784 E108                       	smpsAlterNote       $08
00088786 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008878A E107                       	smpsAlterNote       $07
0008878C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088792 E10B                       	smpsAlterNote       $0B
00088794 A203                       	dc.b	nA2, $03
00088796 E107                       	smpsAlterNote       $07
00088798 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008879C E1F2                       	smpsAlterNote       $F2
0008879E A401                       	dc.b	nB2, $01
000887A0 E1FF                       	smpsAlterNote       $FF
000887A2 E701                       	dc.b	smpsNoAttack, $01
000887A4 E107                       	smpsAlterNote       $07
000887A6 E701                       	dc.b	smpsNoAttack, $01
000887A8 E1FB                       	smpsAlterNote       $FB
000887AA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887AD E106                       	smpsAlterNote       $06
000887AF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887B3 E107                       	smpsAlterNote       $07
000887B5 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000887BF E117                       	smpsAlterNote       $17
000887C1 A001                       	dc.b	nG2, $01
000887C3 E1FA                       	smpsAlterNote       $FA
000887C5 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000887C8 E108                       	smpsAlterNote       $08
000887CA E701                       	dc.b	smpsNoAttack, $01
000887CC E1E7                       	smpsAlterNote       $E7
000887CE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000887D1 E103                       	smpsAlterNote       $03
000887D3 E701                       	dc.b	smpsNoAttack, $01
000887D5 E10B                       	smpsAlterNote       $0B
000887D7 E702                       	dc.b	smpsNoAttack, $02
000887D9 E107                       	smpsAlterNote       $07
000887DB 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000887E3 E106                       	smpsAlterNote       $06
000887E5 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000887EB E10C                       	smpsAlterNote       $0C
000887ED 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000887F3 E109                       	smpsAlterNote       $09
000887F5 9E03                       	dc.b	nF2, $03
000887F7 E10C                       	smpsAlterNote       $0C
000887F9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000887FD E1EA                       	smpsAlterNote       $EA
000887FF A201                       	dc.b	nA2, $01
00088801 E106                       	smpsAlterNote       $06
00088803 E701                       	dc.b	smpsNoAttack, $01
00088805 E1E2                       	smpsAlterNote       $E2
00088807 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008880A E1F0                       	smpsAlterNote       $F0
0008880C E701                       	dc.b	smpsNoAttack, $01
0008880E E10C                       	smpsAlterNote       $0C
00088810 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008881C E116                       	smpsAlterNote       $16
0008881E 9C01                       	dc.b	nEb2, $01
00088820 E105                       	smpsAlterNote       $05
00088822 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088825 E1F1                       	smpsAlterNote       $F1
00088827 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008882A E1FF                       	smpsAlterNote       $FF
0008882C E701                       	dc.b	smpsNoAttack, $01
0008882E E109                       	smpsAlterNote       $09
00088830 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088834 E10C                       	smpsAlterNote       $0C
00088836 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088842 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00088848 E109                       	smpsAlterNote       $09
0008884A 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008884E E10C                       	smpsAlterNote       $0C
00088850 9703                       	dc.b	nBb1, $03
00088852 E11A                       	smpsAlterNote       $1A
00088854 A101                       	dc.b	nAb2, $01
00088856 E1FB                       	smpsAlterNote       $FB
00088858 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008885B E10A                       	smpsAlterNote       $0A
0008885D E701                       	dc.b	smpsNoAttack, $01
0008885F E1E8                       	smpsAlterNote       $E8
00088861 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088864 E106                       	smpsAlterNote       $06
00088866 E701                       	dc.b	smpsNoAttack, $01
00088868 E10C                       	smpsAlterNote       $0C
0008886A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00088876 E1F9                       	smpsAlterNote       $F9
00088878 9D01                       	dc.b	nE2, $01
0008887A E108                       	smpsAlterNote       $08
0008887C E701                       	dc.b	smpsNoAttack, $01
0008887E E1F6                       	smpsAlterNote       $F6
00088880 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088883 E109                       	smpsAlterNote       $09
00088885 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00088889 E10C                       	smpsAlterNote       $0C
0008888B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00088897 E108                       	smpsAlterNote       $08
00088899 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008889F E106                       	smpsAlterNote       $06
000888A1 A403 8001                  	dc.b	nB2, $03, nRst, $01
000888A5 E108                       	smpsAlterNote       $08
000888A7 9D03                       	dc.b	nE2, $03
000888A9 E1EB                       	smpsAlterNote       $EB
000888AB A801                       	dc.b	nEb3, $01
000888AD E109                       	smpsAlterNote       $09
000888AF E701                       	dc.b	smpsNoAttack, $01
000888B1 E1FA                       	smpsAlterNote       $FA
000888B3 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000888B6 E108                       	smpsAlterNote       $08
000888B8 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000888C4 E1E9                       	smpsAlterNote       $E9
000888C6 A301                       	dc.b	nBb2, $01
000888C8 E107                       	smpsAlterNote       $07
000888CA E701                       	dc.b	smpsNoAttack, $01
000888CC E1F0                       	smpsAlterNote       $F0
000888CE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000888D1 E1F7                       	smpsAlterNote       $F7
000888D3 E701                       	dc.b	smpsNoAttack, $01
000888D5 E107                       	smpsAlterNote       $07
000888D7 E701                       	dc.b	smpsNoAttack, $01
000888D9 E106                       	smpsAlterNote       $06
000888DB E701                       	dc.b	smpsNoAttack, $01
000888DD E108                       	smpsAlterNote       $08
000888DF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000888E5 E106                       	smpsAlterNote       $06
000888E7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000888EB E108                       	smpsAlterNote       $08
000888ED 9D03                       	dc.b	nE2, $03
000888EF E10B                       	smpsAlterNote       $0B
000888F1 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000888F9 E108                       	smpsAlterNote       $08
000888FB 9D03                       	dc.b	nE2, $03
000888FD E10B                       	smpsAlterNote       $0B
000888FF 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088903 E113                       	smpsAlterNote       $13
00088905 A001                       	dc.b	nG2, $01
00088907 E118                       	smpsAlterNote       $18
00088909 E701                       	dc.b	smpsNoAttack, $01
0008890B E1E9                       	smpsAlterNote       $E9
0008890D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088910 E1F3                       	smpsAlterNote       $F3
00088912 E701                       	dc.b	smpsNoAttack, $01
00088914 E1FD                       	smpsAlterNote       $FD
00088916 E701                       	dc.b	smpsNoAttack, $01
00088918 E102                       	smpsAlterNote       $02
0008891A E701                       	dc.b	smpsNoAttack, $01
0008891C E107                       	smpsAlterNote       $07
0008891E 8001                       	dc.b	nRst, $01
00088920 E10B                       	smpsAlterNote       $0B
00088922 9603                       	dc.b	nA1, $03
00088924 E10C                       	smpsAlterNote       $0C
00088926 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008892C E10B                       	smpsAlterNote       $0B
0008892E 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008893A 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00088940 E107                       	smpsAlterNote       $07
00088942 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088948 E10B                       	smpsAlterNote       $0B
0008894A A203                       	dc.b	nA2, $03
0008894C E107                       	smpsAlterNote       $07
0008894E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088952 E1F2                       	smpsAlterNote       $F2
00088954 A401                       	dc.b	nB2, $01
00088956 E1FF                       	smpsAlterNote       $FF
00088958 E701                       	dc.b	smpsNoAttack, $01
0008895A E107                       	smpsAlterNote       $07
0008895C E701                       	dc.b	smpsNoAttack, $01
0008895E E1FB                       	smpsAlterNote       $FB
00088960 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088963 E106                       	smpsAlterNote       $06
00088965 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088969 E107                       	smpsAlterNote       $07
0008896B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008896F E108                       	smpsAlterNote       $08
00088971 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088977 E109                       	smpsAlterNote       $09
00088979 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008897D E10C                       	smpsAlterNote       $0C
0008897F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088983 E1F0                       	smpsAlterNote       $F0
00088985 A401                       	dc.b	nB2, $01
00088987 E109                       	smpsAlterNote       $09
00088989 E701                       	dc.b	smpsNoAttack, $01
0008898B E106                       	smpsAlterNote       $06
0008898D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088990 E109                       	smpsAlterNote       $09
00088992 A007                       	dc.b	nG2, $07
00088994 E108                       	smpsAlterNote       $08
00088996 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008899A E107                       	smpsAlterNote       $07
0008899C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889A2 E10B                       	smpsAlterNote       $0B
000889A4 A202 8001                  	dc.b	nA2, $02, nRst, $01
000889A8 E107                       	smpsAlterNote       $07
000889AA 9B03                       	dc.b	nD2, $03
000889AC E11A                       	smpsAlterNote       $1A
000889AE A301                       	dc.b	nBb2, $01
000889B0 E1F2                       	smpsAlterNote       $F2
000889B2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000889B5 E1FF                       	smpsAlterNote       $FF
000889B7 E701                       	dc.b	smpsNoAttack, $01
000889B9 E111                       	smpsAlterNote       $11
000889BB E701                       	dc.b	smpsNoAttack, $01
000889BD E106                       	smpsAlterNote       $06
000889BF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000889C2 E107                       	smpsAlterNote       $07
000889C4 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000889D0 E117                       	smpsAlterNote       $17
000889D2 A001                       	dc.b	nG2, $01
000889D4 E1FA                       	smpsAlterNote       $FA
000889D6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000889D9 E116                       	smpsAlterNote       $16
000889DB E701                       	dc.b	smpsNoAttack, $01
000889DD E1F5                       	smpsAlterNote       $F5
000889DF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000889E2 E103                       	smpsAlterNote       $03
000889E4 E701                       	dc.b	smpsNoAttack, $01
000889E6 E10B                       	smpsAlterNote       $0B
000889E8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000889EC E107                       	smpsAlterNote       $07
000889EE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889F4 E109                       	smpsAlterNote       $09
000889F6 9E03                       	dc.b	nF2, $03
000889F8 E10B                       	smpsAlterNote       $0B
000889FA 9603 8001                  	dc.b	nA1, $03, nRst, $01
000889FE E107                       	smpsAlterNote       $07
00088A00 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088A06 E10B                       	smpsAlterNote       $0B
00088A08 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088A0C E107                       	smpsAlterNote       $07
00088A0E 9B03                       	dc.b	nD2, $03
00088A10 E11A                       	smpsAlterNote       $1A
00088A12 A301                       	dc.b	nBb2, $01
00088A14 E1F9                       	smpsAlterNote       $F9
00088A16 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A19 E107                       	smpsAlterNote       $07
00088A1B E701                       	dc.b	smpsNoAttack, $01
00088A1D E111                       	smpsAlterNote       $11
00088A1F E701                       	dc.b	smpsNoAttack, $01
00088A21 E106                       	smpsAlterNote       $06
00088A23 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088A28 E107                       	smpsAlterNote       $07
00088A2A 9B03                       	dc.b	nD2, $03
00088A2C E108                       	smpsAlterNote       $08
00088A2E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088A34 E109                       	smpsAlterNote       $09
00088A36 A003                       	dc.b	nG2, $03
00088A38 E10C                       	smpsAlterNote       $0C
00088A3A A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A3E E1FD                       	smpsAlterNote       $FD
00088A40 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00088A45 E106                       	smpsAlterNote       $06
00088A47 8001                       	dc.b	nRst, $01
00088A49 E109                       	smpsAlterNote       $09
00088A4B A006 8001                  	dc.b	nG2, $06, nRst, $01
00088A4F E108                       	smpsAlterNote       $08
00088A51 9C03                       	dc.b	nEb2, $03
00088A53 E107                       	smpsAlterNote       $07
00088A55 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088A5B E10B                       	smpsAlterNote       $0B
00088A5D A203 8001                  	dc.b	nA2, $03, nRst, $01
00088A61 E107                       	smpsAlterNote       $07
00088A63 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088A67 E11A                       	smpsAlterNote       $1A
00088A69 A301                       	dc.b	nBb2, $01
00088A6B E1F9                       	smpsAlterNote       $F9
00088A6D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A70 E107                       	smpsAlterNote       $07
00088A72 E701                       	dc.b	smpsNoAttack, $01
00088A74 E1FB                       	smpsAlterNote       $FB
00088A76 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088A79 E106                       	smpsAlterNote       $06
00088A7B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088A7F E107                       	smpsAlterNote       $07
00088A81 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088A89 E1EC                       	smpsAlterNote       $EC
00088A8B A101                       	dc.b	nAb2, $01
00088A8D E108                       	smpsAlterNote       $08
00088A8F E701                       	dc.b	smpsNoAttack, $01
00088A91 E1E7                       	smpsAlterNote       $E7
00088A93 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088A96 E1F5                       	smpsAlterNote       $F5
00088A98 E701                       	dc.b	smpsNoAttack, $01
00088A9A E10B                       	smpsAlterNote       $0B
00088A9C E702                       	dc.b	smpsNoAttack, $02
00088A9E E107                       	smpsAlterNote       $07
00088AA0 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088AA6 E106                       	smpsAlterNote       $06
00088AA8 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088AAE E10C                       	smpsAlterNote       $0C
00088AB0 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088AB8 E109                       	smpsAlterNote       $09
00088ABA 9E03                       	dc.b	nF2, $03
00088ABC E10C                       	smpsAlterNote       $0C
00088ABE 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088AC2 E1EA                       	smpsAlterNote       $EA
00088AC4 A201                       	dc.b	nA2, $01
00088AC6 E106                       	smpsAlterNote       $06
00088AC8 E701                       	dc.b	smpsNoAttack, $01
00088ACA E114                       	smpsAlterNote       $14
00088ACC E701                       	dc.b	smpsNoAttack, $01
00088ACE E1F0                       	smpsAlterNote       $F0
00088AD0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088AD3 E10C                       	smpsAlterNote       $0C
00088AD5 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088AE1 9703                       	dc.b	nBb1, $03
00088AE3 E116                       	smpsAlterNote       $16
00088AE5 9C01                       	dc.b	nEb2, $01
00088AE7 E105                       	smpsAlterNote       $05
00088AE9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088AEC E113                       	smpsAlterNote       $13
00088AEE E701                       	dc.b	smpsNoAttack, $01
00088AF0 E1FF                       	smpsAlterNote       $FF
00088AF2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088AF5 E109                       	smpsAlterNote       $09
00088AF7 E703                       	dc.b	smpsNoAttack, $03
00088AF9 E10C                       	smpsAlterNote       $0C
00088AFB 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088B07 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088B0F E109                       	smpsAlterNote       $09
00088B11 9E03                       	dc.b	nF2, $03
00088B13 E10C                       	smpsAlterNote       $0C
00088B15 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088B19 E1EC                       	smpsAlterNote       $EC
00088B1B A201                       	dc.b	nA2, $01
00088B1D E10A                       	smpsAlterNote       $0A
00088B1F E701                       	dc.b	smpsNoAttack, $01
00088B21 E1E8                       	smpsAlterNote       $E8
00088B23 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088B26 E1F7                       	smpsAlterNote       $F7
00088B28 E701                       	dc.b	smpsNoAttack, $01
00088B2A E10C                       	smpsAlterNote       $0C
00088B2C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088B38 E1EA                       	smpsAlterNote       $EA
00088B3A 9D01                       	dc.b	nE2, $01
00088B3C E108                       	smpsAlterNote       $08
00088B3E E701                       	dc.b	smpsNoAttack, $01
00088B40 E1F6                       	smpsAlterNote       $F6
00088B42 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088B45 E105                       	smpsAlterNote       $05
00088B47 E701                       	dc.b	smpsNoAttack, $01
00088B49 E109                       	smpsAlterNote       $09
00088B4B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088B4F E10C                       	smpsAlterNote       $0C
00088B51 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088B5D E108                       	smpsAlterNote       $08
00088B5F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00088B65 E106                       	smpsAlterNote       $06
00088B67 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088B6B E108                       	smpsAlterNote       $08
00088B6D 9D03                       	dc.b	nE2, $03
00088B6F E1EB                       	smpsAlterNote       $EB
00088B71 A801                       	dc.b	nEb3, $01
00088B73 E109                       	smpsAlterNote       $09
00088B75 E701                       	dc.b	smpsNoAttack, $01
00088B77 E1EB                       	smpsAlterNote       $EB
00088B79 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088B7C E108                       	smpsAlterNote       $08
00088B7E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00088B8A E1E9                       	smpsAlterNote       $E9
00088B8C A301                       	dc.b	nBb2, $01
00088B8E E1F8                       	smpsAlterNote       $F8
00088B90 E701                       	dc.b	smpsNoAttack, $01
00088B92 E116                       	smpsAlterNote       $16
00088B94 E701                       	dc.b	smpsNoAttack, $01
00088B96 E1F7                       	smpsAlterNote       $F7
00088B98 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088B9B E107                       	smpsAlterNote       $07
00088B9D E701                       	dc.b	smpsNoAttack, $01
00088B9F E1EE                       	smpsAlterNote       $EE
00088BA1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088BA4 E106                       	smpsAlterNote       $06
00088BA6 8001                       	dc.b	nRst, $01
00088BA8 E108                       	smpsAlterNote       $08
00088BAA 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00088BB0 E106                       	smpsAlterNote       $06
00088BB2 A402 8001                  	dc.b	nB2, $02, nRst, $01
00088BB6 E108                       	smpsAlterNote       $08
00088BB8 9D03                       	dc.b	nE2, $03
00088BBA E10B                       	smpsAlterNote       $0B
00088BBC 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00088BC2 E108                       	smpsAlterNote       $08
00088BC4 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00088BC8 E10B                       	smpsAlterNote       $0B
00088BCA 9603                       	dc.b	nA1, $03
00088BCC E10E                       	smpsAlterNote       $0E
00088BCE A001                       	dc.b	nG2, $01
00088BD0 E118                       	smpsAlterNote       $18
00088BD2 E701                       	dc.b	smpsNoAttack, $01
00088BD4 E1E9                       	smpsAlterNote       $E9
00088BD6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088BD9 E1EE                       	smpsAlterNote       $EE
00088BDB E701                       	dc.b	smpsNoAttack, $01
00088BDD E1F8                       	smpsAlterNote       $F8
00088BDF E701                       	dc.b	smpsNoAttack, $01
00088BE1 E102                       	smpsAlterNote       $02
00088BE3 E701                       	dc.b	smpsNoAttack, $01
00088BE5 E107                       	smpsAlterNote       $07
00088BE7 8001                       	dc.b	nRst, $01
00088BE9 E10B                       	smpsAlterNote       $0B
00088BEB 9603                       	dc.b	nA1, $03
00088BED E10C                       	smpsAlterNote       $0C
00088BEF 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088BF5 E10B                       	smpsAlterNote       $0B
00088BF7 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088C03 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088C07 E10C                       	smpsAlterNote       $0C
00088C09 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088C15 8001                       	dc.b	nRst, $01
00088C17 E10B                       	smpsAlterNote       $0B
00088C19 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088C21 E107                       	smpsAlterNote       $07
00088C23 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088C27 E10B                       	smpsAlterNote       $0B
00088C29 9603                       	dc.b	nA1, $03
00088C2B E109                       	smpsAlterNote       $09
00088C2D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088C31 E108                       	smpsAlterNote       $08
00088C33 9D06                       	dc.b	nE2, $06
00088C35 E107                       	smpsAlterNote       $07
00088C37 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088C3B E106                       	smpsAlterNote       $06
00088C3D 9903                       	dc.b	nC2, $03
00088C3F E10C                       	smpsAlterNote       $0C
00088C41 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088C45 E10B                       	smpsAlterNote       $0B
00088C47 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088C53 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088C5D E10C                       	smpsAlterNote       $0C
00088C5F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00088C6B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088C77 8001                       	dc.b	nRst, $01
00088C79 E10B                       	smpsAlterNote       $0B
00088C7B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088C87 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00088C93 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00088C9F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088CA9 E10C                       	smpsAlterNote       $0C
00088CAB 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088CB7 E10B                       	smpsAlterNote       $0B
00088CB9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088CC1 E107                       	smpsAlterNote       $07
00088CC3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088CC7 E10B                       	smpsAlterNote       $0B
00088CC9 9603                       	dc.b	nA1, $03
00088CCB E109                       	smpsAlterNote       $09
00088CCD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088CD1 E108                       	smpsAlterNote       $08
00088CD3 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00088CD7 E107                       	smpsAlterNote       $07
00088CD9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088CDD E106                       	smpsAlterNote       $06
00088CDF 9903                       	dc.b	nC2, $03
00088CE1 E10C                       	smpsAlterNote       $0C
00088CE3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088CE7 E10B                       	smpsAlterNote       $0B
00088CE9 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CF5 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CFF E10C                       	smpsAlterNote       $0C
00088D01 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00088D0D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088D19 8001                       	dc.b	nRst, $01
00088D1B E10B                       	smpsAlterNote       $0B
00088D1D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D29 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088D33 E10C                       	smpsAlterNote       $0C
00088D35 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D41 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00088D4D E10B                       	smpsAlterNote       $0B
00088D4F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D5B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088D65 E10C                       	smpsAlterNote       $0C
00088D67 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D73 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00088D7F E10B                       	smpsAlterNote       $0B
00088D81 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00088D8D 8001                       	dc.b	nRst, $01
00088D8F E1EC                       	smpsAlterNote       $EC
00088D91 A101                       	dc.b	nAb2, $01
00088D93 E1FA                       	smpsAlterNote       $FA
00088D95 E701                       	dc.b	smpsNoAttack, $01
00088D97 E116                       	smpsAlterNote       $16
00088D99 E701                       	dc.b	smpsNoAttack, $01
00088D9B E1F5                       	smpsAlterNote       $F5
00088D9D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088DA0 E10B                       	smpsAlterNote       $0B
00088DA2 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00088DAE 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088DBA E107                       	smpsAlterNote       $07
00088DBC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088DC2 E10B                       	smpsAlterNote       $0B
00088DC4 A203                       	dc.b	nA2, $03
00088DC6 E107                       	smpsAlterNote       $07
00088DC8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088DCC E1F3                       	smpsAlterNote       $F3
00088DCE A401                       	dc.b	nB2, $01
00088DD0 E102                       	smpsAlterNote       $02
00088DD2 E701                       	dc.b	smpsNoAttack, $01
00088DD4 E109                       	smpsAlterNote       $09
00088DD6 E701                       	dc.b	smpsNoAttack, $01
00088DD8 E102                       	smpsAlterNote       $02
00088DDA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088DDD E106                       	smpsAlterNote       $06
00088DDF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088DE3 E107                       	smpsAlterNote       $07
00088DE5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088DE9 E108                       	smpsAlterNote       $08
00088DEB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088DF1 E109                       	smpsAlterNote       $09
00088DF3 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088DF7 E1F2                       	smpsAlterNote       $F2
00088DF9 A401                       	dc.b	nB2, $01
00088DFB E1FF                       	smpsAlterNote       $FF
00088DFD E701                       	dc.b	smpsNoAttack, $01
00088DFF E111                       	smpsAlterNote       $11
00088E01 E701                       	dc.b	smpsNoAttack, $01
00088E03 E1FB                       	smpsAlterNote       $FB
00088E05 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088E08 E106                       	smpsAlterNote       $06
00088E0A E702                       	dc.b	smpsNoAttack, $02
00088E0C E109                       	smpsAlterNote       $09
00088E0E A007                       	dc.b	nG2, $07
00088E10 E108                       	smpsAlterNote       $08
00088E12 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088E16 E107                       	smpsAlterNote       $07
00088E18 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E1E E10B                       	smpsAlterNote       $0B
00088E20 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088E24 E107                       	smpsAlterNote       $07
00088E26 9B03                       	dc.b	nD2, $03
00088E28 E11A                       	smpsAlterNote       $1A
00088E2A A301                       	dc.b	nBb2, $01
00088E2C E1F2                       	smpsAlterNote       $F2
00088E2E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E31 E1FF                       	smpsAlterNote       $FF
00088E33 E701                       	dc.b	smpsNoAttack, $01
00088E35 E111                       	smpsAlterNote       $11
00088E37 E701                       	dc.b	smpsNoAttack, $01
00088E39 E106                       	smpsAlterNote       $06
00088E3B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088E3E E107                       	smpsAlterNote       $07
00088E40 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00088E4C E117                       	smpsAlterNote       $17
00088E4E A001                       	dc.b	nG2, $01
00088E50 E1FA                       	smpsAlterNote       $FA
00088E52 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088E55 E116                       	smpsAlterNote       $16
00088E57 E701                       	dc.b	smpsNoAttack, $01
00088E59 E1F5                       	smpsAlterNote       $F5
00088E5B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088E5E E103                       	smpsAlterNote       $03
00088E60 E701                       	dc.b	smpsNoAttack, $01
00088E62 E10B                       	smpsAlterNote       $0B
00088E64 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088E68 E107                       	smpsAlterNote       $07
00088E6A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E70 E109                       	smpsAlterNote       $09
00088E72 9E03                       	dc.b	nF2, $03
00088E74 E10B                       	smpsAlterNote       $0B
00088E76 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088E7A E107                       	smpsAlterNote       $07
00088E7C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088E82 E10B                       	smpsAlterNote       $0B
00088E84 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088E88 E107                       	smpsAlterNote       $07
00088E8A 9B03                       	dc.b	nD2, $03
00088E8C E11A                       	smpsAlterNote       $1A
00088E8E A301                       	dc.b	nBb2, $01
00088E90 E1F9                       	smpsAlterNote       $F9
00088E92 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E95 E1FF                       	smpsAlterNote       $FF
00088E97 E701                       	dc.b	smpsNoAttack, $01
00088E99 E111                       	smpsAlterNote       $11
00088E9B E701                       	dc.b	smpsNoAttack, $01
00088E9D E106                       	smpsAlterNote       $06
00088E9F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088EA2 E107                       	smpsAlterNote       $07
00088EA4 9B03                       	dc.b	nD2, $03
00088EA6 E108                       	smpsAlterNote       $08
00088EA8 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088EAE E109                       	smpsAlterNote       $09
00088EB0 A003                       	dc.b	nG2, $03
00088EB2 E1F0                       	smpsAlterNote       $F0
00088EB4 A501                       	dc.b	nC3, $01
00088EB6 E106                       	smpsAlterNote       $06
00088EB8 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00088EBC E109                       	smpsAlterNote       $09
00088EBE A006 8001                  	dc.b	nG2, $06, nRst, $01
00088EC2 E108                       	smpsAlterNote       $08
00088EC4 9C03                       	dc.b	nEb2, $03
00088EC6 E107                       	smpsAlterNote       $07
00088EC8 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088ECE E10B                       	smpsAlterNote       $0B
00088ED0 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088ED4 E107                       	smpsAlterNote       $07
00088ED6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088EDA E11A                       	smpsAlterNote       $1A
00088EDC A301                       	dc.b	nBb2, $01
00088EDE E1F9                       	smpsAlterNote       $F9
00088EE0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088EE3 E107                       	smpsAlterNote       $07
00088EE5 E701                       	dc.b	smpsNoAttack, $01
00088EE7 E1FB                       	smpsAlterNote       $FB
00088EE9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088EEC E106                       	smpsAlterNote       $06
00088EEE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088EF2 E107                       	smpsAlterNote       $07
00088EF4 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088EFC E1EC                       	smpsAlterNote       $EC
00088EFE A101                       	dc.b	nAb2, $01
00088F00 E108                       	smpsAlterNote       $08
00088F02 E701                       	dc.b	smpsNoAttack, $01
00088F04 E1E7                       	smpsAlterNote       $E7
00088F06 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088F09 E1F5                       	smpsAlterNote       $F5
00088F0B E701                       	dc.b	smpsNoAttack, $01
00088F0D E10B                       	smpsAlterNote       $0B
00088F0F E702                       	dc.b	smpsNoAttack, $02
00088F11 E107                       	smpsAlterNote       $07
00088F13 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088F19 E106                       	smpsAlterNote       $06
00088F1B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088F21 E10C                       	smpsAlterNote       $0C
00088F23 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088F2B E109                       	smpsAlterNote       $09
00088F2D 9E03                       	dc.b	nF2, $03
00088F2F E10C                       	smpsAlterNote       $0C
00088F31 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F35 E1EA                       	smpsAlterNote       $EA
00088F37 A201                       	dc.b	nA2, $01
00088F39 E106                       	smpsAlterNote       $06
00088F3B E701                       	dc.b	smpsNoAttack, $01
00088F3D E114                       	smpsAlterNote       $14
00088F3F E701                       	dc.b	smpsNoAttack, $01
00088F41 E1F0                       	smpsAlterNote       $F0
00088F43 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F46 E10C                       	smpsAlterNote       $0C
00088F48 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088F54 9703                       	dc.b	nBb1, $03
00088F56 E116                       	smpsAlterNote       $16
00088F58 9C01                       	dc.b	nEb2, $01
00088F5A E105                       	smpsAlterNote       $05
00088F5C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088F5F E113                       	smpsAlterNote       $13
00088F61 E701                       	dc.b	smpsNoAttack, $01
00088F63 E1FF                       	smpsAlterNote       $FF
00088F65 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088F68 E109                       	smpsAlterNote       $09
00088F6A E703                       	dc.b	smpsNoAttack, $03
00088F6C E10C                       	smpsAlterNote       $0C
00088F6E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088F7A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088F82 E109                       	smpsAlterNote       $09
00088F84 9E03                       	dc.b	nF2, $03
00088F86 E10C                       	smpsAlterNote       $0C
00088F88 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F8C E1EA                       	smpsAlterNote       $EA
00088F8E A201                       	dc.b	nA2, $01
00088F90 E106                       	smpsAlterNote       $06
00088F92 E701                       	dc.b	smpsNoAttack, $01
00088F94 E1E2                       	smpsAlterNote       $E2
00088F96 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F99 E1F0                       	smpsAlterNote       $F0
00088F9B E701                       	dc.b	smpsNoAttack, $01
00088F9D E10C                       	smpsAlterNote       $0C
00088F9F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088FAB E116                       	smpsAlterNote       $16
00088FAD 9C01                       	dc.b	nEb2, $01
00088FAF E105                       	smpsAlterNote       $05
00088FB1 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088FB4 E1F1                       	smpsAlterNote       $F1
00088FB6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088FB9 E1FF                       	smpsAlterNote       $FF
00088FBB E701                       	dc.b	smpsNoAttack, $01
00088FBD E109                       	smpsAlterNote       $09
00088FBF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088FC3 E10C                       	smpsAlterNote       $0C
00088FC5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00088FD1 E106                       	smpsAlterNote       $06
00088FD3 9903                       	dc.b	nC2, $03
00088FD5 E107                       	smpsAlterNote       $07
00088FD7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FDB E109                       	smpsAlterNote       $09
00088FDD 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00088FE3 E107                       	smpsAlterNote       $07
00088FE5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FE9 E108                       	smpsAlterNote       $08
00088FEB 9D03                       	dc.b	nE2, $03
00088FED E10B                       	smpsAlterNote       $0B
00088FEF 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088FF5 E109                       	smpsAlterNote       $09
00088FF7 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00088FFD E10C                       	smpsAlterNote       $0C
00088FFF 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00089005 E106                       	smpsAlterNote       $06
00089007 9903                       	dc.b	nC2, $03
00089009 E11A                       	smpsAlterNote       $1A
0008900B A301                       	dc.b	nBb2, $01
0008900D E1F9                       	smpsAlterNote       $F9
0008900F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00089012 E1FF                       	smpsAlterNote       $FF
00089014 E701                       	dc.b	smpsNoAttack, $01
00089016 E111                       	smpsAlterNote       $11
00089018 E701                       	dc.b	smpsNoAttack, $01
0008901A E106                       	smpsAlterNote       $06
0008901C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00089023 E109                       	smpsAlterNote       $09
00089025 A003                       	dc.b	nG2, $03
00089027 E106                       	smpsAlterNote       $06
00089029 9907                       	dc.b	nC2, $07
0008902B E107                       	smpsAlterNote       $07
0008902D 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00089035 E10B                       	smpsAlterNote       $0B
00089037 A203                       	dc.b	nA2, $03
00089039 E107                       	smpsAlterNote       $07
0008903B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008903F E1F2                       	smpsAlterNote       $F2
00089041 A401                       	dc.b	nB2, $01
00089043 E1F9                       	smpsAlterNote       $F9
00089045 E701                       	dc.b	smpsNoAttack, $01
00089047 E107                       	smpsAlterNote       $07
00089049 E701                       	dc.b	smpsNoAttack, $01
0008904B E1FB                       	smpsAlterNote       $FB
0008904D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00089050 E106                       	smpsAlterNote       $06
00089052 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00089056 E107                       	smpsAlterNote       $07
00089058 9B03                       	dc.b	nD2, $03
0008905A E108                       	smpsAlterNote       $08
0008905C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00089062 E109                       	smpsAlterNote       $09
00089064 A003 8001                  	dc.b	nG2, $03, nRst, $01
00089068 E1F2                       	smpsAlterNote       $F2
0008906A A401                       	dc.b	nB2, $01
0008906C E1F9                       	smpsAlterNote       $F9
0008906E E701                       	dc.b	smpsNoAttack, $01
00089070 E107                       	smpsAlterNote       $07
00089072 E701                       	dc.b	smpsNoAttack, $01
00089074 E1FB                       	smpsAlterNote       $FB
00089076 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00089079 E106                       	smpsAlterNote       $06
0008907B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008907F E108                       	smpsAlterNote       $08
00089081 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00089085 E10C                       	smpsAlterNote       $0C
00089087 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008908B E107                       	smpsAlterNote       $07
0008908D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00089093 E10B                       	smpsAlterNote       $0B
00089095 A203                       	dc.b	nA2, $03
00089097 E107                       	smpsAlterNote       $07
00089099 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008909D E1F2                       	smpsAlterNote       $F2
0008909F A401                       	dc.b	nB2, $01
000890A1 E1FF                       	smpsAlterNote       $FF
000890A3 E701                       	dc.b	smpsNoAttack, $01
000890A5 E107                       	smpsAlterNote       $07
000890A7 E701                       	dc.b	smpsNoAttack, $01
000890A9 E1FB                       	smpsAlterNote       $FB
000890AB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000890AE E106                       	smpsAlterNote       $06
000890B0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000890B4 E107                       	smpsAlterNote       $07
000890B6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000890BA E108                       	smpsAlterNote       $08
000890BC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000890C2 E109                       	smpsAlterNote       $09
000890C4 A003 8001                  	dc.b	nG2, $03, nRst, $01
000890C8 E1F2                       	smpsAlterNote       $F2
000890CA A401                       	dc.b	nB2, $01
000890CC E1FF                       	smpsAlterNote       $FF
000890CE E701                       	dc.b	smpsNoAttack, $01
000890D0 E111                       	smpsAlterNote       $11
000890D2 E701                       	dc.b	smpsNoAttack, $01
000890D4 E1FB                       	smpsAlterNote       $FB
000890D6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000890D9 E106                       	smpsAlterNote       $06
000890DB E702                       	dc.b	smpsNoAttack, $02
000890DD E108                       	smpsAlterNote       $08
000890DF 9C07                       	dc.b	nEb2, $07
000890E1 E10C                       	smpsAlterNote       $0C
000890E3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000890E7 E107                       	smpsAlterNote       $07
000890E9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000890EF E10B                       	smpsAlterNote       $0B
000890F1 A202 8001                  	dc.b	nA2, $02, nRst, $01
000890F5 E107                       	smpsAlterNote       $07
000890F7 9B03                       	dc.b	nD2, $03
000890F9 E11A                       	smpsAlterNote       $1A
000890FB A301                       	dc.b	nBb2, $01
000890FD E1F2                       	smpsAlterNote       $F2
000890FF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00089102 E1FF                       	smpsAlterNote       $FF
00089104 E701                       	dc.b	smpsNoAttack, $01
00089106 E111                       	smpsAlterNote       $11
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E106                       	smpsAlterNote       $06
0008910C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008910F E107                       	smpsAlterNote       $07
00089111 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00089115 E108                       	smpsAlterNote       $08
00089117 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008911F E109                       	smpsAlterNote       $09
00089121 A003                       	dc.b	nG2, $03
00089123 E11A                       	smpsAlterNote       $1A
00089125 A301                       	dc.b	nBb2, $01
00089127 E1F2                       	smpsAlterNote       $F2
00089129 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008912C E1FF                       	smpsAlterNote       $FF
0008912E E701                       	dc.b	smpsNoAttack, $01
00089130 E111                       	smpsAlterNote       $11
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E106                       	smpsAlterNote       $06
00089136 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00089139 E108                       	smpsAlterNote       $08
0008913B 9C07                       	dc.b	nEb2, $07
0008913D E10C                       	smpsAlterNote       $0C
0008913F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089143 E107                       	smpsAlterNote       $07
00089145 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00089151 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008915B E108                       	smpsAlterNote       $08
0008915D 9C06                       	dc.b	nEb2, $06
0008915F E10C                       	smpsAlterNote       $0C
00089161 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00089165 E108                       	smpsAlterNote       $08
00089167 9C03                       	dc.b	nEb2, $03
00089169 E109                       	smpsAlterNote       $09
0008916B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008916F E10C                       	smpsAlterNote       $0C
00089171 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00089179 E107                       	smpsAlterNote       $07
0008917B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008917F F6F4 F8                    	smpsJump            music84_Jump04
00089182                            
00089182                            ; FM2 Data
00089182                            music84_FM2:
00089182 E0C0                       	smpsPan             panCenter, $00
00089186 E10B                       	smpsAlterNote       $0B
00089188 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008918C E109                       	smpsAlterNote       $09
0008918E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00089192 E108                       	smpsAlterNote       $08
00089194 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008919A E080                       	smpsPan             panLeft, $00
0008919C E10C                       	smpsAlterNote       $0C
0008919E E6F9                       	smpsAlterVol        $F9
000891A0 C703                       	dc.b	nBb5, $03
000891A2 E10B                       	smpsAlterNote       $0B
000891A4 C603 8001                  	dc.b	nA5, $03, nRst, $01
000891A8 E109                       	smpsAlterNote       $09
000891AA C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000891B0 E108                       	smpsAlterNote       $08
000891B2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000891B6 E106                       	smpsAlterNote       $06
000891B8 BD03                       	dc.b	nC5, $03
000891BA E10B                       	smpsAlterNote       $0B
000891BC BA03 8001                  	dc.b	nA4, $03, nRst, $01
000891C2 E0C0                       	smpsPan             panCenter, $00
000891C4 E107                       	smpsAlterNote       $07
000891C6 E606                       	smpsAlterVol        $06
000891C8 BF03                       	dc.b	nD5, $03
000891CA                            
000891CA                            music84_Jump03:
000891CA E108                       	smpsAlterNote       $08
000891CC C103 8001                  	dc.b	nE5, $03, nRst, $01
000891D0 E109                       	smpsAlterNote       $09
000891D2 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000891D8 E10B                       	smpsAlterNote       $0B
000891DA C607                       	dc.b	nA5, $07
000891DC E107                       	smpsAlterNote       $07
000891DE BF03 8001                  	dc.b	nD5, $03, nRst, $01
000891E2 E106                       	smpsAlterNote       $06
000891E4 C90D                       	dc.b	nC6, $0D
000891E6 E100                       	smpsAlterNote       $00
000891E8 E701                       	dc.b	smpsNoAttack, $01
000891EA E1FF                       	smpsAlterNote       $FF
000891EC E701                       	dc.b	smpsNoAttack, $01
000891EE E103                       	smpsAlterNote       $03
000891F0 E701                       	dc.b	smpsNoAttack, $01
000891F2 E109                       	smpsAlterNote       $09
000891F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891F8 E106                       	smpsAlterNote       $06
000891FA E701                       	dc.b	smpsNoAttack, $01
000891FC E100                       	smpsAlterNote       $00
000891FE E701                       	dc.b	smpsNoAttack, $01
00089200 E10C                       	smpsAlterNote       $0C
00089202 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089206 E10B                       	smpsAlterNote       $0B
00089208 C603                       	dc.b	nA5, $03
0008920A E109                       	smpsAlterNote       $09
0008920C C403 8001                  	dc.b	nG5, $03, nRst, $01
00089210 E10B                       	smpsAlterNote       $0B
00089212 C60D                       	dc.b	nA5, $0D
00089214 E105                       	smpsAlterNote       $05
00089216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008921A E10B                       	smpsAlterNote       $0B
0008921C E701                       	dc.b	smpsNoAttack, $01
0008921E E10E                       	smpsAlterNote       $0E
00089220 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089224 E108                       	smpsAlterNote       $08
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E104                       	smpsAlterNote       $04
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E105                       	smpsAlterNote       $05
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E10B                       	smpsAlterNote       $0B
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E10F                       	smpsAlterNote       $0F
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E10B                       	smpsAlterNote       $0B
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E108                       	smpsAlterNote       $08
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E104                       	smpsAlterNote       $04
00089242 E701                       	dc.b	smpsNoAttack, $01
00089244 E108                       	smpsAlterNote       $08
00089246 E701                       	dc.b	smpsNoAttack, $01
00089248 E10E                       	smpsAlterNote       $0E
0008924A E701                       	dc.b	smpsNoAttack, $01
0008924C E10F                       	smpsAlterNote       $0F
0008924E E701                       	dc.b	smpsNoAttack, $01
00089250 E10B                       	smpsAlterNote       $0B
00089252 E701                       	dc.b	smpsNoAttack, $01
00089254 E105                       	smpsAlterNote       $05
00089256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008925A E108                       	smpsAlterNote       $08
0008925C E701                       	dc.b	smpsNoAttack, $01
0008925E E10E                       	smpsAlterNote       $0E
00089260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089264 E108                       	smpsAlterNote       $08
00089266 E701                       	dc.b	smpsNoAttack, $01
00089268 E105                       	smpsAlterNote       $05
0008926A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008926E E10B                       	smpsAlterNote       $0B
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 E10F                       	smpsAlterNote       $0F
00089274 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00089278 E107                       	smpsAlterNote       $07
0008927A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008927E E108                       	smpsAlterNote       $08
00089280 C103                       	dc.b	nE5, $03
00089282 E109                       	smpsAlterNote       $09
00089284 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008928C E10B                       	smpsAlterNote       $0B
0008928E C606 8001                  	dc.b	nA5, $06, nRst, $01
00089292 E107                       	smpsAlterNote       $07
00089294 BF03                       	dc.b	nD5, $03
00089296 E106                       	smpsAlterNote       $06
00089298 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008929C E107                       	smpsAlterNote       $07
0008929E CB03                       	dc.b	nD6, $03
000892A0 E10C                       	smpsAlterNote       $0C
000892A2 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000892A6 E10B                       	smpsAlterNote       $0B
000892A8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000892AC E109                       	smpsAlterNote       $09
000892AE C404                       	dc.b	nG5, $04
000892B0 E10B                       	smpsAlterNote       $0B
000892B2 C60D                       	dc.b	nA5, $0D
000892B4 E108                       	smpsAlterNote       $08
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E104                       	smpsAlterNote       $04
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E108                       	smpsAlterNote       $08
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E10B                       	smpsAlterNote       $0B
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E10F                       	smpsAlterNote       $0F
000892C6 E701                       	dc.b	smpsNoAttack, $01
000892C8 E10B                       	smpsAlterNote       $0B
000892CA E701                       	dc.b	smpsNoAttack, $01
000892CC E105                       	smpsAlterNote       $05
000892CE E701                       	dc.b	smpsNoAttack, $01
000892D0 E104                       	smpsAlterNote       $04
000892D2 E701                       	dc.b	smpsNoAttack, $01
000892D4 E108                       	smpsAlterNote       $08
000892D6 E701                       	dc.b	smpsNoAttack, $01
000892D8 E10E                       	smpsAlterNote       $0E
000892DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892DE E10B                       	smpsAlterNote       $0B
000892E0 E701                       	dc.b	smpsNoAttack, $01
000892E2 E105                       	smpsAlterNote       $05
000892E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E8 E10B                       	smpsAlterNote       $0B
000892EA E701                       	dc.b	smpsNoAttack, $01
000892EC E10E                       	smpsAlterNote       $0E
000892EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892F2 E108                       	smpsAlterNote       $08
000892F4 E701                       	dc.b	smpsNoAttack, $01
000892F6 E104                       	smpsAlterNote       $04
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E105                       	smpsAlterNote       $05
000892FC E701                       	dc.b	smpsNoAttack, $01
000892FE E10B                       	smpsAlterNote       $0B
00089300 E701                       	dc.b	smpsNoAttack, $01
00089302 E10F                       	smpsAlterNote       $0F
00089304 E701                       	dc.b	smpsNoAttack, $01
00089306 E10B                       	smpsAlterNote       $0B
00089308 E701                       	dc.b	smpsNoAttack, $01
0008930A E108                       	smpsAlterNote       $08
0008930C E701                       	dc.b	smpsNoAttack, $01
0008930E E105                       	smpsAlterNote       $05
00089310 8001                       	dc.b	nRst, $01
00089312 E109                       	smpsAlterNote       $09
00089314 C401                       	dc.b	nG5, $01
00089316 E10B                       	smpsAlterNote       $0B
00089318 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00089321 E109                       	smpsAlterNote       $09
00089323 C404 8001                  	dc.b	nG5, $04, nRst, $01
00089327 E10B                       	smpsAlterNote       $0B
00089329 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008932D E107                       	smpsAlterNote       $07
0008932F BF0D                       	dc.b	nD5, $0D
00089331 E101                       	smpsAlterNote       $01
00089333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089337 E104                       	smpsAlterNote       $04
00089339 E701                       	dc.b	smpsNoAttack, $01
0008933B E10A                       	smpsAlterNote       $0A
0008933D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089341 E104                       	smpsAlterNote       $04
00089343 E701                       	dc.b	smpsNoAttack, $01
00089345 E101                       	smpsAlterNote       $01
00089347 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008934B E107                       	smpsAlterNote       $07
0008934D E701                       	dc.b	smpsNoAttack, $01
0008934F E10B                       	smpsAlterNote       $0B
00089351 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089355 E108                       	smpsAlterNote       $08
00089357 C101                       	dc.b	nE5, $01
00089359 E109                       	smpsAlterNote       $09
0008935B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00089360 E10B                       	smpsAlterNote       $0B
00089362 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008936A E108                       	smpsAlterNote       $08
0008936C CD06                       	dc.b	nE6, $06
0008936E E109                       	smpsAlterNote       $09
00089370 CE07                       	dc.b	nF6, $07
00089372 E108                       	smpsAlterNote       $08
00089374 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00089378 E106                       	smpsAlterNote       $06
0008937A C903                       	dc.b	nC6, $03
0008937C E109                       	smpsAlterNote       $09
0008937E C403 8001                  	dc.b	nG5, $03, nRst, $01
00089382 E10C                       	smpsAlterNote       $0C
00089384 C70D                       	dc.b	nBb5, $0D
00089386 E106                       	smpsAlterNote       $06
00089388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008938C E109                       	smpsAlterNote       $09
0008938E E701                       	dc.b	smpsNoAttack, $01
00089390 E10F                       	smpsAlterNote       $0F
00089392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089396 E109                       	smpsAlterNote       $09
00089398 E701                       	dc.b	smpsNoAttack, $01
0008939A E106                       	smpsAlterNote       $06
0008939C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893A0 E10C                       	smpsAlterNote       $0C
000893A2 E701                       	dc.b	smpsNoAttack, $01
000893A4 E110                       	smpsAlterNote       $10
000893A6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000893AA E10B                       	smpsAlterNote       $0B
000893AC C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000893B0 E105                       	smpsAlterNote       $05
000893B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893B6 E10B                       	smpsAlterNote       $0B
000893B8 E701                       	dc.b	smpsNoAttack, $01
000893BA E10E                       	smpsAlterNote       $0E
000893BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893C0 E108                       	smpsAlterNote       $08
000893C2 E701                       	dc.b	smpsNoAttack, $01
000893C4 E104                       	smpsAlterNote       $04
000893C6 E701                       	dc.b	smpsNoAttack, $01
000893C8 E105                       	smpsAlterNote       $05
000893CA E701                       	dc.b	smpsNoAttack, $01
000893CC E10B                       	smpsAlterNote       $0B
000893CE E701                       	dc.b	smpsNoAttack, $01
000893D0 E10F                       	smpsAlterNote       $0F
000893D2 E701                       	dc.b	smpsNoAttack, $01
000893D4 E10B                       	smpsAlterNote       $0B
000893D6 E701                       	dc.b	smpsNoAttack, $01
000893D8 E108                       	smpsAlterNote       $08
000893DA E701                       	dc.b	smpsNoAttack, $01
000893DC E104                       	smpsAlterNote       $04
000893DE E701                       	dc.b	smpsNoAttack, $01
000893E0 E108                       	smpsAlterNote       $08
000893E2 E701                       	dc.b	smpsNoAttack, $01
000893E4 E10E                       	smpsAlterNote       $0E
000893E6 E701                       	dc.b	smpsNoAttack, $01
000893E8 E10F                       	smpsAlterNote       $0F
000893EA E701                       	dc.b	smpsNoAttack, $01
000893EC E10B                       	smpsAlterNote       $0B
000893EE E701                       	dc.b	smpsNoAttack, $01
000893F0 E105                       	smpsAlterNote       $05
000893F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893F6 E108                       	smpsAlterNote       $08
000893F8 E701                       	dc.b	smpsNoAttack, $01
000893FA E10E                       	smpsAlterNote       $0E
000893FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089400 E108                       	smpsAlterNote       $08
00089402 E701                       	dc.b	smpsNoAttack, $01
00089404 E105                       	smpsAlterNote       $05
00089406 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008940A E10B                       	smpsAlterNote       $0B
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E10F                       	smpsAlterNote       $0F
00089410 E701                       	dc.b	smpsNoAttack, $01
00089412 E10E                       	smpsAlterNote       $0E
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E108                       	smpsAlterNote       $08
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E104                       	smpsAlterNote       $04
0008941C E701                       	dc.b	smpsNoAttack, $01
0008941E E108                       	smpsAlterNote       $08
00089420 E701                       	dc.b	smpsNoAttack, $01
00089422 E10E                       	smpsAlterNote       $0E
00089424 E701                       	dc.b	smpsNoAttack, $01
00089426 E10F                       	smpsAlterNote       $0F
00089428 E701                       	dc.b	smpsNoAttack, $01
0008942A E10B                       	smpsAlterNote       $0B
0008942C E701                       	dc.b	smpsNoAttack, $01
0008942E E105                       	smpsAlterNote       $05
00089430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089434 E108                       	smpsAlterNote       $08
00089436 E701                       	dc.b	smpsNoAttack, $01
00089438 E10E                       	smpsAlterNote       $0E
0008943A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008943E E108                       	smpsAlterNote       $08
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E105                       	smpsAlterNote       $05
00089444 E701                       	dc.b	smpsNoAttack, $01
00089446 E10B                       	smpsAlterNote       $0B
00089448 C60D                       	dc.b	nA5, $0D
0008944A E108                       	smpsAlterNote       $08
0008944C E701                       	dc.b	smpsNoAttack, $01
0008944E E104                       	smpsAlterNote       $04
00089450 E701                       	dc.b	smpsNoAttack, $01
00089452 E105                       	smpsAlterNote       $05
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E10B                       	smpsAlterNote       $0B
00089458 E701                       	dc.b	smpsNoAttack, $01
0008945A E10F                       	smpsAlterNote       $0F
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E E10B                       	smpsAlterNote       $0B
00089460 E701                       	dc.b	smpsNoAttack, $01
00089462 E108                       	smpsAlterNote       $08
00089464 E701                       	dc.b	smpsNoAttack, $01
00089466 E104                       	smpsAlterNote       $04
00089468 E701                       	dc.b	smpsNoAttack, $01
0008946A E108                       	smpsAlterNote       $08
0008946C E701                       	dc.b	smpsNoAttack, $01
0008946E E10E                       	smpsAlterNote       $0E
00089470 E701                       	dc.b	smpsNoAttack, $01
00089472 E10F                       	smpsAlterNote       $0F
00089474 E701                       	dc.b	smpsNoAttack, $01
00089478 E109                       	smpsAlterNote       $09
0008947A E6FF                       	smpsAlterVol        $FF
0008947C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00089486 E108                       	smpsAlterNote       $08
00089488 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008948E E107                       	smpsAlterNote       $07
00089490 E601                       	smpsAlterVol        $01
00089492 BF03                       	dc.b	nD5, $03
00089494 E108                       	smpsAlterNote       $08
00089496 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008949A E109                       	smpsAlterNote       $09
0008949C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000894A2 E10B                       	smpsAlterNote       $0B
000894A4 C606 8001                  	dc.b	nA5, $06, nRst, $01
000894A8 E107                       	smpsAlterNote       $07
000894AA BF02 8001                  	dc.b	nD5, $02, nRst, $01
000894AE E106                       	smpsAlterNote       $06
000894B0 C90D                       	dc.b	nC6, $0D
000894B2 E103                       	smpsAlterNote       $03
000894B4 E701                       	dc.b	smpsNoAttack, $01
000894B6 E1FF                       	smpsAlterNote       $FF
000894B8 E701                       	dc.b	smpsNoAttack, $01
000894BA E103                       	smpsAlterNote       $03
000894BC E701                       	dc.b	smpsNoAttack, $01
000894BE E109                       	smpsAlterNote       $09
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E10A                       	smpsAlterNote       $0A
000894C4 E701                       	dc.b	smpsNoAttack, $01
000894C6 E106                       	smpsAlterNote       $06
000894C8 E701                       	dc.b	smpsNoAttack, $01
000894CA E100                       	smpsAlterNote       $00
000894CC E701                       	dc.b	smpsNoAttack, $01
000894CE E10C                       	smpsAlterNote       $0C
000894D0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000894D4 E10B                       	smpsAlterNote       $0B
000894D6 C603                       	dc.b	nA5, $03
000894D8 E109                       	smpsAlterNote       $09
000894DA C403 8001                  	dc.b	nG5, $03, nRst, $01
000894DE E10B                       	smpsAlterNote       $0B
000894E0 C60D                       	dc.b	nA5, $0D
000894E2 E105                       	smpsAlterNote       $05
000894E4 E701                       	dc.b	smpsNoAttack, $01
000894E6 E104                       	smpsAlterNote       $04
000894E8 E701                       	dc.b	smpsNoAttack, $01
000894EA E108                       	smpsAlterNote       $08
000894EC E701                       	dc.b	smpsNoAttack, $01
000894EE E10E                       	smpsAlterNote       $0E
000894F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894F4 E10B                       	smpsAlterNote       $0B
000894F6 E701                       	dc.b	smpsNoAttack, $01
000894F8 E105                       	smpsAlterNote       $05
000894FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894FE E10B                       	smpsAlterNote       $0B
00089500 E701                       	dc.b	smpsNoAttack, $01
00089502 E10E                       	smpsAlterNote       $0E
00089504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089508 E108                       	smpsAlterNote       $08
0008950A E701                       	dc.b	smpsNoAttack, $01
0008950C E104                       	smpsAlterNote       $04
0008950E E701                       	dc.b	smpsNoAttack, $01
00089510 E105                       	smpsAlterNote       $05
00089512 E701                       	dc.b	smpsNoAttack, $01
00089514 E10B                       	smpsAlterNote       $0B
00089516 E701                       	dc.b	smpsNoAttack, $01
00089518 E10F                       	smpsAlterNote       $0F
0008951A E701                       	dc.b	smpsNoAttack, $01
0008951C E10B                       	smpsAlterNote       $0B
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 E108                       	smpsAlterNote       $08
00089522 E701                       	dc.b	smpsNoAttack, $01
00089524 E104                       	smpsAlterNote       $04
00089526 E701                       	dc.b	smpsNoAttack, $01
00089528 E108                       	smpsAlterNote       $08
0008952A E701                       	dc.b	smpsNoAttack, $01
0008952C E10E                       	smpsAlterNote       $0E
0008952E E701                       	dc.b	smpsNoAttack, $01
00089530 E10F                       	smpsAlterNote       $0F
00089532 E701                       	dc.b	smpsNoAttack, $01
00089534 E10B                       	smpsAlterNote       $0B
00089536 E701                       	dc.b	smpsNoAttack, $01
00089538 E105                       	smpsAlterNote       $05
0008953A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008953E E108                       	smpsAlterNote       $08
00089540 E701                       	dc.b	smpsNoAttack, $01
00089542 E10E                       	smpsAlterNote       $0E
00089544 E701                       	dc.b	smpsNoAttack, $01
00089546 E10F                       	smpsAlterNote       $0F
00089548 800F                       	dc.b	nRst, $0F
0008954A E107                       	smpsAlterNote       $07
0008954C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089550 E108                       	smpsAlterNote       $08
00089552 C103                       	dc.b	nE5, $03
00089554 E109                       	smpsAlterNote       $09
00089556 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008955C E10B                       	smpsAlterNote       $0B
0008955E C606 8001                  	dc.b	nA5, $06, nRst, $01
00089562 E107                       	smpsAlterNote       $07
00089564 BF03                       	dc.b	nD5, $03
00089566 E106                       	smpsAlterNote       $06
00089568 C90E                       	dc.b	nC6, $0E
0008956A E107                       	smpsAlterNote       $07
0008956C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089570 E10C                       	smpsAlterNote       $0C
00089572 C704                       	dc.b	nBb5, $04
00089574 E10B                       	smpsAlterNote       $0B
00089576 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008957A E109                       	smpsAlterNote       $09
0008957C C404                       	dc.b	nG5, $04
0008957E E10B                       	smpsAlterNote       $0B
00089580 C60D                       	dc.b	nA5, $0D
00089582 E108                       	smpsAlterNote       $08
00089584 E701                       	dc.b	smpsNoAttack, $01
00089586 E105                       	smpsAlterNote       $05
00089588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008958C E10B                       	smpsAlterNote       $0B
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E10F                       	smpsAlterNote       $0F
00089592 E701                       	dc.b	smpsNoAttack, $01
00089594 E10E                       	smpsAlterNote       $0E
00089596 E701                       	dc.b	smpsNoAttack, $01
00089598 E108                       	smpsAlterNote       $08
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E104                       	smpsAlterNote       $04
0008959E E701                       	dc.b	smpsNoAttack, $01
000895A0 E108                       	smpsAlterNote       $08
000895A2 E701                       	dc.b	smpsNoAttack, $01
000895A4 E10B                       	smpsAlterNote       $0B
000895A6 E701                       	dc.b	smpsNoAttack, $01
000895A8 E10F                       	smpsAlterNote       $0F
000895AA E701                       	dc.b	smpsNoAttack, $01
000895AC E10B                       	smpsAlterNote       $0B
000895AE E701                       	dc.b	smpsNoAttack, $01
000895B0 E105                       	smpsAlterNote       $05
000895B2 E701                       	dc.b	smpsNoAttack, $01
000895B4 E104                       	smpsAlterNote       $04
000895B6 E701                       	dc.b	smpsNoAttack, $01
000895B8 E108                       	smpsAlterNote       $08
000895BA E701                       	dc.b	smpsNoAttack, $01
000895BC E10E                       	smpsAlterNote       $0E
000895BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895C2 E10B                       	smpsAlterNote       $0B
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E105                       	smpsAlterNote       $05
000895C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895CC E10B                       	smpsAlterNote       $0B
000895CE E701                       	dc.b	smpsNoAttack, $01
000895D0 E10E                       	smpsAlterNote       $0E
000895D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895D6 E108                       	smpsAlterNote       $08
000895D8 E701                       	dc.b	smpsNoAttack, $01
000895DA E105                       	smpsAlterNote       $05
000895DC 8001                       	dc.b	nRst, $01
000895DE E109                       	smpsAlterNote       $09
000895E0 C402                       	dc.b	nG5, $02
000895E2 E10B                       	smpsAlterNote       $0B
000895E4 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000895ED E109                       	smpsAlterNote       $09
000895EF C404                       	dc.b	nG5, $04
000895F1 E10B                       	smpsAlterNote       $0B
000895F3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000895F7 E107                       	smpsAlterNote       $07
000895F9 BF0D                       	dc.b	nD5, $0D
000895FB E101                       	smpsAlterNote       $01
000895FD E701                       	dc.b	smpsNoAttack, $01
000895FF E100                       	smpsAlterNote       $00
00089601 E701                       	dc.b	smpsNoAttack, $01
00089603 E104                       	smpsAlterNote       $04
00089605 E701                       	dc.b	smpsNoAttack, $01
00089607 E10A                       	smpsAlterNote       $0A
00089609 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008960D E107                       	smpsAlterNote       $07
0008960F E701                       	dc.b	smpsNoAttack, $01
00089611 E101                       	smpsAlterNote       $01
00089613 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089617 E107                       	smpsAlterNote       $07
00089619 E701                       	dc.b	smpsNoAttack, $01
0008961B E10A                       	smpsAlterNote       $0A
0008961D E701                       	dc.b	smpsNoAttack, $01
0008961F E10B                       	smpsAlterNote       $0B
00089621 8001                       	dc.b	nRst, $01
00089623 E108                       	smpsAlterNote       $08
00089625 C101                       	dc.b	nE5, $01
00089627 E109                       	smpsAlterNote       $09
00089629 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008962E E10B                       	smpsAlterNote       $0B
00089630 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089638 E108                       	smpsAlterNote       $08
0008963A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008963E E109                       	smpsAlterNote       $09
00089640 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089644 E108                       	smpsAlterNote       $08
00089646 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008964A E106                       	smpsAlterNote       $06
0008964C C903                       	dc.b	nC6, $03
0008964E E109                       	smpsAlterNote       $09
00089650 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089654 E10C                       	smpsAlterNote       $0C
00089656 C70D                       	dc.b	nBb5, $0D
00089658 E109                       	smpsAlterNote       $09
0008965A E701                       	dc.b	smpsNoAttack, $01
0008965C E105                       	smpsAlterNote       $05
0008965E E701                       	dc.b	smpsNoAttack, $01
00089660 E109                       	smpsAlterNote       $09
00089662 E701                       	dc.b	smpsNoAttack, $01
00089664 E10F                       	smpsAlterNote       $0F
00089666 E701                       	dc.b	smpsNoAttack, $01
00089668 E110                       	smpsAlterNote       $10
0008966A E701                       	dc.b	smpsNoAttack, $01
0008966C E10C                       	smpsAlterNote       $0C
0008966E E701                       	dc.b	smpsNoAttack, $01
00089670 E106                       	smpsAlterNote       $06
00089672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089676 E109                       	smpsAlterNote       $09
00089678 E701                       	dc.b	smpsNoAttack, $01
0008967A E10F                       	smpsAlterNote       $0F
0008967C E701                       	dc.b	smpsNoAttack, $01
0008967E E110                       	smpsAlterNote       $10
00089680 8001                       	dc.b	nRst, $01
00089682 E10B                       	smpsAlterNote       $0B
00089684 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008968A E105                       	smpsAlterNote       $05
0008968C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089690 E108                       	smpsAlterNote       $08
00089692 E701                       	dc.b	smpsNoAttack, $01
00089694 E10E                       	smpsAlterNote       $0E
00089696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008969A E108                       	smpsAlterNote       $08
0008969C E701                       	dc.b	smpsNoAttack, $01
0008969E E105                       	smpsAlterNote       $05
000896A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896A4 E10B                       	smpsAlterNote       $0B
000896A6 E701                       	dc.b	smpsNoAttack, $01
000896A8 E10F                       	smpsAlterNote       $0F
000896AA E701                       	dc.b	smpsNoAttack, $01
000896AC E10E                       	smpsAlterNote       $0E
000896AE E701                       	dc.b	smpsNoAttack, $01
000896B0 E108                       	smpsAlterNote       $08
000896B2 E701                       	dc.b	smpsNoAttack, $01
000896B4 E104                       	smpsAlterNote       $04
000896B6 E701                       	dc.b	smpsNoAttack, $01
000896B8 E108                       	smpsAlterNote       $08
000896BA E701                       	dc.b	smpsNoAttack, $01
000896BC E10B                       	smpsAlterNote       $0B
000896BE E701                       	dc.b	smpsNoAttack, $01
000896C0 E10F                       	smpsAlterNote       $0F
000896C2 E701                       	dc.b	smpsNoAttack, $01
000896C4 E10B                       	smpsAlterNote       $0B
000896C6 E701                       	dc.b	smpsNoAttack, $01
000896C8 E105                       	smpsAlterNote       $05
000896CA E701                       	dc.b	smpsNoAttack, $01
000896CC E104                       	smpsAlterNote       $04
000896CE E701                       	dc.b	smpsNoAttack, $01
000896D0 E108                       	smpsAlterNote       $08
000896D2 E701                       	dc.b	smpsNoAttack, $01
000896D4 E10E                       	smpsAlterNote       $0E
000896D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896DA E10B                       	smpsAlterNote       $0B
000896DC E701                       	dc.b	smpsNoAttack, $01
000896DE E105                       	smpsAlterNote       $05
000896E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896E4 E10B                       	smpsAlterNote       $0B
000896E6 E701                       	dc.b	smpsNoAttack, $01
000896E8 E10E                       	smpsAlterNote       $0E
000896EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896EE E108                       	smpsAlterNote       $08
000896F0 E701                       	dc.b	smpsNoAttack, $01
000896F2 E104                       	smpsAlterNote       $04
000896F4 E701                       	dc.b	smpsNoAttack, $01
000896F6 E105                       	smpsAlterNote       $05
000896F8 E701                       	dc.b	smpsNoAttack, $01
000896FA E10B                       	smpsAlterNote       $0B
000896FC E701                       	dc.b	smpsNoAttack, $01
000896FE E10F                       	smpsAlterNote       $0F
00089700 E701                       	dc.b	smpsNoAttack, $01
00089702 E10B                       	smpsAlterNote       $0B
00089704 E701                       	dc.b	smpsNoAttack, $01
00089706 E108                       	smpsAlterNote       $08
00089708 E701                       	dc.b	smpsNoAttack, $01
0008970A E104                       	smpsAlterNote       $04
0008970C E701                       	dc.b	smpsNoAttack, $01
0008970E E108                       	smpsAlterNote       $08
00089710 E701                       	dc.b	smpsNoAttack, $01
00089712 E10E                       	smpsAlterNote       $0E
00089714 E701                       	dc.b	smpsNoAttack, $01
00089716 E10F                       	smpsAlterNote       $0F
00089718 E701                       	dc.b	smpsNoAttack, $01
0008971A E10B                       	smpsAlterNote       $0B
0008971C E701                       	dc.b	smpsNoAttack, $01
0008971E E105                       	smpsAlterNote       $05
00089720 E701                       	dc.b	smpsNoAttack, $01
00089722 E10B                       	smpsAlterNote       $0B
00089724 C60E                       	dc.b	nA5, $0E
00089726 E105                       	smpsAlterNote       $05
00089728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008972C E10B                       	smpsAlterNote       $0B
0008972E E701                       	dc.b	smpsNoAttack, $01
00089730 E10E                       	smpsAlterNote       $0E
00089732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089736 E108                       	smpsAlterNote       $08
00089738 E701                       	dc.b	smpsNoAttack, $01
0008973A E104                       	smpsAlterNote       $04
0008973C E701                       	dc.b	smpsNoAttack, $01
0008973E E105                       	smpsAlterNote       $05
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E10B                       	smpsAlterNote       $0B
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E10F                       	smpsAlterNote       $0F
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E10B                       	smpsAlterNote       $0B
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E108                       	smpsAlterNote       $08
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E104                       	smpsAlterNote       $04
00089754 E701                       	dc.b	smpsNoAttack, $01
00089756 E108                       	smpsAlterNote       $08
00089758 E701                       	dc.b	smpsNoAttack, $01
0008975A E10E                       	smpsAlterNote       $0E
0008975C E701                       	dc.b	smpsNoAttack, $01
0008975E E10F                       	smpsAlterNote       $0F
00089760 E701                       	dc.b	smpsNoAttack, $01
00089762 E10B                       	smpsAlterNote       $0B
00089764 E701                       	dc.b	smpsNoAttack, $01
00089766 E105                       	smpsAlterNote       $05
00089768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976C E108                       	smpsAlterNote       $08
0008976E E701                       	dc.b	smpsNoAttack, $01
00089770 E10E                       	smpsAlterNote       $0E
00089772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089776 E108                       	smpsAlterNote       $08
00089778 E701                       	dc.b	smpsNoAttack, $01
0008977A E105                       	smpsAlterNote       $05
0008977C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089780 E10B                       	smpsAlterNote       $0B
00089782 E701                       	dc.b	smpsNoAttack, $01
00089784 E10F                       	smpsAlterNote       $0F
00089786 E701                       	dc.b	smpsNoAttack, $01
00089788 E10E                       	smpsAlterNote       $0E
0008978A E701                       	dc.b	smpsNoAttack, $01
0008978C E108                       	smpsAlterNote       $08
0008978E E701                       	dc.b	smpsNoAttack, $01
00089790 E104                       	smpsAlterNote       $04
00089792 E701                       	dc.b	smpsNoAttack, $01
00089794 E108                       	smpsAlterNote       $08
00089796 E701                       	dc.b	smpsNoAttack, $01
00089798 E10E                       	smpsAlterNote       $0E
0008979A E701                       	dc.b	smpsNoAttack, $01
0008979C E10F                       	smpsAlterNote       $0F
0008979E E701                       	dc.b	smpsNoAttack, $01
000897A0 E10B                       	smpsAlterNote       $0B
000897A2 E701                       	dc.b	smpsNoAttack, $01
000897A4 E105                       	smpsAlterNote       $05
000897A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897AA E108                       	smpsAlterNote       $08
000897AC E701                       	dc.b	smpsNoAttack, $01
000897AE E10E                       	smpsAlterNote       $0E
000897B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897B4 E108                       	smpsAlterNote       $08
000897B6 E701                       	dc.b	smpsNoAttack, $01
000897B8 E105                       	smpsAlterNote       $05
000897BA E701                       	dc.b	smpsNoAttack, $01
000897BE E10B                       	smpsAlterNote       $0B
000897C0 E6FD                       	smpsAlterVol        $FD
000897C2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000897C6 E109                       	smpsAlterNote       $09
000897C8 C404                       	dc.b	nG5, $04
000897CA E10B                       	smpsAlterNote       $0B
000897CC C604 8001                  	dc.b	nA5, $04, nRst, $01
000897D0 E107                       	smpsAlterNote       $07
000897D2 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000897D8 E10B                       	smpsAlterNote       $0B
000897DA C604                       	dc.b	nA5, $04
000897DC E109                       	smpsAlterNote       $09
000897DE C404 8001                  	dc.b	nG5, $04, nRst, $01
000897E2 E10B                       	smpsAlterNote       $0B
000897E4 C604                       	dc.b	nA5, $04
000897E6 E108                       	smpsAlterNote       $08
000897E8 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000897F0 E106                       	smpsAlterNote       $06
000897F2 C904 8001                  	dc.b	nC6, $04, nRst, $01
000897F6 E10C                       	smpsAlterNote       $0C
000897F8 C704                       	dc.b	nBb5, $04
000897FA E10B                       	smpsAlterNote       $0B
000897FC C604 8001                  	dc.b	nA5, $04, nRst, $01
00089800 E109                       	smpsAlterNote       $09
00089802 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008980C E10B                       	smpsAlterNote       $0B
0008980E C60D                       	dc.b	nA5, $0D
00089810 E108                       	smpsAlterNote       $08
00089812 E701                       	dc.b	smpsNoAttack, $01
00089814 E104                       	smpsAlterNote       $04
00089816 E701                       	dc.b	smpsNoAttack, $01
00089818 E108                       	smpsAlterNote       $08
0008981A E701                       	dc.b	smpsNoAttack, $01
0008981C E10E                       	smpsAlterNote       $0E
0008981E E701                       	dc.b	smpsNoAttack, $01
00089820 E10F                       	smpsAlterNote       $0F
00089822 E701                       	dc.b	smpsNoAttack, $01
00089824 E10B                       	smpsAlterNote       $0B
00089826 E701                       	dc.b	smpsNoAttack, $01
00089828 E105                       	smpsAlterNote       $05
0008982A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008982E E108                       	smpsAlterNote       $08
00089830 E701                       	dc.b	smpsNoAttack, $01
00089832 E10E                       	smpsAlterNote       $0E
00089834 E701                       	dc.b	smpsNoAttack, $01
00089836 E10F                       	smpsAlterNote       $0F
00089838 8001                       	dc.b	nRst, $01
0008983A E109                       	smpsAlterNote       $09
0008983C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089842 E108                       	smpsAlterNote       $08
00089844 C10D                       	dc.b	nE5, $0D
00089846 E102                       	smpsAlterNote       $02
00089848 E701                       	dc.b	smpsNoAttack, $01
0008984A E101                       	smpsAlterNote       $01
0008984C E701                       	dc.b	smpsNoAttack, $01
0008984E E105                       	smpsAlterNote       $05
00089850 E701                       	dc.b	smpsNoAttack, $01
00089852 E10B                       	smpsAlterNote       $0B
00089854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089858 E108                       	smpsAlterNote       $08
0008985A E701                       	dc.b	smpsNoAttack, $01
0008985C E102                       	smpsAlterNote       $02
0008985E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089862 E108                       	smpsAlterNote       $08
00089864 E701                       	dc.b	smpsNoAttack, $01
00089866 E10B                       	smpsAlterNote       $0B
00089868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008986C E105                       	smpsAlterNote       $05
0008986E E701                       	dc.b	smpsNoAttack, $01
00089870 E101                       	smpsAlterNote       $01
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E102                       	smpsAlterNote       $02
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E108                       	smpsAlterNote       $08
0008987A E701                       	dc.b	smpsNoAttack, $01
0008987C E10C                       	smpsAlterNote       $0C
0008987E E701                       	dc.b	smpsNoAttack, $01
00089880 E108                       	smpsAlterNote       $08
00089882 E701                       	dc.b	smpsNoAttack, $01
00089884 E105                       	smpsAlterNote       $05
00089886 E701                       	dc.b	smpsNoAttack, $01
00089888 E101                       	smpsAlterNote       $01
0008988A E701                       	dc.b	smpsNoAttack, $01
0008988C E105                       	smpsAlterNote       $05
0008988E E701                       	dc.b	smpsNoAttack, $01
00089890 E10B                       	smpsAlterNote       $0B
00089892 E701                       	dc.b	smpsNoAttack, $01
00089894 E10C                       	smpsAlterNote       $0C
00089896 E701                       	dc.b	smpsNoAttack, $01
00089898 E108                       	smpsAlterNote       $08
0008989A E701                       	dc.b	smpsNoAttack, $01
0008989C E102                       	smpsAlterNote       $02
0008989E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A2 E105                       	smpsAlterNote       $05
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E10B                       	smpsAlterNote       $0B
000898A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898AC E105                       	smpsAlterNote       $05
000898AE E701                       	dc.b	smpsNoAttack, $01
000898B0 E102                       	smpsAlterNote       $02
000898B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898B6 E108                       	smpsAlterNote       $08
000898B8 E701                       	dc.b	smpsNoAttack, $01
000898BA E10C                       	smpsAlterNote       $0C
000898BC E701                       	dc.b	smpsNoAttack, $01
000898BE E10B                       	smpsAlterNote       $0B
000898C0 E701                       	dc.b	smpsNoAttack, $01
000898C2 E105                       	smpsAlterNote       $05
000898C4 E701                       	dc.b	smpsNoAttack, $01
000898C6 E101                       	smpsAlterNote       $01
000898C8 E701                       	dc.b	smpsNoAttack, $01
000898CA E105                       	smpsAlterNote       $05
000898CC E701                       	dc.b	smpsNoAttack, $01
000898CE E108                       	smpsAlterNote       $08
000898D0 E701                       	dc.b	smpsNoAttack, $01
000898D2 E10C                       	smpsAlterNote       $0C
000898D4 E701                       	dc.b	smpsNoAttack, $01
000898D6 E108                       	smpsAlterNote       $08
000898D8 E701                       	dc.b	smpsNoAttack, $01
000898DA E102                       	smpsAlterNote       $02
000898DC E701                       	dc.b	smpsNoAttack, $01
000898DE E101                       	smpsAlterNote       $01
000898E0 E701                       	dc.b	smpsNoAttack, $01
000898E2 E105                       	smpsAlterNote       $05
000898E4 E701                       	dc.b	smpsNoAttack, $01
000898E6 E10B                       	smpsAlterNote       $0B
000898E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898EC E108                       	smpsAlterNote       $08
000898EE E701                       	dc.b	smpsNoAttack, $01
000898F0 E102                       	smpsAlterNote       $02
000898F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F6 E108                       	smpsAlterNote       $08
000898F8 E701                       	dc.b	smpsNoAttack, $01
000898FA E10B                       	smpsAlterNote       $0B
000898FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089900 E105                       	smpsAlterNote       $05
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E101                       	smpsAlterNote       $01
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E102                       	smpsAlterNote       $02
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E108                       	smpsAlterNote       $08
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E10C                       	smpsAlterNote       $0C
00089912 E701                       	dc.b	smpsNoAttack, $01
00089914 E108                       	smpsAlterNote       $08
00089916 E701                       	dc.b	smpsNoAttack, $01
00089918 E105                       	smpsAlterNote       $05
0008991A E701                       	dc.b	smpsNoAttack, $01
0008991C E101                       	smpsAlterNote       $01
0008991E E701                       	dc.b	smpsNoAttack, $01
00089920 E105                       	smpsAlterNote       $05
00089922 E701                       	dc.b	smpsNoAttack, $01
00089924 E10B                       	smpsAlterNote       $0B
00089926 E701                       	dc.b	smpsNoAttack, $01
00089928 E10C                       	smpsAlterNote       $0C
0008992A E701                       	dc.b	smpsNoAttack, $01
0008992C E108                       	smpsAlterNote       $08
0008992E E701                       	dc.b	smpsNoAttack, $01
00089930 E102                       	smpsAlterNote       $02
00089932 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089936 E105                       	smpsAlterNote       $05
00089938 E701                       	dc.b	smpsNoAttack, $01
0008993A E10B                       	smpsAlterNote       $0B
0008993C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089940 E105                       	smpsAlterNote       $05
00089942 E701                       	dc.b	smpsNoAttack, $01
00089944 E101                       	smpsAlterNote       $01
00089946 E701                       	dc.b	smpsNoAttack, $01
00089948 E102                       	smpsAlterNote       $02
0008994A E701                       	dc.b	smpsNoAttack, $01
0008994C E108                       	smpsAlterNote       $08
0008994E E701                       	dc.b	smpsNoAttack, $01
00089950 E10C                       	smpsAlterNote       $0C
00089952 E701                       	dc.b	smpsNoAttack, $01
00089954 E108                       	smpsAlterNote       $08
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E105                       	smpsAlterNote       $05
0008995A E701                       	dc.b	smpsNoAttack, $01
0008995C E101                       	smpsAlterNote       $01
0008995E E701                       	dc.b	smpsNoAttack, $01
00089960 E105                       	smpsAlterNote       $05
00089962 E701                       	dc.b	smpsNoAttack, $01
00089964 E10B                       	smpsAlterNote       $0B
00089966 E701                       	dc.b	smpsNoAttack, $01
00089968 E10C                       	smpsAlterNote       $0C
0008996A E701                       	dc.b	smpsNoAttack, $01
0008996C E108                       	smpsAlterNote       $08
0008996E E701                       	dc.b	smpsNoAttack, $01
00089970 E102                       	smpsAlterNote       $02
00089972 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089976 E105                       	smpsAlterNote       $05
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E10B                       	smpsAlterNote       $0B
0008997C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089980 E105                       	smpsAlterNote       $05
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 E102                       	smpsAlterNote       $02
00089986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998A E108                       	smpsAlterNote       $08
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E10C                       	smpsAlterNote       $0C
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E10B                       	smpsAlterNote       $0B
00089994 E701                       	dc.b	smpsNoAttack, $01
00089996 E105                       	smpsAlterNote       $05
00089998 E701                       	dc.b	smpsNoAttack, $01
0008999A E101                       	smpsAlterNote       $01
0008999C E701                       	dc.b	smpsNoAttack, $01
0008999E E105                       	smpsAlterNote       $05
000899A0 E701                       	dc.b	smpsNoAttack, $01
000899A2 E108                       	smpsAlterNote       $08
000899A4 E701                       	dc.b	smpsNoAttack, $01
000899A6 E10C                       	smpsAlterNote       $0C
000899A8 E701                       	dc.b	smpsNoAttack, $01
000899AC E10B                       	smpsAlterNote       $0B
000899AE C604 8001                  	dc.b	nA5, $04, nRst, $01
000899B2 E109                       	smpsAlterNote       $09
000899B4 C404                       	dc.b	nG5, $04
000899B6 E10B                       	smpsAlterNote       $0B
000899B8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899BC E107                       	smpsAlterNote       $07
000899BE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000899C4 E10B                       	smpsAlterNote       $0B
000899C6 C604                       	dc.b	nA5, $04
000899C8 E109                       	smpsAlterNote       $09
000899CA C404 8001                  	dc.b	nG5, $04, nRst, $01
000899CE E10B                       	smpsAlterNote       $0B
000899D0 C604                       	dc.b	nA5, $04
000899D2 E108                       	smpsAlterNote       $08
000899D4 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000899DA E106                       	smpsAlterNote       $06
000899DC C904 8001                  	dc.b	nC6, $04, nRst, $01
000899E0 E10C                       	smpsAlterNote       $0C
000899E2 C704                       	dc.b	nBb5, $04
000899E4 E10B                       	smpsAlterNote       $0B
000899E6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899EA E109                       	smpsAlterNote       $09
000899EC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000899F6 E10B                       	smpsAlterNote       $0B
000899F8 C60D                       	dc.b	nA5, $0D
000899FA E108                       	smpsAlterNote       $08
000899FC E701                       	dc.b	smpsNoAttack, $01
000899FE E104                       	smpsAlterNote       $04
00089A00 E701                       	dc.b	smpsNoAttack, $01
00089A02 E108                       	smpsAlterNote       $08
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E10B                       	smpsAlterNote       $0B
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A E10F                       	smpsAlterNote       $0F
00089A0C E701                       	dc.b	smpsNoAttack, $01
00089A0E E10B                       	smpsAlterNote       $0B
00089A10 E701                       	dc.b	smpsNoAttack, $01
00089A12 E105                       	smpsAlterNote       $05
00089A14 E701                       	dc.b	smpsNoAttack, $01
00089A16 E104                       	smpsAlterNote       $04
00089A18 E701                       	dc.b	smpsNoAttack, $01
00089A1A E108                       	smpsAlterNote       $08
00089A1C E701                       	dc.b	smpsNoAttack, $01
00089A1E E10E                       	smpsAlterNote       $0E
00089A20 E701                       	dc.b	smpsNoAttack, $01
00089A22 E10F                       	smpsAlterNote       $0F
00089A24 8001                       	dc.b	nRst, $01
00089A26 E109                       	smpsAlterNote       $09
00089A28 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089A2E E108                       	smpsAlterNote       $08
00089A30 C10D                       	dc.b	nE5, $0D
00089A32 E105                       	smpsAlterNote       $05
00089A34 E701                       	dc.b	smpsNoAttack, $01
00089A36 E101                       	smpsAlterNote       $01
00089A38 E701                       	dc.b	smpsNoAttack, $01
00089A3A E105                       	smpsAlterNote       $05
00089A3C E701                       	dc.b	smpsNoAttack, $01
00089A3E E10B                       	smpsAlterNote       $0B
00089A40 E701                       	dc.b	smpsNoAttack, $01
00089A42 E10C                       	smpsAlterNote       $0C
00089A44 E701                       	dc.b	smpsNoAttack, $01
00089A46 E108                       	smpsAlterNote       $08
00089A48 E701                       	dc.b	smpsNoAttack, $01
00089A4A E102                       	smpsAlterNote       $02
00089A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A50 E105                       	smpsAlterNote       $05
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E10B                       	smpsAlterNote       $0B
00089A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A5A E105                       	smpsAlterNote       $05
00089A5C E701                       	dc.b	smpsNoAttack, $01
00089A5E E102                       	smpsAlterNote       $02
00089A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A64 E108                       	smpsAlterNote       $08
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E10C                       	smpsAlterNote       $0C
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C E10B                       	smpsAlterNote       $0B
00089A6E E701                       	dc.b	smpsNoAttack, $01
00089A70 E105                       	smpsAlterNote       $05
00089A72 E701                       	dc.b	smpsNoAttack, $01
00089A74 E101                       	smpsAlterNote       $01
00089A76 E701                       	dc.b	smpsNoAttack, $01
00089A78 E105                       	smpsAlterNote       $05
00089A7A E701                       	dc.b	smpsNoAttack, $01
00089A7C E108                       	smpsAlterNote       $08
00089A7E E701                       	dc.b	smpsNoAttack, $01
00089A80 E10C                       	smpsAlterNote       $0C
00089A82 E701                       	dc.b	smpsNoAttack, $01
00089A84 E108                       	smpsAlterNote       $08
00089A86 E701                       	dc.b	smpsNoAttack, $01
00089A88 E102                       	smpsAlterNote       $02
00089A8A E701                       	dc.b	smpsNoAttack, $01
00089A8C E101                       	smpsAlterNote       $01
00089A8E E701                       	dc.b	smpsNoAttack, $01
00089A90 E105                       	smpsAlterNote       $05
00089A92 E701                       	dc.b	smpsNoAttack, $01
00089A94 E10B                       	smpsAlterNote       $0B
00089A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9A E108                       	smpsAlterNote       $08
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E102                       	smpsAlterNote       $02
00089AA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA4 E108                       	smpsAlterNote       $08
00089AA6 E701                       	dc.b	smpsNoAttack, $01
00089AA8 E10B                       	smpsAlterNote       $0B
00089AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AAE E105                       	smpsAlterNote       $05
00089AB0 E701                       	dc.b	smpsNoAttack, $01
00089AB2 E101                       	smpsAlterNote       $01
00089AB4 E701                       	dc.b	smpsNoAttack, $01
00089AB6 E102                       	smpsAlterNote       $02
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E108                       	smpsAlterNote       $08
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E10C                       	smpsAlterNote       $0C
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E108                       	smpsAlterNote       $08
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E105                       	smpsAlterNote       $05
00089AC8 E701                       	dc.b	smpsNoAttack, $01
00089ACA E101                       	smpsAlterNote       $01
00089ACC E701                       	dc.b	smpsNoAttack, $01
00089ACE E105                       	smpsAlterNote       $05
00089AD0 E701                       	dc.b	smpsNoAttack, $01
00089AD2 E10B                       	smpsAlterNote       $0B
00089AD4 E701                       	dc.b	smpsNoAttack, $01
00089AD6 E10C                       	smpsAlterNote       $0C
00089AD8 E701                       	dc.b	smpsNoAttack, $01
00089ADA E108                       	smpsAlterNote       $08
00089ADC E701                       	dc.b	smpsNoAttack, $01
00089ADE E102                       	smpsAlterNote       $02
00089AE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AE4 E108                       	smpsAlterNote       $08
00089AE6 E701                       	dc.b	smpsNoAttack, $01
00089AE8 E10B                       	smpsAlterNote       $0B
00089AEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AEE E105                       	smpsAlterNote       $05
00089AF0 E701                       	dc.b	smpsNoAttack, $01
00089AF2 E101                       	smpsAlterNote       $01
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E102                       	smpsAlterNote       $02
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E108                       	smpsAlterNote       $08
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E10C                       	smpsAlterNote       $0C
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E108                       	smpsAlterNote       $08
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E105                       	smpsAlterNote       $05
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E101                       	smpsAlterNote       $01
00089B0C E701                       	dc.b	smpsNoAttack, $01
00089B0E E105                       	smpsAlterNote       $05
00089B10 E701                       	dc.b	smpsNoAttack, $01
00089B12 E10B                       	smpsAlterNote       $0B
00089B14 E701                       	dc.b	smpsNoAttack, $01
00089B16 E10C                       	smpsAlterNote       $0C
00089B18 E701                       	dc.b	smpsNoAttack, $01
00089B1A E108                       	smpsAlterNote       $08
00089B1C E701                       	dc.b	smpsNoAttack, $01
00089B1E E102                       	smpsAlterNote       $02
00089B20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B24 E105                       	smpsAlterNote       $05
00089B26 E701                       	dc.b	smpsNoAttack, $01
00089B28 E10B                       	smpsAlterNote       $0B
00089B2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B2E E105                       	smpsAlterNote       $05
00089B30 E701                       	dc.b	smpsNoAttack, $01
00089B32 E102                       	smpsAlterNote       $02
00089B34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B38 E108                       	smpsAlterNote       $08
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E10C                       	smpsAlterNote       $0C
00089B3E E701                       	dc.b	smpsNoAttack, $01
00089B40 E10B                       	smpsAlterNote       $0B
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E105                       	smpsAlterNote       $05
00089B46 E701                       	dc.b	smpsNoAttack, $01
00089B48 E101                       	smpsAlterNote       $01
00089B4A E701                       	dc.b	smpsNoAttack, $01
00089B4C E105                       	smpsAlterNote       $05
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E108                       	smpsAlterNote       $08
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E10C                       	smpsAlterNote       $0C
00089B56 E701                       	dc.b	smpsNoAttack, $01
00089B58 E108                       	smpsAlterNote       $08
00089B5A E701                       	dc.b	smpsNoAttack, $01
00089B5C E102                       	smpsAlterNote       $02
00089B5E E701                       	dc.b	smpsNoAttack, $01
00089B60 E101                       	smpsAlterNote       $01
00089B62 E701                       	dc.b	smpsNoAttack, $01
00089B64 E105                       	smpsAlterNote       $05
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E10B                       	smpsAlterNote       $0B
00089B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B6E E108                       	smpsAlterNote       $08
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E102                       	smpsAlterNote       $02
00089B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B78 E108                       	smpsAlterNote       $08
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E10B                       	smpsAlterNote       $0B
00089B7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B82 E105                       	smpsAlterNote       $05
00089B84 E701                       	dc.b	smpsNoAttack, $01
00089B86 E102                       	smpsAlterNote       $02
00089B88 8001                       	dc.b	nRst, $01
00089B8A E107                       	smpsAlterNote       $07
00089B8C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089B90 E108                       	smpsAlterNote       $08
00089B92 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00089B96 E102                       	smpsAlterNote       $02
00089B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B9C E108                       	smpsAlterNote       $08
00089B9E E701                       	dc.b	smpsNoAttack, $01
00089BA0 E10B                       	smpsAlterNote       $0B
00089BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BA6 E105                       	smpsAlterNote       $05
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E101                       	smpsAlterNote       $01
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E102                       	smpsAlterNote       $02
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E108                       	smpsAlterNote       $08
00089BB4 E701                       	dc.b	smpsNoAttack, $01
00089BB6 E10C                       	smpsAlterNote       $0C
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E108                       	smpsAlterNote       $08
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E105                       	smpsAlterNote       $05
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E101                       	smpsAlterNote       $01
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E105                       	smpsAlterNote       $05
00089BC8 E701                       	dc.b	smpsNoAttack, $01
00089BCA E10B                       	smpsAlterNote       $0B
00089BCC E701                       	dc.b	smpsNoAttack, $01
00089BCE E10C                       	smpsAlterNote       $0C
00089BD0 E701                       	dc.b	smpsNoAttack, $01
00089BD2 E108                       	smpsAlterNote       $08
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E102                       	smpsAlterNote       $02
00089BD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BDC E105                       	smpsAlterNote       $05
00089BDE E701                       	dc.b	smpsNoAttack, $01
00089BE0 E10B                       	smpsAlterNote       $0B
00089BE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BE6 E105                       	smpsAlterNote       $05
00089BE8 E701                       	dc.b	smpsNoAttack, $01
00089BEA E102                       	smpsAlterNote       $02
00089BEC E701                       	dc.b	smpsNoAttack, $01
00089BEE E109                       	smpsAlterNote       $09
00089BF0 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089BF4 E108                       	smpsAlterNote       $08
00089BF6 C10D                       	dc.b	nE5, $0D
00089BF8 E105                       	smpsAlterNote       $05
00089BFA E701                       	dc.b	smpsNoAttack, $01
00089BFC E101                       	smpsAlterNote       $01
00089BFE E701                       	dc.b	smpsNoAttack, $01
00089C00 E102                       	smpsAlterNote       $02
00089C02 E701                       	dc.b	smpsNoAttack, $01
00089C04 E108                       	smpsAlterNote       $08
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E10C                       	smpsAlterNote       $0C
00089C0A E701                       	dc.b	smpsNoAttack, $01
00089C0C E108                       	smpsAlterNote       $08
00089C0E E701                       	dc.b	smpsNoAttack, $01
00089C10 E105                       	smpsAlterNote       $05
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E101                       	smpsAlterNote       $01
00089C16 E701                       	dc.b	smpsNoAttack, $01
00089C18 E105                       	smpsAlterNote       $05
00089C1A E701                       	dc.b	smpsNoAttack, $01
00089C1C E10B                       	smpsAlterNote       $0B
00089C1E E701                       	dc.b	smpsNoAttack, $01
00089C20 E10C                       	smpsAlterNote       $0C
00089C22 E701                       	dc.b	smpsNoAttack, $01
00089C24 E108                       	smpsAlterNote       $08
00089C26 E701                       	dc.b	smpsNoAttack, $01
00089C28 E102                       	smpsAlterNote       $02
00089C2A E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089C32 E10B                       	smpsAlterNote       $0B
00089C34 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089C38 E10C                       	smpsAlterNote       $0C
00089C3A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089C3E E10B                       	smpsAlterNote       $0B
00089C40 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00089C46 E107                       	smpsAlterNote       $07
00089C48 BF03                       	dc.b	nD5, $03
00089C4A E108                       	smpsAlterNote       $08
00089C4C C103 8001                  	dc.b	nE5, $03, nRst, $01
00089C50 E109                       	smpsAlterNote       $09
00089C52 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089C58 E10B                       	smpsAlterNote       $0B
00089C5A C606 8001                  	dc.b	nA5, $06, nRst, $01
00089C5E E107                       	smpsAlterNote       $07
00089C60 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089C64 E106                       	smpsAlterNote       $06
00089C66 C90D                       	dc.b	nC6, $0D
00089C68 E103                       	smpsAlterNote       $03
00089C6A E701                       	dc.b	smpsNoAttack, $01
00089C6C E1FF                       	smpsAlterNote       $FF
00089C6E E701                       	dc.b	smpsNoAttack, $01
00089C70 E103                       	smpsAlterNote       $03
00089C72 E701                       	dc.b	smpsNoAttack, $01
00089C74 E109                       	smpsAlterNote       $09
00089C76 E701                       	dc.b	smpsNoAttack, $01
00089C78 E10A                       	smpsAlterNote       $0A
00089C7A E701                       	dc.b	smpsNoAttack, $01
00089C7C E106                       	smpsAlterNote       $06
00089C7E E701                       	dc.b	smpsNoAttack, $01
00089C80 E100                       	smpsAlterNote       $00
00089C82 E701                       	dc.b	smpsNoAttack, $01
00089C84 E10C                       	smpsAlterNote       $0C
00089C86 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089C8A E10B                       	smpsAlterNote       $0B
00089C8C C603                       	dc.b	nA5, $03
00089C8E E109                       	smpsAlterNote       $09
00089C90 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089C94 E10B                       	smpsAlterNote       $0B
00089C96 C60D                       	dc.b	nA5, $0D
00089C98 E105                       	smpsAlterNote       $05
00089C9A E701                       	dc.b	smpsNoAttack, $01
00089C9C E104                       	smpsAlterNote       $04
00089C9E E701                       	dc.b	smpsNoAttack, $01
00089CA0 E108                       	smpsAlterNote       $08
00089CA2 E701                       	dc.b	smpsNoAttack, $01
00089CA4 E10E                       	smpsAlterNote       $0E
00089CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CAA E10B                       	smpsAlterNote       $0B
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E105                       	smpsAlterNote       $05
00089CB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CB4 E10B                       	smpsAlterNote       $0B
00089CB6 E701                       	dc.b	smpsNoAttack, $01
00089CB8 E10E                       	smpsAlterNote       $0E
00089CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CBE E108                       	smpsAlterNote       $08
00089CC0 E701                       	dc.b	smpsNoAttack, $01
00089CC2 E104                       	smpsAlterNote       $04
00089CC4 E701                       	dc.b	smpsNoAttack, $01
00089CC6 E105                       	smpsAlterNote       $05
00089CC8 E701                       	dc.b	smpsNoAttack, $01
00089CCA E10B                       	smpsAlterNote       $0B
00089CCC E701                       	dc.b	smpsNoAttack, $01
00089CCE E10F                       	smpsAlterNote       $0F
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 E10B                       	smpsAlterNote       $0B
00089CD4 E701                       	dc.b	smpsNoAttack, $01
00089CD6 E108                       	smpsAlterNote       $08
00089CD8 E701                       	dc.b	smpsNoAttack, $01
00089CDA E104                       	smpsAlterNote       $04
00089CDC E701                       	dc.b	smpsNoAttack, $01
00089CDE E108                       	smpsAlterNote       $08
00089CE0 E701                       	dc.b	smpsNoAttack, $01
00089CE2 E10E                       	smpsAlterNote       $0E
00089CE4 E701                       	dc.b	smpsNoAttack, $01
00089CE6 E10F                       	smpsAlterNote       $0F
00089CE8 E701                       	dc.b	smpsNoAttack, $01
00089CEA E10B                       	smpsAlterNote       $0B
00089CEC E701                       	dc.b	smpsNoAttack, $01
00089CEE E105                       	smpsAlterNote       $05
00089CF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF4 E108                       	smpsAlterNote       $08
00089CF6 E701                       	dc.b	smpsNoAttack, $01
00089CF8 E10E                       	smpsAlterNote       $0E
00089CFA E701                       	dc.b	smpsNoAttack, $01
00089CFC E10F                       	smpsAlterNote       $0F
00089CFE 800F                       	dc.b	nRst, $0F
00089D00 E107                       	smpsAlterNote       $07
00089D02 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089D06 E108                       	smpsAlterNote       $08
00089D08 C103                       	dc.b	nE5, $03
00089D0A E109                       	smpsAlterNote       $09
00089D0C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089D12 E10B                       	smpsAlterNote       $0B
00089D14 C607                       	dc.b	nA5, $07
00089D16 E107                       	smpsAlterNote       $07
00089D18 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089D1C E106                       	smpsAlterNote       $06
00089D1E C90D                       	dc.b	nC6, $0D
00089D20 E107                       	smpsAlterNote       $07
00089D22 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089D26 E10C                       	smpsAlterNote       $0C
00089D28 C704                       	dc.b	nBb5, $04
00089D2A E10B                       	smpsAlterNote       $0B
00089D2C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089D30 E109                       	smpsAlterNote       $09
00089D32 C404                       	dc.b	nG5, $04
00089D34 E10B                       	smpsAlterNote       $0B
00089D36 C60D                       	dc.b	nA5, $0D
00089D38 E108                       	smpsAlterNote       $08
00089D3A E701                       	dc.b	smpsNoAttack, $01
00089D3C E105                       	smpsAlterNote       $05
00089D3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D42 E10B                       	smpsAlterNote       $0B
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E10F                       	smpsAlterNote       $0F
00089D48 E701                       	dc.b	smpsNoAttack, $01
00089D4A E10E                       	smpsAlterNote       $0E
00089D4C E701                       	dc.b	smpsNoAttack, $01
00089D4E E108                       	smpsAlterNote       $08
00089D50 E701                       	dc.b	smpsNoAttack, $01
00089D52 E104                       	smpsAlterNote       $04
00089D54 E701                       	dc.b	smpsNoAttack, $01
00089D56 E108                       	smpsAlterNote       $08
00089D58 E701                       	dc.b	smpsNoAttack, $01
00089D5A E10B                       	smpsAlterNote       $0B
00089D5C E701                       	dc.b	smpsNoAttack, $01
00089D5E E10F                       	smpsAlterNote       $0F
00089D60 E701                       	dc.b	smpsNoAttack, $01
00089D62 E10B                       	smpsAlterNote       $0B
00089D64 E701                       	dc.b	smpsNoAttack, $01
00089D66 E105                       	smpsAlterNote       $05
00089D68 E701                       	dc.b	smpsNoAttack, $01
00089D6A E104                       	smpsAlterNote       $04
00089D6C E701                       	dc.b	smpsNoAttack, $01
00089D6E E108                       	smpsAlterNote       $08
00089D70 E701                       	dc.b	smpsNoAttack, $01
00089D72 E10E                       	smpsAlterNote       $0E
00089D74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D78 E10B                       	smpsAlterNote       $0B
00089D7A E701                       	dc.b	smpsNoAttack, $01
00089D7C E105                       	smpsAlterNote       $05
00089D7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D82 E10B                       	smpsAlterNote       $0B
00089D84 E701                       	dc.b	smpsNoAttack, $01
00089D86 E10E                       	smpsAlterNote       $0E
00089D88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D8C E108                       	smpsAlterNote       $08
00089D8E E701                       	dc.b	smpsNoAttack, $01
00089D90 E105                       	smpsAlterNote       $05
00089D92 8001                       	dc.b	nRst, $01
00089D94 E109                       	smpsAlterNote       $09
00089D96 C401 8001                  	dc.b	nG5, $01, nRst, $01
00089D9A E10B                       	smpsAlterNote       $0B
00089D9C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089DA4 E109                       	smpsAlterNote       $09
00089DA6 C404                       	dc.b	nG5, $04
00089DA8 E10B                       	smpsAlterNote       $0B
00089DAA C604 8001                  	dc.b	nA5, $04, nRst, $01
00089DAE E107                       	smpsAlterNote       $07
00089DB0 BF0D                       	dc.b	nD5, $0D
00089DB2 E101                       	smpsAlterNote       $01
00089DB4 E701                       	dc.b	smpsNoAttack, $01
00089DB6 E100                       	smpsAlterNote       $00
00089DB8 E701                       	dc.b	smpsNoAttack, $01
00089DBA E104                       	smpsAlterNote       $04
00089DBC E701                       	dc.b	smpsNoAttack, $01
00089DBE E10A                       	smpsAlterNote       $0A
00089DC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DC4 E107                       	smpsAlterNote       $07
00089DC6 E701                       	dc.b	smpsNoAttack, $01
00089DC8 E101                       	smpsAlterNote       $01
00089DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DCE E107                       	smpsAlterNote       $07
00089DD0 E701                       	dc.b	smpsNoAttack, $01
00089DD2 E10A                       	smpsAlterNote       $0A
00089DD4 E701                       	dc.b	smpsNoAttack, $01
00089DD6 E10B                       	smpsAlterNote       $0B
00089DD8 8001                       	dc.b	nRst, $01
00089DDA E108                       	smpsAlterNote       $08
00089DDC 8001                       	dc.b	nRst, $01
00089DDE E109                       	smpsAlterNote       $09
00089DE0 8001 C401                  	dc.b	nRst, $01, nG5, $01
00089DE4 E10B                       	smpsAlterNote       $0B
00089DE6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089DEE E108                       	smpsAlterNote       $08
00089DF0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DF4 E109                       	smpsAlterNote       $09
00089DF6 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089DFA E108                       	smpsAlterNote       $08
00089DFC CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089E00 E106                       	smpsAlterNote       $06
00089E02 C903                       	dc.b	nC6, $03
00089E04 E109                       	smpsAlterNote       $09
00089E06 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089E0A E10C                       	smpsAlterNote       $0C
00089E0C C70D                       	dc.b	nBb5, $0D
00089E0E E109                       	smpsAlterNote       $09
00089E10 E701                       	dc.b	smpsNoAttack, $01
00089E12 E105                       	smpsAlterNote       $05
00089E14 E701                       	dc.b	smpsNoAttack, $01
00089E16 E109                       	smpsAlterNote       $09
00089E18 E701                       	dc.b	smpsNoAttack, $01
00089E1A E10F                       	smpsAlterNote       $0F
00089E1C E701                       	dc.b	smpsNoAttack, $01
00089E1E E110                       	smpsAlterNote       $10
00089E20 E701                       	dc.b	smpsNoAttack, $01
00089E22 E10C                       	smpsAlterNote       $0C
00089E24 E701                       	dc.b	smpsNoAttack, $01
00089E26 E106                       	smpsAlterNote       $06
00089E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E2C E109                       	smpsAlterNote       $09
00089E2E E701                       	dc.b	smpsNoAttack, $01
00089E30 E10F                       	smpsAlterNote       $0F
00089E32 E701                       	dc.b	smpsNoAttack, $01
00089E34 E110                       	smpsAlterNote       $10
00089E36 8001                       	dc.b	nRst, $01
00089E38 E10B                       	smpsAlterNote       $0B
00089E3A C606 8001                  	dc.b	nA5, $06, nRst, $01
00089E3E E109                       	smpsAlterNote       $09
00089E40 C40D                       	dc.b	nG5, $0D
00089E42 E103                       	smpsAlterNote       $03
00089E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E48 E106                       	smpsAlterNote       $06
00089E4A E701                       	dc.b	smpsNoAttack, $01
00089E4C E10C                       	smpsAlterNote       $0C
00089E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E52 E106                       	smpsAlterNote       $06
00089E54 E701                       	dc.b	smpsNoAttack, $01
00089E56 E103                       	smpsAlterNote       $03
00089E58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E5C E109                       	smpsAlterNote       $09
00089E5E E701                       	dc.b	smpsNoAttack, $01
00089E60 E10D                       	smpsAlterNote       $0D
00089E62 E701                       	dc.b	smpsNoAttack, $01
00089E64 E10C                       	smpsAlterNote       $0C
00089E66 E701                       	dc.b	smpsNoAttack, $01
00089E68 E106                       	smpsAlterNote       $06
00089E6A E701                       	dc.b	smpsNoAttack, $01
00089E6C E102                       	smpsAlterNote       $02
00089E6E E701                       	dc.b	smpsNoAttack, $01
00089E70 E103                       	smpsAlterNote       $03
00089E72 8001                       	dc.b	nRst, $01
00089E74 E10B                       	smpsAlterNote       $0B
00089E76 C60D                       	dc.b	nA5, $0D
00089E78 E108                       	smpsAlterNote       $08
00089E7A E701                       	dc.b	smpsNoAttack, $01
00089E7C E104                       	smpsAlterNote       $04
00089E7E E701                       	dc.b	smpsNoAttack, $01
00089E80 E108                       	smpsAlterNote       $08
00089E82 E701                       	dc.b	smpsNoAttack, $01
00089E84 E10B                       	smpsAlterNote       $0B
00089E86 E701                       	dc.b	smpsNoAttack, $01
00089E88 E10F                       	smpsAlterNote       $0F
00089E8A E701                       	dc.b	smpsNoAttack, $01
00089E8C E10B                       	smpsAlterNote       $0B
00089E8E E701                       	dc.b	smpsNoAttack, $01
00089E90 E105                       	smpsAlterNote       $05
00089E92 E701                       	dc.b	smpsNoAttack, $01
00089E94 E104                       	smpsAlterNote       $04
00089E96 E701                       	dc.b	smpsNoAttack, $01
00089E98 E108                       	smpsAlterNote       $08
00089E9A E701                       	dc.b	smpsNoAttack, $01
00089E9C E10E                       	smpsAlterNote       $0E
00089E9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA2 E10B                       	smpsAlterNote       $0B
00089EA4 E701                       	dc.b	smpsNoAttack, $01
00089EA6 E105                       	smpsAlterNote       $05
00089EA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EAC E10C                       	smpsAlterNote       $0C
00089EAE C70E                       	dc.b	nBb5, $0E
00089EB0 E106                       	smpsAlterNote       $06
00089EB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EB6 E10C                       	smpsAlterNote       $0C
00089EB8 E701                       	dc.b	smpsNoAttack, $01
00089EBA E10F                       	smpsAlterNote       $0F
00089EBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EC0 E109                       	smpsAlterNote       $09
00089EC2 E701                       	dc.b	smpsNoAttack, $01
00089EC4 E105                       	smpsAlterNote       $05
00089EC6 E701                       	dc.b	smpsNoAttack, $01
00089EC8 E106                       	smpsAlterNote       $06
00089ECA E701                       	dc.b	smpsNoAttack, $01
00089ECC E10C                       	smpsAlterNote       $0C
00089ECE E701                       	dc.b	smpsNoAttack, $01
00089ED0 E110                       	smpsAlterNote       $10
00089ED2 E701                       	dc.b	smpsNoAttack, $01
00089ED4 E10C                       	smpsAlterNote       $0C
00089ED6 E701                       	dc.b	smpsNoAttack, $01
00089ED8 E109                       	smpsAlterNote       $09
00089EDA E701                       	dc.b	smpsNoAttack, $01
00089EDC E105                       	smpsAlterNote       $05
00089EDE E701                       	dc.b	smpsNoAttack, $01
00089EE0 E106                       	smpsAlterNote       $06
00089EE2 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00089EE6 E107                       	smpsAlterNote       $07
00089EE8 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00089EED E108                       	smpsAlterNote       $08
00089EEF CD0D                       	dc.b	nE6, $0D
00089EF1 E107                       	smpsAlterNote       $07
00089EF3 CB0D                       	dc.b	nD6, $0D
00089EF5 E104                       	smpsAlterNote       $04
00089EF7 E701                       	dc.b	smpsNoAttack, $01
00089EF9 E100                       	smpsAlterNote       $00
00089EFB E701                       	dc.b	smpsNoAttack, $01
00089EFD E101                       	smpsAlterNote       $01
00089EFF E701                       	dc.b	smpsNoAttack, $01
00089F01 E107                       	smpsAlterNote       $07
00089F03 E701                       	dc.b	smpsNoAttack, $01
00089F05 E10B                       	smpsAlterNote       $0B
00089F07 E701                       	dc.b	smpsNoAttack, $01
00089F09 E107                       	smpsAlterNote       $07
00089F0B E701                       	dc.b	smpsNoAttack, $01
00089F0D E104                       	smpsAlterNote       $04
00089F0F E701                       	dc.b	smpsNoAttack, $01
00089F11 E100                       	smpsAlterNote       $00
00089F13 E701                       	dc.b	smpsNoAttack, $01
00089F15 E104                       	smpsAlterNote       $04
00089F17 E701                       	dc.b	smpsNoAttack, $01
00089F19 E10A                       	smpsAlterNote       $0A
00089F1B E701                       	dc.b	smpsNoAttack, $01
00089F1D E10B                       	smpsAlterNote       $0B
00089F1F E701                       	dc.b	smpsNoAttack, $01
00089F21 E108                       	smpsAlterNote       $08
00089F23 CC0D                       	dc.b	nEb6, $0D
00089F25 E105                       	smpsAlterNote       $05
00089F27 E701                       	dc.b	smpsNoAttack, $01
00089F29 E101                       	smpsAlterNote       $01
00089F2B E701                       	dc.b	smpsNoAttack, $01
00089F2D E102                       	smpsAlterNote       $02
00089F2F E701                       	dc.b	smpsNoAttack, $01
00089F31 E108                       	smpsAlterNote       $08
00089F33 E701                       	dc.b	smpsNoAttack, $01
00089F35 E106                       	smpsAlterNote       $06
00089F37 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00089F43 8001                       	dc.b	nRst, $01
00089F45 E107                       	smpsAlterNote       $07
00089F47 CB0D                       	dc.b	nD6, $0D
00089F49 E104                       	smpsAlterNote       $04
00089F4B E701                       	dc.b	smpsNoAttack, $01
00089F4D E100                       	smpsAlterNote       $00
00089F4F E701                       	dc.b	smpsNoAttack, $01
00089F51 E104                       	smpsAlterNote       $04
00089F53 E701                       	dc.b	smpsNoAttack, $01
00089F55 E107                       	smpsAlterNote       $07
00089F57 E701                       	dc.b	smpsNoAttack, $01
00089F59 E10B                       	smpsAlterNote       $0B
00089F5B E701                       	dc.b	smpsNoAttack, $01
00089F5D E107                       	smpsAlterNote       $07
00089F5F E701                       	dc.b	smpsNoAttack, $01
00089F61 E101                       	smpsAlterNote       $01
00089F63 E701                       	dc.b	smpsNoAttack, $01
00089F65 E100                       	smpsAlterNote       $00
00089F67 E701                       	dc.b	smpsNoAttack, $01
00089F69 E104                       	smpsAlterNote       $04
00089F6B E701                       	dc.b	smpsNoAttack, $01
00089F6D E10A                       	smpsAlterNote       $0A
00089F6F E701                       	dc.b	smpsNoAttack, $01
00089F71 E10B                       	smpsAlterNote       $0B
00089F73 8001                       	dc.b	nRst, $01
00089F75 E109                       	smpsAlterNote       $09
00089F77 CE0A                       	dc.b	nF6, $0A
00089F79 E108                       	smpsAlterNote       $08
00089F7B CC07                       	dc.b	nEb6, $07
00089F7D E106                       	smpsAlterNote       $06
00089F7F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00089F8B E107                       	smpsAlterNote       $07
00089F8D CB0D                       	dc.b	nD6, $0D
00089F8F E101                       	smpsAlterNote       $01
00089F91 E701                       	dc.b	smpsNoAttack, $01
00089F93 E100                       	smpsAlterNote       $00
00089F95 E701                       	dc.b	smpsNoAttack, $01
00089F97 E104                       	smpsAlterNote       $04
00089F99 E701                       	dc.b	smpsNoAttack, $01
00089F9B E10A                       	smpsAlterNote       $0A
00089F9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FA1 E107                       	smpsAlterNote       $07
00089FA3 E701                       	dc.b	smpsNoAttack, $01
00089FA5 E101                       	smpsAlterNote       $01
00089FA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FAB E107                       	smpsAlterNote       $07
00089FAD E701                       	dc.b	smpsNoAttack, $01
00089FAF E10A                       	smpsAlterNote       $0A
00089FB1 E701                       	dc.b	smpsNoAttack, $01
00089FB3 E10B                       	smpsAlterNote       $0B
00089FB5 8001                       	dc.b	nRst, $01
00089FB7 E108                       	smpsAlterNote       $08
00089FB9 CC0D                       	dc.b	nEb6, $0D
00089FBB E102                       	smpsAlterNote       $02
00089FBD E701                       	dc.b	smpsNoAttack, $01
00089FBF E101                       	smpsAlterNote       $01
00089FC1 E701                       	dc.b	smpsNoAttack, $01
00089FC3 E105                       	smpsAlterNote       $05
00089FC5 E701                       	dc.b	smpsNoAttack, $01
00089FC7 E108                       	smpsAlterNote       $08
00089FC9 8001                       	dc.b	nRst, $01
00089FCB E106                       	smpsAlterNote       $06
00089FCD C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00089FD9 8001                       	dc.b	nRst, $01
00089FDB E107                       	smpsAlterNote       $07
00089FDD CB0D                       	dc.b	nD6, $0D
00089FDF E101                       	smpsAlterNote       $01
00089FE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FE5 E104                       	smpsAlterNote       $04
00089FE7 E701                       	dc.b	smpsNoAttack, $01
00089FE9 E10A                       	smpsAlterNote       $0A
00089FEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FEF E104                       	smpsAlterNote       $04
00089FF1 E701                       	dc.b	smpsNoAttack, $01
00089FF3 E101                       	smpsAlterNote       $01
00089FF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FF9 E107                       	smpsAlterNote       $07
00089FFB E701                       	dc.b	smpsNoAttack, $01
00089FFD E10B                       	smpsAlterNote       $0B
00089FFF E701                       	dc.b	smpsNoAttack, $01
0008A001 E10A                       	smpsAlterNote       $0A
0008A003 E701                       	dc.b	smpsNoAttack, $01
0008A005 E104                       	smpsAlterNote       $04
0008A007 E701                       	dc.b	smpsNoAttack, $01
0008A009 E100                       	smpsAlterNote       $00
0008A00B E701                       	dc.b	smpsNoAttack, $01
0008A00D E101                       	smpsAlterNote       $01
0008A00F 801C                       	dc.b	nRst, $1C
0008A013 E107                       	smpsAlterNote       $07
0008A015 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A019 E603                       	smpsAlterVol        $03
0008A01B F6F1 AD                    	smpsJump            music84_Jump03
0008A01E                            
0008A01E                            ; FM3 Data
0008A01E                            music84_FM3:
0008A01E E0C0                       	smpsPan             panCenter, $00
0008A022 E109                       	smpsAlterNote       $09
0008A024 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008A028 E108                       	smpsAlterNote       $08
0008A02A C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008A02E E10B                       	smpsAlterNote       $0B
0008A030 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008A036 E040                       	smpsPan             panRight, $00
0008A038 E110                       	smpsAlterNote       $10
0008A03A E6F9                       	smpsAlterVol        $F9
0008A03C C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008A040 E10F                       	smpsAlterNote       $0F
0008A042 C603                       	dc.b	nA5, $03
0008A044 E10D                       	smpsAlterNote       $0D
0008A046 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A04C E10C                       	smpsAlterNote       $0C
0008A04E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A052 E10A                       	smpsAlterNote       $0A
0008A054 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A058 E10F                       	smpsAlterNote       $0F
0008A05A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008A05E E0C0                       	smpsPan             panCenter, $00
0008A062 E109                       	smpsAlterNote       $09
0008A064 E609                       	smpsAlterVol        $09
0008A066 B603                       	dc.b	nF4, $03
0008A068                            
0008A068                            music84_Jump02:
0008A068 E70A                       	dc.b	smpsNoAttack, $0A
0008A06A E103                       	smpsAlterNote       $03
0008A06C E701                       	dc.b	smpsNoAttack, $01
0008A06E E102                       	smpsAlterNote       $02
0008A070 E701                       	dc.b	smpsNoAttack, $01
0008A072 E106                       	smpsAlterNote       $06
0008A074 E701                       	dc.b	smpsNoAttack, $01
0008A076 E10C                       	smpsAlterNote       $0C
0008A078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A07C E109                       	smpsAlterNote       $09
0008A07E E701                       	dc.b	smpsNoAttack, $01
0008A080 E103                       	smpsAlterNote       $03
0008A082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A086 E109                       	smpsAlterNote       $09
0008A088 E701                       	dc.b	smpsNoAttack, $01
0008A08A E10C                       	smpsAlterNote       $0C
0008A08C E701                       	dc.b	smpsNoAttack, $01
0008A08E E10D                       	smpsAlterNote       $0D
0008A090 8001                       	dc.b	nRst, $01
0008A092 E109                       	smpsAlterNote       $09
0008A094 B80D                       	dc.b	nG4, $0D
0008A096 E103                       	smpsAlterNote       $03
0008A098 E701                       	dc.b	smpsNoAttack, $01
0008A09A E102                       	smpsAlterNote       $02
0008A09C E701                       	dc.b	smpsNoAttack, $01
0008A09E E106                       	smpsAlterNote       $06
0008A0A0 E701                       	dc.b	smpsNoAttack, $01
0008A0A2 E10C                       	smpsAlterNote       $0C
0008A0A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0A8 E109                       	smpsAlterNote       $09
0008A0AA E701                       	dc.b	smpsNoAttack, $01
0008A0AC E103                       	smpsAlterNote       $03
0008A0AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0B2 E109                       	smpsAlterNote       $09
0008A0B4 E701                       	dc.b	smpsNoAttack, $01
0008A0B6 E10C                       	smpsAlterNote       $0C
0008A0B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0BC E106                       	smpsAlterNote       $06
0008A0BE E701                       	dc.b	smpsNoAttack, $01
0008A0C0 E102                       	smpsAlterNote       $02
0008A0C2 E701                       	dc.b	smpsNoAttack, $01
0008A0C4 E103                       	smpsAlterNote       $03
0008A0C6 E701                       	dc.b	smpsNoAttack, $01
0008A0C8 E109                       	smpsAlterNote       $09
0008A0CA E701                       	dc.b	smpsNoAttack, $01
0008A0CC E10D                       	smpsAlterNote       $0D
0008A0CE E701                       	dc.b	smpsNoAttack, $01
0008A0D0 E109                       	smpsAlterNote       $09
0008A0D2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A0D6 E10B                       	smpsAlterNote       $0B
0008A0D8 BA0D                       	dc.b	nA4, $0D
0008A0DA E105                       	smpsAlterNote       $05
0008A0DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0E0 E108                       	smpsAlterNote       $08
0008A0E2 E701                       	dc.b	smpsNoAttack, $01
0008A0E4 E10E                       	smpsAlterNote       $0E
0008A0E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0EA E108                       	smpsAlterNote       $08
0008A0EC E701                       	dc.b	smpsNoAttack, $01
0008A0EE E104                       	smpsAlterNote       $04
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E105                       	smpsAlterNote       $05
0008A0F4 E701                       	dc.b	smpsNoAttack, $01
0008A0F6 E10B                       	smpsAlterNote       $0B
0008A0F8 E701                       	dc.b	smpsNoAttack, $01
0008A0FA E10F                       	smpsAlterNote       $0F
0008A0FC E701                       	dc.b	smpsNoAttack, $01
0008A0FE E10B                       	smpsAlterNote       $0B
0008A100 E701                       	dc.b	smpsNoAttack, $01
0008A102 E108                       	smpsAlterNote       $08
0008A104 E701                       	dc.b	smpsNoAttack, $01
0008A106 E104                       	smpsAlterNote       $04
0008A108 E701                       	dc.b	smpsNoAttack, $01
0008A10A E108                       	smpsAlterNote       $08
0008A10C E701                       	dc.b	smpsNoAttack, $01
0008A10E E10E                       	smpsAlterNote       $0E
0008A110 E701                       	dc.b	smpsNoAttack, $01
0008A112 E10F                       	smpsAlterNote       $0F
0008A114 E701                       	dc.b	smpsNoAttack, $01
0008A116 E10B                       	smpsAlterNote       $0B
0008A118 E701                       	dc.b	smpsNoAttack, $01
0008A11A E105                       	smpsAlterNote       $05
0008A11C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A120 E108                       	smpsAlterNote       $08
0008A122 E701                       	dc.b	smpsNoAttack, $01
0008A124 E10E                       	smpsAlterNote       $0E
0008A126 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A12A E108                       	smpsAlterNote       $08
0008A12C E701                       	dc.b	smpsNoAttack, $01
0008A12E E105                       	smpsAlterNote       $05
0008A130 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A134 E10B                       	smpsAlterNote       $0B
0008A136 E701                       	dc.b	smpsNoAttack, $01
0008A138 E10F                       	smpsAlterNote       $0F
0008A13A E701                       	dc.b	smpsNoAttack, $01
0008A13C E10E                       	smpsAlterNote       $0E
0008A13E E701                       	dc.b	smpsNoAttack, $01
0008A140 E108                       	smpsAlterNote       $08
0008A142 E701                       	dc.b	smpsNoAttack, $01
0008A144 E104                       	smpsAlterNote       $04
0008A146 E701                       	dc.b	smpsNoAttack, $01
0008A148 E105                       	smpsAlterNote       $05
0008A14A 8001                       	dc.b	nRst, $01
0008A14C E108                       	smpsAlterNote       $08
0008A14E B50A                       	dc.b	nE4, $0A
0008A150 E109                       	smpsAlterNote       $09
0008A152 B60D                       	dc.b	nF4, $0D
0008A154 E106                       	smpsAlterNote       $06
0008A156 E701                       	dc.b	smpsNoAttack, $01
0008A158 E103                       	smpsAlterNote       $03
0008A15A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A15E E109                       	smpsAlterNote       $09
0008A160 E701                       	dc.b	smpsNoAttack, $01
0008A162 E10D                       	smpsAlterNote       $0D
0008A164 E701                       	dc.b	smpsNoAttack, $01
0008A166 E10C                       	smpsAlterNote       $0C
0008A168 E701                       	dc.b	smpsNoAttack, $01
0008A16A E106                       	smpsAlterNote       $06
0008A16C E701                       	dc.b	smpsNoAttack, $01
0008A16E E102                       	smpsAlterNote       $02
0008A170 E701                       	dc.b	smpsNoAttack, $01
0008A172 E106                       	smpsAlterNote       $06
0008A174 E701                       	dc.b	smpsNoAttack, $01
0008A176 E109                       	smpsAlterNote       $09
0008A178 E701                       	dc.b	smpsNoAttack, $01
0008A17A E10D                       	smpsAlterNote       $0D
0008A17C E701                       	dc.b	smpsNoAttack, $01
0008A17E E109                       	smpsAlterNote       $09
0008A180 B80D                       	dc.b	nG4, $0D
0008A182 E106                       	smpsAlterNote       $06
0008A184 E701                       	dc.b	smpsNoAttack, $01
0008A186 E103                       	smpsAlterNote       $03
0008A188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A18C E109                       	smpsAlterNote       $09
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E10D                       	smpsAlterNote       $0D
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E10C                       	smpsAlterNote       $0C
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E106                       	smpsAlterNote       $06
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E102                       	smpsAlterNote       $02
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E106                       	smpsAlterNote       $06
0008A1A2 E701                       	dc.b	smpsNoAttack, $01
0008A1A4 E109                       	smpsAlterNote       $09
0008A1A6 E701                       	dc.b	smpsNoAttack, $01
0008A1A8 E10D                       	smpsAlterNote       $0D
0008A1AA E701                       	dc.b	smpsNoAttack, $01
0008A1AC E109                       	smpsAlterNote       $09
0008A1AE E701                       	dc.b	smpsNoAttack, $01
0008A1B0 E103                       	smpsAlterNote       $03
0008A1B2 E701                       	dc.b	smpsNoAttack, $01
0008A1B4 E102                       	smpsAlterNote       $02
0008A1B6 E701                       	dc.b	smpsNoAttack, $01
0008A1B8 E106                       	smpsAlterNote       $06
0008A1BA E701                       	dc.b	smpsNoAttack, $01
0008A1BC E10C                       	smpsAlterNote       $0C
0008A1BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1C2 E109                       	smpsAlterNote       $09
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10B                       	smpsAlterNote       $0B
0008A1C8 BA0D                       	dc.b	nA4, $0D
0008A1CA E108                       	smpsAlterNote       $08
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E104                       	smpsAlterNote       $04
0008A1D0 E701                       	dc.b	smpsNoAttack, $01
0008A1D2 E108                       	smpsAlterNote       $08
0008A1D4 E701                       	dc.b	smpsNoAttack, $01
0008A1D6 E10B                       	smpsAlterNote       $0B
0008A1D8 E701                       	dc.b	smpsNoAttack, $01
0008A1DA E10F                       	smpsAlterNote       $0F
0008A1DC E701                       	dc.b	smpsNoAttack, $01
0008A1DE E10B                       	smpsAlterNote       $0B
0008A1E0 E701                       	dc.b	smpsNoAttack, $01
0008A1E2 E105                       	smpsAlterNote       $05
0008A1E4 E701                       	dc.b	smpsNoAttack, $01
0008A1E6 E104                       	smpsAlterNote       $04
0008A1E8 E701                       	dc.b	smpsNoAttack, $01
0008A1EA E108                       	smpsAlterNote       $08
0008A1EC E701                       	dc.b	smpsNoAttack, $01
0008A1EE E10E                       	smpsAlterNote       $0E
0008A1F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1F4 E10B                       	smpsAlterNote       $0B
0008A1F6 E701                       	dc.b	smpsNoAttack, $01
0008A1F8 E105                       	smpsAlterNote       $05
0008A1FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1FE E10B                       	smpsAlterNote       $0B
0008A200 E701                       	dc.b	smpsNoAttack, $01
0008A202 E10E                       	smpsAlterNote       $0E
0008A204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A208 E108                       	smpsAlterNote       $08
0008A20A E701                       	dc.b	smpsNoAttack, $01
0008A20C E104                       	smpsAlterNote       $04
0008A20E E701                       	dc.b	smpsNoAttack, $01
0008A210 E105                       	smpsAlterNote       $05
0008A212 E701                       	dc.b	smpsNoAttack, $01
0008A214 E10B                       	smpsAlterNote       $0B
0008A216 E701                       	dc.b	smpsNoAttack, $01
0008A218 E10F                       	smpsAlterNote       $0F
0008A21A E701                       	dc.b	smpsNoAttack, $01
0008A21C E10B                       	smpsAlterNote       $0B
0008A21E E701                       	dc.b	smpsNoAttack, $01
0008A220 E108                       	smpsAlterNote       $08
0008A222 E701                       	dc.b	smpsNoAttack, $01
0008A224 E105                       	smpsAlterNote       $05
0008A226 8001                       	dc.b	nRst, $01
0008A228 E109                       	smpsAlterNote       $09
0008A22A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008A22E E108                       	smpsAlterNote       $08
0008A230 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008A234 E107                       	smpsAlterNote       $07
0008A236 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A23A E108                       	smpsAlterNote       $08
0008A23C B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A240 E109                       	smpsAlterNote       $09
0008A242 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008A248 E10B                       	smpsAlterNote       $0B
0008A24A BA0D                       	dc.b	nA4, $0D
0008A24C E108                       	smpsAlterNote       $08
0008A24E E701                       	dc.b	smpsNoAttack, $01
0008A250 E104                       	smpsAlterNote       $04
0008A252 E701                       	dc.b	smpsNoAttack, $01
0008A254 E108                       	smpsAlterNote       $08
0008A256 E701                       	dc.b	smpsNoAttack, $01
0008A258 E10E                       	smpsAlterNote       $0E
0008A25A E701                       	dc.b	smpsNoAttack, $01
0008A25C E10F                       	smpsAlterNote       $0F
0008A25E E701                       	dc.b	smpsNoAttack, $01
0008A260 E10B                       	smpsAlterNote       $0B
0008A262 E701                       	dc.b	smpsNoAttack, $01
0008A264 E105                       	smpsAlterNote       $05
0008A266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A26A E108                       	smpsAlterNote       $08
0008A26C E701                       	dc.b	smpsNoAttack, $01
0008A26E E10E                       	smpsAlterNote       $0E
0008A270 E701                       	dc.b	smpsNoAttack, $01
0008A272 E10F                       	smpsAlterNote       $0F
0008A274 8001                       	dc.b	nRst, $01
0008A276 E109                       	smpsAlterNote       $09
0008A278 C20D                       	dc.b	nF5, $0D
0008A27A E103                       	smpsAlterNote       $03
0008A27C E701                       	dc.b	smpsNoAttack, $01
0008A27E E102                       	smpsAlterNote       $02
0008A280 E701                       	dc.b	smpsNoAttack, $01
0008A282 E106                       	smpsAlterNote       $06
0008A284 E701                       	dc.b	smpsNoAttack, $01
0008A286 E10C                       	smpsAlterNote       $0C
0008A288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A28C E109                       	smpsAlterNote       $09
0008A28E E701                       	dc.b	smpsNoAttack, $01
0008A290 E103                       	smpsAlterNote       $03
0008A292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A296 E109                       	smpsAlterNote       $09
0008A298 E701                       	dc.b	smpsNoAttack, $01
0008A29A E10C                       	smpsAlterNote       $0C
0008A29C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2A0 E106                       	smpsAlterNote       $06
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E102                       	smpsAlterNote       $02
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E103                       	smpsAlterNote       $03
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E109                       	smpsAlterNote       $09
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E10D                       	smpsAlterNote       $0D
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E109                       	smpsAlterNote       $09
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E106                       	smpsAlterNote       $06
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E102                       	smpsAlterNote       $02
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C0 E106                       	smpsAlterNote       $06
0008A2C2 E701                       	dc.b	smpsNoAttack, $01
0008A2C4 E10C                       	smpsAlterNote       $0C
0008A2C6 E701                       	dc.b	smpsNoAttack, $01
0008A2C8 E10D                       	smpsAlterNote       $0D
0008A2CA E701                       	dc.b	smpsNoAttack, $01
0008A2CC E109                       	smpsAlterNote       $09
0008A2CE E701                       	dc.b	smpsNoAttack, $01
0008A2D0 E103                       	smpsAlterNote       $03
0008A2D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2D6 E106                       	smpsAlterNote       $06
0008A2D8 E701                       	dc.b	smpsNoAttack, $01
0008A2DA E10C                       	smpsAlterNote       $0C
0008A2DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2E0 E106                       	smpsAlterNote       $06
0008A2E2 E701                       	dc.b	smpsNoAttack, $01
0008A2E4 E103                       	smpsAlterNote       $03
0008A2E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2EA E109                       	smpsAlterNote       $09
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE E10D                       	smpsAlterNote       $0D
0008A2F0 E701                       	dc.b	smpsNoAttack, $01
0008A2F2 E10C                       	smpsAlterNote       $0C
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 E106                       	smpsAlterNote       $06
0008A2F8 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E102                       	smpsAlterNote       $02
0008A2FC E701                       	dc.b	smpsNoAttack, $01
0008A2FE E106                       	smpsAlterNote       $06
0008A300 E701                       	dc.b	smpsNoAttack, $01
0008A302 E109                       	smpsAlterNote       $09
0008A304 E701                       	dc.b	smpsNoAttack, $01
0008A306 E10D                       	smpsAlterNote       $0D
0008A308 E701                       	dc.b	smpsNoAttack, $01
0008A30A E109                       	smpsAlterNote       $09
0008A30C E701                       	dc.b	smpsNoAttack, $01
0008A30E E103                       	smpsAlterNote       $03
0008A310 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A314 E109                       	smpsAlterNote       $09
0008A316 C206                       	dc.b	nF5, $06
0008A318 E108                       	smpsAlterNote       $08
0008A31A C10E                       	dc.b	nE5, $0E
0008A31C E102                       	smpsAlterNote       $02
0008A31E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A322 E108                       	smpsAlterNote       $08
0008A324 E701                       	dc.b	smpsNoAttack, $01
0008A326 E10B                       	smpsAlterNote       $0B
0008A328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A32C E105                       	smpsAlterNote       $05
0008A32E E701                       	dc.b	smpsNoAttack, $01
0008A330 E101                       	smpsAlterNote       $01
0008A332 E701                       	dc.b	smpsNoAttack, $01
0008A334 E102                       	smpsAlterNote       $02
0008A336 E701                       	dc.b	smpsNoAttack, $01
0008A338 E108                       	smpsAlterNote       $08
0008A33A E701                       	dc.b	smpsNoAttack, $01
0008A33C E10C                       	smpsAlterNote       $0C
0008A33E E701                       	dc.b	smpsNoAttack, $01
0008A340 E107                       	smpsAlterNote       $07
0008A342 BF0E                       	dc.b	nD5, $0E
0008A344 E101                       	smpsAlterNote       $01
0008A346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A34A E107                       	smpsAlterNote       $07
0008A34C E701                       	dc.b	smpsNoAttack, $01
0008A34E E10A                       	smpsAlterNote       $0A
0008A350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A354 E104                       	smpsAlterNote       $04
0008A356 E701                       	dc.b	smpsNoAttack, $01
0008A358 E100                       	smpsAlterNote       $00
0008A35A E701                       	dc.b	smpsNoAttack, $01
0008A35C E104                       	smpsAlterNote       $04
0008A35E E701                       	dc.b	smpsNoAttack, $01
0008A360 E107                       	smpsAlterNote       $07
0008A362 E701                       	dc.b	smpsNoAttack, $01
0008A364 E10B                       	smpsAlterNote       $0B
0008A366 E701                       	dc.b	smpsNoAttack, $01
0008A368 E107                       	smpsAlterNote       $07
0008A36A E701                       	dc.b	smpsNoAttack, $01
0008A36C E101                       	smpsAlterNote       $01
0008A36E E701                       	dc.b	smpsNoAttack, $01
0008A370 E100                       	smpsAlterNote       $00
0008A372 E701                       	dc.b	smpsNoAttack, $01
0008A374 E104                       	smpsAlterNote       $04
0008A376 E701                       	dc.b	smpsNoAttack, $01
0008A378 E10A                       	smpsAlterNote       $0A
0008A37A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A37E E107                       	smpsAlterNote       $07
0008A380 E701                       	dc.b	smpsNoAttack, $01
0008A382 E101                       	smpsAlterNote       $01
0008A384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A388 E107                       	smpsAlterNote       $07
0008A38A E701                       	dc.b	smpsNoAttack, $01
0008A38C E10A                       	smpsAlterNote       $0A
0008A38E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A392 E104                       	smpsAlterNote       $04
0008A394 E701                       	dc.b	smpsNoAttack, $01
0008A396 E100                       	smpsAlterNote       $00
0008A398 E701                       	dc.b	smpsNoAttack, $01
0008A39A E101                       	smpsAlterNote       $01
0008A39C E701                       	dc.b	smpsNoAttack, $01
0008A39E E107                       	smpsAlterNote       $07
0008A3A0 E701                       	dc.b	smpsNoAttack, $01
0008A3A2 E10B                       	smpsAlterNote       $0B
0008A3A4 E701                       	dc.b	smpsNoAttack, $01
0008A3A6 E107                       	smpsAlterNote       $07
0008A3A8 E701                       	dc.b	smpsNoAttack, $01
0008A3AA E104                       	smpsAlterNote       $04
0008A3AC E701                       	dc.b	smpsNoAttack, $01
0008A3AE E100                       	smpsAlterNote       $00
0008A3B0 E701                       	dc.b	smpsNoAttack, $01
0008A3B2 E104                       	smpsAlterNote       $04
0008A3B4 E701                       	dc.b	smpsNoAttack, $01
0008A3B6 E10A                       	smpsAlterNote       $0A
0008A3B8 E701                       	dc.b	smpsNoAttack, $01
0008A3BA E10B                       	smpsAlterNote       $0B
0008A3BC E701                       	dc.b	smpsNoAttack, $01
0008A3BE E107                       	smpsAlterNote       $07
0008A3C0 E701                       	dc.b	smpsNoAttack, $01
0008A3C2 E101                       	smpsAlterNote       $01
0008A3C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C8 E104                       	smpsAlterNote       $04
0008A3CA E701                       	dc.b	smpsNoAttack, $01
0008A3CC E10A                       	smpsAlterNote       $0A
0008A3CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3D2 E104                       	smpsAlterNote       $04
0008A3D4 E701                       	dc.b	smpsNoAttack, $01
0008A3D6 E101                       	smpsAlterNote       $01
0008A3D8 E701                       	dc.b	smpsNoAttack, $01
0008A3DC E107                       	smpsAlterNote       $07
0008A3DE E6FF                       	smpsAlterVol        $FF
0008A3E0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008A3EC 8004                       	dc.b	nRst, $04
0008A3F0 E109                       	smpsAlterNote       $09
0008A3F2 E602                       	smpsAlterVol        $02
0008A3F4 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008A3FA E108                       	smpsAlterNote       $08
0008A3FC B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A400 E109                       	smpsAlterNote       $09
0008A402 B60D                       	dc.b	nF4, $0D
0008A404 E106                       	smpsAlterNote       $06
0008A406 E701                       	dc.b	smpsNoAttack, $01
0008A408 E102                       	smpsAlterNote       $02
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E106                       	smpsAlterNote       $06
0008A40E E701                       	dc.b	smpsNoAttack, $01
0008A410 E109                       	smpsAlterNote       $09
0008A412 E701                       	dc.b	smpsNoAttack, $01
0008A414 E10D                       	smpsAlterNote       $0D
0008A416 E701                       	dc.b	smpsNoAttack, $01
0008A418 E109                       	smpsAlterNote       $09
0008A41A E701                       	dc.b	smpsNoAttack, $01
0008A41C E103                       	smpsAlterNote       $03
0008A41E E701                       	dc.b	smpsNoAttack, $01
0008A420 E102                       	smpsAlterNote       $02
0008A422 E701                       	dc.b	smpsNoAttack, $01
0008A424 E106                       	smpsAlterNote       $06
0008A426 E701                       	dc.b	smpsNoAttack, $01
0008A428 E10C                       	smpsAlterNote       $0C
0008A42A E701                       	dc.b	smpsNoAttack, $01
0008A42C E10D                       	smpsAlterNote       $0D
0008A42E 8001                       	dc.b	nRst, $01
0008A430 E109                       	smpsAlterNote       $09
0008A432 B80D                       	dc.b	nG4, $0D
0008A434 E106                       	smpsAlterNote       $06
0008A436 E701                       	dc.b	smpsNoAttack, $01
0008A438 E102                       	smpsAlterNote       $02
0008A43A E701                       	dc.b	smpsNoAttack, $01
0008A43C E106                       	smpsAlterNote       $06
0008A43E E701                       	dc.b	smpsNoAttack, $01
0008A440 E10C                       	smpsAlterNote       $0C
0008A442 E701                       	dc.b	smpsNoAttack, $01
0008A444 E10D                       	smpsAlterNote       $0D
0008A446 E701                       	dc.b	smpsNoAttack, $01
0008A448 E109                       	smpsAlterNote       $09
0008A44A E701                       	dc.b	smpsNoAttack, $01
0008A44C E103                       	smpsAlterNote       $03
0008A44E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A452 E106                       	smpsAlterNote       $06
0008A454 E701                       	dc.b	smpsNoAttack, $01
0008A456 E10C                       	smpsAlterNote       $0C
0008A458 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A45C E106                       	smpsAlterNote       $06
0008A45E E701                       	dc.b	smpsNoAttack, $01
0008A460 E103                       	smpsAlterNote       $03
0008A462 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A466 E109                       	smpsAlterNote       $09
0008A468 E701                       	dc.b	smpsNoAttack, $01
0008A46A E10D                       	smpsAlterNote       $0D
0008A46C E701                       	dc.b	smpsNoAttack, $01
0008A46E E10C                       	smpsAlterNote       $0C
0008A470 E701                       	dc.b	smpsNoAttack, $01
0008A472 E109                       	smpsAlterNote       $09
0008A474 8001                       	dc.b	nRst, $01
0008A476 E10B                       	smpsAlterNote       $0B
0008A478 BA03                       	dc.b	nA4, $03
0008A47A E10C                       	smpsAlterNote       $0C
0008A47C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008A480 E10B                       	smpsAlterNote       $0B
0008A482 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008A488 E10C                       	smpsAlterNote       $0C
0008A48A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A48E E10B                       	smpsAlterNote       $0B
0008A490 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008A496 E10C                       	smpsAlterNote       $0C
0008A498 D303                       	dc.b	nBb6, $03
0008A49A E10B                       	smpsAlterNote       $0B
0008A49C D20D                       	dc.b	nA6, $0D
0008A49E E108                       	smpsAlterNote       $08
0008A4A0 E701                       	dc.b	smpsNoAttack, $01
0008A4A2 E104                       	smpsAlterNote       $04
0008A4A4 E701                       	dc.b	smpsNoAttack, $01
0008A4A6 E105                       	smpsAlterNote       $05
0008A4A8 E701                       	dc.b	smpsNoAttack, $01
0008A4AA E10B                       	smpsAlterNote       $0B
0008A4AC E701                       	dc.b	smpsNoAttack, $01
0008A4AE E10F                       	smpsAlterNote       $0F
0008A4B0 E701                       	dc.b	smpsNoAttack, $01
0008A4B2 E10B                       	smpsAlterNote       $0B
0008A4B4 E701                       	dc.b	smpsNoAttack, $01
0008A4B6 E108                       	smpsAlterNote       $08
0008A4B8 E701                       	dc.b	smpsNoAttack, $01
0008A4BA E104                       	smpsAlterNote       $04
0008A4BC E701                       	dc.b	smpsNoAttack, $01
0008A4BE E108                       	smpsAlterNote       $08
0008A4C0 E701                       	dc.b	smpsNoAttack, $01
0008A4C2 E10E                       	smpsAlterNote       $0E
0008A4C4 E701                       	dc.b	smpsNoAttack, $01
0008A4C6 E10F                       	smpsAlterNote       $0F
0008A4C8 E701                       	dc.b	smpsNoAttack, $01
0008A4CA E10B                       	smpsAlterNote       $0B
0008A4CC E701                       	dc.b	smpsNoAttack, $01
0008A4CE E105                       	smpsAlterNote       $05
0008A4D0 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008A4D6 E109                       	smpsAlterNote       $09
0008A4D8 CE07                       	dc.b	nF6, $07
0008A4DA E108                       	smpsAlterNote       $08
0008A4DC CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A4E0 E109                       	smpsAlterNote       $09
0008A4E2 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008A4E6 E108                       	smpsAlterNote       $08
0008A4E8 CC0D                       	dc.b	nEb6, $0D
0008A4EA E102                       	smpsAlterNote       $02
0008A4EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4F0 E108                       	smpsAlterNote       $08
0008A4F2 E701                       	dc.b	smpsNoAttack, $01
0008A4F4 E10B                       	smpsAlterNote       $0B
0008A4F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4FA E105                       	smpsAlterNote       $05
0008A4FC E701                       	dc.b	smpsNoAttack, $01
0008A4FE E101                       	smpsAlterNote       $01
0008A500 E701                       	dc.b	smpsNoAttack, $01
0008A502 E102                       	smpsAlterNote       $02
0008A504 E701                       	dc.b	smpsNoAttack, $01
0008A506 E108                       	smpsAlterNote       $08
0008A508 E701                       	dc.b	smpsNoAttack, $01
0008A50A E10C                       	smpsAlterNote       $0C
0008A50C E701                       	dc.b	smpsNoAttack, $01
0008A50E E108                       	smpsAlterNote       $08
0008A510 E701                       	dc.b	smpsNoAttack, $01
0008A512 E105                       	smpsAlterNote       $05
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E101                       	smpsAlterNote       $01
0008A518 E701                       	dc.b	smpsNoAttack, $01
0008A51A E105                       	smpsAlterNote       $05
0008A51C E701                       	dc.b	smpsNoAttack, $01
0008A51E E10B                       	smpsAlterNote       $0B
0008A520 E701                       	dc.b	smpsNoAttack, $01
0008A522 E10C                       	smpsAlterNote       $0C
0008A524 E701                       	dc.b	smpsNoAttack, $01
0008A526 E108                       	smpsAlterNote       $08
0008A528 E701                       	dc.b	smpsNoAttack, $01
0008A52A E107                       	smpsAlterNote       $07
0008A52C CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008A536 E10B                       	smpsAlterNote       $0B
0008A538 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008A542 E109                       	smpsAlterNote       $09
0008A544 C203                       	dc.b	nF5, $03
0008A546 E108                       	smpsAlterNote       $08
0008A548 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A54C E109                       	smpsAlterNote       $09
0008A54E C20D                       	dc.b	nF5, $0D
0008A550 E108                       	smpsAlterNote       $08
0008A552 C10E                       	dc.b	nE5, $0E
0008A554 E107                       	smpsAlterNote       $07
0008A556 BF0D                       	dc.b	nD5, $0D
0008A558 E104                       	smpsAlterNote       $04
0008A55A E701                       	dc.b	smpsNoAttack, $01
0008A55C E100                       	smpsAlterNote       $00
0008A55E E701                       	dc.b	smpsNoAttack, $01
0008A560 E104                       	smpsAlterNote       $04
0008A562 E701                       	dc.b	smpsNoAttack, $01
0008A564 E107                       	smpsAlterNote       $07
0008A566 E701                       	dc.b	smpsNoAttack, $01
0008A568 E10B                       	smpsAlterNote       $0B
0008A56A E701                       	dc.b	smpsNoAttack, $01
0008A56C E107                       	smpsAlterNote       $07
0008A56E E701                       	dc.b	smpsNoAttack, $01
0008A570 E101                       	smpsAlterNote       $01
0008A572 E701                       	dc.b	smpsNoAttack, $01
0008A574 E100                       	smpsAlterNote       $00
0008A576 E701                       	dc.b	smpsNoAttack, $01
0008A578 E104                       	smpsAlterNote       $04
0008A57A E701                       	dc.b	smpsNoAttack, $01
0008A57C E10A                       	smpsAlterNote       $0A
0008A57E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A582 E107                       	smpsAlterNote       $07
0008A584 E701                       	dc.b	smpsNoAttack, $01
0008A586 E101                       	smpsAlterNote       $01
0008A588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A58C E107                       	smpsAlterNote       $07
0008A58E E701                       	dc.b	smpsNoAttack, $01
0008A590 E10A                       	smpsAlterNote       $0A
0008A592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A596 E104                       	smpsAlterNote       $04
0008A598 E701                       	dc.b	smpsNoAttack, $01
0008A59A E100                       	smpsAlterNote       $00
0008A59C E701                       	dc.b	smpsNoAttack, $01
0008A59E E101                       	smpsAlterNote       $01
0008A5A0 E701                       	dc.b	smpsNoAttack, $01
0008A5A2 E107                       	smpsAlterNote       $07
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E10B                       	smpsAlterNote       $0B
0008A5A8 E701                       	dc.b	smpsNoAttack, $01
0008A5AA E107                       	smpsAlterNote       $07
0008A5AC E701                       	dc.b	smpsNoAttack, $01
0008A5AE E104                       	smpsAlterNote       $04
0008A5B0 E701                       	dc.b	smpsNoAttack, $01
0008A5B2 E100                       	smpsAlterNote       $00
0008A5B4 E701                       	dc.b	smpsNoAttack, $01
0008A5B6 E104                       	smpsAlterNote       $04
0008A5B8 E701                       	dc.b	smpsNoAttack, $01
0008A5BA E10A                       	smpsAlterNote       $0A
0008A5BC E701                       	dc.b	smpsNoAttack, $01
0008A5BE E10B                       	smpsAlterNote       $0B
0008A5C0 E701                       	dc.b	smpsNoAttack, $01
0008A5C2 E107                       	smpsAlterNote       $07
0008A5C4 E701                       	dc.b	smpsNoAttack, $01
0008A5C6 E101                       	smpsAlterNote       $01
0008A5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5CC E104                       	smpsAlterNote       $04
0008A5CE E701                       	dc.b	smpsNoAttack, $01
0008A5D0 E10A                       	smpsAlterNote       $0A
0008A5D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D6 E104                       	smpsAlterNote       $04
0008A5D8 E701                       	dc.b	smpsNoAttack, $01
0008A5DA E101                       	smpsAlterNote       $01
0008A5DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E0 E107                       	smpsAlterNote       $07
0008A5E2 E701                       	dc.b	smpsNoAttack, $01
0008A5E4 E10B                       	smpsAlterNote       $0B
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E10A                       	smpsAlterNote       $0A
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E104                       	smpsAlterNote       $04
0008A5EE E701                       	dc.b	smpsNoAttack, $01
0008A5F0 E100                       	smpsAlterNote       $00
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E104                       	smpsAlterNote       $04
0008A5F6 E701                       	dc.b	smpsNoAttack, $01
0008A5F8 E107                       	smpsAlterNote       $07
0008A5FA E701                       	dc.b	smpsNoAttack, $01
0008A5FC E10B                       	smpsAlterNote       $0B
0008A5FE E701                       	dc.b	smpsNoAttack, $01
0008A600 E107                       	smpsAlterNote       $07
0008A602 E701                       	dc.b	smpsNoAttack, $01
0008A604 E101                       	smpsAlterNote       $01
0008A606 E701                       	dc.b	smpsNoAttack, $01
0008A608 E100                       	smpsAlterNote       $00
0008A60A E701                       	dc.b	smpsNoAttack, $01
0008A60C E104                       	smpsAlterNote       $04
0008A60E E701                       	dc.b	smpsNoAttack, $01
0008A610 E10A                       	smpsAlterNote       $0A
0008A612 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A616 E107                       	smpsAlterNote       $07
0008A618 E701                       	dc.b	smpsNoAttack, $01
0008A61A E101                       	smpsAlterNote       $01
0008A61C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A620 E107                       	smpsAlterNote       $07
0008A622 E701                       	dc.b	smpsNoAttack, $01
0008A624 E10A                       	smpsAlterNote       $0A
0008A626 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A62A E104                       	smpsAlterNote       $04
0008A62C E701                       	dc.b	smpsNoAttack, $01
0008A62E E100                       	smpsAlterNote       $00
0008A630 E701                       	dc.b	smpsNoAttack, $01
0008A632 E101                       	smpsAlterNote       $01
0008A634 E701                       	dc.b	smpsNoAttack, $01
0008A636 E107                       	smpsAlterNote       $07
0008A638 E701                       	dc.b	smpsNoAttack, $01
0008A63A E10B                       	smpsAlterNote       $0B
0008A63C E701                       	dc.b	smpsNoAttack, $01
0008A63E E107                       	smpsAlterNote       $07
0008A640 E701                       	dc.b	smpsNoAttack, $01
0008A642 E104                       	smpsAlterNote       $04
0008A644 E701                       	dc.b	smpsNoAttack, $01
0008A646 E100                       	smpsAlterNote       $00
0008A648 E701                       	dc.b	smpsNoAttack, $01
0008A64A E101                       	smpsAlterNote       $01
0008A64C 8001                       	dc.b	nRst, $01
0008A64E E109                       	smpsAlterNote       $09
0008A650 C20D                       	dc.b	nF5, $0D
0008A652 E106                       	smpsAlterNote       $06
0008A654 E701                       	dc.b	smpsNoAttack, $01
0008A656 E102                       	smpsAlterNote       $02
0008A658 E701                       	dc.b	smpsNoAttack, $01
0008A65A E106                       	smpsAlterNote       $06
0008A65C E701                       	dc.b	smpsNoAttack, $01
0008A65E E10C                       	smpsAlterNote       $0C
0008A660 E701                       	dc.b	smpsNoAttack, $01
0008A662 E10D                       	smpsAlterNote       $0D
0008A664 E701                       	dc.b	smpsNoAttack, $01
0008A666 E109                       	smpsAlterNote       $09
0008A668 E701                       	dc.b	smpsNoAttack, $01
0008A66A E103                       	smpsAlterNote       $03
0008A66C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A670 E106                       	smpsAlterNote       $06
0008A672 E701                       	dc.b	smpsNoAttack, $01
0008A674 E10C                       	smpsAlterNote       $0C
0008A676 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A67A E106                       	smpsAlterNote       $06
0008A67C E701                       	dc.b	smpsNoAttack, $01
0008A67E E103                       	smpsAlterNote       $03
0008A680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A684 E109                       	smpsAlterNote       $09
0008A686 E701                       	dc.b	smpsNoAttack, $01
0008A688 E10D                       	smpsAlterNote       $0D
0008A68A E701                       	dc.b	smpsNoAttack, $01
0008A68C E10C                       	smpsAlterNote       $0C
0008A68E E701                       	dc.b	smpsNoAttack, $01
0008A690 E109                       	smpsAlterNote       $09
0008A692 8001                       	dc.b	nRst, $01
0008A694 E108                       	smpsAlterNote       $08
0008A696 C10D                       	dc.b	nE5, $0D
0008A698 E109                       	smpsAlterNote       $09
0008A69A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008A69E E108                       	smpsAlterNote       $08
0008A6A0 C10D                       	dc.b	nE5, $0D
0008A6A2 E102                       	smpsAlterNote       $02
0008A6A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6A8 E105                       	smpsAlterNote       $05
0008A6AA E701                       	dc.b	smpsNoAttack, $01
0008A6AC E108                       	smpsAlterNote       $08
0008A6AE 8001                       	dc.b	nRst, $01
0008A6B0 E107                       	smpsAlterNote       $07
0008A6B2 BF0D                       	dc.b	nD5, $0D
0008A6B4 E108                       	smpsAlterNote       $08
0008A6B6 C107                       	dc.b	nE5, $07
0008A6B8 E109                       	smpsAlterNote       $09
0008A6BA C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008A6C0 E10B                       	smpsAlterNote       $0B
0008A6C2 C603                       	dc.b	nA5, $03
0008A6C4 E10C                       	smpsAlterNote       $0C
0008A6C6 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008A6CC E10B                       	smpsAlterNote       $0B
0008A6CE C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008A6D4 E109                       	smpsAlterNote       $09
0008A6D6 D003                       	dc.b	nG6, $03
0008A6D8 E108                       	smpsAlterNote       $08
0008A6DA CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008A6DE E10B                       	smpsAlterNote       $0B
0008A6E0 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008A6E4 E108                       	smpsAlterNote       $08
0008A6E6 C102                       	dc.b	nE5, $02
0008A6EA E10C                       	smpsAlterNote       $0C
0008A6EC E6FB                       	smpsAlterVol        $FB
0008A6EE A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008A6FA 8001                       	dc.b	nRst, $01
0008A6FC E10B                       	smpsAlterNote       $0B
0008A6FE A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A706 E107                       	smpsAlterNote       $07
0008A708 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A70C E10B                       	smpsAlterNote       $0B
0008A70E A203                       	dc.b	nA2, $03
0008A710 E109                       	smpsAlterNote       $09
0008A712 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A716 E108                       	smpsAlterNote       $08
0008A718 A906                       	dc.b	nE3, $06
0008A71A E107                       	smpsAlterNote       $07
0008A71C A703 8001                  	dc.b	nD3, $03, nRst, $01
0008A720 E106                       	smpsAlterNote       $06
0008A722 A503                       	dc.b	nC3, $03
0008A724 E10C                       	smpsAlterNote       $0C
0008A726 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A72A E10B                       	smpsAlterNote       $0B
0008A72C A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A730 E11B                       	smpsAlterNote       $1B
0008A732 C401                       	dc.b	nG5, $01
0008A734 E1F4                       	smpsAlterNote       $F4
0008A736 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A739 E106                       	smpsAlterNote       $06
0008A73B E701                       	dc.b	smpsNoAttack, $01
0008A73D E10F                       	smpsAlterNote       $0F
0008A73F E701                       	dc.b	smpsNoAttack, $01
0008A741 E1E4                       	smpsAlterNote       $E4
0008A743 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A746 E1F6                       	smpsAlterNote       $F6
0008A748 E701                       	dc.b	smpsNoAttack, $01
0008A74A E108                       	smpsAlterNote       $08
0008A74C E701                       	dc.b	smpsNoAttack, $01
0008A74E E10B                       	smpsAlterNote       $0B
0008A750 E706                       	dc.b	smpsNoAttack, $06
0008A752 E105                       	smpsAlterNote       $05
0008A754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A758 E108                       	smpsAlterNote       $08
0008A75A E701                       	dc.b	smpsNoAttack, $01
0008A75C E10E                       	smpsAlterNote       $0E
0008A75E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A762 E108                       	smpsAlterNote       $08
0008A764 E701                       	dc.b	smpsNoAttack, $01
0008A766 E105                       	smpsAlterNote       $05
0008A768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A76C E10B                       	smpsAlterNote       $0B
0008A76E E701                       	dc.b	smpsNoAttack, $01
0008A770 E10F                       	smpsAlterNote       $0F
0008A772 E701                       	dc.b	smpsNoAttack, $01
0008A774 E10E                       	smpsAlterNote       $0E
0008A776 E701                       	dc.b	smpsNoAttack, $01
0008A778 E108                       	smpsAlterNote       $08
0008A77A E701                       	dc.b	smpsNoAttack, $01
0008A77C E104                       	smpsAlterNote       $04
0008A77E E701                       	dc.b	smpsNoAttack, $01
0008A780 E108                       	smpsAlterNote       $08
0008A782 E701                       	dc.b	smpsNoAttack, $01
0008A784 E10B                       	smpsAlterNote       $0B
0008A786 E701                       	dc.b	smpsNoAttack, $01
0008A788 E10F                       	smpsAlterNote       $0F
0008A78A E701                       	dc.b	smpsNoAttack, $01
0008A78C E10B                       	smpsAlterNote       $0B
0008A78E E701                       	dc.b	smpsNoAttack, $01
0008A790 E105                       	smpsAlterNote       $05
0008A792 E701                       	dc.b	smpsNoAttack, $01
0008A794 E104                       	smpsAlterNote       $04
0008A796 E701                       	dc.b	smpsNoAttack, $01
0008A798 E108                       	smpsAlterNote       $08
0008A79A E701                       	dc.b	smpsNoAttack, $01
0008A79C E10E                       	smpsAlterNote       $0E
0008A79E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7A2 E10B                       	smpsAlterNote       $0B
0008A7A4 E701                       	dc.b	smpsNoAttack, $01
0008A7A6 E105                       	smpsAlterNote       $05
0008A7A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7AC E10B                       	smpsAlterNote       $0B
0008A7AE E701                       	dc.b	smpsNoAttack, $01
0008A7B0 E10E                       	smpsAlterNote       $0E
0008A7B2 E701                       	dc.b	smpsNoAttack, $01
0008A7B4 E10F                       	smpsAlterNote       $0F
0008A7B6 8001                       	dc.b	nRst, $01
0008A7B8 E109                       	smpsAlterNote       $09
0008A7BA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A7C0 E108                       	smpsAlterNote       $08
0008A7C2 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7C6 E109                       	smpsAlterNote       $09
0008A7C8 C202                       	dc.b	nF5, $02
0008A7CA E108                       	smpsAlterNote       $08
0008A7CC C102                       	dc.b	nE5, $02
0008A7CE E107                       	smpsAlterNote       $07
0008A7D0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A7D4 E108                       	smpsAlterNote       $08
0008A7D6 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7DA E107                       	smpsAlterNote       $07
0008A7DC BF02                       	dc.b	nD5, $02
0008A7DE E106                       	smpsAlterNote       $06
0008A7E0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7E4 E107                       	smpsAlterNote       $07
0008A7E6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A7EA E106                       	smpsAlterNote       $06
0008A7EC BD02                       	dc.b	nC5, $02
0008A7EE E10C                       	smpsAlterNote       $0C
0008A7F0 BB02                       	dc.b	nBb4, $02
0008A7F2 E106                       	smpsAlterNote       $06
0008A7F4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7F8 E10C                       	smpsAlterNote       $0C
0008A7FA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A7FE E10B                       	smpsAlterNote       $0B
0008A800 BA02                       	dc.b	nA4, $02
0008A802 E10C                       	smpsAlterNote       $0C
0008A804 BB02                       	dc.b	nBb4, $02
0008A806 E10B                       	smpsAlterNote       $0B
0008A808 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A812 E108                       	smpsAlterNote       $08
0008A814 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A81C E107                       	smpsAlterNote       $07
0008A81E BE02                       	dc.b	nCs5, $02
0008A820 E10B                       	smpsAlterNote       $0B
0008A822 BA02                       	dc.b	nA4, $02
0008A824 E109                       	smpsAlterNote       $09
0008A826 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A82A E108                       	smpsAlterNote       $08
0008A82C B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A830 E10B                       	smpsAlterNote       $0B
0008A832 AE02                       	dc.b	nA3, $02
0008A834 E10C                       	smpsAlterNote       $0C
0008A836 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A842 E10B                       	smpsAlterNote       $0B
0008A844 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A84C E107                       	smpsAlterNote       $07
0008A84E A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A852 E10B                       	smpsAlterNote       $0B
0008A854 A203                       	dc.b	nA2, $03
0008A856 E109                       	smpsAlterNote       $09
0008A858 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A85C E108                       	smpsAlterNote       $08
0008A85E A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A862 E107                       	smpsAlterNote       $07
0008A864 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A868 E106                       	smpsAlterNote       $06
0008A86A A503                       	dc.b	nC3, $03
0008A86C E10C                       	smpsAlterNote       $0C
0008A86E A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A874 E107                       	smpsAlterNote       $07
0008A876 B20D                       	dc.b	nCs4, $0D
0008A878 E104                       	smpsAlterNote       $04
0008A87A E701                       	dc.b	smpsNoAttack, $01
0008A87C E100                       	smpsAlterNote       $00
0008A87E E701                       	dc.b	smpsNoAttack, $01
0008A880 E104                       	smpsAlterNote       $04
0008A882 E701                       	dc.b	smpsNoAttack, $01
0008A884 E10A                       	smpsAlterNote       $0A
0008A886 E701                       	dc.b	smpsNoAttack, $01
0008A888 E10B                       	smpsAlterNote       $0B
0008A88A E701                       	dc.b	smpsNoAttack, $01
0008A88C E107                       	smpsAlterNote       $07
0008A88E E701                       	dc.b	smpsNoAttack, $01
0008A890 E101                       	smpsAlterNote       $01
0008A892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A896 E104                       	smpsAlterNote       $04
0008A898 E701                       	dc.b	smpsNoAttack, $01
0008A89A E10A                       	smpsAlterNote       $0A
0008A89C E701                       	dc.b	smpsNoAttack, $01
0008A89E E10B                       	smpsAlterNote       $0B
0008A8A0 8001                       	dc.b	nRst, $01
0008A8A2 E107                       	smpsAlterNote       $07
0008A8A4 B30D                       	dc.b	nD4, $0D
0008A8A6 E104                       	smpsAlterNote       $04
0008A8A8 E701                       	dc.b	smpsNoAttack, $01
0008A8AA E100                       	smpsAlterNote       $00
0008A8AC E701                       	dc.b	smpsNoAttack, $01
0008A8AE E104                       	smpsAlterNote       $04
0008A8B0 E701                       	dc.b	smpsNoAttack, $01
0008A8B2 E10A                       	smpsAlterNote       $0A
0008A8B4 E701                       	dc.b	smpsNoAttack, $01
0008A8B6 E10B                       	smpsAlterNote       $0B
0008A8B8 E701                       	dc.b	smpsNoAttack, $01
0008A8BA E107                       	smpsAlterNote       $07
0008A8BC E701                       	dc.b	smpsNoAttack, $01
0008A8BE E101                       	smpsAlterNote       $01
0008A8C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C4 E104                       	smpsAlterNote       $04
0008A8C6 E701                       	dc.b	smpsNoAttack, $01
0008A8C8 E10A                       	smpsAlterNote       $0A
0008A8CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8CE E104                       	smpsAlterNote       $04
0008A8D0 E701                       	dc.b	smpsNoAttack, $01
0008A8D2 E101                       	smpsAlterNote       $01
0008A8D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8D8 E107                       	smpsAlterNote       $07
0008A8DA E701                       	dc.b	smpsNoAttack, $01
0008A8DC E10B                       	smpsAlterNote       $0B
0008A8DE E701                       	dc.b	smpsNoAttack, $01
0008A8E0 E10A                       	smpsAlterNote       $0A
0008A8E2 E701                       	dc.b	smpsNoAttack, $01
0008A8E4 E107                       	smpsAlterNote       $07
0008A8E6 8001                       	dc.b	nRst, $01
0008A8E8 E108                       	smpsAlterNote       $08
0008A8EA B50D                       	dc.b	nE4, $0D
0008A8EC E102                       	smpsAlterNote       $02
0008A8EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8F2 E105                       	smpsAlterNote       $05
0008A8F4 E701                       	dc.b	smpsNoAttack, $01
0008A8F6 E10B                       	smpsAlterNote       $0B
0008A8F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8FC E105                       	smpsAlterNote       $05
0008A8FE E701                       	dc.b	smpsNoAttack, $01
0008A900 E102                       	smpsAlterNote       $02
0008A902 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A906 E108                       	smpsAlterNote       $08
0008A908 E701                       	dc.b	smpsNoAttack, $01
0008A90A E10C                       	smpsAlterNote       $0C
0008A90C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A910 E107                       	smpsAlterNote       $07
0008A912 B30D                       	dc.b	nD4, $0D
0008A914 E101                       	smpsAlterNote       $01
0008A916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A91A E104                       	smpsAlterNote       $04
0008A91C E701                       	dc.b	smpsNoAttack, $01
0008A91E E10A                       	smpsAlterNote       $0A
0008A920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A924 E104                       	smpsAlterNote       $04
0008A926 E701                       	dc.b	smpsNoAttack, $01
0008A928 E101                       	smpsAlterNote       $01
0008A92A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A92E E107                       	smpsAlterNote       $07
0008A930 E701                       	dc.b	smpsNoAttack, $01
0008A932 E10B                       	smpsAlterNote       $0B
0008A934 E701                       	dc.b	smpsNoAttack, $01
0008A936 E10A                       	smpsAlterNote       $0A
0008A938 E701                       	dc.b	smpsNoAttack, $01
0008A93A E104                       	smpsAlterNote       $04
0008A93C E701                       	dc.b	smpsNoAttack, $01
0008A93E E100                       	smpsAlterNote       $00
0008A940 E701                       	dc.b	smpsNoAttack, $01
0008A942 E104                       	smpsAlterNote       $04
0008A944 E701                       	dc.b	smpsNoAttack, $01
0008A946 E107                       	smpsAlterNote       $07
0008A948 E701                       	dc.b	smpsNoAttack, $01
0008A94A E10B                       	smpsAlterNote       $0B
0008A94C E701                       	dc.b	smpsNoAttack, $01
0008A94E E107                       	smpsAlterNote       $07
0008A950 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A954 E101                       	smpsAlterNote       $01
0008A956 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A95A E107                       	smpsAlterNote       $07
0008A95C E701                       	dc.b	smpsNoAttack, $01
0008A95E E10A                       	smpsAlterNote       $0A
0008A960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A964 E104                       	smpsAlterNote       $04
0008A966 E701                       	dc.b	smpsNoAttack, $01
0008A968 E100                       	smpsAlterNote       $00
0008A96A E701                       	dc.b	smpsNoAttack, $01
0008A96C E101                       	smpsAlterNote       $01
0008A96E E701                       	dc.b	smpsNoAttack, $01
0008A970 E107                       	smpsAlterNote       $07
0008A972 E701                       	dc.b	smpsNoAttack, $01
0008A974 E10B                       	smpsAlterNote       $0B
0008A976 E701                       	dc.b	smpsNoAttack, $01
0008A978 E107                       	smpsAlterNote       $07
0008A97A B30E                       	dc.b	nD4, $0E
0008A97C E101                       	smpsAlterNote       $01
0008A97E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A982 E107                       	smpsAlterNote       $07
0008A984 E701                       	dc.b	smpsNoAttack, $01
0008A986 E10A                       	smpsAlterNote       $0A
0008A988 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A98C E104                       	smpsAlterNote       $04
0008A98E E701                       	dc.b	smpsNoAttack, $01
0008A990 E100                       	smpsAlterNote       $00
0008A992 E701                       	dc.b	smpsNoAttack, $01
0008A994 E101                       	smpsAlterNote       $01
0008A996 E701                       	dc.b	smpsNoAttack, $01
0008A998 E107                       	smpsAlterNote       $07
0008A99A E701                       	dc.b	smpsNoAttack, $01
0008A99C E10B                       	smpsAlterNote       $0B
0008A99E E701                       	dc.b	smpsNoAttack, $01
0008A9A0 E107                       	smpsAlterNote       $07
0008A9A2 E701                       	dc.b	smpsNoAttack, $01
0008A9A4 E104                       	smpsAlterNote       $04
0008A9A6 E701                       	dc.b	smpsNoAttack, $01
0008A9A8 E100                       	smpsAlterNote       $00
0008A9AA E701                       	dc.b	smpsNoAttack, $01
0008A9AC E104                       	smpsAlterNote       $04
0008A9AE E701                       	dc.b	smpsNoAttack, $01
0008A9B0 E10A                       	smpsAlterNote       $0A
0008A9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9B6 E107                       	smpsAlterNote       $07
0008A9B8 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A9BC E104                       	smpsAlterNote       $04
0008A9BE E701                       	dc.b	smpsNoAttack, $01
0008A9C0 E100                       	smpsAlterNote       $00
0008A9C2 E701                       	dc.b	smpsNoAttack, $01
0008A9C4 E101                       	smpsAlterNote       $01
0008A9C6 E701                       	dc.b	smpsNoAttack, $01
0008A9C8 E107                       	smpsAlterNote       $07
0008A9CA E701                       	dc.b	smpsNoAttack, $01
0008A9CC E10B                       	smpsAlterNote       $0B
0008A9CE E701                       	dc.b	smpsNoAttack, $01
0008A9D0 E107                       	smpsAlterNote       $07
0008A9D2 E701                       	dc.b	smpsNoAttack, $01
0008A9D4 E104                       	smpsAlterNote       $04
0008A9D6 E701                       	dc.b	smpsNoAttack, $01
0008A9D8 E100                       	smpsAlterNote       $00
0008A9DA E701                       	dc.b	smpsNoAttack, $01
0008A9DC E104                       	smpsAlterNote       $04
0008A9DE E701                       	dc.b	smpsNoAttack, $01
0008A9E0 E10A                       	smpsAlterNote       $0A
0008A9E2 E701                       	dc.b	smpsNoAttack, $01
0008A9E4 E10B                       	smpsAlterNote       $0B
0008A9E6 E701                       	dc.b	smpsNoAttack, $01
0008A9EA E6FF                       	smpsAlterVol        $FF
0008A9EC A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A9F8 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008AA00 E109                       	smpsAlterNote       $09
0008AA02 E601                       	smpsAlterVol        $01
0008AA04 B60D                       	dc.b	nF4, $0D
0008AA06 E106                       	smpsAlterNote       $06
0008AA08 E701                       	dc.b	smpsNoAttack, $01
0008AA0A E102                       	smpsAlterNote       $02
0008AA0C E701                       	dc.b	smpsNoAttack, $01
0008AA0E E106                       	smpsAlterNote       $06
0008AA10 E701                       	dc.b	smpsNoAttack, $01
0008AA12 E109                       	smpsAlterNote       $09
0008AA14 E701                       	dc.b	smpsNoAttack, $01
0008AA16 E10D                       	smpsAlterNote       $0D
0008AA18 E701                       	dc.b	smpsNoAttack, $01
0008AA1A E109                       	smpsAlterNote       $09
0008AA1C E701                       	dc.b	smpsNoAttack, $01
0008AA1E E103                       	smpsAlterNote       $03
0008AA20 E701                       	dc.b	smpsNoAttack, $01
0008AA22 E102                       	smpsAlterNote       $02
0008AA24 E701                       	dc.b	smpsNoAttack, $01
0008AA26 E106                       	smpsAlterNote       $06
0008AA28 E701                       	dc.b	smpsNoAttack, $01
0008AA2A E10C                       	smpsAlterNote       $0C
0008AA2C E701                       	dc.b	smpsNoAttack, $01
0008AA2E E10D                       	smpsAlterNote       $0D
0008AA30 8001                       	dc.b	nRst, $01
0008AA32 E109                       	smpsAlterNote       $09
0008AA34 B80D                       	dc.b	nG4, $0D
0008AA36 E106                       	smpsAlterNote       $06
0008AA38 E701                       	dc.b	smpsNoAttack, $01
0008AA3A E102                       	smpsAlterNote       $02
0008AA3C E701                       	dc.b	smpsNoAttack, $01
0008AA3E E106                       	smpsAlterNote       $06
0008AA40 E701                       	dc.b	smpsNoAttack, $01
0008AA42 E109                       	smpsAlterNote       $09
0008AA44 E701                       	dc.b	smpsNoAttack, $01
0008AA46 E10D                       	smpsAlterNote       $0D
0008AA48 E701                       	dc.b	smpsNoAttack, $01
0008AA4A E109                       	smpsAlterNote       $09
0008AA4C E701                       	dc.b	smpsNoAttack, $01
0008AA4E E103                       	smpsAlterNote       $03
0008AA50 E701                       	dc.b	smpsNoAttack, $01
0008AA52 E102                       	smpsAlterNote       $02
0008AA54 E701                       	dc.b	smpsNoAttack, $01
0008AA56 E106                       	smpsAlterNote       $06
0008AA58 E701                       	dc.b	smpsNoAttack, $01
0008AA5A E10C                       	smpsAlterNote       $0C
0008AA5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA60 E106                       	smpsAlterNote       $06
0008AA62 E701                       	dc.b	smpsNoAttack, $01
0008AA64 E103                       	smpsAlterNote       $03
0008AA66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA6A E109                       	smpsAlterNote       $09
0008AA6C E701                       	dc.b	smpsNoAttack, $01
0008AA6E E10D                       	smpsAlterNote       $0D
0008AA70 E701                       	dc.b	smpsNoAttack, $01
0008AA72 E10C                       	smpsAlterNote       $0C
0008AA74 E701                       	dc.b	smpsNoAttack, $01
0008AA76 E109                       	smpsAlterNote       $09
0008AA78 8001                       	dc.b	nRst, $01
0008AA7A E10B                       	smpsAlterNote       $0B
0008AA7C BA0D                       	dc.b	nA4, $0D
0008AA7E E105                       	smpsAlterNote       $05
0008AA80 E701                       	dc.b	smpsNoAttack, $01
0008AA82 E104                       	smpsAlterNote       $04
0008AA84 E701                       	dc.b	smpsNoAttack, $01
0008AA86 E108                       	smpsAlterNote       $08
0008AA88 E701                       	dc.b	smpsNoAttack, $01
0008AA8A E10E                       	smpsAlterNote       $0E
0008AA8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA90 E10B                       	smpsAlterNote       $0B
0008AA92 E701                       	dc.b	smpsNoAttack, $01
0008AA94 E105                       	smpsAlterNote       $05
0008AA96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA9A E10B                       	smpsAlterNote       $0B
0008AA9C E701                       	dc.b	smpsNoAttack, $01
0008AA9E E10E                       	smpsAlterNote       $0E
0008AAA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAA4 E108                       	smpsAlterNote       $08
0008AAA6 E701                       	dc.b	smpsNoAttack, $01
0008AAA8 E104                       	smpsAlterNote       $04
0008AAAA E701                       	dc.b	smpsNoAttack, $01
0008AAAC E105                       	smpsAlterNote       $05
0008AAAE E701                       	dc.b	smpsNoAttack, $01
0008AAB0 E10B                       	smpsAlterNote       $0B
0008AAB2 E701                       	dc.b	smpsNoAttack, $01
0008AAB4 E10F                       	smpsAlterNote       $0F
0008AAB6 E701                       	dc.b	smpsNoAttack, $01
0008AAB8 E10B                       	smpsAlterNote       $0B
0008AABA E701                       	dc.b	smpsNoAttack, $01
0008AABC E108                       	smpsAlterNote       $08
0008AABE E701                       	dc.b	smpsNoAttack, $01
0008AAC0 E104                       	smpsAlterNote       $04
0008AAC2 E701                       	dc.b	smpsNoAttack, $01
0008AAC4 E108                       	smpsAlterNote       $08
0008AAC6 E701                       	dc.b	smpsNoAttack, $01
0008AAC8 E10E                       	smpsAlterNote       $0E
0008AACA E701                       	dc.b	smpsNoAttack, $01
0008AACC E10F                       	smpsAlterNote       $0F
0008AACE E701                       	dc.b	smpsNoAttack, $01
0008AAD0 E10B                       	smpsAlterNote       $0B
0008AAD2 E701                       	dc.b	smpsNoAttack, $01
0008AAD4 E105                       	smpsAlterNote       $05
0008AAD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AADA E108                       	smpsAlterNote       $08
0008AADC E701                       	dc.b	smpsNoAttack, $01
0008AADE E10E                       	smpsAlterNote       $0E
0008AAE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAE4 E108                       	smpsAlterNote       $08
0008AAE6 E701                       	dc.b	smpsNoAttack, $01
0008AAE8 E105                       	smpsAlterNote       $05
0008AAEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAEE E108                       	smpsAlterNote       $08
0008AAF0 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008AAF4 E109                       	smpsAlterNote       $09
0008AAF6 B60D                       	dc.b	nF4, $0D
0008AAF8 E103                       	smpsAlterNote       $03
0008AAFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAFE E106                       	smpsAlterNote       $06
0008AB00 E701                       	dc.b	smpsNoAttack, $01
0008AB02 E10C                       	smpsAlterNote       $0C
0008AB04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB08 E106                       	smpsAlterNote       $06
0008AB0A E701                       	dc.b	smpsNoAttack, $01
0008AB0C E103                       	smpsAlterNote       $03
0008AB0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB12 E109                       	smpsAlterNote       $09
0008AB14 E701                       	dc.b	smpsNoAttack, $01
0008AB16 E10D                       	smpsAlterNote       $0D
0008AB18 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AB1C E109                       	smpsAlterNote       $09
0008AB1E B80D                       	dc.b	nG4, $0D
0008AB20 E103                       	smpsAlterNote       $03
0008AB22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB26 E109                       	smpsAlterNote       $09
0008AB28 E701                       	dc.b	smpsNoAttack, $01
0008AB2A E10C                       	smpsAlterNote       $0C
0008AB2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB30 E106                       	smpsAlterNote       $06
0008AB32 E701                       	dc.b	smpsNoAttack, $01
0008AB34 E102                       	smpsAlterNote       $02
0008AB36 E701                       	dc.b	smpsNoAttack, $01
0008AB38 E103                       	smpsAlterNote       $03
0008AB3A E701                       	dc.b	smpsNoAttack, $01
0008AB3C E109                       	smpsAlterNote       $09
0008AB3E E701                       	dc.b	smpsNoAttack, $01
0008AB40 E10D                       	smpsAlterNote       $0D
0008AB42 E701                       	dc.b	smpsNoAttack, $01
0008AB44 E109                       	smpsAlterNote       $09
0008AB46 E701                       	dc.b	smpsNoAttack, $01
0008AB48 E106                       	smpsAlterNote       $06
0008AB4A E701                       	dc.b	smpsNoAttack, $01
0008AB4C E102                       	smpsAlterNote       $02
0008AB4E E701                       	dc.b	smpsNoAttack, $01
0008AB50 E106                       	smpsAlterNote       $06
0008AB52 E701                       	dc.b	smpsNoAttack, $01
0008AB54 E10C                       	smpsAlterNote       $0C
0008AB56 E701                       	dc.b	smpsNoAttack, $01
0008AB58 E10D                       	smpsAlterNote       $0D
0008AB5A E701                       	dc.b	smpsNoAttack, $01
0008AB5C E109                       	smpsAlterNote       $09
0008AB5E E701                       	dc.b	smpsNoAttack, $01
0008AB60 E10B                       	smpsAlterNote       $0B
0008AB62 BA0D                       	dc.b	nA4, $0D
0008AB64 E108                       	smpsAlterNote       $08
0008AB66 E701                       	dc.b	smpsNoAttack, $01
0008AB68 E105                       	smpsAlterNote       $05
0008AB6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB6E E10B                       	smpsAlterNote       $0B
0008AB70 E701                       	dc.b	smpsNoAttack, $01
0008AB72 E10F                       	smpsAlterNote       $0F
0008AB74 E701                       	dc.b	smpsNoAttack, $01
0008AB76 E10E                       	smpsAlterNote       $0E
0008AB78 E701                       	dc.b	smpsNoAttack, $01
0008AB7A E108                       	smpsAlterNote       $08
0008AB7C E701                       	dc.b	smpsNoAttack, $01
0008AB7E E104                       	smpsAlterNote       $04
0008AB80 E701                       	dc.b	smpsNoAttack, $01
0008AB82 E108                       	smpsAlterNote       $08
0008AB84 E701                       	dc.b	smpsNoAttack, $01
0008AB86 E10B                       	smpsAlterNote       $0B
0008AB88 E701                       	dc.b	smpsNoAttack, $01
0008AB8A E10F                       	smpsAlterNote       $0F
0008AB8C E701                       	dc.b	smpsNoAttack, $01
0008AB8E E10B                       	smpsAlterNote       $0B
0008AB90 E701                       	dc.b	smpsNoAttack, $01
0008AB92 E105                       	smpsAlterNote       $05
0008AB94 E701                       	dc.b	smpsNoAttack, $01
0008AB96 E104                       	smpsAlterNote       $04
0008AB98 E701                       	dc.b	smpsNoAttack, $01
0008AB9A E108                       	smpsAlterNote       $08
0008AB9C E701                       	dc.b	smpsNoAttack, $01
0008AB9E E10E                       	smpsAlterNote       $0E
0008ABA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABA4 E10B                       	smpsAlterNote       $0B
0008ABA6 E701                       	dc.b	smpsNoAttack, $01
0008ABA8 E105                       	smpsAlterNote       $05
0008ABAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABAE E10B                       	smpsAlterNote       $0B
0008ABB0 E701                       	dc.b	smpsNoAttack, $01
0008ABB2 E10E                       	smpsAlterNote       $0E
0008ABB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB8 E108                       	smpsAlterNote       $08
0008ABBA E701                       	dc.b	smpsNoAttack, $01
0008ABBC E105                       	smpsAlterNote       $05
0008ABBE 8001                       	dc.b	nRst, $01
0008ABC0 E109                       	smpsAlterNote       $09
0008ABC2 B60A                       	dc.b	nF4, $0A
0008ABC4 E108                       	smpsAlterNote       $08
0008ABC6 B507                       	dc.b	nE4, $07
0008ABC8 E107                       	smpsAlterNote       $07
0008ABCA B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008ABCE E108                       	smpsAlterNote       $08
0008ABD0 B503                       	dc.b	nE4, $03
0008ABD2 E109                       	smpsAlterNote       $09
0008ABD4 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008ABDC E10B                       	smpsAlterNote       $0B
0008ABDE BA0D                       	dc.b	nA4, $0D
0008ABE0 E108                       	smpsAlterNote       $08
0008ABE2 E701                       	dc.b	smpsNoAttack, $01
0008ABE4 E104                       	smpsAlterNote       $04
0008ABE6 E701                       	dc.b	smpsNoAttack, $01
0008ABE8 E108                       	smpsAlterNote       $08
0008ABEA E701                       	dc.b	smpsNoAttack, $01
0008ABEC E10B                       	smpsAlterNote       $0B
0008ABEE E701                       	dc.b	smpsNoAttack, $01
0008ABF0 E10F                       	smpsAlterNote       $0F
0008ABF2 E701                       	dc.b	smpsNoAttack, $01
0008ABF4 E10B                       	smpsAlterNote       $0B
0008ABF6 E701                       	dc.b	smpsNoAttack, $01
0008ABF8 E105                       	smpsAlterNote       $05
0008ABFA E701                       	dc.b	smpsNoAttack, $01
0008ABFC E104                       	smpsAlterNote       $04
0008ABFE E701                       	dc.b	smpsNoAttack, $01
0008AC00 E108                       	smpsAlterNote       $08
0008AC02 E701                       	dc.b	smpsNoAttack, $01
0008AC04 E10E                       	smpsAlterNote       $0E
0008AC06 E701                       	dc.b	smpsNoAttack, $01
0008AC08 E10F                       	smpsAlterNote       $0F
0008AC0A 8001                       	dc.b	nRst, $01
0008AC0C E109                       	smpsAlterNote       $09
0008AC0E C20D                       	dc.b	nF5, $0D
0008AC10 E106                       	smpsAlterNote       $06
0008AC12 E701                       	dc.b	smpsNoAttack, $01
0008AC14 E102                       	smpsAlterNote       $02
0008AC16 E701                       	dc.b	smpsNoAttack, $01
0008AC18 E106                       	smpsAlterNote       $06
0008AC1A E701                       	dc.b	smpsNoAttack, $01
0008AC1C E109                       	smpsAlterNote       $09
0008AC1E E701                       	dc.b	smpsNoAttack, $01
0008AC20 E10D                       	smpsAlterNote       $0D
0008AC22 E701                       	dc.b	smpsNoAttack, $01
0008AC24 E109                       	smpsAlterNote       $09
0008AC26 E701                       	dc.b	smpsNoAttack, $01
0008AC28 E103                       	smpsAlterNote       $03
0008AC2A E701                       	dc.b	smpsNoAttack, $01
0008AC2C E102                       	smpsAlterNote       $02
0008AC2E E701                       	dc.b	smpsNoAttack, $01
0008AC30 E106                       	smpsAlterNote       $06
0008AC32 E701                       	dc.b	smpsNoAttack, $01
0008AC34 E10C                       	smpsAlterNote       $0C
0008AC36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC3A E109                       	smpsAlterNote       $09
0008AC3C E701                       	dc.b	smpsNoAttack, $01
0008AC3E E103                       	smpsAlterNote       $03
0008AC40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC44 E109                       	smpsAlterNote       $09
0008AC46 E701                       	dc.b	smpsNoAttack, $01
0008AC48 E10C                       	smpsAlterNote       $0C
0008AC4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC4E E106                       	smpsAlterNote       $06
0008AC50 E701                       	dc.b	smpsNoAttack, $01
0008AC52 E102                       	smpsAlterNote       $02
0008AC54 E701                       	dc.b	smpsNoAttack, $01
0008AC56 E103                       	smpsAlterNote       $03
0008AC58 E701                       	dc.b	smpsNoAttack, $01
0008AC5A E109                       	smpsAlterNote       $09
0008AC5C E701                       	dc.b	smpsNoAttack, $01
0008AC5E E10D                       	smpsAlterNote       $0D
0008AC60 E701                       	dc.b	smpsNoAttack, $01
0008AC62 E109                       	smpsAlterNote       $09
0008AC64 E701                       	dc.b	smpsNoAttack, $01
0008AC66 E106                       	smpsAlterNote       $06
0008AC68 E701                       	dc.b	smpsNoAttack, $01
0008AC6A E102                       	smpsAlterNote       $02
0008AC6C E701                       	dc.b	smpsNoAttack, $01
0008AC6E E106                       	smpsAlterNote       $06
0008AC70 E701                       	dc.b	smpsNoAttack, $01
0008AC72 E10C                       	smpsAlterNote       $0C
0008AC74 E701                       	dc.b	smpsNoAttack, $01
0008AC76 E10D                       	smpsAlterNote       $0D
0008AC78 E701                       	dc.b	smpsNoAttack, $01
0008AC7A E109                       	smpsAlterNote       $09
0008AC7C E701                       	dc.b	smpsNoAttack, $01
0008AC7E E103                       	smpsAlterNote       $03
0008AC80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC84 E106                       	smpsAlterNote       $06
0008AC86 E701                       	dc.b	smpsNoAttack, $01
0008AC88 E10C                       	smpsAlterNote       $0C
0008AC8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC8E E106                       	smpsAlterNote       $06
0008AC90 E701                       	dc.b	smpsNoAttack, $01
0008AC92 E103                       	smpsAlterNote       $03
0008AC94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC98 E109                       	smpsAlterNote       $09
0008AC9A E701                       	dc.b	smpsNoAttack, $01
0008AC9C E10D                       	smpsAlterNote       $0D
0008AC9E E701                       	dc.b	smpsNoAttack, $01
0008ACA0 E10C                       	smpsAlterNote       $0C
0008ACA2 E701                       	dc.b	smpsNoAttack, $01
0008ACA4 E106                       	smpsAlterNote       $06
0008ACA6 E701                       	dc.b	smpsNoAttack, $01
0008ACA8 E103                       	smpsAlterNote       $03
0008ACAA 8001                       	dc.b	nRst, $01
0008ACAC E109                       	smpsAlterNote       $09
0008ACAE C206 8001                  	dc.b	nF5, $06, nRst, $01
0008ACB4 E10C                       	smpsAlterNote       $0C
0008ACB6 E601                       	smpsAlterVol        $01
0008ACB8 BB0D                       	dc.b	nBb4, $0D
0008ACBA E106                       	smpsAlterNote       $06
0008ACBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACC0 E109                       	smpsAlterNote       $09
0008ACC2 E701                       	dc.b	smpsNoAttack, $01
0008ACC4 E10F                       	smpsAlterNote       $0F
0008ACC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACCA E109                       	smpsAlterNote       $09
0008ACCC E701                       	dc.b	smpsNoAttack, $01
0008ACCE E106                       	smpsAlterNote       $06
0008ACD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACD4 E10C                       	smpsAlterNote       $0C
0008ACD6 E701                       	dc.b	smpsNoAttack, $01
0008ACD8 E110                       	smpsAlterNote       $10
0008ACDA E701                       	dc.b	smpsNoAttack, $01
0008ACDC E10F                       	smpsAlterNote       $0F
0008ACDE E701                       	dc.b	smpsNoAttack, $01
0008ACE0 E109                       	smpsAlterNote       $09
0008ACE2 E701                       	dc.b	smpsNoAttack, $01
0008ACE4 E105                       	smpsAlterNote       $05
0008ACE6 E701                       	dc.b	smpsNoAttack, $01
0008ACE8 E106                       	smpsAlterNote       $06
0008ACEA 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008ACEE E103                       	smpsAlterNote       $03
0008ACF0 E701                       	dc.b	smpsNoAttack, $01
0008ACF2 E1FF                       	smpsAlterNote       $FF
0008ACF4 E701                       	dc.b	smpsNoAttack, $01
0008ACF6 E103                       	smpsAlterNote       $03
0008ACF8 E701                       	dc.b	smpsNoAttack, $01
0008ACFA E106                       	smpsAlterNote       $06
0008ACFC E701                       	dc.b	smpsNoAttack, $01
0008ACFE E10A                       	smpsAlterNote       $0A
0008AD00 E701                       	dc.b	smpsNoAttack, $01
0008AD02 E106                       	smpsAlterNote       $06
0008AD04 E701                       	dc.b	smpsNoAttack, $01
0008AD06 E100                       	smpsAlterNote       $00
0008AD08 E701                       	dc.b	smpsNoAttack, $01
0008AD0A E1FF                       	smpsAlterNote       $FF
0008AD0C E701                       	dc.b	smpsNoAttack, $01
0008AD0E E103                       	smpsAlterNote       $03
0008AD10 E701                       	dc.b	smpsNoAttack, $01
0008AD12 E109                       	smpsAlterNote       $09
0008AD14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD18 E106                       	smpsAlterNote       $06
0008AD1A E701                       	dc.b	smpsNoAttack, $01
0008AD1C E100                       	smpsAlterNote       $00
0008AD1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD22 E107                       	smpsAlterNote       $07
0008AD24 BF0E                       	dc.b	nD5, $0E
0008AD26 E101                       	smpsAlterNote       $01
0008AD28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD2C E107                       	smpsAlterNote       $07
0008AD2E E701                       	dc.b	smpsNoAttack, $01
0008AD30 E10A                       	smpsAlterNote       $0A
0008AD32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD36 E104                       	smpsAlterNote       $04
0008AD38 E701                       	dc.b	smpsNoAttack, $01
0008AD3A E100                       	smpsAlterNote       $00
0008AD3C E701                       	dc.b	smpsNoAttack, $01
0008AD3E E101                       	smpsAlterNote       $01
0008AD40 E701                       	dc.b	smpsNoAttack, $01
0008AD42 E107                       	smpsAlterNote       $07
0008AD44 E701                       	dc.b	smpsNoAttack, $01
0008AD46 E10B                       	smpsAlterNote       $0B
0008AD48 E701                       	dc.b	smpsNoAttack, $01
0008AD4A E107                       	smpsAlterNote       $07
0008AD4C E701                       	dc.b	smpsNoAttack, $01
0008AD4E E104                       	smpsAlterNote       $04
0008AD50 E701                       	dc.b	smpsNoAttack, $01
0008AD52 E100                       	smpsAlterNote       $00
0008AD54 E701                       	dc.b	smpsNoAttack, $01
0008AD56 E101                       	smpsAlterNote       $01
0008AD58 8001                       	dc.b	nRst, $01
0008AD5A E108                       	smpsAlterNote       $08
0008AD5C C10C                       	dc.b	nE5, $0C
0008AD5E E109                       	smpsAlterNote       $09
0008AD60 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008AD64 E10A                       	smpsAlterNote       $0A
0008AD66 8001                       	dc.b	nRst, $01
0008AD68 E109                       	smpsAlterNote       $09
0008AD6A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008AD6E E106                       	smpsAlterNote       $06
0008AD70 E701                       	dc.b	smpsNoAttack, $01
0008AD72 E102                       	smpsAlterNote       $02
0008AD74 E701                       	dc.b	smpsNoAttack, $01
0008AD76 E103                       	smpsAlterNote       $03
0008AD78 E701                       	dc.b	smpsNoAttack, $01
0008AD7A E109                       	smpsAlterNote       $09
0008AD7C E701                       	dc.b	smpsNoAttack, $01
0008AD7E E10D                       	smpsAlterNote       $0D
0008AD80 E701                       	dc.b	smpsNoAttack, $01
0008AD82 E109                       	smpsAlterNote       $09
0008AD84 E701                       	dc.b	smpsNoAttack, $01
0008AD86 E106                       	smpsAlterNote       $06
0008AD88 E701                       	dc.b	smpsNoAttack, $01
0008AD8A E102                       	smpsAlterNote       $02
0008AD8C E701                       	dc.b	smpsNoAttack, $01
0008AD8E E106                       	smpsAlterNote       $06
0008AD90 E701                       	dc.b	smpsNoAttack, $01
0008AD92 E10C                       	smpsAlterNote       $0C
0008AD94 E701                       	dc.b	smpsNoAttack, $01
0008AD96 E10D                       	smpsAlterNote       $0D
0008AD98 E701                       	dc.b	smpsNoAttack, $01
0008AD9A E109                       	smpsAlterNote       $09
0008AD9C C40D                       	dc.b	nG5, $0D
0008AD9E E106                       	smpsAlterNote       $06
0008ADA0 E701                       	dc.b	smpsNoAttack, $01
0008ADA2 E102                       	smpsAlterNote       $02
0008ADA4 E701                       	dc.b	smpsNoAttack, $01
0008ADA6 E103                       	smpsAlterNote       $03
0008ADA8 E701                       	dc.b	smpsNoAttack, $01
0008ADAA E109                       	smpsAlterNote       $09
0008ADAC E701                       	dc.b	smpsNoAttack, $01
0008ADAE E108                       	smpsAlterNote       $08
0008ADB0 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008ADBC E109                       	smpsAlterNote       $09
0008ADBE C20D                       	dc.b	nF5, $0D
0008ADC0 E106                       	smpsAlterNote       $06
0008ADC2 E701                       	dc.b	smpsNoAttack, $01
0008ADC4 E102                       	smpsAlterNote       $02
0008ADC6 E701                       	dc.b	smpsNoAttack, $01
0008ADC8 E106                       	smpsAlterNote       $06
0008ADCA E701                       	dc.b	smpsNoAttack, $01
0008ADCC E109                       	smpsAlterNote       $09
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 E10D                       	smpsAlterNote       $0D
0008ADD2 E701                       	dc.b	smpsNoAttack, $01
0008ADD4 E109                       	smpsAlterNote       $09
0008ADD6 E701                       	dc.b	smpsNoAttack, $01
0008ADD8 E103                       	smpsAlterNote       $03
0008ADDA E701                       	dc.b	smpsNoAttack, $01
0008ADDC E102                       	smpsAlterNote       $02
0008ADDE E701                       	dc.b	smpsNoAttack, $01
0008ADE0 E106                       	smpsAlterNote       $06
0008ADE2 E701                       	dc.b	smpsNoAttack, $01
0008ADE4 E10C                       	smpsAlterNote       $0C
0008ADE6 E701                       	dc.b	smpsNoAttack, $01
0008ADE8 E10D                       	smpsAlterNote       $0D
0008ADEA 8001                       	dc.b	nRst, $01
0008ADEC E112                       	smpsAlterNote       $12
0008ADEE C401                       	dc.b	nG5, $01
0008ADF0 E1EB                       	smpsAlterNote       $EB
0008ADF2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008ADF5 E1FD                       	smpsAlterNote       $FD
0008ADF7 E701                       	dc.b	smpsNoAttack, $01
0008ADF9 E10F                       	smpsAlterNote       $0F
0008ADFB E701                       	dc.b	smpsNoAttack, $01
0008ADFD E118                       	smpsAlterNote       $18
0008ADFF E701                       	dc.b	smpsNoAttack, $01
0008AE01 E1ED                       	smpsAlterNote       $ED
0008AE03 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008AE06 E1FF                       	smpsAlterNote       $FF
0008AE08 E701                       	dc.b	smpsNoAttack, $01
0008AE0A E10B                       	smpsAlterNote       $0B
0008AE0C E703                       	dc.b	smpsNoAttack, $03
0008AE0E E109                       	smpsAlterNote       $09
0008AE10 C407                       	dc.b	nG5, $07
0008AE12 E108                       	smpsAlterNote       $08
0008AE14 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008AE20 E109                       	smpsAlterNote       $09
0008AE22 C20D                       	dc.b	nF5, $0D
0008AE24 E103                       	smpsAlterNote       $03
0008AE26 E701                       	dc.b	smpsNoAttack, $01
0008AE28 E102                       	smpsAlterNote       $02
0008AE2A E701                       	dc.b	smpsNoAttack, $01
0008AE2C E106                       	smpsAlterNote       $06
0008AE2E E701                       	dc.b	smpsNoAttack, $01
0008AE30 E10C                       	smpsAlterNote       $0C
0008AE32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE36 E109                       	smpsAlterNote       $09
0008AE38 E701                       	dc.b	smpsNoAttack, $01
0008AE3A E103                       	smpsAlterNote       $03
0008AE3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE40 E109                       	smpsAlterNote       $09
0008AE42 E701                       	dc.b	smpsNoAttack, $01
0008AE44 E10C                       	smpsAlterNote       $0C
0008AE46 E701                       	dc.b	smpsNoAttack, $01
0008AE48 E10D                       	smpsAlterNote       $0D
0008AE4A 8001                       	dc.b	nRst, $01
0008AE4C E10B                       	smpsAlterNote       $0B
0008AE4E C609 8001                  	dc.b	nA5, $09, nRst, $01
0008AE52 E109                       	smpsAlterNote       $09
0008AE54 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008AE58 E108                       	smpsAlterNote       $08
0008AE5A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008AE66 8001                       	dc.b	nRst, $01
0008AE68 E109                       	smpsAlterNote       $09
0008AE6A C20D                       	dc.b	nF5, $0D
0008AE6C E103                       	smpsAlterNote       $03
0008AE6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE72 E106                       	smpsAlterNote       $06
0008AE74 E701                       	dc.b	smpsNoAttack, $01
0008AE76 E10C                       	smpsAlterNote       $0C
0008AE78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE7C E106                       	smpsAlterNote       $06
0008AE7E E701                       	dc.b	smpsNoAttack, $01
0008AE80 E103                       	smpsAlterNote       $03
0008AE82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE86 E109                       	smpsAlterNote       $09
0008AE88 E701                       	dc.b	smpsNoAttack, $01
0008AE8A E10D                       	smpsAlterNote       $0D
0008AE8C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AE92 E108                       	smpsAlterNote       $08
0008AE94 E6FF                       	smpsAlterVol        $FF
0008AE96 A806                       	dc.b	nEb3, $06
0008AE98 E10C                       	smpsAlterNote       $0C
0008AE9A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008AE9E E108                       	smpsAlterNote       $08
0008AEA0 A803                       	dc.b	nEb3, $03
0008AEA2 E109                       	smpsAlterNote       $09
0008AEA4 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008AEA8 E10C                       	smpsAlterNote       $0C
0008AEAA AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008AEB4 E109                       	smpsAlterNote       $09
0008AEB6 E602                       	smpsAlterVol        $02
0008AEB8 B604                       	dc.b	nF4, $04
0008AEBA E602                       	smpsAlterVol        $02
0008AEBC F6F1 AA                    	smpsJump            music84_Jump02
0008AEBF                            
0008AEBF                            ; FM4 Data
0008AEBF                            music84_FM4:
0008AEC1 E040                       	smpsPan             panRight, $00
0008AEC3 8003                       	dc.b	nRst, $03
0008AEC5 E10F                       	smpsAlterNote       $0F
0008AEC7 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008AECB E10D                       	smpsAlterNote       $0D
0008AECD C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008AED1 E10C                       	smpsAlterNote       $0C
0008AED3 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008AED9 E6FE                       	smpsAlterVol        $FE
0008AEDB E110                       	smpsAlterNote       $10
0008AEDD C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008AEE1 E10F                       	smpsAlterNote       $0F
0008AEE3 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008AEE7 E10D                       	smpsAlterNote       $0D
0008AEE9 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008AEF2 E10C                       	smpsAlterNote       $0C
0008AEF4 C103                       	dc.b	nE5, $03
0008AEF6 E10A                       	smpsAlterNote       $0A
0008AEF8 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008AEFE 03                         	dc.b	$03
0008AEFF                            
0008AEFF                            music84_Jump01:
0008AEFF E10B                       	smpsAlterNote       $0B
0008AF01 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AF05 E10C                       	smpsAlterNote       $0C
0008AF07 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008AF0B E10D                       	smpsAlterNote       $0D
0008AF0D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AF17 E10B                       	smpsAlterNote       $0B
0008AF19 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AF1D E107                       	smpsAlterNote       $07
0008AF1F E701                       	dc.b	smpsNoAttack, $01
0008AF21 E103                       	smpsAlterNote       $03
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E104                       	smpsAlterNote       $04
0008AF27 E701                       	dc.b	smpsNoAttack, $01
0008AF29 E10A                       	smpsAlterNote       $0A
0008AF2B E701                       	dc.b	smpsNoAttack, $01
0008AF2D E10E                       	smpsAlterNote       $0E
0008AF2F E701                       	dc.b	smpsNoAttack, $01
0008AF31 E10A                       	smpsAlterNote       $0A
0008AF33 E701                       	dc.b	smpsNoAttack, $01
0008AF35 E107                       	smpsAlterNote       $07
0008AF37 E701                       	dc.b	smpsNoAttack, $01
0008AF39 E104                       	smpsAlterNote       $04
0008AF3B 8001                       	dc.b	nRst, $01
0008AF3D E110                       	smpsAlterNote       $10
0008AF3F C703                       	dc.b	nBb5, $03
0008AF41 E10F                       	smpsAlterNote       $0F
0008AF43 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AF47 E10D                       	smpsAlterNote       $0D
0008AF49 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008AF4F E10C                       	smpsAlterNote       $0C
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E108                       	smpsAlterNote       $08
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E10C                       	smpsAlterNote       $0C
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E10F                       	smpsAlterNote       $0F
0008AF5D E701                       	dc.b	smpsNoAttack, $01
0008AF5F E113                       	smpsAlterNote       $13
0008AF61 E701                       	dc.b	smpsNoAttack, $01
0008AF63 E10F                       	smpsAlterNote       $0F
0008AF65 E701                       	dc.b	smpsNoAttack, $01
0008AF67 E109                       	smpsAlterNote       $09
0008AF69 E701                       	dc.b	smpsNoAttack, $01
0008AF6B E108                       	smpsAlterNote       $08
0008AF6D E701                       	dc.b	smpsNoAttack, $01
0008AF6F E10C                       	smpsAlterNote       $0C
0008AF71 E701                       	dc.b	smpsNoAttack, $01
0008AF73 E112                       	smpsAlterNote       $12
0008AF75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF79 E10C                       	smpsAlterNote       $0C
0008AF7B E701                       	dc.b	smpsNoAttack, $01
0008AF7D E109                       	smpsAlterNote       $09
0008AF7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF83 E10F                       	smpsAlterNote       $0F
0008AF85 E701                       	dc.b	smpsNoAttack, $01
0008AF87 E113                       	smpsAlterNote       $13
0008AF89 E701                       	dc.b	smpsNoAttack, $01
0008AF8B E112                       	smpsAlterNote       $12
0008AF8D E701                       	dc.b	smpsNoAttack, $01
0008AF8F E10C                       	smpsAlterNote       $0C
0008AF91 E701                       	dc.b	smpsNoAttack, $01
0008AF93 E108                       	smpsAlterNote       $08
0008AF95 E701                       	dc.b	smpsNoAttack, $01
0008AF97 E10C                       	smpsAlterNote       $0C
0008AF99 E701                       	dc.b	smpsNoAttack, $01
0008AF9B E10F                       	smpsAlterNote       $0F
0008AF9D E701                       	dc.b	smpsNoAttack, $01
0008AF9F E113                       	smpsAlterNote       $13
0008AFA1 E701                       	dc.b	smpsNoAttack, $01
0008AFA3 E10F                       	smpsAlterNote       $0F
0008AFA5 E701                       	dc.b	smpsNoAttack, $01
0008AFA7 E109                       	smpsAlterNote       $09
0008AFA9 E701                       	dc.b	smpsNoAttack, $01
0008AFAB E108                       	smpsAlterNote       $08
0008AFAD E701                       	dc.b	smpsNoAttack, $01
0008AFAF E10C                       	smpsAlterNote       $0C
0008AFB1 E701                       	dc.b	smpsNoAttack, $01
0008AFB3 E112                       	smpsAlterNote       $12
0008AFB5 E701                       	dc.b	smpsNoAttack, $01
0008AFB7 E113                       	smpsAlterNote       $13
0008AFB9 800F                       	dc.b	nRst, $0F
0008AFBB E10B                       	smpsAlterNote       $0B
0008AFBD BF03                       	dc.b	nD5, $03
0008AFBF E10C                       	smpsAlterNote       $0C
0008AFC1 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AFC5 E10D                       	smpsAlterNote       $0D
0008AFC7 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008AFCF E10B                       	smpsAlterNote       $0B
0008AFD1 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008AFDB E110                       	smpsAlterNote       $10
0008AFDD C704                       	dc.b	nBb5, $04
0008AFDF E10F                       	smpsAlterNote       $0F
0008AFE1 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AFE5 E10D                       	smpsAlterNote       $0D
0008AFE7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AFED E109                       	smpsAlterNote       $09
0008AFEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFF3 E10F                       	smpsAlterNote       $0F
0008AFF5 E701                       	dc.b	smpsNoAttack, $01
0008AFF7 E112                       	smpsAlterNote       $12
0008AFF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFFD E10C                       	smpsAlterNote       $0C
0008AFFF E701                       	dc.b	smpsNoAttack, $01
0008B001 E108                       	smpsAlterNote       $08
0008B003 E701                       	dc.b	smpsNoAttack, $01
0008B005 E109                       	smpsAlterNote       $09
0008B007 E701                       	dc.b	smpsNoAttack, $01
0008B009 E10F                       	smpsAlterNote       $0F
0008B00B E701                       	dc.b	smpsNoAttack, $01
0008B00D E113                       	smpsAlterNote       $13
0008B00F E701                       	dc.b	smpsNoAttack, $01
0008B011 E10F                       	smpsAlterNote       $0F
0008B013 E701                       	dc.b	smpsNoAttack, $01
0008B015 E10C                       	smpsAlterNote       $0C
0008B017 E701                       	dc.b	smpsNoAttack, $01
0008B019 E108                       	smpsAlterNote       $08
0008B01B E701                       	dc.b	smpsNoAttack, $01
0008B01D E10C                       	smpsAlterNote       $0C
0008B01F E701                       	dc.b	smpsNoAttack, $01
0008B021 E112                       	smpsAlterNote       $12
0008B023 E701                       	dc.b	smpsNoAttack, $01
0008B025 E113                       	smpsAlterNote       $13
0008B027 E701                       	dc.b	smpsNoAttack, $01
0008B029 E10F                       	smpsAlterNote       $0F
0008B02B E701                       	dc.b	smpsNoAttack, $01
0008B02D E109                       	smpsAlterNote       $09
0008B02F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B033 E10C                       	smpsAlterNote       $0C
0008B035 E701                       	dc.b	smpsNoAttack, $01
0008B037 E112                       	smpsAlterNote       $12
0008B039 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B03D E10C                       	smpsAlterNote       $0C
0008B03F E701                       	dc.b	smpsNoAttack, $01
0008B041 E109                       	smpsAlterNote       $09
0008B043 E701                       	dc.b	smpsNoAttack, $01
0008B045 E10D                       	smpsAlterNote       $0D
0008B047 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008B04B E10F                       	smpsAlterNote       $0F
0008B04D C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008B057 E10D                       	smpsAlterNote       $0D
0008B059 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B05F E10B                       	smpsAlterNote       $0B
0008B061 BF0D                       	dc.b	nD5, $0D
0008B063 E108                       	smpsAlterNote       $08
0008B065 E701                       	dc.b	smpsNoAttack, $01
0008B067 E104                       	smpsAlterNote       $04
0008B069 E701                       	dc.b	smpsNoAttack, $01
0008B06B E108                       	smpsAlterNote       $08
0008B06D E701                       	dc.b	smpsNoAttack, $01
0008B06F E10B                       	smpsAlterNote       $0B
0008B071 E701                       	dc.b	smpsNoAttack, $01
0008B073 E10F                       	smpsAlterNote       $0F
0008B075 E701                       	dc.b	smpsNoAttack, $01
0008B077 E10B                       	smpsAlterNote       $0B
0008B079 E701                       	dc.b	smpsNoAttack, $01
0008B07B E105                       	smpsAlterNote       $05
0008B07D E701                       	dc.b	smpsNoAttack, $01
0008B07F E104                       	smpsAlterNote       $04
0008B081 E701                       	dc.b	smpsNoAttack, $01
0008B083 E108                       	smpsAlterNote       $08
0008B085 E701                       	dc.b	smpsNoAttack, $01
0008B087 E10E                       	smpsAlterNote       $0E
0008B089 E701                       	dc.b	smpsNoAttack, $01
0008B08B E10F                       	smpsAlterNote       $0F
0008B08D 8001                       	dc.b	nRst, $01
0008B08F E10C                       	smpsAlterNote       $0C
0008B091 C101                       	dc.b	nE5, $01
0008B093 E10D                       	smpsAlterNote       $0D
0008B095 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008B09B E10F                       	smpsAlterNote       $0F
0008B09D C606 8001                  	dc.b	nA5, $06, nRst, $01
0008B0A1 E10C                       	smpsAlterNote       $0C
0008B0A3 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B0A7 E10D                       	smpsAlterNote       $0D
0008B0A9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B0AD E10C                       	smpsAlterNote       $0C
0008B0AF CD03                       	dc.b	nE6, $03
0008B0B1 E10A                       	smpsAlterNote       $0A
0008B0B3 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B0B7 E10D                       	smpsAlterNote       $0D
0008B0B9 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008B0C1 E109                       	smpsAlterNote       $09
0008B0C3 E701                       	dc.b	smpsNoAttack, $01
0008B0C5 E10D                       	smpsAlterNote       $0D
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E110                       	smpsAlterNote       $10
0008B0CB E701                       	dc.b	smpsNoAttack, $01
0008B0CD E114                       	smpsAlterNote       $14
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E110                       	smpsAlterNote       $10
0008B0D3 E701                       	dc.b	smpsNoAttack, $01
0008B0D5 E10A                       	smpsAlterNote       $0A
0008B0D7 E701                       	dc.b	smpsNoAttack, $01
0008B0D9 E109                       	smpsAlterNote       $09
0008B0DB E701                       	dc.b	smpsNoAttack, $01
0008B0DD E10D                       	smpsAlterNote       $0D
0008B0DF E701                       	dc.b	smpsNoAttack, $01
0008B0E1 E113                       	smpsAlterNote       $13
0008B0E3 E701                       	dc.b	smpsNoAttack, $01
0008B0E5 E114                       	smpsAlterNote       $14
0008B0E7 8001                       	dc.b	nRst, $01
0008B0E9 E10F                       	smpsAlterNote       $0F
0008B0EB C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008B0F1 E10C                       	smpsAlterNote       $0C
0008B0F3 E701                       	dc.b	smpsNoAttack, $01
0008B0F5 E108                       	smpsAlterNote       $08
0008B0F7 E701                       	dc.b	smpsNoAttack, $01
0008B0F9 E10C                       	smpsAlterNote       $0C
0008B0FB E701                       	dc.b	smpsNoAttack, $01
0008B0FD E112                       	smpsAlterNote       $12
0008B0FF E701                       	dc.b	smpsNoAttack, $01
0008B101 E113                       	smpsAlterNote       $13
0008B103 E701                       	dc.b	smpsNoAttack, $01
0008B105 E10F                       	smpsAlterNote       $0F
0008B107 E701                       	dc.b	smpsNoAttack, $01
0008B109 E109                       	smpsAlterNote       $09
0008B10B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10F E10C                       	smpsAlterNote       $0C
0008B111 E701                       	dc.b	smpsNoAttack, $01
0008B113 E112                       	smpsAlterNote       $12
0008B115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B119 E10C                       	smpsAlterNote       $0C
0008B11B E701                       	dc.b	smpsNoAttack, $01
0008B11D E109                       	smpsAlterNote       $09
0008B11F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B123 E10F                       	smpsAlterNote       $0F
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E113                       	smpsAlterNote       $13
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E112                       	smpsAlterNote       $12
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E10C                       	smpsAlterNote       $0C
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E108                       	smpsAlterNote       $08
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E10C                       	smpsAlterNote       $0C
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E10F                       	smpsAlterNote       $0F
0008B13D E701                       	dc.b	smpsNoAttack, $01
0008B13F E113                       	smpsAlterNote       $13
0008B141 E701                       	dc.b	smpsNoAttack, $01
0008B143 E10F                       	smpsAlterNote       $0F
0008B145 E701                       	dc.b	smpsNoAttack, $01
0008B147 E109                       	smpsAlterNote       $09
0008B149 E701                       	dc.b	smpsNoAttack, $01
0008B14B E108                       	smpsAlterNote       $08
0008B14D E701                       	dc.b	smpsNoAttack, $01
0008B14F E10C                       	smpsAlterNote       $0C
0008B151 E701                       	dc.b	smpsNoAttack, $01
0008B153 E112                       	smpsAlterNote       $12
0008B155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B159 E10F                       	smpsAlterNote       $0F
0008B15B E701                       	dc.b	smpsNoAttack, $01
0008B15D E109                       	smpsAlterNote       $09
0008B15F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B163 E10F                       	smpsAlterNote       $0F
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E113                       	smpsAlterNote       $13
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E112                       	smpsAlterNote       $12
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E10C                       	smpsAlterNote       $0C
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E108                       	smpsAlterNote       $08
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E10C                       	smpsAlterNote       $0C
0008B179 E701                       	dc.b	smpsNoAttack, $01
0008B17B E10F                       	smpsAlterNote       $0F
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E113                       	smpsAlterNote       $13
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E10F                       	smpsAlterNote       $0F
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E109                       	smpsAlterNote       $09
0008B189 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B18D E10F                       	smpsAlterNote       $0F
0008B18F C60D                       	dc.b	nA5, $0D
0008B191 E109                       	smpsAlterNote       $09
0008B193 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B197 E10C                       	smpsAlterNote       $0C
0008B199 E701                       	dc.b	smpsNoAttack, $01
0008B19B E112                       	smpsAlterNote       $12
0008B19D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1A1 E10C                       	smpsAlterNote       $0C
0008B1A3 E701                       	dc.b	smpsNoAttack, $01
0008B1A5 E109                       	smpsAlterNote       $09
0008B1A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1AB E10F                       	smpsAlterNote       $0F
0008B1AD E701                       	dc.b	smpsNoAttack, $01
0008B1AF E113                       	smpsAlterNote       $13
0008B1B1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B1B7 E10D                       	smpsAlterNote       $0D
0008B1B9 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008B1C1 E10C                       	smpsAlterNote       $0C
0008B1C3 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008B1C9 E6FF                       	smpsAlterVol        $FF
0008B1CB E10B                       	smpsAlterNote       $0B
0008B1CD BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B1D1 E10C                       	smpsAlterNote       $0C
0008B1D3 C103                       	dc.b	nE5, $03
0008B1D5 E10D                       	smpsAlterNote       $0D
0008B1D7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B1E1 E10B                       	smpsAlterNote       $0B
0008B1E3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008B1E7 E107                       	smpsAlterNote       $07
0008B1E9 E701                       	dc.b	smpsNoAttack, $01
0008B1EB E104                       	smpsAlterNote       $04
0008B1ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1F1 E10A                       	smpsAlterNote       $0A
0008B1F3 E701                       	dc.b	smpsNoAttack, $01
0008B1F5 E10D                       	smpsAlterNote       $0D
0008B1F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1FB E107                       	smpsAlterNote       $07
0008B1FD E701                       	dc.b	smpsNoAttack, $01
0008B1FF E104                       	smpsAlterNote       $04
0008B201 8001                       	dc.b	nRst, $01
0008B203 E110                       	smpsAlterNote       $10
0008B205 C703                       	dc.b	nBb5, $03
0008B207 E10F                       	smpsAlterNote       $0F
0008B209 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B20D E10D                       	smpsAlterNote       $0D
0008B20F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B213 E10C                       	smpsAlterNote       $0C
0008B215 E701                       	dc.b	smpsNoAttack, $01
0008B217 E108                       	smpsAlterNote       $08
0008B219 E701                       	dc.b	smpsNoAttack, $01
0008B21B E109                       	smpsAlterNote       $09
0008B21D E701                       	dc.b	smpsNoAttack, $01
0008B21F E10F                       	smpsAlterNote       $0F
0008B221 E701                       	dc.b	smpsNoAttack, $01
0008B223 E113                       	smpsAlterNote       $13
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E10F                       	smpsAlterNote       $0F
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E10C                       	smpsAlterNote       $0C
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E108                       	smpsAlterNote       $08
0008B231 E701                       	dc.b	smpsNoAttack, $01
0008B233 E10C                       	smpsAlterNote       $0C
0008B235 E701                       	dc.b	smpsNoAttack, $01
0008B237 E112                       	smpsAlterNote       $12
0008B239 E701                       	dc.b	smpsNoAttack, $01
0008B23B E113                       	smpsAlterNote       $13
0008B23D E701                       	dc.b	smpsNoAttack, $01
0008B23F E10F                       	smpsAlterNote       $0F
0008B241 E701                       	dc.b	smpsNoAttack, $01
0008B243 E109                       	smpsAlterNote       $09
0008B245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B249 E10C                       	smpsAlterNote       $0C
0008B24B E701                       	dc.b	smpsNoAttack, $01
0008B24D E112                       	smpsAlterNote       $12
0008B24F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B253 E10C                       	smpsAlterNote       $0C
0008B255 E701                       	dc.b	smpsNoAttack, $01
0008B257 E109                       	smpsAlterNote       $09
0008B259 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B25D E10F                       	smpsAlterNote       $0F
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E113                       	smpsAlterNote       $13
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E112                       	smpsAlterNote       $12
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E10C                       	smpsAlterNote       $0C
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E108                       	smpsAlterNote       $08
0008B26F E701                       	dc.b	smpsNoAttack, $01
0008B271 E10C                       	smpsAlterNote       $0C
0008B273 E701                       	dc.b	smpsNoAttack, $01
0008B275 E10F                       	smpsAlterNote       $0F
0008B277 E701                       	dc.b	smpsNoAttack, $01
0008B279 E113                       	smpsAlterNote       $13
0008B27B E701                       	dc.b	smpsNoAttack, $01
0008B27D E10F                       	smpsAlterNote       $0F
0008B27F BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008B283 E110                       	smpsAlterNote       $10
0008B285 BB03                       	dc.b	nBb4, $03
0008B287 E10F                       	smpsAlterNote       $0F
0008B289 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008B28D E10B                       	smpsAlterNote       $0B
0008B28F BF03                       	dc.b	nD5, $03
0008B291 E10C                       	smpsAlterNote       $0C
0008B293 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B297 E10D                       	smpsAlterNote       $0D
0008B299 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B2A3 E10B                       	smpsAlterNote       $0B
0008B2A5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B2B1 E110                       	smpsAlterNote       $10
0008B2B3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B2B7 E10F                       	smpsAlterNote       $0F
0008B2B9 C604                       	dc.b	nA5, $04
0008B2BB E10D                       	smpsAlterNote       $0D
0008B2BD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B2C3 E109                       	smpsAlterNote       $09
0008B2C5 E701                       	dc.b	smpsNoAttack, $01
0008B2C7 E108                       	smpsAlterNote       $08
0008B2C9 E701                       	dc.b	smpsNoAttack, $01
0008B2CB E10C                       	smpsAlterNote       $0C
0008B2CD E701                       	dc.b	smpsNoAttack, $01
0008B2CF E112                       	smpsAlterNote       $12
0008B2D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D5 E10F                       	smpsAlterNote       $0F
0008B2D7 E701                       	dc.b	smpsNoAttack, $01
0008B2D9 E109                       	smpsAlterNote       $09
0008B2DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2DF E10F                       	smpsAlterNote       $0F
0008B2E1 E701                       	dc.b	smpsNoAttack, $01
0008B2E3 E112                       	smpsAlterNote       $12
0008B2E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2E9 E10C                       	smpsAlterNote       $0C
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E108                       	smpsAlterNote       $08
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E109                       	smpsAlterNote       $09
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E10F                       	smpsAlterNote       $0F
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E113                       	smpsAlterNote       $13
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E10F                       	smpsAlterNote       $0F
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E10C                       	smpsAlterNote       $0C
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E108                       	smpsAlterNote       $08
0008B307 E701                       	dc.b	smpsNoAttack, $01
0008B309 E10C                       	smpsAlterNote       $0C
0008B30B E701                       	dc.b	smpsNoAttack, $01
0008B30D E112                       	smpsAlterNote       $12
0008B30F E701                       	dc.b	smpsNoAttack, $01
0008B311 E113                       	smpsAlterNote       $13
0008B313 E701                       	dc.b	smpsNoAttack, $01
0008B315 E10F                       	smpsAlterNote       $0F
0008B317 E701                       	dc.b	smpsNoAttack, $01
0008B319 E109                       	smpsAlterNote       $09
0008B31B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B31F E10C                       	smpsAlterNote       $0C
0008B321 E701                       	dc.b	smpsNoAttack, $01
0008B323 E112                       	smpsAlterNote       $12
0008B325 E701                       	dc.b	smpsNoAttack, $01
0008B327 E113                       	smpsAlterNote       $13
0008B329 8001                       	dc.b	nRst, $01
0008B32B E10F                       	smpsAlterNote       $0F
0008B32D C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008B339 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008B341 E10D                       	smpsAlterNote       $0D
0008B343 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B349 E10B                       	smpsAlterNote       $0B
0008B34B BF0D                       	dc.b	nD5, $0D
0008B34D E108                       	smpsAlterNote       $08
0008B34F E701                       	dc.b	smpsNoAttack, $01
0008B351 E104                       	smpsAlterNote       $04
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E105                       	smpsAlterNote       $05
0008B357 E701                       	dc.b	smpsNoAttack, $01
0008B359 E10B                       	smpsAlterNote       $0B
0008B35B E701                       	dc.b	smpsNoAttack, $01
0008B35D E10F                       	smpsAlterNote       $0F
0008B35F E701                       	dc.b	smpsNoAttack, $01
0008B361 E10B                       	smpsAlterNote       $0B
0008B363 E701                       	dc.b	smpsNoAttack, $01
0008B365 E108                       	smpsAlterNote       $08
0008B367 E701                       	dc.b	smpsNoAttack, $01
0008B369 E104                       	smpsAlterNote       $04
0008B36B E701                       	dc.b	smpsNoAttack, $01
0008B36D E108                       	smpsAlterNote       $08
0008B36F E701                       	dc.b	smpsNoAttack, $01
0008B371 E10E                       	smpsAlterNote       $0E
0008B373 E701                       	dc.b	smpsNoAttack, $01
0008B375 E10F                       	smpsAlterNote       $0F
0008B377 E701                       	dc.b	smpsNoAttack, $01
0008B379 E10C                       	smpsAlterNote       $0C
0008B37B C101                       	dc.b	nE5, $01
0008B37D E10D                       	smpsAlterNote       $0D
0008B37F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B387 E10F                       	smpsAlterNote       $0F
0008B389 C607                       	dc.b	nA5, $07
0008B38B E10C                       	smpsAlterNote       $0C
0008B38D CD07                       	dc.b	nE6, $07
0008B38F E10D                       	smpsAlterNote       $0D
0008B391 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B395 E10C                       	smpsAlterNote       $0C
0008B397 CD03                       	dc.b	nE6, $03
0008B399 E10A                       	smpsAlterNote       $0A
0008B39B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B39F E10D                       	smpsAlterNote       $0D
0008B3A1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B3A7 E10A                       	smpsAlterNote       $0A
0008B3A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3AD E110                       	smpsAlterNote       $10
0008B3AF E701                       	dc.b	smpsNoAttack, $01
0008B3B1 E114                       	smpsAlterNote       $14
0008B3B3 E701                       	dc.b	smpsNoAttack, $01
0008B3B5 E113                       	smpsAlterNote       $13
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E10D                       	smpsAlterNote       $0D
0008B3BB E701                       	dc.b	smpsNoAttack, $01
0008B3BD E109                       	smpsAlterNote       $09
0008B3BF E701                       	dc.b	smpsNoAttack, $01
0008B3C1 E10D                       	smpsAlterNote       $0D
0008B3C3 E701                       	dc.b	smpsNoAttack, $01
0008B3C5 E110                       	smpsAlterNote       $10
0008B3C7 E701                       	dc.b	smpsNoAttack, $01
0008B3C9 E114                       	smpsAlterNote       $14
0008B3CB E701                       	dc.b	smpsNoAttack, $01
0008B3CD E10F                       	smpsAlterNote       $0F
0008B3CF C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008B3D3 E10C                       	smpsAlterNote       $0C
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E108                       	smpsAlterNote       $08
0008B3D9 E701                       	dc.b	smpsNoAttack, $01
0008B3DB E10C                       	smpsAlterNote       $0C
0008B3DD E701                       	dc.b	smpsNoAttack, $01
0008B3DF E10F                       	smpsAlterNote       $0F
0008B3E1 E701                       	dc.b	smpsNoAttack, $01
0008B3E3 E113                       	smpsAlterNote       $13
0008B3E5 E701                       	dc.b	smpsNoAttack, $01
0008B3E7 E10F                       	smpsAlterNote       $0F
0008B3E9 E701                       	dc.b	smpsNoAttack, $01
0008B3EB E109                       	smpsAlterNote       $09
0008B3ED E701                       	dc.b	smpsNoAttack, $01
0008B3EF E108                       	smpsAlterNote       $08
0008B3F1 E701                       	dc.b	smpsNoAttack, $01
0008B3F3 E10C                       	smpsAlterNote       $0C
0008B3F5 E701                       	dc.b	smpsNoAttack, $01
0008B3F7 E112                       	smpsAlterNote       $12
0008B3F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3FD E10F                       	smpsAlterNote       $0F
0008B3FF E701                       	dc.b	smpsNoAttack, $01
0008B401 E109                       	smpsAlterNote       $09
0008B403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B407 E10F                       	smpsAlterNote       $0F
0008B409 E701                       	dc.b	smpsNoAttack, $01
0008B40B E112                       	smpsAlterNote       $12
0008B40D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B411 E10C                       	smpsAlterNote       $0C
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E108                       	smpsAlterNote       $08
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E109                       	smpsAlterNote       $09
0008B41B E701                       	dc.b	smpsNoAttack, $01
0008B41D E10F                       	smpsAlterNote       $0F
0008B41F E701                       	dc.b	smpsNoAttack, $01
0008B421 E113                       	smpsAlterNote       $13
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E10F                       	smpsAlterNote       $0F
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E10C                       	smpsAlterNote       $0C
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E108                       	smpsAlterNote       $08
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E10C                       	smpsAlterNote       $0C
0008B433 E701                       	dc.b	smpsNoAttack, $01
0008B435 E112                       	smpsAlterNote       $12
0008B437 E701                       	dc.b	smpsNoAttack, $01
0008B439 E113                       	smpsAlterNote       $13
0008B43B E701                       	dc.b	smpsNoAttack, $01
0008B43D E10F                       	smpsAlterNote       $0F
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E109                       	smpsAlterNote       $09
0008B443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B447 E10C                       	smpsAlterNote       $0C
0008B449 E701                       	dc.b	smpsNoAttack, $01
0008B44B E112                       	smpsAlterNote       $12
0008B44D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B451 E10C                       	smpsAlterNote       $0C
0008B453 E701                       	dc.b	smpsNoAttack, $01
0008B455 E109                       	smpsAlterNote       $09
0008B457 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B45B E10F                       	smpsAlterNote       $0F
0008B45D E701                       	dc.b	smpsNoAttack, $01
0008B45F E113                       	smpsAlterNote       $13
0008B461 E701                       	dc.b	smpsNoAttack, $01
0008B463 E112                       	smpsAlterNote       $12
0008B465 E701                       	dc.b	smpsNoAttack, $01
0008B467 E10C                       	smpsAlterNote       $0C
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E109                       	smpsAlterNote       $09
0008B46D 8001                       	dc.b	nRst, $01
0008B46F E10F                       	smpsAlterNote       $0F
0008B471 C60D                       	dc.b	nA5, $0D
0008B473 E10C                       	smpsAlterNote       $0C
0008B475 E701                       	dc.b	smpsNoAttack, $01
0008B477 E108                       	smpsAlterNote       $08
0008B479 E701                       	dc.b	smpsNoAttack, $01
0008B47B E10C                       	smpsAlterNote       $0C
0008B47D E701                       	dc.b	smpsNoAttack, $01
0008B47F E112                       	smpsAlterNote       $12
0008B481 E701                       	dc.b	smpsNoAttack, $01
0008B483 E113                       	smpsAlterNote       $13
0008B485 E701                       	dc.b	smpsNoAttack, $01
0008B487 E10F                       	smpsAlterNote       $0F
0008B489 E701                       	dc.b	smpsNoAttack, $01
0008B48B E109                       	smpsAlterNote       $09
0008B48D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B491 E10C                       	smpsAlterNote       $0C
0008B493 E701                       	dc.b	smpsNoAttack, $01
0008B495 E112                       	smpsAlterNote       $12
0008B497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B49B E10C                       	smpsAlterNote       $0C
0008B49D E701                       	dc.b	smpsNoAttack, $01
0008B49F E109                       	smpsAlterNote       $09
0008B4A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4A5 E10F                       	smpsAlterNote       $0F
0008B4A7 E701                       	dc.b	smpsNoAttack, $01
0008B4A9 E113                       	smpsAlterNote       $13
0008B4AB E701                       	dc.b	smpsNoAttack, $01
0008B4AD E112                       	smpsAlterNote       $12
0008B4AF E701                       	dc.b	smpsNoAttack, $01
0008B4B1 E10C                       	smpsAlterNote       $0C
0008B4B3 E701                       	dc.b	smpsNoAttack, $01
0008B4B5 E108                       	smpsAlterNote       $08
0008B4B7 E701                       	dc.b	smpsNoAttack, $01
0008B4B9 E10C                       	smpsAlterNote       $0C
0008B4BB E701                       	dc.b	smpsNoAttack, $01
0008B4BD E10F                       	smpsAlterNote       $0F
0008B4BF E701                       	dc.b	smpsNoAttack, $01
0008B4C1 E113                       	smpsAlterNote       $13
0008B4C3 E701                       	dc.b	smpsNoAttack, $01
0008B4C5 E10F                       	smpsAlterNote       $0F
0008B4C7 E701                       	dc.b	smpsNoAttack, $01
0008B4C9 E109                       	smpsAlterNote       $09
0008B4CB E701                       	dc.b	smpsNoAttack, $01
0008B4CD E108                       	smpsAlterNote       $08
0008B4CF E701                       	dc.b	smpsNoAttack, $01
0008B4D1 E10C                       	smpsAlterNote       $0C
0008B4D3 E701                       	dc.b	smpsNoAttack, $01
0008B4D5 E112                       	smpsAlterNote       $12
0008B4D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4DB E10F                       	smpsAlterNote       $0F
0008B4DD E701                       	dc.b	smpsNoAttack, $01
0008B4DF E109                       	smpsAlterNote       $09
0008B4E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4E5 E10F                       	smpsAlterNote       $0F
0008B4E7 E701                       	dc.b	smpsNoAttack, $01
0008B4E9 E112                       	smpsAlterNote       $12
0008B4EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4EF E10C                       	smpsAlterNote       $0C
0008B4F1 E701                       	dc.b	smpsNoAttack, $01
0008B4F3 E108                       	smpsAlterNote       $08
0008B4F5 E701                       	dc.b	smpsNoAttack, $01
0008B4F7 E10C                       	smpsAlterNote       $0C
0008B4F9 E701                       	dc.b	smpsNoAttack, $01
0008B4FB E10F                       	smpsAlterNote       $0F
0008B4FD E701                       	dc.b	smpsNoAttack, $01
0008B4FF E113                       	smpsAlterNote       $13
0008B501 E701                       	dc.b	smpsNoAttack, $01
0008B503 E10F                       	smpsAlterNote       $0F
0008B505 E701                       	dc.b	smpsNoAttack, $01
0008B507 E109                       	smpsAlterNote       $09
0008B509 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B50F E601                       	smpsAlterVol        $01
0008B511 E10F                       	smpsAlterNote       $0F
0008B513 C604                       	dc.b	nA5, $04
0008B515 E10D                       	smpsAlterNote       $0D
0008B517 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B51D E10B                       	smpsAlterNote       $0B
0008B51F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008B527 E10F                       	smpsAlterNote       $0F
0008B529 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B52D E10D                       	smpsAlterNote       $0D
0008B52F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B535 E10C                       	smpsAlterNote       $0C
0008B537 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008B53D E10A                       	smpsAlterNote       $0A
0008B53F C904 8001                  	dc.b	nC6, $04, nRst, $01
0008B543 E110                       	smpsAlterNote       $10
0008B545 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B549 E10F                       	smpsAlterNote       $0F
0008B54B C604                       	dc.b	nA5, $04
0008B54D E10D                       	smpsAlterNote       $0D
0008B54F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B55B E109                       	smpsAlterNote       $09
0008B55D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B561 E10F                       	smpsAlterNote       $0F
0008B563 E701                       	dc.b	smpsNoAttack, $01
0008B565 E112                       	smpsAlterNote       $12
0008B567 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B56B E10C                       	smpsAlterNote       $0C
0008B56D E701                       	dc.b	smpsNoAttack, $01
0008B56F E108                       	smpsAlterNote       $08
0008B571 E701                       	dc.b	smpsNoAttack, $01
0008B573 E10C                       	smpsAlterNote       $0C
0008B575 E701                       	dc.b	smpsNoAttack, $01
0008B577 E10F                       	smpsAlterNote       $0F
0008B579 E701                       	dc.b	smpsNoAttack, $01
0008B57B E113                       	smpsAlterNote       $13
0008B57D E701                       	dc.b	smpsNoAttack, $01
0008B57F E10D                       	smpsAlterNote       $0D
0008B581 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B587 E10C                       	smpsAlterNote       $0C
0008B589 C10D                       	dc.b	nE5, $0D
0008B58B E109                       	smpsAlterNote       $09
0008B58D E701                       	dc.b	smpsNoAttack, $01
0008B58F E105                       	smpsAlterNote       $05
0008B591 E701                       	dc.b	smpsNoAttack, $01
0008B593 E106                       	smpsAlterNote       $06
0008B595 E701                       	dc.b	smpsNoAttack, $01
0008B597 E10C                       	smpsAlterNote       $0C
0008B599 E701                       	dc.b	smpsNoAttack, $01
0008B59B E110                       	smpsAlterNote       $10
0008B59D E701                       	dc.b	smpsNoAttack, $01
0008B59F E10C                       	smpsAlterNote       $0C
0008B5A1 E701                       	dc.b	smpsNoAttack, $01
0008B5A3 E109                       	smpsAlterNote       $09
0008B5A5 E701                       	dc.b	smpsNoAttack, $01
0008B5A7 E105                       	smpsAlterNote       $05
0008B5A9 E701                       	dc.b	smpsNoAttack, $01
0008B5AB E109                       	smpsAlterNote       $09
0008B5AD E701                       	dc.b	smpsNoAttack, $01
0008B5AF E10F                       	smpsAlterNote       $0F
0008B5B1 E701                       	dc.b	smpsNoAttack, $01
0008B5B3 E110                       	smpsAlterNote       $10
0008B5B5 E701                       	dc.b	smpsNoAttack, $01
0008B5B7 E10C                       	smpsAlterNote       $0C
0008B5B9 E701                       	dc.b	smpsNoAttack, $01
0008B5BB E106                       	smpsAlterNote       $06
0008B5BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5C1 E109                       	smpsAlterNote       $09
0008B5C3 E701                       	dc.b	smpsNoAttack, $01
0008B5C5 E10F                       	smpsAlterNote       $0F
0008B5C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5CB E109                       	smpsAlterNote       $09
0008B5CD E701                       	dc.b	smpsNoAttack, $01
0008B5CF E106                       	smpsAlterNote       $06
0008B5D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5D5 E10C                       	smpsAlterNote       $0C
0008B5D7 E701                       	dc.b	smpsNoAttack, $01
0008B5D9 E110                       	smpsAlterNote       $10
0008B5DB E701                       	dc.b	smpsNoAttack, $01
0008B5DD E10F                       	smpsAlterNote       $0F
0008B5DF E701                       	dc.b	smpsNoAttack, $01
0008B5E1 E109                       	smpsAlterNote       $09
0008B5E3 E701                       	dc.b	smpsNoAttack, $01
0008B5E5 E105                       	smpsAlterNote       $05
0008B5E7 E701                       	dc.b	smpsNoAttack, $01
0008B5E9 E109                       	smpsAlterNote       $09
0008B5EB E701                       	dc.b	smpsNoAttack, $01
0008B5ED E10C                       	smpsAlterNote       $0C
0008B5EF E701                       	dc.b	smpsNoAttack, $01
0008B5F1 E110                       	smpsAlterNote       $10
0008B5F3 E701                       	dc.b	smpsNoAttack, $01
0008B5F5 E10C                       	smpsAlterNote       $0C
0008B5F7 E701                       	dc.b	smpsNoAttack, $01
0008B5F9 E106                       	smpsAlterNote       $06
0008B5FB E701                       	dc.b	smpsNoAttack, $01
0008B5FD E105                       	smpsAlterNote       $05
0008B5FF E701                       	dc.b	smpsNoAttack, $01
0008B601 E109                       	smpsAlterNote       $09
0008B603 E701                       	dc.b	smpsNoAttack, $01
0008B605 E10F                       	smpsAlterNote       $0F
0008B607 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B60B E10C                       	smpsAlterNote       $0C
0008B60D E701                       	dc.b	smpsNoAttack, $01
0008B60F E106                       	smpsAlterNote       $06
0008B611 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B615 E10C                       	smpsAlterNote       $0C
0008B617 E701                       	dc.b	smpsNoAttack, $01
0008B619 E10F                       	smpsAlterNote       $0F
0008B61B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B61F E109                       	smpsAlterNote       $09
0008B621 E701                       	dc.b	smpsNoAttack, $01
0008B623 E105                       	smpsAlterNote       $05
0008B625 E701                       	dc.b	smpsNoAttack, $01
0008B627 E106                       	smpsAlterNote       $06
0008B629 E701                       	dc.b	smpsNoAttack, $01
0008B62B E10C                       	smpsAlterNote       $0C
0008B62D E701                       	dc.b	smpsNoAttack, $01
0008B62F E110                       	smpsAlterNote       $10
0008B631 E701                       	dc.b	smpsNoAttack, $01
0008B633 E10C                       	smpsAlterNote       $0C
0008B635 E701                       	dc.b	smpsNoAttack, $01
0008B637 E109                       	smpsAlterNote       $09
0008B639 E701                       	dc.b	smpsNoAttack, $01
0008B63B E105                       	smpsAlterNote       $05
0008B63D E701                       	dc.b	smpsNoAttack, $01
0008B63F E109                       	smpsAlterNote       $09
0008B641 E701                       	dc.b	smpsNoAttack, $01
0008B643 E10F                       	smpsAlterNote       $0F
0008B645 E701                       	dc.b	smpsNoAttack, $01
0008B647 E110                       	smpsAlterNote       $10
0008B649 E701                       	dc.b	smpsNoAttack, $01
0008B64B E10C                       	smpsAlterNote       $0C
0008B64D E701                       	dc.b	smpsNoAttack, $01
0008B64F E106                       	smpsAlterNote       $06
0008B651 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B655 E109                       	smpsAlterNote       $09
0008B657 E701                       	dc.b	smpsNoAttack, $01
0008B659 E10F                       	smpsAlterNote       $0F
0008B65B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B65F E109                       	smpsAlterNote       $09
0008B661 E701                       	dc.b	smpsNoAttack, $01
0008B663 E106                       	smpsAlterNote       $06
0008B665 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B669 E10C                       	smpsAlterNote       $0C
0008B66B E701                       	dc.b	smpsNoAttack, $01
0008B66D E110                       	smpsAlterNote       $10
0008B66F E701                       	dc.b	smpsNoAttack, $01
0008B671 E10F                       	smpsAlterNote       $0F
0008B673 E701                       	dc.b	smpsNoAttack, $01
0008B675 E109                       	smpsAlterNote       $09
0008B677 E701                       	dc.b	smpsNoAttack, $01
0008B679 E105                       	smpsAlterNote       $05
0008B67B E701                       	dc.b	smpsNoAttack, $01
0008B67D E109                       	smpsAlterNote       $09
0008B67F E701                       	dc.b	smpsNoAttack, $01
0008B681 E10C                       	smpsAlterNote       $0C
0008B683 E701                       	dc.b	smpsNoAttack, $01
0008B685 E110                       	smpsAlterNote       $10
0008B687 E701                       	dc.b	smpsNoAttack, $01
0008B689 E10C                       	smpsAlterNote       $0C
0008B68B E701                       	dc.b	smpsNoAttack, $01
0008B68D E106                       	smpsAlterNote       $06
0008B68F E701                       	dc.b	smpsNoAttack, $01
0008B691 E105                       	smpsAlterNote       $05
0008B693 E701                       	dc.b	smpsNoAttack, $01
0008B695 E109                       	smpsAlterNote       $09
0008B697 E701                       	dc.b	smpsNoAttack, $01
0008B699 E10F                       	smpsAlterNote       $0F
0008B69B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B69F E109                       	smpsAlterNote       $09
0008B6A1 E701                       	dc.b	smpsNoAttack, $01
0008B6A3 E106                       	smpsAlterNote       $06
0008B6A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6A9 E10C                       	smpsAlterNote       $0C
0008B6AB E701                       	dc.b	smpsNoAttack, $01
0008B6AD E110                       	smpsAlterNote       $10
0008B6AF E701                       	dc.b	smpsNoAttack, $01
0008B6B1 E10F                       	smpsAlterNote       $0F
0008B6B3 E701                       	dc.b	smpsNoAttack, $01
0008B6B5 E109                       	smpsAlterNote       $09
0008B6B7 E701                       	dc.b	smpsNoAttack, $01
0008B6B9 E105                       	smpsAlterNote       $05
0008B6BB E701                       	dc.b	smpsNoAttack, $01
0008B6BD E109                       	smpsAlterNote       $09
0008B6BF E701                       	dc.b	smpsNoAttack, $01
0008B6C1 E10C                       	smpsAlterNote       $0C
0008B6C3 E701                       	dc.b	smpsNoAttack, $01
0008B6C5 E110                       	smpsAlterNote       $10
0008B6C7 E701                       	dc.b	smpsNoAttack, $01
0008B6C9 E10C                       	smpsAlterNote       $0C
0008B6CB E701                       	dc.b	smpsNoAttack, $01
0008B6CD E106                       	smpsAlterNote       $06
0008B6CF E701                       	dc.b	smpsNoAttack, $01
0008B6D1 E105                       	smpsAlterNote       $05
0008B6D3 E701                       	dc.b	smpsNoAttack, $01
0008B6D5 E109                       	smpsAlterNote       $09
0008B6D7 E701                       	dc.b	smpsNoAttack, $01
0008B6D9 E10F                       	smpsAlterNote       $0F
0008B6DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6DF E10C                       	smpsAlterNote       $0C
0008B6E1 E701                       	dc.b	smpsNoAttack, $01
0008B6E3 E106                       	smpsAlterNote       $06
0008B6E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6E9 E10C                       	smpsAlterNote       $0C
0008B6EB E701                       	dc.b	smpsNoAttack, $01
0008B6ED E10F                       	smpsAlterNote       $0F
0008B6EF E701                       	dc.b	smpsNoAttack, $01
0008B6F1 E110                       	smpsAlterNote       $10
0008B6F3 8001                       	dc.b	nRst, $01
0008B6F5 E10F                       	smpsAlterNote       $0F
0008B6F7 C604                       	dc.b	nA5, $04
0008B6F9 E10D                       	smpsAlterNote       $0D
0008B6FB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B701 E10B                       	smpsAlterNote       $0B
0008B703 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008B709 E10F                       	smpsAlterNote       $0F
0008B70B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B70F E10D                       	smpsAlterNote       $0D
0008B711 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B717 E10C                       	smpsAlterNote       $0C
0008B719 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008B71F E10A                       	smpsAlterNote       $0A
0008B721 C904                       	dc.b	nC6, $04
0008B723 E110                       	smpsAlterNote       $10
0008B725 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B729 E10F                       	smpsAlterNote       $0F
0008B72B C604                       	dc.b	nA5, $04
0008B72D E10D                       	smpsAlterNote       $0D
0008B72F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B73B E109                       	smpsAlterNote       $09
0008B73D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B741 E10F                       	smpsAlterNote       $0F
0008B743 E701                       	dc.b	smpsNoAttack, $01
0008B745 E112                       	smpsAlterNote       $12
0008B747 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B74B E10C                       	smpsAlterNote       $0C
0008B74D E701                       	dc.b	smpsNoAttack, $01
0008B74F E108                       	smpsAlterNote       $08
0008B751 E701                       	dc.b	smpsNoAttack, $01
0008B753 E109                       	smpsAlterNote       $09
0008B755 E701                       	dc.b	smpsNoAttack, $01
0008B757 E10F                       	smpsAlterNote       $0F
0008B759 E701                       	dc.b	smpsNoAttack, $01
0008B75B E113                       	smpsAlterNote       $13
0008B75D E701                       	dc.b	smpsNoAttack, $01
0008B75F E10D                       	smpsAlterNote       $0D
0008B761 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B767 E10C                       	smpsAlterNote       $0C
0008B769 C10D                       	dc.b	nE5, $0D
0008B76B E109                       	smpsAlterNote       $09
0008B76D E701                       	dc.b	smpsNoAttack, $01
0008B76F E106                       	smpsAlterNote       $06
0008B771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B775 E10C                       	smpsAlterNote       $0C
0008B777 E701                       	dc.b	smpsNoAttack, $01
0008B779 E110                       	smpsAlterNote       $10
0008B77B E701                       	dc.b	smpsNoAttack, $01
0008B77D E10F                       	smpsAlterNote       $0F
0008B77F E701                       	dc.b	smpsNoAttack, $01
0008B781 E109                       	smpsAlterNote       $09
0008B783 E701                       	dc.b	smpsNoAttack, $01
0008B785 E105                       	smpsAlterNote       $05
0008B787 E701                       	dc.b	smpsNoAttack, $01
0008B789 E109                       	smpsAlterNote       $09
0008B78B E701                       	dc.b	smpsNoAttack, $01
0008B78D E10C                       	smpsAlterNote       $0C
0008B78F E701                       	dc.b	smpsNoAttack, $01
0008B791 E110                       	smpsAlterNote       $10
0008B793 E701                       	dc.b	smpsNoAttack, $01
0008B795 E10C                       	smpsAlterNote       $0C
0008B797 E701                       	dc.b	smpsNoAttack, $01
0008B799 E106                       	smpsAlterNote       $06
0008B79B E701                       	dc.b	smpsNoAttack, $01
0008B79D E105                       	smpsAlterNote       $05
0008B79F E701                       	dc.b	smpsNoAttack, $01
0008B7A1 E109                       	smpsAlterNote       $09
0008B7A3 E701                       	dc.b	smpsNoAttack, $01
0008B7A5 E10F                       	smpsAlterNote       $0F
0008B7A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AB E10C                       	smpsAlterNote       $0C
0008B7AD E701                       	dc.b	smpsNoAttack, $01
0008B7AF E106                       	smpsAlterNote       $06
0008B7B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7B5 E10C                       	smpsAlterNote       $0C
0008B7B7 E701                       	dc.b	smpsNoAttack, $01
0008B7B9 E10F                       	smpsAlterNote       $0F
0008B7BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7BF E109                       	smpsAlterNote       $09
0008B7C1 E701                       	dc.b	smpsNoAttack, $01
0008B7C3 E105                       	smpsAlterNote       $05
0008B7C5 E701                       	dc.b	smpsNoAttack, $01
0008B7C7 E106                       	smpsAlterNote       $06
0008B7C9 E701                       	dc.b	smpsNoAttack, $01
0008B7CB E10C                       	smpsAlterNote       $0C
0008B7CD E701                       	dc.b	smpsNoAttack, $01
0008B7CF E110                       	smpsAlterNote       $10
0008B7D1 E701                       	dc.b	smpsNoAttack, $01
0008B7D3 E10C                       	smpsAlterNote       $0C
0008B7D5 E701                       	dc.b	smpsNoAttack, $01
0008B7D7 E109                       	smpsAlterNote       $09
0008B7D9 E701                       	dc.b	smpsNoAttack, $01
0008B7DB E105                       	smpsAlterNote       $05
0008B7DD E701                       	dc.b	smpsNoAttack, $01
0008B7DF E109                       	smpsAlterNote       $09
0008B7E1 E701                       	dc.b	smpsNoAttack, $01
0008B7E3 E10F                       	smpsAlterNote       $0F
0008B7E5 E701                       	dc.b	smpsNoAttack, $01
0008B7E7 E110                       	smpsAlterNote       $10
0008B7E9 E701                       	dc.b	smpsNoAttack, $01
0008B7EB E10C                       	smpsAlterNote       $0C
0008B7ED E701                       	dc.b	smpsNoAttack, $01
0008B7EF E106                       	smpsAlterNote       $06
0008B7F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7F5 E109                       	smpsAlterNote       $09
0008B7F7 E701                       	dc.b	smpsNoAttack, $01
0008B7F9 E10F                       	smpsAlterNote       $0F
0008B7FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7FF E109                       	smpsAlterNote       $09
0008B801 E701                       	dc.b	smpsNoAttack, $01
0008B803 E106                       	smpsAlterNote       $06
0008B805 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B809 E10C                       	smpsAlterNote       $0C
0008B80B E701                       	dc.b	smpsNoAttack, $01
0008B80D E110                       	smpsAlterNote       $10
0008B80F E701                       	dc.b	smpsNoAttack, $01
0008B811 E10F                       	smpsAlterNote       $0F
0008B813 E701                       	dc.b	smpsNoAttack, $01
0008B815 E109                       	smpsAlterNote       $09
0008B817 E701                       	dc.b	smpsNoAttack, $01
0008B819 E105                       	smpsAlterNote       $05
0008B81B E701                       	dc.b	smpsNoAttack, $01
0008B81D E109                       	smpsAlterNote       $09
0008B81F E701                       	dc.b	smpsNoAttack, $01
0008B821 E10F                       	smpsAlterNote       $0F
0008B823 E701                       	dc.b	smpsNoAttack, $01
0008B825 E110                       	smpsAlterNote       $10
0008B827 E701                       	dc.b	smpsNoAttack, $01
0008B829 E10C                       	smpsAlterNote       $0C
0008B82B E701                       	dc.b	smpsNoAttack, $01
0008B82D E106                       	smpsAlterNote       $06
0008B82F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B833 E109                       	smpsAlterNote       $09
0008B835 E701                       	dc.b	smpsNoAttack, $01
0008B837 E10F                       	smpsAlterNote       $0F
0008B839 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B83D E109                       	smpsAlterNote       $09
0008B83F E701                       	dc.b	smpsNoAttack, $01
0008B841 E106                       	smpsAlterNote       $06
0008B843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B847 E10C                       	smpsAlterNote       $0C
0008B849 E701                       	dc.b	smpsNoAttack, $01
0008B84B E110                       	smpsAlterNote       $10
0008B84D E701                       	dc.b	smpsNoAttack, $01
0008B84F E10F                       	smpsAlterNote       $0F
0008B851 E701                       	dc.b	smpsNoAttack, $01
0008B853 E109                       	smpsAlterNote       $09
0008B855 E701                       	dc.b	smpsNoAttack, $01
0008B857 E105                       	smpsAlterNote       $05
0008B859 E701                       	dc.b	smpsNoAttack, $01
0008B85B E109                       	smpsAlterNote       $09
0008B85D E701                       	dc.b	smpsNoAttack, $01
0008B85F E10C                       	smpsAlterNote       $0C
0008B861 E701                       	dc.b	smpsNoAttack, $01
0008B863 E110                       	smpsAlterNote       $10
0008B865 E701                       	dc.b	smpsNoAttack, $01
0008B867 E10C                       	smpsAlterNote       $0C
0008B869 E701                       	dc.b	smpsNoAttack, $01
0008B86B E106                       	smpsAlterNote       $06
0008B86D E701                       	dc.b	smpsNoAttack, $01
0008B86F E105                       	smpsAlterNote       $05
0008B871 E701                       	dc.b	smpsNoAttack, $01
0008B873 E109                       	smpsAlterNote       $09
0008B875 E701                       	dc.b	smpsNoAttack, $01
0008B877 E10F                       	smpsAlterNote       $0F
0008B879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B87D E10C                       	smpsAlterNote       $0C
0008B87F E701                       	dc.b	smpsNoAttack, $01
0008B881 E106                       	smpsAlterNote       $06
0008B883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B887 E10C                       	smpsAlterNote       $0C
0008B889 E701                       	dc.b	smpsNoAttack, $01
0008B88B E10F                       	smpsAlterNote       $0F
0008B88D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B891 E109                       	smpsAlterNote       $09
0008B893 E701                       	dc.b	smpsNoAttack, $01
0008B895 E105                       	smpsAlterNote       $05
0008B897 E701                       	dc.b	smpsNoAttack, $01
0008B899 E106                       	smpsAlterNote       $06
0008B89B E701                       	dc.b	smpsNoAttack, $01
0008B89D E10C                       	smpsAlterNote       $0C
0008B89F E701                       	dc.b	smpsNoAttack, $01
0008B8A1 E110                       	smpsAlterNote       $10
0008B8A3 E701                       	dc.b	smpsNoAttack, $01
0008B8A5 E10C                       	smpsAlterNote       $0C
0008B8A7 E701                       	dc.b	smpsNoAttack, $01
0008B8A9 E109                       	smpsAlterNote       $09
0008B8AB E701                       	dc.b	smpsNoAttack, $01
0008B8AD E105                       	smpsAlterNote       $05
0008B8AF E701                       	dc.b	smpsNoAttack, $01
0008B8B1 E109                       	smpsAlterNote       $09
0008B8B3 E701                       	dc.b	smpsNoAttack, $01
0008B8B5 E10F                       	smpsAlterNote       $0F
0008B8B7 E701                       	dc.b	smpsNoAttack, $01
0008B8B9 E110                       	smpsAlterNote       $10
0008B8BB E701                       	dc.b	smpsNoAttack, $01
0008B8BD E10C                       	smpsAlterNote       $0C
0008B8BF E701                       	dc.b	smpsNoAttack, $01
0008B8C1 E106                       	smpsAlterNote       $06
0008B8C3 E701                       	dc.b	smpsNoAttack, $01
0008B8C5 E10B                       	smpsAlterNote       $0B
0008B8C7 BF02                       	dc.b	nD5, $02
0008B8C9 E10C                       	smpsAlterNote       $0C
0008B8CB C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B8D1 E109                       	smpsAlterNote       $09
0008B8D3 E701                       	dc.b	smpsNoAttack, $01
0008B8D5 E105                       	smpsAlterNote       $05
0008B8D7 E701                       	dc.b	smpsNoAttack, $01
0008B8D9 E109                       	smpsAlterNote       $09
0008B8DB E701                       	dc.b	smpsNoAttack, $01
0008B8DD E10F                       	smpsAlterNote       $0F
0008B8DF E701                       	dc.b	smpsNoAttack, $01
0008B8E1 E110                       	smpsAlterNote       $10
0008B8E3 E701                       	dc.b	smpsNoAttack, $01
0008B8E5 E10C                       	smpsAlterNote       $0C
0008B8E7 E701                       	dc.b	smpsNoAttack, $01
0008B8E9 E106                       	smpsAlterNote       $06
0008B8EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8EF E109                       	smpsAlterNote       $09
0008B8F1 E701                       	dc.b	smpsNoAttack, $01
0008B8F3 E10F                       	smpsAlterNote       $0F
0008B8F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8F9 E109                       	smpsAlterNote       $09
0008B8FB E701                       	dc.b	smpsNoAttack, $01
0008B8FD E106                       	smpsAlterNote       $06
0008B8FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B903 E10C                       	smpsAlterNote       $0C
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E110                       	smpsAlterNote       $10
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E10F                       	smpsAlterNote       $0F
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E109                       	smpsAlterNote       $09
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E105                       	smpsAlterNote       $05
0008B915 E701                       	dc.b	smpsNoAttack, $01
0008B917 E109                       	smpsAlterNote       $09
0008B919 E701                       	dc.b	smpsNoAttack, $01
0008B91B E10C                       	smpsAlterNote       $0C
0008B91D E701                       	dc.b	smpsNoAttack, $01
0008B91F E110                       	smpsAlterNote       $10
0008B921 E701                       	dc.b	smpsNoAttack, $01
0008B923 E10C                       	smpsAlterNote       $0C
0008B925 E701                       	dc.b	smpsNoAttack, $01
0008B927 E106                       	smpsAlterNote       $06
0008B929 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B92D E10D                       	smpsAlterNote       $0D
0008B92F C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B937 E10C                       	smpsAlterNote       $0C
0008B939 C10D                       	dc.b	nE5, $0D
0008B93B E106                       	smpsAlterNote       $06
0008B93D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B941 E109                       	smpsAlterNote       $09
0008B943 E701                       	dc.b	smpsNoAttack, $01
0008B945 E10F                       	smpsAlterNote       $0F
0008B947 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B94B E109                       	smpsAlterNote       $09
0008B94D E701                       	dc.b	smpsNoAttack, $01
0008B94F E106                       	smpsAlterNote       $06
0008B951 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B955 E10C                       	smpsAlterNote       $0C
0008B957 E701                       	dc.b	smpsNoAttack, $01
0008B959 E110                       	smpsAlterNote       $10
0008B95B E701                       	dc.b	smpsNoAttack, $01
0008B95D E10F                       	smpsAlterNote       $0F
0008B95F E701                       	dc.b	smpsNoAttack, $01
0008B961 E109                       	smpsAlterNote       $09
0008B963 E701                       	dc.b	smpsNoAttack, $01
0008B965 E105                       	smpsAlterNote       $05
0008B967 E701                       	dc.b	smpsNoAttack, $01
0008B969 E106                       	smpsAlterNote       $06
0008B96B 800F                       	dc.b	nRst, $0F
0008B96F E6FF                       	smpsAlterVol        $FF
0008B971 E10F                       	smpsAlterNote       $0F
0008B973 BA01                       	dc.b	nA4, $01
0008B975 E110                       	smpsAlterNote       $10
0008B977 BB02                       	dc.b	nBb4, $02
0008B979 E10F                       	smpsAlterNote       $0F
0008B97B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B981 E10B                       	smpsAlterNote       $0B
0008B983 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B987 E10C                       	smpsAlterNote       $0C
0008B989 C103                       	dc.b	nE5, $03
0008B98B E10D                       	smpsAlterNote       $0D
0008B98D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B997 E10B                       	smpsAlterNote       $0B
0008B999 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B99D E104                       	smpsAlterNote       $04
0008B99F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9A3 E10A                       	smpsAlterNote       $0A
0008B9A5 E701                       	dc.b	smpsNoAttack, $01
0008B9A7 E10D                       	smpsAlterNote       $0D
0008B9A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9AD E107                       	smpsAlterNote       $07
0008B9AF E701                       	dc.b	smpsNoAttack, $01
0008B9B1 E104                       	smpsAlterNote       $04
0008B9B3 8001                       	dc.b	nRst, $01
0008B9B5 E110                       	smpsAlterNote       $10
0008B9B7 C703                       	dc.b	nBb5, $03
0008B9B9 E10F                       	smpsAlterNote       $0F
0008B9BB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B9BF E10D                       	smpsAlterNote       $0D
0008B9C1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B9C5 E10C                       	smpsAlterNote       $0C
0008B9C7 E701                       	dc.b	smpsNoAttack, $01
0008B9C9 E108                       	smpsAlterNote       $08
0008B9CB E701                       	dc.b	smpsNoAttack, $01
0008B9CD E109                       	smpsAlterNote       $09
0008B9CF E701                       	dc.b	smpsNoAttack, $01
0008B9D1 E10F                       	smpsAlterNote       $0F
0008B9D3 E701                       	dc.b	smpsNoAttack, $01
0008B9D5 E113                       	smpsAlterNote       $13
0008B9D7 E701                       	dc.b	smpsNoAttack, $01
0008B9D9 E10F                       	smpsAlterNote       $0F
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E10C                       	smpsAlterNote       $0C
0008B9DF E701                       	dc.b	smpsNoAttack, $01
0008B9E1 E108                       	smpsAlterNote       $08
0008B9E3 E701                       	dc.b	smpsNoAttack, $01
0008B9E5 E10C                       	smpsAlterNote       $0C
0008B9E7 E701                       	dc.b	smpsNoAttack, $01
0008B9E9 E112                       	smpsAlterNote       $12
0008B9EB E701                       	dc.b	smpsNoAttack, $01
0008B9ED E113                       	smpsAlterNote       $13
0008B9EF E701                       	dc.b	smpsNoAttack, $01
0008B9F1 E10F                       	smpsAlterNote       $0F
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E109                       	smpsAlterNote       $09
0008B9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9FB E10C                       	smpsAlterNote       $0C
0008B9FD E701                       	dc.b	smpsNoAttack, $01
0008B9FF E112                       	smpsAlterNote       $12
0008BA01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA05 E10C                       	smpsAlterNote       $0C
0008BA07 E701                       	dc.b	smpsNoAttack, $01
0008BA09 E109                       	smpsAlterNote       $09
0008BA0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA0F E10F                       	smpsAlterNote       $0F
0008BA11 E701                       	dc.b	smpsNoAttack, $01
0008BA13 E113                       	smpsAlterNote       $13
0008BA15 E701                       	dc.b	smpsNoAttack, $01
0008BA17 E112                       	smpsAlterNote       $12
0008BA19 E701                       	dc.b	smpsNoAttack, $01
0008BA1B E10C                       	smpsAlterNote       $0C
0008BA1D E701                       	dc.b	smpsNoAttack, $01
0008BA1F E108                       	smpsAlterNote       $08
0008BA21 E701                       	dc.b	smpsNoAttack, $01
0008BA23 E10C                       	smpsAlterNote       $0C
0008BA25 E701                       	dc.b	smpsNoAttack, $01
0008BA27 E10F                       	smpsAlterNote       $0F
0008BA29 E701                       	dc.b	smpsNoAttack, $01
0008BA2B E113                       	smpsAlterNote       $13
0008BA2D E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008BA31 E10B                       	smpsAlterNote       $0B
0008BA33 BF03                       	dc.b	nD5, $03
0008BA35 E10C                       	smpsAlterNote       $0C
0008BA37 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BA3B E10D                       	smpsAlterNote       $0D
0008BA3D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008BA47 E10B                       	smpsAlterNote       $0B
0008BA49 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008BA55 E110                       	smpsAlterNote       $10
0008BA57 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008BA5B E10F                       	smpsAlterNote       $0F
0008BA5D C604                       	dc.b	nA5, $04
0008BA5F E10D                       	smpsAlterNote       $0D
0008BA61 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008BA67 E109                       	smpsAlterNote       $09
0008BA69 E701                       	dc.b	smpsNoAttack, $01
0008BA6B E108                       	smpsAlterNote       $08
0008BA6D E701                       	dc.b	smpsNoAttack, $01
0008BA6F E10C                       	smpsAlterNote       $0C
0008BA71 E701                       	dc.b	smpsNoAttack, $01
0008BA73 E112                       	smpsAlterNote       $12
0008BA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA79 E10F                       	smpsAlterNote       $0F
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E109                       	smpsAlterNote       $09
0008BA7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA83 E10F                       	smpsAlterNote       $0F
0008BA85 E701                       	dc.b	smpsNoAttack, $01
0008BA87 E112                       	smpsAlterNote       $12
0008BA89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA8D E10C                       	smpsAlterNote       $0C
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E108                       	smpsAlterNote       $08
0008BA93 E701                       	dc.b	smpsNoAttack, $01
0008BA95 E109                       	smpsAlterNote       $09
0008BA97 E701                       	dc.b	smpsNoAttack, $01
0008BA99 E10F                       	smpsAlterNote       $0F
0008BA9B E701                       	dc.b	smpsNoAttack, $01
0008BA9D E113                       	smpsAlterNote       $13
0008BA9F E701                       	dc.b	smpsNoAttack, $01
0008BAA1 E10F                       	smpsAlterNote       $0F
0008BAA3 E701                       	dc.b	smpsNoAttack, $01
0008BAA5 E10C                       	smpsAlterNote       $0C
0008BAA7 E701                       	dc.b	smpsNoAttack, $01
0008BAA9 E108                       	smpsAlterNote       $08
0008BAAB E701                       	dc.b	smpsNoAttack, $01
0008BAAD E10C                       	smpsAlterNote       $0C
0008BAAF E701                       	dc.b	smpsNoAttack, $01
0008BAB1 E112                       	smpsAlterNote       $12
0008BAB3 E701                       	dc.b	smpsNoAttack, $01
0008BAB5 E113                       	smpsAlterNote       $13
0008BAB7 E701                       	dc.b	smpsNoAttack, $01
0008BAB9 E10F                       	smpsAlterNote       $0F
0008BABB E701                       	dc.b	smpsNoAttack, $01
0008BABD E109                       	smpsAlterNote       $09
0008BABF E701                       	dc.b	smpsNoAttack, $01
0008BAC1 E10D                       	smpsAlterNote       $0D
0008BAC3 C402                       	dc.b	nG5, $02
0008BAC5 E10F                       	smpsAlterNote       $0F
0008BAC7 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008BAD1 E10D                       	smpsAlterNote       $0D
0008BAD3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008BAD9 E10B                       	smpsAlterNote       $0B
0008BADB BF0D                       	dc.b	nD5, $0D
0008BADD E108                       	smpsAlterNote       $08
0008BADF E701                       	dc.b	smpsNoAttack, $01
0008BAE1 E104                       	smpsAlterNote       $04
0008BAE3 E701                       	dc.b	smpsNoAttack, $01
0008BAE5 E105                       	smpsAlterNote       $05
0008BAE7 E701                       	dc.b	smpsNoAttack, $01
0008BAE9 E10B                       	smpsAlterNote       $0B
0008BAEB E701                       	dc.b	smpsNoAttack, $01
0008BAED E10F                       	smpsAlterNote       $0F
0008BAEF E701                       	dc.b	smpsNoAttack, $01
0008BAF1 E10B                       	smpsAlterNote       $0B
0008BAF3 E701                       	dc.b	smpsNoAttack, $01
0008BAF5 E108                       	smpsAlterNote       $08
0008BAF7 E701                       	dc.b	smpsNoAttack, $01
0008BAF9 E104                       	smpsAlterNote       $04
0008BAFB E701                       	dc.b	smpsNoAttack, $01
0008BAFD E108                       	smpsAlterNote       $08
0008BAFF E701                       	dc.b	smpsNoAttack, $01
0008BB01 E10E                       	smpsAlterNote       $0E
0008BB03 E701                       	dc.b	smpsNoAttack, $01
0008BB05 E10F                       	smpsAlterNote       $0F
0008BB07 E701                       	dc.b	smpsNoAttack, $01
0008BB09 E10C                       	smpsAlterNote       $0C
0008BB0B C101                       	dc.b	nE5, $01
0008BB0D E10D                       	smpsAlterNote       $0D
0008BB0F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008BB17 E10F                       	smpsAlterNote       $0F
0008BB19 C607                       	dc.b	nA5, $07
0008BB1B E10C                       	smpsAlterNote       $0C
0008BB1D CD07                       	dc.b	nE6, $07
0008BB1F E10D                       	smpsAlterNote       $0D
0008BB21 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008BB25 E10C                       	smpsAlterNote       $0C
0008BB27 CD03                       	dc.b	nE6, $03
0008BB29 E10A                       	smpsAlterNote       $0A
0008BB2B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008BB2F E10D                       	smpsAlterNote       $0D
0008BB31 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008BB37 E10A                       	smpsAlterNote       $0A
0008BB39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB3D E110                       	smpsAlterNote       $10
0008BB3F E701                       	dc.b	smpsNoAttack, $01
0008BB41 E114                       	smpsAlterNote       $14
0008BB43 E701                       	dc.b	smpsNoAttack, $01
0008BB45 E113                       	smpsAlterNote       $13
0008BB47 E701                       	dc.b	smpsNoAttack, $01
0008BB49 E10D                       	smpsAlterNote       $0D
0008BB4B E701                       	dc.b	smpsNoAttack, $01
0008BB4D E109                       	smpsAlterNote       $09
0008BB4F E701                       	dc.b	smpsNoAttack, $01
0008BB51 E10D                       	smpsAlterNote       $0D
0008BB53 E701                       	dc.b	smpsNoAttack, $01
0008BB55 E110                       	smpsAlterNote       $10
0008BB57 E701                       	dc.b	smpsNoAttack, $01
0008BB59 E114                       	smpsAlterNote       $14
0008BB5B E701                       	dc.b	smpsNoAttack, $01
0008BB5D E10F                       	smpsAlterNote       $0F
0008BB5F C607                       	dc.b	nA5, $07
0008BB61 E10D                       	smpsAlterNote       $0D
0008BB63 C40D                       	dc.b	nG5, $0D
0008BB65 E10A                       	smpsAlterNote       $0A
0008BB67 E701                       	dc.b	smpsNoAttack, $01
0008BB69 E106                       	smpsAlterNote       $06
0008BB6B E701                       	dc.b	smpsNoAttack, $01
0008BB6D E10A                       	smpsAlterNote       $0A
0008BB6F E701                       	dc.b	smpsNoAttack, $01
0008BB71 E10D                       	smpsAlterNote       $0D
0008BB73 E701                       	dc.b	smpsNoAttack, $01
0008BB75 E111                       	smpsAlterNote       $11
0008BB77 E701                       	dc.b	smpsNoAttack, $01
0008BB79 E10D                       	smpsAlterNote       $0D
0008BB7B E701                       	dc.b	smpsNoAttack, $01
0008BB7D E107                       	smpsAlterNote       $07
0008BB7F E701                       	dc.b	smpsNoAttack, $01
0008BB81 E106                       	smpsAlterNote       $06
0008BB83 E701                       	dc.b	smpsNoAttack, $01
0008BB85 E10A                       	smpsAlterNote       $0A
0008BB87 E701                       	dc.b	smpsNoAttack, $01
0008BB89 E110                       	smpsAlterNote       $10
0008BB8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB8F E10D                       	smpsAlterNote       $0D
0008BB91 E701                       	dc.b	smpsNoAttack, $01
0008BB93 E107                       	smpsAlterNote       $07
0008BB95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB99 E10F                       	smpsAlterNote       $0F
0008BB9B C60E                       	dc.b	nA5, $0E
0008BB9D E109                       	smpsAlterNote       $09
0008BB9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBA3 E10F                       	smpsAlterNote       $0F
0008BBA5 E701                       	dc.b	smpsNoAttack, $01
0008BBA7 E112                       	smpsAlterNote       $12
0008BBA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBAD E10C                       	smpsAlterNote       $0C
0008BBAF E701                       	dc.b	smpsNoAttack, $01
0008BBB1 E108                       	smpsAlterNote       $08
0008BBB3 E701                       	dc.b	smpsNoAttack, $01
0008BBB5 E109                       	smpsAlterNote       $09
0008BBB7 E701                       	dc.b	smpsNoAttack, $01
0008BBB9 E10F                       	smpsAlterNote       $0F
0008BBBB E701                       	dc.b	smpsNoAttack, $01
0008BBBD E113                       	smpsAlterNote       $13
0008BBBF E701                       	dc.b	smpsNoAttack, $01
0008BBC1 E10F                       	smpsAlterNote       $0F
0008BBC3 E701                       	dc.b	smpsNoAttack, $01
0008BBC5 E10C                       	smpsAlterNote       $0C
0008BBC7 E701                       	dc.b	smpsNoAttack, $01
0008BBC9 E108                       	smpsAlterNote       $08
0008BBCB E701                       	dc.b	smpsNoAttack, $01
0008BBCD E109                       	smpsAlterNote       $09
0008BBCF 8001                       	dc.b	nRst, $01
0008BBD1 E110                       	smpsAlterNote       $10
0008BBD3 C70D                       	dc.b	nBb5, $0D
0008BBD5 E10D                       	smpsAlterNote       $0D
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E109                       	smpsAlterNote       $09
0008BBDB E701                       	dc.b	smpsNoAttack, $01
0008BBDD E10D                       	smpsAlterNote       $0D
0008BBDF E701                       	dc.b	smpsNoAttack, $01
0008BBE1 E113                       	smpsAlterNote       $13
0008BBE3 E701                       	dc.b	smpsNoAttack, $01
0008BBE5 E114                       	smpsAlterNote       $14
0008BBE7 E701                       	dc.b	smpsNoAttack, $01
0008BBE9 E110                       	smpsAlterNote       $10
0008BBEB E701                       	dc.b	smpsNoAttack, $01
0008BBED E10A                       	smpsAlterNote       $0A
0008BBEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBF3 E10D                       	smpsAlterNote       $0D
0008BBF5 E701                       	dc.b	smpsNoAttack, $01
0008BBF7 E113                       	smpsAlterNote       $13
0008BBF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBFD E10D                       	smpsAlterNote       $0D
0008BBFF E701                       	dc.b	smpsNoAttack, $01
0008BC01 E10A                       	smpsAlterNote       $0A
0008BC03 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008BC0D E10B                       	smpsAlterNote       $0B
0008BC0F 8001                       	dc.b	nRst, $01
0008BC11 E10C                       	smpsAlterNote       $0C
0008BC13 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008BC17 E10B                       	smpsAlterNote       $0B
0008BC19 CB0D                       	dc.b	nD6, $0D
0008BC1B E105                       	smpsAlterNote       $05
0008BC1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC21 E108                       	smpsAlterNote       $08
0008BC23 E701                       	dc.b	smpsNoAttack, $01
0008BC25 E10E                       	smpsAlterNote       $0E
0008BC27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC2B E108                       	smpsAlterNote       $08
0008BC2D E701                       	dc.b	smpsNoAttack, $01
0008BC2F E105                       	smpsAlterNote       $05
0008BC31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC35 E10B                       	smpsAlterNote       $0B
0008BC37 E701                       	dc.b	smpsNoAttack, $01
0008BC39 E10F                       	smpsAlterNote       $0F
0008BC3B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC3F E10C                       	smpsAlterNote       $0C
0008BC41 CC0D                       	dc.b	nEb6, $0D
0008BC43 E106                       	smpsAlterNote       $06
0008BC45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC49 E109                       	smpsAlterNote       $09
0008BC4B E701                       	dc.b	smpsNoAttack, $01
0008BC4D E10C                       	smpsAlterNote       $0C
0008BC4F 8001                       	dc.b	nRst, $01
0008BC51 E10A                       	smpsAlterNote       $0A
0008BC53 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008BC5F CB0E                       	dc.b	nD6, $0E
0008BC61 E105                       	smpsAlterNote       $05
0008BC63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC67 E10B                       	smpsAlterNote       $0B
0008BC69 E701                       	dc.b	smpsNoAttack, $01
0008BC6B E10E                       	smpsAlterNote       $0E
0008BC6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC71 E108                       	smpsAlterNote       $08
0008BC73 E701                       	dc.b	smpsNoAttack, $01
0008BC75 E104                       	smpsAlterNote       $04
0008BC77 E701                       	dc.b	smpsNoAttack, $01
0008BC79 E105                       	smpsAlterNote       $05
0008BC7B E701                       	dc.b	smpsNoAttack, $01
0008BC7D E10B                       	smpsAlterNote       $0B
0008BC7F E701                       	dc.b	smpsNoAttack, $01
0008BC81 E10F                       	smpsAlterNote       $0F
0008BC83 E701                       	dc.b	smpsNoAttack, $01
0008BC85 E10D                       	smpsAlterNote       $0D
0008BC87 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008BC8B E10C                       	smpsAlterNote       $0C
0008BC8D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008BC91 E10A                       	smpsAlterNote       $0A
0008BC93 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008BC9F CB0D                       	dc.b	nD6, $0D
0008BCA1 E108                       	smpsAlterNote       $08
0008BCA3 E701                       	dc.b	smpsNoAttack, $01
0008BCA5 E104                       	smpsAlterNote       $04
0008BCA7 E701                       	dc.b	smpsNoAttack, $01
0008BCA9 E105                       	smpsAlterNote       $05
0008BCAB E701                       	dc.b	smpsNoAttack, $01
0008BCAD E10B                       	smpsAlterNote       $0B
0008BCAF E701                       	dc.b	smpsNoAttack, $01
0008BCB1 E10F                       	smpsAlterNote       $0F
0008BCB3 E701                       	dc.b	smpsNoAttack, $01
0008BCB5 E10B                       	smpsAlterNote       $0B
0008BCB7 E701                       	dc.b	smpsNoAttack, $01
0008BCB9 E108                       	smpsAlterNote       $08
0008BCBB E701                       	dc.b	smpsNoAttack, $01
0008BCBD E104                       	smpsAlterNote       $04
0008BCBF E701                       	dc.b	smpsNoAttack, $01
0008BCC1 E108                       	smpsAlterNote       $08
0008BCC3 E701                       	dc.b	smpsNoAttack, $01
0008BCC5 E10E                       	smpsAlterNote       $0E
0008BCC7 E701                       	dc.b	smpsNoAttack, $01
0008BCC9 E10F                       	smpsAlterNote       $0F
0008BCCB E701                       	dc.b	smpsNoAttack, $01
0008BCCD E10C                       	smpsAlterNote       $0C
0008BCCF CC0D                       	dc.b	nEb6, $0D
0008BCD1 E109                       	smpsAlterNote       $09
0008BCD3 E701                       	dc.b	smpsNoAttack, $01
0008BCD5 E105                       	smpsAlterNote       $05
0008BCD7 E701                       	dc.b	smpsNoAttack, $01
0008BCD9 E106                       	smpsAlterNote       $06
0008BCDB E701                       	dc.b	smpsNoAttack, $01
0008BCDD E10C                       	smpsAlterNote       $0C
0008BCDF E701                       	dc.b	smpsNoAttack, $01
0008BCE1 E10A                       	smpsAlterNote       $0A
0008BCE3 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008BCEF CB0D                       	dc.b	nD6, $0D
0008BCF1 E108                       	smpsAlterNote       $08
0008BCF3 E701                       	dc.b	smpsNoAttack, $01
0008BCF5 E104                       	smpsAlterNote       $04
0008BCF7 E701                       	dc.b	smpsNoAttack, $01
0008BCF9 E108                       	smpsAlterNote       $08
0008BCFB E701                       	dc.b	smpsNoAttack, $01
0008BCFD E10B                       	smpsAlterNote       $0B
0008BCFF E701                       	dc.b	smpsNoAttack, $01
0008BD01 E10F                       	smpsAlterNote       $0F
0008BD03 E701                       	dc.b	smpsNoAttack, $01
0008BD05 E10B                       	smpsAlterNote       $0B
0008BD07 E701                       	dc.b	smpsNoAttack, $01
0008BD09 E105                       	smpsAlterNote       $05
0008BD0B E701                       	dc.b	smpsNoAttack, $01
0008BD0D E104                       	smpsAlterNote       $04
0008BD0F E701                       	dc.b	smpsNoAttack, $01
0008BD11 E108                       	smpsAlterNote       $08
0008BD13 E701                       	dc.b	smpsNoAttack, $01
0008BD15 E10E                       	smpsAlterNote       $0E
0008BD17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD1B E10B                       	smpsAlterNote       $0B
0008BD1D E701                       	dc.b	smpsNoAttack, $01
0008BD1F E105                       	smpsAlterNote       $05
0008BD21 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008BD29 03                         	dc.b	$03
0008BD2A E601                       	smpsAlterVol        $01
0008BD2C F6F1 D1                    	smpsJump            music84_Jump01
0008BD2F                            
0008BD2F                            ; FM5 Data
0008BD2F                            music84_FM5:
0008BD31 E080                       	smpsPan             panLeft, $00
0008BD33 8003                       	dc.b	nRst, $03
0008BD35 E10D                       	smpsAlterNote       $0D
0008BD37 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008BD3B E10C                       	smpsAlterNote       $0C
0008BD3D C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008BD41 E10F                       	smpsAlterNote       $0F
0008BD43 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008BD49 E6FE                       	smpsAlterVol        $FE
0008BD4B C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008BD51 E10D                       	smpsAlterNote       $0D
0008BD53 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008BD59 E10C                       	smpsAlterNote       $0C
0008BD5B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BD5F E10A                       	smpsAlterNote       $0A
0008BD61 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008BD67 03                         	dc.b	$03
0008BD68                            
0008BD68                            music84_Jump00:
0008BD68 8004                       	dc.b	nRst, $04
0008BD6A E602                       	smpsAlterVol        $02
0008BD6C E10D                       	smpsAlterNote       $0D
0008BD6E B60D                       	dc.b	nF4, $0D
0008BD70 E107                       	smpsAlterNote       $07
0008BD72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD76 E10A                       	smpsAlterNote       $0A
0008BD78 E701                       	dc.b	smpsNoAttack, $01
0008BD7A E110                       	smpsAlterNote       $10
0008BD7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD80 E10A                       	smpsAlterNote       $0A
0008BD82 E701                       	dc.b	smpsNoAttack, $01
0008BD84 E107                       	smpsAlterNote       $07
0008BD86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD8A E10D                       	smpsAlterNote       $0D
0008BD8C E701                       	dc.b	smpsNoAttack, $01
0008BD8E E111                       	smpsAlterNote       $11
0008BD90 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD94 E10D                       	smpsAlterNote       $0D
0008BD96 B80D                       	dc.b	nG4, $0D
0008BD98 E107                       	smpsAlterNote       $07
0008BD9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD9E E10A                       	smpsAlterNote       $0A
0008BDA0 E701                       	dc.b	smpsNoAttack, $01
0008BDA2 E110                       	smpsAlterNote       $10
0008BDA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDA8 E10A                       	smpsAlterNote       $0A
0008BDAA E701                       	dc.b	smpsNoAttack, $01
0008BDAC E107                       	smpsAlterNote       $07
0008BDAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDB2 E10D                       	smpsAlterNote       $0D
0008BDB4 E701                       	dc.b	smpsNoAttack, $01
0008BDB6 E111                       	smpsAlterNote       $11
0008BDB8 E701                       	dc.b	smpsNoAttack, $01
0008BDBA E110                       	smpsAlterNote       $10
0008BDBC E701                       	dc.b	smpsNoAttack, $01
0008BDBE E10A                       	smpsAlterNote       $0A
0008BDC0 E701                       	dc.b	smpsNoAttack, $01
0008BDC2 E106                       	smpsAlterNote       $06
0008BDC4 E701                       	dc.b	smpsNoAttack, $01
0008BDC6 E10A                       	smpsAlterNote       $0A
0008BDC8 E701                       	dc.b	smpsNoAttack, $01
0008BDCA E10D                       	smpsAlterNote       $0D
0008BDCC E701                       	dc.b	smpsNoAttack, $01
0008BDCE E111                       	smpsAlterNote       $11
0008BDD0 E701                       	dc.b	smpsNoAttack, $01
0008BDD2 E10D                       	smpsAlterNote       $0D
0008BDD4 E701                       	dc.b	smpsNoAttack, $01
0008BDD6 E10F                       	smpsAlterNote       $0F
0008BDD8 BA0E                       	dc.b	nA4, $0E
0008BDDA E109                       	smpsAlterNote       $09
0008BDDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDE0 E10F                       	smpsAlterNote       $0F
0008BDE2 E701                       	dc.b	smpsNoAttack, $01
0008BDE4 E112                       	smpsAlterNote       $12
0008BDE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDEA E10C                       	smpsAlterNote       $0C
0008BDEC E701                       	dc.b	smpsNoAttack, $01
0008BDEE E108                       	smpsAlterNote       $08
0008BDF0 E701                       	dc.b	smpsNoAttack, $01
0008BDF2 E109                       	smpsAlterNote       $09
0008BDF4 E701                       	dc.b	smpsNoAttack, $01
0008BDF6 E10F                       	smpsAlterNote       $0F
0008BDF8 E701                       	dc.b	smpsNoAttack, $01
0008BDFA E113                       	smpsAlterNote       $13
0008BDFC E701                       	dc.b	smpsNoAttack, $01
0008BDFE E10F                       	smpsAlterNote       $0F
0008BE00 E701                       	dc.b	smpsNoAttack, $01
0008BE02 E109                       	smpsAlterNote       $09
0008BE04 E701                       	dc.b	smpsNoAttack, $01
0008BE06 E108                       	smpsAlterNote       $08
0008BE08 E701                       	dc.b	smpsNoAttack, $01
0008BE0A E10C                       	smpsAlterNote       $0C
0008BE0C E701                       	dc.b	smpsNoAttack, $01
0008BE0E E112                       	smpsAlterNote       $12
0008BE10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE14 E10F                       	smpsAlterNote       $0F
0008BE16 E701                       	dc.b	smpsNoAttack, $01
0008BE18 E109                       	smpsAlterNote       $09
0008BE1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE1E E10F                       	smpsAlterNote       $0F
0008BE20 E701                       	dc.b	smpsNoAttack, $01
0008BE22 E112                       	smpsAlterNote       $12
0008BE24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE28 E10C                       	smpsAlterNote       $0C
0008BE2A E701                       	dc.b	smpsNoAttack, $01
0008BE2C E108                       	smpsAlterNote       $08
0008BE2E E701                       	dc.b	smpsNoAttack, $01
0008BE30 E109                       	smpsAlterNote       $09
0008BE32 E701                       	dc.b	smpsNoAttack, $01
0008BE34 E10F                       	smpsAlterNote       $0F
0008BE36 E701                       	dc.b	smpsNoAttack, $01
0008BE38 E113                       	smpsAlterNote       $13
0008BE3A E701                       	dc.b	smpsNoAttack, $01
0008BE3C E10F                       	smpsAlterNote       $0F
0008BE3E E701                       	dc.b	smpsNoAttack, $01
0008BE40 E10C                       	smpsAlterNote       $0C
0008BE42 E701                       	dc.b	smpsNoAttack, $01
0008BE44 E108                       	smpsAlterNote       $08
0008BE46 E701                       	dc.b	smpsNoAttack, $01
0008BE48 E109                       	smpsAlterNote       $09
0008BE4A 8001                       	dc.b	nRst, $01
0008BE4C E10C                       	smpsAlterNote       $0C
0008BE4E B50A                       	dc.b	nE4, $0A
0008BE50 E10D                       	smpsAlterNote       $0D
0008BE52 B60D                       	dc.b	nF4, $0D
0008BE54 E10A                       	smpsAlterNote       $0A
0008BE56 E701                       	dc.b	smpsNoAttack, $01
0008BE58 E106                       	smpsAlterNote       $06
0008BE5A E701                       	dc.b	smpsNoAttack, $01
0008BE5C E107                       	smpsAlterNote       $07
0008BE5E E701                       	dc.b	smpsNoAttack, $01
0008BE60 E10D                       	smpsAlterNote       $0D
0008BE62 E701                       	dc.b	smpsNoAttack, $01
0008BE64 E111                       	smpsAlterNote       $11
0008BE66 E701                       	dc.b	smpsNoAttack, $01
0008BE68 E10D                       	smpsAlterNote       $0D
0008BE6A E701                       	dc.b	smpsNoAttack, $01
0008BE6C E10A                       	smpsAlterNote       $0A
0008BE6E E701                       	dc.b	smpsNoAttack, $01
0008BE70 E106                       	smpsAlterNote       $06
0008BE72 E701                       	dc.b	smpsNoAttack, $01
0008BE74 E10A                       	smpsAlterNote       $0A
0008BE76 E701                       	dc.b	smpsNoAttack, $01
0008BE78 E110                       	smpsAlterNote       $10
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C E111                       	smpsAlterNote       $11
0008BE7E E701                       	dc.b	smpsNoAttack, $01
0008BE80 E10D                       	smpsAlterNote       $0D
0008BE82 B80D                       	dc.b	nG4, $0D
0008BE84 E10A                       	smpsAlterNote       $0A
0008BE86 E701                       	dc.b	smpsNoAttack, $01
0008BE88 E106                       	smpsAlterNote       $06
0008BE8A E701                       	dc.b	smpsNoAttack, $01
0008BE8C E107                       	smpsAlterNote       $07
0008BE8E E701                       	dc.b	smpsNoAttack, $01
0008BE90 E10D                       	smpsAlterNote       $0D
0008BE92 E701                       	dc.b	smpsNoAttack, $01
0008BE94 E111                       	smpsAlterNote       $11
0008BE96 E701                       	dc.b	smpsNoAttack, $01
0008BE98 E10D                       	smpsAlterNote       $0D
0008BE9A E701                       	dc.b	smpsNoAttack, $01
0008BE9C E10A                       	smpsAlterNote       $0A
0008BE9E E701                       	dc.b	smpsNoAttack, $01
0008BEA0 E106                       	smpsAlterNote       $06
0008BEA2 E701                       	dc.b	smpsNoAttack, $01
0008BEA4 E10A                       	smpsAlterNote       $0A
0008BEA6 E701                       	dc.b	smpsNoAttack, $01
0008BEA8 E110                       	smpsAlterNote       $10
0008BEAA E701                       	dc.b	smpsNoAttack, $01
0008BEAC E111                       	smpsAlterNote       $11
0008BEAE E701                       	dc.b	smpsNoAttack, $01
0008BEB0 E10D                       	smpsAlterNote       $0D
0008BEB2 E701                       	dc.b	smpsNoAttack, $01
0008BEB4 E107                       	smpsAlterNote       $07
0008BEB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEBA E10A                       	smpsAlterNote       $0A
0008BEBC E701                       	dc.b	smpsNoAttack, $01
0008BEBE E110                       	smpsAlterNote       $10
0008BEC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEC4 E10D                       	smpsAlterNote       $0D
0008BEC6 8001                       	dc.b	nRst, $01
0008BEC8 E10F                       	smpsAlterNote       $0F
0008BECA BA0D                       	dc.b	nA4, $0D
0008BECC E10C                       	smpsAlterNote       $0C
0008BECE E701                       	dc.b	smpsNoAttack, $01
0008BED0 E108                       	smpsAlterNote       $08
0008BED2 E701                       	dc.b	smpsNoAttack, $01
0008BED4 E10C                       	smpsAlterNote       $0C
0008BED6 E701                       	dc.b	smpsNoAttack, $01
0008BED8 E112                       	smpsAlterNote       $12
0008BEDA E701                       	dc.b	smpsNoAttack, $01
0008BEDC E113                       	smpsAlterNote       $13
0008BEDE E701                       	dc.b	smpsNoAttack, $01
0008BEE0 E10F                       	smpsAlterNote       $0F
0008BEE2 E701                       	dc.b	smpsNoAttack, $01
0008BEE4 E109                       	smpsAlterNote       $09
0008BEE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEEA E10C                       	smpsAlterNote       $0C
0008BEEC E701                       	dc.b	smpsNoAttack, $01
0008BEEE E112                       	smpsAlterNote       $12
0008BEF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEF4 E10C                       	smpsAlterNote       $0C
0008BEF6 E701                       	dc.b	smpsNoAttack, $01
0008BEF8 E109                       	smpsAlterNote       $09
0008BEFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEFE E10F                       	smpsAlterNote       $0F
0008BF00 E701                       	dc.b	smpsNoAttack, $01
0008BF02 E113                       	smpsAlterNote       $13
0008BF04 E701                       	dc.b	smpsNoAttack, $01
0008BF06 E112                       	smpsAlterNote       $12
0008BF08 E701                       	dc.b	smpsNoAttack, $01
0008BF0A E10C                       	smpsAlterNote       $0C
0008BF0C E701                       	dc.b	smpsNoAttack, $01
0008BF0E E108                       	smpsAlterNote       $08
0008BF10 E701                       	dc.b	smpsNoAttack, $01
0008BF12 E10C                       	smpsAlterNote       $0C
0008BF14 E701                       	dc.b	smpsNoAttack, $01
0008BF16 E10F                       	smpsAlterNote       $0F
0008BF18 E701                       	dc.b	smpsNoAttack, $01
0008BF1A E113                       	smpsAlterNote       $13
0008BF1C E701                       	dc.b	smpsNoAttack, $01
0008BF1E E10F                       	smpsAlterNote       $0F
0008BF20 E701                       	dc.b	smpsNoAttack, $01
0008BF22 E109                       	smpsAlterNote       $09
0008BF24 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BF28 E10D                       	smpsAlterNote       $0D
0008BF2A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008BF2E E10C                       	smpsAlterNote       $0C
0008BF30 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BF34 E10B                       	smpsAlterNote       $0B
0008BF36 B30D                       	dc.b	nD4, $0D
0008BF38 E10C                       	smpsAlterNote       $0C
0008BF3A B503 8001                  	dc.b	nE4, $03, nRst, $01
0008BF3E E10D                       	smpsAlterNote       $0D
0008BF40 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008BF48 E109                       	smpsAlterNote       $09
0008BF4A E701                       	dc.b	smpsNoAttack, $01
0008BF4C E108                       	smpsAlterNote       $08
0008BF4E E701                       	dc.b	smpsNoAttack, $01
0008BF50 E10C                       	smpsAlterNote       $0C
0008BF52 E701                       	dc.b	smpsNoAttack, $01
0008BF54 E112                       	smpsAlterNote       $12
0008BF56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF5A E10F                       	smpsAlterNote       $0F
0008BF5C E701                       	dc.b	smpsNoAttack, $01
0008BF5E E109                       	smpsAlterNote       $09
0008BF60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF64 E10F                       	smpsAlterNote       $0F
0008BF66 E701                       	dc.b	smpsNoAttack, $01
0008BF68 E112                       	smpsAlterNote       $12
0008BF6A E701                       	dc.b	smpsNoAttack, $01
0008BF6C E113                       	smpsAlterNote       $13
0008BF6E 8001                       	dc.b	nRst, $01
0008BF70 E10D                       	smpsAlterNote       $0D
0008BF72 C20D                       	dc.b	nF5, $0D
0008BF74 E107                       	smpsAlterNote       $07
0008BF76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF7A E10A                       	smpsAlterNote       $0A
0008BF7C E701                       	dc.b	smpsNoAttack, $01
0008BF7E E110                       	smpsAlterNote       $10
0008BF80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF84 E10A                       	smpsAlterNote       $0A
0008BF86 E701                       	dc.b	smpsNoAttack, $01
0008BF88 E107                       	smpsAlterNote       $07
0008BF8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF8E E10D                       	smpsAlterNote       $0D
0008BF90 E701                       	dc.b	smpsNoAttack, $01
0008BF92 E111                       	smpsAlterNote       $11
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E110                       	smpsAlterNote       $10
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A E10A                       	smpsAlterNote       $0A
0008BF9C E701                       	dc.b	smpsNoAttack, $01
0008BF9E E106                       	smpsAlterNote       $06
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA2 E10A                       	smpsAlterNote       $0A
0008BFA4 E701                       	dc.b	smpsNoAttack, $01
0008BFA6 E10D                       	smpsAlterNote       $0D
0008BFA8 E701                       	dc.b	smpsNoAttack, $01
0008BFAA E111                       	smpsAlterNote       $11
0008BFAC E701                       	dc.b	smpsNoAttack, $01
0008BFAE E10D                       	smpsAlterNote       $0D
0008BFB0 E701                       	dc.b	smpsNoAttack, $01
0008BFB2 E107                       	smpsAlterNote       $07
0008BFB4 E701                       	dc.b	smpsNoAttack, $01
0008BFB6 E106                       	smpsAlterNote       $06
0008BFB8 E701                       	dc.b	smpsNoAttack, $01
0008BFBA E10A                       	smpsAlterNote       $0A
0008BFBC E701                       	dc.b	smpsNoAttack, $01
0008BFBE E110                       	smpsAlterNote       $10
0008BFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFC4 E10D                       	smpsAlterNote       $0D
0008BFC6 E701                       	dc.b	smpsNoAttack, $01
0008BFC8 E107                       	smpsAlterNote       $07
0008BFCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFCE E10D                       	smpsAlterNote       $0D
0008BFD0 E701                       	dc.b	smpsNoAttack, $01
0008BFD2 E110                       	smpsAlterNote       $10
0008BFD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFD8 E10A                       	smpsAlterNote       $0A
0008BFDA E701                       	dc.b	smpsNoAttack, $01
0008BFDC E106                       	smpsAlterNote       $06
0008BFDE E701                       	dc.b	smpsNoAttack, $01
0008BFE0 E107                       	smpsAlterNote       $07
0008BFE2 E701                       	dc.b	smpsNoAttack, $01
0008BFE4 E10D                       	smpsAlterNote       $0D
0008BFE6 E701                       	dc.b	smpsNoAttack, $01
0008BFE8 E111                       	smpsAlterNote       $11
0008BFEA E701                       	dc.b	smpsNoAttack, $01
0008BFEC E10D                       	smpsAlterNote       $0D
0008BFEE E701                       	dc.b	smpsNoAttack, $01
0008BFF0 E10A                       	smpsAlterNote       $0A
0008BFF2 E701                       	dc.b	smpsNoAttack, $01
0008BFF4 E106                       	smpsAlterNote       $06
0008BFF6 E701                       	dc.b	smpsNoAttack, $01
0008BFF8 E10A                       	smpsAlterNote       $0A
0008BFFA E701                       	dc.b	smpsNoAttack, $01
0008BFFC E110                       	smpsAlterNote       $10
0008BFFE E701                       	dc.b	smpsNoAttack, $01
0008C000 E111                       	smpsAlterNote       $11
0008C002 E701                       	dc.b	smpsNoAttack, $01
0008C004 E10D                       	smpsAlterNote       $0D
0008C006 E701                       	dc.b	smpsNoAttack, $01
0008C008 E107                       	smpsAlterNote       $07
0008C00A E701                       	dc.b	smpsNoAttack, $01
0008C00C E10D                       	smpsAlterNote       $0D
0008C00E C207                       	dc.b	nF5, $07
0008C010 E10C                       	smpsAlterNote       $0C
0008C012 C10D                       	dc.b	nE5, $0D
0008C014 E109                       	smpsAlterNote       $09
0008C016 E701                       	dc.b	smpsNoAttack, $01
0008C018 E106                       	smpsAlterNote       $06
0008C01A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C01E E10C                       	smpsAlterNote       $0C
0008C020 E701                       	dc.b	smpsNoAttack, $01
0008C022 E110                       	smpsAlterNote       $10
0008C024 E701                       	dc.b	smpsNoAttack, $01
0008C026 E10F                       	smpsAlterNote       $0F
0008C028 E701                       	dc.b	smpsNoAttack, $01
0008C02A E109                       	smpsAlterNote       $09
0008C02C E701                       	dc.b	smpsNoAttack, $01
0008C02E E105                       	smpsAlterNote       $05
0008C030 E701                       	dc.b	smpsNoAttack, $01
0008C032 E109                       	smpsAlterNote       $09
0008C034 E701                       	dc.b	smpsNoAttack, $01
0008C036 E10C                       	smpsAlterNote       $0C
0008C038 E701                       	dc.b	smpsNoAttack, $01
0008C03A E110                       	smpsAlterNote       $10
0008C03C E701                       	dc.b	smpsNoAttack, $01
0008C03E E10B                       	smpsAlterNote       $0B
0008C040 BF0D                       	dc.b	nD5, $0D
0008C042 E108                       	smpsAlterNote       $08
0008C044 E701                       	dc.b	smpsNoAttack, $01
0008C046 E105                       	smpsAlterNote       $05
0008C048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C04C E10B                       	smpsAlterNote       $0B
0008C04E E701                       	dc.b	smpsNoAttack, $01
0008C050 E10F                       	smpsAlterNote       $0F
0008C052 E701                       	dc.b	smpsNoAttack, $01
0008C054 E10E                       	smpsAlterNote       $0E
0008C056 E701                       	dc.b	smpsNoAttack, $01
0008C058 E108                       	smpsAlterNote       $08
0008C05A E701                       	dc.b	smpsNoAttack, $01
0008C05C E104                       	smpsAlterNote       $04
0008C05E E701                       	dc.b	smpsNoAttack, $01
0008C060 E108                       	smpsAlterNote       $08
0008C062 E701                       	dc.b	smpsNoAttack, $01
0008C064 E10E                       	smpsAlterNote       $0E
0008C066 E701                       	dc.b	smpsNoAttack, $01
0008C068 E10F                       	smpsAlterNote       $0F
0008C06A E701                       	dc.b	smpsNoAttack, $01
0008C06C E10B                       	smpsAlterNote       $0B
0008C06E E701                       	dc.b	smpsNoAttack, $01
0008C070 E105                       	smpsAlterNote       $05
0008C072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C076 E108                       	smpsAlterNote       $08
0008C078 E701                       	dc.b	smpsNoAttack, $01
0008C07A E10E                       	smpsAlterNote       $0E
0008C07C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C080 E108                       	smpsAlterNote       $08
0008C082 E701                       	dc.b	smpsNoAttack, $01
0008C084 E105                       	smpsAlterNote       $05
0008C086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C08A E10B                       	smpsAlterNote       $0B
0008C08C E701                       	dc.b	smpsNoAttack, $01
0008C08E E10F                       	smpsAlterNote       $0F
0008C090 E701                       	dc.b	smpsNoAttack, $01
0008C092 E10E                       	smpsAlterNote       $0E
0008C094 E701                       	dc.b	smpsNoAttack, $01
0008C096 E108                       	smpsAlterNote       $08
0008C098 E701                       	dc.b	smpsNoAttack, $01
0008C09A E104                       	smpsAlterNote       $04
0008C09C E701                       	dc.b	smpsNoAttack, $01
0008C09E E108                       	smpsAlterNote       $08
0008C0A0 E701                       	dc.b	smpsNoAttack, $01
0008C0A2 E10B                       	smpsAlterNote       $0B
0008C0A4 E701                       	dc.b	smpsNoAttack, $01
0008C0A6 E10F                       	smpsAlterNote       $0F
0008C0A8 E701                       	dc.b	smpsNoAttack, $01
0008C0AA E10B                       	smpsAlterNote       $0B
0008C0AC E701                       	dc.b	smpsNoAttack, $01
0008C0AE E105                       	smpsAlterNote       $05
0008C0B0 E701                       	dc.b	smpsNoAttack, $01
0008C0B2 E104                       	smpsAlterNote       $04
0008C0B4 E701                       	dc.b	smpsNoAttack, $01
0008C0B6 E108                       	smpsAlterNote       $08
0008C0B8 E701                       	dc.b	smpsNoAttack, $01
0008C0BA E10E                       	smpsAlterNote       $0E
0008C0BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C0 E10B                       	smpsAlterNote       $0B
0008C0C2 E701                       	dc.b	smpsNoAttack, $01
0008C0C4 E105                       	smpsAlterNote       $05
0008C0C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0CA E10B                       	smpsAlterNote       $0B
0008C0CC E701                       	dc.b	smpsNoAttack, $01
0008C0CE E10E                       	smpsAlterNote       $0E
0008C0D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0D4 E108                       	smpsAlterNote       $08
0008C0D6 E701                       	dc.b	smpsNoAttack, $01
0008C0D8 E105                       	smpsAlterNote       $05
0008C0DA 8001                       	dc.b	nRst, $01
0008C0DE E601                       	smpsAlterVol        $01
0008C0E0 E10B                       	smpsAlterNote       $0B
0008C0E2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008C0EE 8004                       	dc.b	nRst, $04
0008C0F2 E6FF                       	smpsAlterVol        $FF
0008C0F4 E10D                       	smpsAlterNote       $0D
0008C0F6 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008C0FE E10C                       	smpsAlterNote       $0C
0008C100 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008C105 E10D                       	smpsAlterNote       $0D
0008C107 B60D                       	dc.b	nF4, $0D
0008C109 E10A                       	smpsAlterNote       $0A
0008C10B E701                       	dc.b	smpsNoAttack, $01
0008C10D E106                       	smpsAlterNote       $06
0008C10F E701                       	dc.b	smpsNoAttack, $01
0008C111 E10A                       	smpsAlterNote       $0A
0008C113 E701                       	dc.b	smpsNoAttack, $01
0008C115 E110                       	smpsAlterNote       $10
0008C117 E701                       	dc.b	smpsNoAttack, $01
0008C119 E111                       	smpsAlterNote       $11
0008C11B E701                       	dc.b	smpsNoAttack, $01
0008C11D E10D                       	smpsAlterNote       $0D
0008C11F E701                       	dc.b	smpsNoAttack, $01
0008C121 E107                       	smpsAlterNote       $07
0008C123 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C127 E10A                       	smpsAlterNote       $0A
0008C129 E701                       	dc.b	smpsNoAttack, $01
0008C12B E110                       	smpsAlterNote       $10
0008C12D E701                       	dc.b	smpsNoAttack, $01
0008C12F E111                       	smpsAlterNote       $11
0008C131 8001                       	dc.b	nRst, $01
0008C133 E10D                       	smpsAlterNote       $0D
0008C135 B80D                       	dc.b	nG4, $0D
0008C137 E10A                       	smpsAlterNote       $0A
0008C139 E701                       	dc.b	smpsNoAttack, $01
0008C13B E106                       	smpsAlterNote       $06
0008C13D E701                       	dc.b	smpsNoAttack, $01
0008C13F E10A                       	smpsAlterNote       $0A
0008C141 E701                       	dc.b	smpsNoAttack, $01
0008C143 E110                       	smpsAlterNote       $10
0008C145 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C149 E10D                       	smpsAlterNote       $0D
0008C14B E701                       	dc.b	smpsNoAttack, $01
0008C14D E107                       	smpsAlterNote       $07
0008C14F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C153 E10D                       	smpsAlterNote       $0D
0008C155 E701                       	dc.b	smpsNoAttack, $01
0008C157 E110                       	smpsAlterNote       $10
0008C159 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C15D E10A                       	smpsAlterNote       $0A
0008C15F E701                       	dc.b	smpsNoAttack, $01
0008C161 E106                       	smpsAlterNote       $06
0008C163 E701                       	dc.b	smpsNoAttack, $01
0008C165 E107                       	smpsAlterNote       $07
0008C167 E701                       	dc.b	smpsNoAttack, $01
0008C169 E10D                       	smpsAlterNote       $0D
0008C16B E701                       	dc.b	smpsNoAttack, $01
0008C16D E111                       	smpsAlterNote       $11
0008C16F E701                       	dc.b	smpsNoAttack, $01
0008C171 E10D                       	smpsAlterNote       $0D
0008C173 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C177 E10F                       	smpsAlterNote       $0F
0008C179 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008C17D E110                       	smpsAlterNote       $10
0008C17F BB03                       	dc.b	nBb4, $03
0008C181 E10F                       	smpsAlterNote       $0F
0008C183 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008C189 E110                       	smpsAlterNote       $10
0008C18B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C18F E10F                       	smpsAlterNote       $0F
0008C191 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008C197 E110                       	smpsAlterNote       $10
0008C199 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008C19D E10F                       	smpsAlterNote       $0F
0008C19F D20D                       	dc.b	nA6, $0D
0008C1A1 E10C                       	smpsAlterNote       $0C
0008C1A3 E701                       	dc.b	smpsNoAttack, $01
0008C1A5 E108                       	smpsAlterNote       $08
0008C1A7 E701                       	dc.b	smpsNoAttack, $01
0008C1A9 E10C                       	smpsAlterNote       $0C
0008C1AB E701                       	dc.b	smpsNoAttack, $01
0008C1AD E10F                       	smpsAlterNote       $0F
0008C1AF E701                       	dc.b	smpsNoAttack, $01
0008C1B1 E113                       	smpsAlterNote       $13
0008C1B3 E701                       	dc.b	smpsNoAttack, $01
0008C1B5 E10F                       	smpsAlterNote       $0F
0008C1B7 E701                       	dc.b	smpsNoAttack, $01
0008C1B9 E109                       	smpsAlterNote       $09
0008C1BB E701                       	dc.b	smpsNoAttack, $01
0008C1BD E108                       	smpsAlterNote       $08
0008C1BF E701                       	dc.b	smpsNoAttack, $01
0008C1C1 E10C                       	smpsAlterNote       $0C
0008C1C3 E701                       	dc.b	smpsNoAttack, $01
0008C1C5 E112                       	smpsAlterNote       $12
0008C1C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1CB E10F                       	smpsAlterNote       $0F
0008C1CD E701                       	dc.b	smpsNoAttack, $01
0008C1CF E109                       	smpsAlterNote       $09
0008C1D1 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008C1D7 E10D                       	smpsAlterNote       $0D
0008C1D9 CE07                       	dc.b	nF6, $07
0008C1DB E10C                       	smpsAlterNote       $0C
0008C1DD CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008C1E1 E10D                       	smpsAlterNote       $0D
0008C1E3 CE03                       	dc.b	nF6, $03
0008C1E5 E10C                       	smpsAlterNote       $0C
0008C1E7 CC0D                       	dc.b	nEb6, $0D
0008C1E9 E109                       	smpsAlterNote       $09
0008C1EB E701                       	dc.b	smpsNoAttack, $01
0008C1ED E106                       	smpsAlterNote       $06
0008C1EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1F3 E10C                       	smpsAlterNote       $0C
0008C1F5 E701                       	dc.b	smpsNoAttack, $01
0008C1F7 E110                       	smpsAlterNote       $10
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E10F                       	smpsAlterNote       $0F
0008C1FD E701                       	dc.b	smpsNoAttack, $01
0008C1FF E109                       	smpsAlterNote       $09
0008C201 E701                       	dc.b	smpsNoAttack, $01
0008C203 E105                       	smpsAlterNote       $05
0008C205 E701                       	dc.b	smpsNoAttack, $01
0008C207 E109                       	smpsAlterNote       $09
0008C209 E701                       	dc.b	smpsNoAttack, $01
0008C20B E10C                       	smpsAlterNote       $0C
0008C20D E701                       	dc.b	smpsNoAttack, $01
0008C20F E110                       	smpsAlterNote       $10
0008C211 E701                       	dc.b	smpsNoAttack, $01
0008C213 E10C                       	smpsAlterNote       $0C
0008C215 E701                       	dc.b	smpsNoAttack, $01
0008C217 E106                       	smpsAlterNote       $06
0008C219 E701                       	dc.b	smpsNoAttack, $01
0008C21B E105                       	smpsAlterNote       $05
0008C21D E701                       	dc.b	smpsNoAttack, $01
0008C21F E109                       	smpsAlterNote       $09
0008C221 E701                       	dc.b	smpsNoAttack, $01
0008C223 E10F                       	smpsAlterNote       $0F
0008C225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C229 E10C                       	smpsAlterNote       $0C
0008C22B E701                       	dc.b	smpsNoAttack, $01
0008C22D E10B                       	smpsAlterNote       $0B
0008C22F CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008C239 E10F                       	smpsAlterNote       $0F
0008C23B C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008C245 E10D                       	smpsAlterNote       $0D
0008C247 C203                       	dc.b	nF5, $03
0008C249 E10C                       	smpsAlterNote       $0C
0008C24B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C24F E10D                       	smpsAlterNote       $0D
0008C251 C20D                       	dc.b	nF5, $0D
0008C253 E10C                       	smpsAlterNote       $0C
0008C255 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008C259 E10B                       	smpsAlterNote       $0B
0008C25B BF0D                       	dc.b	nD5, $0D
0008C25D E108                       	smpsAlterNote       $08
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E104                       	smpsAlterNote       $04
0008C263 E701                       	dc.b	smpsNoAttack, $01
0008C265 E108                       	smpsAlterNote       $08
0008C267 E701                       	dc.b	smpsNoAttack, $01
0008C269 E10E                       	smpsAlterNote       $0E
0008C26B E701                       	dc.b	smpsNoAttack, $01
0008C26D E10F                       	smpsAlterNote       $0F
0008C26F E701                       	dc.b	smpsNoAttack, $01
0008C271 E10B                       	smpsAlterNote       $0B
0008C273 E701                       	dc.b	smpsNoAttack, $01
0008C275 E105                       	smpsAlterNote       $05
0008C277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C27B E108                       	smpsAlterNote       $08
0008C27D E701                       	dc.b	smpsNoAttack, $01
0008C27F E10E                       	smpsAlterNote       $0E
0008C281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C285 E108                       	smpsAlterNote       $08
0008C287 E701                       	dc.b	smpsNoAttack, $01
0008C289 E105                       	smpsAlterNote       $05
0008C28B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C28F E10B                       	smpsAlterNote       $0B
0008C291 E701                       	dc.b	smpsNoAttack, $01
0008C293 E10F                       	smpsAlterNote       $0F
0008C295 E701                       	dc.b	smpsNoAttack, $01
0008C297 E10E                       	smpsAlterNote       $0E
0008C299 E701                       	dc.b	smpsNoAttack, $01
0008C29B E108                       	smpsAlterNote       $08
0008C29D E701                       	dc.b	smpsNoAttack, $01
0008C29F E104                       	smpsAlterNote       $04
0008C2A1 E701                       	dc.b	smpsNoAttack, $01
0008C2A3 E108                       	smpsAlterNote       $08
0008C2A5 E701                       	dc.b	smpsNoAttack, $01
0008C2A7 E10B                       	smpsAlterNote       $0B
0008C2A9 E701                       	dc.b	smpsNoAttack, $01
0008C2AB E10F                       	smpsAlterNote       $0F
0008C2AD E701                       	dc.b	smpsNoAttack, $01
0008C2AF E10B                       	smpsAlterNote       $0B
0008C2B1 E701                       	dc.b	smpsNoAttack, $01
0008C2B3 E105                       	smpsAlterNote       $05
0008C2B5 E701                       	dc.b	smpsNoAttack, $01
0008C2B7 E104                       	smpsAlterNote       $04
0008C2B9 E701                       	dc.b	smpsNoAttack, $01
0008C2BB E108                       	smpsAlterNote       $08
0008C2BD E701                       	dc.b	smpsNoAttack, $01
0008C2BF E10E                       	smpsAlterNote       $0E
0008C2C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2C5 E10B                       	smpsAlterNote       $0B
0008C2C7 E701                       	dc.b	smpsNoAttack, $01
0008C2C9 E105                       	smpsAlterNote       $05
0008C2CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2CF E10B                       	smpsAlterNote       $0B
0008C2D1 E701                       	dc.b	smpsNoAttack, $01
0008C2D3 E10E                       	smpsAlterNote       $0E
0008C2D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2D9 E108                       	smpsAlterNote       $08
0008C2DB E701                       	dc.b	smpsNoAttack, $01
0008C2DD E104                       	smpsAlterNote       $04
0008C2DF E701                       	dc.b	smpsNoAttack, $01
0008C2E1 E105                       	smpsAlterNote       $05
0008C2E3 E701                       	dc.b	smpsNoAttack, $01
0008C2E5 E10B                       	smpsAlterNote       $0B
0008C2E7 E701                       	dc.b	smpsNoAttack, $01
0008C2E9 E10F                       	smpsAlterNote       $0F
0008C2EB E701                       	dc.b	smpsNoAttack, $01
0008C2ED E10B                       	smpsAlterNote       $0B
0008C2EF E701                       	dc.b	smpsNoAttack, $01
0008C2F1 E108                       	smpsAlterNote       $08
0008C2F3 E701                       	dc.b	smpsNoAttack, $01
0008C2F5 E104                       	smpsAlterNote       $04
0008C2F7 E701                       	dc.b	smpsNoAttack, $01
0008C2F9 E108                       	smpsAlterNote       $08
0008C2FB E701                       	dc.b	smpsNoAttack, $01
0008C2FD E10E                       	smpsAlterNote       $0E
0008C2FF E701                       	dc.b	smpsNoAttack, $01
0008C301 E10F                       	smpsAlterNote       $0F
0008C303 E701                       	dc.b	smpsNoAttack, $01
0008C305 E10B                       	smpsAlterNote       $0B
0008C307 E701                       	dc.b	smpsNoAttack, $01
0008C309 E105                       	smpsAlterNote       $05
0008C30B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C30F E108                       	smpsAlterNote       $08
0008C311 E701                       	dc.b	smpsNoAttack, $01
0008C313 E10E                       	smpsAlterNote       $0E
0008C315 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C319 E108                       	smpsAlterNote       $08
0008C31B E701                       	dc.b	smpsNoAttack, $01
0008C31D E105                       	smpsAlterNote       $05
0008C31F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C323 E10B                       	smpsAlterNote       $0B
0008C325 E701                       	dc.b	smpsNoAttack, $01
0008C327 E10F                       	smpsAlterNote       $0F
0008C329 E701                       	dc.b	smpsNoAttack, $01
0008C32B E10E                       	smpsAlterNote       $0E
0008C32D E701                       	dc.b	smpsNoAttack, $01
0008C32F E108                       	smpsAlterNote       $08
0008C331 E701                       	dc.b	smpsNoAttack, $01
0008C333 E104                       	smpsAlterNote       $04
0008C335 E701                       	dc.b	smpsNoAttack, $01
0008C337 E108                       	smpsAlterNote       $08
0008C339 E701                       	dc.b	smpsNoAttack, $01
0008C33B E10B                       	smpsAlterNote       $0B
0008C33D E701                       	dc.b	smpsNoAttack, $01
0008C33F E10F                       	smpsAlterNote       $0F
0008C341 E701                       	dc.b	smpsNoAttack, $01
0008C343 E10B                       	smpsAlterNote       $0B
0008C345 E701                       	dc.b	smpsNoAttack, $01
0008C347 E105                       	smpsAlterNote       $05
0008C349 E701                       	dc.b	smpsNoAttack, $01
0008C34B E104                       	smpsAlterNote       $04
0008C34D E701                       	dc.b	smpsNoAttack, $01
0008C34F E105                       	smpsAlterNote       $05
0008C351 8001                       	dc.b	nRst, $01
0008C353 E10D                       	smpsAlterNote       $0D
0008C355 C20D                       	dc.b	nF5, $0D
0008C357 E107                       	smpsAlterNote       $07
0008C359 E701                       	dc.b	smpsNoAttack, $01
0008C35B E106                       	smpsAlterNote       $06
0008C35D E701                       	dc.b	smpsNoAttack, $01
0008C35F E10A                       	smpsAlterNote       $0A
0008C361 E701                       	dc.b	smpsNoAttack, $01
0008C363 E110                       	smpsAlterNote       $10
0008C365 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C369 E10D                       	smpsAlterNote       $0D
0008C36B E701                       	dc.b	smpsNoAttack, $01
0008C36D E107                       	smpsAlterNote       $07
0008C36F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C373 E10D                       	smpsAlterNote       $0D
0008C375 E701                       	dc.b	smpsNoAttack, $01
0008C377 E110                       	smpsAlterNote       $10
0008C379 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C37D E10A                       	smpsAlterNote       $0A
0008C37F E701                       	dc.b	smpsNoAttack, $01
0008C381 E106                       	smpsAlterNote       $06
0008C383 E701                       	dc.b	smpsNoAttack, $01
0008C385 E107                       	smpsAlterNote       $07
0008C387 E701                       	dc.b	smpsNoAttack, $01
0008C389 E10D                       	smpsAlterNote       $0D
0008C38B E701                       	dc.b	smpsNoAttack, $01
0008C38D E111                       	smpsAlterNote       $11
0008C38F E701                       	dc.b	smpsNoAttack, $01
0008C391 E10D                       	smpsAlterNote       $0D
0008C393 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C397 E10C                       	smpsAlterNote       $0C
0008C399 C10D                       	dc.b	nE5, $0D
0008C39B E10D                       	smpsAlterNote       $0D
0008C39D C20A                       	dc.b	nF5, $0A
0008C39F E10C                       	smpsAlterNote       $0C
0008C3A1 C10E                       	dc.b	nE5, $0E
0008C3A3 E106                       	smpsAlterNote       $06
0008C3A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3A9 E10C                       	smpsAlterNote       $0C
0008C3AB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C3AF E10B                       	smpsAlterNote       $0B
0008C3B1 BF0D                       	dc.b	nD5, $0D
0008C3B3 E10C                       	smpsAlterNote       $0C
0008C3B5 C107                       	dc.b	nE5, $07
0008C3B7 E10D                       	smpsAlterNote       $0D
0008C3B9 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008C3C3 E110                       	smpsAlterNote       $10
0008C3C5 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008C3CB E10F                       	smpsAlterNote       $0F
0008C3CD C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008C3D5 E10D                       	smpsAlterNote       $0D
0008C3D7 D003                       	dc.b	nG6, $03
0008C3DB E0C0                       	smpsPan             panCenter, $00
0008C3DD E6FF                       	smpsAlterVol        $FF
0008C3DF AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008C3EB 8001                       	dc.b	nRst, $01
0008C3ED E10C                       	smpsAlterNote       $0C
0008C3EF A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008C3F9 E604                       	smpsAlterVol        $04
0008C3FB E10B                       	smpsAlterNote       $0B
0008C3FD B306 8001                  	dc.b	nD4, $06, nRst, $01
0008C401 E10F                       	smpsAlterNote       $0F
0008C403 AE03                       	dc.b	nA3, $03
0008C405 E10D                       	smpsAlterNote       $0D
0008C407 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C40B E10C                       	smpsAlterNote       $0C
0008C40D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C411 E10B                       	smpsAlterNote       $0B
0008C413 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C417 E10A                       	smpsAlterNote       $0A
0008C419 B103                       	dc.b	nC4, $03
0008C41B E110                       	smpsAlterNote       $10
0008C41D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C421 E10F                       	smpsAlterNote       $0F
0008C423 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008C427 E080                       	smpsPan             panLeft, $00
0008C429 01                         	dc.b	$01
0008C42C E6FB                       	smpsAlterVol        $FB
0008C42E E1E4                       	smpsAlterNote       $E4
0008C430 C501                       	dc.b	nAb5, $01
0008C432 E1F4                       	smpsAlterNote       $F4
0008C434 E701                       	dc.b	smpsNoAttack, $01
0008C436 E104                       	smpsAlterNote       $04
0008C438 E701                       	dc.b	smpsNoAttack, $01
0008C43A E114                       	smpsAlterNote       $14
0008C43C E701                       	dc.b	smpsNoAttack, $01
0008C43E E11C                       	smpsAlterNote       $1C
0008C440 E701                       	dc.b	smpsNoAttack, $01
0008C442 E1EF                       	smpsAlterNote       $EF
0008C444 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008C447 E1FF                       	smpsAlterNote       $FF
0008C449 E701                       	dc.b	smpsNoAttack, $01
0008C44B E10F                       	smpsAlterNote       $0F
0008C44D C606                       	dc.b	nA5, $06
0008C44F E109                       	smpsAlterNote       $09
0008C451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C455 E10F                       	smpsAlterNote       $0F
0008C457 E701                       	dc.b	smpsNoAttack, $01
0008C459 E112                       	smpsAlterNote       $12
0008C45B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C45F E10C                       	smpsAlterNote       $0C
0008C461 E701                       	dc.b	smpsNoAttack, $01
0008C463 E108                       	smpsAlterNote       $08
0008C465 E701                       	dc.b	smpsNoAttack, $01
0008C467 E109                       	smpsAlterNote       $09
0008C469 E701                       	dc.b	smpsNoAttack, $01
0008C46B E10F                       	smpsAlterNote       $0F
0008C46D E701                       	dc.b	smpsNoAttack, $01
0008C46F E113                       	smpsAlterNote       $13
0008C471 E701                       	dc.b	smpsNoAttack, $01
0008C473 E10F                       	smpsAlterNote       $0F
0008C475 E701                       	dc.b	smpsNoAttack, $01
0008C477 E10C                       	smpsAlterNote       $0C
0008C479 E701                       	dc.b	smpsNoAttack, $01
0008C47B E108                       	smpsAlterNote       $08
0008C47D E701                       	dc.b	smpsNoAttack, $01
0008C47F E10C                       	smpsAlterNote       $0C
0008C481 E701                       	dc.b	smpsNoAttack, $01
0008C483 E112                       	smpsAlterNote       $12
0008C485 E701                       	dc.b	smpsNoAttack, $01
0008C487 E113                       	smpsAlterNote       $13
0008C489 E701                       	dc.b	smpsNoAttack, $01
0008C48B E10F                       	smpsAlterNote       $0F
0008C48D E701                       	dc.b	smpsNoAttack, $01
0008C48F E109                       	smpsAlterNote       $09
0008C491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C495 E10C                       	smpsAlterNote       $0C
0008C497 E701                       	dc.b	smpsNoAttack, $01
0008C499 E112                       	smpsAlterNote       $12
0008C49B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C49F E10C                       	smpsAlterNote       $0C
0008C4A1 E701                       	dc.b	smpsNoAttack, $01
0008C4A3 E109                       	smpsAlterNote       $09
0008C4A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C4A9 E10F                       	smpsAlterNote       $0F
0008C4AB E701                       	dc.b	smpsNoAttack, $01
0008C4AD E113                       	smpsAlterNote       $13
0008C4AF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C4B3 E10D                       	smpsAlterNote       $0D
0008C4B5 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C4BB E10C                       	smpsAlterNote       $0C
0008C4BD C102 8001                  	dc.b	nE5, $02, nRst, $01
0008C4C1 E10D                       	smpsAlterNote       $0D
0008C4C3 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008C4C7 E10C                       	smpsAlterNote       $0C
0008C4C9 C102                       	dc.b	nE5, $02
0008C4CB E10B                       	smpsAlterNote       $0B
0008C4CD BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008C4D1 E10C                       	smpsAlterNote       $0C
0008C4D3 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008C4D7 E10B                       	smpsAlterNote       $0B
0008C4D9 BF02                       	dc.b	nD5, $02
0008C4DB E10A                       	smpsAlterNote       $0A
0008C4DD BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008C4E7 E110                       	smpsAlterNote       $10
0008C4E9 BB02                       	dc.b	nBb4, $02
0008C4EB E10A                       	smpsAlterNote       $0A
0008C4ED BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008C4F1 E110                       	smpsAlterNote       $10
0008C4F3 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008C4F7 E10F                       	smpsAlterNote       $0F
0008C4F9 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008C4FD E110                       	smpsAlterNote       $10
0008C4FF BB02                       	dc.b	nBb4, $02
0008C501 E10F                       	smpsAlterNote       $0F
0008C503 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008C50D E10C                       	smpsAlterNote       $0C
0008C50F B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008C517 E10B                       	smpsAlterNote       $0B
0008C519 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008C51D E10F                       	smpsAlterNote       $0F
0008C51F BA02                       	dc.b	nA4, $02
0008C523 E0C0                       	smpsPan             panCenter, $00
0008C525 E601                       	smpsAlterVol        $01
0008C527 E109                       	smpsAlterNote       $09
0008C529 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008C535 E108                       	smpsAlterNote       $08
0008C537 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008C53D E107                       	smpsAlterNote       $07
0008C53F B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008C545 E109                       	smpsAlterNote       $09
0008C547 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C54B E108                       	smpsAlterNote       $08
0008C54D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C551 E107                       	smpsAlterNote       $07
0008C553 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C557 E106                       	smpsAlterNote       $06
0008C559 B103                       	dc.b	nC4, $03
0008C55B E10C                       	smpsAlterNote       $0C
0008C55D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C563 E080                       	smpsPan             panLeft, $00
0008C565 07                         	dc.b	$07
0008C566 E6FE                       	smpsAlterVol        $FE
0008C568 E10B                       	smpsAlterNote       $0B
0008C56A B20D                       	dc.b	nCs4, $0D
0008C56C E105                       	smpsAlterNote       $05
0008C56E E701                       	dc.b	smpsNoAttack, $01
0008C570 E104                       	smpsAlterNote       $04
0008C572 E701                       	dc.b	smpsNoAttack, $01
0008C574 E108                       	smpsAlterNote       $08
0008C576 E701                       	dc.b	smpsNoAttack, $01
0008C578 E10E                       	smpsAlterNote       $0E
0008C57A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C57E E10B                       	smpsAlterNote       $0B
0008C580 E701                       	dc.b	smpsNoAttack, $01
0008C582 E105                       	smpsAlterNote       $05
0008C584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C588 E10B                       	smpsAlterNote       $0B
0008C58A E701                       	dc.b	smpsNoAttack, $01
0008C58C E10E                       	smpsAlterNote       $0E
0008C58E E701                       	dc.b	smpsNoAttack, $01
0008C590 E10F                       	smpsAlterNote       $0F
0008C592 8001                       	dc.b	nRst, $01
0008C594 E10B                       	smpsAlterNote       $0B
0008C596 B30D                       	dc.b	nD4, $0D
0008C598 E105                       	smpsAlterNote       $05
0008C59A E701                       	dc.b	smpsNoAttack, $01
0008C59C E104                       	smpsAlterNote       $04
0008C59E E701                       	dc.b	smpsNoAttack, $01
0008C5A0 E108                       	smpsAlterNote       $08
0008C5A2 E701                       	dc.b	smpsNoAttack, $01
0008C5A4 E10E                       	smpsAlterNote       $0E
0008C5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5AA E10B                       	smpsAlterNote       $0B
0008C5AC E701                       	dc.b	smpsNoAttack, $01
0008C5AE E105                       	smpsAlterNote       $05
0008C5B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5B4 E10B                       	smpsAlterNote       $0B
0008C5B6 E701                       	dc.b	smpsNoAttack, $01
0008C5B8 E10E                       	smpsAlterNote       $0E
0008C5BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5BE E108                       	smpsAlterNote       $08
0008C5C0 E701                       	dc.b	smpsNoAttack, $01
0008C5C2 E104                       	smpsAlterNote       $04
0008C5C4 E701                       	dc.b	smpsNoAttack, $01
0008C5C6 E105                       	smpsAlterNote       $05
0008C5C8 E701                       	dc.b	smpsNoAttack, $01
0008C5CA E10B                       	smpsAlterNote       $0B
0008C5CC E701                       	dc.b	smpsNoAttack, $01
0008C5CE E10F                       	smpsAlterNote       $0F
0008C5D0 E701                       	dc.b	smpsNoAttack, $01
0008C5D2 E10B                       	smpsAlterNote       $0B
0008C5D4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C5D8 E10C                       	smpsAlterNote       $0C
0008C5DA B50D                       	dc.b	nE4, $0D
0008C5DC E106                       	smpsAlterNote       $06
0008C5DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5E2 E10C                       	smpsAlterNote       $0C
0008C5E4 E701                       	dc.b	smpsNoAttack, $01
0008C5E6 E10F                       	smpsAlterNote       $0F
0008C5E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5EC E109                       	smpsAlterNote       $09
0008C5EE E701                       	dc.b	smpsNoAttack, $01
0008C5F0 E105                       	smpsAlterNote       $05
0008C5F2 E701                       	dc.b	smpsNoAttack, $01
0008C5F4 E106                       	smpsAlterNote       $06
0008C5F6 E701                       	dc.b	smpsNoAttack, $01
0008C5F8 E10C                       	smpsAlterNote       $0C
0008C5FA E701                       	dc.b	smpsNoAttack, $01
0008C5FC E110                       	smpsAlterNote       $10
0008C5FE E701                       	dc.b	smpsNoAttack, $01
0008C600 E10B                       	smpsAlterNote       $0B
0008C602 B30E                       	dc.b	nD4, $0E
0008C604 E105                       	smpsAlterNote       $05
0008C606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C60A E10B                       	smpsAlterNote       $0B
0008C60C E701                       	dc.b	smpsNoAttack, $01
0008C60E E10E                       	smpsAlterNote       $0E
0008C610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C614 E108                       	smpsAlterNote       $08
0008C616 E701                       	dc.b	smpsNoAttack, $01
0008C618 E104                       	smpsAlterNote       $04
0008C61A E701                       	dc.b	smpsNoAttack, $01
0008C61C E105                       	smpsAlterNote       $05
0008C61E E701                       	dc.b	smpsNoAttack, $01
0008C620 E10B                       	smpsAlterNote       $0B
0008C622 E701                       	dc.b	smpsNoAttack, $01
0008C624 E10F                       	smpsAlterNote       $0F
0008C626 E701                       	dc.b	smpsNoAttack, $01
0008C628 E10B                       	smpsAlterNote       $0B
0008C62A E701                       	dc.b	smpsNoAttack, $01
0008C62C E108                       	smpsAlterNote       $08
0008C62E E701                       	dc.b	smpsNoAttack, $01
0008C630 E104                       	smpsAlterNote       $04
0008C632 E701                       	dc.b	smpsNoAttack, $01
0008C634 E108                       	smpsAlterNote       $08
0008C636 E701                       	dc.b	smpsNoAttack, $01
0008C638 E10E                       	smpsAlterNote       $0E
0008C63A E701                       	dc.b	smpsNoAttack, $01
0008C63C E10F                       	smpsAlterNote       $0F
0008C63E E701                       	dc.b	smpsNoAttack, $01
0008C640 E10B                       	smpsAlterNote       $0B
0008C642 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008C646 E108                       	smpsAlterNote       $08
0008C648 E701                       	dc.b	smpsNoAttack, $01
0008C64A E105                       	smpsAlterNote       $05
0008C64C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C650 E10B                       	smpsAlterNote       $0B
0008C652 E701                       	dc.b	smpsNoAttack, $01
0008C654 E10F                       	smpsAlterNote       $0F
0008C656 E701                       	dc.b	smpsNoAttack, $01
0008C658 E10E                       	smpsAlterNote       $0E
0008C65A E701                       	dc.b	smpsNoAttack, $01
0008C65C E108                       	smpsAlterNote       $08
0008C65E E701                       	dc.b	smpsNoAttack, $01
0008C660 E104                       	smpsAlterNote       $04
0008C662 E701                       	dc.b	smpsNoAttack, $01
0008C664 E108                       	smpsAlterNote       $08
0008C666 E701                       	dc.b	smpsNoAttack, $01
0008C668 E10B                       	smpsAlterNote       $0B
0008C66A E701                       	dc.b	smpsNoAttack, $01
0008C66C E10F                       	smpsAlterNote       $0F
0008C66E E701                       	dc.b	smpsNoAttack, $01
0008C670 E10B                       	smpsAlterNote       $0B
0008C672 B30D                       	dc.b	nD4, $0D
0008C674 E108                       	smpsAlterNote       $08
0008C676 E701                       	dc.b	smpsNoAttack, $01
0008C678 E105                       	smpsAlterNote       $05
0008C67A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C67E E10B                       	smpsAlterNote       $0B
0008C680 E701                       	dc.b	smpsNoAttack, $01
0008C682 E10F                       	smpsAlterNote       $0F
0008C684 E701                       	dc.b	smpsNoAttack, $01
0008C686 E10E                       	smpsAlterNote       $0E
0008C688 E701                       	dc.b	smpsNoAttack, $01
0008C68A E108                       	smpsAlterNote       $08
0008C68C E701                       	dc.b	smpsNoAttack, $01
0008C68E E104                       	smpsAlterNote       $04
0008C690 E701                       	dc.b	smpsNoAttack, $01
0008C692 E108                       	smpsAlterNote       $08
0008C694 E701                       	dc.b	smpsNoAttack, $01
0008C696 E10B                       	smpsAlterNote       $0B
0008C698 E701                       	dc.b	smpsNoAttack, $01
0008C69A E10F                       	smpsAlterNote       $0F
0008C69C E701                       	dc.b	smpsNoAttack, $01
0008C69E E10B                       	smpsAlterNote       $0B
0008C6A0 E701                       	dc.b	smpsNoAttack, $01
0008C6A2 E105                       	smpsAlterNote       $05
0008C6A4 E701                       	dc.b	smpsNoAttack, $01
0008C6A6 E104                       	smpsAlterNote       $04
0008C6A8 E701                       	dc.b	smpsNoAttack, $01
0008C6AA E108                       	smpsAlterNote       $08
0008C6AC E701                       	dc.b	smpsNoAttack, $01
0008C6AE E10E                       	smpsAlterNote       $0E
0008C6B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C6B4 E10B                       	smpsAlterNote       $0B
0008C6B6 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008C6BA E108                       	smpsAlterNote       $08
0008C6BC E701                       	dc.b	smpsNoAttack, $01
0008C6BE E104                       	smpsAlterNote       $04
0008C6C0 E701                       	dc.b	smpsNoAttack, $01
0008C6C2 E108                       	smpsAlterNote       $08
0008C6C4 E701                       	dc.b	smpsNoAttack, $01
0008C6C6 E10B                       	smpsAlterNote       $0B
0008C6C8 E701                       	dc.b	smpsNoAttack, $01
0008C6CC E0C0                       	smpsPan             panCenter, $00
0008C6CE E601                       	smpsAlterVol        $01
0008C6D0 E108                       	smpsAlterNote       $08
0008C6D2 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008C6DE 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008C6E6 E080                       	smpsPan             panLeft, $00
0008C6E8 07                         	dc.b	$07
0008C6E9 E6FF                       	smpsAlterVol        $FF
0008C6EB E10D                       	smpsAlterNote       $0D
0008C6ED B60D                       	dc.b	nF4, $0D
0008C6EF E10A                       	smpsAlterNote       $0A
0008C6F1 E701                       	dc.b	smpsNoAttack, $01
0008C6F3 E106                       	smpsAlterNote       $06
0008C6F5 E701                       	dc.b	smpsNoAttack, $01
0008C6F7 E10A                       	smpsAlterNote       $0A
0008C6F9 E701                       	dc.b	smpsNoAttack, $01
0008C6FB E110                       	smpsAlterNote       $10
0008C6FD E701                       	dc.b	smpsNoAttack, $01
0008C6FF E111                       	smpsAlterNote       $11
0008C701 E701                       	dc.b	smpsNoAttack, $01
0008C703 E10D                       	smpsAlterNote       $0D
0008C705 E701                       	dc.b	smpsNoAttack, $01
0008C707 E107                       	smpsAlterNote       $07
0008C709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C70D E10A                       	smpsAlterNote       $0A
0008C70F E701                       	dc.b	smpsNoAttack, $01
0008C711 E110                       	smpsAlterNote       $10
0008C713 E701                       	dc.b	smpsNoAttack, $01
0008C715 E111                       	smpsAlterNote       $11
0008C717 8001                       	dc.b	nRst, $01
0008C719 E10D                       	smpsAlterNote       $0D
0008C71B B80D                       	dc.b	nG4, $0D
0008C71D E10A                       	smpsAlterNote       $0A
0008C71F E701                       	dc.b	smpsNoAttack, $01
0008C721 E106                       	smpsAlterNote       $06
0008C723 E701                       	dc.b	smpsNoAttack, $01
0008C725 E10A                       	smpsAlterNote       $0A
0008C727 E701                       	dc.b	smpsNoAttack, $01
0008C729 E110                       	smpsAlterNote       $10
0008C72B E701                       	dc.b	smpsNoAttack, $01
0008C72D E111                       	smpsAlterNote       $11
0008C72F E701                       	dc.b	smpsNoAttack, $01
0008C731 E10D                       	smpsAlterNote       $0D
0008C733 E701                       	dc.b	smpsNoAttack, $01
0008C735 E107                       	smpsAlterNote       $07
0008C737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C73B E10D                       	smpsAlterNote       $0D
0008C73D E701                       	dc.b	smpsNoAttack, $01
0008C73F E110                       	smpsAlterNote       $10
0008C741 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C745 E10A                       	smpsAlterNote       $0A
0008C747 E701                       	dc.b	smpsNoAttack, $01
0008C749 E106                       	smpsAlterNote       $06
0008C74B E701                       	dc.b	smpsNoAttack, $01
0008C74D E107                       	smpsAlterNote       $07
0008C74F E701                       	dc.b	smpsNoAttack, $01
0008C751 E10D                       	smpsAlterNote       $0D
0008C753 E701                       	dc.b	smpsNoAttack, $01
0008C755 E111                       	smpsAlterNote       $11
0008C757 E701                       	dc.b	smpsNoAttack, $01
0008C759 E10D                       	smpsAlterNote       $0D
0008C75B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C75F E10F                       	smpsAlterNote       $0F
0008C761 BA0D                       	dc.b	nA4, $0D
0008C763 E109                       	smpsAlterNote       $09
0008C765 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C769 E10C                       	smpsAlterNote       $0C
0008C76B E701                       	dc.b	smpsNoAttack, $01
0008C76D E112                       	smpsAlterNote       $12
0008C76F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C773 E10C                       	smpsAlterNote       $0C
0008C775 E701                       	dc.b	smpsNoAttack, $01
0008C777 E109                       	smpsAlterNote       $09
0008C779 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C77D E10F                       	smpsAlterNote       $0F
0008C77F E701                       	dc.b	smpsNoAttack, $01
0008C781 E113                       	smpsAlterNote       $13
0008C783 E701                       	dc.b	smpsNoAttack, $01
0008C785 E112                       	smpsAlterNote       $12
0008C787 E701                       	dc.b	smpsNoAttack, $01
0008C789 E10C                       	smpsAlterNote       $0C
0008C78B E701                       	dc.b	smpsNoAttack, $01
0008C78D E108                       	smpsAlterNote       $08
0008C78F E701                       	dc.b	smpsNoAttack, $01
0008C791 E10C                       	smpsAlterNote       $0C
0008C793 E701                       	dc.b	smpsNoAttack, $01
0008C795 E10F                       	smpsAlterNote       $0F
0008C797 E701                       	dc.b	smpsNoAttack, $01
0008C799 E113                       	smpsAlterNote       $13
0008C79B E701                       	dc.b	smpsNoAttack, $01
0008C79D E10F                       	smpsAlterNote       $0F
0008C79F E701                       	dc.b	smpsNoAttack, $01
0008C7A1 E109                       	smpsAlterNote       $09
0008C7A3 E701                       	dc.b	smpsNoAttack, $01
0008C7A5 E108                       	smpsAlterNote       $08
0008C7A7 E701                       	dc.b	smpsNoAttack, $01
0008C7A9 E10C                       	smpsAlterNote       $0C
0008C7AB E701                       	dc.b	smpsNoAttack, $01
0008C7AD E112                       	smpsAlterNote       $12
0008C7AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7B3 E10F                       	smpsAlterNote       $0F
0008C7B5 E701                       	dc.b	smpsNoAttack, $01
0008C7B7 E109                       	smpsAlterNote       $09
0008C7B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7BD E10F                       	smpsAlterNote       $0F
0008C7BF E701                       	dc.b	smpsNoAttack, $01
0008C7C1 E112                       	smpsAlterNote       $12
0008C7C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7C7 E10C                       	smpsAlterNote       $0C
0008C7C9 E701                       	dc.b	smpsNoAttack, $01
0008C7CB E108                       	smpsAlterNote       $08
0008C7CD E701                       	dc.b	smpsNoAttack, $01
0008C7CF E109                       	smpsAlterNote       $09
0008C7D1 E701                       	dc.b	smpsNoAttack, $01
0008C7D3 E10C                       	smpsAlterNote       $0C
0008C7D5 B50A                       	dc.b	nE4, $0A
0008C7D7 E10D                       	smpsAlterNote       $0D
0008C7D9 B60E                       	dc.b	nF4, $0E
0008C7DB E107                       	smpsAlterNote       $07
0008C7DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7E1 E10D                       	smpsAlterNote       $0D
0008C7E3 E701                       	dc.b	smpsNoAttack, $01
0008C7E5 E110                       	smpsAlterNote       $10
0008C7E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7EB E10A                       	smpsAlterNote       $0A
0008C7ED E701                       	dc.b	smpsNoAttack, $01
0008C7EF E106                       	smpsAlterNote       $06
0008C7F1 E701                       	dc.b	smpsNoAttack, $01
0008C7F3 E107                       	smpsAlterNote       $07
0008C7F5 E701                       	dc.b	smpsNoAttack, $01
0008C7F7 E10D                       	smpsAlterNote       $0D
0008C7F9 E701                       	dc.b	smpsNoAttack, $01
0008C7FB E111                       	smpsAlterNote       $11
0008C7FD E701                       	dc.b	smpsNoAttack, $01
0008C7FF E10D                       	smpsAlterNote       $0D
0008C801 B80D                       	dc.b	nG4, $0D
0008C803 E10A                       	smpsAlterNote       $0A
0008C805 E701                       	dc.b	smpsNoAttack, $01
0008C807 E107                       	smpsAlterNote       $07
0008C809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C80D E10D                       	smpsAlterNote       $0D
0008C80F E701                       	dc.b	smpsNoAttack, $01
0008C811 E111                       	smpsAlterNote       $11
0008C813 E701                       	dc.b	smpsNoAttack, $01
0008C815 E110                       	smpsAlterNote       $10
0008C817 E701                       	dc.b	smpsNoAttack, $01
0008C819 E10A                       	smpsAlterNote       $0A
0008C81B E701                       	dc.b	smpsNoAttack, $01
0008C81D E106                       	smpsAlterNote       $06
0008C81F E701                       	dc.b	smpsNoAttack, $01
0008C821 E10A                       	smpsAlterNote       $0A
0008C823 E701                       	dc.b	smpsNoAttack, $01
0008C825 E10D                       	smpsAlterNote       $0D
0008C827 E701                       	dc.b	smpsNoAttack, $01
0008C829 E111                       	smpsAlterNote       $11
0008C82B E701                       	dc.b	smpsNoAttack, $01
0008C82D E10D                       	smpsAlterNote       $0D
0008C82F E701                       	dc.b	smpsNoAttack, $01
0008C831 E107                       	smpsAlterNote       $07
0008C833 E701                       	dc.b	smpsNoAttack, $01
0008C835 E106                       	smpsAlterNote       $06
0008C837 E701                       	dc.b	smpsNoAttack, $01
0008C839 E10A                       	smpsAlterNote       $0A
0008C83B E701                       	dc.b	smpsNoAttack, $01
0008C83D E110                       	smpsAlterNote       $10
0008C83F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C843 E10D                       	smpsAlterNote       $0D
0008C845 E701                       	dc.b	smpsNoAttack, $01
0008C847 E10F                       	smpsAlterNote       $0F
0008C849 BA0D                       	dc.b	nA4, $0D
0008C84B E10C                       	smpsAlterNote       $0C
0008C84D E701                       	dc.b	smpsNoAttack, $01
0008C84F E108                       	smpsAlterNote       $08
0008C851 E701                       	dc.b	smpsNoAttack, $01
0008C853 E109                       	smpsAlterNote       $09
0008C855 E701                       	dc.b	smpsNoAttack, $01
0008C857 E10F                       	smpsAlterNote       $0F
0008C859 E701                       	dc.b	smpsNoAttack, $01
0008C85B E113                       	smpsAlterNote       $13
0008C85D E701                       	dc.b	smpsNoAttack, $01
0008C85F E10F                       	smpsAlterNote       $0F
0008C861 E701                       	dc.b	smpsNoAttack, $01
0008C863 E10C                       	smpsAlterNote       $0C
0008C865 E701                       	dc.b	smpsNoAttack, $01
0008C867 E108                       	smpsAlterNote       $08
0008C869 E701                       	dc.b	smpsNoAttack, $01
0008C86B E10C                       	smpsAlterNote       $0C
0008C86D E701                       	dc.b	smpsNoAttack, $01
0008C86F E112                       	smpsAlterNote       $12
0008C871 E701                       	dc.b	smpsNoAttack, $01
0008C873 E113                       	smpsAlterNote       $13
0008C875 E701                       	dc.b	smpsNoAttack, $01
0008C877 E10F                       	smpsAlterNote       $0F
0008C879 E701                       	dc.b	smpsNoAttack, $01
0008C87B E109                       	smpsAlterNote       $09
0008C87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C881 E10C                       	smpsAlterNote       $0C
0008C883 E701                       	dc.b	smpsNoAttack, $01
0008C885 E112                       	smpsAlterNote       $12
0008C887 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C88B E10C                       	smpsAlterNote       $0C
0008C88D E701                       	dc.b	smpsNoAttack, $01
0008C88F E109                       	smpsAlterNote       $09
0008C891 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C895 E10F                       	smpsAlterNote       $0F
0008C897 E701                       	dc.b	smpsNoAttack, $01
0008C899 E113                       	smpsAlterNote       $13
0008C89B E701                       	dc.b	smpsNoAttack, $01
0008C89D E112                       	smpsAlterNote       $12
0008C89F E701                       	dc.b	smpsNoAttack, $01
0008C8A1 E10C                       	smpsAlterNote       $0C
0008C8A3 E701                       	dc.b	smpsNoAttack, $01
0008C8A5 E109                       	smpsAlterNote       $09
0008C8A7 8001                       	dc.b	nRst, $01
0008C8A9 E10D                       	smpsAlterNote       $0D
0008C8AB B60A                       	dc.b	nF4, $0A
0008C8AD E10C                       	smpsAlterNote       $0C
0008C8AF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C8B3 E10B                       	smpsAlterNote       $0B
0008C8B5 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C8B9 E10C                       	smpsAlterNote       $0C
0008C8BB B503                       	dc.b	nE4, $03
0008C8BD E10D                       	smpsAlterNote       $0D
0008C8BF B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C8C9 E10C                       	smpsAlterNote       $0C
0008C8CB E701                       	dc.b	smpsNoAttack, $01
0008C8CD E108                       	smpsAlterNote       $08
0008C8CF E701                       	dc.b	smpsNoAttack, $01
0008C8D1 E10C                       	smpsAlterNote       $0C
0008C8D3 E701                       	dc.b	smpsNoAttack, $01
0008C8D5 E112                       	smpsAlterNote       $12
0008C8D7 E701                       	dc.b	smpsNoAttack, $01
0008C8D9 E113                       	smpsAlterNote       $13
0008C8DB E701                       	dc.b	smpsNoAttack, $01
0008C8DD E10F                       	smpsAlterNote       $0F
0008C8DF E701                       	dc.b	smpsNoAttack, $01
0008C8E1 E109                       	smpsAlterNote       $09
0008C8E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C8E7 E10C                       	smpsAlterNote       $0C
0008C8E9 E701                       	dc.b	smpsNoAttack, $01
0008C8EB E112                       	smpsAlterNote       $12
0008C8ED E701                       	dc.b	smpsNoAttack, $01
0008C8EF E113                       	smpsAlterNote       $13
0008C8F1 8001                       	dc.b	nRst, $01
0008C8F3 E10D                       	smpsAlterNote       $0D
0008C8F5 C20D                       	dc.b	nF5, $0D
0008C8F7 E10A                       	smpsAlterNote       $0A
0008C8F9 E701                       	dc.b	smpsNoAttack, $01
0008C8FB E106                       	smpsAlterNote       $06
0008C8FD E701                       	dc.b	smpsNoAttack, $01
0008C8FF E10A                       	smpsAlterNote       $0A
0008C901 E701                       	dc.b	smpsNoAttack, $01
0008C903 E110                       	smpsAlterNote       $10
0008C905 E701                       	dc.b	smpsNoAttack, $01
0008C907 E111                       	smpsAlterNote       $11
0008C909 E701                       	dc.b	smpsNoAttack, $01
0008C90B E10D                       	smpsAlterNote       $0D
0008C90D E701                       	dc.b	smpsNoAttack, $01
0008C90F E107                       	smpsAlterNote       $07
0008C911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C915 E10A                       	smpsAlterNote       $0A
0008C917 E701                       	dc.b	smpsNoAttack, $01
0008C919 E110                       	smpsAlterNote       $10
0008C91B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C91F E10A                       	smpsAlterNote       $0A
0008C921 E701                       	dc.b	smpsNoAttack, $01
0008C923 E107                       	smpsAlterNote       $07
0008C925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C929 E10D                       	smpsAlterNote       $0D
0008C92B E701                       	dc.b	smpsNoAttack, $01
0008C92D E111                       	smpsAlterNote       $11
0008C92F E701                       	dc.b	smpsNoAttack, $01
0008C931 E110                       	smpsAlterNote       $10
0008C933 E701                       	dc.b	smpsNoAttack, $01
0008C935 E10A                       	smpsAlterNote       $0A
0008C937 E701                       	dc.b	smpsNoAttack, $01
0008C939 E106                       	smpsAlterNote       $06
0008C93B E701                       	dc.b	smpsNoAttack, $01
0008C93D E10A                       	smpsAlterNote       $0A
0008C93F E701                       	dc.b	smpsNoAttack, $01
0008C941 E10D                       	smpsAlterNote       $0D
0008C943 E701                       	dc.b	smpsNoAttack, $01
0008C945 E111                       	smpsAlterNote       $11
0008C947 E701                       	dc.b	smpsNoAttack, $01
0008C949 E10D                       	smpsAlterNote       $0D
0008C94B E701                       	dc.b	smpsNoAttack, $01
0008C94D E107                       	smpsAlterNote       $07
0008C94F E701                       	dc.b	smpsNoAttack, $01
0008C951 E106                       	smpsAlterNote       $06
0008C953 E701                       	dc.b	smpsNoAttack, $01
0008C955 E10A                       	smpsAlterNote       $0A
0008C957 E701                       	dc.b	smpsNoAttack, $01
0008C959 E110                       	smpsAlterNote       $10
0008C95B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C95F E10D                       	smpsAlterNote       $0D
0008C961 E701                       	dc.b	smpsNoAttack, $01
0008C963 E107                       	smpsAlterNote       $07
0008C965 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C969 E10D                       	smpsAlterNote       $0D
0008C96B E701                       	dc.b	smpsNoAttack, $01
0008C96D E110                       	smpsAlterNote       $10
0008C96F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C973 E10A                       	smpsAlterNote       $0A
0008C975 E701                       	dc.b	smpsNoAttack, $01
0008C977 E106                       	smpsAlterNote       $06
0008C979 E701                       	dc.b	smpsNoAttack, $01
0008C97B E107                       	smpsAlterNote       $07
0008C97D E701                       	dc.b	smpsNoAttack, $01
0008C97F E10D                       	smpsAlterNote       $0D
0008C981 E701                       	dc.b	smpsNoAttack, $01
0008C983 E111                       	smpsAlterNote       $11
0008C985 E701                       	dc.b	smpsNoAttack, $01
0008C987 E10D                       	smpsAlterNote       $0D
0008C989 E701                       	dc.b	smpsNoAttack, $01
0008C98B E10A                       	smpsAlterNote       $0A
0008C98D E701                       	dc.b	smpsNoAttack, $01
0008C98F E107                       	smpsAlterNote       $07
0008C991 8001                       	dc.b	nRst, $01
0008C993 E10D                       	smpsAlterNote       $0D
0008C995 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C99B E601                       	smpsAlterVol        $01
0008C99D E110                       	smpsAlterNote       $10
0008C99F BB0D                       	dc.b	nBb4, $0D
0008C9A1 E10A                       	smpsAlterNote       $0A
0008C9A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9A7 E110                       	smpsAlterNote       $10
0008C9A9 E701                       	dc.b	smpsNoAttack, $01
0008C9AB E113                       	smpsAlterNote       $13
0008C9AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9B1 E10D                       	smpsAlterNote       $0D
0008C9B3 E701                       	dc.b	smpsNoAttack, $01
0008C9B5 E109                       	smpsAlterNote       $09
0008C9B7 E701                       	dc.b	smpsNoAttack, $01
0008C9B9 E10A                       	smpsAlterNote       $0A
0008C9BB E701                       	dc.b	smpsNoAttack, $01
0008C9BD E110                       	smpsAlterNote       $10
0008C9BF E701                       	dc.b	smpsNoAttack, $01
0008C9C1 E114                       	smpsAlterNote       $14
0008C9C3 E701                       	dc.b	smpsNoAttack, $01
0008C9C5 E110                       	smpsAlterNote       $10
0008C9C7 E701                       	dc.b	smpsNoAttack, $01
0008C9C9 E10D                       	smpsAlterNote       $0D
0008C9CB E701                       	dc.b	smpsNoAttack, $01
0008C9CD E109                       	smpsAlterNote       $09
0008C9CF E701                       	dc.b	smpsNoAttack, $01
0008C9D1 E10A                       	smpsAlterNote       $0A
0008C9D3 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C9D7 E107                       	smpsAlterNote       $07
0008C9D9 E701                       	dc.b	smpsNoAttack, $01
0008C9DB E103                       	smpsAlterNote       $03
0008C9DD E701                       	dc.b	smpsNoAttack, $01
0008C9DF E107                       	smpsAlterNote       $07
0008C9E1 E701                       	dc.b	smpsNoAttack, $01
0008C9E3 E10D                       	smpsAlterNote       $0D
0008C9E5 E701                       	dc.b	smpsNoAttack, $01
0008C9E7 E10E                       	smpsAlterNote       $0E
0008C9E9 E701                       	dc.b	smpsNoAttack, $01
0008C9EB E10A                       	smpsAlterNote       $0A
0008C9ED E701                       	dc.b	smpsNoAttack, $01
0008C9EF E104                       	smpsAlterNote       $04
0008C9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9F5 E107                       	smpsAlterNote       $07
0008C9F7 E701                       	dc.b	smpsNoAttack, $01
0008C9F9 E10D                       	smpsAlterNote       $0D
0008C9FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9FF E107                       	smpsAlterNote       $07
0008CA01 E701                       	dc.b	smpsNoAttack, $01
0008CA03 E104                       	smpsAlterNote       $04
0008CA05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA09 E10B                       	smpsAlterNote       $0B
0008CA0B BF0D                       	dc.b	nD5, $0D
0008CA0D E108                       	smpsAlterNote       $08
0008CA0F E701                       	dc.b	smpsNoAttack, $01
0008CA11 E105                       	smpsAlterNote       $05
0008CA13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA17 E10B                       	smpsAlterNote       $0B
0008CA19 E701                       	dc.b	smpsNoAttack, $01
0008CA1B E10F                       	smpsAlterNote       $0F
0008CA1D E701                       	dc.b	smpsNoAttack, $01
0008CA1F E10E                       	smpsAlterNote       $0E
0008CA21 E701                       	dc.b	smpsNoAttack, $01
0008CA23 E108                       	smpsAlterNote       $08
0008CA25 E701                       	dc.b	smpsNoAttack, $01
0008CA27 E104                       	smpsAlterNote       $04
0008CA29 E701                       	dc.b	smpsNoAttack, $01
0008CA2B E108                       	smpsAlterNote       $08
0008CA2D E701                       	dc.b	smpsNoAttack, $01
0008CA2F E10B                       	smpsAlterNote       $0B
0008CA31 E701                       	dc.b	smpsNoAttack, $01
0008CA33 E10F                       	smpsAlterNote       $0F
0008CA35 E701                       	dc.b	smpsNoAttack, $01
0008CA37 E10B                       	smpsAlterNote       $0B
0008CA39 E701                       	dc.b	smpsNoAttack, $01
0008CA3B E105                       	smpsAlterNote       $05
0008CA3D E701                       	dc.b	smpsNoAttack, $01
0008CA3F E104                       	smpsAlterNote       $04
0008CA41 E701                       	dc.b	smpsNoAttack, $01
0008CA43 E105                       	smpsAlterNote       $05
0008CA45 8001                       	dc.b	nRst, $01
0008CA47 E10C                       	smpsAlterNote       $0C
0008CA49 C10C                       	dc.b	nE5, $0C
0008CA4B E10D                       	smpsAlterNote       $0D
0008CA4D C201                       	dc.b	nF5, $01
0008CA4F E10E                       	smpsAlterNote       $0E
0008CA51 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008CA55 E10D                       	smpsAlterNote       $0D
0008CA57 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008CA5B E10A                       	smpsAlterNote       $0A
0008CA5D E701                       	dc.b	smpsNoAttack, $01
0008CA5F E106                       	smpsAlterNote       $06
0008CA61 E701                       	dc.b	smpsNoAttack, $01
0008CA63 E10A                       	smpsAlterNote       $0A
0008CA65 E701                       	dc.b	smpsNoAttack, $01
0008CA67 E10D                       	smpsAlterNote       $0D
0008CA69 E701                       	dc.b	smpsNoAttack, $01
0008CA6B E111                       	smpsAlterNote       $11
0008CA6D E701                       	dc.b	smpsNoAttack, $01
0008CA6F E10D                       	smpsAlterNote       $0D
0008CA71 E701                       	dc.b	smpsNoAttack, $01
0008CA73 E107                       	smpsAlterNote       $07
0008CA75 E701                       	dc.b	smpsNoAttack, $01
0008CA77 E106                       	smpsAlterNote       $06
0008CA79 E701                       	dc.b	smpsNoAttack, $01
0008CA7B E10A                       	smpsAlterNote       $0A
0008CA7D E701                       	dc.b	smpsNoAttack, $01
0008CA7F E110                       	smpsAlterNote       $10
0008CA81 E701                       	dc.b	smpsNoAttack, $01
0008CA83 E111                       	smpsAlterNote       $11
0008CA85 8001                       	dc.b	nRst, $01
0008CA87 E10D                       	smpsAlterNote       $0D
0008CA89 C40D                       	dc.b	nG5, $0D
0008CA8B E10A                       	smpsAlterNote       $0A
0008CA8D E701                       	dc.b	smpsNoAttack, $01
0008CA8F E106                       	smpsAlterNote       $06
0008CA91 E701                       	dc.b	smpsNoAttack, $01
0008CA93 E10A                       	smpsAlterNote       $0A
0008CA95 E701                       	dc.b	smpsNoAttack, $01
0008CA97 E10D                       	smpsAlterNote       $0D
0008CA99 E701                       	dc.b	smpsNoAttack, $01
0008CA9B E10C                       	smpsAlterNote       $0C
0008CA9D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008CAA9 8001                       	dc.b	nRst, $01
0008CAAB E10D                       	smpsAlterNote       $0D
0008CAAD C20D                       	dc.b	nF5, $0D
0008CAAF E10A                       	smpsAlterNote       $0A
0008CAB1 E701                       	dc.b	smpsNoAttack, $01
0008CAB3 E106                       	smpsAlterNote       $06
0008CAB5 E701                       	dc.b	smpsNoAttack, $01
0008CAB7 E10A                       	smpsAlterNote       $0A
0008CAB9 E701                       	dc.b	smpsNoAttack, $01
0008CABB E110                       	smpsAlterNote       $10
0008CABD E701                       	dc.b	smpsNoAttack, $01
0008CABF E111                       	smpsAlterNote       $11
0008CAC1 E701                       	dc.b	smpsNoAttack, $01
0008CAC3 E10D                       	smpsAlterNote       $0D
0008CAC5 E701                       	dc.b	smpsNoAttack, $01
0008CAC7 E107                       	smpsAlterNote       $07
0008CAC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CACD E10A                       	smpsAlterNote       $0A
0008CACF E701                       	dc.b	smpsNoAttack, $01
0008CAD1 E110                       	smpsAlterNote       $10
0008CAD3 E701                       	dc.b	smpsNoAttack, $01
0008CAD5 E111                       	smpsAlterNote       $11
0008CAD7 8001                       	dc.b	nRst, $01
0008CAD9 E10F                       	smpsAlterNote       $0F
0008CADB C60A                       	dc.b	nA5, $0A
0008CADD E10D                       	smpsAlterNote       $0D
0008CADF C406 8001                  	dc.b	nG5, $06, nRst, $01
0008CAE3 E10C                       	smpsAlterNote       $0C
0008CAE5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CAF1 8001                       	dc.b	nRst, $01
0008CAF3 E10D                       	smpsAlterNote       $0D
0008CAF5 C20D                       	dc.b	nF5, $0D
0008CAF7 E107                       	smpsAlterNote       $07
0008CAF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAFD E10A                       	smpsAlterNote       $0A
0008CAFF E701                       	dc.b	smpsNoAttack, $01
0008CB01 E110                       	smpsAlterNote       $10
0008CB03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB07 E10A                       	smpsAlterNote       $0A
0008CB09 E701                       	dc.b	smpsNoAttack, $01
0008CB0B E107                       	smpsAlterNote       $07
0008CB0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB11 E10D                       	smpsAlterNote       $0D
0008CB13 E701                       	dc.b	smpsNoAttack, $01
0008CB15 E111                       	smpsAlterNote       $11
0008CB17 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB1B E10D                       	smpsAlterNote       $0D
0008CB1D C40D                       	dc.b	nG5, $0D
0008CB1F E107                       	smpsAlterNote       $07
0008CB21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB25 E10A                       	smpsAlterNote       $0A
0008CB27 E701                       	dc.b	smpsNoAttack, $01
0008CB29 E10D                       	smpsAlterNote       $0D
0008CB2B 8001                       	dc.b	nRst, $01
0008CB2D E10C                       	smpsAlterNote       $0C
0008CB2F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CB3B E10D                       	smpsAlterNote       $0D
0008CB3D C20E                       	dc.b	nF5, $0E
0008CB3F E107                       	smpsAlterNote       $07
0008CB41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB45 E10D                       	smpsAlterNote       $0D
0008CB47 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB4D E0C0                       	smpsPan             panCenter, $00
0008CB4F E603                       	smpsAlterVol        $03
0008CB51 E108                       	smpsAlterNote       $08
0008CB53 B406                       	dc.b	nEb4, $06
0008CB55 E10C                       	smpsAlterNote       $0C
0008CB57 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008CB5B E108                       	smpsAlterNote       $08
0008CB5D B403                       	dc.b	nEb4, $03
0008CB5F E109                       	smpsAlterNote       $09
0008CB61 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008CB65 E10C                       	smpsAlterNote       $0C
0008CB67 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008CB6F 03                         	dc.b	$03
0008CB70 E6FD                       	smpsAlterVol        $FD
0008CB72 F6F1 F4                    	smpsJump            music84_Jump00
0008CB75                            
0008CB75                            ; PSG1 Data
0008CB75                            music84_PSG1:
0008CB75 E1FD                       	smpsAlterNote       $FD
0008CB77 EC04                       	smpsPSGAlterVol     $04
0008CB79 9203                       	dc.b	nF1, $03
0008CB7B E1FE                       	smpsAlterNote       $FE
0008CB7D 9603                       	dc.b	nA1, $03
0008CB7F EC04                       	smpsPSGAlterVol     $04
0008CB81 E701                       	dc.b	smpsNoAttack, $01
0008CB83 E1FF                       	smpsAlterNote       $FF
0008CB85 ECFC                       	smpsPSGAlterVol     $FC
0008CB87 9B03                       	dc.b	nD2, $03
0008CB89 E1FD                       	smpsAlterNote       $FD
0008CB8B 9403                       	dc.b	nG1, $03
0008CB8D EC04                       	smpsPSGAlterVol     $04
0008CB8F E701                       	dc.b	smpsNoAttack, $01
0008CB91 E1FE                       	smpsAlterNote       $FE
0008CB93 ECFC                       	smpsPSGAlterVol     $FC
0008CB95 9703                       	dc.b	nBb1, $03
0008CB97 E1FF                       	smpsAlterNote       $FF
0008CB99 9B03                       	dc.b	nD2, $03
0008CB9B EC04                       	smpsPSGAlterVol     $04
0008CB9D E701                       	dc.b	smpsNoAttack, $01
0008CB9F E1FE                       	smpsAlterNote       $FE
0008CBA1 ECFC                       	smpsPSGAlterVol     $FC
0008CBA3 A002                       	dc.b	nG2, $02
0008CBA5 EC04                       	smpsPSGAlterVol     $04
0008CBA7 E701                       	dc.b	smpsNoAttack, $01
0008CBA9 E1FF                       	smpsAlterNote       $FF
0008CBAB ECFC                       	smpsPSGAlterVol     $FC
0008CBAD A203                       	dc.b	nA2, $03
0008CBAF EC0B                       	smpsPSGAlterVol     $0B
0008CBB1 800A                       	dc.b	nRst, $0A
0008CBB3 E105                       	smpsAlterNote       $05
0008CBB5 01                         	dc.b	$01
0008CBB6 E1FC                       	smpsAlterNote       $FC
0008CBB8 01                         	dc.b	$01
0008CBB9 E105                       	smpsAlterNote       $05
0008CBBB 01                         	dc.b	$01
0008CBBC E1FD                       	smpsAlterNote       $FD
0008CBBE 01                         	dc.b	$01
0008CBBF E105                       	smpsAlterNote       $05
0008CBC1 01                         	dc.b	$01
0008CBC2 E1FD                       	smpsAlterNote       $FD
0008CBC4 01                         	dc.b	$01
0008CBC5 E1FA                       	smpsAlterNote       $FA
0008CBC7 01                         	dc.b	$01
0008CBC8 E1FC                       	smpsAlterNote       $FC
0008CBCA 01                         	dc.b	$01
0008CBCB E105                       	smpsAlterNote       $05
0008CBCD 01                         	dc.b	$01
0008CBCE E108                       	smpsAlterNote       $08
0008CBD0 0101                       	dc.b	$01, $01
0008CBD2 E105                       	smpsAlterNote       $05
0008CBD4 01                         	dc.b	$01
0008CBD5 E1FA                       	smpsAlterNote       $FA
0008CBD7 0101                       	dc.b	$01, $01
0008CBD9 E1FD                       	smpsAlterNote       $FD
0008CBDB 01                         	dc.b	$01
0008CBDC E105                       	smpsAlterNote       $05
0008CBDE 01                         	dc.b	$01
0008CBDF E108                       	smpsAlterNote       $08
0008CBE1 01                         	dc.b	$01
0008CBE2 E105                       	smpsAlterNote       $05
0008CBE4 01                         	dc.b	$01
0008CBE5 E1FC                       	smpsAlterNote       $FC
0008CBE7 01                         	dc.b	$01
0008CBE8 E105                       	smpsAlterNote       $05
0008CBEA 01                         	dc.b	$01
0008CBEB E1FD                       	smpsAlterNote       $FD
0008CBED 01                         	dc.b	$01
0008CBEE                            
0008CBEE                            music84_Jump07:
0008CBEE E105                       	smpsAlterNote       $05
0008CBF0 8001                       	dc.b	nRst, $01
0008CBF2 E1FD                       	smpsAlterNote       $FD
0008CBF4 01                         	dc.b	$01
0008CBF5 E1FA                       	smpsAlterNote       $FA
0008CBF7 01                         	dc.b	$01
0008CBF8 E1FC                       	smpsAlterNote       $FC
0008CBFA 01                         	dc.b	$01
0008CBFB E1FD                       	smpsAlterNote       $FD
0008CBFD ECF5                       	smpsPSGAlterVol     $F5
0008CBFF 9206                       	dc.b	nF1, $06
0008CC01 EC04                       	smpsPSGAlterVol     $04
0008CC03 E701                       	dc.b	smpsNoAttack, $01
0008CC05 EC07                       	smpsPSGAlterVol     $07
0008CC07 8003                       	dc.b	nRst, $03
0008CC09 ECF5                       	smpsPSGAlterVol     $F5
0008CC0B 9206                       	dc.b	nF1, $06
0008CC0D EC04                       	smpsPSGAlterVol     $04
0008CC0F E701                       	dc.b	smpsNoAttack, $01
0008CC11 EC07                       	smpsPSGAlterVol     $07
0008CC13 8006                       	dc.b	nRst, $06
0008CC15 E100                       	smpsAlterNote       $00
0008CC17 01                         	dc.b	$01
0008CC18 E104                       	smpsAlterNote       $04
0008CC1A 01                         	dc.b	$01
0008CC1B E100                       	smpsAlterNote       $00
0008CC1D 01                         	dc.b	$01
0008CC1E E1FB                       	smpsAlterNote       $FB
0008CC20 01                         	dc.b	$01
0008CC21 E1FD                       	smpsAlterNote       $FD
0008CC23 ECF5                       	smpsPSGAlterVol     $F5
0008CC25 9406                       	dc.b	nG1, $06
0008CC27 EC04                       	smpsPSGAlterVol     $04
0008CC29 E701                       	dc.b	smpsNoAttack, $01
0008CC2B EC07                       	smpsPSGAlterVol     $07
0008CC2D 8003                       	dc.b	nRst, $03
0008CC2F ECF5                       	smpsPSGAlterVol     $F5
0008CC31 9407                       	dc.b	nG1, $07
0008CC33 EC0B                       	smpsPSGAlterVol     $0B
0008CC35 8006                       	dc.b	nRst, $06
0008CC37 E100                       	smpsAlterNote       $00
0008CC39 01                         	dc.b	$01
0008CC3A E103                       	smpsAlterNote       $03
0008CC3C 0101                       	dc.b	$01, $01
0008CC3E E1FD                       	smpsAlterNote       $FD
0008CC40 01                         	dc.b	$01
0008CC41 ECF5                       	smpsPSGAlterVol     $F5
0008CC43 9207                       	dc.b	nF1, $07
0008CC45 EC0B                       	smpsPSGAlterVol     $0B
0008CC47 8004                       	dc.b	nRst, $04
0008CC49 ECF5                       	smpsPSGAlterVol     $F5
0008CC4B 9206                       	dc.b	nF1, $06
0008CC4D EC04                       	smpsPSGAlterVol     $04
0008CC4F E701                       	dc.b	smpsNoAttack, $01
0008CC51 EC07                       	smpsPSGAlterVol     $07
0008CC53 8006                       	dc.b	nRst, $06
0008CC55 E103                       	smpsAlterNote       $03
0008CC57 01                         	dc.b	$01
0008CC58 E104                       	smpsAlterNote       $04
0008CC5A 01                         	dc.b	$01
0008CC5B E100                       	smpsAlterNote       $00
0008CC5D 01                         	dc.b	$01
0008CC5E E1FA                       	smpsAlterNote       $FA
0008CC60 01                         	dc.b	$01
0008CC61 E1FD                       	smpsAlterNote       $FD
0008CC63 ECF5                       	smpsPSGAlterVol     $F5
0008CC65 9206                       	dc.b	nF1, $06
0008CC67 EC04                       	smpsPSGAlterVol     $04
0008CC69 E701                       	dc.b	smpsNoAttack, $01
0008CC6B EC07                       	smpsPSGAlterVol     $07
0008CC6D 8003                       	dc.b	nRst, $03
0008CC6F ECF5                       	smpsPSGAlterVol     $F5
0008CC71 9106                       	dc.b	nE1, $06
0008CC73 EC04                       	smpsPSGAlterVol     $04
0008CC75 E701                       	dc.b	smpsNoAttack, $01
0008CC77 EC07                       	smpsPSGAlterVol     $07
0008CC79 8006                       	dc.b	nRst, $06
0008CC7B E100                       	smpsAlterNote       $00
0008CC7D 01                         	dc.b	$01
0008CC7E E104                       	smpsAlterNote       $04
0008CC80 01                         	dc.b	$01
0008CC81 E100                       	smpsAlterNote       $00
0008CC83 01                         	dc.b	$01
0008CC84 E1FD                       	smpsAlterNote       $FD
0008CC86 01                         	dc.b	$01
0008CC87 ECF5                       	smpsPSGAlterVol     $F5
0008CC89 9206                       	dc.b	nF1, $06
0008CC8B EC04                       	smpsPSGAlterVol     $04
0008CC8D E701                       	dc.b	smpsNoAttack, $01
0008CC8F EC07                       	smpsPSGAlterVol     $07
0008CC91 8003                       	dc.b	nRst, $03
0008CC93 ECF5                       	smpsPSGAlterVol     $F5
0008CC95 9207                       	dc.b	nF1, $07
0008CC97 EC0B                       	smpsPSGAlterVol     $0B
0008CC99 8007                       	dc.b	nRst, $07
0008CC9B E103                       	smpsAlterNote       $03
0008CC9D 0101                       	dc.b	$01, $01
0008CC9F E1FD                       	smpsAlterNote       $FD
0008CCA1 01                         	dc.b	$01
0008CCA2 E1FB                       	smpsAlterNote       $FB
0008CCA4 01                         	dc.b	$01
0008CCA5 E1FD                       	smpsAlterNote       $FD
0008CCA7 ECF5                       	smpsPSGAlterVol     $F5
0008CCA9 9406                       	dc.b	nG1, $06
0008CCAB EC0B                       	smpsPSGAlterVol     $0B
0008CCAD 8004                       	dc.b	nRst, $04
0008CCAF ECF5                       	smpsPSGAlterVol     $F5
0008CCB1 9406                       	dc.b	nG1, $06
0008CCB3 EC04                       	smpsPSGAlterVol     $04
0008CCB5 E701                       	dc.b	smpsNoAttack, $01
0008CCB7 EC07                       	smpsPSGAlterVol     $07
0008CCB9 8006                       	dc.b	nRst, $06
0008CCBB E100                       	smpsAlterNote       $00
0008CCBD 01                         	dc.b	$01
0008CCBE E104                       	smpsAlterNote       $04
0008CCC0 01                         	dc.b	$01
0008CCC1 E100                       	smpsAlterNote       $00
0008CCC3 01                         	dc.b	$01
0008CCC4 E1F9                       	smpsAlterNote       $F9
0008CCC6 01                         	dc.b	$01
0008CCC7 E1FD                       	smpsAlterNote       $FD
0008CCC9 ECF5                       	smpsPSGAlterVol     $F5
0008CCCB 9206                       	dc.b	nF1, $06
0008CCCD EC04                       	smpsPSGAlterVol     $04
0008CCCF E701                       	dc.b	smpsNoAttack, $01
0008CCD1 EC07                       	smpsPSGAlterVol     $07
0008CCD3 8003                       	dc.b	nRst, $03
0008CCD5 ECF5                       	smpsPSGAlterVol     $F5
0008CCD7 9207                       	dc.b	nF1, $07
0008CCD9 EC0B                       	smpsPSGAlterVol     $0B
0008CCDB 8006                       	dc.b	nRst, $06
0008CCDD E100                       	smpsAlterNote       $00
0008CCDF 01                         	dc.b	$01
0008CCE0 E104                       	smpsAlterNote       $04
0008CCE2 01                         	dc.b	$01
0008CCE3 E103                       	smpsAlterNote       $03
0008CCE5 01                         	dc.b	$01
0008CCE6 E1FD                       	smpsAlterNote       $FD
0008CCE8 01                         	dc.b	$01
0008CCE9 ECF5                       	smpsPSGAlterVol     $F5
0008CCEB 9207                       	dc.b	nF1, $07
0008CCED EC0B                       	smpsPSGAlterVol     $0B
0008CCEF 8004                       	dc.b	nRst, $04
0008CCF1 ECF5                       	smpsPSGAlterVol     $F5
0008CCF3 9206                       	dc.b	nF1, $06
0008CCF5 EC0B                       	smpsPSGAlterVol     $0B
0008CCF7 8007                       	dc.b	nRst, $07
0008CCF9 E103                       	smpsAlterNote       $03
0008CCFB 0101                       	dc.b	$01, $01
0008CCFD E100                       	smpsAlterNote       $00
0008CCFF 01                         	dc.b	$01
0008CD00 E1FA                       	smpsAlterNote       $FA
0008CD02 01                         	dc.b	$01
0008CD03 E1FD                       	smpsAlterNote       $FD
0008CD05 ECF5                       	smpsPSGAlterVol     $F5
0008CD07 9206                       	dc.b	nF1, $06
0008CD09 EC04                       	smpsPSGAlterVol     $04
0008CD0B E701                       	dc.b	smpsNoAttack, $01
0008CD0D EC07                       	smpsPSGAlterVol     $07
0008CD0F 8003                       	dc.b	nRst, $03
0008CD11 ECF5                       	smpsPSGAlterVol     $F5
0008CD13 9206                       	dc.b	nF1, $06
0008CD15 EC04                       	smpsPSGAlterVol     $04
0008CD17 E701                       	dc.b	smpsNoAttack, $01
0008CD19 EC07                       	smpsPSGAlterVol     $07
0008CD1B 8006                       	dc.b	nRst, $06
0008CD1D E100                       	smpsAlterNote       $00
0008CD1F 01                         	dc.b	$01
0008CD20 E104                       	smpsAlterNote       $04
0008CD22 01                         	dc.b	$01
0008CD23 E100                       	smpsAlterNote       $00
0008CD25 01                         	dc.b	$01
0008CD26 E1FD                       	smpsAlterNote       $FD
0008CD28 01                         	dc.b	$01
0008CD29 ECF5                       	smpsPSGAlterVol     $F5
0008CD2B 9206                       	dc.b	nF1, $06
0008CD2D EC04                       	smpsPSGAlterVol     $04
0008CD2F E701                       	dc.b	smpsNoAttack, $01
0008CD31 EC07                       	smpsPSGAlterVol     $07
0008CD33 8003                       	dc.b	nRst, $03
0008CD35 ECF5                       	smpsPSGAlterVol     $F5
0008CD37 9207                       	dc.b	nF1, $07
0008CD39 EC0B                       	smpsPSGAlterVol     $0B
0008CD3B 8007                       	dc.b	nRst, $07
0008CD3D E103                       	smpsAlterNote       $03
0008CD3F 0101                       	dc.b	$01, $01
0008CD41 E1FD                       	smpsAlterNote       $FD
0008CD43 01                         	dc.b	$01
0008CD44 E1FA                       	smpsAlterNote       $FA
0008CD46 01                         	dc.b	$01
0008CD47 E1FD                       	smpsAlterNote       $FD
0008CD49 ECF5                       	smpsPSGAlterVol     $F5
0008CD4B 9206                       	dc.b	nF1, $06
0008CD4D EC0B                       	smpsPSGAlterVol     $0B
0008CD4F 8004                       	dc.b	nRst, $04
0008CD51 ECF5                       	smpsPSGAlterVol     $F5
0008CD53 9206                       	dc.b	nF1, $06
0008CD55 EC04                       	smpsPSGAlterVol     $04
0008CD57 E701                       	dc.b	smpsNoAttack, $01
0008CD59 EC07                       	smpsPSGAlterVol     $07
0008CD5B 8006                       	dc.b	nRst, $06
0008CD5D E103                       	smpsAlterNote       $03
0008CD5F 01                         	dc.b	$01
0008CD60 E104                       	smpsAlterNote       $04
0008CD62 01                         	dc.b	$01
0008CD63 E100                       	smpsAlterNote       $00
0008CD65 01                         	dc.b	$01
0008CD66 E1FA                       	smpsAlterNote       $FA
0008CD68 01                         	dc.b	$01
0008CD69 E1FD                       	smpsAlterNote       $FD
0008CD6B ECF5                       	smpsPSGAlterVol     $F5
0008CD6D 9206                       	dc.b	nF1, $06
0008CD6F EC04                       	smpsPSGAlterVol     $04
0008CD71 E701                       	dc.b	smpsNoAttack, $01
0008CD73 EC07                       	smpsPSGAlterVol     $07
0008CD75 8003                       	dc.b	nRst, $03
0008CD77 ECF5                       	smpsPSGAlterVol     $F5
0008CD79 9206                       	dc.b	nF1, $06
0008CD7B EC04                       	smpsPSGAlterVol     $04
0008CD7D E701                       	dc.b	smpsNoAttack, $01
0008CD7F EC07                       	smpsPSGAlterVol     $07
0008CD81 8006                       	dc.b	nRst, $06
0008CD83 E100                       	smpsAlterNote       $00
0008CD85 01                         	dc.b	$01
0008CD86 E104                       	smpsAlterNote       $04
0008CD88 01                         	dc.b	$01
0008CD89 E103                       	smpsAlterNote       $03
0008CD8B 01                         	dc.b	$01
0008CD8C E1FD                       	smpsAlterNote       $FD
0008CD8E 01                         	dc.b	$01
0008CD8F ECF5                       	smpsPSGAlterVol     $F5
0008CD91 9107                       	dc.b	nE1, $07
0008CD93 EC0B                       	smpsPSGAlterVol     $0B
0008CD95 8004                       	dc.b	nRst, $04
0008CD97 ECF5                       	smpsPSGAlterVol     $F5
0008CD99 9106                       	dc.b	nE1, $06
0008CD9B EC0B                       	smpsPSGAlterVol     $0B
0008CD9D 8007                       	dc.b	nRst, $07
0008CD9F E103                       	smpsAlterNote       $03
0008CDA1 0101                       	dc.b	$01, $01
0008CDA3 E100                       	smpsAlterNote       $00
0008CDA5 01                         	dc.b	$01
0008CDA6 E1FA                       	smpsAlterNote       $FA
0008CDA8 01                         	dc.b	$01
0008CDA9 E1FD                       	smpsAlterNote       $FD
0008CDAB ECF5                       	smpsPSGAlterVol     $F5
0008CDAD 9106                       	dc.b	nE1, $06
0008CDAF EC04                       	smpsPSGAlterVol     $04
0008CDB1 E701                       	dc.b	smpsNoAttack, $01
0008CDB3 EC07                       	smpsPSGAlterVol     $07
0008CDB5 8003                       	dc.b	nRst, $03
0008CDB7 ECF5                       	smpsPSGAlterVol     $F5
0008CDB9 9106                       	dc.b	nE1, $06
0008CDBB EC04                       	smpsPSGAlterVol     $04
0008CDBD E701                       	dc.b	smpsNoAttack, $01
0008CDBF EC07                       	smpsPSGAlterVol     $07
0008CDC1 8006                       	dc.b	nRst, $06
0008CDC3 E100                       	smpsAlterNote       $00
0008CDC5 01                         	dc.b	$01
0008CDC6 E104                       	smpsAlterNote       $04
0008CDC8 01                         	dc.b	$01
0008CDC9 E100                       	smpsAlterNote       $00
0008CDCB 01                         	dc.b	$01
0008CDCC E1FA                       	smpsAlterNote       $FA
0008CDCE 01                         	dc.b	$01
0008CDCF E1FD                       	smpsAlterNote       $FD
0008CDD1 ECF5                       	smpsPSGAlterVol     $F5
0008CDD3 9106                       	dc.b	nE1, $06
0008CDD5 EC04                       	smpsPSGAlterVol     $04
0008CDD7 E701                       	dc.b	smpsNoAttack, $01
0008CDD9 EC07                       	smpsPSGAlterVol     $07
0008CDDB 8003                       	dc.b	nRst, $03
0008CDDD ECF5                       	smpsPSGAlterVol     $F5
0008CDDF 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CDE3 EC04                       	smpsPSGAlterVol     $04
0008CDE5 E701                       	dc.b	smpsNoAttack, $01
0008CDE7 ECFC                       	smpsPSGAlterVol     $FC
0008CDE9 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008CDED EC04                       	smpsPSGAlterVol     $04
0008CDEF E701                       	dc.b	smpsNoAttack, $01
0008CDF1 ECFC                       	smpsPSGAlterVol     $FC
0008CDF3 9106                       	dc.b	nE1, $06
0008CDF5 EC04                       	smpsPSGAlterVol     $04
0008CDF7 E701                       	dc.b	smpsNoAttack, $01
0008CDF9 EC07                       	smpsPSGAlterVol     $07
0008CDFB 8006                       	dc.b	nRst, $06
0008CDFD E100                       	smpsAlterNote       $00
0008CDFF 01                         	dc.b	$01
0008CE00 E104                       	smpsAlterNote       $04
0008CE02 01                         	dc.b	$01
0008CE03 E100                       	smpsAlterNote       $00
0008CE05 01                         	dc.b	$01
0008CE06 E1FA                       	smpsAlterNote       $FA
0008CE08 01                         	dc.b	$01
0008CE09 E1F9                       	smpsAlterNote       $F9
0008CE0B 01                         	dc.b	$01
0008CE0C E1FD                       	smpsAlterNote       $FD
0008CE0E 01                         	dc.b	$01
0008CE0F E103                       	smpsAlterNote       $03
0008CE11 01                         	dc.b	$01
0008CE12 E104                       	smpsAlterNote       $04
0008CE14 01                         	dc.b	$01
0008CE15 E100                       	smpsAlterNote       $00
0008CE17 01                         	dc.b	$01
0008CE18 E1FA                       	smpsAlterNote       $FA
0008CE1A 0101                       	dc.b	$01, $01
0008CE1C E1FD                       	smpsAlterNote       $FD
0008CE1E ECF5                       	smpsPSGAlterVol     $F5
0008CE20 9206                       	dc.b	nF1, $06
0008CE22 EC04                       	smpsPSGAlterVol     $04
0008CE24 E701                       	dc.b	smpsNoAttack, $01
0008CE26 EC07                       	smpsPSGAlterVol     $07
0008CE28 8003                       	dc.b	nRst, $03
0008CE2A ECF5                       	smpsPSGAlterVol     $F5
0008CE2C 9206                       	dc.b	nF1, $06
0008CE2E EC04                       	smpsPSGAlterVol     $04
0008CE30 E701                       	dc.b	smpsNoAttack, $01
0008CE32 EC07                       	smpsPSGAlterVol     $07
0008CE34 8006                       	dc.b	nRst, $06
0008CE36 E100                       	smpsAlterNote       $00
0008CE38 01                         	dc.b	$01
0008CE39 E104                       	smpsAlterNote       $04
0008CE3B 01                         	dc.b	$01
0008CE3C E103                       	smpsAlterNote       $03
0008CE3E 01                         	dc.b	$01
0008CE3F E1FD                       	smpsAlterNote       $FD
0008CE41 01                         	dc.b	$01
0008CE42 ECF5                       	smpsPSGAlterVol     $F5
0008CE44 9407                       	dc.b	nG1, $07
0008CE46 EC0B                       	smpsPSGAlterVol     $0B
0008CE48 8004                       	dc.b	nRst, $04
0008CE4A ECF5                       	smpsPSGAlterVol     $F5
0008CE4C 9406                       	dc.b	nG1, $06
0008CE4E EC0B                       	smpsPSGAlterVol     $0B
0008CE50 8007                       	dc.b	nRst, $07
0008CE52 E103                       	smpsAlterNote       $03
0008CE54 0101                       	dc.b	$01, $01
0008CE56 E1FD                       	smpsAlterNote       $FD
0008CE58 01                         	dc.b	$01
0008CE59 E1F9                       	smpsAlterNote       $F9
0008CE5B 01                         	dc.b	$01
0008CE5C E1FD                       	smpsAlterNote       $FD
0008CE5E ECF5                       	smpsPSGAlterVol     $F5
0008CE60 9206                       	dc.b	nF1, $06
0008CE62 EC04                       	smpsPSGAlterVol     $04
0008CE64 E701                       	dc.b	smpsNoAttack, $01
0008CE66 EC07                       	smpsPSGAlterVol     $07
0008CE68 8003                       	dc.b	nRst, $03
0008CE6A ECF5                       	smpsPSGAlterVol     $F5
0008CE6C 9206                       	dc.b	nF1, $06
0008CE6E EC04                       	smpsPSGAlterVol     $04
0008CE70 E701                       	dc.b	smpsNoAttack, $01
0008CE72 EC07                       	smpsPSGAlterVol     $07
0008CE74 8006                       	dc.b	nRst, $06
0008CE76 E100                       	smpsAlterNote       $00
0008CE78 01                         	dc.b	$01
0008CE79 E104                       	smpsAlterNote       $04
0008CE7B 01                         	dc.b	$01
0008CE7C E100                       	smpsAlterNote       $00
0008CE7E 01                         	dc.b	$01
0008CE7F E1FA                       	smpsAlterNote       $FA
0008CE81 01                         	dc.b	$01
0008CE82 E1FD                       	smpsAlterNote       $FD
0008CE84 ECF5                       	smpsPSGAlterVol     $F5
0008CE86 9206                       	dc.b	nF1, $06
0008CE88 EC04                       	smpsPSGAlterVol     $04
0008CE8A E701                       	dc.b	smpsNoAttack, $01
0008CE8C EC07                       	smpsPSGAlterVol     $07
0008CE8E 8003                       	dc.b	nRst, $03
0008CE90 ECF5                       	smpsPSGAlterVol     $F5
0008CE92 9107                       	dc.b	nE1, $07
0008CE94 EC0B                       	smpsPSGAlterVol     $0B
0008CE96 8006                       	dc.b	nRst, $06
0008CE98 E100                       	smpsAlterNote       $00
0008CE9A 01                         	dc.b	$01
0008CE9B E103                       	smpsAlterNote       $03
0008CE9D 0101                       	dc.b	$01, $01
0008CE9F E1FD                       	smpsAlterNote       $FD
0008CEA1 01                         	dc.b	$01
0008CEA2 ECF5                       	smpsPSGAlterVol     $F5
0008CEA4 9207                       	dc.b	nF1, $07
0008CEA6 EC0B                       	smpsPSGAlterVol     $0B
0008CEA8 8004                       	dc.b	nRst, $04
0008CEAA ECF5                       	smpsPSGAlterVol     $F5
0008CEAC 9206                       	dc.b	nF1, $06
0008CEAE EC04                       	smpsPSGAlterVol     $04
0008CEB0 E701                       	dc.b	smpsNoAttack, $01
0008CEB2 EC07                       	smpsPSGAlterVol     $07
0008CEB4 8006                       	dc.b	nRst, $06
0008CEB6 E103                       	smpsAlterNote       $03
0008CEB8 01                         	dc.b	$01
0008CEB9 E104                       	smpsAlterNote       $04
0008CEBB 01                         	dc.b	$01
0008CEBC E100                       	smpsAlterNote       $00
0008CEBE 01                         	dc.b	$01
0008CEBF E1FB                       	smpsAlterNote       $FB
0008CEC1 01                         	dc.b	$01
0008CEC2 E1FD                       	smpsAlterNote       $FD
0008CEC4 ECF5                       	smpsPSGAlterVol     $F5
0008CEC6 9406                       	dc.b	nG1, $06
0008CEC8 EC04                       	smpsPSGAlterVol     $04
0008CECA E701                       	dc.b	smpsNoAttack, $01
0008CECC EC07                       	smpsPSGAlterVol     $07
0008CECE 8003                       	dc.b	nRst, $03
0008CED0 ECF5                       	smpsPSGAlterVol     $F5
0008CED2 9406                       	dc.b	nG1, $06
0008CED4 EC04                       	smpsPSGAlterVol     $04
0008CED6 E701                       	dc.b	smpsNoAttack, $01
0008CED8 EC07                       	smpsPSGAlterVol     $07
0008CEDA 8006                       	dc.b	nRst, $06
0008CEDC E100                       	smpsAlterNote       $00
0008CEDE 01                         	dc.b	$01
0008CEDF E104                       	smpsAlterNote       $04
0008CEE1 01                         	dc.b	$01
0008CEE2 E100                       	smpsAlterNote       $00
0008CEE4 01                         	dc.b	$01
0008CEE5 E1FD                       	smpsAlterNote       $FD
0008CEE7 01                         	dc.b	$01
0008CEE8 ECF5                       	smpsPSGAlterVol     $F5
0008CEEA 9206                       	dc.b	nF1, $06
0008CEEC EC04                       	smpsPSGAlterVol     $04
0008CEEE E701                       	dc.b	smpsNoAttack, $01
0008CEF0 EC07                       	smpsPSGAlterVol     $07
0008CEF2 8003                       	dc.b	nRst, $03
0008CEF4 ECF5                       	smpsPSGAlterVol     $F5
0008CEF6 9207                       	dc.b	nF1, $07
0008CEF8 EC0B                       	smpsPSGAlterVol     $0B
0008CEFA 8007                       	dc.b	nRst, $07
0008CEFC E103                       	smpsAlterNote       $03
0008CEFE 0101                       	dc.b	$01, $01
0008CF00 E1FD                       	smpsAlterNote       $FD
0008CF02 01                         	dc.b	$01
0008CF03 E1FA                       	smpsAlterNote       $FA
0008CF05 01                         	dc.b	$01
0008CF06 E1FD                       	smpsAlterNote       $FD
0008CF08 ECF5                       	smpsPSGAlterVol     $F5
0008CF0A 9206                       	dc.b	nF1, $06
0008CF0C EC0B                       	smpsPSGAlterVol     $0B
0008CF0E 8004                       	dc.b	nRst, $04
0008CF10 ECF5                       	smpsPSGAlterVol     $F5
0008CF12 9206                       	dc.b	nF1, $06
0008CF14 EC04                       	smpsPSGAlterVol     $04
0008CF16 E701                       	dc.b	smpsNoAttack, $01
0008CF18 EC07                       	smpsPSGAlterVol     $07
0008CF1A 8006                       	dc.b	nRst, $06
0008CF1C E100                       	smpsAlterNote       $00
0008CF1E 01                         	dc.b	$01
0008CF1F E104                       	smpsAlterNote       $04
0008CF21 01                         	dc.b	$01
0008CF22 E100                       	smpsAlterNote       $00
0008CF24 01                         	dc.b	$01
0008CF25 E1FA                       	smpsAlterNote       $FA
0008CF27 01                         	dc.b	$01
0008CF28 E1FD                       	smpsAlterNote       $FD
0008CF2A ECF5                       	smpsPSGAlterVol     $F5
0008CF2C 9206                       	dc.b	nF1, $06
0008CF2E EC04                       	smpsPSGAlterVol     $04
0008CF30 E704                       	dc.b	smpsNoAttack, $04
0008CF32 ECFC                       	smpsPSGAlterVol     $FC
0008CF34 9207                       	dc.b	nF1, $07
0008CF36 EC0B                       	smpsPSGAlterVol     $0B
0008CF38 8006                       	dc.b	nRst, $06
0008CF3A E100                       	smpsAlterNote       $00
0008CF3C 01                         	dc.b	$01
0008CF3D E104                       	smpsAlterNote       $04
0008CF3F 01                         	dc.b	$01
0008CF40 E103                       	smpsAlterNote       $03
0008CF42 01                         	dc.b	$01
0008CF43 E1FD                       	smpsAlterNote       $FD
0008CF45 01                         	dc.b	$01
0008CF46 ECF5                       	smpsPSGAlterVol     $F5
0008CF48 9207                       	dc.b	nF1, $07
0008CF4A EC0B                       	smpsPSGAlterVol     $0B
0008CF4C 8004                       	dc.b	nRst, $04
0008CF4E ECF5                       	smpsPSGAlterVol     $F5
0008CF50 9206                       	dc.b	nF1, $06
0008CF52 EC0B                       	smpsPSGAlterVol     $0B
0008CF54 8007                       	dc.b	nRst, $07
0008CF56 E103                       	smpsAlterNote       $03
0008CF58 0101                       	dc.b	$01, $01
0008CF5A E100                       	smpsAlterNote       $00
0008CF5C 01                         	dc.b	$01
0008CF5D E1FA                       	smpsAlterNote       $FA
0008CF5F 01                         	dc.b	$01
0008CF60 E1FD                       	smpsAlterNote       $FD
0008CF62 ECF5                       	smpsPSGAlterVol     $F5
0008CF64 9206                       	dc.b	nF1, $06
0008CF66 EC04                       	smpsPSGAlterVol     $04
0008CF68 E704                       	dc.b	smpsNoAttack, $04
0008CF6A ECFC                       	smpsPSGAlterVol     $FC
0008CF6C 9206                       	dc.b	nF1, $06
0008CF6E EC04                       	smpsPSGAlterVol     $04
0008CF70 E701                       	dc.b	smpsNoAttack, $01
0008CF72 EC07                       	smpsPSGAlterVol     $07
0008CF74 8006                       	dc.b	nRst, $06
0008CF76 E100                       	smpsAlterNote       $00
0008CF78 01                         	dc.b	$01
0008CF79 E104                       	smpsAlterNote       $04
0008CF7B 01                         	dc.b	$01
0008CF7C E100                       	smpsAlterNote       $00
0008CF7E 01                         	dc.b	$01
0008CF7F E1FD                       	smpsAlterNote       $FD
0008CF81 01                         	dc.b	$01
0008CF82 ECF5                       	smpsPSGAlterVol     $F5
0008CF84 9206                       	dc.b	nF1, $06
0008CF86 EC04                       	smpsPSGAlterVol     $04
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A EC07                       	smpsPSGAlterVol     $07
0008CF8C 8003                       	dc.b	nRst, $03
0008CF8E ECF5                       	smpsPSGAlterVol     $F5
0008CF90 9207                       	dc.b	nF1, $07
0008CF92 EC0B                       	smpsPSGAlterVol     $0B
0008CF94 8007                       	dc.b	nRst, $07
0008CF96 E103                       	smpsAlterNote       $03
0008CF98 0101                       	dc.b	$01, $01
0008CF9A E1FD                       	smpsAlterNote       $FD
0008CF9C 01                         	dc.b	$01
0008CF9D E1FA                       	smpsAlterNote       $FA
0008CF9F 01                         	dc.b	$01
0008CFA0 E1FD                       	smpsAlterNote       $FD
0008CFA2 ECF5                       	smpsPSGAlterVol     $F5
0008CFA4 9106                       	dc.b	nE1, $06
0008CFA6 EC0B                       	smpsPSGAlterVol     $0B
0008CFA8 8004                       	dc.b	nRst, $04
0008CFAA ECF5                       	smpsPSGAlterVol     $F5
0008CFAC 9106                       	dc.b	nE1, $06
0008CFAE EC04                       	smpsPSGAlterVol     $04
0008CFB0 E701                       	dc.b	smpsNoAttack, $01
0008CFB2 EC07                       	smpsPSGAlterVol     $07
0008CFB4 8006                       	dc.b	nRst, $06
0008CFB6 E100                       	smpsAlterNote       $00
0008CFB8 01                         	dc.b	$01
0008CFB9 E104                       	smpsAlterNote       $04
0008CFBB 01                         	dc.b	$01
0008CFBC E100                       	smpsAlterNote       $00
0008CFBE 01                         	dc.b	$01
0008CFBF E1FA                       	smpsAlterNote       $FA
0008CFC1 01                         	dc.b	$01
0008CFC2 E1FD                       	smpsAlterNote       $FD
0008CFC4 ECF5                       	smpsPSGAlterVol     $F5
0008CFC6 9106                       	dc.b	nE1, $06
0008CFC8 EC04                       	smpsPSGAlterVol     $04
0008CFCA E701                       	dc.b	smpsNoAttack, $01
0008CFCC EC07                       	smpsPSGAlterVol     $07
0008CFCE 8003                       	dc.b	nRst, $03
0008CFD0 ECF5                       	smpsPSGAlterVol     $F5
0008CFD2 9106                       	dc.b	nE1, $06
0008CFD4 EC04                       	smpsPSGAlterVol     $04
0008CFD6 E701                       	dc.b	smpsNoAttack, $01
0008CFD8 EC07                       	smpsPSGAlterVol     $07
0008CFDA 8006                       	dc.b	nRst, $06
0008CFDC E100                       	smpsAlterNote       $00
0008CFDE 01                         	dc.b	$01
0008CFDF E104                       	smpsAlterNote       $04
0008CFE1 01                         	dc.b	$01
0008CFE2 E103                       	smpsAlterNote       $03
0008CFE4 01                         	dc.b	$01
0008CFE5 E1FD                       	smpsAlterNote       $FD
0008CFE7 01                         	dc.b	$01
0008CFE8 ECF5                       	smpsPSGAlterVol     $F5
0008CFEA 9107                       	dc.b	nE1, $07
0008CFEC EC0B                       	smpsPSGAlterVol     $0B
0008CFEE 8004                       	dc.b	nRst, $04
0008CFF0 ECF5                       	smpsPSGAlterVol     $F5
0008CFF2 9106                       	dc.b	nE1, $06
0008CFF4 EC0B                       	smpsPSGAlterVol     $0B
0008CFF6 8007                       	dc.b	nRst, $07
0008CFF8 E103                       	smpsAlterNote       $03
0008CFFA 0101                       	dc.b	$01, $01
0008CFFC E100                       	smpsAlterNote       $00
0008CFFE 01                         	dc.b	$01
0008CFFF E1FA                       	smpsAlterNote       $FA
0008D001 01                         	dc.b	$01
0008D002 E1FD                       	smpsAlterNote       $FD
0008D004 ECF5                       	smpsPSGAlterVol     $F5
0008D006 9106                       	dc.b	nE1, $06
0008D008 EC04                       	smpsPSGAlterVol     $04
0008D00A E701                       	dc.b	smpsNoAttack, $01
0008D00C EC07                       	smpsPSGAlterVol     $07
0008D00E 8003                       	dc.b	nRst, $03
0008D010 ECF5                       	smpsPSGAlterVol     $F5
0008D012 9106                       	dc.b	nE1, $06
0008D014 EC04                       	smpsPSGAlterVol     $04
0008D016 E701                       	dc.b	smpsNoAttack, $01
0008D018 EC07                       	smpsPSGAlterVol     $07
0008D01A 8003                       	dc.b	nRst, $03
0008D01C ECF5                       	smpsPSGAlterVol     $F5
0008D01E 9207                       	dc.b	nF1, $07
0008D020 EC0B                       	smpsPSGAlterVol     $0B
0008D022 8006                       	dc.b	nRst, $06
0008D024 E100                       	smpsAlterNote       $00
0008D026 01                         	dc.b	$01
0008D027 E104                       	smpsAlterNote       $04
0008D029 01                         	dc.b	$01
0008D02A E103                       	smpsAlterNote       $03
0008D02C 01                         	dc.b	$01
0008D02D E1FD                       	smpsAlterNote       $FD
0008D02F 01                         	dc.b	$01
0008D030 E1F9                       	smpsAlterNote       $F9
0008D032 01                         	dc.b	$01
0008D033 E1FD                       	smpsAlterNote       $FD
0008D035 01                         	dc.b	$01
0008D036 E100                       	smpsAlterNote       $00
0008D038 01                         	dc.b	$01
0008D039 E104                       	smpsAlterNote       $04
0008D03B 01                         	dc.b	$01
0008D03C E1FD                       	smpsAlterNote       $FD
0008D03E ECF5                       	smpsPSGAlterVol     $F5
0008D040 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D044 EC04                       	smpsPSGAlterVol     $04
0008D046 E701                       	dc.b	smpsNoAttack, $01
0008D048 EC07                       	smpsPSGAlterVol     $07
0008D04A 8009                       	dc.b	nRst, $09
0008D04C E100                       	smpsAlterNote       $00
0008D04E 01                         	dc.b	$01
0008D04F E104                       	smpsAlterNote       $04
0008D051 01                         	dc.b	$01
0008D052 E103                       	smpsAlterNote       $03
0008D054 01                         	dc.b	$01
0008D055 E1FD                       	smpsAlterNote       $FD
0008D057 01                         	dc.b	$01
0008D058 E1F9                       	smpsAlterNote       $F9
0008D05A 01                         	dc.b	$01
0008D05B E1FD                       	smpsAlterNote       $FD
0008D05D 01                         	dc.b	$01
0008D05E E100                       	smpsAlterNote       $00
0008D060 01                         	dc.b	$01
0008D061 E104                       	smpsAlterNote       $04
0008D063 01                         	dc.b	$01
0008D064 E100                       	smpsAlterNote       $00
0008D066 01                         	dc.b	$01
0008D067 E1FA                       	smpsAlterNote       $FA
0008D069 01                         	dc.b	$01
0008D06A E1F9                       	smpsAlterNote       $F9
0008D06C 01                         	dc.b	$01
0008D06D E1FD                       	smpsAlterNote       $FD
0008D06F 01                         	dc.b	$01
0008D070 E103                       	smpsAlterNote       $03
0008D072 0101                       	dc.b	$01, $01
0008D074 E100                       	smpsAlterNote       $00
0008D076 01                         	dc.b	$01
0008D077 E1FD                       	smpsAlterNote       $FD
0008D079 ECF5                       	smpsPSGAlterVol     $F5
0008D07B 9202                       	dc.b	nF1, $02
0008D07D EC04                       	smpsPSGAlterVol     $04
0008D07F E701                       	dc.b	smpsNoAttack, $01
0008D081 ECFC                       	smpsPSGAlterVol     $FC
0008D083 9106                       	dc.b	nE1, $06
0008D085 EC04                       	smpsPSGAlterVol     $04
0008D087 E701                       	dc.b	smpsNoAttack, $01
0008D089 EC07                       	smpsPSGAlterVol     $07
0008D08B 8006                       	dc.b	nRst, $06
0008D08D E100                       	smpsAlterNote       $00
0008D08F 01                         	dc.b	$01
0008D090 E104                       	smpsAlterNote       $04
0008D092 01                         	dc.b	$01
0008D093 E100                       	smpsAlterNote       $00
0008D095 01                         	dc.b	$01
0008D096 E1FD                       	smpsAlterNote       $FD
0008D098 01                         	dc.b	$01
0008D099 E1F9                       	smpsAlterNote       $F9
0008D09B 01                         	dc.b	$01
0008D09C E1FD                       	smpsAlterNote       $FD
0008D09E 01                         	dc.b	$01
0008D09F E103                       	smpsAlterNote       $03
0008D0A1 01                         	dc.b	$01
0008D0A2 E104                       	smpsAlterNote       $04
0008D0A4 01                         	dc.b	$01
0008D0A5 E1FD                       	smpsAlterNote       $FD
0008D0A7 ECF5                       	smpsPSGAlterVol     $F5
0008D0A9 9102                       	dc.b	nE1, $02
0008D0AB EC04                       	smpsPSGAlterVol     $04
0008D0AD E701                       	dc.b	smpsNoAttack, $01
0008D0AF ECFC                       	smpsPSGAlterVol     $FC
0008D0B1 920D                       	dc.b	nF1, $0D
0008D0B3 E100                       	smpsAlterNote       $00
0008D0B5 E701                       	dc.b	smpsNoAttack, $01
0008D0B7 E104                       	smpsAlterNote       $04
0008D0B9 E701                       	dc.b	smpsNoAttack, $01
0008D0BB E100                       	smpsAlterNote       $00
0008D0BD E701                       	dc.b	smpsNoAttack, $01
0008D0BF E1FD                       	smpsAlterNote       $FD
0008D0C1 E701                       	dc.b	smpsNoAttack, $01
0008D0C3 E1F9                       	smpsAlterNote       $F9
0008D0C5 E701                       	dc.b	smpsNoAttack, $01
0008D0C7 E1FD                       	smpsAlterNote       $FD
0008D0C9 E701                       	dc.b	smpsNoAttack, $01
0008D0CB E103                       	smpsAlterNote       $03
0008D0CD E701                       	dc.b	smpsNoAttack, $01
0008D0CF E104                       	smpsAlterNote       $04
0008D0D1 E701                       	dc.b	smpsNoAttack, $01
0008D0D3 E100                       	smpsAlterNote       $00
0008D0D5 E701                       	dc.b	smpsNoAttack, $01
0008D0D7 E1FA                       	smpsAlterNote       $FA
0008D0D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0DD E1FD                       	smpsAlterNote       $FD
0008D0DF E701                       	dc.b	smpsNoAttack, $01
0008D0E1 E103                       	smpsAlterNote       $03
0008D0E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0E7 E1FD                       	smpsAlterNote       $FD
0008D0E9 E701                       	dc.b	smpsNoAttack, $01
0008D0EB E1F9                       	smpsAlterNote       $F9
0008D0ED E701                       	dc.b	smpsNoAttack, $01
0008D0EF E1FA                       	smpsAlterNote       $FA
0008D0F1 E701                       	dc.b	smpsNoAttack, $01
0008D0F3 E100                       	smpsAlterNote       $00
0008D0F5 EC04                       	smpsPSGAlterVol     $04
0008D0F7 E701                       	dc.b	smpsNoAttack, $01
0008D0F9 EC07                       	smpsPSGAlterVol     $07
0008D0FB E104                       	smpsAlterNote       $04
0008D0FD 8001                       	dc.b	nRst, $01
0008D0FF E100                       	smpsAlterNote       $00
0008D101 01                         	dc.b	$01
0008D102 E1FD                       	smpsAlterNote       $FD
0008D104 01                         	dc.b	$01
0008D105 E1F9                       	smpsAlterNote       $F9
0008D107 01                         	dc.b	$01
0008D108 E1FD                       	smpsAlterNote       $FD
0008D10A 01                         	dc.b	$01
0008D10B E103                       	smpsAlterNote       $03
0008D10D 01                         	dc.b	$01
0008D10E E104                       	smpsAlterNote       $04
0008D110 01                         	dc.b	$01
0008D111 E1FD                       	smpsAlterNote       $FD
0008D113 ECF5                       	smpsPSGAlterVol     $F5
0008D115 9106                       	dc.b	nE1, $06
0008D117 EC04                       	smpsPSGAlterVol     $04
0008D119 E701                       	dc.b	smpsNoAttack, $01
0008D11B EC07                       	smpsPSGAlterVol     $07
0008D11D 8003                       	dc.b	nRst, $03
0008D11F ECF5                       	smpsPSGAlterVol     $F5
0008D121 9106                       	dc.b	nE1, $06
0008D123 EC04                       	smpsPSGAlterVol     $04
0008D125 E701                       	dc.b	smpsNoAttack, $01
0008D127 EC07                       	smpsPSGAlterVol     $07
0008D129 8006                       	dc.b	nRst, $06
0008D12B E100                       	smpsAlterNote       $00
0008D12D 01                         	dc.b	$01
0008D12E E104                       	smpsAlterNote       $04
0008D130 01                         	dc.b	$01
0008D131 E100                       	smpsAlterNote       $00
0008D133 01                         	dc.b	$01
0008D134 E1FA                       	smpsAlterNote       $FA
0008D136 01                         	dc.b	$01
0008D137 E1FD                       	smpsAlterNote       $FD
0008D139 ECF5                       	smpsPSGAlterVol     $F5
0008D13B 9206                       	dc.b	nF1, $06
0008D13D EC04                       	smpsPSGAlterVol     $04
0008D13F E701                       	dc.b	smpsNoAttack, $01
0008D141 EC07                       	smpsPSGAlterVol     $07
0008D143 8003                       	dc.b	nRst, $03
0008D145 ECF5                       	smpsPSGAlterVol     $F5
0008D147 9207                       	dc.b	nF1, $07
0008D149 EC0B                       	smpsPSGAlterVol     $0B
0008D14B 8006                       	dc.b	nRst, $06
0008D14D E100                       	smpsAlterNote       $00
0008D14F 01                         	dc.b	$01
0008D150 E103                       	smpsAlterNote       $03
0008D152 0101                       	dc.b	$01, $01
0008D154 E1FD                       	smpsAlterNote       $FD
0008D156 01                         	dc.b	$01
0008D157 ECF5                       	smpsPSGAlterVol     $F5
0008D159 9107                       	dc.b	nE1, $07
0008D15B EC0B                       	smpsPSGAlterVol     $0B
0008D15D 8004                       	dc.b	nRst, $04
0008D15F ECF5                       	smpsPSGAlterVol     $F5
0008D161 9106                       	dc.b	nE1, $06
0008D163 EC04                       	smpsPSGAlterVol     $04
0008D165 E701                       	dc.b	smpsNoAttack, $01
0008D167 EC07                       	smpsPSGAlterVol     $07
0008D169 8006                       	dc.b	nRst, $06
0008D16B E103                       	smpsAlterNote       $03
0008D16D 01                         	dc.b	$01
0008D16E E104                       	smpsAlterNote       $04
0008D170 01                         	dc.b	$01
0008D171 E100                       	smpsAlterNote       $00
0008D173 01                         	dc.b	$01
0008D174 E1FA                       	smpsAlterNote       $FA
0008D176 01                         	dc.b	$01
0008D177 E1FD                       	smpsAlterNote       $FD
0008D179 ECF5                       	smpsPSGAlterVol     $F5
0008D17B 9106                       	dc.b	nE1, $06
0008D17D EC04                       	smpsPSGAlterVol     $04
0008D17F E701                       	dc.b	smpsNoAttack, $01
0008D181 EC07                       	smpsPSGAlterVol     $07
0008D183 8003                       	dc.b	nRst, $03
0008D185 ECF5                       	smpsPSGAlterVol     $F5
0008D187 9106                       	dc.b	nE1, $06
0008D189 EC04                       	smpsPSGAlterVol     $04
0008D18B E701                       	dc.b	smpsNoAttack, $01
0008D18D EC07                       	smpsPSGAlterVol     $07
0008D18F 8003                       	dc.b	nRst, $03
0008D191 ECF5                       	smpsPSGAlterVol     $F5
0008D193 9207                       	dc.b	nF1, $07
0008D195 EC0B                       	smpsPSGAlterVol     $0B
0008D197 8006                       	dc.b	nRst, $06
0008D199 E100                       	smpsAlterNote       $00
0008D19B 01                         	dc.b	$01
0008D19C E103                       	smpsAlterNote       $03
0008D19E 0101                       	dc.b	$01, $01
0008D1A0 E1FD                       	smpsAlterNote       $FD
0008D1A2 01                         	dc.b	$01
0008D1A3 E1F9                       	smpsAlterNote       $F9
0008D1A5 01                         	dc.b	$01
0008D1A6 E1FA                       	smpsAlterNote       $FA
0008D1A8 01                         	dc.b	$01
0008D1A9 E100                       	smpsAlterNote       $00
0008D1AB 01                         	dc.b	$01
0008D1AC E104                       	smpsAlterNote       $04
0008D1AE 01                         	dc.b	$01
0008D1AF E1FD                       	smpsAlterNote       $FD
0008D1B1 ECF5                       	smpsPSGAlterVol     $F5
0008D1B3 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D1B7 EC04                       	smpsPSGAlterVol     $04
0008D1B9 E701                       	dc.b	smpsNoAttack, $01
0008D1BB EC07                       	smpsPSGAlterVol     $07
0008D1BD 8009                       	dc.b	nRst, $09
0008D1BF E100                       	smpsAlterNote       $00
0008D1C1 01                         	dc.b	$01
0008D1C2 E103                       	smpsAlterNote       $03
0008D1C4 0101                       	dc.b	$01, $01
0008D1C6 E1FD                       	smpsAlterNote       $FD
0008D1C8 01                         	dc.b	$01
0008D1C9 E1F9                       	smpsAlterNote       $F9
0008D1CB 01                         	dc.b	$01
0008D1CC E1FA                       	smpsAlterNote       $FA
0008D1CE 01                         	dc.b	$01
0008D1CF E100                       	smpsAlterNote       $00
0008D1D1 01                         	dc.b	$01
0008D1D2 E104                       	smpsAlterNote       $04
0008D1D4 01                         	dc.b	$01
0008D1D5 E100                       	smpsAlterNote       $00
0008D1D7 01                         	dc.b	$01
0008D1D8 E1FD                       	smpsAlterNote       $FD
0008D1DA 01                         	dc.b	$01
0008D1DB E1F9                       	smpsAlterNote       $F9
0008D1DD 01                         	dc.b	$01
0008D1DE E1FD                       	smpsAlterNote       $FD
0008D1E0 01                         	dc.b	$01
0008D1E1 E103                       	smpsAlterNote       $03
0008D1E3 01                         	dc.b	$01
0008D1E4 E104                       	smpsAlterNote       $04
0008D1E6 01                         	dc.b	$01
0008D1E7 E100                       	smpsAlterNote       $00
0008D1E9 01                         	dc.b	$01
0008D1EA E1FD                       	smpsAlterNote       $FD
0008D1EC ECF5                       	smpsPSGAlterVol     $F5
0008D1EE 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008D1F2 EC04                       	smpsPSGAlterVol     $04
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 EC07                       	smpsPSGAlterVol     $07
0008D1F8 8006                       	dc.b	nRst, $06
0008D1FA E100                       	smpsAlterNote       $00
0008D1FC 01                         	dc.b	$01
0008D1FD E104                       	smpsAlterNote       $04
0008D1FF 01                         	dc.b	$01
0008D200 E103                       	smpsAlterNote       $03
0008D202 01                         	dc.b	$01
0008D203 E1FD                       	smpsAlterNote       $FD
0008D205 01                         	dc.b	$01
0008D206 E1F9                       	smpsAlterNote       $F9
0008D208 01                         	dc.b	$01
0008D209 E1FD                       	smpsAlterNote       $FD
0008D20B 01                         	dc.b	$01
0008D20C E100                       	smpsAlterNote       $00
0008D20E 01                         	dc.b	$01
0008D20F E104                       	smpsAlterNote       $04
0008D211 01                         	dc.b	$01
0008D212 E1FD                       	smpsAlterNote       $FD
0008D214 ECF5                       	smpsPSGAlterVol     $F5
0008D216 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008D21A E100                       	smpsAlterNote       $00
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E E104                       	smpsAlterNote       $04
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 E100                       	smpsAlterNote       $00
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 E1FD                       	smpsAlterNote       $FD
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E1F9                       	smpsAlterNote       $F9
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E E1FD                       	smpsAlterNote       $FD
0008D230 E701                       	dc.b	smpsNoAttack, $01
0008D232 E103                       	smpsAlterNote       $03
0008D234 E701                       	dc.b	smpsNoAttack, $01
0008D236 E104                       	smpsAlterNote       $04
0008D238 E701                       	dc.b	smpsNoAttack, $01
0008D23A E100                       	smpsAlterNote       $00
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E1FA                       	smpsAlterNote       $FA
0008D240 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D244 E1FD                       	smpsAlterNote       $FD
0008D246 E701                       	dc.b	smpsNoAttack, $01
0008D248 E103                       	smpsAlterNote       $03
0008D24A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D24E E100                       	smpsAlterNote       $00
0008D250 E701                       	dc.b	smpsNoAttack, $01
0008D252 E1FA                       	smpsAlterNote       $FA
0008D254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D258 E100                       	smpsAlterNote       $00
0008D25A EC04                       	smpsPSGAlterVol     $04
0008D25C E701                       	dc.b	smpsNoAttack, $01
0008D25E EC07                       	smpsPSGAlterVol     $07
0008D260 E104                       	smpsAlterNote       $04
0008D262 8001                       	dc.b	nRst, $01
0008D264 E103                       	smpsAlterNote       $03
0008D266 01                         	dc.b	$01
0008D267 E1FD                       	smpsAlterNote       $FD
0008D269 01                         	dc.b	$01
0008D26A E1F9                       	smpsAlterNote       $F9
0008D26C 01                         	dc.b	$01
0008D26D E1FD                       	smpsAlterNote       $FD
0008D26F 01                         	dc.b	$01
0008D270 E100                       	smpsAlterNote       $00
0008D272 01                         	dc.b	$01
0008D273 E104                       	smpsAlterNote       $04
0008D275 01                         	dc.b	$01
0008D276 E1FD                       	smpsAlterNote       $FD
0008D278 ECF5                       	smpsPSGAlterVol     $F5
0008D27A 9106                       	dc.b	nE1, $06
0008D27C EC04                       	smpsPSGAlterVol     $04
0008D27E E701                       	dc.b	smpsNoAttack, $01
0008D280 EC07                       	smpsPSGAlterVol     $07
0008D282 8003                       	dc.b	nRst, $03
0008D284 ECF5                       	smpsPSGAlterVol     $F5
0008D286 9106                       	dc.b	nE1, $06
0008D288 EC04                       	smpsPSGAlterVol     $04
0008D28A E701                       	dc.b	smpsNoAttack, $01
0008D28C EC07                       	smpsPSGAlterVol     $07
0008D28E 8006                       	dc.b	nRst, $06
0008D290 E100                       	smpsAlterNote       $00
0008D292 01                         	dc.b	$01
0008D293 E104                       	smpsAlterNote       $04
0008D295 01                         	dc.b	$01
0008D296 E100                       	smpsAlterNote       $00
0008D298 01                         	dc.b	$01
0008D299 E1FD                       	smpsAlterNote       $FD
0008D29B 01                         	dc.b	$01
0008D29C ECF5                       	smpsPSGAlterVol     $F5
0008D29E 9206                       	dc.b	nF1, $06
0008D2A0 EC04                       	smpsPSGAlterVol     $04
0008D2A2 E701                       	dc.b	smpsNoAttack, $01
0008D2A4 EC07                       	smpsPSGAlterVol     $07
0008D2A6 8003                       	dc.b	nRst, $03
0008D2A8 ECF5                       	smpsPSGAlterVol     $F5
0008D2AA 9207                       	dc.b	nF1, $07
0008D2AC EC0B                       	smpsPSGAlterVol     $0B
0008D2AE 8007                       	dc.b	nRst, $07
0008D2B0 E103                       	smpsAlterNote       $03
0008D2B2 0101                       	dc.b	$01, $01
0008D2B4 E1FD                       	smpsAlterNote       $FD
0008D2B6 01                         	dc.b	$01
0008D2B7 E1FA                       	smpsAlterNote       $FA
0008D2B9 01                         	dc.b	$01
0008D2BA E1FD                       	smpsAlterNote       $FD
0008D2BC ECF5                       	smpsPSGAlterVol     $F5
0008D2BE 9106                       	dc.b	nE1, $06
0008D2C0 EC0B                       	smpsPSGAlterVol     $0B
0008D2C2 8004                       	dc.b	nRst, $04
0008D2C4 ECF5                       	smpsPSGAlterVol     $F5
0008D2C6 9106                       	dc.b	nE1, $06
0008D2C8 EC04                       	smpsPSGAlterVol     $04
0008D2CA E701                       	dc.b	smpsNoAttack, $01
0008D2CC EC07                       	smpsPSGAlterVol     $07
0008D2CE 8006                       	dc.b	nRst, $06
0008D2D0 E100                       	smpsAlterNote       $00
0008D2D2 01                         	dc.b	$01
0008D2D3 E104                       	smpsAlterNote       $04
0008D2D5 01                         	dc.b	$01
0008D2D6 E100                       	smpsAlterNote       $00
0008D2D8 01                         	dc.b	$01
0008D2D9 E1FA                       	smpsAlterNote       $FA
0008D2DB 01                         	dc.b	$01
0008D2DC E1FD                       	smpsAlterNote       $FD
0008D2DE ECF5                       	smpsPSGAlterVol     $F5
0008D2E0 9206                       	dc.b	nF1, $06
0008D2E2 EC04                       	smpsPSGAlterVol     $04
0008D2E4 E701                       	dc.b	smpsNoAttack, $01
0008D2E6 EC07                       	smpsPSGAlterVol     $07
0008D2E8 8003                       	dc.b	nRst, $03
0008D2EA ECF5                       	smpsPSGAlterVol     $F5
0008D2EC 9206                       	dc.b	nF1, $06
0008D2EE EC04                       	smpsPSGAlterVol     $04
0008D2F0 E701                       	dc.b	smpsNoAttack, $01
0008D2F2 EC07                       	smpsPSGAlterVol     $07
0008D2F4 8006                       	dc.b	nRst, $06
0008D2F6 E100                       	smpsAlterNote       $00
0008D2F8 01                         	dc.b	$01
0008D2F9 E104                       	smpsAlterNote       $04
0008D2FB 01                         	dc.b	$01
0008D2FC E103                       	smpsAlterNote       $03
0008D2FE 01                         	dc.b	$01
0008D2FF E1FD                       	smpsAlterNote       $FD
0008D301 01                         	dc.b	$01
0008D302 ECF5                       	smpsPSGAlterVol     $F5
0008D304 9107                       	dc.b	nE1, $07
0008D306 EC0B                       	smpsPSGAlterVol     $0B
0008D308 8004                       	dc.b	nRst, $04
0008D30A ECF5                       	smpsPSGAlterVol     $F5
0008D30C 9106                       	dc.b	nE1, $06
0008D30E EC0B                       	smpsPSGAlterVol     $0B
0008D310 8007                       	dc.b	nRst, $07
0008D312 E103                       	smpsAlterNote       $03
0008D314 0101                       	dc.b	$01, $01
0008D316 E100                       	smpsAlterNote       $00
0008D318 01                         	dc.b	$01
0008D319 E1FA                       	smpsAlterNote       $FA
0008D31B 01                         	dc.b	$01
0008D31C E1FD                       	smpsAlterNote       $FD
0008D31E ECF5                       	smpsPSGAlterVol     $F5
0008D320 9206                       	dc.b	nF1, $06
0008D322 EC04                       	smpsPSGAlterVol     $04
0008D324 E701                       	dc.b	smpsNoAttack, $01
0008D326 EC07                       	smpsPSGAlterVol     $07
0008D328 8003                       	dc.b	nRst, $03
0008D32A ECF5                       	smpsPSGAlterVol     $F5
0008D32C 9206                       	dc.b	nF1, $06
0008D32E EC04                       	smpsPSGAlterVol     $04
0008D330 E701                       	dc.b	smpsNoAttack, $01
0008D332 EC07                       	smpsPSGAlterVol     $07
0008D334 8006                       	dc.b	nRst, $06
0008D336 E100                       	smpsAlterNote       $00
0008D338 01                         	dc.b	$01
0008D339 E104                       	smpsAlterNote       $04
0008D33B 01                         	dc.b	$01
0008D33C E100                       	smpsAlterNote       $00
0008D33E 01                         	dc.b	$01
0008D33F E1FD                       	smpsAlterNote       $FD
0008D341 01                         	dc.b	$01
0008D342 ECF5                       	smpsPSGAlterVol     $F5
0008D344 9106                       	dc.b	nE1, $06
0008D346 EC04                       	smpsPSGAlterVol     $04
0008D348 E701                       	dc.b	smpsNoAttack, $01
0008D34A EC07                       	smpsPSGAlterVol     $07
0008D34C 8003                       	dc.b	nRst, $03
0008D34E ECF5                       	smpsPSGAlterVol     $F5
0008D350 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008D354 EC04                       	smpsPSGAlterVol     $04
0008D356 E701                       	dc.b	smpsNoAttack, $01
0008D358 ECFC                       	smpsPSGAlterVol     $FC
0008D35A 9103                       	dc.b	nE1, $03
0008D35C EC04                       	smpsPSGAlterVol     $04
0008D35E E701                       	dc.b	smpsNoAttack, $01
0008D360 ECFC                       	smpsPSGAlterVol     $FC
0008D362 9102                       	dc.b	nE1, $02
0008D364 EC04                       	smpsPSGAlterVol     $04
0008D366 E701                       	dc.b	smpsNoAttack, $01
0008D368 ECFC                       	smpsPSGAlterVol     $FC
0008D36A 9103                       	dc.b	nE1, $03
0008D36C EC0B                       	smpsPSGAlterVol     $0B
0008D36E 800A                       	dc.b	nRst, $0A
0008D370 E100                       	smpsAlterNote       $00
0008D372 01                         	dc.b	$01
0008D373 E104                       	smpsAlterNote       $04
0008D375 01                         	dc.b	$01
0008D376 E100                       	smpsAlterNote       $00
0008D378 01                         	dc.b	$01
0008D379 E1FA                       	smpsAlterNote       $FA
0008D37B 01                         	dc.b	$01
0008D37C E1F9                       	smpsAlterNote       $F9
0008D37E 01                         	dc.b	$01
0008D37F E1FD                       	smpsAlterNote       $FD
0008D381 01                         	dc.b	$01
0008D382 E103                       	smpsAlterNote       $03
0008D384 0101                       	dc.b	$01, $01
0008D386 E100                       	smpsAlterNote       $00
0008D388 01                         	dc.b	$01
0008D389 E1FA                       	smpsAlterNote       $FA
0008D38B 0101                       	dc.b	$01, $01
0008D38D E1FD                       	smpsAlterNote       $FD
0008D38F ECF5                       	smpsPSGAlterVol     $F5
0008D391 9206                       	dc.b	nF1, $06
0008D393 EC04                       	smpsPSGAlterVol     $04
0008D395 E704                       	dc.b	smpsNoAttack, $04
0008D397 ECFC                       	smpsPSGAlterVol     $FC
0008D399 9206                       	dc.b	nF1, $06
0008D39B EC04                       	smpsPSGAlterVol     $04
0008D39D E701                       	dc.b	smpsNoAttack, $01
0008D39F EC07                       	smpsPSGAlterVol     $07
0008D3A1 8006                       	dc.b	nRst, $06
0008D3A3 E100                       	smpsAlterNote       $00
0008D3A5 01                         	dc.b	$01
0008D3A6 E104                       	smpsAlterNote       $04
0008D3A8 01                         	dc.b	$01
0008D3A9 E103                       	smpsAlterNote       $03
0008D3AB 01                         	dc.b	$01
0008D3AC E1FD                       	smpsAlterNote       $FD
0008D3AE 01                         	dc.b	$01
0008D3AF ECF5                       	smpsPSGAlterVol     $F5
0008D3B1 9407                       	dc.b	nG1, $07
0008D3B3 EC0B                       	smpsPSGAlterVol     $0B
0008D3B5 8004                       	dc.b	nRst, $04
0008D3B7 ECF5                       	smpsPSGAlterVol     $F5
0008D3B9 9406                       	dc.b	nG1, $06
0008D3BB EC0B                       	smpsPSGAlterVol     $0B
0008D3BD 8007                       	dc.b	nRst, $07
0008D3BF E103                       	smpsAlterNote       $03
0008D3C1 0101                       	dc.b	$01, $01
0008D3C3 E1FD                       	smpsAlterNote       $FD
0008D3C5 01                         	dc.b	$01
0008D3C6 E1F9                       	smpsAlterNote       $F9
0008D3C8 01                         	dc.b	$01
0008D3C9 E1FD                       	smpsAlterNote       $FD
0008D3CB ECF5                       	smpsPSGAlterVol     $F5
0008D3CD 9206                       	dc.b	nF1, $06
0008D3CF EC04                       	smpsPSGAlterVol     $04
0008D3D1 E701                       	dc.b	smpsNoAttack, $01
0008D3D3 EC07                       	smpsPSGAlterVol     $07
0008D3D5 8003                       	dc.b	nRst, $03
0008D3D7 ECF5                       	smpsPSGAlterVol     $F5
0008D3D9 9206                       	dc.b	nF1, $06
0008D3DB EC04                       	smpsPSGAlterVol     $04
0008D3DD E701                       	dc.b	smpsNoAttack, $01
0008D3DF EC07                       	smpsPSGAlterVol     $07
0008D3E1 8006                       	dc.b	nRst, $06
0008D3E3 E100                       	smpsAlterNote       $00
0008D3E5 01                         	dc.b	$01
0008D3E6 E104                       	smpsAlterNote       $04
0008D3E8 01                         	dc.b	$01
0008D3E9 E100                       	smpsAlterNote       $00
0008D3EB 01                         	dc.b	$01
0008D3EC E1FA                       	smpsAlterNote       $FA
0008D3EE 01                         	dc.b	$01
0008D3EF E1FD                       	smpsAlterNote       $FD
0008D3F1 ECF5                       	smpsPSGAlterVol     $F5
0008D3F3 9206                       	dc.b	nF1, $06
0008D3F5 EC04                       	smpsPSGAlterVol     $04
0008D3F7 E701                       	dc.b	smpsNoAttack, $01
0008D3F9 EC07                       	smpsPSGAlterVol     $07
0008D3FB 8003                       	dc.b	nRst, $03
0008D3FD ECF5                       	smpsPSGAlterVol     $F5
0008D3FF 9107                       	dc.b	nE1, $07
0008D401 EC0B                       	smpsPSGAlterVol     $0B
0008D403 8006                       	dc.b	nRst, $06
0008D405 E100                       	smpsAlterNote       $00
0008D407 01                         	dc.b	$01
0008D408 E103                       	smpsAlterNote       $03
0008D40A 0101                       	dc.b	$01, $01
0008D40C E1FD                       	smpsAlterNote       $FD
0008D40E 01                         	dc.b	$01
0008D40F ECF5                       	smpsPSGAlterVol     $F5
0008D411 9207                       	dc.b	nF1, $07
0008D413 EC0B                       	smpsPSGAlterVol     $0B
0008D415 8004                       	dc.b	nRst, $04
0008D417 ECF5                       	smpsPSGAlterVol     $F5
0008D419 9206                       	dc.b	nF1, $06
0008D41B EC04                       	smpsPSGAlterVol     $04
0008D41D E701                       	dc.b	smpsNoAttack, $01
0008D41F EC07                       	smpsPSGAlterVol     $07
0008D421 8006                       	dc.b	nRst, $06
0008D423 E103                       	smpsAlterNote       $03
0008D425 01                         	dc.b	$01
0008D426 E104                       	smpsAlterNote       $04
0008D428 01                         	dc.b	$01
0008D429 E100                       	smpsAlterNote       $00
0008D42B 01                         	dc.b	$01
0008D42C E1FB                       	smpsAlterNote       $FB
0008D42E 01                         	dc.b	$01
0008D42F E1FD                       	smpsAlterNote       $FD
0008D431 ECF5                       	smpsPSGAlterVol     $F5
0008D433 9406                       	dc.b	nG1, $06
0008D435 EC04                       	smpsPSGAlterVol     $04
0008D437 E701                       	dc.b	smpsNoAttack, $01
0008D439 EC07                       	smpsPSGAlterVol     $07
0008D43B 8003                       	dc.b	nRst, $03
0008D43D ECF5                       	smpsPSGAlterVol     $F5
0008D43F 9406                       	dc.b	nG1, $06
0008D441 EC04                       	smpsPSGAlterVol     $04
0008D443 E701                       	dc.b	smpsNoAttack, $01
0008D445 EC07                       	smpsPSGAlterVol     $07
0008D447 8006                       	dc.b	nRst, $06
0008D449 E100                       	smpsAlterNote       $00
0008D44B 01                         	dc.b	$01
0008D44C E104                       	smpsAlterNote       $04
0008D44E 01                         	dc.b	$01
0008D44F E100                       	smpsAlterNote       $00
0008D451 01                         	dc.b	$01
0008D452 E1FD                       	smpsAlterNote       $FD
0008D454 01                         	dc.b	$01
0008D455 ECF5                       	smpsPSGAlterVol     $F5
0008D457 9206                       	dc.b	nF1, $06
0008D459 EC04                       	smpsPSGAlterVol     $04
0008D45B E701                       	dc.b	smpsNoAttack, $01
0008D45D EC07                       	smpsPSGAlterVol     $07
0008D45F 8003                       	dc.b	nRst, $03
0008D461 ECF5                       	smpsPSGAlterVol     $F5
0008D463 9207                       	dc.b	nF1, $07
0008D465 EC0B                       	smpsPSGAlterVol     $0B
0008D467 8007                       	dc.b	nRst, $07
0008D469 E103                       	smpsAlterNote       $03
0008D46B 0101                       	dc.b	$01, $01
0008D46D E1FD                       	smpsAlterNote       $FD
0008D46F 01                         	dc.b	$01
0008D470 E1FA                       	smpsAlterNote       $FA
0008D472 01                         	dc.b	$01
0008D473 E1FD                       	smpsAlterNote       $FD
0008D475 ECF5                       	smpsPSGAlterVol     $F5
0008D477 9206                       	dc.b	nF1, $06
0008D479 EC0B                       	smpsPSGAlterVol     $0B
0008D47B 8004                       	dc.b	nRst, $04
0008D47D ECF5                       	smpsPSGAlterVol     $F5
0008D47F 9206                       	dc.b	nF1, $06
0008D481 EC04                       	smpsPSGAlterVol     $04
0008D483 E701                       	dc.b	smpsNoAttack, $01
0008D485 EC07                       	smpsPSGAlterVol     $07
0008D487 8006                       	dc.b	nRst, $06
0008D489 E100                       	smpsAlterNote       $00
0008D48B 01                         	dc.b	$01
0008D48C E104                       	smpsAlterNote       $04
0008D48E 01                         	dc.b	$01
0008D48F E100                       	smpsAlterNote       $00
0008D491 01                         	dc.b	$01
0008D492 E1FA                       	smpsAlterNote       $FA
0008D494 01                         	dc.b	$01
0008D495 E1FD                       	smpsAlterNote       $FD
0008D497 ECF5                       	smpsPSGAlterVol     $F5
0008D499 9206                       	dc.b	nF1, $06
0008D49B EC04                       	smpsPSGAlterVol     $04
0008D49D E701                       	dc.b	smpsNoAttack, $01
0008D49F EC07                       	smpsPSGAlterVol     $07
0008D4A1 8003                       	dc.b	nRst, $03
0008D4A3 ECF5                       	smpsPSGAlterVol     $F5
0008D4A5 9207                       	dc.b	nF1, $07
0008D4A7 EC0B                       	smpsPSGAlterVol     $0B
0008D4A9 8006                       	dc.b	nRst, $06
0008D4AB E100                       	smpsAlterNote       $00
0008D4AD 01                         	dc.b	$01
0008D4AE E103                       	smpsAlterNote       $03
0008D4B0 0101                       	dc.b	$01, $01
0008D4B2 E1FD                       	smpsAlterNote       $FD
0008D4B4 01                         	dc.b	$01
0008D4B5 ECF5                       	smpsPSGAlterVol     $F5
0008D4B7 9207                       	dc.b	nF1, $07
0008D4B9 EC0B                       	smpsPSGAlterVol     $0B
0008D4BB 8004                       	dc.b	nRst, $04
0008D4BD ECF5                       	smpsPSGAlterVol     $F5
0008D4BF 9206                       	dc.b	nF1, $06
0008D4C1 EC0B                       	smpsPSGAlterVol     $0B
0008D4C3 8007                       	dc.b	nRst, $07
0008D4C5 E103                       	smpsAlterNote       $03
0008D4C7 0101                       	dc.b	$01, $01
0008D4C9 E100                       	smpsAlterNote       $00
0008D4CB 01                         	dc.b	$01
0008D4CC E1FA                       	smpsAlterNote       $FA
0008D4CE 01                         	dc.b	$01
0008D4CF E1FD                       	smpsAlterNote       $FD
0008D4D1 ECF5                       	smpsPSGAlterVol     $F5
0008D4D3 9206                       	dc.b	nF1, $06
0008D4D5 EC04                       	smpsPSGAlterVol     $04
0008D4D7 E701                       	dc.b	smpsNoAttack, $01
0008D4D9 EC07                       	smpsPSGAlterVol     $07
0008D4DB 8003                       	dc.b	nRst, $03
0008D4DD ECF5                       	smpsPSGAlterVol     $F5
0008D4DF 9206                       	dc.b	nF1, $06
0008D4E1 EC04                       	smpsPSGAlterVol     $04
0008D4E3 E701                       	dc.b	smpsNoAttack, $01
0008D4E5 EC07                       	smpsPSGAlterVol     $07
0008D4E7 8006                       	dc.b	nRst, $06
0008D4E9 E100                       	smpsAlterNote       $00
0008D4EB 01                         	dc.b	$01
0008D4EC E104                       	smpsAlterNote       $04
0008D4EE 01                         	dc.b	$01
0008D4EF E100                       	smpsAlterNote       $00
0008D4F1 01                         	dc.b	$01
0008D4F2 E1FD                       	smpsAlterNote       $FD
0008D4F4 01                         	dc.b	$01
0008D4F5 ECF5                       	smpsPSGAlterVol     $F5
0008D4F7 9206                       	dc.b	nF1, $06
0008D4F9 EC04                       	smpsPSGAlterVol     $04
0008D4FB E701                       	dc.b	smpsNoAttack, $01
0008D4FD EC07                       	smpsPSGAlterVol     $07
0008D4FF 8003                       	dc.b	nRst, $03
0008D501 ECF5                       	smpsPSGAlterVol     $F5
0008D503 9207                       	dc.b	nF1, $07
0008D505 EC0B                       	smpsPSGAlterVol     $0B
0008D507 8007                       	dc.b	nRst, $07
0008D509 E104                       	smpsAlterNote       $04
0008D50B 0101                       	dc.b	$01, $01
0008D50D E1FB                       	smpsAlterNote       $FB
0008D50F 01                         	dc.b	$01
0008D510 E1F6                       	smpsAlterNote       $F6
0008D512 0101                       	dc.b	$01, $01
0008D514 E1FF                       	smpsAlterNote       $FF
0008D516 01                         	dc.b	$01
0008D517 E105                       	smpsAlterNote       $05
0008D519 01                         	dc.b	$01
0008D51A E104                       	smpsAlterNote       $04
0008D51C 01                         	dc.b	$01
0008D51D E1FB                       	smpsAlterNote       $FB
0008D51F 01                         	dc.b	$01
0008D520 E1F5                       	smpsAlterNote       $F5
0008D522 01                         	dc.b	$01
0008D523 E1FC                       	smpsAlterNote       $FC
0008D525 ECF5                       	smpsPSGAlterVol     $F5
0008D527 8B0E                       	dc.b	nBb0, $0E
0008D529 E102                       	smpsAlterNote       $02
0008D52B EC0B                       	smpsPSGAlterVol     $0B
0008D52D 8001                       	dc.b	nRst, $01
0008D52F E101                       	smpsAlterNote       $01
0008D531 01                         	dc.b	$01
0008D532 E1FC                       	smpsAlterNote       $FC
0008D534 01                         	dc.b	$01
0008D535 E1F9                       	smpsAlterNote       $F9
0008D537 0101                       	dc.b	$01, $01
0008D539 E1FF                       	smpsAlterNote       $FF
0008D53B 01                         	dc.b	$01
0008D53C E102                       	smpsAlterNote       $02
0008D53E 01                         	dc.b	$01
0008D53F E1FF                       	smpsAlterNote       $FF
0008D541 01                         	dc.b	$01
0008D542 E1FC                       	smpsAlterNote       $FC
0008D544 01                         	dc.b	$01
0008D545 E1F8                       	smpsAlterNote       $F8
0008D547 01                         	dc.b	$01
0008D548 E1FC                       	smpsAlterNote       $FC
0008D54A 01                         	dc.b	$01
0008D54B E101                       	smpsAlterNote       $01
0008D54D 01                         	dc.b	$01
0008D54E E102                       	smpsAlterNote       $02
0008D550 01                         	dc.b	$01
0008D551 E1FF                       	smpsAlterNote       $FF
0008D553 01                         	dc.b	$01
0008D554 E1FB                       	smpsAlterNote       $FB
0008D556 ECF5                       	smpsPSGAlterVol     $F5
0008D558 8D0D                       	dc.b	nC1, $0D
0008D55A E101                       	smpsAlterNote       $01
0008D55C EC0B                       	smpsPSGAlterVol     $0B
0008D55E 8001                       	dc.b	nRst, $01
0008D560 E102                       	smpsAlterNote       $02
0008D562 01                         	dc.b	$01
0008D563 E1FF                       	smpsAlterNote       $FF
0008D565 01                         	dc.b	$01
0008D566 E1F9                       	smpsAlterNote       $F9
0008D568 0101                       	dc.b	$01, $01
0008D56A E1FC                       	smpsAlterNote       $FC
0008D56C 01                         	dc.b	$01
0008D56D E101                       	smpsAlterNote       $01
0008D56F 0101                       	dc.b	$01, $01
0008D571 E1FC                       	smpsAlterNote       $FC
0008D573 01                         	dc.b	$01
0008D574 E1F9                       	smpsAlterNote       $F9
0008D576 0101                       	dc.b	$01, $01
0008D578 E1FF                       	smpsAlterNote       $FF
0008D57A 01                         	dc.b	$01
0008D57B E102                       	smpsAlterNote       $02
0008D57D 01                         	dc.b	$01
0008D57E E101                       	smpsAlterNote       $01
0008D580 01                         	dc.b	$01
0008D581 E1FC                       	smpsAlterNote       $FC
0008D583 ECF5                       	smpsPSGAlterVol     $F5
0008D585 8F0D                       	dc.b	nD1, $0D
0008D587 E1FF                       	smpsAlterNote       $FF
0008D589 EC04                       	smpsPSGAlterVol     $04
0008D58B E701                       	dc.b	smpsNoAttack, $01
0008D58D EC07                       	smpsPSGAlterVol     $07
0008D58F E103                       	smpsAlterNote       $03
0008D591 8001                       	dc.b	nRst, $01
0008D593 E102                       	smpsAlterNote       $02
0008D595 01                         	dc.b	$01
0008D596 E1FD                       	smpsAlterNote       $FD
0008D598 01                         	dc.b	$01
0008D599 E1F9                       	smpsAlterNote       $F9
0008D59B 01                         	dc.b	$01
0008D59C E1FD                       	smpsAlterNote       $FD
0008D59E 01                         	dc.b	$01
0008D59F E100                       	smpsAlterNote       $00
0008D5A1 01                         	dc.b	$01
0008D5A2 E103                       	smpsAlterNote       $03
0008D5A4 01                         	dc.b	$01
0008D5A5 E100                       	smpsAlterNote       $00
0008D5A7 01                         	dc.b	$01
0008D5A8 E1FA                       	smpsAlterNote       $FA
0008D5AA 01                         	dc.b	$01
0008D5AB E1F9                       	smpsAlterNote       $F9
0008D5AD 01                         	dc.b	$01
0008D5AE E1FD                       	smpsAlterNote       $FD
0008D5B0 01                         	dc.b	$01
0008D5B1 E102                       	smpsAlterNote       $02
0008D5B3 0101                       	dc.b	$01, $01
0008D5B5 E100                       	smpsAlterNote       $00
0008D5B7 01                         	dc.b	$01
0008D5B8 E1FD                       	smpsAlterNote       $FD
0008D5BA ECF5                       	smpsPSGAlterVol     $F5
0008D5BC 910D                       	dc.b	nE1, $0D
0008D5BE E103                       	smpsAlterNote       $03
0008D5C0 EC0B                       	smpsPSGAlterVol     $0B
0008D5C2 8001 01                    	dc.b	nRst, $01, $01
0008D5C5 E100                       	smpsAlterNote       $00
0008D5C7 01                         	dc.b	$01
0008D5C8 E1FA                       	smpsAlterNote       $FA
0008D5CA 0101                       	dc.b	$01, $01
0008D5CC E100                       	smpsAlterNote       $00
0008D5CE 01                         	dc.b	$01
0008D5CF E103                       	smpsAlterNote       $03
0008D5D1 01                         	dc.b	$01
0008D5D2 E1FD                       	smpsAlterNote       $FD
0008D5D4 ECF5                       	smpsPSGAlterVol     $F5
0008D5D6 9206                       	dc.b	nF1, $06
0008D5D8 EC04                       	smpsPSGAlterVol     $04
0008D5DA E701                       	dc.b	smpsNoAttack, $01
0008D5DC EC07                       	smpsPSGAlterVol     $07
0008D5DE 8003                       	dc.b	nRst, $03
0008D5E0 ECF5                       	smpsPSGAlterVol     $F5
0008D5E2 9207                       	dc.b	nF1, $07
0008D5E4 EC0B                       	smpsPSGAlterVol     $0B
0008D5E6 8006                       	dc.b	nRst, $06
0008D5E8 E100                       	smpsAlterNote       $00
0008D5EA 01                         	dc.b	$01
0008D5EB E103                       	smpsAlterNote       $03
0008D5ED 0101                       	dc.b	$01, $01
0008D5EF E1FD                       	smpsAlterNote       $FD
0008D5F1 01                         	dc.b	$01
0008D5F2 ECF5                       	smpsPSGAlterVol     $F5
0008D5F4 9407                       	dc.b	nG1, $07
0008D5F6 EC0B                       	smpsPSGAlterVol     $0B
0008D5F8 8004                       	dc.b	nRst, $04
0008D5FA ECF5                       	smpsPSGAlterVol     $F5
0008D5FC 9406                       	dc.b	nG1, $06
0008D5FE EC04                       	smpsPSGAlterVol     $04
0008D600 E701                       	dc.b	smpsNoAttack, $01
0008D602 EC07                       	smpsPSGAlterVol     $07
0008D604 8006                       	dc.b	nRst, $06
0008D606 E103                       	smpsAlterNote       $03
0008D608 01                         	dc.b	$01
0008D609 E104                       	smpsAlterNote       $04
0008D60B 01                         	dc.b	$01
0008D60C E100                       	smpsAlterNote       $00
0008D60E 01                         	dc.b	$01
0008D60F E1F9                       	smpsAlterNote       $F9
0008D611 01                         	dc.b	$01
0008D612 E1FD                       	smpsAlterNote       $FD
0008D614 ECF5                       	smpsPSGAlterVol     $F5
0008D616 9206                       	dc.b	nF1, $06
0008D618 EC04                       	smpsPSGAlterVol     $04
0008D61A E701                       	dc.b	smpsNoAttack, $01
0008D61C EC07                       	smpsPSGAlterVol     $07
0008D61E 8003                       	dc.b	nRst, $03
0008D620 ECF5                       	smpsPSGAlterVol     $F5
0008D622 9206                       	dc.b	nF1, $06
0008D624 EC04                       	smpsPSGAlterVol     $04
0008D626 E701                       	dc.b	smpsNoAttack, $01
0008D628 EC07                       	smpsPSGAlterVol     $07
0008D62A 8006                       	dc.b	nRst, $06
0008D62C E100                       	smpsAlterNote       $00
0008D62E 01                         	dc.b	$01
0008D62F E104                       	smpsAlterNote       $04
0008D631 01                         	dc.b	$01
0008D632 E103                       	smpsAlterNote       $03
0008D634 01                         	dc.b	$01
0008D635 E1FD                       	smpsAlterNote       $FD
0008D637 01                         	dc.b	$01
0008D638 ECF5                       	smpsPSGAlterVol     $F5
0008D63A 9407                       	dc.b	nG1, $07
0008D63C EC0B                       	smpsPSGAlterVol     $0B
0008D63E 8004                       	dc.b	nRst, $04
0008D640 ECF5                       	smpsPSGAlterVol     $F5
0008D642 9406                       	dc.b	nG1, $06
0008D644 EC0B                       	smpsPSGAlterVol     $0B
0008D646 8007                       	dc.b	nRst, $07
0008D648 E103                       	smpsAlterNote       $03
0008D64A 0101                       	dc.b	$01, $01
0008D64C E100                       	smpsAlterNote       $00
0008D64E 01                         	dc.b	$01
0008D64F E1F9                       	smpsAlterNote       $F9
0008D651 01                         	dc.b	$01
0008D652 E1FD                       	smpsAlterNote       $FD
0008D654 ECF5                       	smpsPSGAlterVol     $F5
0008D656 9206                       	dc.b	nF1, $06
0008D658 EC04                       	smpsPSGAlterVol     $04
0008D65A E701                       	dc.b	smpsNoAttack, $01
0008D65C EC07                       	smpsPSGAlterVol     $07
0008D65E 8003                       	dc.b	nRst, $03
0008D660 ECF5                       	smpsPSGAlterVol     $F5
0008D662 9206                       	dc.b	nF1, $06
0008D664 EC04                       	smpsPSGAlterVol     $04
0008D666 E701                       	dc.b	smpsNoAttack, $01
0008D668 EC07                       	smpsPSGAlterVol     $07
0008D66A 8006                       	dc.b	nRst, $06
0008D66C E100                       	smpsAlterNote       $00
0008D66E 01                         	dc.b	$01
0008D66F E104                       	smpsAlterNote       $04
0008D671 01                         	dc.b	$01
0008D672 E100                       	smpsAlterNote       $00
0008D674 01                         	dc.b	$01
0008D675 E1FB                       	smpsAlterNote       $FB
0008D677 01                         	dc.b	$01
0008D678 E1FD                       	smpsAlterNote       $FD
0008D67A ECF5                       	smpsPSGAlterVol     $F5
0008D67C 9406                       	dc.b	nG1, $06
0008D67E EC04                       	smpsPSGAlterVol     $04
0008D680 E701                       	dc.b	smpsNoAttack, $01
0008D682 EC07                       	smpsPSGAlterVol     $07
0008D684 8003                       	dc.b	nRst, $03
0008D686 ECF5                       	smpsPSGAlterVol     $F5
0008D688 9407                       	dc.b	nG1, $07
0008D68A EC0B                       	smpsPSGAlterVol     $0B
0008D68C 8006                       	dc.b	nRst, $06
0008D68E E100                       	smpsAlterNote       $00
0008D690 01                         	dc.b	$01
0008D691 E103                       	smpsAlterNote       $03
0008D693 0101                       	dc.b	$01, $01
0008D695 E1FD                       	smpsAlterNote       $FD
0008D697 01                         	dc.b	$01
0008D698 ECF5                       	smpsPSGAlterVol     $F5
0008D69A 9207                       	dc.b	nF1, $07
0008D69C EC0B                       	smpsPSGAlterVol     $0B
0008D69E 8004                       	dc.b	nRst, $04
0008D6A0 ECF5                       	smpsPSGAlterVol     $F5
0008D6A2 9206                       	dc.b	nF1, $06
0008D6A4 EC04                       	smpsPSGAlterVol     $04
0008D6A6 E701                       	dc.b	smpsNoAttack, $01
0008D6A8 ECFC                       	smpsPSGAlterVol     $FC
0008D6AA E1FC                       	smpsAlterNote       $FC
0008D6AC 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008D6B0 EC04                       	smpsPSGAlterVol     $04
0008D6B2 E701                       	dc.b	smpsNoAttack, $01
0008D6B4 ECFC                       	smpsPSGAlterVol     $FC
0008D6B6 9003                       	dc.b	nEb1, $03
0008D6B8 E1FD                       	smpsAlterNote       $FD
0008D6BA 9403                       	dc.b	nG1, $03
0008D6BC EC04                       	smpsPSGAlterVol     $04
0008D6BE E701                       	dc.b	smpsNoAttack, $01
0008D6C0 E1FE                       	smpsAlterNote       $FE
0008D6C2 ECFC                       	smpsPSGAlterVol     $FC
0008D6C4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D6C8 EC04                       	smpsPSGAlterVol     $04
0008D6CA E701                       	dc.b	smpsNoAttack, $01
0008D6CC EC07                       	smpsPSGAlterVol     $07
0008D6CE 8009                       	dc.b	nRst, $09
0008D6D0 E100                       	smpsAlterNote       $00
0008D6D2 01                         	dc.b	$01
0008D6D3 F6F5 19                    	smpsJump            music84_Jump07
0008D6D6                            
0008D6D6                            ; PSG2 Data
0008D6D6                            music84_PSG2:
0008D6D6 E1FC                       	smpsAlterNote       $FC
0008D6D8 EC04                       	smpsPSGAlterVol     $04
0008D6DA 8F03                       	dc.b	nD1, $03
0008D6DC E1FD                       	smpsAlterNote       $FD
0008D6DE 9203                       	dc.b	nF1, $03
0008D6E0 EC04                       	smpsPSGAlterVol     $04
0008D6E2 E701                       	dc.b	smpsNoAttack, $01
0008D6E4 E1FE                       	smpsAlterNote       $FE
0008D6E6 ECFC                       	smpsPSGAlterVol     $FC
0008D6E8 9603                       	dc.b	nA1, $03
0008D6EA E1FD                       	smpsAlterNote       $FD
0008D6EC 9103                       	dc.b	nE1, $03
0008D6EE EC04                       	smpsPSGAlterVol     $04
0008D6F0 E701                       	dc.b	smpsNoAttack, $01
0008D6F2 ECFC                       	smpsPSGAlterVol     $FC
0008D6F4 9403                       	dc.b	nG1, $03
0008D6F6 E1FE                       	smpsAlterNote       $FE
0008D6F8 9703                       	dc.b	nBb1, $03
0008D6FA EC04                       	smpsPSGAlterVol     $04
0008D6FC E701                       	dc.b	smpsNoAttack, $01
0008D6FE E1FF                       	smpsAlterNote       $FF
0008D700 ECFC                       	smpsPSGAlterVol     $FC
0008D702 9B02                       	dc.b	nD2, $02
0008D704 EC04                       	smpsPSGAlterVol     $04
0008D706 E701                       	dc.b	smpsNoAttack, $01
0008D708 ECFC                       	smpsPSGAlterVol     $FC
0008D70A E1FE                       	smpsAlterNote       $FE
0008D70C 9A03                       	dc.b	nCs2, $03
0008D70E EC0B                       	smpsPSGAlterVol     $0B
0008D710 800A                       	dc.b	nRst, $0A
0008D712 E102                       	smpsAlterNote       $02
0008D714 01                         	dc.b	$01
0008D715 E10A                       	smpsAlterNote       $0A
0008D717 01                         	dc.b	$01
0008D718 E102                       	smpsAlterNote       $02
0008D71A 01                         	dc.b	$01
0008D71B E1FC                       	smpsAlterNote       $FC
0008D71D 01                         	dc.b	$01
0008D71E E10A                       	smpsAlterNote       $0A
0008D720 01                         	dc.b	$01
0008D721 E1FC                       	smpsAlterNote       $FC
0008D723 01                         	dc.b	$01
0008D724 E108                       	smpsAlterNote       $08
0008D726 01                         	dc.b	$01
0008D727 E10A                       	smpsAlterNote       $0A
0008D729 01                         	dc.b	$01
0008D72A E102                       	smpsAlterNote       $02
0008D72C 01                         	dc.b	$01
0008D72D E1F7                       	smpsAlterNote       $F7
0008D72F 0101                       	dc.b	$01, $01
0008D731 E102                       	smpsAlterNote       $02
0008D733 01                         	dc.b	$01
0008D734 E108                       	smpsAlterNote       $08
0008D736 0101                       	dc.b	$01, $01
0008D738 E1FC                       	smpsAlterNote       $FC
0008D73A 01                         	dc.b	$01
0008D73B E10A                       	smpsAlterNote       $0A
0008D73D 01                         	dc.b	$01
0008D73E E1F7                       	smpsAlterNote       $F7
0008D740 01                         	dc.b	$01
0008D741 E102                       	smpsAlterNote       $02
0008D743 01                         	dc.b	$01
0008D744 E10A                       	smpsAlterNote       $0A
0008D746 01                         	dc.b	$01
0008D747 E102                       	smpsAlterNote       $02
0008D749 01                         	dc.b	$01
0008D74A E1FC                       	smpsAlterNote       $FC
0008D74C 01                         	dc.b	$01
0008D74D                            
0008D74D                            music84_Jump06:
0008D74D E10A                       	smpsAlterNote       $0A
0008D74F 8001                       	dc.b	nRst, $01
0008D751 E1FC                       	smpsAlterNote       $FC
0008D753 01                         	dc.b	$01
0008D754 E108                       	smpsAlterNote       $08
0008D756 01                         	dc.b	$01
0008D757 E10A                       	smpsAlterNote       $0A
0008D759 01                         	dc.b	$01
0008D75A E1FC                       	smpsAlterNote       $FC
0008D75C ECF5                       	smpsPSGAlterVol     $F5
0008D75E 8F06                       	dc.b	nD1, $06
0008D760 EC04                       	smpsPSGAlterVol     $04
0008D762 E701                       	dc.b	smpsNoAttack, $01
0008D764 EC07                       	smpsPSGAlterVol     $07
0008D766 8003                       	dc.b	nRst, $03
0008D768 ECF5                       	smpsPSGAlterVol     $F5
0008D76A 8F06                       	dc.b	nD1, $06
0008D76C EC04                       	smpsPSGAlterVol     $04
0008D76E E701                       	dc.b	smpsNoAttack, $01
0008D770 EC07                       	smpsPSGAlterVol     $07
0008D772 8006                       	dc.b	nRst, $06
0008D774 E1FF                       	smpsAlterNote       $FF
0008D776 01                         	dc.b	$01
0008D777 E102                       	smpsAlterNote       $02
0008D779 01                         	dc.b	$01
0008D77A E1FF                       	smpsAlterNote       $FF
0008D77C 01                         	dc.b	$01
0008D77D E1F9                       	smpsAlterNote       $F9
0008D77F 01                         	dc.b	$01
0008D780 E1FC                       	smpsAlterNote       $FC
0008D782 ECF5                       	smpsPSGAlterVol     $F5
0008D784 9006                       	dc.b	nEb1, $06
0008D786 EC04                       	smpsPSGAlterVol     $04
0008D788 E701                       	dc.b	smpsNoAttack, $01
0008D78A EC07                       	smpsPSGAlterVol     $07
0008D78C 8003                       	dc.b	nRst, $03
0008D78E ECF5                       	smpsPSGAlterVol     $F5
0008D790 9007                       	dc.b	nEb1, $07
0008D792 EC0B                       	smpsPSGAlterVol     $0B
0008D794 8006                       	dc.b	nRst, $06
0008D796 E1FF                       	smpsAlterNote       $FF
0008D798 01                         	dc.b	$01
0008D799 E103                       	smpsAlterNote       $03
0008D79B 0101                       	dc.b	$01, $01
0008D79D E1FC                       	smpsAlterNote       $FC
0008D79F 01                         	dc.b	$01
0008D7A0 ECF5                       	smpsPSGAlterVol     $F5
0008D7A2 8F07                       	dc.b	nD1, $07
0008D7A4 EC0B                       	smpsPSGAlterVol     $0B
0008D7A6 8004                       	dc.b	nRst, $04
0008D7A8 ECF5                       	smpsPSGAlterVol     $F5
0008D7AA 8F06                       	dc.b	nD1, $06
0008D7AC EC04                       	smpsPSGAlterVol     $04
0008D7AE E701                       	dc.b	smpsNoAttack, $01
0008D7B0 EC07                       	smpsPSGAlterVol     $07
0008D7B2 8006                       	dc.b	nRst, $06
0008D7B4 E102                       	smpsAlterNote       $02
0008D7B6 01                         	dc.b	$01
0008D7B7 E103                       	smpsAlterNote       $03
0008D7B9 01                         	dc.b	$01
0008D7BA E1FF                       	smpsAlterNote       $FF
0008D7BC 01                         	dc.b	$01
0008D7BD E1F9                       	smpsAlterNote       $F9
0008D7BF 01                         	dc.b	$01
0008D7C0 E1FC                       	smpsAlterNote       $FC
0008D7C2 ECF5                       	smpsPSGAlterVol     $F5
0008D7C4 8F06                       	dc.b	nD1, $06
0008D7C6 EC04                       	smpsPSGAlterVol     $04
0008D7C8 E701                       	dc.b	smpsNoAttack, $01
0008D7CA EC07                       	smpsPSGAlterVol     $07
0008D7CC 8003                       	dc.b	nRst, $03
0008D7CE ECF5                       	smpsPSGAlterVol     $F5
0008D7D0 8F06                       	dc.b	nD1, $06
0008D7D2 EC04                       	smpsPSGAlterVol     $04
0008D7D4 E701                       	dc.b	smpsNoAttack, $01
0008D7D6 EC07                       	smpsPSGAlterVol     $07
0008D7D8 8006                       	dc.b	nRst, $06
0008D7DA E1FF                       	smpsAlterNote       $FF
0008D7DC 01                         	dc.b	$01
0008D7DD E103                       	smpsAlterNote       $03
0008D7DF 01                         	dc.b	$01
0008D7E0 E1FF                       	smpsAlterNote       $FF
0008D7E2 01                         	dc.b	$01
0008D7E3 E1FC                       	smpsAlterNote       $FC
0008D7E5 01                         	dc.b	$01
0008D7E6 ECF5                       	smpsPSGAlterVol     $F5
0008D7E8 8F06                       	dc.b	nD1, $06
0008D7EA EC04                       	smpsPSGAlterVol     $04
0008D7EC E701                       	dc.b	smpsNoAttack, $01
0008D7EE EC07                       	smpsPSGAlterVol     $07
0008D7F0 8003                       	dc.b	nRst, $03
0008D7F2 ECF5                       	smpsPSGAlterVol     $F5
0008D7F4 8F07                       	dc.b	nD1, $07
0008D7F6 EC0B                       	smpsPSGAlterVol     $0B
0008D7F8 8007                       	dc.b	nRst, $07
0008D7FA E101                       	smpsAlterNote       $01
0008D7FC 0101                       	dc.b	$01, $01
0008D7FE E1FC                       	smpsAlterNote       $FC
0008D800 01                         	dc.b	$01
0008D801 E1F9                       	smpsAlterNote       $F9
0008D803 01                         	dc.b	$01
0008D804 E1FC                       	smpsAlterNote       $FC
0008D806 ECF5                       	smpsPSGAlterVol     $F5
0008D808 9006                       	dc.b	nEb1, $06
0008D80A EC0B                       	smpsPSGAlterVol     $0B
0008D80C 8004                       	dc.b	nRst, $04
0008D80E ECF5                       	smpsPSGAlterVol     $F5
0008D810 9006                       	dc.b	nEb1, $06
0008D812 EC04                       	smpsPSGAlterVol     $04
0008D814 E701                       	dc.b	smpsNoAttack, $01
0008D816 EC07                       	smpsPSGAlterVol     $07
0008D818 8006                       	dc.b	nRst, $06
0008D81A E100                       	smpsAlterNote       $00
0008D81C 01                         	dc.b	$01
0008D81D E102                       	smpsAlterNote       $02
0008D81F 01                         	dc.b	$01
0008D820 E100                       	smpsAlterNote       $00
0008D822 01                         	dc.b	$01
0008D823 E1FD                       	smpsAlterNote       $FD
0008D825 01                         	dc.b	$01
0008D826 E1FF                       	smpsAlterNote       $FF
0008D828 ECF5                       	smpsPSGAlterVol     $F5
0008D82A 9B06                       	dc.b	nD2, $06
0008D82C EC04                       	smpsPSGAlterVol     $04
0008D82E E701                       	dc.b	smpsNoAttack, $01
0008D830 EC07                       	smpsPSGAlterVol     $07
0008D832 8003                       	dc.b	nRst, $03
0008D834 ECF5                       	smpsPSGAlterVol     $F5
0008D836 9B07                       	dc.b	nD2, $07
0008D838 EC0B                       	smpsPSGAlterVol     $0B
0008D83A 8006                       	dc.b	nRst, $06
0008D83C E102                       	smpsAlterNote       $02
0008D83E 01                         	dc.b	$01
0008D83F E106                       	smpsAlterNote       $06
0008D841 01                         	dc.b	$01
0008D842 E105                       	smpsAlterNote       $05
0008D844 01                         	dc.b	$01
0008D845 E1FF                       	smpsAlterNote       $FF
0008D847 01                         	dc.b	$01
0008D848 ECF5                       	smpsPSGAlterVol     $F5
0008D84A 9B07                       	dc.b	nD2, $07
0008D84C EC0B                       	smpsPSGAlterVol     $0B
0008D84E 8004                       	dc.b	nRst, $04
0008D850 ECF5                       	smpsPSGAlterVol     $F5
0008D852 9B06                       	dc.b	nD2, $06
0008D854 EC0B                       	smpsPSGAlterVol     $0B
0008D856 8007                       	dc.b	nRst, $07
0008D858 E105                       	smpsAlterNote       $05
0008D85A 0101                       	dc.b	$01, $01
0008D85C E102                       	smpsAlterNote       $02
0008D85E 01                         	dc.b	$01
0008D85F E1FC                       	smpsAlterNote       $FC
0008D861 01                         	dc.b	$01
0008D862 E1FF                       	smpsAlterNote       $FF
0008D864 ECF5                       	smpsPSGAlterVol     $F5
0008D866 9B06                       	dc.b	nD2, $06
0008D868 EC04                       	smpsPSGAlterVol     $04
0008D86A E701                       	dc.b	smpsNoAttack, $01
0008D86C EC07                       	smpsPSGAlterVol     $07
0008D86E 8003                       	dc.b	nRst, $03
0008D870 ECF5                       	smpsPSGAlterVol     $F5
0008D872 9B06                       	dc.b	nD2, $06
0008D874 EC04                       	smpsPSGAlterVol     $04
0008D876 E701                       	dc.b	smpsNoAttack, $01
0008D878 EC07                       	smpsPSGAlterVol     $07
0008D87A 8006                       	dc.b	nRst, $06
0008D87C E102                       	smpsAlterNote       $02
0008D87E 01                         	dc.b	$01
0008D87F E106                       	smpsAlterNote       $06
0008D881 01                         	dc.b	$01
0008D882 E102                       	smpsAlterNote       $02
0008D884 01                         	dc.b	$01
0008D885 E1FF                       	smpsAlterNote       $FF
0008D887 01                         	dc.b	$01
0008D888 ECF5                       	smpsPSGAlterVol     $F5
0008D88A 9B06                       	dc.b	nD2, $06
0008D88C EC04                       	smpsPSGAlterVol     $04
0008D88E E701                       	dc.b	smpsNoAttack, $01
0008D890 EC07                       	smpsPSGAlterVol     $07
0008D892 8003                       	dc.b	nRst, $03
0008D894 ECF5                       	smpsPSGAlterVol     $F5
0008D896 9B07                       	dc.b	nD2, $07
0008D898 EC0B                       	smpsPSGAlterVol     $0B
0008D89A 8007                       	dc.b	nRst, $07
0008D89C E105                       	smpsAlterNote       $05
0008D89E 0101                       	dc.b	$01, $01
0008D8A0 E1FF                       	smpsAlterNote       $FF
0008D8A2 01                         	dc.b	$01
0008D8A3 E1FC                       	smpsAlterNote       $FC
0008D8A5 01                         	dc.b	$01
0008D8A6 E1FF                       	smpsAlterNote       $FF
0008D8A8 ECF5                       	smpsPSGAlterVol     $F5
0008D8AA 9B06                       	dc.b	nD2, $06
0008D8AC EC0B                       	smpsPSGAlterVol     $0B
0008D8AE 8004                       	dc.b	nRst, $04
0008D8B0 ECF5                       	smpsPSGAlterVol     $F5
0008D8B2 9B06                       	dc.b	nD2, $06
0008D8B4 EC04                       	smpsPSGAlterVol     $04
0008D8B6 E701                       	dc.b	smpsNoAttack, $01
0008D8B8 EC07                       	smpsPSGAlterVol     $07
0008D8BA 8006                       	dc.b	nRst, $06
0008D8BC E105                       	smpsAlterNote       $05
0008D8BE 01                         	dc.b	$01
0008D8BF E106                       	smpsAlterNote       $06
0008D8C1 01                         	dc.b	$01
0008D8C2 E102                       	smpsAlterNote       $02
0008D8C4 01                         	dc.b	$01
0008D8C5 E1FC                       	smpsAlterNote       $FC
0008D8C7 01                         	dc.b	$01
0008D8C8 E1FF                       	smpsAlterNote       $FF
0008D8CA ECF5                       	smpsPSGAlterVol     $F5
0008D8CC 9B06                       	dc.b	nD2, $06
0008D8CE EC04                       	smpsPSGAlterVol     $04
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 EC07                       	smpsPSGAlterVol     $07
0008D8D4 8003                       	dc.b	nRst, $03
0008D8D6 ECF5                       	smpsPSGAlterVol     $F5
0008D8D8 9B06                       	dc.b	nD2, $06
0008D8DA EC04                       	smpsPSGAlterVol     $04
0008D8DC E701                       	dc.b	smpsNoAttack, $01
0008D8DE EC07                       	smpsPSGAlterVol     $07
0008D8E0 8006                       	dc.b	nRst, $06
0008D8E2 E102                       	smpsAlterNote       $02
0008D8E4 01                         	dc.b	$01
0008D8E5 E106                       	smpsAlterNote       $06
0008D8E7 01                         	dc.b	$01
0008D8E8 E105                       	smpsAlterNote       $05
0008D8EA 01                         	dc.b	$01
0008D8EB E1FF                       	smpsAlterNote       $FF
0008D8ED 01                         	dc.b	$01
0008D8EE ECF5                       	smpsPSGAlterVol     $F5
0008D8F0 9B07                       	dc.b	nD2, $07
0008D8F2 EC0B                       	smpsPSGAlterVol     $0B
0008D8F4 8004                       	dc.b	nRst, $04
0008D8F6 ECF5                       	smpsPSGAlterVol     $F5
0008D8F8 9B06                       	dc.b	nD2, $06
0008D8FA EC0B                       	smpsPSGAlterVol     $0B
0008D8FC 8007                       	dc.b	nRst, $07
0008D8FE E105                       	smpsAlterNote       $05
0008D900 0101                       	dc.b	$01, $01
0008D902 E102                       	smpsAlterNote       $02
0008D904 01                         	dc.b	$01
0008D905 E1FC                       	smpsAlterNote       $FC
0008D907 01                         	dc.b	$01
0008D908 E1FF                       	smpsAlterNote       $FF
0008D90A ECF5                       	smpsPSGAlterVol     $F5
0008D90C 9B06                       	dc.b	nD2, $06
0008D90E EC04                       	smpsPSGAlterVol     $04
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 EC07                       	smpsPSGAlterVol     $07
0008D914 8003                       	dc.b	nRst, $03
0008D916 ECF5                       	smpsPSGAlterVol     $F5
0008D918 9B06                       	dc.b	nD2, $06
0008D91A EC04                       	smpsPSGAlterVol     $04
0008D91C E701                       	dc.b	smpsNoAttack, $01
0008D91E EC07                       	smpsPSGAlterVol     $07
0008D920 8006                       	dc.b	nRst, $06
0008D922 E102                       	smpsAlterNote       $02
0008D924 01                         	dc.b	$01
0008D925 E106                       	smpsAlterNote       $06
0008D927 01                         	dc.b	$01
0008D928 E102                       	smpsAlterNote       $02
0008D92A 01                         	dc.b	$01
0008D92B E1FF                       	smpsAlterNote       $FF
0008D92D 01                         	dc.b	$01
0008D92E ECF5                       	smpsPSGAlterVol     $F5
0008D930 9B06                       	dc.b	nD2, $06
0008D932 EC04                       	smpsPSGAlterVol     $04
0008D934 E701                       	dc.b	smpsNoAttack, $01
0008D936 EC07                       	smpsPSGAlterVol     $07
0008D938 8003                       	dc.b	nRst, $03
0008D93A ECF5                       	smpsPSGAlterVol     $F5
0008D93C 9B07                       	dc.b	nD2, $07
0008D93E E1FE                       	smpsAlterNote       $FE
0008D940 9706                       	dc.b	nBb1, $06
0008D942 EC04                       	smpsPSGAlterVol     $04
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 ECFC                       	smpsPSGAlterVol     $FC
0008D948 9703                       	dc.b	nBb1, $03
0008D94A EC04                       	smpsPSGAlterVol     $04
0008D94C E701                       	dc.b	smpsNoAttack, $01
0008D94E ECFC                       	smpsPSGAlterVol     $FC
0008D950 9702                       	dc.b	nBb1, $02
0008D952 EC04                       	smpsPSGAlterVol     $04
0008D954 E701                       	dc.b	smpsNoAttack, $01
0008D956 ECFC                       	smpsPSGAlterVol     $FC
0008D958 9606                       	dc.b	nA1, $06
0008D95A EC04                       	smpsPSGAlterVol     $04
0008D95C E701                       	dc.b	smpsNoAttack, $01
0008D95E EC07                       	smpsPSGAlterVol     $07
0008D960 8006                       	dc.b	nRst, $06
0008D962 E101                       	smpsAlterNote       $01
0008D964 01                         	dc.b	$01
0008D965 E107                       	smpsAlterNote       $07
0008D967 01                         	dc.b	$01
0008D968 E101                       	smpsAlterNote       $01
0008D96A 01                         	dc.b	$01
0008D96B E1F8                       	smpsAlterNote       $F8
0008D96D 01                         	dc.b	$01
0008D96E E1F7                       	smpsAlterNote       $F7
0008D970 01                         	dc.b	$01
0008D971 E1FC                       	smpsAlterNote       $FC
0008D973 01                         	dc.b	$01
0008D974 E106                       	smpsAlterNote       $06
0008D976 01                         	dc.b	$01
0008D977 E107                       	smpsAlterNote       $07
0008D979 01                         	dc.b	$01
0008D97A E101                       	smpsAlterNote       $01
0008D97C 01                         	dc.b	$01
0008D97D E1F8                       	smpsAlterNote       $F8
0008D97F 0101                       	dc.b	$01, $01
0008D981 E1FC                       	smpsAlterNote       $FC
0008D983 ECF5                       	smpsPSGAlterVol     $F5
0008D985 8F06                       	dc.b	nD1, $06
0008D987 EC04                       	smpsPSGAlterVol     $04
0008D989 E701                       	dc.b	smpsNoAttack, $01
0008D98B EC07                       	smpsPSGAlterVol     $07
0008D98D 8003                       	dc.b	nRst, $03
0008D98F ECF5                       	smpsPSGAlterVol     $F5
0008D991 8F06                       	dc.b	nD1, $06
0008D993 EC04                       	smpsPSGAlterVol     $04
0008D995 E701                       	dc.b	smpsNoAttack, $01
0008D997 EC07                       	smpsPSGAlterVol     $07
0008D999 8006                       	dc.b	nRst, $06
0008D99B E1FF                       	smpsAlterNote       $FF
0008D99D 01                         	dc.b	$01
0008D99E E102                       	smpsAlterNote       $02
0008D9A0 01                         	dc.b	$01
0008D9A1 E101                       	smpsAlterNote       $01
0008D9A3 01                         	dc.b	$01
0008D9A4 E1FC                       	smpsAlterNote       $FC
0008D9A6 01                         	dc.b	$01
0008D9A7 ECF5                       	smpsPSGAlterVol     $F5
0008D9A9 9007                       	dc.b	nEb1, $07
0008D9AB EC0B                       	smpsPSGAlterVol     $0B
0008D9AD 8004                       	dc.b	nRst, $04
0008D9AF ECF5                       	smpsPSGAlterVol     $F5
0008D9B1 9006                       	dc.b	nEb1, $06
0008D9B3 EC0B                       	smpsPSGAlterVol     $0B
0008D9B5 8007                       	dc.b	nRst, $07
0008D9B7 E103                       	smpsAlterNote       $03
0008D9B9 0101                       	dc.b	$01, $01
0008D9BB E1FC                       	smpsAlterNote       $FC
0008D9BD 01                         	dc.b	$01
0008D9BE E1F9                       	smpsAlterNote       $F9
0008D9C0 01                         	dc.b	$01
0008D9C1 E1FC                       	smpsAlterNote       $FC
0008D9C3 ECF5                       	smpsPSGAlterVol     $F5
0008D9C5 8F06                       	dc.b	nD1, $06
0008D9C7 EC04                       	smpsPSGAlterVol     $04
0008D9C9 E701                       	dc.b	smpsNoAttack, $01
0008D9CB EC07                       	smpsPSGAlterVol     $07
0008D9CD 8003                       	dc.b	nRst, $03
0008D9CF ECF5                       	smpsPSGAlterVol     $F5
0008D9D1 8F06                       	dc.b	nD1, $06
0008D9D3 EC04                       	smpsPSGAlterVol     $04
0008D9D5 E701                       	dc.b	smpsNoAttack, $01
0008D9D7 EC07                       	smpsPSGAlterVol     $07
0008D9D9 8006                       	dc.b	nRst, $06
0008D9DB E1FF                       	smpsAlterNote       $FF
0008D9DD 01                         	dc.b	$01
0008D9DE E103                       	smpsAlterNote       $03
0008D9E0 01                         	dc.b	$01
0008D9E1 E1FF                       	smpsAlterNote       $FF
0008D9E3 01                         	dc.b	$01
0008D9E4 E1F9                       	smpsAlterNote       $F9
0008D9E6 01                         	dc.b	$01
0008D9E7 E1FC                       	smpsAlterNote       $FC
0008D9E9 ECF5                       	smpsPSGAlterVol     $F5
0008D9EB 8F06                       	dc.b	nD1, $06
0008D9ED EC04                       	smpsPSGAlterVol     $04
0008D9EF E701                       	dc.b	smpsNoAttack, $01
0008D9F1 EC07                       	smpsPSGAlterVol     $07
0008D9F3 8003                       	dc.b	nRst, $03
0008D9F5 ECF5                       	smpsPSGAlterVol     $F5
0008D9F7 8F07                       	dc.b	nD1, $07
0008D9F9 EC0B                       	smpsPSGAlterVol     $0B
0008D9FB 8006                       	dc.b	nRst, $06
0008D9FD E1FF                       	smpsAlterNote       $FF
0008D9FF 01                         	dc.b	$01
0008DA00 E102                       	smpsAlterNote       $02
0008DA02 0101                       	dc.b	$01, $01
0008DA04 E1FC                       	smpsAlterNote       $FC
0008DA06 01                         	dc.b	$01
0008DA07 ECF5                       	smpsPSGAlterVol     $F5
0008DA09 8F07                       	dc.b	nD1, $07
0008DA0B EC0B                       	smpsPSGAlterVol     $0B
0008DA0D 8004                       	dc.b	nRst, $04
0008DA0F ECF5                       	smpsPSGAlterVol     $F5
0008DA11 8F06                       	dc.b	nD1, $06
0008DA13 EC04                       	smpsPSGAlterVol     $04
0008DA15 E701                       	dc.b	smpsNoAttack, $01
0008DA17 EC07                       	smpsPSGAlterVol     $07
0008DA19 8006                       	dc.b	nRst, $06
0008DA1B E101                       	smpsAlterNote       $01
0008DA1D 01                         	dc.b	$01
0008DA1E E102                       	smpsAlterNote       $02
0008DA20 01                         	dc.b	$01
0008DA21 E1FF                       	smpsAlterNote       $FF
0008DA23 01                         	dc.b	$01
0008DA24 E1F9                       	smpsAlterNote       $F9
0008DA26 01                         	dc.b	$01
0008DA27 E1FC                       	smpsAlterNote       $FC
0008DA29 ECF5                       	smpsPSGAlterVol     $F5
0008DA2B 9006                       	dc.b	nEb1, $06
0008DA2D EC04                       	smpsPSGAlterVol     $04
0008DA2F E701                       	dc.b	smpsNoAttack, $01
0008DA31 EC07                       	smpsPSGAlterVol     $07
0008DA33 8003                       	dc.b	nRst, $03
0008DA35 ECF5                       	smpsPSGAlterVol     $F5
0008DA37 9006                       	dc.b	nEb1, $06
0008DA39 EC04                       	smpsPSGAlterVol     $04
0008DA3B E701                       	dc.b	smpsNoAttack, $01
0008DA3D EC07                       	smpsPSGAlterVol     $07
0008DA3F 8006                       	dc.b	nRst, $06
0008DA41 E100                       	smpsAlterNote       $00
0008DA43 01                         	dc.b	$01
0008DA44 E102                       	smpsAlterNote       $02
0008DA46 01                         	dc.b	$01
0008DA47 E100                       	smpsAlterNote       $00
0008DA49 01                         	dc.b	$01
0008DA4A E1FF                       	smpsAlterNote       $FF
0008DA4C 01                         	dc.b	$01
0008DA4D ECF5                       	smpsPSGAlterVol     $F5
0008DA4F 9B06                       	dc.b	nD2, $06
0008DA51 EC04                       	smpsPSGAlterVol     $04
0008DA53 E701                       	dc.b	smpsNoAttack, $01
0008DA55 EC07                       	smpsPSGAlterVol     $07
0008DA57 8003                       	dc.b	nRst, $03
0008DA59 ECF5                       	smpsPSGAlterVol     $F5
0008DA5B 9B07                       	dc.b	nD2, $07
0008DA5D EC0B                       	smpsPSGAlterVol     $0B
0008DA5F 8007                       	dc.b	nRst, $07
0008DA61 E105                       	smpsAlterNote       $05
0008DA63 0101                       	dc.b	$01, $01
0008DA65 E1FF                       	smpsAlterNote       $FF
0008DA67 01                         	dc.b	$01
0008DA68 E1FC                       	smpsAlterNote       $FC
0008DA6A 01                         	dc.b	$01
0008DA6B E1FF                       	smpsAlterNote       $FF
0008DA6D ECF5                       	smpsPSGAlterVol     $F5
0008DA6F 9B06                       	dc.b	nD2, $06
0008DA71 EC0B                       	smpsPSGAlterVol     $0B
0008DA73 8004                       	dc.b	nRst, $04
0008DA75 ECF5                       	smpsPSGAlterVol     $F5
0008DA77 9B06                       	dc.b	nD2, $06
0008DA79 EC04                       	smpsPSGAlterVol     $04
0008DA7B E701                       	dc.b	smpsNoAttack, $01
0008DA7D EC07                       	smpsPSGAlterVol     $07
0008DA7F 8006                       	dc.b	nRst, $06
0008DA81 E102                       	smpsAlterNote       $02
0008DA83 01                         	dc.b	$01
0008DA84 E106                       	smpsAlterNote       $06
0008DA86 01                         	dc.b	$01
0008DA87 E102                       	smpsAlterNote       $02
0008DA89 01                         	dc.b	$01
0008DA8A E1FC                       	smpsAlterNote       $FC
0008DA8C 01                         	dc.b	$01
0008DA8D E1FF                       	smpsAlterNote       $FF
0008DA8F ECF5                       	smpsPSGAlterVol     $F5
0008DA91 9B06                       	dc.b	nD2, $06
0008DA93 EC04                       	smpsPSGAlterVol     $04
0008DA95 E701                       	dc.b	smpsNoAttack, $01
0008DA97 EC07                       	smpsPSGAlterVol     $07
0008DA99 8003                       	dc.b	nRst, $03
0008DA9B ECF5                       	smpsPSGAlterVol     $F5
0008DA9D 9B07                       	dc.b	nD2, $07
0008DA9F EC0B                       	smpsPSGAlterVol     $0B
0008DAA1 8006                       	dc.b	nRst, $06
0008DAA3 E102                       	smpsAlterNote       $02
0008DAA5 01                         	dc.b	$01
0008DAA6 E105                       	smpsAlterNote       $05
0008DAA8 0101                       	dc.b	$01, $01
0008DAAA E1FF                       	smpsAlterNote       $FF
0008DAAC 01                         	dc.b	$01
0008DAAD ECF5                       	smpsPSGAlterVol     $F5
0008DAAF 9B07                       	dc.b	nD2, $07
0008DAB1 EC0B                       	smpsPSGAlterVol     $0B
0008DAB3 8004                       	dc.b	nRst, $04
0008DAB5 ECF5                       	smpsPSGAlterVol     $F5
0008DAB7 9B06                       	dc.b	nD2, $06
0008DAB9 EC0B                       	smpsPSGAlterVol     $0B
0008DABB 8007                       	dc.b	nRst, $07
0008DABD E105                       	smpsAlterNote       $05
0008DABF 0101                       	dc.b	$01, $01
0008DAC1 E102                       	smpsAlterNote       $02
0008DAC3 01                         	dc.b	$01
0008DAC4 E1FC                       	smpsAlterNote       $FC
0008DAC6 01                         	dc.b	$01
0008DAC7 E1FF                       	smpsAlterNote       $FF
0008DAC9 ECF5                       	smpsPSGAlterVol     $F5
0008DACB 9B06                       	dc.b	nD2, $06
0008DACD EC04                       	smpsPSGAlterVol     $04
0008DACF E701                       	dc.b	smpsNoAttack, $01
0008DAD1 EC07                       	smpsPSGAlterVol     $07
0008DAD3 8003                       	dc.b	nRst, $03
0008DAD5 ECF5                       	smpsPSGAlterVol     $F5
0008DAD7 9B06                       	dc.b	nD2, $06
0008DAD9 EC04                       	smpsPSGAlterVol     $04
0008DADB E701                       	dc.b	smpsNoAttack, $01
0008DADD EC07                       	smpsPSGAlterVol     $07
0008DADF 8006                       	dc.b	nRst, $06
0008DAE1 E102                       	smpsAlterNote       $02
0008DAE3 01                         	dc.b	$01
0008DAE4 E106                       	smpsAlterNote       $06
0008DAE6 01                         	dc.b	$01
0008DAE7 E102                       	smpsAlterNote       $02
0008DAE9 01                         	dc.b	$01
0008DAEA E1FF                       	smpsAlterNote       $FF
0008DAEC 01                         	dc.b	$01
0008DAED ECF5                       	smpsPSGAlterVol     $F5
0008DAEF 9B06                       	dc.b	nD2, $06
0008DAF1 EC04                       	smpsPSGAlterVol     $04
0008DAF3 E701                       	dc.b	smpsNoAttack, $01
0008DAF5 EC07                       	smpsPSGAlterVol     $07
0008DAF7 8003                       	dc.b	nRst, $03
0008DAF9 ECF5                       	smpsPSGAlterVol     $F5
0008DAFB 9B07                       	dc.b	nD2, $07
0008DAFD EC0B                       	smpsPSGAlterVol     $0B
0008DAFF 8007                       	dc.b	nRst, $07
0008DB01 E105                       	smpsAlterNote       $05
0008DB03 0101                       	dc.b	$01, $01
0008DB05 E1FF                       	smpsAlterNote       $FF
0008DB07 01                         	dc.b	$01
0008DB08 E1FC                       	smpsAlterNote       $FC
0008DB0A 01                         	dc.b	$01
0008DB0B E1FF                       	smpsAlterNote       $FF
0008DB0D ECF5                       	smpsPSGAlterVol     $F5
0008DB0F 9B06                       	dc.b	nD2, $06
0008DB11 EC0B                       	smpsPSGAlterVol     $0B
0008DB13 8004                       	dc.b	nRst, $04
0008DB15 ECF5                       	smpsPSGAlterVol     $F5
0008DB17 9B06                       	dc.b	nD2, $06
0008DB19 EC04                       	smpsPSGAlterVol     $04
0008DB1B E701                       	dc.b	smpsNoAttack, $01
0008DB1D EC07                       	smpsPSGAlterVol     $07
0008DB1F 8006                       	dc.b	nRst, $06
0008DB21 E102                       	smpsAlterNote       $02
0008DB23 01                         	dc.b	$01
0008DB24 E106                       	smpsAlterNote       $06
0008DB26 01                         	dc.b	$01
0008DB27 E102                       	smpsAlterNote       $02
0008DB29 01                         	dc.b	$01
0008DB2A E1FC                       	smpsAlterNote       $FC
0008DB2C 01                         	dc.b	$01
0008DB2D E1FF                       	smpsAlterNote       $FF
0008DB2F ECF5                       	smpsPSGAlterVol     $F5
0008DB31 9B06                       	dc.b	nD2, $06
0008DB33 EC04                       	smpsPSGAlterVol     $04
0008DB35 E701                       	dc.b	smpsNoAttack, $01
0008DB37 EC07                       	smpsPSGAlterVol     $07
0008DB39 8003                       	dc.b	nRst, $03
0008DB3B ECF5                       	smpsPSGAlterVol     $F5
0008DB3D 9B06                       	dc.b	nD2, $06
0008DB3F EC04                       	smpsPSGAlterVol     $04
0008DB41 E701                       	dc.b	smpsNoAttack, $01
0008DB43 EC07                       	smpsPSGAlterVol     $07
0008DB45 8006                       	dc.b	nRst, $06
0008DB47 E102                       	smpsAlterNote       $02
0008DB49 01                         	dc.b	$01
0008DB4A E106                       	smpsAlterNote       $06
0008DB4C 01                         	dc.b	$01
0008DB4D E105                       	smpsAlterNote       $05
0008DB4F 01                         	dc.b	$01
0008DB50 E1FF                       	smpsAlterNote       $FF
0008DB52 01                         	dc.b	$01
0008DB53 ECF5                       	smpsPSGAlterVol     $F5
0008DB55 9B07                       	dc.b	nD2, $07
0008DB57 EC0B                       	smpsPSGAlterVol     $0B
0008DB59 8004                       	dc.b	nRst, $04
0008DB5B ECF5                       	smpsPSGAlterVol     $F5
0008DB5D 9B06                       	dc.b	nD2, $06
0008DB5F EC0B                       	smpsPSGAlterVol     $0B
0008DB61 8007                       	dc.b	nRst, $07
0008DB63 E105                       	smpsAlterNote       $05
0008DB65 0101                       	dc.b	$01, $01
0008DB67 E101                       	smpsAlterNote       $01
0008DB69 01                         	dc.b	$01
0008DB6A E1FB                       	smpsAlterNote       $FB
0008DB6C 01                         	dc.b	$01
0008DB6D E1FE                       	smpsAlterNote       $FE
0008DB6F ECF5                       	smpsPSGAlterVol     $F5
0008DB71 9A06                       	dc.b	nCs2, $06
0008DB73 EC04                       	smpsPSGAlterVol     $04
0008DB75 E701                       	dc.b	smpsNoAttack, $01
0008DB77 EC07                       	smpsPSGAlterVol     $07
0008DB79 8003                       	dc.b	nRst, $03
0008DB7B ECF5                       	smpsPSGAlterVol     $F5
0008DB7D 9A06                       	dc.b	nCs2, $06
0008DB7F EC04                       	smpsPSGAlterVol     $04
0008DB81 E701                       	dc.b	smpsNoAttack, $01
0008DB83 EC07                       	smpsPSGAlterVol     $07
0008DB85 8003                       	dc.b	nRst, $03
0008DB87 E1FC                       	smpsAlterNote       $FC
0008DB89 ECF5                       	smpsPSGAlterVol     $F5
0008DB8B 8F07                       	dc.b	nD1, $07
0008DB8D EC0B                       	smpsPSGAlterVol     $0B
0008DB8F 8006                       	dc.b	nRst, $06
0008DB91 E1FF                       	smpsAlterNote       $FF
0008DB93 01                         	dc.b	$01
0008DB94 E103                       	smpsAlterNote       $03
0008DB96 01                         	dc.b	$01
0008DB97 E102                       	smpsAlterNote       $02
0008DB99 01                         	dc.b	$01
0008DB9A E1FC                       	smpsAlterNote       $FC
0008DB9C 01                         	dc.b	$01
0008DB9D E1F8                       	smpsAlterNote       $F8
0008DB9F 01                         	dc.b	$01
0008DBA0 E1FC                       	smpsAlterNote       $FC
0008DBA2 01                         	dc.b	$01
0008DBA3 E1FF                       	smpsAlterNote       $FF
0008DBA5 01                         	dc.b	$01
0008DBA6 E103                       	smpsAlterNote       $03
0008DBA8 01                         	dc.b	$01
0008DBA9 E1FC                       	smpsAlterNote       $FC
0008DBAB ECF5                       	smpsPSGAlterVol     $F5
0008DBAD 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DBB1 EC04                       	smpsPSGAlterVol     $04
0008DBB3 E701                       	dc.b	smpsNoAttack, $01
0008DBB5 EC07                       	smpsPSGAlterVol     $07
0008DBB7 8009                       	dc.b	nRst, $09
0008DBB9 E1FF                       	smpsAlterNote       $FF
0008DBBB 01                         	dc.b	$01
0008DBBC E103                       	smpsAlterNote       $03
0008DBBE 01                         	dc.b	$01
0008DBBF E102                       	smpsAlterNote       $02
0008DBC1 01                         	dc.b	$01
0008DBC2 E1FC                       	smpsAlterNote       $FC
0008DBC4 01                         	dc.b	$01
0008DBC5 E1F8                       	smpsAlterNote       $F8
0008DBC7 01                         	dc.b	$01
0008DBC8 E1FC                       	smpsAlterNote       $FC
0008DBCA 01                         	dc.b	$01
0008DBCB E1FF                       	smpsAlterNote       $FF
0008DBCD 01                         	dc.b	$01
0008DBCE E103                       	smpsAlterNote       $03
0008DBD0 01                         	dc.b	$01
0008DBD1 E1FF                       	smpsAlterNote       $FF
0008DBD3 01                         	dc.b	$01
0008DBD4 E1F9                       	smpsAlterNote       $F9
0008DBD6 01                         	dc.b	$01
0008DBD7 E1F8                       	smpsAlterNote       $F8
0008DBD9 01                         	dc.b	$01
0008DBDA E1FC                       	smpsAlterNote       $FC
0008DBDC 01                         	dc.b	$01
0008DBDD E102                       	smpsAlterNote       $02
0008DBDF 0101                       	dc.b	$01, $01
0008DBE1 E1FF                       	smpsAlterNote       $FF
0008DBE3 01                         	dc.b	$01
0008DBE4 E1FC                       	smpsAlterNote       $FC
0008DBE6 ECF5                       	smpsPSGAlterVol     $F5
0008DBE8 8F02                       	dc.b	nD1, $02
0008DBEA EC04                       	smpsPSGAlterVol     $04
0008DBEC E701                       	dc.b	smpsNoAttack, $01
0008DBEE ECFC                       	smpsPSGAlterVol     $FC
0008DBF0 E1FB                       	smpsAlterNote       $FB
0008DBF2 8D06                       	dc.b	nC1, $06
0008DBF4 EC04                       	smpsPSGAlterVol     $04
0008DBF6 E701                       	dc.b	smpsNoAttack, $01
0008DBF8 EC07                       	smpsPSGAlterVol     $07
0008DBFA 8006                       	dc.b	nRst, $06
0008DBFC E1FE                       	smpsAlterNote       $FE
0008DBFE 01                         	dc.b	$01
0008DBFF E102                       	smpsAlterNote       $02
0008DC01 01                         	dc.b	$01
0008DC02 E1FE                       	smpsAlterNote       $FE
0008DC04 01                         	dc.b	$01
0008DC05 E1FB                       	smpsAlterNote       $FB
0008DC07 01                         	dc.b	$01
0008DC08 E1F7                       	smpsAlterNote       $F7
0008DC0A 01                         	dc.b	$01
0008DC0B E1FB                       	smpsAlterNote       $FB
0008DC0D 01                         	dc.b	$01
0008DC0E E101                       	smpsAlterNote       $01
0008DC10 01                         	dc.b	$01
0008DC11 E102                       	smpsAlterNote       $02
0008DC13 01                         	dc.b	$01
0008DC14 E1FB                       	smpsAlterNote       $FB
0008DC16 ECF5                       	smpsPSGAlterVol     $F5
0008DC18 8D02                       	dc.b	nC1, $02
0008DC1A EC04                       	smpsPSGAlterVol     $04
0008DC1C E701                       	dc.b	smpsNoAttack, $01
0008DC1E E1FC                       	smpsAlterNote       $FC
0008DC20 ECFC                       	smpsPSGAlterVol     $FC
0008DC22 8F0D                       	dc.b	nD1, $0D
0008DC24 E1FF                       	smpsAlterNote       $FF
0008DC26 E701                       	dc.b	smpsNoAttack, $01
0008DC28 E103                       	smpsAlterNote       $03
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E1FF                       	smpsAlterNote       $FF
0008DC2E E701                       	dc.b	smpsNoAttack, $01
0008DC30 E1FC                       	smpsAlterNote       $FC
0008DC32 E701                       	dc.b	smpsNoAttack, $01
0008DC34 E1F8                       	smpsAlterNote       $F8
0008DC36 E701                       	dc.b	smpsNoAttack, $01
0008DC38 E1FC                       	smpsAlterNote       $FC
0008DC3A E701                       	dc.b	smpsNoAttack, $01
0008DC3C E102                       	smpsAlterNote       $02
0008DC3E E701                       	dc.b	smpsNoAttack, $01
0008DC40 E103                       	smpsAlterNote       $03
0008DC42 E701                       	dc.b	smpsNoAttack, $01
0008DC44 E1FF                       	smpsAlterNote       $FF
0008DC46 E701                       	dc.b	smpsNoAttack, $01
0008DC48 E1F9                       	smpsAlterNote       $F9
0008DC4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC4E E1FC                       	smpsAlterNote       $FC
0008DC50 E701                       	dc.b	smpsNoAttack, $01
0008DC52 E102                       	smpsAlterNote       $02
0008DC54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC58 E1FC                       	smpsAlterNote       $FC
0008DC5A E701                       	dc.b	smpsNoAttack, $01
0008DC5C E1F9                       	smpsAlterNote       $F9
0008DC5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC62 E1FF                       	smpsAlterNote       $FF
0008DC64 EC04                       	smpsPSGAlterVol     $04
0008DC66 E701                       	dc.b	smpsNoAttack, $01
0008DC68 EC07                       	smpsPSGAlterVol     $07
0008DC6A E103                       	smpsAlterNote       $03
0008DC6C 8001                       	dc.b	nRst, $01
0008DC6E E102                       	smpsAlterNote       $02
0008DC70 01                         	dc.b	$01
0008DC71 E1FB                       	smpsAlterNote       $FB
0008DC73 01                         	dc.b	$01
0008DC74 E1F7                       	smpsAlterNote       $F7
0008DC76 01                         	dc.b	$01
0008DC77 E1FB                       	smpsAlterNote       $FB
0008DC79 01                         	dc.b	$01
0008DC7A E102                       	smpsAlterNote       $02
0008DC7C 01                         	dc.b	$01
0008DC7D E103                       	smpsAlterNote       $03
0008DC7F 01                         	dc.b	$01
0008DC80 E1FB                       	smpsAlterNote       $FB
0008DC82 ECF5                       	smpsPSGAlterVol     $F5
0008DC84 8E06                       	dc.b	nCs1, $06
0008DC86 EC04                       	smpsPSGAlterVol     $04
0008DC88 E701                       	dc.b	smpsNoAttack, $01
0008DC8A EC07                       	smpsPSGAlterVol     $07
0008DC8C 8003                       	dc.b	nRst, $03
0008DC8E ECF5                       	smpsPSGAlterVol     $F5
0008DC90 8E06                       	dc.b	nCs1, $06
0008DC92 EC04                       	smpsPSGAlterVol     $04
0008DC94 E701                       	dc.b	smpsNoAttack, $01
0008DC96 EC07                       	smpsPSGAlterVol     $07
0008DC98 8006                       	dc.b	nRst, $06
0008DC9A E1FE                       	smpsAlterNote       $FE
0008DC9C 01                         	dc.b	$01
0008DC9D E102                       	smpsAlterNote       $02
0008DC9F 01                         	dc.b	$01
0008DCA0 E1FE                       	smpsAlterNote       $FE
0008DCA2 01                         	dc.b	$01
0008DCA3 E1F9                       	smpsAlterNote       $F9
0008DCA5 01                         	dc.b	$01
0008DCA6 E1FC                       	smpsAlterNote       $FC
0008DCA8 ECF5                       	smpsPSGAlterVol     $F5
0008DCAA 8F06                       	dc.b	nD1, $06
0008DCAC EC04                       	smpsPSGAlterVol     $04
0008DCAE E701                       	dc.b	smpsNoAttack, $01
0008DCB0 EC07                       	smpsPSGAlterVol     $07
0008DCB2 8003                       	dc.b	nRst, $03
0008DCB4 ECF5                       	smpsPSGAlterVol     $F5
0008DCB6 8F07                       	dc.b	nD1, $07
0008DCB8 EC0B                       	smpsPSGAlterVol     $0B
0008DCBA 8006                       	dc.b	nRst, $06
0008DCBC E1FF                       	smpsAlterNote       $FF
0008DCBE 01                         	dc.b	$01
0008DCBF E102                       	smpsAlterNote       $02
0008DCC1 0101                       	dc.b	$01, $01
0008DCC3 E1FB                       	smpsAlterNote       $FB
0008DCC5 01                         	dc.b	$01
0008DCC6 ECF5                       	smpsPSGAlterVol     $F5
0008DCC8 8E07                       	dc.b	nCs1, $07
0008DCCA EC0B                       	smpsPSGAlterVol     $0B
0008DCCC 8004                       	dc.b	nRst, $04
0008DCCE ECF5                       	smpsPSGAlterVol     $F5
0008DCD0 8E06                       	dc.b	nCs1, $06
0008DCD2 EC04                       	smpsPSGAlterVol     $04
0008DCD4 E701                       	dc.b	smpsNoAttack, $01
0008DCD6 EC07                       	smpsPSGAlterVol     $07
0008DCD8 8006                       	dc.b	nRst, $06
0008DCDA E101                       	smpsAlterNote       $01
0008DCDC 01                         	dc.b	$01
0008DCDD E102                       	smpsAlterNote       $02
0008DCDF 01                         	dc.b	$01
0008DCE0 E1FE                       	smpsAlterNote       $FE
0008DCE2 01                         	dc.b	$01
0008DCE3 E1F8                       	smpsAlterNote       $F8
0008DCE5 01                         	dc.b	$01
0008DCE6 E1FB                       	smpsAlterNote       $FB
0008DCE8 ECF5                       	smpsPSGAlterVol     $F5
0008DCEA 8E06                       	dc.b	nCs1, $06
0008DCEC EC04                       	smpsPSGAlterVol     $04
0008DCEE E701                       	dc.b	smpsNoAttack, $01
0008DCF0 EC07                       	smpsPSGAlterVol     $07
0008DCF2 8003                       	dc.b	nRst, $03
0008DCF4 ECF5                       	smpsPSGAlterVol     $F5
0008DCF6 8E06                       	dc.b	nCs1, $06
0008DCF8 EC04                       	smpsPSGAlterVol     $04
0008DCFA E701                       	dc.b	smpsNoAttack, $01
0008DCFC EC07                       	smpsPSGAlterVol     $07
0008DCFE 8004                       	dc.b	nRst, $04
0008DD00 E1FC                       	smpsAlterNote       $FC
0008DD02 ECF5                       	smpsPSGAlterVol     $F5
0008DD04 8F06                       	dc.b	nD1, $06
0008DD06 EC0B                       	smpsPSGAlterVol     $0B
0008DD08 8006                       	dc.b	nRst, $06
0008DD0A E1FF                       	smpsAlterNote       $FF
0008DD0C 01                         	dc.b	$01
0008DD0D E102                       	smpsAlterNote       $02
0008DD0F 0101                       	dc.b	$01, $01
0008DD11 E1FC                       	smpsAlterNote       $FC
0008DD13 01                         	dc.b	$01
0008DD14 E1F8                       	smpsAlterNote       $F8
0008DD16 01                         	dc.b	$01
0008DD17 E1F9                       	smpsAlterNote       $F9
0008DD19 01                         	dc.b	$01
0008DD1A E1FF                       	smpsAlterNote       $FF
0008DD1C 01                         	dc.b	$01
0008DD1D E103                       	smpsAlterNote       $03
0008DD1F 01                         	dc.b	$01
0008DD20 E1FC                       	smpsAlterNote       $FC
0008DD22 ECF5                       	smpsPSGAlterVol     $F5
0008DD24 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DD28 EC04                       	smpsPSGAlterVol     $04
0008DD2A E701                       	dc.b	smpsNoAttack, $01
0008DD2C EC07                       	smpsPSGAlterVol     $07
0008DD2E 8009                       	dc.b	nRst, $09
0008DD30 E1FF                       	smpsAlterNote       $FF
0008DD32 01                         	dc.b	$01
0008DD33 E102                       	smpsAlterNote       $02
0008DD35 0101                       	dc.b	$01, $01
0008DD37 E1FC                       	smpsAlterNote       $FC
0008DD39 01                         	dc.b	$01
0008DD3A E1F8                       	smpsAlterNote       $F8
0008DD3C 01                         	dc.b	$01
0008DD3D E1F9                       	smpsAlterNote       $F9
0008DD3F 01                         	dc.b	$01
0008DD40 E1FF                       	smpsAlterNote       $FF
0008DD42 01                         	dc.b	$01
0008DD43 E103                       	smpsAlterNote       $03
0008DD45 01                         	dc.b	$01
0008DD46 E1FF                       	smpsAlterNote       $FF
0008DD48 01                         	dc.b	$01
0008DD49 E1FC                       	smpsAlterNote       $FC
0008DD4B 01                         	dc.b	$01
0008DD4C E1F8                       	smpsAlterNote       $F8
0008DD4E 01                         	dc.b	$01
0008DD4F E1FC                       	smpsAlterNote       $FC
0008DD51 01                         	dc.b	$01
0008DD52 E102                       	smpsAlterNote       $02
0008DD54 01                         	dc.b	$01
0008DD55 E103                       	smpsAlterNote       $03
0008DD57 01                         	dc.b	$01
0008DD58 E1FF                       	smpsAlterNote       $FF
0008DD5A 01                         	dc.b	$01
0008DD5B E1FC                       	smpsAlterNote       $FC
0008DD5D ECF5                       	smpsPSGAlterVol     $F5
0008DD5F 8F03                       	dc.b	nD1, $03
0008DD61 E1FB                       	smpsAlterNote       $FB
0008DD63 8D06                       	dc.b	nC1, $06
0008DD65 EC04                       	smpsPSGAlterVol     $04
0008DD67 E701                       	dc.b	smpsNoAttack, $01
0008DD69 EC07                       	smpsPSGAlterVol     $07
0008DD6B 8006                       	dc.b	nRst, $06
0008DD6D E1FE                       	smpsAlterNote       $FE
0008DD6F 01                         	dc.b	$01
0008DD70 E102                       	smpsAlterNote       $02
0008DD72 01                         	dc.b	$01
0008DD73 E101                       	smpsAlterNote       $01
0008DD75 01                         	dc.b	$01
0008DD76 E1FB                       	smpsAlterNote       $FB
0008DD78 01                         	dc.b	$01
0008DD79 E1F7                       	smpsAlterNote       $F7
0008DD7B 01                         	dc.b	$01
0008DD7C E1FB                       	smpsAlterNote       $FB
0008DD7E 01                         	dc.b	$01
0008DD7F E1FE                       	smpsAlterNote       $FE
0008DD81 01                         	dc.b	$01
0008DD82 E102                       	smpsAlterNote       $02
0008DD84 01                         	dc.b	$01
0008DD85 E1FB                       	smpsAlterNote       $FB
0008DD87 ECF5                       	smpsPSGAlterVol     $F5
0008DD89 8D03                       	dc.b	nC1, $03
0008DD8B E1FC                       	smpsAlterNote       $FC
0008DD8D 8F0D                       	dc.b	nD1, $0D
0008DD8F E1FF                       	smpsAlterNote       $FF
0008DD91 E701                       	dc.b	smpsNoAttack, $01
0008DD93 E103                       	smpsAlterNote       $03
0008DD95 E701                       	dc.b	smpsNoAttack, $01
0008DD97 E1FF                       	smpsAlterNote       $FF
0008DD99 E701                       	dc.b	smpsNoAttack, $01
0008DD9B E1FC                       	smpsAlterNote       $FC
0008DD9D E701                       	dc.b	smpsNoAttack, $01
0008DD9F E1F8                       	smpsAlterNote       $F8
0008DDA1 E701                       	dc.b	smpsNoAttack, $01
0008DDA3 E1FC                       	smpsAlterNote       $FC
0008DDA5 E701                       	dc.b	smpsNoAttack, $01
0008DDA7 E102                       	smpsAlterNote       $02
0008DDA9 E701                       	dc.b	smpsNoAttack, $01
0008DDAB E103                       	smpsAlterNote       $03
0008DDAD E701                       	dc.b	smpsNoAttack, $01
0008DDAF E1FF                       	smpsAlterNote       $FF
0008DDB1 E701                       	dc.b	smpsNoAttack, $01
0008DDB3 E1F9                       	smpsAlterNote       $F9
0008DDB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB9 E1FC                       	smpsAlterNote       $FC
0008DDBB E701                       	dc.b	smpsNoAttack, $01
0008DDBD E102                       	smpsAlterNote       $02
0008DDBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDC3 E1FF                       	smpsAlterNote       $FF
0008DDC5 E701                       	dc.b	smpsNoAttack, $01
0008DDC7 E1F9                       	smpsAlterNote       $F9
0008DDC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDCD E1FF                       	smpsAlterNote       $FF
0008DDCF EC04                       	smpsPSGAlterVol     $04
0008DDD1 E701                       	dc.b	smpsNoAttack, $01
0008DDD3 EC07                       	smpsPSGAlterVol     $07
0008DDD5 E103                       	smpsAlterNote       $03
0008DDD7 8001                       	dc.b	nRst, $01
0008DDD9 E102                       	smpsAlterNote       $02
0008DDDB 01                         	dc.b	$01
0008DDDC E1FB                       	smpsAlterNote       $FB
0008DDDE 01                         	dc.b	$01
0008DDDF E1F7                       	smpsAlterNote       $F7
0008DDE1 01                         	dc.b	$01
0008DDE2 E1FB                       	smpsAlterNote       $FB
0008DDE4 01                         	dc.b	$01
0008DDE5 E1FF                       	smpsAlterNote       $FF
0008DDE7 01                         	dc.b	$01
0008DDE8 E103                       	smpsAlterNote       $03
0008DDEA 01                         	dc.b	$01
0008DDEB E1FB                       	smpsAlterNote       $FB
0008DDED ECF5                       	smpsPSGAlterVol     $F5
0008DDEF 8E06                       	dc.b	nCs1, $06
0008DDF1 EC04                       	smpsPSGAlterVol     $04
0008DDF3 E701                       	dc.b	smpsNoAttack, $01
0008DDF5 EC07                       	smpsPSGAlterVol     $07
0008DDF7 8003                       	dc.b	nRst, $03
0008DDF9 ECF5                       	smpsPSGAlterVol     $F5
0008DDFB 8E06                       	dc.b	nCs1, $06
0008DDFD EC04                       	smpsPSGAlterVol     $04
0008DDFF E701                       	dc.b	smpsNoAttack, $01
0008DE01 EC07                       	smpsPSGAlterVol     $07
0008DE03 8006                       	dc.b	nRst, $06
0008DE05 E1FE                       	smpsAlterNote       $FE
0008DE07 01                         	dc.b	$01
0008DE08 E102                       	smpsAlterNote       $02
0008DE0A 01                         	dc.b	$01
0008DE0B E1FE                       	smpsAlterNote       $FE
0008DE0D 01                         	dc.b	$01
0008DE0E E1FC                       	smpsAlterNote       $FC
0008DE10 01                         	dc.b	$01
0008DE11 ECF5                       	smpsPSGAlterVol     $F5
0008DE13 8F06                       	dc.b	nD1, $06
0008DE15 EC04                       	smpsPSGAlterVol     $04
0008DE17 E701                       	dc.b	smpsNoAttack, $01
0008DE19 EC07                       	smpsPSGAlterVol     $07
0008DE1B 8003                       	dc.b	nRst, $03
0008DE1D ECF5                       	smpsPSGAlterVol     $F5
0008DE1F 8F07                       	dc.b	nD1, $07
0008DE21 EC0B                       	smpsPSGAlterVol     $0B
0008DE23 8007                       	dc.b	nRst, $07
0008DE25 E102                       	smpsAlterNote       $02
0008DE27 0101                       	dc.b	$01, $01
0008DE29 E1FB                       	smpsAlterNote       $FB
0008DE2B 01                         	dc.b	$01
0008DE2C E1F8                       	smpsAlterNote       $F8
0008DE2E 01                         	dc.b	$01
0008DE2F E1FB                       	smpsAlterNote       $FB
0008DE31 ECF5                       	smpsPSGAlterVol     $F5
0008DE33 8E06                       	dc.b	nCs1, $06
0008DE35 EC0B                       	smpsPSGAlterVol     $0B
0008DE37 8004                       	dc.b	nRst, $04
0008DE39 ECF5                       	smpsPSGAlterVol     $F5
0008DE3B 8E06                       	dc.b	nCs1, $06
0008DE3D EC04                       	smpsPSGAlterVol     $04
0008DE3F E701                       	dc.b	smpsNoAttack, $01
0008DE41 EC07                       	smpsPSGAlterVol     $07
0008DE43 8006                       	dc.b	nRst, $06
0008DE45 E1FE                       	smpsAlterNote       $FE
0008DE47 01                         	dc.b	$01
0008DE48 E102                       	smpsAlterNote       $02
0008DE4A 01                         	dc.b	$01
0008DE4B E1FE                       	smpsAlterNote       $FE
0008DE4D 01                         	dc.b	$01
0008DE4E E1F9                       	smpsAlterNote       $F9
0008DE50 01                         	dc.b	$01
0008DE51 E1FC                       	smpsAlterNote       $FC
0008DE53 ECF5                       	smpsPSGAlterVol     $F5
0008DE55 8F06                       	dc.b	nD1, $06
0008DE57 EC04                       	smpsPSGAlterVol     $04
0008DE59 E701                       	dc.b	smpsNoAttack, $01
0008DE5B EC07                       	smpsPSGAlterVol     $07
0008DE5D 8003                       	dc.b	nRst, $03
0008DE5F ECF5                       	smpsPSGAlterVol     $F5
0008DE61 8F06                       	dc.b	nD1, $06
0008DE63 EC04                       	smpsPSGAlterVol     $04
0008DE65 E701                       	dc.b	smpsNoAttack, $01
0008DE67 EC07                       	smpsPSGAlterVol     $07
0008DE69 8006                       	dc.b	nRst, $06
0008DE6B E1FF                       	smpsAlterNote       $FF
0008DE6D 01                         	dc.b	$01
0008DE6E E103                       	smpsAlterNote       $03
0008DE70 01                         	dc.b	$01
0008DE71 E102                       	smpsAlterNote       $02
0008DE73 01                         	dc.b	$01
0008DE74 E1FB                       	smpsAlterNote       $FB
0008DE76 01                         	dc.b	$01
0008DE77 ECF5                       	smpsPSGAlterVol     $F5
0008DE79 8E07                       	dc.b	nCs1, $07
0008DE7B EC0B                       	smpsPSGAlterVol     $0B
0008DE7D 8004                       	dc.b	nRst, $04
0008DE7F ECF5                       	smpsPSGAlterVol     $F5
0008DE81 8E06                       	dc.b	nCs1, $06
0008DE83 EC0B                       	smpsPSGAlterVol     $0B
0008DE85 8007                       	dc.b	nRst, $07
0008DE87 E101                       	smpsAlterNote       $01
0008DE89 0101                       	dc.b	$01, $01
0008DE8B E1FE                       	smpsAlterNote       $FE
0008DE8D 01                         	dc.b	$01
0008DE8E E1F9                       	smpsAlterNote       $F9
0008DE90 01                         	dc.b	$01
0008DE91 E1FC                       	smpsAlterNote       $FC
0008DE93 ECF5                       	smpsPSGAlterVol     $F5
0008DE95 8F06                       	dc.b	nD1, $06
0008DE97 EC04                       	smpsPSGAlterVol     $04
0008DE99 E701                       	dc.b	smpsNoAttack, $01
0008DE9B EC07                       	smpsPSGAlterVol     $07
0008DE9D 8003                       	dc.b	nRst, $03
0008DE9F ECF5                       	smpsPSGAlterVol     $F5
0008DEA1 8F06                       	dc.b	nD1, $06
0008DEA3 EC04                       	smpsPSGAlterVol     $04
0008DEA5 E701                       	dc.b	smpsNoAttack, $01
0008DEA7 EC07                       	smpsPSGAlterVol     $07
0008DEA9 8006                       	dc.b	nRst, $06
0008DEAB E1FF                       	smpsAlterNote       $FF
0008DEAD 01                         	dc.b	$01
0008DEAE E103                       	smpsAlterNote       $03
0008DEB0 01                         	dc.b	$01
0008DEB1 E1FF                       	smpsAlterNote       $FF
0008DEB3 01                         	dc.b	$01
0008DEB4 E1FB                       	smpsAlterNote       $FB
0008DEB6 01                         	dc.b	$01
0008DEB7 ECF5                       	smpsPSGAlterVol     $F5
0008DEB9 8E06                       	dc.b	nCs1, $06
0008DEBB EC04                       	smpsPSGAlterVol     $04
0008DEBD E701                       	dc.b	smpsNoAttack, $01
0008DEBF EC07                       	smpsPSGAlterVol     $07
0008DEC1 8003                       	dc.b	nRst, $03
0008DEC3 ECF5                       	smpsPSGAlterVol     $F5
0008DEC5 8E07                       	dc.b	nCs1, $07
0008DEC7 E1FF                       	smpsAlterNote       $FF
0008DEC9 9B06                       	dc.b	nD2, $06
0008DECB EC04                       	smpsPSGAlterVol     $04
0008DECD E701                       	dc.b	smpsNoAttack, $01
0008DECF ECFC                       	smpsPSGAlterVol     $FC
0008DED1 9B03                       	dc.b	nD2, $03
0008DED3 EC04                       	smpsPSGAlterVol     $04
0008DED5 E701                       	dc.b	smpsNoAttack, $01
0008DED7 ECFC                       	smpsPSGAlterVol     $FC
0008DED9 9B02                       	dc.b	nD2, $02
0008DEDB EC04                       	smpsPSGAlterVol     $04
0008DEDD E701                       	dc.b	smpsNoAttack, $01
0008DEDF ECFC                       	smpsPSGAlterVol     $FC
0008DEE1 E1FE                       	smpsAlterNote       $FE
0008DEE3 9A03                       	dc.b	nCs2, $03
0008DEE5 EC0B                       	smpsPSGAlterVol     $0B
0008DEE7 800A                       	dc.b	nRst, $0A
0008DEE9 E102                       	smpsAlterNote       $02
0008DEEB 01                         	dc.b	$01
0008DEEC E10A                       	smpsAlterNote       $0A
0008DEEE 01                         	dc.b	$01
0008DEEF E102                       	smpsAlterNote       $02
0008DEF1 01                         	dc.b	$01
0008DEF2 E1F7                       	smpsAlterNote       $F7
0008DEF4 01                         	dc.b	$01
0008DEF5 E10A                       	smpsAlterNote       $0A
0008DEF7 01                         	dc.b	$01
0008DEF8 E1FC                       	smpsAlterNote       $FC
0008DEFA 01                         	dc.b	$01
0008DEFB E108                       	smpsAlterNote       $08
0008DEFD 0101                       	dc.b	$01, $01
0008DEFF E102                       	smpsAlterNote       $02
0008DF01 01                         	dc.b	$01
0008DF02 E1F7                       	smpsAlterNote       $F7
0008DF04 0101                       	dc.b	$01, $01
0008DF06 E1FC                       	smpsAlterNote       $FC
0008DF08 ECF5                       	smpsPSGAlterVol     $F5
0008DF0A 8F06                       	dc.b	nD1, $06
0008DF0C EC04                       	smpsPSGAlterVol     $04
0008DF0E E701                       	dc.b	smpsNoAttack, $01
0008DF10 EC07                       	smpsPSGAlterVol     $07
0008DF12 8003                       	dc.b	nRst, $03
0008DF14 ECF5                       	smpsPSGAlterVol     $F5
0008DF16 8F06                       	dc.b	nD1, $06
0008DF18 EC04                       	smpsPSGAlterVol     $04
0008DF1A E701                       	dc.b	smpsNoAttack, $01
0008DF1C EC07                       	smpsPSGAlterVol     $07
0008DF1E 8006                       	dc.b	nRst, $06
0008DF20 E1FF                       	smpsAlterNote       $FF
0008DF22 01                         	dc.b	$01
0008DF23 E102                       	smpsAlterNote       $02
0008DF25 01                         	dc.b	$01
0008DF26 E101                       	smpsAlterNote       $01
0008DF28 01                         	dc.b	$01
0008DF29 E1FC                       	smpsAlterNote       $FC
0008DF2B 01                         	dc.b	$01
0008DF2C ECF5                       	smpsPSGAlterVol     $F5
0008DF2E 9007                       	dc.b	nEb1, $07
0008DF30 EC0B                       	smpsPSGAlterVol     $0B
0008DF32 8004                       	dc.b	nRst, $04
0008DF34 ECF5                       	smpsPSGAlterVol     $F5
0008DF36 9006                       	dc.b	nEb1, $06
0008DF38 EC0B                       	smpsPSGAlterVol     $0B
0008DF3A 8007                       	dc.b	nRst, $07
0008DF3C E103                       	smpsAlterNote       $03
0008DF3E 0101                       	dc.b	$01, $01
0008DF40 E1FF                       	smpsAlterNote       $FF
0008DF42 01                         	dc.b	$01
0008DF43 E1F9                       	smpsAlterNote       $F9
0008DF45 01                         	dc.b	$01
0008DF46 E1FC                       	smpsAlterNote       $FC
0008DF48 ECF5                       	smpsPSGAlterVol     $F5
0008DF4A 8F06                       	dc.b	nD1, $06
0008DF4C EC04                       	smpsPSGAlterVol     $04
0008DF4E E701                       	dc.b	smpsNoAttack, $01
0008DF50 EC07                       	smpsPSGAlterVol     $07
0008DF52 8003                       	dc.b	nRst, $03
0008DF54 ECF5                       	smpsPSGAlterVol     $F5
0008DF56 8F06                       	dc.b	nD1, $06
0008DF58 EC04                       	smpsPSGAlterVol     $04
0008DF5A E701                       	dc.b	smpsNoAttack, $01
0008DF5C EC07                       	smpsPSGAlterVol     $07
0008DF5E 8006                       	dc.b	nRst, $06
0008DF60 E1FF                       	smpsAlterNote       $FF
0008DF62 01                         	dc.b	$01
0008DF63 E103                       	smpsAlterNote       $03
0008DF65 01                         	dc.b	$01
0008DF66 E1FF                       	smpsAlterNote       $FF
0008DF68 01                         	dc.b	$01
0008DF69 E1F9                       	smpsAlterNote       $F9
0008DF6B 01                         	dc.b	$01
0008DF6C E1FC                       	smpsAlterNote       $FC
0008DF6E ECF5                       	smpsPSGAlterVol     $F5
0008DF70 8F06                       	dc.b	nD1, $06
0008DF72 EC04                       	smpsPSGAlterVol     $04
0008DF74 E701                       	dc.b	smpsNoAttack, $01
0008DF76 EC07                       	smpsPSGAlterVol     $07
0008DF78 8003                       	dc.b	nRst, $03
0008DF7A ECF5                       	smpsPSGAlterVol     $F5
0008DF7C 8F07                       	dc.b	nD1, $07
0008DF7E EC0B                       	smpsPSGAlterVol     $0B
0008DF80 8006                       	dc.b	nRst, $06
0008DF82 E1FF                       	smpsAlterNote       $FF
0008DF84 01                         	dc.b	$01
0008DF85 E102                       	smpsAlterNote       $02
0008DF87 0101                       	dc.b	$01, $01
0008DF89 E1FC                       	smpsAlterNote       $FC
0008DF8B 01                         	dc.b	$01
0008DF8C ECF5                       	smpsPSGAlterVol     $F5
0008DF8E 8F07                       	dc.b	nD1, $07
0008DF90 EC0B                       	smpsPSGAlterVol     $0B
0008DF92 8004                       	dc.b	nRst, $04
0008DF94 ECF5                       	smpsPSGAlterVol     $F5
0008DF96 8F06                       	dc.b	nD1, $06
0008DF98 EC04                       	smpsPSGAlterVol     $04
0008DF9A E701                       	dc.b	smpsNoAttack, $01
0008DF9C EC07                       	smpsPSGAlterVol     $07
0008DF9E 8006                       	dc.b	nRst, $06
0008DFA0 E101                       	smpsAlterNote       $01
0008DFA2 01                         	dc.b	$01
0008DFA3 E102                       	smpsAlterNote       $02
0008DFA5 01                         	dc.b	$01
0008DFA6 E1FF                       	smpsAlterNote       $FF
0008DFA8 01                         	dc.b	$01
0008DFA9 E1F9                       	smpsAlterNote       $F9
0008DFAB 01                         	dc.b	$01
0008DFAC E1FC                       	smpsAlterNote       $FC
0008DFAE ECF5                       	smpsPSGAlterVol     $F5
0008DFB0 9006                       	dc.b	nEb1, $06
0008DFB2 EC04                       	smpsPSGAlterVol     $04
0008DFB4 E701                       	dc.b	smpsNoAttack, $01
0008DFB6 EC07                       	smpsPSGAlterVol     $07
0008DFB8 8003                       	dc.b	nRst, $03
0008DFBA ECF5                       	smpsPSGAlterVol     $F5
0008DFBC 9006                       	dc.b	nEb1, $06
0008DFBE EC04                       	smpsPSGAlterVol     $04
0008DFC0 E701                       	dc.b	smpsNoAttack, $01
0008DFC2 EC07                       	smpsPSGAlterVol     $07
0008DFC4 8006                       	dc.b	nRst, $06
0008DFC6 E100                       	smpsAlterNote       $00
0008DFC8 01                         	dc.b	$01
0008DFC9 E102                       	smpsAlterNote       $02
0008DFCB 01                         	dc.b	$01
0008DFCC E100                       	smpsAlterNote       $00
0008DFCE 01                         	dc.b	$01
0008DFCF E1FF                       	smpsAlterNote       $FF
0008DFD1 01                         	dc.b	$01
0008DFD2 ECF5                       	smpsPSGAlterVol     $F5
0008DFD4 9B06                       	dc.b	nD2, $06
0008DFD6 EC04                       	smpsPSGAlterVol     $04
0008DFD8 E701                       	dc.b	smpsNoAttack, $01
0008DFDA EC07                       	smpsPSGAlterVol     $07
0008DFDC 8003                       	dc.b	nRst, $03
0008DFDE ECF5                       	smpsPSGAlterVol     $F5
0008DFE0 9B07                       	dc.b	nD2, $07
0008DFE2 EC0B                       	smpsPSGAlterVol     $0B
0008DFE4 8007                       	dc.b	nRst, $07
0008DFE6 E105                       	smpsAlterNote       $05
0008DFE8 0101                       	dc.b	$01, $01
0008DFEA E1FF                       	smpsAlterNote       $FF
0008DFEC 01                         	dc.b	$01
0008DFED E1FC                       	smpsAlterNote       $FC
0008DFEF 01                         	dc.b	$01
0008DFF0 E1FF                       	smpsAlterNote       $FF
0008DFF2 ECF5                       	smpsPSGAlterVol     $F5
0008DFF4 9B06                       	dc.b	nD2, $06
0008DFF6 EC0B                       	smpsPSGAlterVol     $0B
0008DFF8 8004                       	dc.b	nRst, $04
0008DFFA ECF5                       	smpsPSGAlterVol     $F5
0008DFFC 9B06                       	dc.b	nD2, $06
0008DFFE EC04                       	smpsPSGAlterVol     $04
0008E000 E701                       	dc.b	smpsNoAttack, $01
0008E002 EC07                       	smpsPSGAlterVol     $07
0008E004 8006                       	dc.b	nRst, $06
0008E006 E102                       	smpsAlterNote       $02
0008E008 01                         	dc.b	$01
0008E009 E106                       	smpsAlterNote       $06
0008E00B 01                         	dc.b	$01
0008E00C E102                       	smpsAlterNote       $02
0008E00E 01                         	dc.b	$01
0008E00F E1FC                       	smpsAlterNote       $FC
0008E011 01                         	dc.b	$01
0008E012 E1FF                       	smpsAlterNote       $FF
0008E014 ECF5                       	smpsPSGAlterVol     $F5
0008E016 9B06                       	dc.b	nD2, $06
0008E018 EC04                       	smpsPSGAlterVol     $04
0008E01A E701                       	dc.b	smpsNoAttack, $01
0008E01C EC07                       	smpsPSGAlterVol     $07
0008E01E 8003                       	dc.b	nRst, $03
0008E020 ECF5                       	smpsPSGAlterVol     $F5
0008E022 9B07                       	dc.b	nD2, $07
0008E024 EC0B                       	smpsPSGAlterVol     $0B
0008E026 8006                       	dc.b	nRst, $06
0008E028 E102                       	smpsAlterNote       $02
0008E02A 01                         	dc.b	$01
0008E02B E105                       	smpsAlterNote       $05
0008E02D 0101                       	dc.b	$01, $01
0008E02F E1FF                       	smpsAlterNote       $FF
0008E031 01                         	dc.b	$01
0008E032 ECF5                       	smpsPSGAlterVol     $F5
0008E034 9B07                       	dc.b	nD2, $07
0008E036 EC0B                       	smpsPSGAlterVol     $0B
0008E038 8004                       	dc.b	nRst, $04
0008E03A ECF5                       	smpsPSGAlterVol     $F5
0008E03C 9B06                       	dc.b	nD2, $06
0008E03E EC04                       	smpsPSGAlterVol     $04
0008E040 E701                       	dc.b	smpsNoAttack, $01
0008E042 EC07                       	smpsPSGAlterVol     $07
0008E044 8006                       	dc.b	nRst, $06
0008E046 E105                       	smpsAlterNote       $05
0008E048 0101                       	dc.b	$01, $01
0008E04A E102                       	smpsAlterNote       $02
0008E04C 01                         	dc.b	$01
0008E04D E1FC                       	smpsAlterNote       $FC
0008E04F 01                         	dc.b	$01
0008E050 E1FF                       	smpsAlterNote       $FF
0008E052 ECF5                       	smpsPSGAlterVol     $F5
0008E054 9B06                       	dc.b	nD2, $06
0008E056 EC04                       	smpsPSGAlterVol     $04
0008E058 E701                       	dc.b	smpsNoAttack, $01
0008E05A EC07                       	smpsPSGAlterVol     $07
0008E05C 8003                       	dc.b	nRst, $03
0008E05E ECF5                       	smpsPSGAlterVol     $F5
0008E060 9B06                       	dc.b	nD2, $06
0008E062 EC04                       	smpsPSGAlterVol     $04
0008E064 E701                       	dc.b	smpsNoAttack, $01
0008E066 EC07                       	smpsPSGAlterVol     $07
0008E068 8006                       	dc.b	nRst, $06
0008E06A E102                       	smpsAlterNote       $02
0008E06C 01                         	dc.b	$01
0008E06D E106                       	smpsAlterNote       $06
0008E06F 01                         	dc.b	$01
0008E070 E102                       	smpsAlterNote       $02
0008E072 01                         	dc.b	$01
0008E073 E1FF                       	smpsAlterNote       $FF
0008E075 01                         	dc.b	$01
0008E076 ECF5                       	smpsPSGAlterVol     $F5
0008E078 9B06                       	dc.b	nD2, $06
0008E07A EC04                       	smpsPSGAlterVol     $04
0008E07C E701                       	dc.b	smpsNoAttack, $01
0008E07E EC07                       	smpsPSGAlterVol     $07
0008E080 8003                       	dc.b	nRst, $03
0008E082 ECF5                       	smpsPSGAlterVol     $F5
0008E084 9B07                       	dc.b	nD2, $07
0008E086 EC0B                       	smpsPSGAlterVol     $0B
0008E088 8007                       	dc.b	nRst, $07
0008E08A E107                       	smpsAlterNote       $07
0008E08C 0101                       	dc.b	$01, $01
0008E08E E1FE                       	smpsAlterNote       $FE
0008E090 01                         	dc.b	$01
0008E091 E1FA                       	smpsAlterNote       $FA
0008E093 0101                       	dc.b	$01, $01
0008E095 E103                       	smpsAlterNote       $03
0008E097 01                         	dc.b	$01
0008E098 E109                       	smpsAlterNote       $09
0008E09A 01                         	dc.b	$01
0008E09B E107                       	smpsAlterNote       $07
0008E09D 01                         	dc.b	$01
0008E09E E1FE                       	smpsAlterNote       $FE
0008E0A0 01                         	dc.b	$01
0008E0A1 E108                       	smpsAlterNote       $08
0008E0A3 01                         	dc.b	$01
0008E0A4 E1FD                       	smpsAlterNote       $FD
0008E0A6 ECF5                       	smpsPSGAlterVol     $F5
0008E0A8 940E                       	dc.b	nG1, $0E
0008E0AA E103                       	smpsAlterNote       $03
0008E0AC EC0B                       	smpsPSGAlterVol     $0B
0008E0AE 8001 01                    	dc.b	nRst, $01, $01
0008E0B1 E1FD                       	smpsAlterNote       $FD
0008E0B3 01                         	dc.b	$01
0008E0B4 E1FB                       	smpsAlterNote       $FB
0008E0B6 0101                       	dc.b	$01, $01
0008E0B8 E100                       	smpsAlterNote       $00
0008E0BA 01                         	dc.b	$01
0008E0BB E103                       	smpsAlterNote       $03
0008E0BD 01                         	dc.b	$01
0008E0BE E100                       	smpsAlterNote       $00
0008E0C0 01                         	dc.b	$01
0008E0C1 E1FD                       	smpsAlterNote       $FD
0008E0C3 01                         	dc.b	$01
0008E0C4 E1FA                       	smpsAlterNote       $FA
0008E0C6 01                         	dc.b	$01
0008E0C7 E1FD                       	smpsAlterNote       $FD
0008E0C9 01                         	dc.b	$01
0008E0CA E103                       	smpsAlterNote       $03
0008E0CC 0101                       	dc.b	$01, $01
0008E0CE E100                       	smpsAlterNote       $00
0008E0D0 01                         	dc.b	$01
0008E0D1 E1FE                       	smpsAlterNote       $FE
0008E0D3 ECF5                       	smpsPSGAlterVol     $F5
0008E0D5 960D                       	dc.b	nA1, $0D
0008E0D7 E104                       	smpsAlterNote       $04
0008E0D9 EC0B                       	smpsPSGAlterVol     $0B
0008E0DB 8001 01                    	dc.b	nRst, $01, $01
0008E0DE E101                       	smpsAlterNote       $01
0008E0E0 01                         	dc.b	$01
0008E0E1 E1FB                       	smpsAlterNote       $FB
0008E0E3 0101                       	dc.b	$01, $01
0008E0E5 E1FE                       	smpsAlterNote       $FE
0008E0E7 01                         	dc.b	$01
0008E0E8 E104                       	smpsAlterNote       $04
0008E0EA 0101                       	dc.b	$01, $01
0008E0EC E1FE                       	smpsAlterNote       $FE
0008E0EE 01                         	dc.b	$01
0008E0EF E1FB                       	smpsAlterNote       $FB
0008E0F1 0101                       	dc.b	$01, $01
0008E0F3 E101                       	smpsAlterNote       $01
0008E0F5 01                         	dc.b	$01
0008E0F6 E104                       	smpsAlterNote       $04
0008E0F8 0101                       	dc.b	$01, $01
0008E0FA E1FE                       	smpsAlterNote       $FE
0008E0FC ECF5                       	smpsPSGAlterVol     $F5
0008E0FE 970D                       	dc.b	nBb1, $0D
0008E100 E101                       	smpsAlterNote       $01
0008E102 EC04                       	smpsPSGAlterVol     $04
0008E104 E701                       	dc.b	smpsNoAttack, $01
0008E106 EC07                       	smpsPSGAlterVol     $07
0008E108 E104                       	smpsAlterNote       $04
0008E10A 8001                       	dc.b	nRst, $01
0008E10C E103                       	smpsAlterNote       $03
0008E10E 01                         	dc.b	$01
0008E10F E1FE                       	smpsAlterNote       $FE
0008E111 01                         	dc.b	$01
0008E112 E1FA                       	smpsAlterNote       $FA
0008E114 01                         	dc.b	$01
0008E115 E1FE                       	smpsAlterNote       $FE
0008E117 01                         	dc.b	$01
0008E118 E101                       	smpsAlterNote       $01
0008E11A 01                         	dc.b	$01
0008E11B E104                       	smpsAlterNote       $04
0008E11D 01                         	dc.b	$01
0008E11E E101                       	smpsAlterNote       $01
0008E120 01                         	dc.b	$01
0008E121 E1FB                       	smpsAlterNote       $FB
0008E123 01                         	dc.b	$01
0008E124 E1FA                       	smpsAlterNote       $FA
0008E126 01                         	dc.b	$01
0008E127 E1FE                       	smpsAlterNote       $FE
0008E129 01                         	dc.b	$01
0008E12A E103                       	smpsAlterNote       $03
0008E12C 0101                       	dc.b	$01, $01
0008E12E E101                       	smpsAlterNote       $01
0008E130 01                         	dc.b	$01
0008E131 E1FE                       	smpsAlterNote       $FE
0008E133 ECF5                       	smpsPSGAlterVol     $F5
0008E135 990D                       	dc.b	nC2, $0D
0008E137 E104                       	smpsAlterNote       $04
0008E139 EC0B                       	smpsPSGAlterVol     $0B
0008E13B 8001 01                    	dc.b	nRst, $01, $01
0008E13E E102                       	smpsAlterNote       $02
0008E140 01                         	dc.b	$01
0008E141 E1FC                       	smpsAlterNote       $FC
0008E143 0101                       	dc.b	$01, $01
0008E145 E102                       	smpsAlterNote       $02
0008E147 01                         	dc.b	$01
0008E148 E104                       	smpsAlterNote       $04
0008E14A 01                         	dc.b	$01
0008E14B E1FF                       	smpsAlterNote       $FF
0008E14D ECF5                       	smpsPSGAlterVol     $F5
0008E14F 9B06                       	dc.b	nD2, $06
0008E151 EC04                       	smpsPSGAlterVol     $04
0008E153 E701                       	dc.b	smpsNoAttack, $01
0008E155 EC07                       	smpsPSGAlterVol     $07
0008E157 8003                       	dc.b	nRst, $03
0008E159 ECF5                       	smpsPSGAlterVol     $F5
0008E15B 9B07                       	dc.b	nD2, $07
0008E15D EC0B                       	smpsPSGAlterVol     $0B
0008E15F 8006                       	dc.b	nRst, $06
0008E161 E101                       	smpsAlterNote       $01
0008E163 01                         	dc.b	$01
0008E164 E104                       	smpsAlterNote       $04
0008E166 0101                       	dc.b	$01, $01
0008E168 E1FE                       	smpsAlterNote       $FE
0008E16A 01                         	dc.b	$01
0008E16B E1FC                       	smpsAlterNote       $FC
0008E16D 01                         	dc.b	$01
0008E16E E1FE                       	smpsAlterNote       $FE
0008E170 ECF5                       	smpsPSGAlterVol     $F5
0008E172 9C06                       	dc.b	nEb2, $06
0008E174 EC0B                       	smpsPSGAlterVol     $0B
0008E176 8004                       	dc.b	nRst, $04
0008E178 ECF5                       	smpsPSGAlterVol     $F5
0008E17A 9C06                       	dc.b	nEb2, $06
0008E17C EC04                       	smpsPSGAlterVol     $04
0008E17E E701                       	dc.b	smpsNoAttack, $01
0008E180 EC07                       	smpsPSGAlterVol     $07
0008E182 8006                       	dc.b	nRst, $06
0008E184 E105                       	smpsAlterNote       $05
0008E186 01                         	dc.b	$01
0008E187 E106                       	smpsAlterNote       $06
0008E189 01                         	dc.b	$01
0008E18A E102                       	smpsAlterNote       $02
0008E18C 01                         	dc.b	$01
0008E18D E1FB                       	smpsAlterNote       $FB
0008E18F 01                         	dc.b	$01
0008E190 E1FF                       	smpsAlterNote       $FF
0008E192 ECF5                       	smpsPSGAlterVol     $F5
0008E194 9B06                       	dc.b	nD2, $06
0008E196 EC04                       	smpsPSGAlterVol     $04
0008E198 E701                       	dc.b	smpsNoAttack, $01
0008E19A EC07                       	smpsPSGAlterVol     $07
0008E19C 8003                       	dc.b	nRst, $03
0008E19E ECF5                       	smpsPSGAlterVol     $F5
0008E1A0 9B06                       	dc.b	nD2, $06
0008E1A2 EC04                       	smpsPSGAlterVol     $04
0008E1A4 E701                       	dc.b	smpsNoAttack, $01
0008E1A6 EC07                       	smpsPSGAlterVol     $07
0008E1A8 8006                       	dc.b	nRst, $06
0008E1AA E101                       	smpsAlterNote       $01
0008E1AC 01                         	dc.b	$01
0008E1AD E105                       	smpsAlterNote       $05
0008E1AF 01                         	dc.b	$01
0008E1B0 E104                       	smpsAlterNote       $04
0008E1B2 01                         	dc.b	$01
0008E1B3 E1FE                       	smpsAlterNote       $FE
0008E1B5 01                         	dc.b	$01
0008E1B6 ECF5                       	smpsPSGAlterVol     $F5
0008E1B8 9C07                       	dc.b	nEb2, $07
0008E1BA EC0B                       	smpsPSGAlterVol     $0B
0008E1BC 8004                       	dc.b	nRst, $04
0008E1BE ECF5                       	smpsPSGAlterVol     $F5
0008E1C0 9C06                       	dc.b	nEb2, $06
0008E1C2 EC0B                       	smpsPSGAlterVol     $0B
0008E1C4 8007                       	dc.b	nRst, $07
0008E1C6 E105                       	smpsAlterNote       $05
0008E1C8 0101                       	dc.b	$01, $01
0008E1CA E102                       	smpsAlterNote       $02
0008E1CC 01                         	dc.b	$01
0008E1CD E1FB                       	smpsAlterNote       $FB
0008E1CF 01                         	dc.b	$01
0008E1D0 E1FF                       	smpsAlterNote       $FF
0008E1D2 ECF5                       	smpsPSGAlterVol     $F5
0008E1D4 9B06                       	dc.b	nD2, $06
0008E1D6 EC04                       	smpsPSGAlterVol     $04
0008E1D8 E701                       	dc.b	smpsNoAttack, $01
0008E1DA EC07                       	smpsPSGAlterVol     $07
0008E1DC 8003                       	dc.b	nRst, $03
0008E1DE ECF5                       	smpsPSGAlterVol     $F5
0008E1E0 9B06                       	dc.b	nD2, $06
0008E1E2 EC04                       	smpsPSGAlterVol     $04
0008E1E4 E701                       	dc.b	smpsNoAttack, $01
0008E1E6 EC07                       	smpsPSGAlterVol     $07
0008E1E8 8006                       	dc.b	nRst, $06
0008E1EA E101                       	smpsAlterNote       $01
0008E1EC 01                         	dc.b	$01
0008E1ED E105                       	smpsAlterNote       $05
0008E1EF 01                         	dc.b	$01
0008E1F0 E101                       	smpsAlterNote       $01
0008E1F2 01                         	dc.b	$01
0008E1F3 E1FC                       	smpsAlterNote       $FC
0008E1F5 01                         	dc.b	$01
0008E1F6 E1FE                       	smpsAlterNote       $FE
0008E1F8 ECF5                       	smpsPSGAlterVol     $F5
0008E1FA 9C06                       	dc.b	nEb2, $06
0008E1FC EC04                       	smpsPSGAlterVol     $04
0008E1FE E701                       	dc.b	smpsNoAttack, $01
0008E200 EC07                       	smpsPSGAlterVol     $07
0008E202 8003                       	dc.b	nRst, $03
0008E204 ECF5                       	smpsPSGAlterVol     $F5
0008E206 9C07                       	dc.b	nEb2, $07
0008E208 EC0B                       	smpsPSGAlterVol     $0B
0008E20A 8006                       	dc.b	nRst, $06
0008E20C E102                       	smpsAlterNote       $02
0008E20E 01                         	dc.b	$01
0008E20F E105                       	smpsAlterNote       $05
0008E211 0101                       	dc.b	$01, $01
0008E213 E1FF                       	smpsAlterNote       $FF
0008E215 01                         	dc.b	$01
0008E216 ECF5                       	smpsPSGAlterVol     $F5
0008E218 9B07                       	dc.b	nD2, $07
0008E21A EC0B                       	smpsPSGAlterVol     $0B
0008E21C 8004                       	dc.b	nRst, $04
0008E21E ECF5                       	smpsPSGAlterVol     $F5
0008E220 9B06                       	dc.b	nD2, $06
0008E222 EC04                       	smpsPSGAlterVol     $04
0008E224 E701                       	dc.b	smpsNoAttack, $01
0008E226 EC07                       	smpsPSGAlterVol     $07
0008E228 8002                       	dc.b	nRst, $02
0008E22A E1FC                       	smpsAlterNote       $FC
0008E22C ECF5                       	smpsPSGAlterVol     $F5
0008E22E 9006                       	dc.b	nEb1, $06
0008E230 EC04                       	smpsPSGAlterVol     $04
0008E232 E701                       	dc.b	smpsNoAttack, $01
0008E234 ECFC                       	smpsPSGAlterVol     $FC
0008E236 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008E23A EC04                       	smpsPSGAlterVol     $04
0008E23C E701                       	dc.b	smpsNoAttack, $01
0008E23E E1FD                       	smpsAlterNote       $FD
0008E240 ECFC                       	smpsPSGAlterVol     $FC
0008E242 9402                       	dc.b	nG1, $02
0008E244 EC04                       	smpsPSGAlterVol     $04
0008E246 E701                       	dc.b	smpsNoAttack, $01
0008E248 E1FE                       	smpsAlterNote       $FE
0008E24A ECFC                       	smpsPSGAlterVol     $FC
0008E24C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008E250 EC04                       	smpsPSGAlterVol     $04
0008E252 E701                       	dc.b	smpsNoAttack, $01
0008E254 EC07                       	smpsPSGAlterVol     $07
0008E256 8008                       	dc.b	nRst, $08
0008E258 F6F4 F3                    	smpsJump            music84_Jump06
0008E25B                            
0008E25B                            ; PSG3 Data
0008E25B                            music84_PSG3:
0008E25B F500                       	smpsPSGvoice        $00
0008E25D E1FF                       	smpsAlterNote       $FF
0008E25F EC0F                       	smpsPSGAlterVol     $0F
0008E261 803A                       	dc.b	nRst, $3A
0008E263                            
0008E263                            music84_Jump05:
0008E263 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008E26F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008E279 F6FF E8                    	smpsJump            music84_Jump05
0008E27C                            
0008E27C                            ; DAC Data
0008E27C                            music84_DAC:
0008E27C E0C0                       	smpsPan             panCenter, $00
0008E27E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008E28A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008E296 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008E2A2 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E2AE 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E2BA 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008E2C6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E2D2 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008E2DE 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E2EA 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008E2F6 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E302 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008E30E 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E31A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E326 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008E332 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008E33E 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008E34A 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008E356 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008E362 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E36E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E37A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E386 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008E392 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E39E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008E3AA 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008E3B6 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008E3C2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E3CE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E3DA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E3E6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E3F2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E3FE 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008E40A 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008E416 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008E422 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E42E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008E43A 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008E446 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E452 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008E45E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008E46A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008E476 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E482 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E48E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E49A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E4A6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E4B2 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008E4BE 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008E4CA 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008E4D6 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008E4E2 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008E4EE 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008E4FA 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008E506 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E512 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008E51E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008E52A 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E536 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E542 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E54E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008E55A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008E566 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008E572 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008E57E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008E58A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008E596 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008E5A2 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008E5AE 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008E5BA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E5C6 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008E5D2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E5DE 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008E5EA 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008E5F6 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008E602 E0C0                       	smpsPan             panCenter, $00
0008E604 F2                         	smpsStop
0008E605                            
0008E605                            music84_Voices:
0008E605                            ;	Voice $00
0008E605                            ;	$3D
0008E605                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008E605                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008E605                            	smpsVcAlgorithm     $05
0008E605                            	smpsVcFeedback      $07
0008E605                            	smpsVcUnusedBits    $00
0008E605                            	smpsVcDetune        $05, $04, $03, $04
0008E605                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E605                            	smpsVcRateScale     $00, $00, $00, $00
0008E605                            	smpsVcAttackRate    $11, $11, $11, $11
0008E605                            	smpsVcAmpMod        $00, $00, $00, $00
0008E605                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008E605                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008E605                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E605                            	smpsVcReleaseRate   $08, $08, $08, $07
0008E605 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008E61E                            
0008E61E                            ;	Voice $01
0008E61E                            ;	$04
0008E61E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008E61E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008E61E                            	smpsVcAlgorithm     $04
0008E61E                            	smpsVcFeedback      $00
0008E61E                            	smpsVcUnusedBits    $00
0008E61E                            	smpsVcDetune        $04, $03, $04, $05
0008E61E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008E61E                            	smpsVcRateScale     $00, $01, $00, $01
0008E61E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008E61E                            	smpsVcAmpMod        $00, $00, $00, $00
0008E61E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008E61E                            	smpsVcDecayRate2    $05, $00, $05, $00
0008E61E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008E61E                            	smpsVcReleaseRate   $06, $06, $06, $06
0008E61E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008E637                            
0008E637                            ;	Voice $02
0008E637                            ;	$30
0008E637                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008E637                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008E637                            	smpsVcAlgorithm     $00
0008E637                            	smpsVcFeedback      $06
0008E637                            	smpsVcUnusedBits    $00
0008E637                            	smpsVcDetune        $04, $02, $00, $06
0008E637                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008E637                            	smpsVcRateScale     $00, $00, $00, $00
0008E637                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008E637                            	smpsVcAmpMod        $00, $00, $00, $00
0008E637                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008E637                            	smpsVcDecayRate2    $01, $01, $01, $01
0008E637                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008E637                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008E637 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008E650                            
0008E650                            ;	Voice $03
0008E650                            ;	$3A
0008E650                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008E650                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008E650                            	smpsVcAlgorithm     $02
0008E650                            	smpsVcFeedback      $07
0008E650                            	smpsVcUnusedBits    $00
0008E650                            	smpsVcDetune        $04, $06, $02, $00
0008E650                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E650                            	smpsVcRateScale     $00, $00, $00, $00
0008E650                            	smpsVcAttackRate    $18, $19, $14, $14
0008E650                            	smpsVcAmpMod        $00, $00, $00, $00
0008E650                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008E650                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E650                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008E650                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008E650 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008E669                            
0008E669                            ;	Voice $04
0008E669                            ;	$3C
0008E669                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008E669                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008E669                            	smpsVcAlgorithm     $04
0008E669                            	smpsVcFeedback      $07
0008E669                            	smpsVcUnusedBits    $00
0008E669                            	smpsVcDetune        $07, $00, $00, $03
0008E669                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008E669                            	smpsVcRateScale     $00, $00, $00, $00
0008E669                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008E669                            	smpsVcAmpMod        $00, $00, $00, $00
0008E669                            	smpsVcDecayRate1    $00, $00, $00, $00
0008E669                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E669                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E669                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008E669 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008E682                            
0008E682                            ;	Voice $05
0008E682                            ;	$38
0008E682                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008E682                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008E682                            	smpsVcAlgorithm     $00
0008E682                            	smpsVcFeedback      $07
0008E682                            	smpsVcUnusedBits    $00
0008E682                            	smpsVcDetune        $04, $06, $02, $00
0008E682                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008E682                            	smpsVcRateScale     $00, $00, $00, $00
0008E682                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008E682                            	smpsVcAmpMod        $00, $00, $00, $00
0008E682                            	smpsVcDecayRate1    $00, $03, $00, $17
0008E682                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008E682                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008E682                            	smpsVcReleaseRate   $08, $05, $05, $05
0008E682 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008E69B                            
0008E69B                            
0008E69C 00                         		even
0008E69C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000928AC                            		even
000928AC                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00096404 00                         		even
00096404                            Music87:	include	sound\music87.asm; Invincibility
00096404                            triple_Header:
00096404 =00000001                  smpsHeaderStartSong = 1
00096404 0000                       	smpsHeaderVoice     triple_Voices
00096406 0501                       	smpsHeaderChan      $05, $01
00096408 0200                       	smpsHeaderTempo     $02, $00
0009640A                            
0009640E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00096412 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00096416 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0009641A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009641E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00096424                            
00096424                            ; DAC Data
00096424                            triple_DAC:
00096424 E0C0                       	smpsPan             panCenter, $00
00096426 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0009642C                            
0009642C                            triple_Loop01:
0009642C 8282 82                    	dc.b	dSnare, dSnare, dSnare
0009642F                            
0009642F                            triple_Loop00:
0009642F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0009643B 06                         	dc.b	$06
0009643C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00096441 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0009644D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00096454 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00096459 0303 1B                    	dc.b	$03, $03, $1B
0009645C E0C0                       	smpsPan             panCenter, $00
0009645E F6FF C4                    	smpsJump triple_DAC
00096461                            
00096461                            ; FM1 Data
00096461                            triple_FM1:
00096461 E0C0                       	smpsPan             panCenter, $00
00096465 8018                       	dc.b	nRst, $18
00096467                            
00096467                            triple_Loop0B:
00096467 AC06 B8                    	dc.b	nG3, $06, nG4
0009646A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009646F                            
0009646F                            triple_Loop0C:
0009646F A7B3                       	dc.b	nD3, nD4
00096471 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00096476                            
00096476                            triple_Loop0D:
00096476 A9B5                       	dc.b	nE3, nE4
00096478 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009647D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00096485 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0009648A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00096496 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000964A2 AD                         	dc.b	nAb3
000964A3 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000964A8 8018                       	dc.b	nRst, $18
000964AA E0C0                       	smpsPan             panCenter, $00
000964AE F6FF B1                    	smpsJump triple_FM1
000964B1                            
000964B1                            ; FM2 Data
000964B1                            triple_FM2:
000964B1 E0C0                       	smpsPan             panCenter, $00
000964B5 8018                       	dc.b	nRst, $18
000964B7                            
000964B7                            triple_Loop07:
000964B7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964C3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964CF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000964D4 8003                       	dc.b	nRst, $03
000964D6                            
000964D6                            triple_Loop08:
000964D6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000964DC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000964E1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000964E7                            
000964E7                            triple_Loop09:
000964E7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964F3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964FF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00096504 8003                       	dc.b	nRst, $03
00096506                            
00096506                            triple_Loop0A:
00096506 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009650C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00096511 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00096517 E0C0                       	smpsPan             panCenter, $00
0009651B F6FF 94                    	smpsJump triple_FM2
0009651E                            
0009651E                            ; FM3 Data
0009651E                            triple_FM3:
0009651E E0C0                       	smpsPan             panCenter, $00
00096522 8018                       	dc.b	nRst, $18
00096524                            
00096524                            triple_Loop06:
00096524 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0009652B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00096530 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0009653C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00096548 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0009654B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00096550 8018                       	dc.b	nRst, $18
00096552 E0C0                       	smpsPan             panCenter, $00
00096556 F6FF C6                    	smpsJump triple_FM3
00096559                            
00096559                            ; FM4 Data
00096559                            triple_FM4:
00096559 E103                       	smpsAlterNote       $03
0009655D E0C0                       	smpsPan             panCenter, $00
0009655F 8018                       	dc.b	nRst, $18
00096561                            
00096561                            triple_Loop02:
00096561 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009656D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00096579 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009657E 8003                       	dc.b	nRst, $03
00096580                            
00096580                            triple_Loop03:
00096580 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00096586 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0009658B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00096591                            
00096591                            triple_Loop04:
00096591 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009659D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000965A9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000965AE 8003                       	dc.b	nRst, $03
000965B0                            
000965B0                            triple_Loop05:
000965B0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000965B6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000965BB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000965C1 E0C0                       	smpsPan             panCenter, $00
000965C3 F6FF 94                    	smpsJump triple_FM4
000965C6                            
000965C6                            ; PSG1 Data
000965C6                            triple_PSG1:
000965C6 8018                       	dc.b	nRst, $18
000965C8                            
000965C8                            triple_Loop0E:
000965C8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000965D4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000965E0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000965EC 9402 8004                  	dc.b	nG1, $02, nRst, $04
000965F0 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000965F5 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00096601 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009660D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00096619 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009661D                            
0009661D                            triple_Loop0F:
0009661D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00096623 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00096628 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009662E                            
0009662E                            triple_Loop10:
0009662E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009663A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00096646 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00096652 9402 8004                  	dc.b	nG1, $02, nRst, $04
00096656 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009665B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00096667 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00096673 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009667F 9402 8007                  	dc.b	nG1, $02, nRst, $07
00096683                            
00096683                            triple_Loop11:
00096683 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00096689 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009668E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00096694 F500                       	smpsPSGvoice        $00
00096696 F6FF 2E                    	smpsJump triple_PSG1
00096699                            
00096699                            triple_Voices:
00096699                            ;	Voice $00
00096699                            ;	$3A
00096699                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00096699                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00096699                            	smpsVcAlgorithm     $02
00096699                            	smpsVcFeedback      $07
00096699                            	smpsVcUnusedBits    $00
00096699                            	smpsVcDetune        $00, $00, $00, $00
00096699                            	smpsVcCoarseFreq    $01, $01, $07, $01
00096699                            	smpsVcRateScale     $01, $02, $02, $02
00096699                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00096699                            	smpsVcAmpMod        $00, $00, $00, $00
00096699                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00096699                            	smpsVcDecayRate2    $00, $00, $00, $00
00096699                            	smpsVcDecayLevel    $00, $01, $0F, $01
00096699                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00096699 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000966B2                            
000966B2                            ;	Voice $01
000966B2                            ;	$20
000966B2                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000966B2                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000966B2                            	smpsVcAlgorithm     $00
000966B2                            	smpsVcFeedback      $04
000966B2                            	smpsVcUnusedBits    $00
000966B2                            	smpsVcDetune        $00, $00, $03, $07
000966B2                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000966B2                            	smpsVcRateScale     $03, $03, $03, $02
000966B2                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000966B2                            	smpsVcAmpMod        $00, $00, $00, $00
000966B2                            	smpsVcDecayRate1    $04, $04, $0A, $10
000966B2                            	smpsVcDecayRate2    $08, $08, $08, $0F
000966B2                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000966B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000966B2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000966B2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000966CC 00                         		even
000966CC                            Music88:	incbin	sound\music88.bin; Extra Life
000967BA                            		even
000967BA                            Music89:	incbin	sound\music89.bin; Special Stage
0009A682 00                         		even
0009A682                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A84C                            		even
0009A84C                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009AAE6                            		even
0009AAE6                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D97A 00                         		even
0009D97A                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009DB96                            		even
0009DB96                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009E004 00                         		even
0009E004                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009E644 00                         		even
0009E644                            Music90:	incbin	sound\music90.bin ; Continue
0009E9DE 00                         		even
0009E9DE                            Music91:	incbin	sound\music91.bin ; Credits
0009FCAC                            		even
0009FCAC                            Music92:	incbin	sound\music92.bin ; Drowning
0009FFEE 00                         		even
0009FFEE                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A00BE                            		even
000A00BE                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A0D94 00                         		even
000A0D94                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A0DCE 00                         		even
000A0DCE                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A0E08 00                         		even
000A0E08                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A0E42 00                         		even
000A0E42                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A0E7C 00                         		even
000A0E7C                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A0EB6 00                         		even
000A0EB6                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A0EF0 00                         		even
000A0EF0                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A0F2A 00                         		even
000A0F2A                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A0F64 00                         		even
000A0F64                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A0F9E 00                         		even
000A0F9E                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A148E                            		even
000A148E                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A148E                            GentleBreeze_Header:
000A148E =00000001                  smpsHeaderStartSong = 1
000A148E 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A1490 0603                       	smpsHeaderChan      $06, $03
000A1492 0100                       	smpsHeaderTempo     $01, $00
000A1494                            
000A1498 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A149C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A14A0 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A14A4 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A14A8 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A14AC 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A14B2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A14B8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A14BE                            
000A14BE                            ; PSG3 Data
000A14BE                            GentleBreeze_PSG3:
000A14BE F2                         	smpsStop
000A14BF                            
000A14BF                            ; FM1 Data
000A14BF                            GentleBreeze_FM1:
000A14C1 E0C0                       	smpsPan             panCenter, $00
000A14C3 E1FF                       	smpsAlterNote       $FF
000A14C5 C410                       	dc.b	nG5, $10
000A14C7 E60F                       	smpsAlterVol        $0F
000A14C9 C4                         	dc.b	nG5
000A14CA E6F1                       	smpsAlterVol        $F1
000A14CC E100                       	smpsAlterNote       $00
000A14CE C2                         	dc.b	nF5
000A14CF E60F                       	smpsAlterVol        $0F
000A14D1 08                         	dc.b	$08
000A14D2 E6F1                       	smpsAlterVol        $F1
000A14D4 C010                       	dc.b	nEb5, $10
000A14D6 E60F                       	smpsAlterVol        $0F
000A14D8 C0                         	dc.b	nEb5
000A14D9 E6F1                       	smpsAlterVol        $F1
000A14DB BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A14E1 E60F                       	smpsAlterVol        $0F
000A14E3 C9                         	dc.b	nC6
000A14E4 E6F1                       	smpsAlterVol        $F1
000A14E6 C5                         	dc.b	nAb5
000A14E7 E60F                       	smpsAlterVol        $0F
000A14E9 08                         	dc.b	$08
000A14EA E6F1                       	smpsAlterVol        $F1
000A14EC C010                       	dc.b	nEb5, $10
000A14EE E60F                       	smpsAlterVol        $0F
000A14F0 C0                         	dc.b	nEb5
000A14F1 E6F1                       	smpsAlterVol        $F1
000A14F3 C208                       	dc.b	nF5, $08
000A14F5 E1FF                       	smpsAlterNote       $FF
000A14F7 C410                       	dc.b	nG5, $10
000A14F9 E100                       	smpsAlterNote       $00
000A14FB C5C7                       	dc.b	nAb5, nBb5
000A14FD E60F                       	smpsAlterVol        $0F
000A14FF C7                         	dc.b	nBb5
000A1500 E6F1                       	smpsAlterVol        $F1
000A1502 C5                         	dc.b	nAb5
000A1503 E60F                       	smpsAlterVol        $0F
000A1505 08                         	dc.b	$08
000A1506 E6F1                       	smpsAlterVol        $F1
000A1508 E1FF                       	smpsAlterNote       $FF
000A150A C410                       	dc.b	nG5, $10
000A150C E60F                       	smpsAlterVol        $0F
000A150E C4                         	dc.b	nG5
000A150F E6F1                       	smpsAlterVol        $F1
000A1511 C4                         	dc.b	nG5
000A1512 E100                       	smpsAlterNote       $00
000A1514 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A1519 E60F                       	smpsAlterVol        $0F
000A151B C2                         	dc.b	nF5
000A151C E6F1                       	smpsAlterVol        $F1
000A151E E1FF                       	smpsAlterNote       $FF
000A1520 C4                         	dc.b	nG5
000A1521 E60F                       	smpsAlterVol        $0F
000A1523 08                         	dc.b	$08
000A1524 E6F1                       	smpsAlterVol        $F1
000A1526 10                         	dc.b	$10
000A1527 E60F                       	smpsAlterVol        $0F
000A1529 38                         	dc.b	$38
000A152A E6F1                       	smpsAlterVol        $F1
000A152C 10                         	dc.b	$10
000A152D E60F                       	smpsAlterVol        $0F
000A152F C4                         	dc.b	nG5
000A1530 E6F1                       	smpsAlterVol        $F1
000A1532 E100                       	smpsAlterNote       $00
000A1534 C2                         	dc.b	nF5
000A1535 E60F                       	smpsAlterVol        $0F
000A1537 08                         	dc.b	$08
000A1538 E6F1                       	smpsAlterVol        $F1
000A153A C010                       	dc.b	nEb5, $10
000A153C E60F                       	smpsAlterVol        $0F
000A153E C0                         	dc.b	nEb5
000A153F E6F1                       	smpsAlterVol        $F1
000A1541 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A1547 E60F                       	smpsAlterVol        $0F
000A1549 C9                         	dc.b	nC6
000A154A E6F1                       	smpsAlterVol        $F1
000A154C C5                         	dc.b	nAb5
000A154D E60F                       	smpsAlterVol        $0F
000A154F 08                         	dc.b	$08
000A1550 E6F1                       	smpsAlterVol        $F1
000A1552 C010                       	dc.b	nEb5, $10
000A1554 E60F                       	smpsAlterVol        $0F
000A1556 C0                         	dc.b	nEb5
000A1557 E6F1                       	smpsAlterVol        $F1
000A1559 C208                       	dc.b	nF5, $08
000A155B E1FF                       	smpsAlterNote       $FF
000A155D C410                       	dc.b	nG5, $10
000A155F E100                       	smpsAlterNote       $00
000A1561 C5C7                       	dc.b	nAb5, nBb5
000A1563 E60F                       	smpsAlterVol        $0F
000A1565 C7                         	dc.b	nBb5
000A1566 E6F1                       	smpsAlterVol        $F1
000A1568 C5                         	dc.b	nAb5
000A1569 E60F                       	smpsAlterVol        $0F
000A156B 08                         	dc.b	$08
000A156C E6F1                       	smpsAlterVol        $F1
000A156E E1FF                       	smpsAlterNote       $FF
000A1570 C410                       	dc.b	nG5, $10
000A1572 E60F                       	smpsAlterVol        $0F
000A1574 C4                         	dc.b	nG5
000A1575 E6F1                       	smpsAlterVol        $F1
000A1577 C4                         	dc.b	nG5
000A1578 E100                       	smpsAlterNote       $00
000A157A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A157F E60F                       	smpsAlterVol        $0F
000A1581 28                         	dc.b	$28
000A1582 E6F1                       	smpsAlterVol        $F1
000A1584 C008 10                    	dc.b	nEb5, $08, $10
000A1587 E60F                       	smpsAlterVol        $0F
000A1589 21                         	dc.b	$21
000A158A                            
000A158A                            GentleBreeze_Loop12:
000A158A E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A158D F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A1592 E717                       	dc.b	smpsNoAttack, $17
000A1594 E6F1                       	smpsAlterVol        $F1
000A1596 E1FF                       	smpsAlterNote       $FF
000A1598 C410                       	dc.b	nG5, $10
000A159A E60F                       	smpsAlterVol        $0F
000A159C C4                         	dc.b	nG5
000A159D E6F1                       	smpsAlterVol        $F1
000A159F E100                       	smpsAlterNote       $00
000A15A1 C2                         	dc.b	nF5
000A15A2 E60F                       	smpsAlterVol        $0F
000A15A4 08                         	dc.b	$08
000A15A5 E6F1                       	smpsAlterVol        $F1
000A15A7 C010                       	dc.b	nEb5, $10
000A15A9 E60F                       	smpsAlterVol        $0F
000A15AB C0                         	dc.b	nEb5
000A15AC E6F1                       	smpsAlterVol        $F1
000A15AE BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A15B4 E60F                       	smpsAlterVol        $0F
000A15B6 C9                         	dc.b	nC6
000A15B7 E6F1                       	smpsAlterVol        $F1
000A15B9 C5                         	dc.b	nAb5
000A15BA E60F                       	smpsAlterVol        $0F
000A15BC 08                         	dc.b	$08
000A15BD E6F1                       	smpsAlterVol        $F1
000A15BF C010                       	dc.b	nEb5, $10
000A15C1 E60F                       	smpsAlterVol        $0F
000A15C3 C0                         	dc.b	nEb5
000A15C4 E6F1                       	smpsAlterVol        $F1
000A15C6 C208                       	dc.b	nF5, $08
000A15C8 E1FF                       	smpsAlterNote       $FF
000A15CA C410                       	dc.b	nG5, $10
000A15CC E100                       	smpsAlterNote       $00
000A15CE C5C7                       	dc.b	nAb5, nBb5
000A15D0 E60F                       	smpsAlterVol        $0F
000A15D2 C7                         	dc.b	nBb5
000A15D3 E6F1                       	smpsAlterVol        $F1
000A15D5 C5                         	dc.b	nAb5
000A15D6 E60F                       	smpsAlterVol        $0F
000A15D8 08                         	dc.b	$08
000A15D9 E6F1                       	smpsAlterVol        $F1
000A15DB E1FF                       	smpsAlterNote       $FF
000A15DD C410                       	dc.b	nG5, $10
000A15DF E60F                       	smpsAlterVol        $0F
000A15E1 C4                         	dc.b	nG5
000A15E2 E6F1                       	smpsAlterVol        $F1
000A15E4 C4                         	dc.b	nG5
000A15E5 E100                       	smpsAlterNote       $00
000A15E7 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A15EC E60F                       	smpsAlterVol        $0F
000A15EE C2                         	dc.b	nF5
000A15EF E6F1                       	smpsAlterVol        $F1
000A15F1 E1FF                       	smpsAlterNote       $FF
000A15F3 C4                         	dc.b	nG5
000A15F4 E60F                       	smpsAlterVol        $0F
000A15F6 08                         	dc.b	$08
000A15F7 E6F1                       	smpsAlterVol        $F1
000A15F9 10                         	dc.b	$10
000A15FA E60F                       	smpsAlterVol        $0F
000A15FC 38                         	dc.b	$38
000A15FD E6F1                       	smpsAlterVol        $F1
000A15FF 10                         	dc.b	$10
000A1600 E60F                       	smpsAlterVol        $0F
000A1602 C4                         	dc.b	nG5
000A1603 E6F1                       	smpsAlterVol        $F1
000A1605 E100                       	smpsAlterNote       $00
000A1607 C2                         	dc.b	nF5
000A1608 E60F                       	smpsAlterVol        $0F
000A160A 08                         	dc.b	$08
000A160B E6F1                       	smpsAlterVol        $F1
000A160D C010                       	dc.b	nEb5, $10
000A160F E60F                       	smpsAlterVol        $0F
000A1611 C0                         	dc.b	nEb5
000A1612 E6F1                       	smpsAlterVol        $F1
000A1614 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A161A E60F                       	smpsAlterVol        $0F
000A161C C9                         	dc.b	nC6
000A161D E6F1                       	smpsAlterVol        $F1
000A161F C5                         	dc.b	nAb5
000A1620 E60F                       	smpsAlterVol        $0F
000A1622 08                         	dc.b	$08
000A1623 E6F1                       	smpsAlterVol        $F1
000A1625 C010                       	dc.b	nEb5, $10
000A1627 E60F                       	smpsAlterVol        $0F
000A1629 C0                         	dc.b	nEb5
000A162A E6F1                       	smpsAlterVol        $F1
000A162C C208                       	dc.b	nF5, $08
000A162E E1FF                       	smpsAlterNote       $FF
000A1630 C410                       	dc.b	nG5, $10
000A1632 E100                       	smpsAlterNote       $00
000A1634 C5C7                       	dc.b	nAb5, nBb5
000A1636 E60F                       	smpsAlterVol        $0F
000A1638 C7                         	dc.b	nBb5
000A1639 E6F1                       	smpsAlterVol        $F1
000A163B C5                         	dc.b	nAb5
000A163C E60F                       	smpsAlterVol        $0F
000A163E 08                         	dc.b	$08
000A163F E6F1                       	smpsAlterVol        $F1
000A1641 E1FF                       	smpsAlterNote       $FF
000A1643 C410                       	dc.b	nG5, $10
000A1645 E60F                       	smpsAlterVol        $0F
000A1647 C4                         	dc.b	nG5
000A1648 E6F1                       	smpsAlterVol        $F1
000A164A C4                         	dc.b	nG5
000A164B E100                       	smpsAlterNote       $00
000A164D C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A1652 E60F                       	smpsAlterVol        $0F
000A1654 28                         	dc.b	$28
000A1655 E6F1                       	smpsAlterVol        $F1
000A1657 C008 10                    	dc.b	nEb5, $08, $10
000A165A E60F                       	smpsAlterVol        $0F
000A165C 21                         	dc.b	$21
000A165D E0C0                       	smpsPan             panCenter, $00
000A165F F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A1662                            
000A1662                            ; FM2 Data
000A1662                            GentleBreeze_FM2:
000A1664 E60C                       	smpsAlterVol        $0C
000A1666 E0C0                       	smpsPan             panCenter, $00
000A1668 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A1674 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A1680 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A168C 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A1698 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A16A4 A039                       	dc.b	nG2, $39
000A16A6                            
000A16A6                            GentleBreeze_Jump04:
000A16A6 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A16A9                            
000A16A9                            GentleBreeze_Loop11:
000A16A9 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A16B5 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A16C1 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A16CD 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A16D9 A3                         	dc.b	nBb2
000A16DA F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A16DF 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A16EB A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A16F7 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A1703 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A170F 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A171B A039                       	dc.b	nG2, $39
000A171D E0C0                       	smpsPan             panCenter, $00
000A171F F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A1722                            
000A1722                            ; FM3 Data
000A1722                            GentleBreeze_FM3:
000A1724 E0C0                       	smpsPan             panCenter, $00
000A1726 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A172E E616                       	smpsAlterVol        $16
000A1730 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A1735                            
000A1735                            GentleBreeze_Loop0F:
000A1735 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A1739 E1FF                       	smpsAlterNote       $FF
000A173B C4                         	dc.b	nG5
000A173C E100                       	smpsAlterNote       $00
000A173E C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1743 E608                       	smpsAlterVol        $08
000A1745 C080 08                    	dc.b	nEb5, nRst, $08
000A1748 E6F8                       	smpsAlterVol        $F8
000A174A C7                         	dc.b	nBb5
000A174B E1FF                       	smpsAlterNote       $FF
000A174D C4                         	dc.b	nG5
000A174E E100                       	smpsAlterNote       $00
000A1750 C0BB                       	dc.b	nEb5, nBb4
000A1752 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A1757 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A175A E1FF                       	smpsAlterNote       $FF
000A175C C4                         	dc.b	nG5
000A175D E100                       	smpsAlterNote       $00
000A175F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1764 E608                       	smpsAlterVol        $08
000A1766 C080 08                    	dc.b	nEb5, nRst, $08
000A1769 E6F8                       	smpsAlterVol        $F8
000A176B E1FF                       	smpsAlterNote       $FF
000A176D C4                         	dc.b	nG5
000A176E E100                       	smpsAlterNote       $00
000A1770 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A1777 E1FF                       	smpsAlterNote       $FF
000A1779 C4                         	dc.b	nG5
000A177A E100                       	smpsAlterNote       $00
000A177C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A1781 E1FF                       	smpsAlterNote       $FF
000A1783 C4                         	dc.b	nG5
000A1784 E100                       	smpsAlterNote       $00
000A1786 C7                         	dc.b	nBb5
000A1787 E1FF                       	smpsAlterNote       $FF
000A1789 C4                         	dc.b	nG5
000A178A E100                       	smpsAlterNote       $00
000A178C C2C0 01                    	dc.b	nF5, nEb5, $01
000A178F                            
000A178F                            GentleBreeze_Jump03:
000A178F E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A1796 E6FA                       	smpsAlterVol        $FA
000A1798 F4                         	smpsModOff
000A1799 E1FF                       	smpsAlterNote       $FF
000A179B B850                       	dc.b	nG4, $50
000A179D E100                       	smpsAlterNote       $00
000A179F B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A17AB E1FF                       	smpsAlterNote       $FF
000A17AD B810                       	dc.b	nG4, $10
000A17AF E100                       	smpsAlterNote       $00
000A17B1 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A17B6 E1FF                       	smpsAlterNote       $FF
000A17B8 B8                         	dc.b	nG4
000A17B9 E100                       	smpsAlterNote       $00
000A17BB B610                       	dc.b	nF4, $10
000A17BD E1FF                       	smpsAlterNote       $FF
000A17BF B850                       	dc.b	nG4, $50
000A17C1 E100                       	smpsAlterNote       $00
000A17C3 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A17CB E1FF                       	smpsAlterNote       $FF
000A17CD AC08                       	dc.b	nG3, $08
000A17CF E100                       	smpsAlterNote       $00
000A17D1 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A17D6 E1FF                       	smpsAlterNote       $FF
000A17D8 B850                       	dc.b	nG4, $50
000A17DA E100                       	smpsAlterNote       $00
000A17DC BB08                       	dc.b	nBb4, $08
000A17DE E1FF                       	smpsAlterNote       $FF
000A17E0 B8                         	dc.b	nG4
000A17E1 E100                       	smpsAlterNote       $00
000A17E3 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A17E6 E1FF                       	smpsAlterNote       $FF
000A17E8 B810 08                    	dc.b	nG4, $10, $08
000A17EB E100                       	smpsAlterNote       $00
000A17ED B6                         	dc.b	nF4
000A17EE E1FF                       	smpsAlterNote       $FF
000A17F0 B880                       	dc.b	nG4, nRst
000A17F2 E100                       	smpsAlterNote       $00
000A17F4 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A17F7 E1FF                       	smpsAlterNote       $FF
000A17F9 B810                       	dc.b	nG4, $10
000A17FB E100                       	smpsAlterNote       $00
000A17FD B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A1804 E1FF                       	smpsAlterNote       $FF
000A1806 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A1814 E606                       	smpsAlterVol        $06
000A1816 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A181B E100                       	smpsAlterNote       $00
000A181D                            
000A181D                            GentleBreeze_Loop10:
000A181D C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A1821 E1FF                       	smpsAlterNote       $FF
000A1823 C4                         	dc.b	nG5
000A1824 E100                       	smpsAlterNote       $00
000A1826 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A182B E608                       	smpsAlterVol        $08
000A182D C080 08                    	dc.b	nEb5, nRst, $08
000A1830 E6F8                       	smpsAlterVol        $F8
000A1832 C7                         	dc.b	nBb5
000A1833 E1FF                       	smpsAlterNote       $FF
000A1835 C4                         	dc.b	nG5
000A1836 E100                       	smpsAlterNote       $00
000A1838 C0BB                       	dc.b	nEb5, nBb4
000A183A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A183F C0BD C9                    	dc.b	nEb5, nC5, nC6
000A1842 E1FF                       	smpsAlterNote       $FF
000A1844 C4                         	dc.b	nG5
000A1845 E100                       	smpsAlterNote       $00
000A1847 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A184C E608                       	smpsAlterVol        $08
000A184E C080 08                    	dc.b	nEb5, nRst, $08
000A1851 E6F8                       	smpsAlterVol        $F8
000A1853 E1FF                       	smpsAlterNote       $FF
000A1855 C4                         	dc.b	nG5
000A1856 E100                       	smpsAlterNote       $00
000A1858 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A185F E1FF                       	smpsAlterNote       $FF
000A1861 C4                         	dc.b	nG5
000A1862 E100                       	smpsAlterNote       $00
000A1864 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A1869 E1FF                       	smpsAlterNote       $FF
000A186B C4                         	dc.b	nG5
000A186C E100                       	smpsAlterNote       $00
000A186E C7                         	dc.b	nBb5
000A186F E1FF                       	smpsAlterNote       $FF
000A1871 C4                         	dc.b	nG5
000A1872 E100                       	smpsAlterNote       $00
000A1874 C2C0 01                    	dc.b	nF5, nEb5, $01
000A1877 E0C0                       	smpsPan             panCenter, $00
000A1879 F1                         	smpsModOn
000A187A F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A187D                            
000A187D                            ; FM4 Data
000A187D                            GentleBreeze_FM4:
000A187F E0C0                       	smpsPan             panCenter, $00
000A1881 80                         	dc.b	nRst
000A1882                            
000A1882                            GentleBreeze_Loop0D:
000A1882 7F                         	dc.b	$7F
000A1883 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A1888 77                         	dc.b	$77
000A188B E609                       	smpsAlterVol        $09
000A188D C001                       	dc.b	nEb5, $01
000A188F                            
000A188F                            GentleBreeze_Jump02:
000A188F E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A1894 E607                       	smpsAlterVol        $07
000A1896 E1FF                       	smpsAlterNote       $FF
000A1898 C450                       	dc.b	nG5, $50
000A189A E100                       	smpsAlterNote       $00
000A189C C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A18A8 E1FF                       	smpsAlterNote       $FF
000A18AA C410                       	dc.b	nG5, $10
000A18AC E100                       	smpsAlterNote       $00
000A18AE C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A18B3 E1FF                       	smpsAlterNote       $FF
000A18B5 C4                         	dc.b	nG5
000A18B6 E100                       	smpsAlterNote       $00
000A18B8 C210                       	dc.b	nF5, $10
000A18BA E1FF                       	smpsAlterNote       $FF
000A18BC C450                       	dc.b	nG5, $50
000A18BE E100                       	smpsAlterNote       $00
000A18C0 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A18C8 E1FF                       	smpsAlterNote       $FF
000A18CA B808                       	dc.b	nG4, $08
000A18CC E100                       	smpsAlterNote       $00
000A18CE BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A18D3 E1FF                       	smpsAlterNote       $FF
000A18D5 C450                       	dc.b	nG5, $50
000A18D7 E100                       	smpsAlterNote       $00
000A18D9 C708                       	dc.b	nBb5, $08
000A18DB E1FF                       	smpsAlterNote       $FF
000A18DD C4                         	dc.b	nG5
000A18DE E100                       	smpsAlterNote       $00
000A18E0 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A18E3 E1FF                       	smpsAlterNote       $FF
000A18E5 C410 08                    	dc.b	nG5, $10, $08
000A18E8 E100                       	smpsAlterNote       $00
000A18EA C2                         	dc.b	nF5
000A18EB E1FF                       	smpsAlterNote       $FF
000A18ED C480                       	dc.b	nG5, nRst
000A18EF E100                       	smpsAlterNote       $00
000A18F1 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A18F4 E1FF                       	smpsAlterNote       $FF
000A18F6 C410                       	dc.b	nG5, $10
000A18F8 E100                       	smpsAlterNote       $00
000A18FA BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A1901 E1FF                       	smpsAlterNote       $FF
000A1903 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A190B                            
000A190B                            GentleBreeze_Loop0E:
000A190B 7F                         	dc.b	$7F
000A190C F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A1911 77                         	dc.b	$77
000A1912 E100                       	smpsAlterNote       $00
000A1914 C001                       	dc.b	nEb5, $01
000A1916 E6F9                       	smpsAlterVol        $F9
000A1918 E0C0                       	smpsPan             panCenter, $00
000A191A E100                       	smpsAlterNote       $00
000A191C F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A191F                            
000A191F                            ; FM5 Data
000A191F                            GentleBreeze_FM5:
000A1921 E0C0                       	smpsPan             panCenter, $00
000A1923 A5                         	dc.b	nC3
000A1924                            
000A1924                            GentleBreeze_Loop06:
000A1924 10                         	dc.b	$10
000A1925 E607                       	smpsAlterVol        $07
000A1927 A5                         	dc.b	nC3
000A1928 E6F9                       	smpsAlterVol        $F9
000A192A 08                         	dc.b	$08
000A192B E607                       	smpsAlterVol        $07
000A192D A5                         	dc.b	nC3
000A192E E608                       	smpsAlterVol        $08
000A1930 A5                         	dc.b	nC3
000A1931 E6F1                       	smpsAlterVol        $F1
000A1933 18                         	dc.b	$18
000A1934 E607                       	smpsAlterVol        $07
000A1936 10                         	dc.b	$10
000A1937 E608                       	smpsAlterVol        $08
000A1939 A5                         	dc.b	nC3
000A193A E6F1                       	smpsAlterVol        $F1
000A193C A5                         	dc.b	nC3
000A193D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A1942 A5                         	dc.b	nC3
000A1943                            
000A1943                            GentleBreeze_Loop07:
000A1943 E607                       	smpsAlterVol        $07
000A1945 A5                         	dc.b	nC3
000A1946 E6F9                       	smpsAlterVol        $F9
000A1948 08                         	dc.b	$08
000A1949 E607                       	smpsAlterVol        $07
000A194B A5                         	dc.b	nC3
000A194C E608                       	smpsAlterVol        $08
000A194E A5                         	dc.b	nC3
000A194F E6F1                       	smpsAlterVol        $F1
000A1951 10                         	dc.b	$10
000A1952 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A1957                            
000A1957                            GentleBreeze_Loop08:
000A1957 A5                         	dc.b	nC3
000A1958 E607                       	smpsAlterVol        $07
000A195A A5                         	dc.b	nC3
000A195B E6F9                       	smpsAlterVol        $F9
000A195D 08                         	dc.b	$08
000A195E E607                       	smpsAlterVol        $07
000A1960 A5                         	dc.b	nC3
000A1961 E608                       	smpsAlterVol        $08
000A1963 A5                         	dc.b	nC3
000A1964 E6F1                       	smpsAlterVol        $F1
000A1966 18                         	dc.b	$18
000A1967 E607                       	smpsAlterVol        $07
000A1969 10                         	dc.b	$10
000A196A E608                       	smpsAlterVol        $08
000A196C A5                         	dc.b	nC3
000A196D E6F1                       	smpsAlterVol        $F1
000A196F A5                         	dc.b	nC3
000A1970 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A1975 A5                         	dc.b	nC3
000A1976 E607                       	smpsAlterVol        $07
000A1978 A5                         	dc.b	nC3
000A1979 E6F9                       	smpsAlterVol        $F9
000A197B 08                         	dc.b	$08
000A197C E607                       	smpsAlterVol        $07
000A197E A5                         	dc.b	nC3
000A197F E608                       	smpsAlterVol        $08
000A1981 A5                         	dc.b	nC3
000A1982 E6F1                       	smpsAlterVol        $F1
000A1984 10                         	dc.b	$10
000A1985 E607                       	smpsAlterVol        $07
000A1987 A5                         	dc.b	nC3
000A1988 E6F9                       	smpsAlterVol        $F9
000A198A 08                         	dc.b	$08
000A198B E607                       	smpsAlterVol        $07
000A198D A5                         	dc.b	nC3
000A198E E608                       	smpsAlterVol        $08
000A1990 A5                         	dc.b	nC3
000A1991 E6F1                       	smpsAlterVol        $F1
000A1993 01                         	dc.b	$01
000A1994                            
000A1994                            GentleBreeze_Jump01:
000A1994 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A1997 E607                       	smpsAlterVol        $07
000A1999                            
000A1999                            GentleBreeze_Loop09:
000A1999 10                         	dc.b	$10
000A199A E608                       	smpsAlterVol        $08
000A199C A5                         	dc.b	nC3
000A199D E6F1                       	smpsAlterVol        $F1
000A199F 08                         	dc.b	$08
000A19A0 E60F                       	smpsAlterVol        $0F
000A19A2 18                         	dc.b	$18
000A19A3 E6F8                       	smpsAlterVol        $F8
000A19A5 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A19AA 10                         	dc.b	$10
000A19AB E608                       	smpsAlterVol        $08
000A19AD A5                         	dc.b	nC3
000A19AE E6F1                       	smpsAlterVol        $F1
000A19B0 08                         	dc.b	$08
000A19B1 E60F                       	smpsAlterVol        $0F
000A19B3 18                         	dc.b	$18
000A19B4 E6F1                       	smpsAlterVol        $F1
000A19B6                            
000A19B6                            GentleBreeze_Loop0A:
000A19B6 10                         	dc.b	$10
000A19B7 E607                       	smpsAlterVol        $07
000A19B9 A5                         	dc.b	nC3
000A19BA E6F9                       	smpsAlterVol        $F9
000A19BC 08                         	dc.b	$08
000A19BD E607                       	smpsAlterVol        $07
000A19BF A5                         	dc.b	nC3
000A19C0 E608                       	smpsAlterVol        $08
000A19C2 A5                         	dc.b	nC3
000A19C3 E6F1                       	smpsAlterVol        $F1
000A19C5 18                         	dc.b	$18
000A19C6 E607                       	smpsAlterVol        $07
000A19C8 10                         	dc.b	$10
000A19C9 E608                       	smpsAlterVol        $08
000A19CB A5                         	dc.b	nC3
000A19CC E6F1                       	smpsAlterVol        $F1
000A19CE A5                         	dc.b	nC3
000A19CF F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A19D4 A5                         	dc.b	nC3
000A19D5                            
000A19D5                            GentleBreeze_Loop0B:
000A19D5 E607                       	smpsAlterVol        $07
000A19D7 A5                         	dc.b	nC3
000A19D8 E6F9                       	smpsAlterVol        $F9
000A19DA 08                         	dc.b	$08
000A19DB E607                       	smpsAlterVol        $07
000A19DD A5                         	dc.b	nC3
000A19DE E608                       	smpsAlterVol        $08
000A19E0 A5                         	dc.b	nC3
000A19E1 E6F1                       	smpsAlterVol        $F1
000A19E3 10                         	dc.b	$10
000A19E4 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A19E9                            
000A19E9                            GentleBreeze_Loop0C:
000A19E9 A5                         	dc.b	nC3
000A19EA E607                       	smpsAlterVol        $07
000A19EC A5                         	dc.b	nC3
000A19ED E6F9                       	smpsAlterVol        $F9
000A19EF 08                         	dc.b	$08
000A19F0 E607                       	smpsAlterVol        $07
000A19F2 A5                         	dc.b	nC3
000A19F3 E608                       	smpsAlterVol        $08
000A19F5 A5                         	dc.b	nC3
000A19F6 E6F1                       	smpsAlterVol        $F1
000A19F8 18                         	dc.b	$18
000A19F9 E607                       	smpsAlterVol        $07
000A19FB 10                         	dc.b	$10
000A19FC E608                       	smpsAlterVol        $08
000A19FE A5                         	dc.b	nC3
000A19FF E6F1                       	smpsAlterVol        $F1
000A1A01 A5                         	dc.b	nC3
000A1A02 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A1A07 A5                         	dc.b	nC3
000A1A08 E607                       	smpsAlterVol        $07
000A1A0A A5                         	dc.b	nC3
000A1A0B E6F9                       	smpsAlterVol        $F9
000A1A0D 08                         	dc.b	$08
000A1A0E E607                       	smpsAlterVol        $07
000A1A10 A5                         	dc.b	nC3
000A1A11 E608                       	smpsAlterVol        $08
000A1A13 A5                         	dc.b	nC3
000A1A14 E6F1                       	smpsAlterVol        $F1
000A1A16 10                         	dc.b	$10
000A1A17 E607                       	smpsAlterVol        $07
000A1A19 A5                         	dc.b	nC3
000A1A1A E6F9                       	smpsAlterVol        $F9
000A1A1C 08                         	dc.b	$08
000A1A1D E607                       	smpsAlterVol        $07
000A1A1F A5                         	dc.b	nC3
000A1A20 E608                       	smpsAlterVol        $08
000A1A22 A5                         	dc.b	nC3
000A1A23 E6F1                       	smpsAlterVol        $F1
000A1A25 01                         	dc.b	$01
000A1A26 E0C0                       	smpsPan             panCenter, $00
000A1A28 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A1A2B                            
000A1A2B                            ; DAC Data
000A1A2B                            GentleBreeze_DAC:
000A1A2B 81                         	dc.b	dKick
000A1A2C                            
000A1A2C                            GentleBreeze_Loop00:
000A1A2C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A32 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A1A37 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A42                            
000A1A42                            GentleBreeze_Loop01:
000A1A42 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A48 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A1A4D 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1A57                            
000A1A57                            GentleBreeze_Jump00:
000A1A57 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A1A5B                            
000A1A5B                            GentleBreeze_Loop02:
000A1A5B 81                         	dc.b	dKick
000A1A5C                            
000A1A5C                            GentleBreeze_Loop03:
000A1A5C 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A1A68 088A                       	dc.b	$08, dLowTimpani
000A1A6A F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A1A6F 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A1A7B 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A1A80 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A1A85                            
000A1A85                            GentleBreeze_Loop04:
000A1A85 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A8B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A1A90 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A9B                            
000A1A9B                            GentleBreeze_Loop05:
000A1A9B 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1AA1 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A1AA6 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1AB0 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A1AB3                            
000A1AB3                            ; PSG 1 Data
000A1AB3                            GentleBreeze_PSG1:
000A1AB3 80                         	dc.b	nRst
000A1AB4                            
000A1AB4                            GentleBreeze_LoopPSG02:
000A1AB4 7F                         	dc.b	$7F
000A1AB5 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A1ABA 08                         	dc.b	$08
000A1ABB EC04                       	smpsPSGAlterVol     $04
000A1ABD                            
000A1ABD                            GentleBreeze_JumpPSG01:
000A1ABD A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A1AC9 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A1AD1                            
000A1AD1                            GentleBreeze_LoopPSG03:
000A1AD1 7F                         	dc.b	$7F
000A1AD2 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A1AD7 08A3 01                    	dc.b	$08, nBb2, $01
000A1ADA F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A1ADD                            
000A1ADD                            ; PSG2 Data
000A1ADD                            GentleBreeze_PSG2:
000A1ADD 80                         	dc.b	nRst
000A1ADE                            
000A1ADE                            GentleBreeze_LoopPSG00:
000A1ADE 7F                         	dc.b	$7F
000A1ADF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A1AE4 08                         	dc.b	$08
000A1AE5 EC04                       	smpsPSGAlterVol     $04
000A1AE7                            
000A1AE7                            GentleBreeze_JumpPSG00:
000A1AE7 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A1AF3 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A1AFB                            
000A1AFB                            GentleBreeze_LoopPSG01:
000A1AFB 7F                         	dc.b	$7F
000A1AFC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A1B01 08A8 01                    	dc.b	$08, nEb3, $01
000A1B04 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A1B07                            
000A1B07                            GentleBreeze_Voices:
000A1B07                            ;	Voice $00
000A1B07                            ;	$0C
000A1B07                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A1B07                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A1B07                            	smpsVcAlgorithm     $04
000A1B07                            	smpsVcFeedback      $01
000A1B07                            	smpsVcUnusedBits    $00
000A1B07                            	smpsVcDetune        $07, $02, $07, $02
000A1B07                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A1B07                            	smpsVcRateScale     $00, $00, $00, $00
000A1B07                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1B07                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B07                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A1B07                            	smpsVcDecayRate2    $01, $00, $00, $00
000A1B07                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A1B07                            	smpsVcReleaseRate   $09, $01, $04, $03
000A1B07 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A1B20                            
000A1B20                            ;	Voice $01
000A1B20                            ;	$38
000A1B20                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A1B20                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A1B20                            	smpsVcAlgorithm     $00
000A1B20                            	smpsVcFeedback      $07
000A1B20                            	smpsVcUnusedBits    $00
000A1B20                            	smpsVcDetune        $03, $07, $01, $05
000A1B20                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A1B20                            	smpsVcRateScale     $00, $02, $00, $02
000A1B20                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1B20                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B20                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A1B20                            	smpsVcDecayRate2    $00, $00, $10, $00
000A1B20                            	smpsVcDecayLevel    $00, $00, $00, $00
000A1B20                            	smpsVcReleaseRate   $08, $05, $05, $05
000A1B20 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A1B39                            
000A1B39                            ;	Voice $02
000A1B39                            ;	$00
000A1B39                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1B39                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1B39                            	smpsVcAlgorithm     $00
000A1B39                            	smpsVcFeedback      $00
000A1B39                            	smpsVcUnusedBits    $00
000A1B39                            	smpsVcDetune        $00, $00, $00, $00
000A1B39                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1B39                            	smpsVcRateScale     $00, $00, $00, $00
000A1B39                            	smpsVcAttackRate    $00, $00, $00, $00
000A1B39                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B39                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1B39                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B39                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1B39                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1B39 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B52                            
000A1B52                            ;	Voice $03
000A1B52                            ;	$36
000A1B52                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A1B52                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A1B52                            	smpsVcAlgorithm     $06
000A1B52                            	smpsVcFeedback      $06
000A1B52                            	smpsVcUnusedBits    $00
000A1B52                            	smpsVcDetune        $00, $00, $00, $00
000A1B52                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A1B52                            	smpsVcRateScale     $00, $00, $00, $00
000A1B52                            	smpsVcAttackRate    $1F, $00, $18, $16
000A1B52                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B52                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A1B52                            	smpsVcDecayRate2    $00, $00, $12, $00
000A1B52                            	smpsVcDecayLevel    $04, $04, $02, $00
000A1B52                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A1B52 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A1B6B                            
000A1B6B                            ;	Voice $04
000A1B6B                            ;	$07
000A1B6B                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A1B6B                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A1B6B                            	smpsVcAlgorithm     $07
000A1B6B                            	smpsVcFeedback      $00
000A1B6B                            	smpsVcUnusedBits    $00
000A1B6B                            	smpsVcDetune        $07, $06, $05, $00
000A1B6B                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A1B6B                            	smpsVcRateScale     $00, $01, $01, $01
000A1B6B                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A1B6B                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B6B                            	smpsVcDecayRate1    $17, $17, $17, $17
000A1B6B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B6B                            	smpsVcDecayLevel    $02, $02, $02, $02
000A1B6B                            	smpsVcReleaseRate   $06, $06, $06, $06
000A1B6B 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B84                            
000A1B84                            ;	Voice $05
000A1B84                            ;	$3C
000A1B84                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A1B84                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A1B84                            	smpsVcAlgorithm     $04
000A1B84                            	smpsVcFeedback      $07
000A1B84                            	smpsVcUnusedBits    $00
000A1B84                            	smpsVcDetune        $06, $06, $02, $02
000A1B84                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A1B84                            	smpsVcRateScale     $00, $00, $00, $00
000A1B84                            	smpsVcAttackRate    $0E, $14, $10, $13
000A1B84                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B84                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A1B84                            	smpsVcDecayRate2    $04, $04, $04, $04
000A1B84                            	smpsVcDecayLevel    $02, $01, $01, $01
000A1B84                            	smpsVcReleaseRate   $07, $07, $07, $07
000A1B84 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A1B9D                            
000A1B9D                            
000A1B9E 00                         		even
000A1B9E                            ; ---------------------------------------------------------------------------
000A1B9E                            ; Sound	effect pointers
000A1B9E                            ; ---------------------------------------------------------------------------
000A1B9E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A1BAA 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A1BB6 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A1BC2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A1BCE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A1BDA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A1BE6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A1BF2 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A1BFE 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A1C0A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A1C16 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A1C22 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A1C2E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A1C3A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A1C46 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A1C52 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A1C5E 0000 0000                  SoundD0Index:	dc.l SoundD0
000A1C62                            SoundA0:	incbin	sound\soundA0.bin
000A1C78                            		even
000A1C78                            SoundA1:	incbin	sound\soundA1.bin
000A1CA2                            		even
000A1CA2                            SoundA2:	incbin	sound\soundA2.bin
000A1CC2                            		even
000A1CC2                            SoundA3:	incbin	sound\soundA3.bin
000A1CF4                            		even
000A1CF4                            SoundA4:	incbin	sound\soundA4.bin
000A1D2A                            		even
000A1D2A                            SoundA5:	include	sound\fart.asm
000A1D2A                            Fart_Header:
000A1D2A =00000001                  smpsHeaderStartSong = 1
000A1D2A 0000                       	smpsHeaderVoice     Fart_Voices
000A1D2C 01                         	smpsHeaderTempoSFX  $01
000A1D2D 04                         	smpsHeaderChanSFX   $04
000A1D2E                            
000A1D46                            
000A1D46                            Fart_FM3:
000A1D48 E607                       	smpsAlterVol        $07
000A1D4A E0C0                       	smpsPan             panCenter, $00
000A1D4C F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D51 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A1D54 E1FE                       	smpsAlterNote       $FE
000A1D56 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A1D59 E100                       	smpsAlterNote       $00
000A1D5B A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A1D60 F2                         	smpsStop
000A1D61                            
000A1D61                            ; FM4 Data
000A1D61                            Fart_FM4:
000A1D63 E0C0                       	smpsPan             panCenter, $00
000A1D65 8006                       	dc.b	nRst, $06
000A1D69 E616                       	smpsAlterVol        $16
000A1D6B E080                       	smpsPan             panLeft, $00
000A1D6D F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D72 A212                       	dc.b	nA2, $12
000A1D74 E60A                       	smpsAlterVol        $0A
000A1D76 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D79 E603                       	smpsAlterVol        $03
000A1D7B E7A2                       	dc.b	smpsNoAttack, nA2
000A1D7D E603                       	smpsAlterVol        $03
000A1D7F E7A2                       	dc.b	smpsNoAttack, nA2
000A1D81 E604                       	smpsAlterVol        $04
000A1D83 E7A2                       	dc.b	smpsNoAttack, nA2
000A1D85 E606                       	smpsAlterVol        $06
000A1D87 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A1D8A E610                       	smpsAlterVol        $10
000A1D8C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D8F E610                       	smpsAlterVol        $10
000A1D91 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A1D96 F2                         	smpsStop
000A1D97                            
000A1D97                            ; FM5 Data
000A1D97                            Fart_FM5:
000A1D99 E0C0                       	smpsPan             panCenter, $00
000A1D9B 8009                       	dc.b	nRst, $09
000A1D9F E616                       	smpsAlterVol        $16
000A1DA1 E040                       	smpsPan             panRight, $00
000A1DA3 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1DA8 A215                       	dc.b	nA2, $15
000A1DAA E60A                       	smpsAlterVol        $0A
000A1DAC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DAF E603                       	smpsAlterVol        $03
000A1DB1 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DB3 E603                       	smpsAlterVol        $03
000A1DB5 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DB7 E604                       	smpsAlterVol        $04
000A1DB9 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DBB E606                       	smpsAlterVol        $06
000A1DBD E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A1DC0 E610                       	smpsAlterVol        $10
000A1DC2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DC5 E610                       	smpsAlterVol        $10
000A1DC7 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A1DCC F2                         	smpsStop
000A1DCD                            
000A1DCD                            ; PSG3 Data
000A1DCD                            Fart_PSG3:
000A1DCD F2                         	smpsStop
000A1DCE                            
000A1DCE                            ; FM Voices
000A1DCE                            Fart_Voices:
000A1DCE                            ;	Voice $00
000A1DCE                            ;	$39
000A1DCE                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A1DCE                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A1DCE                            	smpsVcAlgorithm     $01
000A1DCE                            	smpsVcFeedback      $07
000A1DCE                            	smpsVcUnusedBits    $00
000A1DCE                            	smpsVcDetune        $00, $07, $03, $07
000A1DCE                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A1DCE                            	smpsVcRateScale     $00, $03, $03, $03
000A1DCE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1DCE                            	smpsVcAmpMod        $00, $00, $00, $00
000A1DCE                            	smpsVcDecayRate1    $00, $00, $00, $04
000A1DCE                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A1DCE                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A1DCE                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A1DCE 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A1DE7                            
000A1DE7                            ;	Voice $01
000A1DE7                            ;	$00
000A1DE7                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1DE7                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1DE7                            	smpsVcAlgorithm     $00
000A1DE7                            	smpsVcFeedback      $00
000A1DE7                            	smpsVcUnusedBits    $00
000A1DE7                            	smpsVcDetune        $00, $00, $00, $00
000A1DE7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1DE7                            	smpsVcRateScale     $00, $00, $00, $00
000A1DE7                            	smpsVcAttackRate    $00, $00, $00, $00
000A1DE7                            	smpsVcAmpMod        $00, $00, $00, $00
000A1DE7                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1DE7                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1DE7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1DE7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1DE7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1DE7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1E00                            		even
000A1E00                            SoundA6:	incbin	sound\soundA6.bin
000A1E30                            		even
000A1E30                            SoundA7:	incbin	sound\soundA7.bin
000A1E60                            		even
000A1E60                            SoundA8:	incbin	sound\soundA8.bin
000A1E94                            		even
000A1E94                            SoundA9:	incbin	sound\soundA9.bin
000A1EA6                            		even
000A1EA6                            SoundAA:	incbin	sound\soundAA.bin
000A1EE8                            		even
000A1EE8                            SoundAB:	incbin	sound\soundAB.bin
000A1F08                            		even
000A1F08                            SoundAC:	incbin	sound\soundAC.bin
000A1F3C                            		even
000A1F3C                            SoundAD:	incbin	sound\soundAD.bin
000A1F72                            		even
000A1F72                            SoundAE:	incbin	sound\soundAE.bin
000A1FBC                            		even
000A1FBC                            SoundAF:	incbin	sound\soundAF.bin
000A1FEA                            		even
000A1FEA                            SoundB0:	incbin	sound\soundB0.bin
000A201C                            		even
000A201C                            SoundB1:	incbin	sound\soundB1.bin
000A2048                            		even
000A2048                            SoundB2:	incbin	sound\soundB2.bin
000A2098                            		even
000A2098                            SoundB3:	incbin	sound\soundB3.bin
000A20E2                            		even
000A20E2                            SoundB4:	include	sound\soundB4.asm
000A20E2                            SndB4_Bumper_Header:
000A20E2 =00000001                  smpsHeaderStartSong = 1
000A20E2 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A20E4 01                         	smpsHeaderTempoSFX  $01
000A20E5 03                         	smpsHeaderChanSFX   $03
000A20E6                            
000A20F8                            
000A20F8                            ; FM5 Data
000A20F8                            SndB4_Bumper_FM5:
000A20FA F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A20FD                            
000A20FD                            ; FM4 Data
000A20FD                            SndB4_Bumper_FM4:
000A20FD F2                         	smpsStop
000A20FE                            
000A20FE                            SndB4_Bumper_Jump00:
000A20FE A020                       	dc.b	nG2, $20
000A2100 F2                         	smpsStop
000A2101                            
000A2101                            ; FM3 Data
000A2101                            SndB4_Bumper_FM3:
000A2101 F2                         	smpsStop
000A2102                            
000A2102                            SndB4_Bumper_Voices:
000A2102                            ;	Voice $00
000A2102                            ;	$32
000A2102                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A2102                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A2102                            	smpsVcAlgorithm     $02
000A2102                            	smpsVcFeedback      $06
000A2102                            	smpsVcUnusedBits    $00
000A2102                            	smpsVcDetune        $07, $07, $02, $00
000A2102                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A2102                            	smpsVcRateScale     $00, $00, $00, $00
000A2102                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2102                            	smpsVcAmpMod        $00, $00, $00, $00
000A2102                            	smpsVcDecayRate1    $08, $00, $00, $09
000A2102                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A2102                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2102                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A2102 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2102 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A211C 00                         		even
000A211C                            SoundB5:	incbin	sound\soundB5.bin
000A213A 00                         		even
000A213A                            SoundB6:	incbin	sound\soundB6.bin
000A2158                            		even
000A2158                            SoundB7:	incbin	sound\soundB7.bin
000A2194                            		even
000A2194                            SoundB8:	incbin	sound\soundB8.bin
000A21B2                            		even
000A21B2                            SoundB9:	incbin	sound\soundB9.bin
000A2216                            		even
000A2216                            SoundBA:	incbin	sound\soundBA.bin
000A223E                            		even
000A223E                            SoundBB:	incbin	sound\soundBB.bin
000A226A                            		even
000A226A                            SoundBC:	incbin	sound\soundBC.bin
000A22AC                            		even
000A22AC                            SoundBD:	incbin	sound\soundBD.bin
000A2300                            		even
000A2300                            SoundBE:	incbin	sound\soundBE.bin
000A233A                            		even
000A233A                            SoundBF:	incbin	sound\soundBF.bin
000A23AC                            		even
000A23AC                            SoundC0:	incbin	sound\soundC0.bin
000A23DA                            		even
000A23DA                            SoundC1:	incbin	sound\soundC1.bin
000A2434                            		even
000A2434                            SoundC2:	incbin	sound\soundC2.bin
000A245E                            		even
000A245E                            SoundC3:	incbin	sound\soundC3.bin
000A24D8                            		even
000A24D8                            SoundC4:	incbin	sound\soundC4.bin
000A25D6                            		even
000A25D6                            SoundC5:	incbin	sound\soundC5.bin
000A263E                            		even
000A263E                            SoundC6:	incbin	sound\soundC6.bin
000A2680                            		even
000A2680                            SoundC7:	incbin	sound\soundC7.bin
000A26AE                            		even
000A26AE                            SoundC8:	incbin	sound\soundC8.bin
000A26C0                            		even
000A26C0                            SoundC9:	incbin	sound\soundC9.bin
000A26EE                            		even
000A26EE                            SoundCA:	incbin	sound\soundCA.bin
000A271C                            		even
000A271C                            SoundCB:	incbin	sound\soundCB.bin
000A2768                            		even
000A2768                            SoundCC:	incbin	sound\C9.ssf
000A2796                            		even
000A2796                            SoundCD:	incbin	sound\soundCD.bin
000A27C2                            		even
000A27C2                            SoundCE:	incbin	sound\soundCE.bin
000A27E0 00                         		even
000A27E0                            SoundCF:	incbin	sound\soundCF.bin
000A2818                            		even
000A2818                            SoundD0:	incbin	sound\soundD0.bin
000A2852                            		even
000A2852                            SegaPCM:	incbin	sound\segapcm.bin
000BC9A8                            SegaPCM_end:	even
000BC9A8                            
000BC9A8                            IdiotPCM:	incbin	sound\youare.bin
000C6A7A 00                         IdiotPCM_end:	even
000C6A7A                            
000C6A7A                            Minecraft:	include	minecraft\code\main.asm
000C6A7A                            ; Minecraft: Very Legacy Console Edition
000C6A7A                            ; Main file
000C6A7A                            
000C6A7A                            	include	minecraft\code\variables.asm
000C6A7A                            ; Minecraft: Very Legacy Console Edition
000C6A7A                            ; Variable Definitions
000C6A7A                            
000C6A7A =00000040                  MAP_HEIGHT	equ	64
000C6A7A =00000100                  MAP_WIDTH	equ	256
000C6A7A                            
000C6A7A                            		rsset	$FF0000
000C6A7A =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C6A7A =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C6A7A                            
000C6A7A                            		rsset	$FFFF8000
000C6A7A =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C6A7A                            
000C6A7A =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C6A7A =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C6A7A =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C6A7A =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6A7A =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6A7A                            
000C6A7A                            MC_Init:
000C6A7A 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C6A7E 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C6A84                            
000C6A84 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C6A88 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C6A8C 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C6A90 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C6A94                            
000C6A94                            
000C6A94                            
000C6A94 6000 FFFE                  		bra.w	*			; spin infinitely
000C6A98                            
000C6A98                            ; ===========================================================================
000C6A98                            ; ---------------------------------------------------------------------------
000C6A98                            ; Clear The Screen
000C6A98                            ; ---------------------------------------------------------------------------
000C6A98                            MC_ClearScreen:
000C6A98 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C6A9C                            
000C6A9C 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C6AA2 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6AA6 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C6AAC 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AB2                            
000C6AB2 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6AB4 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C6AB6                            
000C6AB6 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C6ABC 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6AC0 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C6AC6 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6ACC                            
000C6ACC 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6ACE 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C6AD0                            
000C6AD0 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C6AD6 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6ADA 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C6AE0 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AE6                            
000C6AE6 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6AE8 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C6AEA                            
000C6AEA 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C6AEE 4E75                       		rts				; return
000C6AF0                            ; ---------------------------------------------------------------------------
000C6AF0                            
000C6AF0                            ; ===========================================================================
000C6AF0                            ; ---------------------------------------------------------------------------
000C6AF0                            ; Load The Palette
000C6AF0                            ; ---------------------------------------------------------------------------
000C6AF0                            MC_LoadPalette:
000C6AF0 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C6AF2 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C6AF4                            
000C6AF4                            .updatePalette:
000C6AF4 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C6AFA                            		
000C6AFA 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C6AFE 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C6B00 E288                       		lsr.l	#1,d0			; divide by two
000C6B02                            
000C6B02 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C6B06 1200                       		move.b	d0,d1			; ^
000C6B08 3C81                       		move.w	d1,(a6)			; ^
000C6B0A                            
000C6B0A E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C6B0C 323C 9600                  		move.w	#$9600,d1		; ^
000C6B10 1200                       		move.b	d0,d1			; ^
000C6B12 3C81                       		move.w	d1,(a6)			; ^
000C6B14                            
000C6B14 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C6B16 323C 9700                  		move.w	#$9700,d1		; ^
000C6B1A 1200                       		move.b	d0,d1			; ^
000C6B1C 3C81                       		move.w	d1,(a6)			; ^
000C6B1E                            
000C6B1E 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C6B24                            
000C6B24                            .waitForScan:
000C6B24                            	;	move.w	(a6),ccr		; is v-blank still active?
000C6B24                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C6B24 4E75                       		rts				; return
000C6B26                            ; ---------------------------------------------------------------------------
000C6B26                            
000C6B26                            MC_Palette:
000C6B26 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C6B46 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C6B66 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6B86 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6B86 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6BA6                            ; end of 'ROM'
000C6BA6                            EndOfRom:
000C6BA6                            
000C6BA6                            
